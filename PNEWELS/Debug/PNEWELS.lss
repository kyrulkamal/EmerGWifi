
PNEWELS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000075a  00800200  000099b6  00009a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000099b6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000199a  0080095a  0080095a  0000a1c4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000a1c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000060  00000000  00000000  0000a1c7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000a228  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a00  00000000  00000000  0000a26c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001516b  00000000  00000000  0000ac6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003986  00000000  00000000  0001fdd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007f60  00000000  00000000  0002375d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001ef0  00000000  00000000  0002b6c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000408a  00000000  00000000  0002d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009d68  00000000  00000000  0003163a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000988  00000000  00000000  0003b3a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	92 c1       	rjmp	.+804    	; 0x326 <__ctors_end>
       2:	00 00       	nop
       4:	34 c7       	rjmp	.+3688   	; 0xe6e <__vector_1>
       6:	00 00       	nop
       8:	5f c7       	rjmp	.+3774   	; 0xec8 <__vector_2>
       a:	00 00       	nop
       c:	8a c7       	rjmp	.+3860   	; 0xf22 <__vector_3>
       e:	00 00       	nop
      10:	b5 c7       	rjmp	.+3946   	; 0xf7c <__vector_4>
      12:	00 00       	nop
      14:	e0 c7       	rjmp	.+4032   	; 0xfd6 <__vector_5>
      16:	00 00       	nop
      18:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_6>
      1c:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_7>
      20:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_8>
      24:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_9>
      28:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_10>
      2c:	9c c1       	rjmp	.+824    	; 0x366 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9a c1       	rjmp	.+820    	; 0x366 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c1       	rjmp	.+816    	; 0x366 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c1       	rjmp	.+812    	; 0x366 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 11 36 	jmp	0x6c22	; 0x6c22 <__vector_15>
      40:	92 c1       	rjmp	.+804    	; 0x366 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c1       	rjmp	.+800    	; 0x366 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c1       	rjmp	.+796    	; 0x366 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c1       	rjmp	.+792    	; 0x366 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c1       	rjmp	.+788    	; 0x366 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c1       	rjmp	.+784    	; 0x366 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c1       	rjmp	.+780    	; 0x366 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 e3 35 	jmp	0x6bc6	; 0x6bc6 <__vector_23>
      60:	82 c1       	rjmp	.+772    	; 0x366 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c1       	rjmp	.+768    	; 0x366 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c1       	rjmp	.+764    	; 0x366 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c1       	rjmp	.+760    	; 0x366 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c1       	rjmp	.+756    	; 0x366 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c1       	rjmp	.+752    	; 0x366 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c1       	rjmp	.+748    	; 0x366 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c1       	rjmp	.+744    	; 0x366 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c1       	rjmp	.+740    	; 0x366 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c1       	rjmp	.+736    	; 0x366 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c1       	rjmp	.+732    	; 0x366 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c1       	rjmp	.+728    	; 0x366 <__bad_interrupt>
      8e:	00 00       	nop
      90:	82 c6       	rjmp	.+3332   	; 0xd96 <__vector_36>
      92:	00 00       	nop
      94:	68 c1       	rjmp	.+720    	; 0x366 <__bad_interrupt>
      96:	00 00       	nop
      98:	66 c1       	rjmp	.+716    	; 0x366 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d6 c3       	rjmp	.+1964   	; 0x84a <__vector_39>
      9e:	00 00       	nop
      a0:	62 c1       	rjmp	.+708    	; 0x366 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	60 c1       	rjmp	.+704    	; 0x366 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_42>
      ac:	5c c1       	rjmp	.+696    	; 0x366 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5a c1       	rjmp	.+692    	; 0x366 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	58 c1       	rjmp	.+688    	; 0x366 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	56 c1       	rjmp	.+684    	; 0x366 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	54 c1       	rjmp	.+680    	; 0x366 <__bad_interrupt>
      be:	00 00       	nop
      c0:	52 c1       	rjmp	.+676    	; 0x366 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	50 c1       	rjmp	.+672    	; 0x366 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4e c1       	rjmp	.+668    	; 0x366 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4c c1       	rjmp	.+664    	; 0x366 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4a c1       	rjmp	.+660    	; 0x366 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	48 c1       	rjmp	.+656    	; 0x366 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	46 c1       	rjmp	.+652    	; 0x366 <__bad_interrupt>
      da:	00 00       	nop
      dc:	44 c1       	rjmp	.+648    	; 0x366 <__bad_interrupt>
      de:	00 00       	nop
      e0:	42 c1       	rjmp	.+644    	; 0x366 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	40 c1       	rjmp	.+640    	; 0x366 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	3e c1       	rjmp	.+636    	; 0x366 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	3c c1       	rjmp	.+632    	; 0x366 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	3a c1       	rjmp	.+628    	; 0x366 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	38 c1       	rjmp	.+624    	; 0x366 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	36 c1       	rjmp	.+620    	; 0x366 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	34 c1       	rjmp	.+616    	; 0x366 <__bad_interrupt>
      fe:	00 00       	nop
     100:	32 c1       	rjmp	.+612    	; 0x366 <__bad_interrupt>
     102:	00 00       	nop
     104:	30 c1       	rjmp	.+608    	; 0x366 <__bad_interrupt>
     106:	00 00       	nop
     108:	2e c1       	rjmp	.+604    	; 0x366 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	2c c1       	rjmp	.+600    	; 0x366 <__bad_interrupt>
     10e:	00 00       	nop
     110:	2a c1       	rjmp	.+596    	; 0x366 <__bad_interrupt>
     112:	00 00       	nop
     114:	28 c1       	rjmp	.+592    	; 0x366 <__bad_interrupt>
     116:	00 00       	nop
     118:	26 c1       	rjmp	.+588    	; 0x366 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	24 c1       	rjmp	.+584    	; 0x366 <__bad_interrupt>
     11e:	00 00       	nop
     120:	22 c1       	rjmp	.+580    	; 0x366 <__bad_interrupt>
     122:	00 00       	nop
     124:	20 c1       	rjmp	.+576    	; 0x366 <__bad_interrupt>
     126:	00 00       	nop
     128:	1e c1       	rjmp	.+572    	; 0x366 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	1c c1       	rjmp	.+568    	; 0x366 <__bad_interrupt>
     12e:	00 00       	nop
     130:	1a c1       	rjmp	.+564    	; 0x366 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 04       	cpc	r13, r0
     136:	cc 05       	cpc	r28, r12
     138:	cc 05       	cpc	r28, r12
     13a:	cc 05       	cpc	r28, r12
     13c:	cc 05       	cpc	r28, r12
     13e:	cc 05       	cpc	r28, r12
     140:	cc 05       	cpc	r28, r12
     142:	cc 05       	cpc	r28, r12
     144:	47 04       	cpc	r4, r7
     146:	cc 05       	cpc	r28, r12
     148:	cc 05       	cpc	r28, r12
     14a:	cc 05       	cpc	r28, r12
     14c:	cc 05       	cpc	r28, r12
     14e:	cc 05       	cpc	r28, r12
     150:	cc 05       	cpc	r28, r12
     152:	cc 05       	cpc	r28, r12
     154:	47 04       	cpc	r4, r7
     156:	cc 05       	cpc	r28, r12
     158:	cc 05       	cpc	r28, r12
     15a:	cc 05       	cpc	r28, r12
     15c:	cc 05       	cpc	r28, r12
     15e:	cc 05       	cpc	r28, r12
     160:	cc 05       	cpc	r28, r12
     162:	cc 05       	cpc	r28, r12
     164:	6c 04       	cpc	r6, r12
     166:	cc 05       	cpc	r28, r12
     168:	cc 05       	cpc	r28, r12
     16a:	cc 05       	cpc	r28, r12
     16c:	cc 05       	cpc	r28, r12
     16e:	cc 05       	cpc	r28, r12
     170:	cc 05       	cpc	r28, r12
     172:	cc 05       	cpc	r28, r12
     174:	d0 04       	cpc	r13, r0
     176:	cc 05       	cpc	r28, r12
     178:	cc 05       	cpc	r28, r12
     17a:	cc 05       	cpc	r28, r12
     17c:	cc 05       	cpc	r28, r12
     17e:	cc 05       	cpc	r28, r12
     180:	cc 05       	cpc	r28, r12
     182:	cc 05       	cpc	r28, r12
     184:	6c 04       	cpc	r6, r12
     186:	cc 05       	cpc	r28, r12
     188:	cc 05       	cpc	r28, r12
     18a:	cc 05       	cpc	r28, r12
     18c:	cc 05       	cpc	r28, r12
     18e:	cc 05       	cpc	r28, r12
     190:	cc 05       	cpc	r28, r12
     192:	cc 05       	cpc	r28, r12
     194:	d0 04       	cpc	r13, r0
     196:	cc 05       	cpc	r28, r12
     198:	cc 05       	cpc	r28, r12
     19a:	cc 05       	cpc	r28, r12
     19c:	cc 05       	cpc	r28, r12
     19e:	cc 05       	cpc	r28, r12
     1a0:	cc 05       	cpc	r28, r12
     1a2:	cc 05       	cpc	r28, r12
     1a4:	5d 05       	cpc	r21, r13
     1a6:	cc 05       	cpc	r28, r12
     1a8:	cc 05       	cpc	r28, r12
     1aa:	cc 05       	cpc	r28, r12
     1ac:	cc 05       	cpc	r28, r12
     1ae:	cc 05       	cpc	r28, r12
     1b0:	cc 05       	cpc	r28, r12
     1b2:	cc 05       	cpc	r28, r12
     1b4:	d5 04       	cpc	r13, r5
     1b6:	cc 05       	cpc	r28, r12
     1b8:	cc 05       	cpc	r28, r12
     1ba:	cc 05       	cpc	r28, r12
     1bc:	cc 05       	cpc	r28, r12
     1be:	cc 05       	cpc	r28, r12
     1c0:	cc 05       	cpc	r28, r12
     1c2:	cc 05       	cpc	r28, r12
     1c4:	d0 04       	cpc	r13, r0
     1c6:	cc 05       	cpc	r28, r12
     1c8:	cc 05       	cpc	r28, r12
     1ca:	cc 05       	cpc	r28, r12
     1cc:	cc 05       	cpc	r28, r12
     1ce:	cc 05       	cpc	r28, r12
     1d0:	cc 05       	cpc	r28, r12
     1d2:	cc 05       	cpc	r28, r12
     1d4:	fe 04       	cpc	r15, r14
     1d6:	cc 05       	cpc	r28, r12
     1d8:	cc 05       	cpc	r28, r12
     1da:	cc 05       	cpc	r28, r12
     1dc:	cc 05       	cpc	r28, r12
     1de:	cc 05       	cpc	r28, r12
     1e0:	cc 05       	cpc	r28, r12
     1e2:	cc 05       	cpc	r28, r12
     1e4:	36 05       	cpc	r19, r6
     1e6:	cc 05       	cpc	r28, r12
     1e8:	cc 05       	cpc	r28, r12
     1ea:	cc 05       	cpc	r28, r12
     1ec:	cc 05       	cpc	r28, r12
     1ee:	cc 05       	cpc	r28, r12
     1f0:	cc 05       	cpc	r28, r12
     1f2:	cc 05       	cpc	r28, r12
     1f4:	91 05       	cpc	r25, r1
     1f6:	cc 05       	cpc	r28, r12
     1f8:	cc 05       	cpc	r28, r12
     1fa:	cc 05       	cpc	r28, r12
     1fc:	cc 05       	cpc	r28, r12
     1fe:	cc 05       	cpc	r28, r12
     200:	cc 05       	cpc	r28, r12
     202:	cc 05       	cpc	r28, r12
     204:	91 05       	cpc	r25, r1
     206:	cc 05       	cpc	r28, r12
     208:	cc 05       	cpc	r28, r12
     20a:	cc 05       	cpc	r28, r12
     20c:	cc 05       	cpc	r28, r12
     20e:	cc 05       	cpc	r28, r12
     210:	cc 05       	cpc	r28, r12
     212:	cc 05       	cpc	r28, r12
     214:	91 05       	cpc	r25, r1
     216:	cc 05       	cpc	r28, r12
     218:	cc 05       	cpc	r28, r12
     21a:	cc 05       	cpc	r28, r12
     21c:	cc 05       	cpc	r28, r12
     21e:	cc 05       	cpc	r28, r12
     220:	cc 05       	cpc	r28, r12
     222:	cc 05       	cpc	r28, r12
     224:	91 05       	cpc	r25, r1
     226:	cc 05       	cpc	r28, r12
     228:	cc 05       	cpc	r28, r12
     22a:	cc 05       	cpc	r28, r12
     22c:	cc 05       	cpc	r28, r12
     22e:	cc 05       	cpc	r28, r12
     230:	cc 05       	cpc	r28, r12
     232:	cc 05       	cpc	r28, r12
     234:	9b 05       	cpc	r25, r11
     236:	cc 05       	cpc	r28, r12
     238:	cc 05       	cpc	r28, r12
     23a:	cc 05       	cpc	r28, r12
     23c:	cc 05       	cpc	r28, r12
     23e:	cc 05       	cpc	r28, r12
     240:	cc 05       	cpc	r28, r12
     242:	cc 05       	cpc	r28, r12
     244:	c0 05       	cpc	r28, r0
     246:	cc 05       	cpc	r28, r12
     248:	cc 05       	cpc	r28, r12
     24a:	cc 05       	cpc	r28, r12
     24c:	cc 05       	cpc	r28, r12
     24e:	cc 05       	cpc	r28, r12
     250:	cc 05       	cpc	r28, r12
     252:	cc 05       	cpc	r28, r12
     254:	9b 05       	cpc	r25, r11
     256:	cc 05       	cpc	r28, r12
     258:	cc 05       	cpc	r28, r12
     25a:	cc 05       	cpc	r28, r12
     25c:	cc 05       	cpc	r28, r12
     25e:	cc 05       	cpc	r28, r12
     260:	cc 05       	cpc	r28, r12
     262:	cc 05       	cpc	r28, r12
     264:	c0 05       	cpc	r28, r0
     266:	cc 05       	cpc	r28, r12
     268:	cc 05       	cpc	r28, r12
     26a:	cc 05       	cpc	r28, r12
     26c:	cc 05       	cpc	r28, r12
     26e:	cc 05       	cpc	r28, r12
     270:	cc 05       	cpc	r28, r12
     272:	cc 05       	cpc	r28, r12
     274:	b4 05       	cpc	r27, r4
     276:	cc 05       	cpc	r28, r12
     278:	cc 05       	cpc	r28, r12
     27a:	cc 05       	cpc	r28, r12
     27c:	cc 05       	cpc	r28, r12
     27e:	cc 05       	cpc	r28, r12
     280:	cc 05       	cpc	r28, r12
     282:	cc 05       	cpc	r28, r12
     284:	66 05       	cpc	r22, r6
     286:	cc 05       	cpc	r28, r12
     288:	cc 05       	cpc	r28, r12
     28a:	cc 05       	cpc	r28, r12
     28c:	cc 05       	cpc	r28, r12
     28e:	cc 05       	cpc	r28, r12
     290:	cc 05       	cpc	r28, r12
     292:	cc 05       	cpc	r28, r12
     294:	66 05       	cpc	r22, r6
     296:	cc 05       	cpc	r28, r12
     298:	cc 05       	cpc	r28, r12
     29a:	cc 05       	cpc	r28, r12
     29c:	cc 05       	cpc	r28, r12
     29e:	cc 05       	cpc	r28, r12
     2a0:	cc 05       	cpc	r28, r12
     2a2:	cc 05       	cpc	r28, r12
     2a4:	6a 05       	cpc	r22, r10
     2a6:	cc 05       	cpc	r28, r12
     2a8:	cc 05       	cpc	r28, r12
     2aa:	cc 05       	cpc	r28, r12
     2ac:	cc 05       	cpc	r28, r12
     2ae:	cc 05       	cpc	r28, r12
     2b0:	cc 05       	cpc	r28, r12
     2b2:	cc 05       	cpc	r28, r12
     2b4:	85 05       	cpc	r24, r5
     2b6:	cc 05       	cpc	r28, r12
     2b8:	cc 05       	cpc	r28, r12
     2ba:	cc 05       	cpc	r28, r12
     2bc:	cc 05       	cpc	r28, r12
     2be:	cc 05       	cpc	r28, r12
     2c0:	cc 05       	cpc	r28, r12
     2c2:	cc 05       	cpc	r28, r12
     2c4:	c0 05       	cpc	r28, r0
     2c6:	9b 26       	eor	r9, r27
     2c8:	86 26       	eor	r8, r22
     2ca:	88 26       	eor	r8, r24
     2cc:	8a 26       	eor	r8, r26
     2ce:	8c 26       	eor	r8, r28
     2d0:	8e 26       	eor	r8, r30
     2d2:	90 26       	eor	r9, r16
     2d4:	92 26       	eor	r9, r18
     2d6:	94 26       	eor	r9, r20
     2d8:	ea 27       	eor	r30, r26
     2da:	bc 28       	or	r11, r12
     2dc:	56 29       	or	r21, r6
     2de:	f0 29       	or	r31, r0
     2e0:	8a 2a       	or	r8, r26
     2e2:	24 2b       	or	r18, r20
     2e4:	be 2b       	or	r27, r30
     2e6:	58 2c       	mov	r5, r8
     2e8:	02 2d       	mov	r16, r2
     2ea:	cf 2d       	mov	r28, r15
     2ec:	e5 2e       	mov	r14, r21
     2ee:	f8 2e       	mov	r15, r24
     2f0:	06 2f       	mov	r16, r22
     2f2:	16 2f       	mov	r17, r22
     2f4:	26 2f       	mov	r18, r22
     2f6:	3a 2f       	mov	r19, r26
     2f8:	58 2f       	mov	r21, r24
     2fa:	47 2f       	mov	r20, r23
     2fc:	89 30       	cpi	r24, 0x09	; 9
     2fe:	8c 30       	cpi	r24, 0x0C	; 12
     300:	af 30       	cpi	r26, 0x0F	; 15
     302:	8e 30       	cpi	r24, 0x0E	; 14
     304:	b2 30       	cpi	r27, 0x02	; 2
     306:	b4 30       	cpi	r27, 0x04	; 4
     308:	b6 30       	cpi	r27, 0x06	; 6
     30a:	b8 30       	cpi	r27, 0x08	; 8
     30c:	90 30       	cpi	r25, 0x00	; 0
     30e:	05 33       	cpi	r16, 0x35	; 53
     310:	0e 33       	cpi	r16, 0x3E	; 62
     312:	22 33       	cpi	r18, 0x32	; 50
     314:	18 33       	cpi	r17, 0x38	; 56
     316:	2c 33       	cpi	r18, 0x3C	; 60
     318:	36 33       	cpi	r19, 0x36	; 54
     31a:	40 33       	cpi	r20, 0x30	; 48
     31c:	4a 33       	cpi	r20, 0x3A	; 58
     31e:	54 33       	cpi	r21, 0x34	; 52
     320:	68 33       	cpi	r22, 0x38	; 56
     322:	72 33       	cpi	r23, 0x32	; 50
     324:	5e 33       	cpi	r21, 0x3E	; 62

00000326 <__ctors_end>:
     326:	11 24       	eor	r1, r1
     328:	1f be       	out	0x3f, r1	; 63
     32a:	cf ef       	ldi	r28, 0xFF	; 255
     32c:	d1 e8       	ldi	r29, 0x81	; 129
     32e:	de bf       	out	0x3e, r29	; 62
     330:	cd bf       	out	0x3d, r28	; 61
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	0c bf       	out	0x3c, r16	; 60

00000336 <__do_copy_data>:
     336:	19 e0       	ldi	r17, 0x09	; 9
     338:	a0 e0       	ldi	r26, 0x00	; 0
     33a:	b2 e0       	ldi	r27, 0x02	; 2
     33c:	e6 eb       	ldi	r30, 0xB6	; 182
     33e:	f9 e9       	ldi	r31, 0x99	; 153
     340:	00 e0       	ldi	r16, 0x00	; 0
     342:	0b bf       	out	0x3b, r16	; 59
     344:	02 c0       	rjmp	.+4      	; 0x34a <__do_copy_data+0x14>
     346:	07 90       	elpm	r0, Z+
     348:	0d 92       	st	X+, r0
     34a:	aa 35       	cpi	r26, 0x5A	; 90
     34c:	b1 07       	cpc	r27, r17
     34e:	d9 f7       	brne	.-10     	; 0x346 <__do_copy_data+0x10>

00000350 <__do_clear_bss>:
     350:	22 e2       	ldi	r18, 0x22	; 34
     352:	aa e5       	ldi	r26, 0x5A	; 90
     354:	b9 e0       	ldi	r27, 0x09	; 9
     356:	01 c0       	rjmp	.+2      	; 0x35a <.do_clear_bss_start>

00000358 <.do_clear_bss_loop>:
     358:	1d 92       	st	X+, r1

0000035a <.do_clear_bss_start>:
     35a:	a4 3f       	cpi	r26, 0xF4	; 244
     35c:	b2 07       	cpc	r27, r18
     35e:	e1 f7       	brne	.-8      	; 0x358 <.do_clear_bss_loop>
     360:	5b d5       	rcall	.+2742   	; 0xe18 <main>
     362:	0c 94 d9 4c 	jmp	0x99b2	; 0x99b2 <_exit>

00000366 <__bad_interrupt>:
     366:	4c ce       	rjmp	.-872    	; 0x0 <__vectors>

00000368 <APP_EepromReadByte>:
  for (uint16_t i = 0; i < size; i++)
  {
    if (APP_EepromReadByte(address + i) != data[i])
      APP_EepromWriteByte(address + i, data[i]);
  }
}
     368:	f9 99       	sbic	0x1f, 1	; 31
     36a:	fe cf       	rjmp	.-4      	; 0x368 <APP_EepromReadByte>
     36c:	92 bd       	out	0x22, r25	; 34
     36e:	81 bd       	out	0x21, r24	; 33
     370:	f8 9a       	sbi	0x1f, 0	; 31
     372:	80 b5       	in	r24, 0x20	; 32
     374:	08 95       	ret

00000376 <APP_EepromRead>:

/*****************************************************************************
*****************************************************************************/
void APP_EepromRead(uint16_t address, uint8_t *data, uint16_t size)
{
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
  for (uint16_t i = 0; i < size; i++)
     382:	41 15       	cp	r20, r1
     384:	51 05       	cpc	r21, r1
     386:	79 f0       	breq	.+30     	; 0x3a6 <APP_EepromRead+0x30>
     388:	8b 01       	movw	r16, r22
     38a:	04 0f       	add	r16, r20
     38c:	15 1f       	adc	r17, r21
     38e:	eb 01       	movw	r28, r22
     390:	7c 01       	movw	r14, r24
     392:	e6 1a       	sub	r14, r22
     394:	f7 0a       	sbc	r15, r23
  {
    data[i] = APP_EepromReadByte(address + i);
     396:	c7 01       	movw	r24, r14
     398:	8c 0f       	add	r24, r28
     39a:	9d 1f       	adc	r25, r29
     39c:	e5 df       	rcall	.-54     	; 0x368 <APP_EepromReadByte>
     39e:	89 93       	st	Y+, r24

/*****************************************************************************
*****************************************************************************/
void APP_EepromRead(uint16_t address, uint8_t *data, uint16_t size)
{
  for (uint16_t i = 0; i < size; i++)
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	c1 f7       	brne	.-16     	; 0x396 <APP_EepromRead+0x20>
  {
    data[i] = APP_EepromReadByte(address + i);
  }
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	08 95       	ret

000003b4 <APP_IbLoadSettings>:
}

/*****************************************************************************
*****************************************************************************/
void APP_IbLoadSettings(void)
{
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	61 97       	sbiw	r28, 0x11	; 17
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
  APP_EepromRead(APP_IB_EEPROM_OFFSET, (uint8_t *)&appIb, sizeof(appIb));
     3d0:	4a e2       	ldi	r20, 0x2A	; 42
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	62 e6       	ldi	r22, 0x62	; 98
     3d6:	70 e2       	ldi	r23, 0x20	; 32
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	cc df       	rcall	.-104    	; 0x376 <APP_EepromRead>

  if (APP_EEPROM_MAGIC != appIb.magic)
     3de:	80 91 88 20 	lds	r24, 0x2088
     3e2:	90 91 89 20 	lds	r25, 0x2089
     3e6:	a0 91 8a 20 	lds	r26, 0x208A
     3ea:	b0 91 8b 20 	lds	r27, 0x208B
     3ee:	81 34       	cpi	r24, 0x41	; 65
     3f0:	9c 46       	sbci	r25, 0x6C	; 108
     3f2:	a5 46       	sbci	r26, 0x65	; 101
     3f4:	b8 47       	sbci	r27, 0x78	; 120
     3f6:	09 f4       	brne	.+2      	; 0x3fa <APP_IbLoadSettings+0x46>
     3f8:	7b c0       	rjmp	.+246    	; 0x4f0 <APP_IbLoadSettings+0x13c>
  {
    char hex[] = "0123456789abcdef";
     3fa:	81 e1       	ldi	r24, 0x11	; 17
     3fc:	e7 e1       	ldi	r30, 0x17	; 23
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	de 01       	movw	r26, r28
     402:	11 96       	adiw	r26, 0x01	; 1
     404:	01 90       	ld	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	8a 95       	dec	r24
     40a:	e1 f7       	brne	.-8      	; 0x404 <APP_IbLoadSettings+0x50>

/*-------------Initialize RF parameter----------------*/
    appIb.addr = rf_init(DEVICE_ADDRESS_L,PNEWELS_Buffer.deviceAddress);
     40c:	0f 2e       	mov	r0, r31
     40e:	fa eb       	ldi	r31, 0xBA	; 186
     410:	ef 2e       	mov	r14, r31
     412:	ff e1       	ldi	r31, 0x1F	; 31
     414:	ff 2e       	mov	r15, r31
     416:	f0 2d       	mov	r31, r0
     418:	f7 01       	movw	r30, r14
     41a:	63 8d       	ldd	r22, Z+27	; 0x1b
     41c:	74 8d       	ldd	r23, Z+28	; 0x1c
     41e:	8c ef       	ldi	r24, 0xFC	; 252
     420:	9f e0       	ldi	r25, 0x0F	; 15
     422:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <rf_init>
     426:	02 e6       	ldi	r16, 0x62	; 98
     428:	10 e2       	ldi	r17, 0x20	; 32
     42a:	f8 01       	movw	r30, r16
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	80 83       	st	Z, r24
    appIb.panId = rf_init(DEVICE_PAN_L,PNEWELS_Buffer.devicePAN);
     430:	f7 01       	movw	r30, r14
     432:	65 8d       	ldd	r22, Z+29	; 0x1d
     434:	76 8d       	ldd	r23, Z+30	; 0x1e
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e1       	ldi	r25, 0x10	; 16
     43a:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <rf_init>
     43e:	f8 01       	movw	r30, r16
     440:	95 83       	std	Z+5, r25	; 0x05
     442:	84 83       	std	Z+4, r24	; 0x04
    appIb.channel = rf_init(DEVICE_CHANNEL_L,PNEWELS_Buffer.deviceChannel);
     444:	f7 01       	movw	r30, r14
     446:	61 8d       	ldd	r22, Z+25	; 0x19
     448:	72 8d       	ldd	r23, Z+26	; 0x1a
     44a:	8e ef       	ldi	r24, 0xFE	; 254
     44c:	9f e0       	ldi	r25, 0x0F	; 15
     44e:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <rf_init>
     452:	f8 01       	movw	r30, r16
     454:	93 83       	std	Z+3, r25	; 0x03
     456:	82 83       	std	Z+2, r24	; 0x02
//------------------------------------------------------
/*-------------Initialize Device parameter----------------*/
	/*PNEWELS_Buffer.groupID = readE2prom(GROUP_ID);*/

    memset(appIb.name, ' ', sizeof(appIb.name));
     458:	40 e2       	ldi	r20, 0x20	; 32
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	60 e2       	ldi	r22, 0x20	; 32
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	88 e6       	ldi	r24, 0x68	; 104
     462:	90 e2       	ldi	r25, 0x20	; 32
     464:	0e 94 b6 4c 	call	0x996c	; 0x996c <memset>
    memcpy(appIb.name, "Device_xxxx", strlen("Device_xxxx"));
     468:	8b e0       	ldi	r24, 0x0B	; 11
     46a:	eb e0       	ldi	r30, 0x0B	; 11
     46c:	f2 e0       	ldi	r31, 0x02	; 2
     46e:	a8 e6       	ldi	r26, 0x68	; 104
     470:	b0 e2       	ldi	r27, 0x20	; 32
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <APP_IbLoadSettings+0xbe>
    appIb.name[7] = hex[(appIb.addr >> 12) & 0x0f];
     47a:	f8 01       	movw	r30, r16
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	fc 01       	movw	r30, r24
     482:	ef 2f       	mov	r30, r31
     484:	ff 27       	eor	r31, r31
     486:	e2 95       	swap	r30
     488:	ef 70       	andi	r30, 0x0F	; 15
     48a:	21 e0       	ldi	r18, 0x01	; 1
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	2c 0f       	add	r18, r28
     490:	3d 1f       	adc	r19, r29
     492:	e2 0f       	add	r30, r18
     494:	f3 1f       	adc	r31, r19
     496:	20 81       	ld	r18, Z
     498:	f8 01       	movw	r30, r16
     49a:	25 87       	std	Z+13, r18	; 0x0d
    appIb.name[8] = hex[(appIb.addr >> 8) & 0x0f];
     49c:	e9 2f       	mov	r30, r25
     49e:	ff 27       	eor	r31, r31
     4a0:	ef 70       	andi	r30, 0x0F	; 15
     4a2:	ff 27       	eor	r31, r31
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	2c 0f       	add	r18, r28
     4aa:	3d 1f       	adc	r19, r29
     4ac:	e2 0f       	add	r30, r18
     4ae:	f3 1f       	adc	r31, r19
     4b0:	20 81       	ld	r18, Z
     4b2:	f8 01       	movw	r30, r16
     4b4:	26 87       	std	Z+14, r18	; 0x0e
    appIb.name[9] = hex[(appIb.addr >> 4) & 0x0f];
     4b6:	fc 01       	movw	r30, r24
     4b8:	f2 95       	swap	r31
     4ba:	e2 95       	swap	r30
     4bc:	ef 70       	andi	r30, 0x0F	; 15
     4be:	ef 27       	eor	r30, r31
     4c0:	ff 70       	andi	r31, 0x0F	; 15
     4c2:	ef 27       	eor	r30, r31
     4c4:	ef 70       	andi	r30, 0x0F	; 15
     4c6:	ff 27       	eor	r31, r31
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	2c 0f       	add	r18, r28
     4ce:	3d 1f       	adc	r19, r29
     4d0:	e2 0f       	add	r30, r18
     4d2:	f3 1f       	adc	r31, r19
     4d4:	20 81       	ld	r18, Z
     4d6:	f8 01       	movw	r30, r16
     4d8:	27 87       	std	Z+15, r18	; 0x0f
    appIb.name[10] = hex[appIb.addr & 0x0f];
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	99 27       	eor	r25, r25
     4de:	e1 e0       	ldi	r30, 0x01	; 1
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ec 0f       	add	r30, r28
     4e4:	fd 1f       	adc	r31, r29
     4e6:	e8 0f       	add	r30, r24
     4e8:	f9 1f       	adc	r31, r25
     4ea:	80 81       	ld	r24, Z
     4ec:	f8 01       	movw	r30, r16
     4ee:	80 8b       	std	Z+16, r24	; 0x10
  }
}
     4f0:	61 96       	adiw	r28, 0x11	; 17
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <APP_IbLoadSettings_WPS>:

void APP_IbLoadSettings_WPS(void)
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	APP_EepromRead(APP_IB_EEPROM_OFFSET, (uint8_t *)&appIb, sizeof(appIb));
     50e:	4a e2       	ldi	r20, 0x2A	; 42
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	62 e6       	ldi	r22, 0x62	; 98
     514:	70 e2       	ldi	r23, 0x20	; 32
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	2d df       	rcall	.-422    	; 0x376 <APP_EepromRead>

	if (APP_EEPROM_MAGIC != appIb.magic)
     51c:	80 91 88 20 	lds	r24, 0x2088
     520:	90 91 89 20 	lds	r25, 0x2089
     524:	a0 91 8a 20 	lds	r26, 0x208A
     528:	b0 91 8b 20 	lds	r27, 0x208B
     52c:	81 34       	cpi	r24, 0x41	; 65
     52e:	9c 46       	sbci	r25, 0x6C	; 108
     530:	a5 46       	sbci	r26, 0x65	; 101
     532:	b8 47       	sbci	r27, 0x78	; 120
     534:	11 f1       	breq	.+68     	; 0x57a <APP_IbLoadSettings_WPS+0x70>
	{
		char hex[] = "0123456789abcdef";

		/*-------------Initialize RF parameter----------------*/
		appIb.addr = WPS_ADDRESS;
     536:	c2 e6       	ldi	r28, 0x62	; 98
     538:	d0 e2       	ldi	r29, 0x20	; 32
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	99 83       	std	Y+1, r25	; 0x01
     540:	88 83       	st	Y, r24
		appIb.panId = WPS_PANID;
     542:	9d 83       	std	Y+5, r25	; 0x05
     544:	8c 83       	std	Y+4, r24	; 0x04
		appIb.channel = WPS_CHANNEL;
     546:	8f e0       	ldi	r24, 0x0F	; 15
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9b 83       	std	Y+3, r25	; 0x03
     54c:	8a 83       	std	Y+2, r24	; 0x02
		//------------------------------------------------------

		memset(appIb.name, ' ', sizeof(appIb.name));
     54e:	40 e2       	ldi	r20, 0x20	; 32
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	60 e2       	ldi	r22, 0x20	; 32
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	88 e6       	ldi	r24, 0x68	; 104
     558:	90 e2       	ldi	r25, 0x20	; 32
     55a:	0e 94 b6 4c 	call	0x996c	; 0x996c <memset>
		memcpy(appIb.name, "Device_xxxx", strlen("Device_xxxx"));
     55e:	8b e0       	ldi	r24, 0x0B	; 11
     560:	eb e0       	ldi	r30, 0x0B	; 11
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	a8 e6       	ldi	r26, 0x68	; 104
     566:	b0 e2       	ldi	r27, 0x20	; 32
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	8a 95       	dec	r24
     56e:	e1 f7       	brne	.-8      	; 0x568 <APP_IbLoadSettings_WPS+0x5e>
		appIb.name[7] = hex[(appIb.addr >> 12) & 0x0f];
     570:	86 e6       	ldi	r24, 0x66	; 102
     572:	8d 87       	std	Y+13, r24	; 0x0d
		appIb.name[8] = hex[(appIb.addr >> 8) & 0x0f];
     574:	8e 87       	std	Y+14, r24	; 0x0e
		appIb.name[9] = hex[(appIb.addr >> 4) & 0x0f];
     576:	8f 87       	std	Y+15, r24	; 0x0f
		appIb.name[10] = hex[appIb.addr & 0x0f];
     578:	88 8b       	std	Y+16, r24	; 0x10
	}
	APP_NwkInit(); //execute new setting
     57a:	4e d0       	rcall	.+156    	; 0x618 <APP_NwkInit>
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <appNwkDataConf>:
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
    if (req == &appNwkBuffer[idx].req)
     582:	29 e0       	ldi	r18, 0x09	; 9
     584:	8c 35       	cpi	r24, 0x5C	; 92
     586:	92 07       	cpc	r25, r18
     588:	69 f0       	breq	.+26     	; 0x5a4 <appNwkDataConf+0x22>
     58a:	4d ed       	ldi	r20, 0xDD	; 221
     58c:	59 e0       	ldi	r21, 0x09	; 9
     58e:	bc 01       	movw	r22, r24
*****************************************************************************/
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
     590:	21 e0       	ldi	r18, 0x01	; 1
    if (req == &appNwkBuffer[idx].req)
     592:	46 17       	cp	r20, r22
     594:	57 07       	cpc	r21, r23
     596:	39 f0       	breq	.+14     	; 0x5a6 <appNwkDataConf+0x24>
*****************************************************************************/
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	4f 57       	subi	r20, 0x7F	; 127
     59c:	5f 4f       	sbci	r21, 0xFF	; 255
     59e:	24 31       	cpi	r18, 0x14	; 20
     5a0:	c1 f7       	brne	.-16     	; 0x592 <appNwkDataConf+0x10>
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <appNwkDataConf+0x24>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
    if (req == &appNwkBuffer[idx].req)
      break;

  if (NWK_SUCCESS_STATUS == req->status)
     5a6:	fc 01       	movw	r30, r24
     5a8:	37 85       	ldd	r19, Z+15	; 0x0f
     5aa:	31 11       	cpse	r19, r1
     5ac:	0e c0       	rjmp	.+28     	; 0x5ca <appNwkDataConf+0x48>
  {
    appNwkBuffer[idx].busy = false;
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	f6 95       	lsr	r31
     5b4:	fe 2f       	mov	r31, r30
     5b6:	ee 27       	eor	r30, r30
     5b8:	f7 95       	ror	r31
     5ba:	e7 95       	ror	r30
     5bc:	2e 0f       	add	r18, r30
     5be:	3f 1f       	adc	r19, r31
     5c0:	f9 01       	movw	r30, r18
     5c2:	e6 5a       	subi	r30, 0xA6	; 166
     5c4:	f6 4f       	sbci	r31, 0xF6	; 246
     5c6:	10 82       	st	Z, r1
     5c8:	08 95       	ret
  }
  else
  {
    if (--appNwkBuffer[idx].retries)
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	f9 01       	movw	r30, r18
     5ce:	f6 95       	lsr	r31
     5d0:	fe 2f       	mov	r31, r30
     5d2:	ee 27       	eor	r30, r30
     5d4:	f7 95       	ror	r31
     5d6:	e7 95       	ror	r30
     5d8:	e2 0f       	add	r30, r18
     5da:	f3 1f       	adc	r31, r19
     5dc:	e6 5a       	subi	r30, 0xA6	; 166
     5de:	f6 4f       	sbci	r31, 0xF6	; 246
     5e0:	41 81       	ldd	r20, Z+1	; 0x01
     5e2:	41 50       	subi	r20, 0x01	; 1
     5e4:	41 83       	std	Z+1, r20	; 0x01
     5e6:	44 23       	and	r20, r20
     5e8:	19 f0       	breq	.+6      	; 0x5f0 <appNwkDataConf+0x6e>
      NWK_DataReq(req);
     5ea:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <NWK_DataReq>
     5ee:	08 95       	ret
    else
      appNwkBuffer[idx].busy = false;
     5f0:	f9 01       	movw	r30, r18
     5f2:	f6 95       	lsr	r31
     5f4:	fe 2f       	mov	r31, r30
     5f6:	ee 27       	eor	r30, r30
     5f8:	f7 95       	ror	r31
     5fa:	e7 95       	ror	r30
     5fc:	2e 0f       	add	r18, r30
     5fe:	3f 1f       	adc	r19, r31
     600:	f9 01       	movw	r30, r18
     602:	e6 5a       	subi	r30, 0xA6	; 166
     604:	f6 4f       	sbci	r31, 0xF6	; 246
     606:	10 82       	st	Z, r1
     608:	08 95       	ret

0000060a <appNwkDataInd>:
/*************************************************************************//**
*****************************************************************************/
static bool appNwkDataInd(NWK_DataInd_t *ind)
{
  //return APP_CommandReceived(ind->data, ind->size);
  return pneIncomingData(ind->data, ind->size);
     60a:	fc 01       	movw	r30, r24
     60c:	61 85       	ldd	r22, Z+9	; 0x09
     60e:	87 81       	ldd	r24, Z+7	; 0x07
     610:	90 85       	ldd	r25, Z+8	; 0x08
     612:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <pneIncomingData>
}
     616:	08 95       	ret

00000618 <APP_NwkInit>:
}

/*************************************************************************//**
*****************************************************************************/
void APP_NwkInit(void)
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
  NWK_SetAddr(appIb.addr);
     61c:	c2 e6       	ldi	r28, 0x62	; 98
     61e:	d0 e2       	ldi	r29, 0x20	; 32
     620:	88 81       	ld	r24, Y
     622:	99 81       	ldd	r25, Y+1	; 0x01
     624:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <NWK_SetAddr>
  NWK_SetPanId(appIb.panId);
     628:	8c 81       	ldd	r24, Y+4	; 0x04
     62a:	9d 81       	ldd	r25, Y+5	; 0x05
     62c:	0e 94 00 0c 	call	0x1800	; 0x1800 <NWK_SetPanId>
  PHY_SetChannel(appIb.channel);
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	0e 94 44 12 	call	0x2488	; 0x2488 <PHY_SetChannel>
  PHY_SetRxState(true);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 40 12 	call	0x2480	; 0x2480 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);
     63c:	65 e0       	ldi	r22, 0x05	; 5
     63e:	73 e0       	ldi	r23, 0x03	; 3
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 06 0c 	call	0x180c	; 0x180c <NWK_OpenEndpoint>
     646:	aa e5       	ldi	r26, 0x5A	; 90
     648:	b9 e0       	ldi	r27, 0x09	; 9
     64a:	e5 e6       	ldi	r30, 0x65	; 101
     64c:	f9 e0       	ldi	r31, 0x09	; 9
     64e:	69 e7       	ldi	r22, 0x79	; 121
     650:	73 e1       	ldi	r23, 0x13	; 19

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    appNwkBuffer[i].busy = false;
    appNwkBuffer[i].req.dstAddr = 0;
    appNwkBuffer[i].req.dstEndpoint = APP_ENDPOINT;
     652:	81 e0       	ldi	r24, 0x01	; 1
    appNwkBuffer[i].req.srcEndpoint = APP_ENDPOINT;
    appNwkBuffer[i].req.options = NWK_OPT_ACK_REQUEST;
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
    appNwkBuffer[i].req.confirm = appNwkDataConf;
     654:	41 ec       	ldi	r20, 0xC1	; 193
     656:	52 e0       	ldi	r21, 0x02	; 2

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    appNwkBuffer[i].busy = false;
     658:	1c 92       	st	X, r1
    appNwkBuffer[i].req.dstAddr = 0;
     65a:	18 96       	adiw	r26, 0x08	; 8
     65c:	1c 92       	st	X, r1
     65e:	1e 92       	st	-X, r1
     660:	17 97       	sbiw	r26, 0x07	; 7
     662:	ef 01       	movw	r28, r30
     664:	22 97       	sbiw	r28, 0x02	; 2
    appNwkBuffer[i].req.dstEndpoint = APP_ENDPOINT;
     666:	88 83       	st	Y, r24
     668:	21 96       	adiw	r28, 0x01	; 1
    appNwkBuffer[i].req.srcEndpoint = APP_ENDPOINT;
     66a:	88 83       	st	Y, r24
    appNwkBuffer[i].req.options = NWK_OPT_ACK_REQUEST;
     66c:	80 83       	st	Z, r24
     66e:	9f 01       	movw	r18, r30
     670:	28 5f       	subi	r18, 0xF8	; 248
     672:	3f 4f       	sbci	r19, 0xFF	; 255
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
     674:	32 83       	std	Z+2, r19	; 0x02
     676:	21 83       	std	Z+1, r18	; 0x01
    appNwkBuffer[i].req.confirm = appNwkDataConf;
     678:	55 83       	std	Z+5, r21	; 0x05
     67a:	44 83       	std	Z+4, r20	; 0x04
     67c:	af 57       	subi	r26, 0x7F	; 127
     67e:	bf 4f       	sbci	r27, 0xFF	; 255
     680:	ef 57       	subi	r30, 0x7F	; 127
     682:	ff 4f       	sbci	r31, 0xFF	; 255
  PHY_SetChannel(appIb.channel);
  PHY_SetRxState(true);

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
     684:	e6 17       	cp	r30, r22
     686:	f7 07       	cpc	r31, r23
     688:	39 f7       	brne	.-50     	; 0x658 <APP_NwkInit+0x40>
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
    appNwkBuffer[i].req.confirm = appNwkDataConf;
  }

  //APP_CommandReport();
  pneOutgoingData();
     68a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <pneOutgoingData>
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <APP_NwkGetBuffer>:
*****************************************************************************/
AppNwkBuffer_t *APP_NwkGetBuffer(void)
{
  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    if (false == appNwkBuffer[i].busy)
     694:	80 91 5a 09 	lds	r24, 0x095A
     698:	88 23       	and	r24, r24
     69a:	59 f0       	breq	.+22     	; 0x6b2 <APP_NwkGetBuffer+0x1e>
     69c:	eb ed       	ldi	r30, 0xDB	; 219
     69e:	f9 e0       	ldi	r31, 0x09	; 9
     6a0:	6e e6       	ldi	r22, 0x6E	; 110
     6a2:	73 e1       	ldi	r23, 0x13	; 19
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	ac 01       	movw	r20, r24
     6aa:	20 81       	ld	r18, Z
     6ac:	21 11       	cpse	r18, r1
     6ae:	18 c0       	rjmp	.+48     	; 0x6e0 <APP_NwkGetBuffer+0x4c>
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <APP_NwkGetBuffer+0x22>
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
    {
      appNwkBuffer[i].busy = true;
     6b6:	fa 01       	movw	r30, r20
     6b8:	f6 95       	lsr	r31
     6ba:	fe 2f       	mov	r31, r30
     6bc:	ee 27       	eor	r30, r30
     6be:	f7 95       	ror	r31
     6c0:	e7 95       	ror	r30
     6c2:	4e 0f       	add	r20, r30
     6c4:	5f 1f       	adc	r21, r31
     6c6:	fa 01       	movw	r30, r20
     6c8:	e6 5a       	subi	r30, 0xA6	; 166
     6ca:	f6 4f       	sbci	r31, 0xF6	; 246
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 83       	st	Z, r24
      appNwkBuffer[i].size = 0;
     6d0:	df 01       	movw	r26, r30
     6d2:	a0 58       	subi	r26, 0x80	; 128
     6d4:	bf 4f       	sbci	r27, 0xFF	; 255
     6d6:	1c 92       	st	X, r1
      appNwkBuffer[i].retries = APP_NWK_RETRIES;
     6d8:	81 83       	std	Z+1, r24	; 0x01
      return &appNwkBuffer[i];
     6da:	8e 2f       	mov	r24, r30
     6dc:	9f 2f       	mov	r25, r31
     6de:	08 95       	ret
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	ef 57       	subi	r30, 0x7F	; 127
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255

/*************************************************************************//**
*****************************************************************************/
AppNwkBuffer_t *APP_NwkGetBuffer(void)
{
  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
     6e6:	e6 17       	cp	r30, r22
     6e8:	f7 07       	cpc	r31, r23
     6ea:	f1 f6       	brne	.-68     	; 0x6a8 <APP_NwkGetBuffer+0x14>
      appNwkBuffer[i].retries = APP_NWK_RETRIES;
      return &appNwkBuffer[i];
    }
  }

  return NULL;
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
}
     6f0:	08 95       	ret

000006f2 <APP_NwkSendBuffer>:

/*************************************************************************//**
*****************************************************************************/
void APP_NwkSendBuffer(AppNwkBuffer_t *buf)
{
  if (buf->size)
     6f2:	fc 01       	movw	r30, r24
     6f4:	e0 58       	subi	r30, 0x80	; 128
     6f6:	ff 4f       	sbci	r31, 0xFF	; 255
     6f8:	20 81       	ld	r18, Z
     6fa:	22 23       	and	r18, r18
     6fc:	31 f0       	breq	.+12     	; 0x70a <APP_NwkSendBuffer+0x18>
  {
    buf->req.size = buf->size;
     6fe:	fc 01       	movw	r30, r24
     700:	26 87       	std	Z+14, r18	; 0x0e
    NWK_DataReq(&buf->req);
     702:	02 96       	adiw	r24, 0x02	; 2
     704:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <NWK_DataReq>
     708:	08 95       	ret
  }
  else
  {
    buf->busy = false;
     70a:	fc 01       	movw	r30, r24
     70c:	10 82       	st	Z, r1
     70e:	08 95       	ret

00000710 <pneVerify_received>:
#include "PNE_Factory.h"
#include "crc.h"
#include "pneConfig.h"

uint8_t pneVerify_received(uint8_t *data, uint8_t size)
{
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
	uint16_t signature_d = (((uint16_t)data[size-2]) << 8) | ((uint16_t)data[size-1]);
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	9c 01       	movw	r18, r24
     718:	26 0f       	add	r18, r22
     71a:	37 1f       	adc	r19, r23
     71c:	f9 01       	movw	r30, r18
     71e:	32 97       	sbiw	r30, 0x02	; 2
     720:	c0 81       	ld	r28, Z
     722:	d0 e0       	ldi	r29, 0x00	; 0
     724:	dc 2f       	mov	r29, r28
     726:	cc 27       	eor	r28, r28
     728:	31 96       	adiw	r30, 0x01	; 1
     72a:	20 81       	ld	r18, Z
     72c:	c2 2b       	or	r28, r18
// 	int_to_ascii((uint8_t)(signature_d >> 8));
// 	int_to_ascii((uint8_t)(signature_d));
// 	send_usart_char("\r\n");
	/*int_to_ascii(data[9]);*/
	uint16_t signature = pnesign(((char*)(data)), ((uint16_t)(size - 2)), SIGNATURE_KEY, strlen(SIGNATURE_KEY)); //need some rework
     72e:	62 50       	subi	r22, 0x02	; 2
     730:	71 09       	sbc	r23, r1
     732:	26 e0       	ldi	r18, 0x06	; 6
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	48 e2       	ldi	r20, 0x28	; 40
     738:	52 e0       	ldi	r21, 0x02	; 2
     73a:	0e 94 a6 4b 	call	0x974c	; 0x974c <pnesign>
// 	int_to_ascii((uint8_t)(signature >> 8));
// 	int_to_ascii((uint8_t)(signature));
// 	send_usart_char("\r\n");
	if (signature == signature_d )
     73e:	21 e0       	ldi	r18, 0x01	; 1
     740:	c8 17       	cp	r28, r24
     742:	d9 07       	cpc	r29, r25
     744:	09 f0       	breq	.+2      	; 0x748 <pneVerify_received+0x38>
     746:	20 e0       	ldi	r18, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}
     748:	82 2f       	mov	r24, r18
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <twi_master_bus_reset>:
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 7d 13 	sts	0x137D, r24
     756:	10 92 6f 13 	sts	0x136F, r1
     75a:	80 e9       	ldi	r24, 0x90	; 144
     75c:	80 93 bc 00 	sts	0x00BC, r24
     760:	08 95       	ret

00000762 <twi_master_write>:
     762:	61 15       	cp	r22, r1
     764:	71 05       	cpc	r23, r1
     766:	29 f1       	breq	.+74     	; 0x7b2 <twi_master_write+0x50>
     768:	80 91 6f 13 	lds	r24, 0x136F
     76c:	81 11       	cpse	r24, r1
     76e:	23 c0       	rjmp	.+70     	; 0x7b6 <twi_master_write+0x54>
     770:	e7 e7       	ldi	r30, 0x77	; 119
     772:	f3 e1       	ldi	r31, 0x13	; 19
     774:	71 83       	std	Z+1, r23	; 0x01
     776:	60 83       	st	Z, r22
     778:	13 82       	std	Z+3, r1	; 0x03
     77a:	12 82       	std	Z+2, r1	; 0x02
     77c:	15 82       	std	Z+5, r1	; 0x05
     77e:	14 82       	std	Z+4, r1	; 0x04
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 6f 13 	sts	0x136F, r24
     786:	fb 01       	movw	r30, r22
     788:	84 81       	ldd	r24, Z+4	; 0x04
     78a:	95 81       	ldd	r25, Z+5	; 0x05
     78c:	89 2b       	or	r24, r25
     78e:	21 f4       	brne	.+8      	; 0x798 <twi_master_write+0x36>
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	80 93 7d 13 	sts	0x137D, r24
     796:	03 c0       	rjmp	.+6      	; 0x79e <twi_master_write+0x3c>
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	80 93 7d 13 	sts	0x137D, r24
     79e:	85 ea       	ldi	r24, 0xA5	; 165
     7a0:	80 93 bc 00 	sts	0x00BC, r24
     7a4:	80 91 6f 13 	lds	r24, 0x136F
     7a8:	81 11       	cpse	r24, r1
     7aa:	fc cf       	rjmp	.-8      	; 0x7a4 <twi_master_write+0x42>
     7ac:	80 91 7e 13 	lds	r24, 0x137E
     7b0:	08 95       	ret
     7b2:	88 ef       	ldi	r24, 0xF8	; 248
     7b4:	08 95       	ret
     7b6:	80 e8       	ldi	r24, 0x80	; 128
     7b8:	08 95       	ret

000007ba <twi_master_read>:
     7ba:	70 93 78 13 	sts	0x1378, r23
     7be:	60 93 77 13 	sts	0x1377, r22
     7c2:	61 15       	cp	r22, r1
     7c4:	71 05       	cpc	r23, r1
     7c6:	41 f1       	breq	.+80     	; 0x818 <twi_master_read+0x5e>
     7c8:	fb 01       	movw	r30, r22
     7ca:	80 85       	ldd	r24, Z+8	; 0x08
     7cc:	91 85       	ldd	r25, Z+9	; 0x09
     7ce:	89 2b       	or	r24, r25
     7d0:	29 f1       	breq	.+74     	; 0x81c <twi_master_read+0x62>
     7d2:	80 91 6f 13 	lds	r24, 0x136F
     7d6:	81 11       	cpse	r24, r1
     7d8:	23 c0       	rjmp	.+70     	; 0x820 <twi_master_read+0x66>
     7da:	e7 e7       	ldi	r30, 0x77	; 119
     7dc:	f3 e1       	ldi	r31, 0x13	; 19
     7de:	13 82       	std	Z+3, r1	; 0x03
     7e0:	12 82       	std	Z+2, r1	; 0x02
     7e2:	15 82       	std	Z+5, r1	; 0x05
     7e4:	14 82       	std	Z+4, r1	; 0x04
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 6f 13 	sts	0x136F, r24
     7ec:	fb 01       	movw	r30, r22
     7ee:	84 81       	ldd	r24, Z+4	; 0x04
     7f0:	95 81       	ldd	r25, Z+5	; 0x05
     7f2:	89 2b       	or	r24, r25
     7f4:	21 f4       	brne	.+8      	; 0x7fe <twi_master_read+0x44>
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	80 93 7d 13 	sts	0x137D, r24
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <twi_master_read+0x4a>
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	80 93 7d 13 	sts	0x137D, r24
     804:	85 ea       	ldi	r24, 0xA5	; 165
     806:	80 93 bc 00 	sts	0x00BC, r24
     80a:	80 91 6f 13 	lds	r24, 0x136F
     80e:	81 11       	cpse	r24, r1
     810:	fc cf       	rjmp	.-8      	; 0x80a <twi_master_read+0x50>
     812:	80 91 7e 13 	lds	r24, 0x137E
     816:	08 95       	ret
     818:	88 ef       	ldi	r24, 0xF8	; 248
     81a:	08 95       	ret
     81c:	88 ef       	ldi	r24, 0xF8	; 248
     81e:	08 95       	ret
     820:	80 e8       	ldi	r24, 0x80	; 128
     822:	08 95       	ret

00000824 <twi_master_init>:
     824:	f8 94       	cli
     826:	ec eb       	ldi	r30, 0xBC	; 188
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	10 82       	st	Z, r1
     82c:	10 92 b9 00 	sts	0x00B9, r1
     830:	db 01       	movw	r26, r22
     832:	14 96       	adiw	r26, 0x04	; 4
     834:	8c 91       	ld	r24, X
     836:	80 93 b8 00 	sts	0x00B8, r24
     83a:	80 81       	ld	r24, Z
     83c:	81 60       	ori	r24, 0x01	; 1
     83e:	80 83       	st	Z, r24
     840:	78 94       	sei
     842:	10 92 6e 13 	sts	0x136E, r1
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret

0000084a <__vector_39>:
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	0b b6       	in	r0, 0x3b	; 59
     856:	0f 92       	push	r0
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	4f 93       	push	r20
     85e:	5f 93       	push	r21
     860:	6f 93       	push	r22
     862:	7f 93       	push	r23
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	af 93       	push	r26
     86a:	bf 93       	push	r27
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	80 91 b9 00 	lds	r24, 0x00B9
     874:	88 7f       	andi	r24, 0xF8	; 248
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	89 3c       	cpi	r24, 0xC9	; 201
     87a:	91 05       	cpc	r25, r1
     87c:	08 f0       	brcs	.+2      	; 0x880 <__vector_39+0x36>
     87e:	8c c1       	rjmp	.+792    	; 0xb98 <__vector_39+0x34e>
     880:	fc 01       	movw	r30, r24
     882:	88 27       	eor	r24, r24
     884:	e6 56       	subi	r30, 0x66	; 102
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	8f 4f       	sbci	r24, 0xFF	; 255
     88a:	0c 94 0a 4c 	jmp	0x9814	; 0x9814 <__tablejump2__>
     88e:	80 91 7d 13 	lds	r24, 0x137D
     892:	9e ef       	ldi	r25, 0xFE	; 254
     894:	98 0f       	add	r25, r24
     896:	93 30       	cpi	r25, 0x03	; 3
     898:	60 f4       	brcc	.+24     	; 0x8b2 <__vector_39+0x68>
     89a:	e0 91 77 13 	lds	r30, 0x1377
     89e:	f0 91 78 13 	lds	r31, 0x1378
     8a2:	80 81       	ld	r24, Z
     8a4:	8e 7f       	andi	r24, 0xFE	; 254
     8a6:	80 93 bb 00 	sts	0x00BB, r24
     8aa:	85 e8       	ldi	r24, 0x85	; 133
     8ac:	80 93 bc 00 	sts	0x00BC, r24
     8b0:	8b c1       	rjmp	.+790    	; 0xbc8 <__vector_39+0x37e>
     8b2:	85 30       	cpi	r24, 0x05	; 5
     8b4:	61 f4       	brne	.+24     	; 0x8ce <__vector_39+0x84>
     8b6:	e0 91 77 13 	lds	r30, 0x1377
     8ba:	f0 91 78 13 	lds	r31, 0x1378
     8be:	80 81       	ld	r24, Z
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	80 93 bb 00 	sts	0x00BB, r24
     8c6:	85 e8       	ldi	r24, 0x85	; 133
     8c8:	80 93 bc 00 	sts	0x00BC, r24
     8cc:	7d c1       	rjmp	.+762    	; 0xbc8 <__vector_39+0x37e>
     8ce:	40 df       	rcall	.-384    	; 0x750 <twi_master_bus_reset>
     8d0:	8b ef       	ldi	r24, 0xFB	; 251
     8d2:	80 93 7e 13 	sts	0x137E, r24
     8d6:	78 c1       	rjmp	.+752    	; 0xbc8 <__vector_39+0x37e>
     8d8:	80 91 7d 13 	lds	r24, 0x137D
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	51 f5       	brne	.+84     	; 0x934 <__vector_39+0xea>
     8e0:	e7 e7       	ldi	r30, 0x77	; 119
     8e2:	f3 e1       	ldi	r31, 0x13	; 19
     8e4:	84 81       	ldd	r24, Z+4	; 0x04
     8e6:	95 81       	ldd	r25, Z+5	; 0x05
     8e8:	01 90       	ld	r0, Z+
     8ea:	f0 81       	ld	r31, Z
     8ec:	e0 2d       	mov	r30, r0
     8ee:	20 85       	ldd	r18, Z+8	; 0x08
     8f0:	31 85       	ldd	r19, Z+9	; 0x09
     8f2:	82 17       	cp	r24, r18
     8f4:	93 07       	cpc	r25, r19
     8f6:	98 f4       	brcc	.+38     	; 0x91e <__vector_39+0xd4>
     8f8:	26 81       	ldd	r18, Z+6	; 0x06
     8fa:	37 81       	ldd	r19, Z+7	; 0x07
     8fc:	ac 01       	movw	r20, r24
     8fe:	4f 5f       	subi	r20, 0xFF	; 255
     900:	5f 4f       	sbci	r21, 0xFF	; 255
     902:	50 93 7c 13 	sts	0x137C, r21
     906:	40 93 7b 13 	sts	0x137B, r20
     90a:	f9 01       	movw	r30, r18
     90c:	e8 0f       	add	r30, r24
     90e:	f9 1f       	adc	r31, r25
     910:	80 81       	ld	r24, Z
     912:	80 93 bb 00 	sts	0x00BB, r24
     916:	85 e8       	ldi	r24, 0x85	; 133
     918:	80 93 bc 00 	sts	0x00BC, r24
     91c:	55 c1       	rjmp	.+682    	; 0xbc8 <__vector_39+0x37e>
     91e:	84 e9       	ldi	r24, 0x94	; 148
     920:	80 93 bc 00 	sts	0x00BC, r24
     924:	e7 e7       	ldi	r30, 0x77	; 119
     926:	f3 e1       	ldi	r31, 0x13	; 19
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	86 83       	std	Z+6, r24	; 0x06
     92c:	17 82       	std	Z+7, r1	; 0x07
     92e:	10 92 6f 13 	sts	0x136F, r1
     932:	4a c1       	rjmp	.+660    	; 0xbc8 <__vector_39+0x37e>
     934:	9e ef       	ldi	r25, 0xFE	; 254
     936:	98 0f       	add	r25, r24
     938:	92 30       	cpi	r25, 0x02	; 2
     93a:	38 f5       	brcc	.+78     	; 0x98a <__vector_39+0x140>
     93c:	e7 e7       	ldi	r30, 0x77	; 119
     93e:	f3 e1       	ldi	r31, 0x13	; 19
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	93 81       	ldd	r25, Z+3	; 0x03
     944:	a0 81       	ld	r26, Z
     946:	b1 81       	ldd	r27, Z+1	; 0x01
     948:	a8 0f       	add	r26, r24
     94a:	b9 1f       	adc	r27, r25
     94c:	11 96       	adiw	r26, 0x01	; 1
     94e:	2c 91       	ld	r18, X
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	93 83       	std	Z+3, r25	; 0x03
     954:	82 83       	std	Z+2, r24	; 0x02
     956:	20 93 bb 00 	sts	0x00BB, r18
     95a:	25 e8       	ldi	r18, 0x85	; 133
     95c:	20 93 bc 00 	sts	0x00BC, r18
     960:	01 90       	ld	r0, Z+
     962:	f0 81       	ld	r31, Z
     964:	e0 2d       	mov	r30, r0
     966:	24 81       	ldd	r18, Z+4	; 0x04
     968:	35 81       	ldd	r19, Z+5	; 0x05
     96a:	28 17       	cp	r18, r24
     96c:	39 07       	cpc	r19, r25
     96e:	09 f0       	breq	.+2      	; 0x972 <__vector_39+0x128>
     970:	2b c1       	rjmp	.+598    	; 0xbc8 <__vector_39+0x37e>
     972:	80 91 7d 13 	lds	r24, 0x137D
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__vector_39+0x138>
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	80 93 7d 13 	sts	0x137D, r24
     980:	23 c1       	rjmp	.+582    	; 0xbc8 <__vector_39+0x37e>
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	80 93 7d 13 	sts	0x137D, r24
     988:	1f c1       	rjmp	.+574    	; 0xbc8 <__vector_39+0x37e>
     98a:	85 30       	cpi	r24, 0x05	; 5
     98c:	21 f4       	brne	.+8      	; 0x996 <__vector_39+0x14c>
     98e:	85 ea       	ldi	r24, 0xA5	; 165
     990:	80 93 bc 00 	sts	0x00BC, r24
     994:	19 c1       	rjmp	.+562    	; 0xbc8 <__vector_39+0x37e>
     996:	dc de       	rcall	.-584    	; 0x750 <twi_master_bus_reset>
     998:	8b ef       	ldi	r24, 0xFB	; 251
     99a:	80 93 7e 13 	sts	0x137E, r24
     99e:	14 c1       	rjmp	.+552    	; 0xbc8 <__vector_39+0x37e>
     9a0:	d7 de       	rcall	.-594    	; 0x750 <twi_master_bus_reset>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	80 93 7e 13 	sts	0x137E, r24
     9a8:	0f c1       	rjmp	.+542    	; 0xbc8 <__vector_39+0x37e>
     9aa:	80 91 7d 13 	lds	r24, 0x137D
     9ae:	85 30       	cpi	r24, 0x05	; 5
     9b0:	01 f5       	brne	.+64     	; 0x9f2 <__vector_39+0x1a8>
     9b2:	e7 e7       	ldi	r30, 0x77	; 119
     9b4:	f3 e1       	ldi	r31, 0x13	; 19
     9b6:	a0 81       	ld	r26, Z
     9b8:	b1 81       	ldd	r27, Z+1	; 0x01
     9ba:	18 96       	adiw	r26, 0x08	; 8
     9bc:	8d 91       	ld	r24, X+
     9be:	9c 91       	ld	r25, X
     9c0:	19 97       	sbiw	r26, 0x09	; 9
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	24 81       	ldd	r18, Z+4	; 0x04
     9c6:	35 81       	ldd	r19, Z+5	; 0x05
     9c8:	28 17       	cp	r18, r24
     9ca:	39 07       	cpc	r19, r25
     9cc:	49 f4       	brne	.+18     	; 0x9e0 <__vector_39+0x196>
     9ce:	ec eb       	ldi	r30, 0xBC	; 188
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	8f 7b       	andi	r24, 0xBF	; 191
     9d6:	80 83       	st	Z, r24
     9d8:	80 81       	ld	r24, Z
     9da:	85 68       	ori	r24, 0x85	; 133
     9dc:	80 83       	st	Z, r24
     9de:	f4 c0       	rjmp	.+488    	; 0xbc8 <__vector_39+0x37e>
     9e0:	ec eb       	ldi	r30, 0xBC	; 188
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	80 64       	ori	r24, 0x40	; 64
     9e8:	80 83       	st	Z, r24
     9ea:	80 81       	ld	r24, Z
     9ec:	85 68       	ori	r24, 0x85	; 133
     9ee:	80 83       	st	Z, r24
     9f0:	eb c0       	rjmp	.+470    	; 0xbc8 <__vector_39+0x37e>
     9f2:	ae de       	rcall	.-676    	; 0x750 <twi_master_bus_reset>
     9f4:	8b ef       	ldi	r24, 0xFB	; 251
     9f6:	80 93 7e 13 	sts	0x137E, r24
     9fa:	e6 c0       	rjmp	.+460    	; 0xbc8 <__vector_39+0x37e>
     9fc:	20 91 bb 00 	lds	r18, 0x00BB
     a00:	80 91 7d 13 	lds	r24, 0x137D
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	69 f5       	brne	.+90     	; 0xa62 <__vector_39+0x218>
     a08:	e7 e7       	ldi	r30, 0x77	; 119
     a0a:	f3 e1       	ldi	r31, 0x13	; 19
     a0c:	a0 81       	ld	r26, Z
     a0e:	b1 81       	ldd	r27, Z+1	; 0x01
     a10:	16 96       	adiw	r26, 0x06	; 6
     a12:	6d 91       	ld	r22, X+
     a14:	7c 91       	ld	r23, X
     a16:	17 97       	sbiw	r26, 0x07	; 7
     a18:	84 81       	ldd	r24, Z+4	; 0x04
     a1a:	95 81       	ldd	r25, Z+5	; 0x05
     a1c:	ac 01       	movw	r20, r24
     a1e:	4f 5f       	subi	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	55 83       	std	Z+5, r21	; 0x05
     a24:	44 83       	std	Z+4, r20	; 0x04
     a26:	fb 01       	movw	r30, r22
     a28:	e8 0f       	add	r30, r24
     a2a:	f9 1f       	adc	r31, r25
     a2c:	20 83       	st	Z, r18
     a2e:	18 96       	adiw	r26, 0x08	; 8
     a30:	8d 91       	ld	r24, X+
     a32:	9c 91       	ld	r25, X
     a34:	19 97       	sbiw	r26, 0x09	; 9
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	48 17       	cp	r20, r24
     a3a:	59 07       	cpc	r21, r25
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__vector_39+0x206>
     a3e:	ec eb       	ldi	r30, 0xBC	; 188
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	80 64       	ori	r24, 0x40	; 64
     a46:	80 83       	st	Z, r24
     a48:	80 81       	ld	r24, Z
     a4a:	85 68       	ori	r24, 0x85	; 133
     a4c:	80 83       	st	Z, r24
     a4e:	bc c0       	rjmp	.+376    	; 0xbc8 <__vector_39+0x37e>
     a50:	ec eb       	ldi	r30, 0xBC	; 188
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	8f 7b       	andi	r24, 0xBF	; 191
     a58:	80 83       	st	Z, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	85 68       	ori	r24, 0x85	; 133
     a5e:	80 83       	st	Z, r24
     a60:	b3 c0       	rjmp	.+358    	; 0xbc8 <__vector_39+0x37e>
     a62:	76 de       	rcall	.-788    	; 0x750 <twi_master_bus_reset>
     a64:	8b ef       	ldi	r24, 0xFB	; 251
     a66:	80 93 7e 13 	sts	0x137E, r24
     a6a:	ae c0       	rjmp	.+348    	; 0xbc8 <__vector_39+0x37e>
     a6c:	20 91 bb 00 	lds	r18, 0x00BB
     a70:	80 91 7d 13 	lds	r24, 0x137D
     a74:	85 30       	cpi	r24, 0x05	; 5
     a76:	e1 f4       	brne	.+56     	; 0xab0 <__vector_39+0x266>
     a78:	e7 e7       	ldi	r30, 0x77	; 119
     a7a:	f3 e1       	ldi	r31, 0x13	; 19
     a7c:	a0 81       	ld	r26, Z
     a7e:	b1 81       	ldd	r27, Z+1	; 0x01
     a80:	16 96       	adiw	r26, 0x06	; 6
     a82:	4d 91       	ld	r20, X+
     a84:	5c 91       	ld	r21, X
     a86:	17 97       	sbiw	r26, 0x07	; 7
     a88:	84 81       	ldd	r24, Z+4	; 0x04
     a8a:	95 81       	ldd	r25, Z+5	; 0x05
     a8c:	bc 01       	movw	r22, r24
     a8e:	6f 5f       	subi	r22, 0xFF	; 255
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	75 83       	std	Z+5, r23	; 0x05
     a94:	64 83       	std	Z+4, r22	; 0x04
     a96:	da 01       	movw	r26, r20
     a98:	a8 0f       	add	r26, r24
     a9a:	b9 1f       	adc	r27, r25
     a9c:	2c 93       	st	X, r18
     a9e:	84 e9       	ldi	r24, 0x94	; 148
     aa0:	80 93 bc 00 	sts	0x00BC, r24
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	86 83       	std	Z+6, r24	; 0x06
     aa8:	17 82       	std	Z+7, r1	; 0x07
     aaa:	10 92 6f 13 	sts	0x136F, r1
     aae:	8c c0       	rjmp	.+280    	; 0xbc8 <__vector_39+0x37e>
     ab0:	4f de       	rcall	.-866    	; 0x750 <twi_master_bus_reset>
     ab2:	8b ef       	ldi	r24, 0xFB	; 251
     ab4:	80 93 7e 13 	sts	0x137E, r24
     ab8:	87 c0       	rjmp	.+270    	; 0xbc8 <__vector_39+0x37e>
     aba:	e7 e7       	ldi	r30, 0x77	; 119
     abc:	f3 e1       	ldi	r31, 0x13	; 19
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	86 83       	std	Z+6, r24	; 0x06
     ac2:	86 ef       	ldi	r24, 0xF6	; 246
     ac4:	87 83       	std	Z+7, r24	; 0x07
     ac6:	10 92 6f 13 	sts	0x136F, r1
     aca:	7e c0       	rjmp	.+252    	; 0xbc8 <__vector_39+0x37e>
     acc:	10 92 73 13 	sts	0x1373, r1
     ad0:	10 92 72 13 	sts	0x1372, r1
     ad4:	e0 e7       	ldi	r30, 0x70	; 112
     ad6:	f3 e1       	ldi	r31, 0x13	; 19
     ad8:	a0 81       	ld	r26, Z
     ada:	b1 81       	ldd	r27, Z+1	; 0x01
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	2d 91       	ld	r18, X+
     ae0:	3c 91       	ld	r19, X
     ae2:	13 97       	sbiw	r26, 0x03	; 3
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	93 81       	ldd	r25, Z+3	; 0x03
     ae8:	ac 01       	movw	r20, r24
     aea:	4f 5f       	subi	r20, 0xFF	; 255
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	53 83       	std	Z+3, r21	; 0x03
     af0:	42 83       	std	Z+2, r20	; 0x02
     af2:	d9 01       	movw	r26, r18
     af4:	a8 0f       	add	r26, r24
     af6:	b9 1f       	adc	r27, r25
     af8:	8c 91       	ld	r24, X
     afa:	80 93 bb 00 	sts	0x00BB, r24
     afe:	85 ec       	ldi	r24, 0xC5	; 197
     b00:	80 93 bc 00 	sts	0x00BC, r24
     b04:	88 e0       	ldi	r24, 0x08	; 8
     b06:	84 83       	std	Z+4, r24	; 0x04
     b08:	5f c0       	rjmp	.+190    	; 0xbc8 <__vector_39+0x37e>
     b0a:	e0 e7       	ldi	r30, 0x70	; 112
     b0c:	f3 e1       	ldi	r31, 0x13	; 19
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	84 83       	std	Z+4, r24	; 0x04
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	96 83       	std	Z+6, r25	; 0x06
     b18:	85 83       	std	Z+5, r24	; 0x05
     b1a:	85 ec       	ldi	r24, 0xC5	; 197
     b1c:	80 93 bc 00 	sts	0x00BC, r24
     b20:	53 c0       	rjmp	.+166    	; 0xbc8 <__vector_39+0x37e>
     b22:	e0 e7       	ldi	r30, 0x70	; 112
     b24:	f3 e1       	ldi	r31, 0x13	; 19
     b26:	13 82       	std	Z+3, r1	; 0x03
     b28:	12 82       	std	Z+2, r1	; 0x02
     b2a:	85 ec       	ldi	r24, 0xC5	; 197
     b2c:	80 93 bc 00 	sts	0x00BC, r24
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	84 83       	std	Z+4, r24	; 0x04
     b34:	49 c0       	rjmp	.+146    	; 0xbc8 <__vector_39+0x37e>
     b36:	20 91 bb 00 	lds	r18, 0x00BB
     b3a:	e0 e7       	ldi	r30, 0x70	; 112
     b3c:	f3 e1       	ldi	r31, 0x13	; 19
     b3e:	a0 81       	ld	r26, Z
     b40:	b1 81       	ldd	r27, Z+1	; 0x01
     b42:	4d 91       	ld	r20, X+
     b44:	5c 91       	ld	r21, X
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	bc 01       	movw	r22, r24
     b4c:	6f 5f       	subi	r22, 0xFF	; 255
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	73 83       	std	Z+3, r23	; 0x03
     b52:	62 83       	std	Z+2, r22	; 0x02
     b54:	da 01       	movw	r26, r20
     b56:	a8 0f       	add	r26, r24
     b58:	b9 1f       	adc	r27, r25
     b5a:	2c 93       	st	X, r18
     b5c:	85 ec       	ldi	r24, 0xC5	; 197
     b5e:	80 93 bc 00 	sts	0x00BC, r24
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	84 83       	std	Z+4, r24	; 0x04
     b66:	30 c0       	rjmp	.+96     	; 0xbc8 <__vector_39+0x37e>
     b68:	e0 e7       	ldi	r30, 0x70	; 112
     b6a:	f3 e1       	ldi	r31, 0x13	; 19
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	84 83       	std	Z+4, r24	; 0x04
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	96 83       	std	Z+6, r25	; 0x06
     b76:	85 83       	std	Z+5, r24	; 0x05
     b78:	85 ec       	ldi	r24, 0xC5	; 197
     b7a:	80 93 bc 00 	sts	0x00BC, r24
     b7e:	24 c0       	rjmp	.+72     	; 0xbc8 <__vector_39+0x37e>
     b80:	e0 e7       	ldi	r30, 0x70	; 112
     b82:	f3 e1       	ldi	r31, 0x13	; 19
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	84 83       	std	Z+4, r24	; 0x04
     b88:	80 e9       	ldi	r24, 0x90	; 144
     b8a:	80 93 bc 00 	sts	0x00BC, r24
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	96 83       	std	Z+6, r25	; 0x06
     b94:	85 83       	std	Z+5, r24	; 0x05
     b96:	18 c0       	rjmp	.+48     	; 0xbc8 <__vector_39+0x37e>
     b98:	80 91 6e 13 	lds	r24, 0x136E
     b9c:	81 11       	cpse	r24, r1
     b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <__vector_39+0x368>
     ba0:	e7 e7       	ldi	r30, 0x77	; 119
     ba2:	f3 e1       	ldi	r31, 0x13	; 19
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	86 83       	std	Z+6, r24	; 0x06
     ba8:	8b ef       	ldi	r24, 0xFB	; 251
     baa:	87 83       	std	Z+7, r24	; 0x07
     bac:	10 92 6f 13 	sts	0x136F, r1
     bb0:	0b c0       	rjmp	.+22     	; 0xbc8 <__vector_39+0x37e>
     bb2:	e0 e7       	ldi	r30, 0x70	; 112
     bb4:	f3 e1       	ldi	r31, 0x13	; 19
     bb6:	8e ef       	ldi	r24, 0xFE	; 254
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	96 83       	std	Z+6, r25	; 0x06
     bbc:	85 83       	std	Z+5, r24	; 0x05
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	84 83       	std	Z+4, r24	; 0x04
     bc2:	85 ec       	ldi	r24, 0xC5	; 197
     bc4:	80 93 bc 00 	sts	0x00BC, r24
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	0b be       	out	0x3b, r0	; 59
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <usart_putchar>:
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	8c 01       	movw	r16, r24
     bf8:	d6 2f       	mov	r29, r22
     bfa:	ca e0       	ldi	r28, 0x0A	; 10
     bfc:	0a c0       	rjmp	.+20     	; 0xc12 <usart_putchar+0x24>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <pne_delayms>
     c06:	c1 50       	subi	r28, 0x01	; 1
     c08:	21 f4       	brne	.+8      	; 0xc12 <usart_putchar+0x24>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <fatal_error_to_rf>
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <usart_putchar+0x2c>
     c12:	f8 01       	movw	r30, r16
     c14:	90 81       	ld	r25, Z
     c16:	95 ff       	sbrs	r25, 5
     c18:	f2 cf       	rjmp	.-28     	; 0xbfe <usart_putchar+0x10>
     c1a:	f8 01       	movw	r30, r16
     c1c:	d6 83       	std	Z+6, r29	; 0x06
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <usart_set_baudrate>:
     c2a:	8f 92       	push	r8
     c2c:	9f 92       	push	r9
     c2e:	af 92       	push	r10
     c30:	bf 92       	push	r11
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
     c44:	6a 01       	movw	r12, r20
     c46:	7b 01       	movw	r14, r22
     c48:	b9 01       	movw	r22, r18
     c4a:	a8 01       	movw	r20, r16
     c4c:	68 94       	set
     c4e:	12 f8       	bld	r1, 2
     c50:	76 95       	lsr	r23
     c52:	67 95       	ror	r22
     c54:	57 95       	ror	r21
     c56:	47 95       	ror	r20
     c58:	16 94       	lsr	r1
     c5a:	d1 f7       	brne	.-12     	; 0xc50 <usart_set_baudrate+0x26>
     c5c:	d9 01       	movw	r26, r18
     c5e:	c8 01       	movw	r24, r16
     c60:	07 2e       	mov	r0, r23
     c62:	73 e1       	ldi	r23, 0x13	; 19
     c64:	b6 95       	lsr	r27
     c66:	a7 95       	ror	r26
     c68:	97 95       	ror	r25
     c6a:	87 95       	ror	r24
     c6c:	7a 95       	dec	r23
     c6e:	d1 f7       	brne	.-12     	; 0xc64 <usart_set_baudrate+0x3a>
     c70:	70 2d       	mov	r23, r0
     c72:	e8 81       	ld	r30, Y
     c74:	e1 ff       	sbrs	r30, 1
     c76:	0b c0       	rjmp	.+22     	; 0xc8e <usart_set_baudrate+0x64>
     c78:	4a 01       	movw	r8, r20
     c7a:	5b 01       	movw	r10, r22
     c7c:	b6 94       	lsr	r11
     c7e:	a7 94       	ror	r10
     c80:	97 94       	ror	r9
     c82:	87 94       	ror	r8
     c84:	b6 95       	lsr	r27
     c86:	a7 95       	ror	r26
     c88:	97 95       	ror	r25
     c8a:	87 95       	ror	r24
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <usart_set_baudrate+0x68>
     c8e:	4a 01       	movw	r8, r20
     c90:	5b 01       	movw	r10, r22
     c92:	8c 14       	cp	r8, r12
     c94:	9d 04       	cpc	r9, r13
     c96:	ae 04       	cpc	r10, r14
     c98:	bf 04       	cpc	r11, r15
     c9a:	78 f1       	brcs	.+94     	; 0xcfa <usart_set_baudrate+0xd0>
     c9c:	c8 16       	cp	r12, r24
     c9e:	d9 06       	cpc	r13, r25
     ca0:	ea 06       	cpc	r14, r26
     ca2:	fb 06       	cpc	r15, r27
     ca4:	60 f1       	brcs	.+88     	; 0xcfe <usart_set_baudrate+0xd4>
     ca6:	88 81       	ld	r24, Y
     ca8:	81 ff       	sbrs	r24, 1
     caa:	10 c0       	rjmp	.+32     	; 0xccc <usart_set_baudrate+0xa2>
     cac:	cc 0c       	add	r12, r12
     cae:	dd 1c       	adc	r13, r13
     cb0:	ee 1c       	adc	r14, r14
     cb2:	ff 1c       	adc	r15, r15
     cb4:	cb 01       	movw	r24, r22
     cb6:	ba 01       	movw	r22, r20
     cb8:	a7 01       	movw	r20, r14
     cba:	96 01       	movw	r18, r12
     cbc:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__udivmodsi4>
     cc0:	da 01       	movw	r26, r20
     cc2:	c9 01       	movw	r24, r18
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	a1 09       	sbc	r26, r1
     cc8:	b1 09       	sbc	r27, r1
     cca:	13 c0       	rjmp	.+38     	; 0xcf2 <usart_set_baudrate+0xc8>
     ccc:	c9 01       	movw	r24, r18
     cce:	b8 01       	movw	r22, r16
     cd0:	68 94       	set
     cd2:	13 f8       	bld	r1, 3
     cd4:	96 95       	lsr	r25
     cd6:	87 95       	ror	r24
     cd8:	77 95       	ror	r23
     cda:	67 95       	ror	r22
     cdc:	16 94       	lsr	r1
     cde:	d1 f7       	brne	.-12     	; 0xcd4 <usart_set_baudrate+0xaa>
     ce0:	a7 01       	movw	r20, r14
     ce2:	96 01       	movw	r18, r12
     ce4:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__udivmodsi4>
     ce8:	da 01       	movw	r26, r20
     cea:	c9 01       	movw	r24, r18
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	a1 09       	sbc	r26, r1
     cf0:	b1 09       	sbc	r27, r1
     cf2:	9d 83       	std	Y+5, r25	; 0x05
     cf4:	8c 83       	std	Y+4, r24	; 0x04
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <usart_set_baudrate+0xd6>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <usart_set_baudrate+0xd6>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	08 95       	ret

00000d1a <usart_init_rs232>:
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
     d24:	fb 01       	movw	r30, r22
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	8f 73       	andi	r24, 0x3F	; 63
     d2a:	8a 83       	std	Y+2, r24	; 0x02
     d2c:	26 81       	ldd	r18, Z+6	; 0x06
     d2e:	35 81       	ldd	r19, Z+5	; 0x05
     d30:	84 81       	ldd	r24, Z+4	; 0x04
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	48 2f       	mov	r20, r24
     d36:	43 70       	andi	r20, 0x03	; 3
     d38:	44 0f       	add	r20, r20
     d3a:	99 7f       	andi	r25, 0xF9	; 249
     d3c:	94 2b       	or	r25, r20
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	99 81       	ldd	r25, Y+1	; 0x01
     d42:	84 70       	andi	r24, 0x04	; 4
     d44:	88 0f       	add	r24, r24
     d46:	88 0f       	add	r24, r24
     d48:	9b 7f       	andi	r25, 0xFB	; 251
     d4a:	89 2b       	or	r24, r25
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	8f 7c       	andi	r24, 0xCF	; 207
     d52:	83 2b       	or	r24, r19
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	92 2f       	mov	r25, r18
     d5a:	99 0f       	add	r25, r25
     d5c:	99 0f       	add	r25, r25
     d5e:	99 0f       	add	r25, r25
     d60:	87 7f       	andi	r24, 0xF7	; 247
     d62:	89 2b       	or	r24, r25
     d64:	8a 83       	std	Y+2, r24	; 0x02
     d66:	40 81       	ld	r20, Z
     d68:	51 81       	ldd	r21, Z+1	; 0x01
     d6a:	62 81       	ldd	r22, Z+2	; 0x02
     d6c:	73 81       	ldd	r23, Z+3	; 0x03
     d6e:	00 e0       	ldi	r16, 0x00	; 0
     d70:	12 e1       	ldi	r17, 0x12	; 18
     d72:	2a e7       	ldi	r18, 0x7A	; 122
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	ce 01       	movw	r24, r28
     d78:	58 df       	rcall	.-336    	; 0xc2a <usart_set_baudrate>
     d7a:	99 81       	ldd	r25, Y+1	; 0x01
     d7c:	98 60       	ori	r25, 0x08	; 8
     d7e:	99 83       	std	Y+1, r25	; 0x01
     d80:	99 81       	ldd	r25, Y+1	; 0x01
     d82:	90 61       	ori	r25, 0x10	; 16
     d84:	99 83       	std	Y+1, r25	; 0x01
     d86:	99 81       	ldd	r25, Y+1	; 0x01
     d88:	90 68       	ori	r25, 0x80	; 128
     d8a:	99 83       	std	Y+1, r25	; 0x01
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <__vector_36>:
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	0b b6       	in	r0, 0x3b	; 59
     da2:	0f 92       	push	r0
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	80 91 ce 00 	lds	r24, 0x00CE
     dc0:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <pnewels_get_usart>
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0b be       	out	0x3b, r0	; 59
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <appUpdateTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
static void appUpdateTimerHandler(SYS_Timer_t *timer)
{
  //APP_CommandReport();
  if(wps_send_flag == 1)
     dea:	80 91 e2 1f 	lds	r24, 0x1FE2
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	21 f4       	brne	.+8      	; 0xdfa <appUpdateTimerHandler+0x10>
  {
	status_report_flag = 1;
     df2:	80 93 49 20 	sts	0x2049, r24
	data_update_flag = 1;
     df6:	80 93 e3 1f 	sts	0x1FE3, r24
     dfa:	08 95       	ret

00000dfc <WDT_Init>:

/*************************************************************************//**
*****************************************************************************/
void WDT_Init(void)
{	
	cli();
     dfc:	f8 94       	cli
	wdt_reset();
     dfe:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     e00:	99 e2       	ldi	r25, 0x29	; 41
     e02:	88 e1       	ldi	r24, 0x18	; 24
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	a8 95       	wdr
     e0a:	80 93 60 00 	sts	0x0060, r24
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_8S);
	//WDTCSR = (1<<WDCE)|(1<<WDE);
	sei();
     e14:	78 94       	sei
     e16:	08 95       	ret

00000e18 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
  SYS_Init();
     e18:	0e 94 5e 13 	call	0x26bc	; 0x26bc <SYS_Init>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  factory_initialization();
     e1c:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <factory_initialization>
  APP_IbLoadSettings();
     e20:	c9 da       	rcall	.-2670   	; 0x3b4 <APP_IbLoadSettings>
  APP_NwkInit();  
     e22:	fa db       	rcall	.-2060   	; 0x618 <APP_NwkInit>

/*************************************************************************//**
*****************************************************************************/
static void appStartUpdateTimer(void)
{
  appUpdateTimer.interval = APP_UPDATE_INTERVAL;
     e24:	ef e7       	ldi	r30, 0x7F	; 127
     e26:	f3 e1       	ldi	r31, 0x13	; 19
     e28:	80 e1       	ldi	r24, 0x10	; 16
     e2a:	97 e2       	ldi	r25, 0x27	; 39
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	86 83       	std	Z+6, r24	; 0x06
     e32:	97 83       	std	Z+7, r25	; 0x07
     e34:	a0 87       	std	Z+8, r26	; 0x08
     e36:	b1 87       	std	Z+9, r27	; 0x09
  appUpdateTimer.mode = SYS_TIMER_PERIODIC_MODE;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	82 87       	std	Z+10, r24	; 0x0a
  appUpdateTimer.handler = appUpdateTimerHandler;
     e3c:	85 ef       	ldi	r24, 0xF5	; 245
     e3e:	96 e0       	ldi	r25, 0x06	; 6
     e40:	94 87       	std	Z+12, r25	; 0x0c
     e42:	83 87       	std	Z+11, r24	; 0x0b
  SYS_TimerStart(&appUpdateTimer); //disabled temporary
     e44:	cf 01       	movw	r24, r30
     e46:	0e 94 29 14 	call	0x2852	; 0x2852 <SYS_TimerStart>
  APP_NwkInit();  
  //APP_GpioInit();
  //APP_CommandInit();
  appStartUpdateTimer();
  
  PNEWELSGpioInit();
     e4a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <PNEWELSGpioInit>
  PNEWELSAppInit();
     e4e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <PNEWELSAppInit>
  systemFlag_check(device_flag); //check whether this is the first time install. If yes, System directly enter WPS mode
     e52:	80 91 b6 20 	lds	r24, 0x20B6
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <systemFlag_check>
*****************************************************************************/
int main(void)
{
  SYS_Init();
  appInit();
  WDT_Init(); //Enable Watchdog timer
     e5c:	cf df       	rcall	.-98     	; 0xdfc <WDT_Init>
  
  //pne_debug_Init(); //disable this to disable the device displaying the signal strength
  ANT_DIV = 0x06; //6 for ceramic, 5 for antenna
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	80 93 4d 01 	sts	0x014D, r24

  while (1)
  {
    SYS_TaskHandler();	//system service. DO NOT MODIFY or REMOVE
     e64:	0e 94 65 13 	call	0x26ca	; 0x26ca <SYS_TaskHandler>
    APP_TaskHandler();	//application service. strongly advised NOT TO MODIFY or REMOVE
    //APP_GpioTaskHandler();
	PNEWELSTaskHandler();	//main program reside here
     e68:	0e 94 47 1b 	call	0x368e	; 0x368e <PNEWELSTaskHandler>
	//pne_debug_display();
	//wdt_reset();	//reset watchdog timer. If the timer not reset after 8 seconds the system will reset.
	
  }
     e6c:	fb cf       	rjmp	.-10     	; 0xe64 <main+0x4c>

00000e6e <__vector_1>:
	/* Clear the INTn interrupt flag */
	ext_int_clear_flag(pin);

	/* Enable the interrupt */
	ext_int_enable(pin);
}
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	0b b6       	in	r0, 0x3b	; 59
     e7a:	0f 92       	push	r0
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	e0 91 9e 13 	lds	r30, 0x139E
     e98:	f0 91 9f 13 	lds	r31, 0x139F
     e9c:	30 97       	sbiw	r30, 0x00	; 0
     e9e:	09 f0       	breq	.+2      	; 0xea2 <__vector_1+0x34>
     ea0:	19 95       	eicall
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	0f 90       	pop	r0
     ebc:	0b be       	out	0x3b, r0	; 59
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <__vector_2>:
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	0b b6       	in	r0, 0x3b	; 59
     ed4:	0f 92       	push	r0
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
     eee:	e0 91 9c 13 	lds	r30, 0x139C
     ef2:	f0 91 9d 13 	lds	r31, 0x139D
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	09 f0       	breq	.+2      	; 0xefc <__vector_2+0x34>
     efa:	19 95       	eicall
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0b be       	out	0x3b, r0	; 59
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	0f 90       	pop	r0
     f1e:	1f 90       	pop	r1
     f20:	18 95       	reti

00000f22 <__vector_3>:
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	0b b6       	in	r0, 0x3b	; 59
     f2e:	0f 92       	push	r0
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
     f48:	e0 91 9a 13 	lds	r30, 0x139A
     f4c:	f0 91 9b 13 	lds	r31, 0x139B
     f50:	30 97       	sbiw	r30, 0x00	; 0
     f52:	09 f0       	breq	.+2      	; 0xf56 <__vector_3+0x34>
     f54:	19 95       	eicall
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0b be       	out	0x3b, r0	; 59
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <__vector_4>:
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	0b b6       	in	r0, 0x3b	; 59
     f88:	0f 92       	push	r0
     f8a:	2f 93       	push	r18
     f8c:	3f 93       	push	r19
     f8e:	4f 93       	push	r20
     f90:	5f 93       	push	r21
     f92:	6f 93       	push	r22
     f94:	7f 93       	push	r23
     f96:	8f 93       	push	r24
     f98:	9f 93       	push	r25
     f9a:	af 93       	push	r26
     f9c:	bf 93       	push	r27
     f9e:	ef 93       	push	r30
     fa0:	ff 93       	push	r31
     fa2:	e0 91 98 13 	lds	r30, 0x1398
     fa6:	f0 91 99 13 	lds	r31, 0x1399
     faa:	30 97       	sbiw	r30, 0x00	; 0
     fac:	09 f0       	breq	.+2      	; 0xfb0 <__vector_4+0x34>
     fae:	19 95       	eicall
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_5>:
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	0b b6       	in	r0, 0x3b	; 59
     fe2:	0f 92       	push	r0
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
     ffc:	e0 91 96 13 	lds	r30, 0x1396
    1000:	f0 91 97 13 	lds	r31, 0x1397
    1004:	30 97       	sbiw	r30, 0x00	; 0
    1006:	09 f0       	breq	.+2      	; 0x100a <__vector_5+0x34>
    1008:	19 95       	eicall
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0b be       	out	0x3b, r0	; 59
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_6>:
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	0b b6       	in	r0, 0x3b	; 59
    103c:	0f 92       	push	r0
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    1056:	e0 91 94 13 	lds	r30, 0x1394
    105a:	f0 91 95 13 	lds	r31, 0x1395
    105e:	30 97       	sbiw	r30, 0x00	; 0
    1060:	09 f0       	breq	.+2      	; 0x1064 <__vector_6+0x34>
    1062:	19 95       	eicall
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	0f 90       	pop	r0
    107e:	0b be       	out	0x3b, r0	; 59
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_7>:
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	0b b6       	in	r0, 0x3b	; 59
    1096:	0f 92       	push	r0
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	e0 91 92 13 	lds	r30, 0x1392
    10b4:	f0 91 93 13 	lds	r31, 0x1393
    10b8:	30 97       	sbiw	r30, 0x00	; 0
    10ba:	09 f0       	breq	.+2      	; 0x10be <__vector_7+0x34>
    10bc:	19 95       	eicall
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0b be       	out	0x3b, r0	; 59
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_8>:
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	0b b6       	in	r0, 0x3b	; 59
    10f0:	0f 92       	push	r0
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
    110a:	e0 91 90 13 	lds	r30, 0x1390
    110e:	f0 91 91 13 	lds	r31, 0x1391
    1112:	30 97       	sbiw	r30, 0x00	; 0
    1114:	09 f0       	breq	.+2      	; 0x1118 <__vector_8+0x34>
    1116:	19 95       	eicall
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0b be       	out	0x3b, r0	; 59
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <__vector_9>:
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	0b b6       	in	r0, 0x3b	; 59
    114a:	0f 92       	push	r0
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	5f 93       	push	r21
    1154:	6f 93       	push	r22
    1156:	7f 93       	push	r23
    1158:	8f 93       	push	r24
    115a:	9f 93       	push	r25
    115c:	af 93       	push	r26
    115e:	bf 93       	push	r27
    1160:	ef 93       	push	r30
    1162:	ff 93       	push	r31
    1164:	e0 91 8e 13 	lds	r30, 0x138E
    1168:	f0 91 8f 13 	lds	r31, 0x138F
    116c:	30 97       	sbiw	r30, 0x00	; 0
    116e:	09 f0       	breq	.+2      	; 0x1172 <__vector_9+0x34>
    1170:	19 95       	eicall
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	bf 91       	pop	r27
    1178:	af 91       	pop	r26
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	7f 91       	pop	r23
    1180:	6f 91       	pop	r22
    1182:	5f 91       	pop	r21
    1184:	4f 91       	pop	r20
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0b be       	out	0x3b, r0	; 59
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_10>:
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	0b b6       	in	r0, 0x3b	; 59
    11a4:	0f 92       	push	r0
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	e0 91 8c 13 	lds	r30, 0x138C
    11c2:	f0 91 8d 13 	lds	r31, 0x138D
    11c6:	30 97       	sbiw	r30, 0x00	; 0
    11c8:	09 f0       	breq	.+2      	; 0x11cc <__vector_10+0x34>
    11ca:	19 95       	eicall
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0b be       	out	0x3b, r0	; 59
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <ext_int_pcint_clear_flag>:
    11f2:	80 31       	cpi	r24, 0x10	; 16
    11f4:	11 f4       	brne	.+4      	; 0x11fa <ext_int_pcint_clear_flag+0x8>
    11f6:	d9 9a       	sbi	0x1b, 1	; 27
    11f8:	08 95       	ret
    11fa:	d8 9a       	sbi	0x1b, 0	; 27
    11fc:	08 95       	ret

000011fe <ext_int_pcint_enable>:
    11fe:	80 31       	cpi	r24, 0x10	; 16
    1200:	59 f4       	brne	.+22     	; 0x1218 <ext_int_pcint_enable+0x1a>
    1202:	e8 e6       	ldi	r30, 0x68	; 104
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	82 60       	ori	r24, 0x02	; 2
    120a:	80 83       	st	Z, r24
    120c:	ec e6       	ldi	r30, 0x6C	; 108
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	81 60       	ori	r24, 0x01	; 1
    1214:	80 83       	st	Z, r24
    1216:	08 95       	ret
    1218:	e8 e6       	ldi	r30, 0x68	; 104
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	81 60       	ori	r24, 0x01	; 1
    1220:	80 83       	st	Z, r24
    1222:	eb e6       	ldi	r30, 0x6B	; 107
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	20 81       	ld	r18, Z
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <ext_int_pcint_enable+0x34>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	7a 95       	dec	r23
    1234:	e2 f7       	brpl	.-8      	; 0x122e <ext_int_pcint_enable+0x30>
    1236:	82 2b       	or	r24, r18
    1238:	80 83       	st	Z, r24
    123a:	08 95       	ret

0000123c <ext_int_pcint_disable>:
    123c:	80 31       	cpi	r24, 0x10	; 16
    123e:	31 f4       	brne	.+12     	; 0x124c <ext_int_pcint_disable+0x10>
    1240:	ec e6       	ldi	r30, 0x6C	; 108
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8e 7f       	andi	r24, 0xFE	; 254
    1248:	80 83       	st	Z, r24
    124a:	08 95       	ret
    124c:	eb e6       	ldi	r30, 0x6B	; 107
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	20 81       	ld	r18, Z
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <ext_int_pcint_disable+0x20>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	7a 95       	dec	r23
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <ext_int_pcint_disable+0x1c>
    1260:	80 95       	com	r24
    1262:	82 23       	and	r24, r18
    1264:	80 83       	st	Z, r24
    1266:	08 95       	ret

00001268 <ext_int_pcint_init>:

void ext_int_pcint_init(gpio_t gpio_id)
{
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	6b 01       	movw	r12, r22
    1270:	e8 2e       	mov	r14, r24
	/* Disable the interrupt */
	ext_int_pcint_disable(gpio_id);
    1272:	e4 df       	rcall	.-56     	; 0x123c <ext_int_pcint_disable>

	/* Enable IRQ pin as input */
	/* Enable the pullup for the IRQ pin */
	gpio_in(gpio_id);
    1274:	8e 2d       	mov	r24, r14
    1276:	b6 01       	movw	r22, r12
    1278:	26 d1       	rcall	.+588    	; 0x14c6 <gpio_in>
	gpio_pullup(gpio_id);
    127a:	8e 2d       	mov	r24, r14
    127c:	b6 01       	movw	r22, r12
    127e:	c5 d1       	rcall	.+906    	; 0x160a <gpio_pullup>

	/* Clear the PCINTn interrupt flag */
	ext_int_pcint_clear_flag(gpio_id);
    1280:	8e 2d       	mov	r24, r14
    1282:	b6 01       	movw	r22, r12
    1284:	b6 df       	rcall	.-148    	; 0x11f2 <ext_int_pcint_clear_flag>

	/* Enable the interrupt */
	ext_int_pcint_enable(gpio_id);
    1286:	8e 2d       	mov	r24, r14
    1288:	b6 01       	movw	r22, r12
    128a:	b9 df       	rcall	.-142    	; 0x11fe <ext_int_pcint_enable>
}
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	08 95       	ret

00001294 <ext_int_set_interrupt_callback>:

void ext_int_set_interrupt_callback(gpio_t gpio_id, ext_int_callback_t callback)
{
	interrupt_t ext_int = gpio_id.int_id;
    1294:	98 2f       	mov	r25, r24
	
	if (ext_int == EXT_INT0_PIN) {
    1296:	81 11       	cpse	r24, r1
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <ext_int_set_interrupt_callback+0x10>
		ext_int_int0_callback = callback;
    129a:	50 93 9f 13 	sts	0x139F, r21
    129e:	40 93 9e 13 	sts	0x139E, r20
    12a2:	08 95       	ret
	} else
	if (ext_int == EXT_INT1_PIN) {
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	29 f4       	brne	.+10     	; 0x12b2 <ext_int_set_interrupt_callback+0x1e>
		ext_int_int1_callback = callback;
    12a8:	50 93 9d 13 	sts	0x139D, r21
    12ac:	40 93 9c 13 	sts	0x139C, r20
    12b0:	08 95       	ret
	} else
	if (ext_int == EXT_INT2_PIN) {
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	29 f4       	brne	.+10     	; 0x12c0 <ext_int_set_interrupt_callback+0x2c>
		ext_int_int2_callback = callback;
    12b6:	50 93 9b 13 	sts	0x139B, r21
    12ba:	40 93 9a 13 	sts	0x139A, r20
    12be:	08 95       	ret
	} else
	if (ext_int == EXT_INT3_PIN) {
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	29 f4       	brne	.+10     	; 0x12ce <ext_int_set_interrupt_callback+0x3a>
		ext_int_int3_callback = callback;
    12c4:	50 93 99 13 	sts	0x1399, r21
    12c8:	40 93 98 13 	sts	0x1398, r20
    12cc:	08 95       	ret
	} else
	if (ext_int == EXT_INT4_PIN) {
    12ce:	84 30       	cpi	r24, 0x04	; 4
    12d0:	29 f4       	brne	.+10     	; 0x12dc <ext_int_set_interrupt_callback+0x48>
		ext_int_int4_callback = callback;
    12d2:	50 93 97 13 	sts	0x1397, r21
    12d6:	40 93 96 13 	sts	0x1396, r20
    12da:	08 95       	ret
	} else
	if (ext_int == EXT_INT5_PIN) {
    12dc:	85 30       	cpi	r24, 0x05	; 5
    12de:	29 f4       	brne	.+10     	; 0x12ea <ext_int_set_interrupt_callback+0x56>
		ext_int_int5_callback = callback;
    12e0:	50 93 95 13 	sts	0x1395, r21
    12e4:	40 93 94 13 	sts	0x1394, r20
    12e8:	08 95       	ret
	} else
	if (ext_int == EXT_INT6_PIN) {
    12ea:	86 30       	cpi	r24, 0x06	; 6
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <ext_int_set_interrupt_callback+0x64>
		ext_int_int6_callback = callback;
    12ee:	50 93 93 13 	sts	0x1393, r21
    12f2:	40 93 92 13 	sts	0x1392, r20
    12f6:	08 95       	ret
	} else
	if (ext_int == EXT_INT7_PIN) {
    12f8:	87 30       	cpi	r24, 0x07	; 7
    12fa:	29 f4       	brne	.+10     	; 0x1306 <ext_int_set_interrupt_callback+0x72>
		ext_int_int7_callback = callback;
    12fc:	50 93 91 13 	sts	0x1391, r21
    1300:	40 93 90 13 	sts	0x1390, r20
    1304:	08 95       	ret
	} else
	if (ext_int >= PC_INT0_PIN && ext_int <=PC_INT7_PIN) {
    1306:	88 50       	subi	r24, 0x08	; 8
    1308:	88 30       	cpi	r24, 0x08	; 8
    130a:	28 f4       	brcc	.+10     	; 0x1316 <ext_int_set_interrupt_callback+0x82>
		ext_int_pcint0_callback = callback;
    130c:	50 93 8f 13 	sts	0x138F, r21
    1310:	40 93 8e 13 	sts	0x138E, r20
    1314:	08 95       	ret
	} else
	if (ext_int == PC_INT8_PIN) {
    1316:	90 31       	cpi	r25, 0x10	; 16
    1318:	21 f4       	brne	.+8      	; 0x1322 <ext_int_set_interrupt_callback+0x8e>
		ext_int_pcint1_callback = callback;
    131a:	50 93 8d 13 	sts	0x138D, r21
    131e:	40 93 8c 13 	sts	0x138C, r20
    1322:	08 95       	ret

00001324 <gpio_set>:
void gpio_set(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1324:	62 30       	cpi	r22, 0x02	; 2
    1326:	09 f1       	breq	.+66     	; 0x136a <gpio_set+0x46>
    1328:	28 f4       	brcc	.+10     	; 0x1334 <gpio_set+0x10>
    132a:	66 23       	and	r22, r22
    132c:	41 f0       	breq	.+16     	; 0x133e <gpio_set+0x1a>
    132e:	61 30       	cpi	r22, 0x01	; 1
    1330:	89 f0       	breq	.+34     	; 0x1354 <gpio_set+0x30>
    1332:	08 95       	ret
    1334:	63 30       	cpi	r22, 0x03	; 3
    1336:	21 f1       	breq	.+72     	; 0x1380 <gpio_set+0x5c>
    1338:	64 30       	cpi	r22, 0x04	; 4
    133a:	69 f1       	breq	.+90     	; 0x1396 <gpio_set+0x72>
    133c:	08 95       	ret
	{
		case port_b:
		PORTB |= (1<<pin_id);
    133e:	25 b1       	in	r18, 0x05	; 5
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 c0       	rjmp	.+4      	; 0x134a <gpio_set+0x26>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	7a 95       	dec	r23
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <gpio_set+0x22>
    134e:	82 2b       	or	r24, r18
    1350:	85 b9       	out	0x05, r24	; 5
		break;
    1352:	08 95       	ret
		
		case port_d:
		PORTD |= (1<<pin_id);
    1354:	2b b1       	in	r18, 0x0b	; 11
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <gpio_set+0x3c>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	7a 95       	dec	r23
    1362:	e2 f7       	brpl	.-8      	; 0x135c <gpio_set+0x38>
    1364:	82 2b       	or	r24, r18
    1366:	8b b9       	out	0x0b, r24	; 11
		break;
    1368:	08 95       	ret
		
		case port_e:
		PORTE |= (1<<pin_id);
    136a:	2e b1       	in	r18, 0x0e	; 14
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <gpio_set+0x52>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	7a 95       	dec	r23
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <gpio_set+0x4e>
    137a:	82 2b       	or	r24, r18
    137c:	8e b9       	out	0x0e, r24	; 14
		break;
    137e:	08 95       	ret
		
		case port_f:
		PORTF |= (1<<pin_id);
    1380:	21 b3       	in	r18, 0x11	; 17
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <gpio_set+0x68>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	7a 95       	dec	r23
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <gpio_set+0x64>
    1390:	82 2b       	or	r24, r18
    1392:	81 bb       	out	0x11, r24	; 17
		break;
    1394:	08 95       	ret
		
		case port_g:
		PORTG |= (1<<pin_id);
    1396:	24 b3       	in	r18, 0x14	; 20
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <gpio_set+0x7e>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	7a 95       	dec	r23
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <gpio_set+0x7a>
    13a6:	82 2b       	or	r24, r18
    13a8:	84 bb       	out	0x14, r24	; 20
    13aa:	08 95       	ret

000013ac <gpio_clr>:
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	uint8_t temp = 0;
	uint8_t temp1 = 0;
	
	switch (port_id)
    13ac:	62 30       	cpi	r22, 0x02	; 2
    13ae:	19 f1       	breq	.+70     	; 0x13f6 <gpio_clr+0x4a>
    13b0:	28 f4       	brcc	.+10     	; 0x13bc <gpio_clr+0x10>
    13b2:	66 23       	and	r22, r22
    13b4:	41 f0       	breq	.+16     	; 0x13c6 <gpio_clr+0x1a>
    13b6:	61 30       	cpi	r22, 0x01	; 1
    13b8:	91 f0       	breq	.+36     	; 0x13de <gpio_clr+0x32>
    13ba:	08 95       	ret
    13bc:	63 30       	cpi	r22, 0x03	; 3
    13be:	39 f1       	breq	.+78     	; 0x140e <gpio_clr+0x62>
    13c0:	64 30       	cpi	r22, 0x04	; 4
    13c2:	89 f1       	breq	.+98     	; 0x1426 <gpio_clr+0x7a>
    13c4:	08 95       	ret
	{
		case port_b:
		PORTB &= ~(1<<pin_id);
    13c6:	25 b1       	in	r18, 0x05	; 5
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <gpio_clr+0x26>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	7a 95       	dec	r23
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <gpio_clr+0x22>
    13d6:	80 95       	com	r24
    13d8:	82 23       	and	r24, r18
    13da:	85 b9       	out	0x05, r24	; 5
		break;
    13dc:	08 95       	ret
		
		case port_d:
		PORTD &= ~(1<<pin_id);
    13de:	2b b1       	in	r18, 0x0b	; 11
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <gpio_clr+0x3e>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	7a 95       	dec	r23
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <gpio_clr+0x3a>
    13ee:	80 95       	com	r24
    13f0:	82 23       	and	r24, r18
    13f2:	8b b9       	out	0x0b, r24	; 11
		break;
    13f4:	08 95       	ret
		
		case port_e:
		temp = (1<<pin_id);
		temp1 = ~(temp);
		PORTE &= temp1;
    13f6:	2e b1       	in	r18, 0x0e	; 14
		case port_d:
		PORTD &= ~(1<<pin_id);
		break;
		
		case port_e:
		temp = (1<<pin_id);
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <gpio_clr+0x56>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	7a 95       	dec	r23
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <gpio_clr+0x52>
		temp1 = ~(temp);
    1406:	80 95       	com	r24
		PORTE &= temp1;
    1408:	82 23       	and	r24, r18
    140a:	8e b9       	out	0x0e, r24	; 14
		break;
    140c:	08 95       	ret
		
		case port_f:
		PORTF &= ~(1<<pin_id);
    140e:	21 b3       	in	r18, 0x11	; 17
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <gpio_clr+0x6e>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	7a 95       	dec	r23
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <gpio_clr+0x6a>
    141e:	80 95       	com	r24
    1420:	82 23       	and	r24, r18
    1422:	81 bb       	out	0x11, r24	; 17
		break;
    1424:	08 95       	ret
		
		case port_g:
		PORTG &= ~(1<<pin_id);
    1426:	24 b3       	in	r18, 0x14	; 20
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <gpio_clr+0x86>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	7a 95       	dec	r23
    1434:	e2 f7       	brpl	.-8      	; 0x142e <gpio_clr+0x82>
    1436:	80 95       	com	r24
    1438:	82 23       	and	r24, r18
    143a:	84 bb       	out	0x14, r24	; 20
    143c:	08 95       	ret

0000143e <gpio_toggle>:
void gpio_toggle(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    143e:	62 30       	cpi	r22, 0x02	; 2
    1440:	09 f1       	breq	.+66     	; 0x1484 <gpio_toggle+0x46>
    1442:	28 f4       	brcc	.+10     	; 0x144e <gpio_toggle+0x10>
    1444:	66 23       	and	r22, r22
    1446:	41 f0       	breq	.+16     	; 0x1458 <gpio_toggle+0x1a>
    1448:	61 30       	cpi	r22, 0x01	; 1
    144a:	89 f0       	breq	.+34     	; 0x146e <gpio_toggle+0x30>
    144c:	08 95       	ret
    144e:	63 30       	cpi	r22, 0x03	; 3
    1450:	21 f1       	breq	.+72     	; 0x149a <gpio_toggle+0x5c>
    1452:	64 30       	cpi	r22, 0x04	; 4
    1454:	69 f1       	breq	.+90     	; 0x14b0 <gpio_toggle+0x72>
    1456:	08 95       	ret
	{
		case port_b:
		PORTB ^= (1 << pin_id);
    1458:	25 b1       	in	r18, 0x05	; 5
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <gpio_toggle+0x26>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	7a 95       	dec	r23
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <gpio_toggle+0x22>
    1468:	82 27       	eor	r24, r18
    146a:	85 b9       	out	0x05, r24	; 5
		break;
    146c:	08 95       	ret
		
		case port_d:
		PORTD ^= (1 << pin_id);
    146e:	2b b1       	in	r18, 0x0b	; 11
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <gpio_toggle+0x3c>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	7a 95       	dec	r23
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <gpio_toggle+0x38>
    147e:	82 27       	eor	r24, r18
    1480:	8b b9       	out	0x0b, r24	; 11
		break;
    1482:	08 95       	ret
		
		case port_e:
		PORTE ^= (1 << pin_id);
    1484:	2e b1       	in	r18, 0x0e	; 14
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <gpio_toggle+0x52>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	7a 95       	dec	r23
    1492:	e2 f7       	brpl	.-8      	; 0x148c <gpio_toggle+0x4e>
    1494:	82 27       	eor	r24, r18
    1496:	8e b9       	out	0x0e, r24	; 14
		break;
    1498:	08 95       	ret
		
		case port_f:
		PORTF ^= (1 << pin_id);
    149a:	21 b3       	in	r18, 0x11	; 17
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <gpio_toggle+0x68>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	7a 95       	dec	r23
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <gpio_toggle+0x64>
    14aa:	82 27       	eor	r24, r18
    14ac:	81 bb       	out	0x11, r24	; 17
		break;
    14ae:	08 95       	ret
		
		case port_g:
		PORTG ^= (1 << pin_id);
    14b0:	24 b3       	in	r18, 0x14	; 20
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <gpio_toggle+0x7e>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	7a 95       	dec	r23
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <gpio_toggle+0x7a>
    14c0:	82 27       	eor	r24, r18
    14c2:	84 bb       	out	0x14, r24	; 20
    14c4:	08 95       	ret

000014c6 <gpio_in>:
void gpio_in(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    14c6:	62 30       	cpi	r22, 0x02	; 2
    14c8:	61 f1       	breq	.+88     	; 0x1522 <gpio_in+0x5c>
    14ca:	28 f4       	brcc	.+10     	; 0x14d6 <gpio_in+0x10>
    14cc:	66 23       	and	r22, r22
    14ce:	49 f0       	breq	.+18     	; 0x14e2 <gpio_in+0x1c>
    14d0:	61 30       	cpi	r22, 0x01	; 1
    14d2:	b9 f0       	breq	.+46     	; 0x1502 <gpio_in+0x3c>
    14d4:	08 95       	ret
    14d6:	63 30       	cpi	r22, 0x03	; 3
    14d8:	a1 f1       	breq	.+104    	; 0x1542 <gpio_in+0x7c>
    14da:	64 30       	cpi	r22, 0x04	; 4
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <gpio_in+0x1a>
    14de:	41 c0       	rjmp	.+130    	; 0x1562 <gpio_in+0x9c>
    14e0:	08 95       	ret
	{
		case port_b:
		DDRB &= ~(1 << pin_id);
    14e2:	24 b1       	in	r18, 0x04	; 4
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <gpio_in+0x28>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	7a 95       	dec	r23
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <gpio_in+0x24>
    14f2:	80 95       	com	r24
    14f4:	98 2f       	mov	r25, r24
    14f6:	92 23       	and	r25, r18
    14f8:	94 b9       	out	0x04, r25	; 4
		PORTB &= ~(1 << pin_id);
    14fa:	95 b1       	in	r25, 0x05	; 5
    14fc:	89 23       	and	r24, r25
    14fe:	85 b9       	out	0x05, r24	; 5
		break;
    1500:	08 95       	ret
		
		case port_d:
		DDRD &= ~(1 << pin_id);
    1502:	2a b1       	in	r18, 0x0a	; 10
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 c0       	rjmp	.+4      	; 0x150e <gpio_in+0x48>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	7a 95       	dec	r23
    1510:	e2 f7       	brpl	.-8      	; 0x150a <gpio_in+0x44>
    1512:	80 95       	com	r24
    1514:	98 2f       	mov	r25, r24
    1516:	92 23       	and	r25, r18
    1518:	9a b9       	out	0x0a, r25	; 10
		PORTD &= ~(1 << pin_id);
    151a:	9b b1       	in	r25, 0x0b	; 11
    151c:	89 23       	and	r24, r25
    151e:	8b b9       	out	0x0b, r24	; 11
		break;
    1520:	08 95       	ret
		
		case port_e:
		DDRE &= ~(1 << pin_id);
    1522:	2d b1       	in	r18, 0x0d	; 13
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <gpio_in+0x68>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	7a 95       	dec	r23
    1530:	e2 f7       	brpl	.-8      	; 0x152a <gpio_in+0x64>
    1532:	80 95       	com	r24
    1534:	98 2f       	mov	r25, r24
    1536:	92 23       	and	r25, r18
    1538:	9d b9       	out	0x0d, r25	; 13
		PORTE &= ~(1 << pin_id);
    153a:	9e b1       	in	r25, 0x0e	; 14
    153c:	89 23       	and	r24, r25
    153e:	8e b9       	out	0x0e, r24	; 14
		break;
    1540:	08 95       	ret
		
		case port_f:
		DDRF &= ~(1 << pin_id);
    1542:	20 b3       	in	r18, 0x10	; 16
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <gpio_in+0x88>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	7a 95       	dec	r23
    1550:	e2 f7       	brpl	.-8      	; 0x154a <gpio_in+0x84>
    1552:	80 95       	com	r24
    1554:	98 2f       	mov	r25, r24
    1556:	92 23       	and	r25, r18
    1558:	90 bb       	out	0x10, r25	; 16
		PORTF &= ~(1 << pin_id);
    155a:	91 b3       	in	r25, 0x11	; 17
    155c:	89 23       	and	r24, r25
    155e:	81 bb       	out	0x11, r24	; 17
		break;
    1560:	08 95       	ret
		
		case port_g:
		DDRG &= ~(1 << pin_id);
    1562:	23 b3       	in	r18, 0x13	; 19
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <gpio_in+0xa8>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	7a 95       	dec	r23
    1570:	e2 f7       	brpl	.-8      	; 0x156a <gpio_in+0xa4>
    1572:	80 95       	com	r24
    1574:	98 2f       	mov	r25, r24
    1576:	92 23       	and	r25, r18
    1578:	93 bb       	out	0x13, r25	; 19
		PORTG &= ~(1 << pin_id);
    157a:	94 b3       	in	r25, 0x14	; 20
    157c:	89 23       	and	r24, r25
    157e:	84 bb       	out	0x14, r24	; 20
    1580:	08 95       	ret

00001582 <gpio_out>:
void gpio_out(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1582:	62 30       	cpi	r22, 0x02	; 2
    1584:	09 f1       	breq	.+66     	; 0x15c8 <gpio_out+0x46>
    1586:	28 f4       	brcc	.+10     	; 0x1592 <gpio_out+0x10>
    1588:	66 23       	and	r22, r22
    158a:	41 f0       	breq	.+16     	; 0x159c <gpio_out+0x1a>
    158c:	61 30       	cpi	r22, 0x01	; 1
    158e:	89 f0       	breq	.+34     	; 0x15b2 <gpio_out+0x30>
    1590:	08 95       	ret
    1592:	63 30       	cpi	r22, 0x03	; 3
    1594:	21 f1       	breq	.+72     	; 0x15de <gpio_out+0x5c>
    1596:	64 30       	cpi	r22, 0x04	; 4
    1598:	69 f1       	breq	.+90     	; 0x15f4 <gpio_out+0x72>
    159a:	08 95       	ret
	{
		case port_b:
		DDRB |= (1<<pin_id);
    159c:	24 b1       	in	r18, 0x04	; 4
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <gpio_out+0x26>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	7a 95       	dec	r23
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <gpio_out+0x22>
    15ac:	82 2b       	or	r24, r18
    15ae:	84 b9       	out	0x04, r24	; 4
		break;
    15b0:	08 95       	ret
		
		case port_d:
		DDRD |= (1<<pin_id);
    15b2:	2a b1       	in	r18, 0x0a	; 10
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <gpio_out+0x3c>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	7a 95       	dec	r23
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <gpio_out+0x38>
    15c2:	82 2b       	or	r24, r18
    15c4:	8a b9       	out	0x0a, r24	; 10
		break;
    15c6:	08 95       	ret
		
		case port_e:
		DDRE |= (1<<pin_id);
    15c8:	2d b1       	in	r18, 0x0d	; 13
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <gpio_out+0x52>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	7a 95       	dec	r23
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <gpio_out+0x4e>
    15d8:	82 2b       	or	r24, r18
    15da:	8d b9       	out	0x0d, r24	; 13
		break;
    15dc:	08 95       	ret
		
		case port_f:
		DDRF |= (1<<pin_id);
    15de:	20 b3       	in	r18, 0x10	; 16
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <gpio_out+0x68>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	7a 95       	dec	r23
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <gpio_out+0x64>
    15ee:	82 2b       	or	r24, r18
    15f0:	80 bb       	out	0x10, r24	; 16
		break;
    15f2:	08 95       	ret
		
		case port_g:
		DDRG |= (1<<pin_id);
    15f4:	23 b3       	in	r18, 0x13	; 19
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <gpio_out+0x7e>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	7a 95       	dec	r23
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <gpio_out+0x7a>
    1604:	82 2b       	or	r24, r18
    1606:	83 bb       	out	0x13, r24	; 19
    1608:	08 95       	ret

0000160a <gpio_pullup>:
void gpio_pullup(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    160a:	62 30       	cpi	r22, 0x02	; 2
    160c:	09 f1       	breq	.+66     	; 0x1650 <gpio_pullup+0x46>
    160e:	28 f4       	brcc	.+10     	; 0x161a <gpio_pullup+0x10>
    1610:	66 23       	and	r22, r22
    1612:	41 f0       	breq	.+16     	; 0x1624 <gpio_pullup+0x1a>
    1614:	61 30       	cpi	r22, 0x01	; 1
    1616:	89 f0       	breq	.+34     	; 0x163a <gpio_pullup+0x30>
    1618:	08 95       	ret
    161a:	63 30       	cpi	r22, 0x03	; 3
    161c:	21 f1       	breq	.+72     	; 0x1666 <gpio_pullup+0x5c>
    161e:	64 30       	cpi	r22, 0x04	; 4
    1620:	69 f1       	breq	.+90     	; 0x167c <gpio_pullup+0x72>
    1622:	08 95       	ret
	{
		case port_b:
		PORTB |= (1 << pin_id);
    1624:	25 b1       	in	r18, 0x05	; 5
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <gpio_pullup+0x26>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	7a 95       	dec	r23
    1632:	e2 f7       	brpl	.-8      	; 0x162c <gpio_pullup+0x22>
    1634:	82 2b       	or	r24, r18
    1636:	85 b9       	out	0x05, r24	; 5
		break;
    1638:	08 95       	ret
		
		case port_d:
		PORTD |= (1 << pin_id);
    163a:	2b b1       	in	r18, 0x0b	; 11
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <gpio_pullup+0x3c>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	7a 95       	dec	r23
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <gpio_pullup+0x38>
    164a:	82 2b       	or	r24, r18
    164c:	8b b9       	out	0x0b, r24	; 11
		break;
    164e:	08 95       	ret
		
		case port_e:
		PORTE |= (1 << pin_id);
    1650:	2e b1       	in	r18, 0x0e	; 14
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 c0       	rjmp	.+4      	; 0x165c <gpio_pullup+0x52>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	7a 95       	dec	r23
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <gpio_pullup+0x4e>
    1660:	82 2b       	or	r24, r18
    1662:	8e b9       	out	0x0e, r24	; 14
		break;
    1664:	08 95       	ret
		
		case port_f:
		PORTF |= (1 << pin_id);
    1666:	21 b3       	in	r18, 0x11	; 17
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <gpio_pullup+0x68>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	7a 95       	dec	r23
    1674:	e2 f7       	brpl	.-8      	; 0x166e <gpio_pullup+0x64>
    1676:	82 2b       	or	r24, r18
    1678:	81 bb       	out	0x11, r24	; 17
		break;
    167a:	08 95       	ret
		
		case port_g:
		PORTG |= (1 << pin_id);
    167c:	24 b3       	in	r18, 0x14	; 20
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <gpio_pullup+0x7e>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	7a 95       	dec	r23
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <gpio_pullup+0x7a>
    168c:	82 2b       	or	r24, r18
    168e:	84 bb       	out	0x14, r24	; 20
    1690:	08 95       	ret

00001692 <gpio_read>:
uint8_t gpio_read(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1692:	62 30       	cpi	r22, 0x02	; 2
    1694:	e9 f0       	breq	.+58     	; 0x16d0 <gpio_read+0x3e>
    1696:	28 f4       	brcc	.+10     	; 0x16a2 <gpio_read+0x10>
    1698:	66 23       	and	r22, r22
    169a:	41 f0       	breq	.+16     	; 0x16ac <gpio_read+0x1a>
    169c:	61 30       	cpi	r22, 0x01	; 1
    169e:	79 f0       	breq	.+30     	; 0x16be <gpio_read+0x2c>
    16a0:	32 c0       	rjmp	.+100    	; 0x1706 <gpio_read+0x74>
    16a2:	63 30       	cpi	r22, 0x03	; 3
    16a4:	f1 f0       	breq	.+60     	; 0x16e2 <gpio_read+0x50>
    16a6:	64 30       	cpi	r22, 0x04	; 4
    16a8:	29 f1       	breq	.+74     	; 0x16f4 <gpio_read+0x62>
    16aa:	2d c0       	rjmp	.+90     	; 0x1706 <gpio_read+0x74>
	{
		case port_b:
		return (PINB & (1 << pin_id)) != 0;
    16ac:	83 b1       	in	r24, 0x03	; 3
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <gpio_read+0x24>
    16b2:	95 95       	asr	r25
    16b4:	87 95       	ror	r24
    16b6:	7a 95       	dec	r23
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <gpio_read+0x20>
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	08 95       	ret
		break;
		
		case port_d:
		return (PIND & (1 << pin_id)) != 0;
    16be:	89 b1       	in	r24, 0x09	; 9
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <gpio_read+0x36>
    16c4:	95 95       	asr	r25
    16c6:	87 95       	ror	r24
    16c8:	7a 95       	dec	r23
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <gpio_read+0x32>
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	08 95       	ret
		break;
		
		case port_e:
		return (PINE & (1 << pin_id)) != 0;
    16d0:	8c b1       	in	r24, 0x0c	; 12
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <gpio_read+0x48>
    16d6:	95 95       	asr	r25
    16d8:	87 95       	ror	r24
    16da:	7a 95       	dec	r23
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <gpio_read+0x44>
    16de:	81 70       	andi	r24, 0x01	; 1
    16e0:	08 95       	ret
		break;
		
		case port_f:
		return (PINF & (1 << pin_id)) != 0;
    16e2:	8f b1       	in	r24, 0x0f	; 15
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <gpio_read+0x5a>
    16e8:	95 95       	asr	r25
    16ea:	87 95       	ror	r24
    16ec:	7a 95       	dec	r23
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <gpio_read+0x56>
    16f0:	81 70       	andi	r24, 0x01	; 1
    16f2:	08 95       	ret
		break;
		
		case port_g:
		return (PING & (1 << pin_id)) != 0;
    16f4:	82 b3       	in	r24, 0x12	; 18
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <gpio_read+0x6c>
    16fa:	95 95       	asr	r25
    16fc:	87 95       	ror	r24
    16fe:	7a 95       	dec	r23
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <gpio_read+0x68>
    1702:	81 70       	andi	r24, 0x01	; 1
    1704:	08 95       	ret
		
		default:
		break;
	}
	
	return 0;
    1706:	80 e0       	ldi	r24, 0x00	; 0
}
    1708:	08 95       	ret

0000170a <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    170a:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	a8 95       	wdr
    1712:	80 91 60 00 	lds	r24, 0x0060
    1716:	88 61       	ori	r24, 0x18	; 24
    1718:	80 93 60 00 	sts	0x0060, r24
    171c:	10 92 60 00 	sts	0x0060, r1
    1720:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    1722:	e1 e6       	ldi	r30, 0x61	; 97
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 e8       	ldi	r24, 0x80	; 128
    1728:	80 83       	st	Z, r24
  CLKPR = 0;
    172a:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    172c:	78 94       	sei

  HAL_TimerInit();
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <HAL_TimerInit>
    1730:	08 95       	ret

00001732 <HAL_Delay>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Delay(uint8_t us)
{
  HAL_TimerDelay(us);
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	16 c0       	rjmp	.+44     	; 0x1762 <HAL_TimerDelay>
    1736:	08 95       	ret

00001738 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    1738:	10 92 c4 20 	sts	0x20C4, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    173c:	80 e1       	ldi	r24, 0x10	; 16
    173e:	97 e2       	ldi	r25, 0x27	; 39
    1740:	90 93 a9 00 	sts	0x00A9, r25
    1744:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    1748:	e1 ea       	ldi	r30, 0xA1	; 161
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	88 e0       	ldi	r24, 0x08	; 8
    174e:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    1750:	80 81       	ld	r24, Z
    1752:	82 60       	ori	r24, 0x02	; 2
    1754:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1756:	e2 e7       	ldi	r30, 0x72	; 114
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	82 60       	ori	r24, 0x02	; 2
    175e:	80 83       	st	Z, r24
    1760:	08 95       	ret

00001762 <HAL_TimerDelay>:
*****************************************************************************/
void HAL_TimerDelay(uint16_t us)
{
  PRAGMA(diag_suppress=Pa082);

  OCR4B = TCNT4 + us;
    1762:	20 91 a4 00 	lds	r18, 0x00A4
    1766:	30 91 a5 00 	lds	r19, 0x00A5
    176a:	82 0f       	add	r24, r18
    176c:	93 1f       	adc	r25, r19
    176e:	ea ea       	ldi	r30, 0xAA	; 170
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	80 83       	st	Z, r24
  if (OCR4B > OCR4A)
    1776:	20 81       	ld	r18, Z
    1778:	31 81       	ldd	r19, Z+1	; 0x01
    177a:	80 91 a8 00 	lds	r24, 0x00A8
    177e:	90 91 a9 00 	lds	r25, 0x00A9
    1782:	82 17       	cp	r24, r18
    1784:	93 07       	cpc	r25, r19
    1786:	50 f4       	brcc	.+20     	; 0x179c <HAL_TimerDelay+0x3a>
    OCR4B -= OCR4A;
    1788:	20 91 a8 00 	lds	r18, 0x00A8
    178c:	30 91 a9 00 	lds	r19, 0x00A9
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	82 1b       	sub	r24, r18
    1796:	93 0b       	sbc	r25, r19
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24

  TIFR4 = (1 << OCF4B);
    179c:	84 e0       	ldi	r24, 0x04	; 4
    179e:	89 bb       	out	0x19, r24	; 25
  while (0 == (TIFR4 & (1 << OCF4B)));
    17a0:	ca 9b       	sbis	0x19, 2	; 25
    17a2:	fe cf       	rjmp	.-4      	; 0x17a0 <HAL_TimerDelay+0x3e>

  PRAGMA(diag_default=Pa082);
}
    17a4:	08 95       	ret

000017a6 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	8f 93       	push	r24
  halTimerIrqCount++;
    17b2:	80 91 c4 20 	lds	r24, 0x20C4
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	80 93 c4 20 	sts	0x20C4, r24
}
    17bc:	8f 91       	pop	r24
    17be:	0f 90       	pop	r0
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	0f 90       	pop	r0
    17c4:	1f 90       	pop	r1
    17c6:	18 95       	reti

000017c8 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    17c8:	e5 ec       	ldi	r30, 0xC5	; 197
    17ca:	f0 e2       	ldi	r31, 0x20	; 32
    17cc:	14 82       	std	Z+4, r1	; 0x04
    17ce:	15 82       	std	Z+5, r1	; 0x05
    17d0:	11 82       	std	Z+1, r1	; 0x01
    17d2:	10 82       	st	Z, r1
    17d4:	17 a2       	std	Z+39, r1	; 0x27
    17d6:	16 a2       	std	Z+38, r1	; 0x26
    17d8:	eb ec       	ldi	r30, 0xCB	; 203
    17da:	f0 e2       	ldi	r31, 0x20	; 32
    17dc:	8b ee       	ldi	r24, 0xEB	; 235
    17de:	90 e2       	ldi	r25, 0x20	; 32
    17e0:	11 92       	st	Z+, r1
    17e2:	11 92       	st	Z+, r1
    17e4:	e8 17       	cp	r30, r24
    17e6:	f9 07       	cpc	r31, r25
    17e8:	d9 f7       	brne	.-10     	; 0x17e0 <NWK_Init+0x18>
    17ea:	77 d4       	rcall	.+2286   	; 0x20da <nwkTxInit>
    17ec:	b8 d1       	rcall	.+880    	; 0x1b5e <nwkRxInit>
    17ee:	0a d1       	rcall	.+532    	; 0x1a04 <nwkFrameInit>
    17f0:	3d c0       	rjmp	.+122    	; 0x186c <nwkDataReqInit>
    17f2:	08 95       	ret

000017f4 <NWK_SetAddr>:
    17f4:	90 93 c6 20 	sts	0x20C6, r25
    17f8:	80 93 c5 20 	sts	0x20C5, r24
    17fc:	5b c6       	rjmp	.+3254   	; 0x24b4 <PHY_SetShortAddr>
    17fe:	08 95       	ret

00001800 <NWK_SetPanId>:
    1800:	90 93 c8 20 	sts	0x20C8, r25
    1804:	80 93 c7 20 	sts	0x20C7, r24
    1808:	43 c6       	rjmp	.+3206   	; 0x2490 <PHY_SetPanId>
    180a:	08 95       	ret

0000180c <NWK_OpenEndpoint>:
    180c:	e8 2f       	mov	r30, r24
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	e5 53       	subi	r30, 0x35	; 53
    1816:	ff 4d       	sbci	r31, 0xDF	; 223
    1818:	71 83       	std	Z+1, r23	; 0x01
    181a:	60 83       	st	Z, r22
    181c:	08 95       	ret

0000181e <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    181e:	e7 d1       	rcall	.+974    	; 0x1bee <nwkRxTaskHandler>
  nwkTxTaskHandler();
    1820:	5a d5       	rcall	.+2740   	; 0x22d6 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    1822:	4d c0       	rjmp	.+154    	; 0x18be <nwkDataReqTaskHandler>
    1824:	08 95       	ret

00001826 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1826:	e0 91 a0 13 	lds	r30, 0x13A0
    182a:	f0 91 a1 13 	lds	r31, 0x13A1
    182e:	30 97       	sbiw	r30, 0x00	; 0
    1830:	d9 f0       	breq	.+54     	; 0x1868 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    1832:	22 81       	ldd	r18, Z+2	; 0x02
    1834:	33 81       	ldd	r19, Z+3	; 0x03
    1836:	28 17       	cp	r18, r24
    1838:	39 07       	cpc	r19, r25
    183a:	89 f4       	brne	.+34     	; 0x185e <nwkDataReqTxConf+0x38>
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <nwkDataReqTxConf+0x22>
    183e:	22 81       	ldd	r18, Z+2	; 0x02
    1840:	33 81       	ldd	r19, Z+3	; 0x03
    1842:	28 17       	cp	r18, r24
    1844:	39 07       	cpc	r19, r25
    1846:	59 f4       	brne	.+22     	; 0x185e <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    1848:	dc 01       	movw	r26, r24
    184a:	ad 57       	subi	r26, 0x7D	; 125
    184c:	bf 4f       	sbci	r27, 0xFF	; 255
    184e:	2c 91       	ld	r18, X
    1850:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    1852:	13 96       	adiw	r26, 0x03	; 3
    1854:	2c 91       	ld	r18, X
    1856:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1858:	22 e0       	ldi	r18, 0x02	; 2
    185a:	24 83       	std	Z+4, r18	; 0x04
      break;
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    185e:	01 90       	ld	r0, Z+
    1860:	f0 81       	ld	r31, Z
    1862:	e0 2d       	mov	r30, r0
    1864:	30 97       	sbiw	r30, 0x00	; 0
    1866:	59 f7       	brne	.-42     	; 0x183e <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    1868:	11 c1       	rjmp	.+546    	; 0x1a8c <nwkFrameFree>
    186a:	08 95       	ret

0000186c <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    186c:	10 92 a1 13 	sts	0x13A1, r1
    1870:	10 92 a0 13 	sts	0x13A0, r1
    1874:	08 95       	ret

00001876 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    1876:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    1878:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    187a:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    187c:	13 82       	std	Z+3, r1	; 0x03
    187e:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    1880:	a5 ec       	ldi	r26, 0xC5	; 197
    1882:	b0 e2       	ldi	r27, 0x20	; 32
    1884:	96 96       	adiw	r26, 0x26	; 38
    1886:	8d 91       	ld	r24, X+
    1888:	9c 91       	ld	r25, X
    188a:	97 97       	sbiw	r26, 0x27	; 39
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	97 96       	adiw	r26, 0x27	; 39
    1890:	9c 93       	st	X, r25
    1892:	8e 93       	st	-X, r24
    1894:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    1896:	80 91 a0 13 	lds	r24, 0x13A0
    189a:	90 91 a1 13 	lds	r25, 0x13A1
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	39 f4       	brne	.+14     	; 0x18b0 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    18a2:	11 82       	std	Z+1, r1	; 0x01
    18a4:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    18a6:	f0 93 a1 13 	sts	0x13A1, r31
    18aa:	e0 93 a0 13 	sts	0x13A0, r30
    18ae:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    18b4:	f0 93 a1 13 	sts	0x13A1, r31
    18b8:	e0 93 a0 13 	sts	0x13A0, r30
    18bc:	08 95       	ret

000018be <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    18c6:	e0 91 a0 13 	lds	r30, 0x13A0
    18ca:	f0 91 a1 13 	lds	r31, 0x13A1
    18ce:	30 97       	sbiw	r30, 0x00	; 0
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <nwkDataReqTaskHandler+0x16>
    18d2:	93 c0       	rjmp	.+294    	; 0x19fa <nwkDataReqTaskHandler+0x13c>
    18d4:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	88 23       	and	r24, r24
    18da:	21 f0       	breq	.+8      	; 0x18e4 <nwkDataReqTaskHandler+0x26>
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	09 f4       	brne	.+2      	; 0x18e2 <nwkDataReqTaskHandler+0x24>
    18e0:	66 c0       	rjmp	.+204    	; 0x19ae <nwkDataReqTaskHandler+0xf0>
    18e2:	85 c0       	rjmp	.+266    	; 0x19ee <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    18e4:	9a d0       	rcall	.+308    	; 0x1a1a <nwkFrameAlloc>
    18e6:	8c 01       	movw	r16, r24
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	21 f4       	brne	.+8      	; 0x18f4 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    18f0:	8f 87       	std	Y+15, r24	; 0x0f
    18f2:	83 c0       	rjmp	.+262    	; 0x19fa <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    18f4:	9b 83       	std	Y+3, r25	; 0x03
    18f6:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    18fc:	f8 01       	movw	r30, r16
    18fe:	e9 57       	subi	r30, 0x79	; 121
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	83 e1       	ldi	r24, 0x13	; 19
    1904:	9c e0       	ldi	r25, 0x0C	; 12
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    190a:	31 97       	sbiw	r30, 0x01	; 1
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	82 fb       	bst	r24, 2
    1910:	88 27       	eor	r24, r24
    1912:	80 f9       	bld	r24, 0
    1914:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    1916:	99 85       	ldd	r25, Y+9	; 0x09
    1918:	d8 01       	movw	r26, r16
    191a:	1b 96       	adiw	r26, 0x0b	; 11
    191c:	8c 91       	ld	r24, X
    191e:	1b 97       	sbiw	r26, 0x0b	; 11
    1920:	90 fb       	bst	r25, 0
    1922:	80 f9       	bld	r24, 0
    1924:	1b 96       	adiw	r26, 0x0b	; 11
    1926:	8c 93       	st	X, r24
    1928:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    192a:	99 85       	ldd	r25, Y+9	; 0x09
    192c:	93 fb       	bst	r25, 3
    192e:	99 27       	eor	r25, r25
    1930:	90 f9       	bld	r25, 0
    1932:	90 fb       	bst	r25, 0
    1934:	82 f9       	bld	r24, 2
    1936:	1b 96       	adiw	r26, 0x0b	; 11
    1938:	8c 93       	st	X, r24
    193a:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    193c:	e5 ec       	ldi	r30, 0xC5	; 197
    193e:	f0 e2       	ldi	r31, 0x20	; 32
    1940:	84 81       	ldd	r24, Z+4	; 0x04
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	84 83       	std	Z+4, r24	; 0x04
    1946:	1c 96       	adiw	r26, 0x0c	; 12
    1948:	8c 93       	st	X, r24
    194a:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	1e 96       	adiw	r26, 0x0e	; 14
    1952:	9c 93       	st	X, r25
    1954:	8e 93       	st	-X, r24
    1956:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	9e 81       	ldd	r25, Y+6	; 0x06
    195c:	50 96       	adiw	r26, 0x10	; 16
    195e:	9c 93       	st	X, r25
    1960:	8e 93       	st	-X, r24
    1962:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    1964:	88 85       	ldd	r24, Y+8	; 0x08
    1966:	98 2f       	mov	r25, r24
    1968:	9f 70       	andi	r25, 0x0F	; 15
    196a:	51 96       	adiw	r26, 0x11	; 17
    196c:	8c 91       	ld	r24, X
    196e:	51 97       	sbiw	r26, 0x11	; 17
    1970:	80 7f       	andi	r24, 0xF0	; 240
    1972:	89 2b       	or	r24, r25
    1974:	51 96       	adiw	r26, 0x11	; 17
    1976:	8c 93       	st	X, r24
    1978:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    197a:	9f 81       	ldd	r25, Y+7	; 0x07
    197c:	92 95       	swap	r25
    197e:	90 7f       	andi	r25, 0xF0	; 240
    1980:	8f 70       	andi	r24, 0x0F	; 15
    1982:	89 2b       	or	r24, r25
    1984:	51 96       	adiw	r26, 0x11	; 17
    1986:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    1988:	f8 01       	movw	r30, r16
    198a:	ef 57       	subi	r30, 0x7F	; 127
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	6a 85       	ldd	r22, Y+10	; 0x0a
    1994:	7b 85       	ldd	r23, Y+11	; 0x0b
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	0e 94 ad 4c 	call	0x995a	; 0x995a <memcpy>
  frame->size += req->size;
    199e:	f8 01       	movw	r30, r16
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    19a4:	89 0f       	add	r24, r25
    19a6:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    19a8:	c8 01       	movw	r24, r16
    19aa:	ba d3       	rcall	.+1908   	; 0x2120 <nwkTxFrame>
    19ac:	26 c0       	rjmp	.+76     	; 0x19fa <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    19ae:	ce 17       	cp	r28, r30
    19b0:	df 07       	cpc	r29, r31
    19b2:	41 f4       	brne	.+16     	; 0x19c4 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    19b4:	88 81       	ld	r24, Y
    19b6:	99 81       	ldd	r25, Y+1	; 0x01
    19b8:	90 93 a1 13 	sts	0x13A1, r25
    19bc:	80 93 a0 13 	sts	0x13A0, r24
    19c0:	0a c0       	rjmp	.+20     	; 0x19d6 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    19c2:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	c8 17       	cp	r28, r24
    19ca:	d9 07       	cpc	r29, r25
    19cc:	d1 f7       	brne	.-12     	; 0x19c2 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    19ce:	88 81       	ld	r24, Y
    19d0:	99 81       	ldd	r25, Y+1	; 0x01
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    19d6:	e5 ec       	ldi	r30, 0xC5	; 197
    19d8:	f0 e2       	ldi	r31, 0x20	; 32
    19da:	86 a1       	ldd	r24, Z+38	; 0x26
    19dc:	97 a1       	ldd	r25, Z+39	; 0x27
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	97 a3       	std	Z+39, r25	; 0x27
    19e2:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    19e4:	ed 85       	ldd	r30, Y+13	; 0x0d
    19e6:	fe 85       	ldd	r31, Y+14	; 0x0e
    19e8:	ce 01       	movw	r24, r28
    19ea:	19 95       	eicall
    19ec:	06 c0       	rjmp	.+12     	; 0x19fa <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    19ee:	09 90       	ld	r0, Y+
    19f0:	d8 81       	ld	r29, Y
    19f2:	c0 2d       	mov	r28, r0
    19f4:	20 97       	sbiw	r28, 0x00	; 0
    19f6:	09 f0       	breq	.+2      	; 0x19fa <nwkDataReqTaskHandler+0x13c>
    19f8:	6e cf       	rjmp	.-292    	; 0x18d6 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	08 95       	ret

00001a04 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1a04:	e2 ea       	ldi	r30, 0xA2	; 162
    1a06:	f3 e1       	ldi	r31, 0x13	; 19
    1a08:	86 e5       	ldi	r24, 0x56	; 86
    1a0a:	9e e1       	ldi	r25, 0x1E	; 30
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1a0c:	10 82       	st	Z, r1
    1a0e:	e7 57       	subi	r30, 0x77	; 119
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1a12:	e8 17       	cp	r30, r24
    1a14:	f9 07       	cpc	r31, r25
    1a16:	d1 f7       	brne	.-12     	; 0x1a0c <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    1a18:	08 95       	ret

00001a1a <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    1a1a:	80 91 a2 13 	lds	r24, 0x13A2
    1a1e:	88 23       	and	r24, r24
    1a20:	59 f0       	breq	.+22     	; 0x1a38 <nwkFrameAlloc+0x1e>
    1a22:	eb e2       	ldi	r30, 0x2B	; 43
    1a24:	f4 e1       	ldi	r31, 0x14	; 20
    1a26:	46 e5       	ldi	r20, 0x56	; 86
    1a28:	5e e1       	ldi	r21, 0x1E	; 30
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	bc 01       	movw	r22, r24
    1a30:	20 81       	ld	r18, Z
    1a32:	21 11       	cpse	r18, r1
    1a34:	22 c0       	rjmp	.+68     	; 0x1a7a <nwkFrameAlloc+0x60>
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <nwkFrameAlloc+0x22>
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1a3c:	49 e8       	ldi	r20, 0x89	; 137
    1a3e:	46 9f       	mul	r20, r22
    1a40:	90 01       	movw	r18, r0
    1a42:	47 9f       	mul	r20, r23
    1a44:	30 0d       	add	r19, r0
    1a46:	11 24       	eor	r1, r1
    1a48:	c9 01       	movw	r24, r18
    1a4a:	8e 55       	subi	r24, 0x5E	; 94
    1a4c:	9c 4e       	sbci	r25, 0xEC	; 236
    1a4e:	fc 01       	movw	r30, r24
    1a50:	11 92       	st	Z+, r1
    1a52:	4a 95       	dec	r20
    1a54:	e9 f7       	brne	.-6      	; 0x1a50 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1a56:	40 e1       	ldi	r20, 0x10	; 16
    1a58:	fc 01       	movw	r30, r24
    1a5a:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    1a5c:	ef 57       	subi	r30, 0x7F	; 127
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	2c 54       	subi	r18, 0x4C	; 76
    1a62:	3c 4e       	sbci	r19, 0xEC	; 236
    1a64:	31 83       	std	Z+1, r19	; 0x01
    1a66:	20 83       	st	Z, r18
      nwkIb.lock++;
    1a68:	e5 ec       	ldi	r30, 0xC5	; 197
    1a6a:	f0 e2       	ldi	r31, 0x20	; 32
    1a6c:	26 a1       	ldd	r18, Z+38	; 0x26
    1a6e:	37 a1       	ldd	r19, Z+39	; 0x27
    1a70:	2f 5f       	subi	r18, 0xFF	; 255
    1a72:	3f 4f       	sbci	r19, 0xFF	; 255
    1a74:	37 a3       	std	Z+39, r19	; 0x27
    1a76:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    1a78:	08 95       	ret
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	e7 57       	subi	r30, 0x77	; 119
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1a80:	e4 17       	cp	r30, r20
    1a82:	f5 07       	cpc	r31, r21
    1a84:	a1 f6       	brne	.-88     	; 0x1a2e <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
}
    1a8a:	08 95       	ret

00001a8c <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	10 82       	st	Z, r1
  nwkIb.lock--;
    1a90:	e5 ec       	ldi	r30, 0xC5	; 197
    1a92:	f0 e2       	ldi	r31, 0x20	; 32
    1a94:	86 a1       	ldd	r24, Z+38	; 0x26
    1a96:	97 a1       	ldd	r25, Z+39	; 0x27
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	97 a3       	std	Z+39, r25	; 0x27
    1a9c:	86 a3       	std	Z+38, r24	; 0x26
    1a9e:	08 95       	ret

00001aa0 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	41 f0       	breq	.+16     	; 0x1ab4 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	e7 57       	subi	r30, 0x77	; 119
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1aaa:	8e e1       	ldi	r24, 0x1E	; 30
    1aac:	e6 35       	cpi	r30, 0x56	; 86
    1aae:	f8 07       	cpc	r31, r24
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <nwkFrameNext+0x18>
    1ab2:	15 c0       	rjmp	.+42     	; 0x1ade <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    1ab4:	e2 ea       	ldi	r30, 0xA2	; 162
    1ab6:	f3 e1       	ldi	r31, 0x13	; 19
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1ab8:	80 81       	ld	r24, Z
    1aba:	88 23       	and	r24, r24
    1abc:	39 f0       	breq	.+14     	; 0x1acc <nwkFrameNext+0x2c>
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <nwkFrameNext+0x26>
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 23       	and	r24, r24
    1ac4:	19 f0       	breq	.+6      	; 0x1acc <nwkFrameNext+0x2c>
      return frame;
    1ac6:	8e 2f       	mov	r24, r30
    1ac8:	9f 2f       	mov	r25, r31
    1aca:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1acc:	e7 57       	subi	r30, 0x77	; 119
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	8e e1       	ldi	r24, 0x1E	; 30
    1ad2:	e6 35       	cpi	r30, 0x56	; 86
    1ad4:	f8 07       	cpc	r31, r24
    1ad6:	a0 f3       	brcs	.-24     	; 0x1ac0 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	08 95       	ret
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
}
    1ae2:	08 95       	ret

00001ae4 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1ae4:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	ad 57       	subi	r26, 0x7D	; 125
    1aea:	bf 4f       	sbci	r27, 0xFF	; 255
    1aec:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1aee:	a5 ec       	ldi	r26, 0xC5	; 197
    1af0:	b0 e2       	ldi	r27, 0x20	; 32
    1af2:	14 96       	adiw	r26, 0x04	; 4
    1af4:	9c 91       	ld	r25, X
    1af6:	14 97       	sbiw	r26, 0x04	; 4
    1af8:	9f 5f       	subi	r25, 0xFF	; 255
    1afa:	14 96       	adiw	r26, 0x04	; 4
    1afc:	9c 93       	st	X, r25
    1afe:	14 97       	sbiw	r26, 0x04	; 4
    1b00:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    1b02:	8d 91       	ld	r24, X+
    1b04:	9c 91       	ld	r25, X
    1b06:	96 87       	std	Z+14, r25	; 0x0e
    1b08:	85 87       	std	Z+13, r24	; 0x0d
    1b0a:	08 95       	ret

00001b0c <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	19 96       	adiw	r26, 0x09	; 9
    1b10:	2c 91       	ld	r18, X
    1b12:	19 97       	sbiw	r26, 0x09	; 9
    1b14:	22 23       	and	r18, r18
    1b16:	49 f0       	breq	.+18     	; 0x1b2a <nwkRxServiceDataInd+0x1e>
    1b18:	17 96       	adiw	r26, 0x07	; 7
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	18 97       	sbiw	r26, 0x08	; 8
    1b20:	20 81       	ld	r18, Z
    1b22:	21 11       	cpse	r18, r1
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <nwkRxServiceDataInd+0x22>
    1b26:	90 c3       	rjmp	.+1824   	; 0x2248 <nwkTxAckReceived>
    1b28:	08 95       	ret
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	08 95       	ret
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	08 95       	ret

00001b32 <nwkRxDuplicateRejectionTimerHandler>:
    1b32:	bc 01       	movw	r22, r24
    1b34:	e8 e6       	ldi	r30, 0x68	; 104
    1b36:	fe e1       	ldi	r31, 0x1E	; 30
    1b38:	2a e9       	ldi	r18, 0x9A	; 154
    1b3a:	3e e1       	ldi	r19, 0x1E	; 30
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	51 e0       	ldi	r21, 0x01	; 1
    1b40:	90 81       	ld	r25, Z
    1b42:	99 23       	and	r25, r25
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <nwkRxDuplicateRejectionTimerHandler+0x1a>
    1b46:	91 50       	subi	r25, 0x01	; 1
    1b48:	90 83       	st	Z, r25
    1b4a:	45 2f       	mov	r20, r21
    1b4c:	35 96       	adiw	r30, 0x05	; 5
    1b4e:	e2 17       	cp	r30, r18
    1b50:	f3 07       	cpc	r31, r19
    1b52:	b1 f7       	brne	.-20     	; 0x1b40 <nwkRxDuplicateRejectionTimerHandler+0xe>
    1b54:	44 23       	and	r20, r20
    1b56:	11 f0       	breq	.+4      	; 0x1b5c <nwkRxDuplicateRejectionTimerHandler+0x2a>
    1b58:	cb 01       	movw	r24, r22
    1b5a:	7b c6       	rjmp	.+3318   	; 0x2852 <SYS_TimerStart>
    1b5c:	08 95       	ret

00001b5e <nwkRxInit>:
    1b5e:	e8 e6       	ldi	r30, 0x68	; 104
    1b60:	fe e1       	ldi	r31, 0x1E	; 30
    1b62:	8a e9       	ldi	r24, 0x9A	; 154
    1b64:	9e e1       	ldi	r25, 0x1E	; 30
    1b66:	10 82       	st	Z, r1
    1b68:	35 96       	adiw	r30, 0x05	; 5
    1b6a:	e8 17       	cp	r30, r24
    1b6c:	f9 07       	cpc	r31, r25
    1b6e:	d9 f7       	brne	.-10     	; 0x1b66 <nwkRxInit+0x8>
    1b70:	e6 e5       	ldi	r30, 0x56	; 86
    1b72:	fe e1       	ldi	r31, 0x1E	; 30
    1b74:	84 e6       	ldi	r24, 0x64	; 100
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a0 e0       	ldi	r26, 0x00	; 0
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	86 83       	std	Z+6, r24	; 0x06
    1b7e:	97 83       	std	Z+7, r25	; 0x07
    1b80:	a0 87       	std	Z+8, r26	; 0x08
    1b82:	b1 87       	std	Z+9, r27	; 0x09
    1b84:	12 86       	std	Z+10, r1	; 0x0a
    1b86:	89 e9       	ldi	r24, 0x99	; 153
    1b88:	9d e0       	ldi	r25, 0x0D	; 13
    1b8a:	94 87       	std	Z+12, r25	; 0x0c
    1b8c:	83 87       	std	Z+11, r24	; 0x0b
    1b8e:	66 e8       	ldi	r22, 0x86	; 134
    1b90:	7d e0       	ldi	r23, 0x0D	; 13
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	3b ce       	rjmp	.-906    	; 0x180c <NWK_OpenEndpoint>
    1b96:	08 95       	ret

00001b98 <PHY_DataInd>:
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	ed 91       	ld	r30, X+
    1ba0:	fc 91       	ld	r31, X
    1ba2:	11 97       	sbiw	r26, 0x01	; 1
    1ba4:	21 81       	ldd	r18, Z+1	; 0x01
    1ba6:	28 38       	cpi	r18, 0x88	; 136
    1ba8:	f9 f4       	brne	.+62     	; 0x1be8 <PHY_DataInd+0x50>
    1baa:	20 81       	ld	r18, Z
    1bac:	2f 7d       	andi	r18, 0xDF	; 223
    1bae:	21 34       	cpi	r18, 0x41	; 65
    1bb0:	d9 f4       	brne	.+54     	; 0x1be8 <PHY_DataInd+0x50>
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	2c 91       	ld	r18, X
    1bb6:	20 31       	cpi	r18, 0x10	; 16
    1bb8:	b8 f0       	brcs	.+46     	; 0x1be8 <PHY_DataInd+0x50>
    1bba:	ec 01       	movw	r28, r24
    1bbc:	2e df       	rcall	.-420    	; 0x1a1a <nwkFrameAlloc>
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	99 f0       	breq	.+38     	; 0x1be8 <PHY_DataInd+0x50>
    1bc2:	20 e2       	ldi	r18, 0x20	; 32
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	20 83       	st	Z, r18
    1bc8:	2a 81       	ldd	r18, Y+2	; 0x02
    1bca:	21 83       	std	Z+1, r18	; 0x01
    1bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bce:	ed 57       	subi	r30, 0x7D	; 125
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	20 83       	st	Z, r18
    1bd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd6:	31 96       	adiw	r30, 0x01	; 1
    1bd8:	20 83       	st	Z, r18
    1bda:	4a 81       	ldd	r20, Y+2	; 0x02
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	68 81       	ld	r22, Y
    1be0:	79 81       	ldd	r23, Y+1	; 0x01
    1be2:	02 96       	adiw	r24, 0x02	; 2
    1be4:	0e 94 ad 4c 	call	0x995a	; 0x995a <memcpy>
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	08 95       	ret

00001bee <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1bee:	2f 92       	push	r2
    1bf0:	3f 92       	push	r3
    1bf2:	4f 92       	push	r4
    1bf4:	5f 92       	push	r5
    1bf6:	6f 92       	push	r6
    1bf8:	7f 92       	push	r7
    1bfa:	8f 92       	push	r8
    1bfc:	9f 92       	push	r9
    1bfe:	af 92       	push	r10
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	2c 97       	sbiw	r28, 0x0c	; 12
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1c22:	00 e0       	ldi	r16, 0x00	; 0
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1c26:	0f 2e       	mov	r0, r31
    1c28:	f4 e2       	ldi	r31, 0x24	; 36
    1c2a:	df 2e       	mov	r13, r31
    1c2c:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1c2e:	0f 2e       	mov	r0, r31
    1c30:	f5 ec       	ldi	r31, 0xC5	; 197
    1c32:	8f 2e       	mov	r8, r31
    1c34:	f0 e2       	ldi	r31, 0x20	; 32
    1c36:	9f 2e       	mov	r9, r31
    1c38:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1c3a:	68 94       	set
    1c3c:	cc 24       	eor	r12, r12
    1c3e:	c4 f8       	bld	r12, 4
    1c40:	0f 2e       	mov	r0, r31
    1c42:	f8 e6       	ldi	r31, 0x68	; 104
    1c44:	4f 2e       	mov	r4, r31
    1c46:	fe e1       	ldi	r31, 0x1E	; 30
    1c48:	5f 2e       	mov	r5, r31
    1c4a:	f0 2d       	mov	r31, r0
    1c4c:	0f 2e       	mov	r0, r31
    1c4e:	f4 e6       	ldi	r31, 0x64	; 100
    1c50:	6f 2e       	mov	r6, r31
    1c52:	fe e1       	ldi	r31, 0x1E	; 30
    1c54:	7f 2e       	mov	r7, r31
    1c56:	f0 2d       	mov	r31, r0
    1c58:	0f 2e       	mov	r0, r31
    1c5a:	f6 e9       	ldi	r31, 0x96	; 150
    1c5c:	ef 2e       	mov	r14, r31
    1c5e:	fe e1       	ldi	r31, 0x1E	; 30
    1c60:	ff 2e       	mov	r15, r31
    1c62:	f0 2d       	mov	r31, r0
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1c64:	31 2c       	mov	r3, r1
    1c66:	21 2c       	mov	r2, r1
    1c68:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1c6a:	a2 c1       	rjmp	.+836    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
  {
    switch (frame->state)
    1c6c:	d5 01       	movw	r26, r10
    1c6e:	8c 91       	ld	r24, X
    1c70:	82 32       	cpi	r24, 0x22	; 34
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <nwkRxTaskHandler+0x88>
    1c74:	cf c0       	rjmp	.+414    	; 0x1e14 <nwkRxTaskHandler+0x226>
    1c76:	84 32       	cpi	r24, 0x24	; 36
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <nwkRxTaskHandler+0x8e>
    1c7a:	98 c1       	rjmp	.+816    	; 0x1fac <nwkRxTaskHandler+0x3be>
    1c7c:	80 32       	cpi	r24, 0x20	; 32
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <nwkRxTaskHandler+0x94>
    1c80:	97 c1       	rjmp	.+814    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    1c82:	dc 92       	st	X, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1c84:	1b 96       	adiw	r26, 0x0b	; 11
    1c86:	8c 91       	ld	r24, X
    1c88:	1b 97       	sbiw	r26, 0x0b	; 11
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <nwkRxTaskHandler+0xa4>
    1c90:	8f c1       	rjmp	.+798    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1c92:	15 96       	adiw	r26, 0x05	; 5
    1c94:	2d 91       	ld	r18, X+
    1c96:	3c 91       	ld	r19, X
    1c98:	16 97       	sbiw	r26, 0x06	; 6
    1c9a:	2f 3f       	cpi	r18, 0xFF	; 255
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	81 f4       	brne	.+32     	; 0x1cc0 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1ca0:	f5 01       	movw	r30, r10
    1ca2:	87 85       	ldd	r24, Z+15	; 0x0f
    1ca4:	90 89       	ldd	r25, Z+16	; 0x10
    1ca6:	d4 01       	movw	r26, r8
    1ca8:	2d 91       	ld	r18, X+
    1caa:	3c 91       	ld	r19, X
    1cac:	28 17       	cp	r18, r24
    1cae:	39 07       	cpc	r19, r25
    1cb0:	19 f0       	breq	.+6      	; 0x1cb8 <nwkRxTaskHandler+0xca>
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <nwkRxTaskHandler+0xca>
    1cb6:	7c c1       	rjmp	.+760    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1cb8:	22 e2       	ldi	r18, 0x22	; 34
    1cba:	f5 01       	movw	r30, r10
    1cbc:	20 83       	st	Z, r18
    1cbe:	78 c1       	rjmp	.+752    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1cc0:	d5 01       	movw	r26, r10
    1cc2:	1f 96       	adiw	r26, 0x0f	; 15
    1cc4:	2d 91       	ld	r18, X+
    1cc6:	3c 91       	ld	r19, X
    1cc8:	50 97       	sbiw	r26, 0x10	; 16
    1cca:	2f 3f       	cpi	r18, 0xFF	; 255
    1ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <nwkRxTaskHandler+0xe4>
    1cd0:	76 c1       	rjmp	.+748    	; 0x1fbe <nwkRxTaskHandler+0x3d0>
    1cd2:	80 ff       	sbrs	r24, 0
    1cd4:	74 c1       	rjmp	.+744    	; 0x1fbe <nwkRxTaskHandler+0x3d0>
    1cd6:	6c c1       	rjmp	.+728    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1cd8:	8c 01       	movw	r16, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1cda:	2c 91       	ld	r18, X
    1cdc:	22 23       	and	r18, r18
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <nwkRxTaskHandler+0xf4>
    1ce0:	56 c0       	rjmp	.+172    	; 0x1d8e <nwkRxTaskHandler+0x1a0>
    1ce2:	20 81       	ld	r18, Z
    1ce4:	31 81       	ldd	r19, Z+1	; 0x01
    1ce6:	42 17       	cp	r20, r18
    1ce8:	53 07       	cpc	r21, r19
    1cea:	09 f0       	breq	.+2      	; 0x1cee <nwkRxTaskHandler+0x100>
    1cec:	51 c0       	rjmp	.+162    	; 0x1d90 <nwkRxTaskHandler+0x1a2>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1cee:	f5 01       	movw	r30, r10
    1cf0:	94 85       	ldd	r25, Z+12	; 0x0c
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	ee 0f       	add	r30, r30
    1cfa:	ff 1f       	adc	r31, r31
    1cfc:	e0 0f       	add	r30, r16
    1cfe:	f1 1f       	adc	r31, r17
    1d00:	ec 59       	subi	r30, 0x9C	; 156
    1d02:	f1 4e       	sbci	r31, 0xE1	; 225
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	89 1b       	sub	r24, r25

      if (diff < 8)
    1d08:	88 30       	cpi	r24, 0x08	; 8
    1d0a:	38 f5       	brcc	.+78     	; 0x1d5a <nwkRxTaskHandler+0x16c>
      {
        if (entry->mask & (1 << diff))
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	ee 0f       	add	r30, r30
    1d10:	ff 1f       	adc	r31, r31
    1d12:	ee 0f       	add	r30, r30
    1d14:	ff 1f       	adc	r31, r31
    1d16:	e0 0f       	add	r30, r16
    1d18:	f1 1f       	adc	r31, r17
    1d1a:	ec 59       	subi	r30, 0x9C	; 156
    1d1c:	f1 4e       	sbci	r31, 0xE1	; 225
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	29 2f       	mov	r18, r25
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	08 2e       	mov	r0, r24
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <nwkRxTaskHandler+0x13e>
    1d28:	35 95       	asr	r19
    1d2a:	27 95       	ror	r18
    1d2c:	0a 94       	dec	r0
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <nwkRxTaskHandler+0x13a>
    1d30:	20 fd       	sbrc	r18, 0
    1d32:	3e c1       	rjmp	.+636    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1d34:	f8 01       	movw	r30, r16
    1d36:	ee 0f       	add	r30, r30
    1d38:	ff 1f       	adc	r31, r31
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
    1d3e:	e0 0f       	add	r30, r16
    1d40:	f1 1f       	adc	r31, r17
    1d42:	ec 59       	subi	r30, 0x9C	; 156
    1d44:	f1 4e       	sbci	r31, 0xE1	; 225
    1d46:	21 e0       	ldi	r18, 0x01	; 1
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <nwkRxTaskHandler+0x162>
    1d4c:	22 0f       	add	r18, r18
    1d4e:	33 1f       	adc	r19, r19
    1d50:	8a 95       	dec	r24
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <nwkRxTaskHandler+0x15e>
    1d54:	92 2b       	or	r25, r18
    1d56:	93 83       	std	Z+3, r25	; 0x03
    1d58:	42 c1       	rjmp	.+644    	; 0x1fde <nwkRxTaskHandler+0x3f0>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	ee 0f       	add	r30, r30
    1d62:	ff 1f       	adc	r31, r31
    1d64:	0e 0f       	add	r16, r30
    1d66:	1f 1f       	adc	r17, r31
    1d68:	f8 01       	movw	r30, r16
    1d6a:	ec 59       	subi	r30, 0x9C	; 156
    1d6c:	f1 4e       	sbci	r31, 0xE1	; 225
    1d6e:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1d70:	23 81       	ldd	r18, Z+3	; 0x03
    1d72:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    1d74:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
    1d76:	a9 01       	movw	r20, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <nwkRxTaskHandler+0x190>
    1d7a:	44 0f       	add	r20, r20
    1d7c:	55 1f       	adc	r21, r21
    1d7e:	8a 95       	dec	r24
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <nwkRxTaskHandler+0x18c>
    1d82:	ca 01       	movw	r24, r20
    1d84:	81 60       	ori	r24, 0x01	; 1
    1d86:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1d88:	8f e1       	ldi	r24, 0x1F	; 31
    1d8a:	84 83       	std	Z+4, r24	; 0x04
    1d8c:	28 c1       	rjmp	.+592    	; 0x1fde <nwkRxTaskHandler+0x3f0>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1d8e:	bf 01       	movw	r22, r30
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	15 96       	adiw	r26, 0x05	; 5
    1d94:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1d96:	ee 15       	cp	r30, r14
    1d98:	ff 05       	cpc	r31, r15
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <nwkRxTaskHandler+0x1b0>
    1d9c:	9d cf       	rjmp	.-198    	; 0x1cd8 <nwkRxTaskHandler+0xea>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1d9e:	61 15       	cp	r22, r1
    1da0:	71 05       	cpc	r23, r1
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <nwkRxTaskHandler+0x1b8>
    1da4:	05 c1       	rjmp	.+522    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1da6:	db 01       	movw	r26, r22
    1da8:	11 96       	adiw	r26, 0x01	; 1
    1daa:	5c 93       	st	X, r21
    1dac:	4e 93       	st	-X, r20
  freeEntry->seq = header->nwkSeq;
    1dae:	f5 01       	movw	r30, r10
    1db0:	84 85       	ldd	r24, Z+12	; 0x0c
    1db2:	12 96       	adiw	r26, 0x02	; 2
    1db4:	8c 93       	st	X, r24
    1db6:	12 97       	sbiw	r26, 0x02	; 2
  freeEntry->mask = 1;
    1db8:	f1 e0       	ldi	r31, 0x01	; 1
    1dba:	13 96       	adiw	r26, 0x03	; 3
    1dbc:	fc 93       	st	X, r31
    1dbe:	13 97       	sbiw	r26, 0x03	; 3
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1dc0:	8f e1       	ldi	r24, 0x1F	; 31
    1dc2:	14 96       	adiw	r26, 0x04	; 4
    1dc4:	8c 93       	st	X, r24

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1dc6:	86 e5       	ldi	r24, 0x56	; 86
    1dc8:	9e e1       	ldi	r25, 0x1E	; 30
    1dca:	43 d5       	rcall	.+2694   	; 0x2852 <SYS_TimerStart>
    1dcc:	08 c1       	rjmp	.+528    	; 0x1fde <nwkRxTaskHandler+0x3f0>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1dce:	d5 01       	movw	r26, r10
    1dd0:	1f 96       	adiw	r26, 0x0f	; 15
    1dd2:	8d 91       	ld	r24, X+
    1dd4:	9c 91       	ld	r25, X
    1dd6:	50 97       	sbiw	r26, 0x10	; 16
    1dd8:	f4 01       	movw	r30, r8
    1dda:	20 81       	ld	r18, Z
    1ddc:	31 81       	ldd	r19, Z+1	; 0x01
    1dde:	28 17       	cp	r18, r24
    1de0:	39 07       	cpc	r19, r25
    1de2:	a1 f0       	breq	.+40     	; 0x1e0c <nwkRxTaskHandler+0x21e>
        0 == header->nwkFcf.linkLocal)
    1de4:	1b 96       	adiw	r26, 0x0b	; 11
    1de6:	2c 91       	ld	r18, X
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1de8:	22 fd       	sbrc	r18, 2
    1dea:	0d c0       	rjmp	.+26     	; 0x1e06 <nwkRxTaskHandler+0x218>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1dec:	c5 01       	movw	r24, r10
    1dee:	e7 d1       	rcall	.+974    	; 0x21be <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1df0:	d5 01       	movw	r26, r10
    1df2:	1f 96       	adiw	r26, 0x0f	; 15
    1df4:	8d 91       	ld	r24, X+
    1df6:	9c 91       	ld	r25, X
    1df8:	50 97       	sbiw	r26, 0x10	; 16
    1dfa:	f4 01       	movw	r30, r8
    1dfc:	20 81       	ld	r18, Z
    1dfe:	31 81       	ldd	r19, Z+1	; 0x01
    1e00:	28 17       	cp	r18, r24
    1e02:	39 07       	cpc	r19, r25
    1e04:	19 f0       	breq	.+6      	; 0x1e0c <nwkRxTaskHandler+0x21e>
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <nwkRxTaskHandler+0x21e>
    1e0a:	d2 c0       	rjmp	.+420    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1e0c:	e2 e2       	ldi	r30, 0x22	; 34
    1e0e:	d5 01       	movw	r26, r10
    1e10:	ec 93       	st	X, r30
    1e12:	ce c0       	rjmp	.+412    	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1e14:	10 92 63 1e 	sts	0x1E63, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1e18:	d5 01       	movw	r26, r10
    1e1a:	51 96       	adiw	r26, 0x11	; 17
    1e1c:	2c 91       	ld	r18, X
    1e1e:	51 97       	sbiw	r26, 0x11	; 17
    1e20:	22 95       	swap	r18
    1e22:	2f 70       	andi	r18, 0x0F	; 15
    1e24:	e2 2f       	mov	r30, r18
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	ee 0f       	add	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
    1e2c:	e5 53       	subi	r30, 0x35	; 53
    1e2e:	ff 4d       	sbci	r31, 0xDF	; 223
    1e30:	01 90       	ld	r0, Z+
    1e32:	f0 81       	ld	r31, Z
    1e34:	e0 2d       	mov	r30, r0
    1e36:	30 97       	sbiw	r30, 0x00	; 0
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <nwkRxTaskHandler+0x24e>
    1e3a:	61 c0       	rjmp	.+194    	; 0x1efe <nwkRxTaskHandler+0x310>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    1e3c:	1d 96       	adiw	r26, 0x0d	; 13
    1e3e:	8d 91       	ld	r24, X+
    1e40:	9c 91       	ld	r25, X
    1e42:	1e 97       	sbiw	r26, 0x0e	; 14
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1e48:	1f 96       	adiw	r26, 0x0f	; 15
    1e4a:	4d 91       	ld	r20, X+
    1e4c:	5c 91       	ld	r21, X
    1e4e:	50 97       	sbiw	r26, 0x10	; 16
    1e50:	5c 83       	std	Y+4, r21	; 0x04
    1e52:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1e54:	51 96       	adiw	r26, 0x11	; 17
    1e56:	3c 91       	ld	r19, X
    1e58:	51 97       	sbiw	r26, 0x11	; 17
    1e5a:	3f 70       	andi	r19, 0x0F	; 15
    1e5c:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1e5e:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
    1e60:	af 57       	subi	r26, 0x7F	; 127
    1e62:	bf 4f       	sbci	r27, 0xFF	; 255
    1e64:	6d 91       	ld	r22, X+
    1e66:	7c 91       	ld	r23, X
    1e68:	79 87       	std	Y+9, r23	; 0x09
    1e6a:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1e6c:	95 01       	movw	r18, r10
    1e6e:	2e 5f       	subi	r18, 0xFE	; 254
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	26 1b       	sub	r18, r22
    1e74:	37 0b       	sbc	r19, r23
    1e76:	d5 01       	movw	r26, r10
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	3c 91       	ld	r19, X
    1e7c:	11 97       	sbiw	r26, 0x01	; 1
    1e7e:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
    1e80:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
    1e82:	ad 57       	subi	r26, 0x7D	; 125
    1e84:	bf 4f       	sbci	r27, 0xFF	; 255
    1e86:	2c 91       	ld	r18, X
    1e88:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	2c 91       	ld	r18, X
    1e8e:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1e90:	d5 01       	movw	r26, r10
    1e92:	1b 96       	adiw	r26, 0x0b	; 11
    1e94:	3c 91       	ld	r19, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1e96:	63 2f       	mov	r22, r19
    1e98:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1e9a:	32 fd       	sbrc	r19, 2
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <nwkRxTaskHandler+0x2b4>
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <nwkRxTaskHandler+0x2b6>
    1ea2:	20 e2       	ldi	r18, 0x20	; 32
    1ea4:	26 2b       	or	r18, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1ea6:	33 fd       	sbrc	r19, 3
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <nwkRxTaskHandler+0x2c0>
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <nwkRxTaskHandler+0x2c2>
    1eae:	30 e4       	ldi	r19, 0x40	; 64
    1eb0:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1eb2:	4f 3f       	cpi	r20, 0xFF	; 255
    1eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb6:	11 f0       	breq	.+4      	; 0x1ebc <nwkRxTaskHandler+0x2ce>
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <nwkRxTaskHandler+0x2d0>
    1ebc:	34 e0       	ldi	r19, 0x04	; 4
    1ebe:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1ec0:	d5 01       	movw	r26, r10
    1ec2:	19 96       	adiw	r26, 0x09	; 9
    1ec4:	4d 91       	ld	r20, X+
    1ec6:	5c 91       	ld	r21, X
    1ec8:	1a 97       	sbiw	r26, 0x0a	; 10
    1eca:	84 17       	cp	r24, r20
    1ecc:	95 07       	cpc	r25, r21
    1ece:	11 f0       	breq	.+4      	; 0x1ed4 <nwkRxTaskHandler+0x2e6>
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <nwkRxTaskHandler+0x2e8>
    1ed4:	98 e0       	ldi	r25, 0x08	; 8
    1ed6:	82 2f       	mov	r24, r18
    1ed8:	89 2b       	or	r24, r25
    1eda:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1edc:	d5 01       	movw	r26, r10
    1ede:	15 96       	adiw	r26, 0x05	; 5
    1ee0:	2d 91       	ld	r18, X+
    1ee2:	3c 91       	ld	r19, X
    1ee4:	16 97       	sbiw	r26, 0x06	; 6
    1ee6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	11 f0       	breq	.+4      	; 0x1ef0 <nwkRxTaskHandler+0x302>
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <nwkRxTaskHandler+0x304>
    1ef0:	9c 2d       	mov	r25, r12
    1ef2:	89 2b       	or	r24, r25
    1ef4:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	19 95       	eicall
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <nwkRxTaskHandler+0x312>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1efe:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1f00:	f5 01       	movw	r30, r10
    1f02:	93 85       	ldd	r25, Z+11	; 0x0b
    1f04:	90 ff       	sbrs	r25, 0
    ack = false;
    1f06:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1f08:	d5 01       	movw	r26, r10
    1f0a:	17 96       	adiw	r26, 0x07	; 7
    1f0c:	2d 91       	ld	r18, X+
    1f0e:	3c 91       	ld	r19, X
    1f10:	18 97       	sbiw	r26, 0x08	; 8
    1f12:	2f 3f       	cpi	r18, 0xFF	; 255
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	69 f4       	brne	.+26     	; 0x1f32 <nwkRxTaskHandler+0x344>
    1f18:	f4 01       	movw	r30, r8
    1f1a:	40 81       	ld	r20, Z
    1f1c:	51 81       	ldd	r21, Z+1	; 0x01
    1f1e:	d5 01       	movw	r26, r10
    1f20:	1f 96       	adiw	r26, 0x0f	; 15
    1f22:	2d 91       	ld	r18, X+
    1f24:	3c 91       	ld	r19, X
    1f26:	50 97       	sbiw	r26, 0x10	; 16
    1f28:	42 17       	cp	r20, r18
    1f2a:	53 07       	cpc	r21, r19
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <nwkRxTaskHandler+0x344>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1f2e:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1f30:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    1f32:	f5 01       	movw	r30, r10
    1f34:	25 81       	ldd	r18, Z+5	; 0x05
    1f36:	36 81       	ldd	r19, Z+6	; 0x06
    1f38:	2f 3f       	cpi	r18, 0xFF	; 255
    1f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3c:	a1 f1       	breq	.+104    	; 0x1fa6 <nwkRxTaskHandler+0x3b8>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1f3e:	d4 01       	movw	r26, r8
    1f40:	2d 91       	ld	r18, X+
    1f42:	3c 91       	ld	r19, X
    1f44:	2f 3f       	cpi	r18, 0xFF	; 255
    1f46:	3f 4f       	sbci	r19, 0xFF	; 255
    1f48:	71 f1       	breq	.+92     	; 0x1fa6 <nwkRxTaskHandler+0x3b8>
    ack = false;

  if (ack)
    1f4a:	88 23       	and	r24, r24
    1f4c:	61 f1       	breq	.+88     	; 0x1fa6 <nwkRxTaskHandler+0x3b8>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1f4e:	65 dd       	rcall	.-1334   	; 0x1a1a <nwkFrameAlloc>
    1f50:	8c 01       	movw	r16, r24
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	41 f1       	breq	.+80     	; 0x1fa6 <nwkRxTaskHandler+0x3b8>
    return;

  nwkFrameCommandInit(ack);
    1f56:	c6 dd       	rcall	.-1140   	; 0x1ae4 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1f58:	f8 01       	movw	r30, r16
    1f5a:	81 81       	ldd	r24, Z+1	; 0x01
    1f5c:	8d 5f       	subi	r24, 0xFD	; 253
    1f5e:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    1f60:	e9 57       	subi	r30, 0x79	; 121
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	11 82       	std	Z+1, r1	; 0x01
    1f66:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1f68:	d5 01       	movw	r26, r10
    1f6a:	1b 96       	adiw	r26, 0x0b	; 11
    1f6c:	8c 91       	ld	r24, X
    1f6e:	1b 97       	sbiw	r26, 0x0b	; 11
    1f70:	86 95       	lsr	r24
    1f72:	81 70       	andi	r24, 0x01	; 1
    1f74:	f8 01       	movw	r30, r16
    1f76:	93 85       	ldd	r25, Z+11	; 0x0b
    1f78:	80 fb       	bst	r24, 0
    1f7a:	91 f9       	bld	r25, 1
    1f7c:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1f7e:	1d 96       	adiw	r26, 0x0d	; 13
    1f80:	8d 91       	ld	r24, X+
    1f82:	9c 91       	ld	r25, X
    1f84:	1e 97       	sbiw	r26, 0x0e	; 14
    1f86:	90 8b       	std	Z+16, r25	; 0x10
    1f88:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1f8a:	ef 57       	subi	r30, 0x7F	; 127
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	01 90       	ld	r0, Z+
    1f90:	f0 81       	ld	r31, Z
    1f92:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1f94:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1f96:	80 91 63 1e 	lds	r24, 0x1E63
    1f9a:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    1f9c:	1c 96       	adiw	r26, 0x0c	; 12
    1f9e:	8c 91       	ld	r24, X
    1fa0:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    1fa2:	c8 01       	movw	r24, r16
    1fa4:	bd d0       	rcall	.+378    	; 0x2120 <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1fa6:	d5 01       	movw	r26, r10
    1fa8:	dc 92       	st	X, r13
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
      } break;
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1fac:	c5 01       	movw	r24, r10
    1fae:	6e dd       	rcall	.-1316   	; 0x1a8c <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1fb0:	c5 01       	movw	r24, r10
    1fb2:	76 dd       	rcall	.-1300   	; 0x1aa0 <nwkFrameNext>
    1fb4:	5c 01       	movw	r10, r24
    1fb6:	89 2b       	or	r24, r25
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <nwkRxTaskHandler+0x3ce>
    1fba:	58 ce       	rjmp	.-848    	; 0x1c6c <nwkRxTaskHandler+0x7e>
    1fbc:	17 c0       	rjmp	.+46     	; 0x1fec <nwkRxTaskHandler+0x3fe>
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1fbe:	f5 01       	movw	r30, r10
    1fc0:	45 85       	ldd	r20, Z+13	; 0x0d
    1fc2:	56 85       	ldd	r21, Z+14	; 0x0e
    1fc4:	d4 01       	movw	r26, r8
    1fc6:	8d 91       	ld	r24, X+
    1fc8:	9c 91       	ld	r25, X
    1fca:	84 17       	cp	r24, r20
    1fcc:	95 07       	cpc	r25, r21
    1fce:	81 f3       	breq	.-32     	; 0x1fb0 <nwkRxTaskHandler+0x3c2>
    1fd0:	d2 01       	movw	r26, r4
    1fd2:	f3 01       	movw	r30, r6
    1fd4:	83 2d       	mov	r24, r3
    1fd6:	92 2d       	mov	r25, r2
    1fd8:	63 2d       	mov	r22, r3
    1fda:	72 2d       	mov	r23, r2
    1fdc:	7d ce       	rjmp	.-774    	; 0x1cd8 <nwkRxTaskHandler+0xea>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1fde:	f5 01       	movw	r30, r10
    1fe0:	87 81       	ldd	r24, Z+7	; 0x07
    1fe2:	90 85       	ldd	r25, Z+8	; 0x08
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <nwkRxTaskHandler+0x3fc>
    1fe8:	03 cf       	rjmp	.-506    	; 0x1df0 <nwkRxTaskHandler+0x202>
    1fea:	f1 ce       	rjmp	.-542    	; 0x1dce <nwkRxTaskHandler+0x1e0>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1fec:	2c 96       	adiw	r28, 0x0c	; 12
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	df 90       	pop	r13
    2006:	cf 90       	pop	r12
    2008:	bf 90       	pop	r11
    200a:	af 90       	pop	r10
    200c:	9f 90       	pop	r9
    200e:	8f 90       	pop	r8
    2010:	7f 90       	pop	r7
    2012:	6f 90       	pop	r6
    2014:	5f 90       	pop	r5
    2016:	4f 90       	pop	r4
    2018:	3f 90       	pop	r3
    201a:	2f 90       	pop	r2
    201c:	08 95       	ret

0000201e <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	7c 01       	movw	r14, r24
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	01 e0       	ldi	r16, 0x01	; 1
    2032:	c3 e1       	ldi	r28, 0x13	; 19
    2034:	13 c0       	rjmp	.+38     	; 0x205c <nwkTxDelayTimerHandler+0x3e>
    2036:	fc 01       	movw	r30, r24
    2038:	20 81       	ld	r18, Z
    203a:	21 31       	cpi	r18, 0x11	; 17
    203c:	79 f4       	brne	.+30     	; 0x205c <nwkTxDelayTimerHandler+0x3e>
    203e:	ec 57       	subi	r30, 0x7C	; 124
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	20 81       	ld	r18, Z
    2044:	31 81       	ldd	r19, Z+1	; 0x01
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	31 83       	std	Z+1, r19	; 0x01
    204c:	20 83       	st	Z, r18
    204e:	23 2b       	or	r18, r19
    2050:	21 f4       	brne	.+8      	; 0x205a <nwkTxDelayTimerHandler+0x3c>
    2052:	fc 01       	movw	r30, r24
    2054:	c0 83       	st	Z, r28
    2056:	10 2f       	mov	r17, r16
    2058:	01 c0       	rjmp	.+2      	; 0x205c <nwkTxDelayTimerHandler+0x3e>
    205a:	10 2f       	mov	r17, r16
    205c:	21 dd       	rcall	.-1470   	; 0x1aa0 <nwkFrameNext>
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	51 f7       	brne	.-44     	; 0x2036 <nwkTxDelayTimerHandler+0x18>
    2062:	11 23       	and	r17, r17
    2064:	11 f0       	breq	.+4      	; 0x206a <nwkTxDelayTimerHandler+0x4c>
    2066:	c7 01       	movw	r24, r14
    2068:	f4 d3       	rcall	.+2024   	; 0x2852 <SYS_TimerStart>
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	08 95       	ret

00002076 <nwkTxAckWaitTimerHandler>:
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	7c 01       	movw	r14, r24
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	01 e0       	ldi	r16, 0x01	; 1
    208c:	d7 e1       	ldi	r29, 0x17	; 23
    208e:	c0 e1       	ldi	r28, 0x10	; 16
    2090:	16 c0       	rjmp	.+44     	; 0x20be <nwkTxAckWaitTimerHandler+0x48>
    2092:	fc 01       	movw	r30, r24
    2094:	20 81       	ld	r18, Z
    2096:	26 31       	cpi	r18, 0x16	; 22
    2098:	91 f4       	brne	.+36     	; 0x20be <nwkTxAckWaitTimerHandler+0x48>
    209a:	ec 57       	subi	r30, 0x7C	; 124
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	20 81       	ld	r18, Z
    20a0:	31 81       	ldd	r19, Z+1	; 0x01
    20a2:	21 50       	subi	r18, 0x01	; 1
    20a4:	31 09       	sbc	r19, r1
    20a6:	31 83       	std	Z+1, r19	; 0x01
    20a8:	20 83       	st	Z, r18
    20aa:	23 2b       	or	r18, r19
    20ac:	39 f4       	brne	.+14     	; 0x20bc <nwkTxAckWaitTimerHandler+0x46>
    20ae:	fc 01       	movw	r30, r24
    20b0:	d0 83       	st	Z, r29
    20b2:	ed 57       	subi	r30, 0x7D	; 125
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	c0 83       	st	Z, r28
    20b8:	10 2f       	mov	r17, r16
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <nwkTxAckWaitTimerHandler+0x48>
    20bc:	10 2f       	mov	r17, r16
    20be:	f0 dc       	rcall	.-1568   	; 0x1aa0 <nwkFrameNext>
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	39 f7       	brne	.-50     	; 0x2092 <nwkTxAckWaitTimerHandler+0x1c>
    20c4:	11 23       	and	r17, r17
    20c6:	11 f0       	breq	.+4      	; 0x20cc <nwkTxAckWaitTimerHandler+0x56>
    20c8:	c7 01       	movw	r24, r14
    20ca:	c3 d3       	rcall	.+1926   	; 0x2852 <SYS_TimerStart>
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	ff 90       	pop	r15
    20d6:	ef 90       	pop	r14
    20d8:	08 95       	ret

000020da <nwkTxInit>:
    20da:	10 92 b1 1e 	sts	0x1EB1, r1
    20de:	10 92 b0 1e 	sts	0x1EB0, r1
    20e2:	e3 ea       	ldi	r30, 0xA3	; 163
    20e4:	fe e1       	ldi	r31, 0x1E	; 30
    20e6:	82 e3       	ldi	r24, 0x32	; 50
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e0       	ldi	r26, 0x00	; 0
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	86 83       	std	Z+6, r24	; 0x06
    20f0:	97 83       	std	Z+7, r25	; 0x07
    20f2:	a0 87       	std	Z+8, r26	; 0x08
    20f4:	b1 87       	std	Z+9, r27	; 0x09
    20f6:	12 86       	std	Z+10, r1	; 0x0a
    20f8:	8b e3       	ldi	r24, 0x3B	; 59
    20fa:	90 e1       	ldi	r25, 0x10	; 16
    20fc:	94 87       	std	Z+12, r25	; 0x0c
    20fe:	83 87       	std	Z+11, r24	; 0x0b
    2100:	e6 e9       	ldi	r30, 0x96	; 150
    2102:	fe e1       	ldi	r31, 0x1E	; 30
    2104:	8a e0       	ldi	r24, 0x0A	; 10
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e0       	ldi	r26, 0x00	; 0
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	86 83       	std	Z+6, r24	; 0x06
    210e:	97 83       	std	Z+7, r25	; 0x07
    2110:	a0 87       	std	Z+8, r26	; 0x08
    2112:	b1 87       	std	Z+9, r27	; 0x09
    2114:	12 86       	std	Z+10, r1	; 0x0a
    2116:	8f e0       	ldi	r24, 0x0F	; 15
    2118:	90 e1       	ldi	r25, 0x10	; 16
    211a:	94 87       	std	Z+12, r25	; 0x0c
    211c:	83 87       	std	Z+11, r24	; 0x0b
    211e:	08 95       	ret

00002120 <nwkTxFrame>:
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	fc 01       	movw	r30, r24
    2126:	dc 01       	movw	r26, r24
    2128:	aa 57       	subi	r26, 0x7A	; 122
    212a:	bf 4f       	sbci	r27, 0xFF	; 255
    212c:	8c 91       	ld	r24, X
    212e:	81 ff       	sbrs	r24, 1
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <nwkTxFrame+0x18>
    2132:	92 e1       	ldi	r25, 0x12	; 18
    2134:	90 83       	st	Z, r25
    2136:	02 c0       	rjmp	.+4      	; 0x213c <nwkTxFrame+0x1c>
    2138:	92 e1       	ldi	r25, 0x12	; 18
    213a:	90 83       	st	Z, r25
    213c:	df 01       	movw	r26, r30
    213e:	ad 57       	subi	r26, 0x7D	; 125
    2140:	bf 4f       	sbci	r27, 0xFF	; 255
    2142:	1c 92       	st	X, r1
    2144:	80 ff       	sbrs	r24, 0
    2146:	05 c0       	rjmp	.+10     	; 0x2152 <nwkTxFrame+0x32>
    2148:	8f ef       	ldi	r24, 0xFF	; 255
    214a:	9f ef       	ldi	r25, 0xFF	; 255
    214c:	96 83       	std	Z+6, r25	; 0x06
    214e:	85 83       	std	Z+5, r24	; 0x05
    2150:	06 c0       	rjmp	.+12     	; 0x215e <nwkTxFrame+0x3e>
    2152:	80 91 c7 20 	lds	r24, 0x20C7
    2156:	90 91 c8 20 	lds	r25, 0x20C8
    215a:	96 83       	std	Z+6, r25	; 0x06
    215c:	85 83       	std	Z+5, r24	; 0x05
    215e:	27 85       	ldd	r18, Z+15	; 0x0f
    2160:	30 89       	ldd	r19, Z+16	; 0x10
    2162:	30 87       	std	Z+8, r19	; 0x08
    2164:	27 83       	std	Z+7, r18	; 0x07
    2166:	a5 ec       	ldi	r26, 0xC5	; 197
    2168:	b0 e2       	ldi	r27, 0x20	; 32
    216a:	8d 91       	ld	r24, X+
    216c:	9c 91       	ld	r25, X
    216e:	11 97       	sbiw	r26, 0x01	; 1
    2170:	92 87       	std	Z+10, r25	; 0x0a
    2172:	81 87       	std	Z+9, r24	; 0x09
    2174:	15 96       	adiw	r26, 0x05	; 5
    2176:	8c 91       	ld	r24, X
    2178:	15 97       	sbiw	r26, 0x05	; 5
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	15 96       	adiw	r26, 0x05	; 5
    217e:	8c 93       	st	X, r24
    2180:	84 83       	std	Z+4, r24	; 0x04
    2182:	2f 3f       	cpi	r18, 0xFF	; 255
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	81 f4       	brne	.+32     	; 0x21a8 <nwkTxFrame+0x88>
    2188:	ef 01       	movw	r28, r30
    218a:	81 e4       	ldi	r24, 0x41	; 65
    218c:	98 e8       	ldi	r25, 0x88	; 136
    218e:	93 83       	std	Z+3, r25	; 0x03
    2190:	82 83       	std	Z+2, r24	; 0x02
    2192:	0e 94 92 4c 	call	0x9924	; 0x9924 <rand>
    2196:	fe 01       	movw	r30, r28
    2198:	ec 57       	subi	r30, 0x7C	; 124
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	87 70       	andi	r24, 0x07	; 7
    219e:	99 27       	eor	r25, r25
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	08 c0       	rjmp	.+16     	; 0x21b8 <nwkTxFrame+0x98>
    21a8:	81 e6       	ldi	r24, 0x61	; 97
    21aa:	98 e8       	ldi	r25, 0x88	; 136
    21ac:	93 83       	std	Z+3, r25	; 0x03
    21ae:	82 83       	std	Z+2, r24	; 0x02
    21b0:	ec 57       	subi	r30, 0x7C	; 124
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	11 82       	std	Z+1, r1	; 0x01
    21b6:	10 82       	st	Z, r1
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <nwkTxBroadcastFrame>:
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	8c 01       	movw	r16, r24
    21c8:	28 dc       	rcall	.-1968   	; 0x1a1a <nwkFrameAlloc>
    21ca:	ec 01       	movw	r28, r24
    21cc:	89 2b       	or	r24, r25
    21ce:	b9 f1       	breq	.+110    	; 0x223e <nwkTxBroadcastFrame+0x80>
    21d0:	82 e1       	ldi	r24, 0x12	; 18
    21d2:	88 83       	st	Y, r24
    21d4:	f8 01       	movw	r30, r16
    21d6:	81 81       	ldd	r24, Z+1	; 0x01
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	fe 01       	movw	r30, r28
    21dc:	ed 57       	subi	r30, 0x7D	; 125
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	10 82       	st	Z, r1
    21e2:	0e 94 92 4c 	call	0x9924	; 0x9924 <rand>
    21e6:	fe 01       	movw	r30, r28
    21e8:	ec 57       	subi	r30, 0x7C	; 124
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	87 70       	andi	r24, 0x07	; 7
    21ee:	99 27       	eor	r25, r25
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	33 96       	adiw	r30, 0x03	; 3
    21f8:	11 82       	std	Z+1, r1	; 0x01
    21fa:	10 82       	st	Z, r1
    21fc:	f8 01       	movw	r30, r16
    21fe:	41 81       	ldd	r20, Z+1	; 0x01
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	b8 01       	movw	r22, r16
    2204:	6e 5f       	subi	r22, 0xFE	; 254
    2206:	7f 4f       	sbci	r23, 0xFF	; 255
    2208:	ce 01       	movw	r24, r28
    220a:	02 96       	adiw	r24, 0x02	; 2
    220c:	0e 94 ad 4c 	call	0x995a	; 0x995a <memcpy>
    2210:	81 e4       	ldi	r24, 0x41	; 65
    2212:	98 e8       	ldi	r25, 0x88	; 136
    2214:	9b 83       	std	Y+3, r25	; 0x03
    2216:	8a 83       	std	Y+2, r24	; 0x02
    2218:	8f ef       	ldi	r24, 0xFF	; 255
    221a:	9f ef       	ldi	r25, 0xFF	; 255
    221c:	98 87       	std	Y+8, r25	; 0x08
    221e:	8f 83       	std	Y+7, r24	; 0x07
    2220:	f8 01       	movw	r30, r16
    2222:	85 81       	ldd	r24, Z+5	; 0x05
    2224:	96 81       	ldd	r25, Z+6	; 0x06
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	e5 ec       	ldi	r30, 0xC5	; 197
    222c:	f0 e2       	ldi	r31, 0x20	; 32
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	9a 87       	std	Y+10, r25	; 0x0a
    2234:	89 87       	std	Y+9, r24	; 0x09
    2236:	85 81       	ldd	r24, Z+5	; 0x05
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	85 83       	std	Z+5, r24	; 0x05
    223c:	8c 83       	std	Y+4, r24	; 0x04
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	08 95       	ret

00002248 <nwkTxAckReceived>:
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	fc 01       	movw	r30, r24
    224e:	c7 81       	ldd	r28, Z+7	; 0x07
    2250:	d0 85       	ldd	r29, Z+8	; 0x08
    2252:	81 85       	ldd	r24, Z+9	; 0x09
    2254:	83 30       	cpi	r24, 0x03	; 3
    2256:	c1 f4       	brne	.+48     	; 0x2288 <nwkTxAckReceived+0x40>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	10 c0       	rjmp	.+32     	; 0x227e <nwkTxAckReceived+0x36>
    225e:	fc 01       	movw	r30, r24
    2260:	20 81       	ld	r18, Z
    2262:	26 31       	cpi	r18, 0x16	; 22
    2264:	61 f4       	brne	.+24     	; 0x227e <nwkTxAckReceived+0x36>
    2266:	34 85       	ldd	r19, Z+12	; 0x0c
    2268:	29 81       	ldd	r18, Y+1	; 0x01
    226a:	32 13       	cpse	r19, r18
    226c:	08 c0       	rjmp	.+16     	; 0x227e <nwkTxAckReceived+0x36>
    226e:	27 e1       	ldi	r18, 0x17	; 23
    2270:	20 83       	st	Z, r18
    2272:	2a 81       	ldd	r18, Y+2	; 0x02
    2274:	ea 57       	subi	r30, 0x7A	; 122
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	20 83       	st	Z, r18
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	06 c0       	rjmp	.+12     	; 0x228a <nwkTxAckReceived+0x42>
    227e:	10 dc       	rcall	.-2016   	; 0x1aa0 <nwkFrameNext>
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	69 f7       	brne	.-38     	; 0x225e <nwkTxAckReceived+0x16>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	01 c0       	rjmp	.+2      	; 0x228a <nwkTxAckReceived+0x42>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret

00002290 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2290:	e0 91 b0 1e 	lds	r30, 0x1EB0
    2294:	f0 91 b1 1e 	lds	r31, 0x1EB1

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	21 f0       	breq	.+8      	; 0x22a4 <PHY_DataConf+0x14>
    229c:	48 f0       	brcs	.+18     	; 0x22b0 <PHY_DataConf+0x20>
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	19 f0       	breq	.+6      	; 0x22a8 <PHY_DataConf+0x18>
    22a2:	04 c0       	rjmp	.+8      	; 0x22ac <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    22a4:	80 e2       	ldi	r24, 0x20	; 32
    22a6:	05 c0       	rjmp	.+10     	; 0x22b2 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    22a8:	81 e2       	ldi	r24, 0x21	; 33
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    22b0:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    22b2:	df 01       	movw	r26, r30
    22b4:	ad 57       	subi	r26, 0x7D	; 125
    22b6:	bf 4f       	sbci	r27, 0xFF	; 255
    22b8:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    22ba:	85 e1       	ldi	r24, 0x15	; 21
    22bc:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    22be:	10 92 b1 1e 	sts	0x1EB1, r1
    22c2:	10 92 b0 1e 	sts	0x1EB0, r1
  nwkIb.lock--;
    22c6:	e5 ec       	ldi	r30, 0xC5	; 197
    22c8:	f0 e2       	ldi	r31, 0x20	; 32
    22ca:	86 a1       	ldd	r24, Z+38	; 0x26
    22cc:	97 a1       	ldd	r25, Z+39	; 0x27
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	97 a3       	std	Z+39, r25	; 0x27
    22d2:	86 a3       	std	Z+38, r24	; 0x26
    22d4:	08 95       	ret

000022d6 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    22d6:	9f 92       	push	r9
    22d8:	af 92       	push	r10
    22da:	bf 92       	push	r11
    22dc:	cf 92       	push	r12
    22de:	df 92       	push	r13
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    22ec:	c0 e0       	ldi	r28, 0x00	; 0
    22ee:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    22f0:	0f 2e       	mov	r0, r31
    22f2:	f4 e1       	ldi	r31, 0x14	; 20
    22f4:	af 2e       	mov	r10, r31
    22f6:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    22f8:	05 ec       	ldi	r16, 0xC5	; 197
    22fa:	10 e2       	ldi	r17, 0x20	; 32
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    22fc:	0f 2e       	mov	r0, r31
    22fe:	f7 e1       	ldi	r31, 0x17	; 23
    2300:	df 2e       	mov	r13, r31
    2302:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    2304:	0f 2e       	mov	r0, r31
    2306:	f6 e1       	ldi	r31, 0x16	; 22
    2308:	9f 2e       	mov	r9, r31
    230a:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    230c:	0f 2e       	mov	r0, r31
    230e:	f5 e1       	ldi	r31, 0x15	; 21
    2310:	ef 2e       	mov	r14, r31
    2312:	f1 2c       	mov	r15, r1
    2314:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2316:	0f 2e       	mov	r0, r31
    2318:	f3 e1       	ldi	r31, 0x13	; 19
    231a:	cf 2e       	mov	r12, r31
    231c:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    231e:	0f 2e       	mov	r0, r31
    2320:	f1 e1       	ldi	r31, 0x11	; 17
    2322:	bf 2e       	mov	r11, r31
    2324:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2326:	5e c0       	rjmp	.+188    	; 0x23e4 <nwkTxTaskHandler+0x10e>
  {
    switch (frame->state)
    2328:	88 81       	ld	r24, Y
    232a:	83 31       	cpi	r24, 0x13	; 19
    232c:	c1 f0       	breq	.+48     	; 0x235e <nwkTxTaskHandler+0x88>
    232e:	18 f4       	brcc	.+6      	; 0x2336 <nwkTxTaskHandler+0x60>
    2330:	82 31       	cpi	r24, 0x12	; 18
    2332:	39 f0       	breq	.+14     	; 0x2342 <nwkTxTaskHandler+0x6c>
    2334:	57 c0       	rjmp	.+174    	; 0x23e4 <nwkTxTaskHandler+0x10e>
    2336:	85 31       	cpi	r24, 0x15	; 21
    2338:	49 f1       	breq	.+82     	; 0x238c <nwkTxTaskHandler+0xb6>
    233a:	87 31       	cpi	r24, 0x17	; 23
    233c:	09 f4       	brne	.+2      	; 0x2340 <nwkTxTaskHandler+0x6a>
    233e:	45 c0       	rjmp	.+138    	; 0x23ca <nwkTxTaskHandler+0xf4>
    2340:	51 c0       	rjmp	.+162    	; 0x23e4 <nwkTxTaskHandler+0x10e>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    2342:	fe 01       	movw	r30, r28
    2344:	ec 57       	subi	r30, 0x7C	; 124
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	89 2b       	or	r24, r25
    234e:	29 f0       	breq	.+10     	; 0x235a <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2350:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    2352:	86 e9       	ldi	r24, 0x96	; 150
    2354:	9e e1       	ldi	r25, 0x1E	; 30
    2356:	7d d2       	rcall	.+1274   	; 0x2852 <SYS_TimerStart>
    2358:	45 c0       	rjmp	.+138    	; 0x23e4 <nwkTxTaskHandler+0x10e>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    235a:	c8 82       	st	Y, r12
    235c:	43 c0       	rjmp	.+134    	; 0x23e4 <nwkTxTaskHandler+0x10e>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    235e:	80 91 b0 1e 	lds	r24, 0x1EB0
    2362:	90 91 b1 1e 	lds	r25, 0x1EB1
    2366:	89 2b       	or	r24, r25
    2368:	09 f0       	breq	.+2      	; 0x236c <nwkTxTaskHandler+0x96>
    236a:	3c c0       	rjmp	.+120    	; 0x23e4 <nwkTxTaskHandler+0x10e>
        {
          nwkTxPhyActiveFrame = frame;
    236c:	d0 93 b1 1e 	sts	0x1EB1, r29
    2370:	c0 93 b0 1e 	sts	0x1EB0, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    2374:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    2376:	69 81       	ldd	r22, Y+1	; 0x01
    2378:	ce 01       	movw	r24, r28
    237a:	02 96       	adiw	r24, 0x02	; 2
    237c:	ad d0       	rcall	.+346    	; 0x24d8 <PHY_DataReq>
          nwkIb.lock++;
    237e:	f8 01       	movw	r30, r16
    2380:	86 a1       	ldd	r24, Z+38	; 0x26
    2382:	97 a1       	ldd	r25, Z+39	; 0x27
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	97 a3       	std	Z+39, r25	; 0x27
    2388:	86 a3       	std	Z+38, r24	; 0x26
    238a:	2c c0       	rjmp	.+88     	; 0x23e4 <nwkTxTaskHandler+0x10e>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    238c:	fe 01       	movw	r30, r28
    238e:	ed 57       	subi	r30, 0x7D	; 125
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	81 11       	cpse	r24, r1
    2396:	17 c0       	rjmp	.+46     	; 0x23c6 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    2398:	2d 85       	ldd	r18, Y+13	; 0x0d
    239a:	3e 85       	ldd	r19, Y+14	; 0x0e
    239c:	f8 01       	movw	r30, r16
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	28 17       	cp	r18, r24
    23a4:	39 07       	cpc	r19, r25
    23a6:	69 f4       	brne	.+26     	; 0x23c2 <nwkTxTaskHandler+0xec>
    23a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    23aa:	80 ff       	sbrs	r24, 0
    23ac:	0a c0       	rjmp	.+20     	; 0x23c2 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    23ae:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    23b0:	fe 01       	movw	r30, r28
    23b2:	ec 57       	subi	r30, 0x7C	; 124
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	f1 82       	std	Z+1, r15	; 0x01
    23b8:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    23ba:	83 ea       	ldi	r24, 0xA3	; 163
    23bc:	9e e1       	ldi	r25, 0x1E	; 30
    23be:	49 d2       	rcall	.+1170   	; 0x2852 <SYS_TimerStart>
    23c0:	11 c0       	rjmp	.+34     	; 0x23e4 <nwkTxTaskHandler+0x10e>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    23c2:	d8 82       	st	Y, r13
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <nwkTxTaskHandler+0x10e>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    23c6:	d8 82       	st	Y, r13
    23c8:	0d c0       	rjmp	.+26     	; 0x23e4 <nwkTxTaskHandler+0x10e>
      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
#endif
        if (NULL == frame->tx.confirm)
    23ca:	fe 01       	movw	r30, r28
    23cc:	e9 57       	subi	r30, 0x79	; 121
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	01 90       	ld	r0, Z+
    23d2:	f0 81       	ld	r31, Z
    23d4:	e0 2d       	mov	r30, r0
    23d6:	30 97       	sbiw	r30, 0x00	; 0
    23d8:	19 f4       	brne	.+6      	; 0x23e0 <nwkTxTaskHandler+0x10a>
          nwkFrameFree(frame);
    23da:	ce 01       	movw	r24, r28
    23dc:	57 db       	rcall	.-2386   	; 0x1a8c <nwkFrameFree>
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <nwkTxTaskHandler+0x10e>
        else
          frame->tx.confirm(frame);
    23e0:	ce 01       	movw	r24, r28
    23e2:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    23e4:	ce 01       	movw	r24, r28
    23e6:	5c db       	rcall	.-2376   	; 0x1aa0 <nwkFrameNext>
    23e8:	ec 01       	movw	r28, r24
    23ea:	89 2b       	or	r24, r25
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <nwkTxTaskHandler+0x11a>
    23ee:	9c cf       	rjmp	.-200    	; 0x2328 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	ef 90       	pop	r14
    23fc:	df 90       	pop	r13
    23fe:	cf 90       	pop	r12
    2400:	bf 90       	pop	r11
    2402:	af 90       	pop	r10
    2404:	9f 90       	pop	r9
    2406:	08 95       	ret

00002408 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    2408:	80 91 b2 1e 	lds	r24, 0x1EB2
    240c:	98 2f       	mov	r25, r24
    240e:	9f 70       	andi	r25, 0x0F	; 15
    2410:	e4 e5       	ldi	r30, 0x54	; 84
    2412:	f1 e0       	ldi	r31, 0x01	; 1
    2414:	80 81       	ld	r24, Z
    2416:	80 7f       	andi	r24, 0xF0	; 240
    2418:	89 2b       	or	r24, r25
    241a:	80 83       	st	Z, r24
    241c:	80 91 b2 1e 	lds	r24, 0x1EB2
    2420:	88 23       	and	r24, r24
    2422:	29 f0       	breq	.+10     	; 0x242e <phySetChannel+0x26>
    2424:	80 91 b3 1e 	lds	r24, 0x1EB3
    2428:	80 93 53 01 	sts	0x0153, r24
    242c:	08 95       	ret
    242e:	80 91 b3 1e 	lds	r24, 0x1EB3
    2432:	98 2f       	mov	r25, r24
    2434:	9f 71       	andi	r25, 0x1F	; 31
    2436:	e8 e4       	ldi	r30, 0x48	; 72
    2438:	f1 e0       	ldi	r31, 0x01	; 1
    243a:	80 81       	ld	r24, Z
    243c:	80 7e       	andi	r24, 0xE0	; 224
    243e:	89 2b       	or	r24, r25
    2440:	80 83       	st	Z, r24
    2442:	08 95       	ret

00002444 <phyTrxSetState>:
    2444:	93 e0       	ldi	r25, 0x03	; 3
    2446:	90 93 42 01 	sts	0x0142, r25
    244a:	e1 e4       	ldi	r30, 0x41	; 65
    244c:	f1 e0       	ldi	r31, 0x01	; 1
    244e:	90 81       	ld	r25, Z
    2450:	9f 71       	andi	r25, 0x1F	; 31
    2452:	98 30       	cpi	r25, 0x08	; 8
    2454:	e1 f7       	brne	.-8      	; 0x244e <phyTrxSetState+0xa>
    2456:	80 93 42 01 	sts	0x0142, r24
    245a:	e1 e4       	ldi	r30, 0x41	; 65
    245c:	f1 e0       	ldi	r31, 0x01	; 1
    245e:	90 81       	ld	r25, Z
    2460:	9f 71       	andi	r25, 0x1F	; 31
    2462:	98 13       	cpse	r25, r24
    2464:	fc cf       	rjmp	.-8      	; 0x245e <phyTrxSetState+0x1a>
    2466:	08 95       	ret

00002468 <phySetRxState>:
    2468:	88 e0       	ldi	r24, 0x08	; 8
    246a:	ec df       	rcall	.-40     	; 0x2444 <phyTrxSetState>
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	80 93 4f 01 	sts	0x014F, r24
    2472:	80 91 b4 1e 	lds	r24, 0x1EB4
    2476:	88 23       	and	r24, r24
    2478:	11 f0       	breq	.+4      	; 0x247e <phySetRxState+0x16>
    247a:	86 e1       	ldi	r24, 0x16	; 22
    247c:	e3 cf       	rjmp	.-58     	; 0x2444 <phyTrxSetState>
    247e:	08 95       	ret

00002480 <PHY_SetRxState>:
    2480:	80 93 b4 1e 	sts	0x1EB4, r24
    2484:	f1 cf       	rjmp	.-30     	; 0x2468 <phySetRxState>
    2486:	08 95       	ret

00002488 <PHY_SetChannel>:
    2488:	80 93 b3 1e 	sts	0x1EB3, r24
    248c:	bd cf       	rjmp	.-134    	; 0x2408 <phySetChannel>
    248e:	08 95       	ret

00002490 <PHY_SetPanId>:
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	1f 92       	push	r1
    2496:	1f 92       	push	r1
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	80 93 62 01 	sts	0x0162, r24
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	80 93 63 01 	sts	0x0163, r24
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	08 95       	ret

000024b4 <PHY_SetShortAddr>:
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	1f 92       	push	r1
    24ba:	1f 92       	push	r1
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	9a 83       	std	Y+2, r25	; 0x02
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	80 93 60 01 	sts	0x0160, r24
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	80 93 61 01 	sts	0x0161, r24
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	08 95       	ret

000024d8 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	8c 01       	movw	r16, r24
    24e0:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    24e2:	89 e1       	ldi	r24, 0x19	; 25
    24e4:	af df       	rcall	.-162    	; 0x2444 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	8c 0f       	add	r24, r28
    24f0:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    24f4:	cc 23       	and	r28, r28
    24f6:	81 f0       	breq	.+32     	; 0x2518 <PHY_DataReq+0x40>
    24f8:	f8 01       	movw	r30, r16
    24fa:	c1 50       	subi	r28, 0x01	; 1
    24fc:	2c 2f       	mov	r18, r28
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	2f 5f       	subi	r18, 0xFF	; 255
    2502:	3f 4f       	sbci	r19, 0xFF	; 255
    2504:	c8 01       	movw	r24, r16
    2506:	82 0f       	add	r24, r18
    2508:	93 1f       	adc	r25, r19
    250a:	a1 e8       	ldi	r26, 0x81	; 129
    250c:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    250e:	21 91       	ld	r18, Z+
    2510:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    2512:	e8 17       	cp	r30, r24
    2514:	f9 07       	cpc	r31, r25
    2516:	d9 f7       	brne	.-10     	; 0x250e <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	80 93 35 1f 	sts	0x1F35, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	80 93 42 01 	sts	0x0142, r24
}
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	08 95       	ret

0000252c <PHY_RandomReq>:

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
  uint16_t rnd = 0;

  TRX_RPC_REG = 0x00;
    2538:	10 92 56 01 	sts	0x0156, r1

  phyTrxSetState(TRX_CMD_RX_ON);
    253c:	86 e0       	ldi	r24, 0x06	; 6
    253e:	82 df       	rcall	.-252    	; 0x2444 <phyTrxSetState>
    2540:	c0 e0       	ldi	r28, 0x00	; 0
    2542:	d0 e0       	ldi	r29, 0x00	; 0
#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
  uint16_t rnd = 0;
    2544:	e1 2c       	mov	r14, r1
    2546:	f1 2c       	mov	r15, r1
  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    2548:	06 e4       	ldi	r16, 0x46	; 70
    254a:	11 e0       	ldi	r17, 0x01	; 1

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	f1 d8       	rcall	.-3614   	; 0x1732 <HAL_Delay>
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    2550:	f8 01       	movw	r30, r16
    2552:	20 81       	ld	r18, Z
    2554:	22 95       	swap	r18
    2556:	26 95       	lsr	r18
    2558:	27 70       	andi	r18, 0x07	; 7
    255a:	23 70       	andi	r18, 0x03	; 3
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	0c 2e       	mov	r0, r28
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <PHY_RandomReq+0x3a>
    2562:	22 0f       	add	r18, r18
    2564:	33 1f       	adc	r19, r19
    2566:	0a 94       	dec	r0
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <PHY_RandomReq+0x36>
    256a:	e2 2a       	or	r14, r18
    256c:	f3 2a       	or	r15, r19
    256e:	22 96       	adiw	r28, 0x02	; 2

  TRX_RPC_REG = 0x00;

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
    2570:	c0 31       	cpi	r28, 0x10	; 16
    2572:	d1 05       	cpc	r29, r1
    2574:	59 f7       	brne	.-42     	; 0x254c <PHY_RandomReq+0x20>
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
  }

  phyTrxSetState(TRX_CMD_TRX_OFF);
    2576:	88 e0       	ldi	r24, 0x08	; 8
    2578:	65 df       	rcall	.-310    	; 0x2444 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    257a:	8b ee       	ldi	r24, 0xEB	; 235
    257c:	80 93 56 01 	sts	0x0156, r24

  phySetRxState();
    2580:	73 df       	rcall	.-282    	; 0x2468 <phySetRxState>

  return rnd;
}
    2582:	c7 01       	movw	r24, r14
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	ff 90       	pop	r15
    258e:	ef 90       	pop	r14
    2590:	08 95       	ret

00002592 <PHY_Init>:
/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  //Rest transceiver
  TRXPR_REG_s.trxrst = 1;
    2592:	e9 e3       	ldi	r30, 0x39	; 57
    2594:	f1 e0       	ldi	r31, 0x01	; 1
    2596:	80 81       	ld	r24, Z
    2598:	81 60       	ori	r24, 0x01	; 1
    259a:	80 83       	st	Z, r24

  phyRxState = false;
    259c:	10 92 b4 1e 	sts	0x1EB4, r1
  phyBand = 0;
    25a0:	10 92 b2 1e 	sts	0x1EB2, r1
  phyState = PHY_STATE_IDLE;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	80 93 35 1f 	sts	0x1F35, r24

  //off transceiver
  phyTrxSetState(TRX_CMD_TRX_OFF);
    25aa:	88 e0       	ldi	r24, 0x08	; 8
    25ac:	4b df       	rcall	.-362    	; 0x2444 <phyTrxSetState>
  //transceiver power reduction mode
  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    25ae:	8b ee       	ldi	r24, 0xEB	; 235
    25b0:	80 93 56 01 	sts	0x0156, r24
  //If this bit is set, the next received frame will be protected and not overwritten by following frames
  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    25b4:	ec e4       	ldi	r30, 0x4C	; 76
    25b6:	f1 e0       	ldi	r31, 0x01	; 1
    25b8:	80 81       	ld	r24, Z
    25ba:	80 68       	ori	r24, 0x80	; 128
    25bc:	80 83       	st	Z, r24

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
    25be:	b6 df       	rcall	.-148    	; 0x252c <PHY_RandomReq>
    25c0:	80 93 6d 01 	sts	0x016D, r24
    25c4:	08 95       	ret

000025c6 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <PHY_TaskHandler+0x8>
    25ce:	1f 92       	push	r1
    25d0:	1f 92       	push	r1
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    25d6:	80 91 35 1f 	lds	r24, 0x1F35
    25da:	82 30       	cpi	r24, 0x02	; 2
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <PHY_TaskHandler+0x1a>
    25de:	65 c0       	rjmp	.+202    	; 0x26aa <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    25e0:	80 91 4f 01 	lds	r24, 0x014F
    25e4:	83 ff       	sbrs	r24, 3
    25e6:	3e c0       	rjmp	.+124    	; 0x2664 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    25e8:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    25ec:	6a 2f       	mov	r22, r26
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	ab 01       	movw	r20, r22
    25f2:	4f 5f       	subi	r20, 0xFF	; 255
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    25fc:	fc 01       	movw	r30, r24
    25fe:	e0 58       	subi	r30, 0x80	; 128
    2600:	fe 4f       	sbci	r31, 0xFE	; 254
    2602:	30 81       	ld	r19, Z
    2604:	fc 01       	movw	r30, r24
    2606:	eb 54       	subi	r30, 0x4B	; 75
    2608:	f1 4e       	sbci	r31, 0xE1	; 225
    260a:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    260c:	2f 5f       	subi	r18, 0xFF	; 255
    260e:	82 2f       	mov	r24, r18
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	84 17       	cp	r24, r20
    2614:	95 07       	cpc	r25, r21
    2616:	94 f3       	brlt	.-28     	; 0x25fc <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    2618:	85 eb       	ldi	r24, 0xB5	; 181
    261a:	9e e1       	ldi	r25, 0x1E	; 30
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    2620:	a2 50       	subi	r26, 0x02	; 2
    2622:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    2624:	fb 01       	movw	r30, r22
    2626:	eb 54       	subi	r30, 0x4B	; 75
    2628:	f1 4e       	sbci	r31, 0xE1	; 225
    262a:	80 81       	ld	r24, Z
    262c:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    262e:	80 91 47 01 	lds	r24, 0x0147
    2632:	8a 55       	subi	r24, 0x5A	; 90
    2634:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    2636:	ce 01       	movw	r24, r28
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	ae da       	rcall	.-2724   	; 0x1b98 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    263c:	e1 e4       	ldi	r30, 0x41	; 65
    263e:	f1 e0       	ldi	r31, 0x01	; 1
    2640:	80 81       	ld	r24, Z
    2642:	8f 71       	andi	r24, 0x1F	; 31
    2644:	86 31       	cpi	r24, 0x16	; 22
    2646:	e1 f7       	brne	.-8      	; 0x2640 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    2648:	ef e4       	ldi	r30, 0x4F	; 79
    264a:	f1 e0       	ldi	r31, 0x01	; 1
    264c:	80 81       	ld	r24, Z
    264e:	88 60       	ori	r24, 0x08	; 8
    2650:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    2652:	ec e4       	ldi	r30, 0x4C	; 76
    2654:	f1 e0       	ldi	r31, 0x01	; 1
    2656:	80 81       	ld	r24, Z
    2658:	8f 77       	andi	r24, 0x7F	; 127
    265a:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    265c:	80 81       	ld	r24, Z
    265e:	80 68       	ori	r24, 0x80	; 128
    2660:	80 83       	st	Z, r24
    2662:	23 c0       	rjmp	.+70     	; 0x26aa <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    2664:	80 91 4f 01 	lds	r24, 0x014F
    2668:	86 ff       	sbrs	r24, 6
    266a:	1f c0       	rjmp	.+62     	; 0x26aa <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    266c:	80 91 41 01 	lds	r24, 0x0141
    2670:	8f 71       	andi	r24, 0x1F	; 31
    2672:	89 31       	cpi	r24, 0x19	; 25
    2674:	a9 f4       	brne	.+42     	; 0x26a0 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    2676:	10 91 42 01 	lds	r17, 0x0142
    267a:	12 95       	swap	r17
    267c:	16 95       	lsr	r17
    267e:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    2680:	49 f0       	breq	.+18     	; 0x2694 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2682:	13 30       	cpi	r17, 0x03	; 3
    2684:	21 f0       	breq	.+8      	; 0x268e <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    2686:	15 30       	cpi	r17, 0x05	; 5
    2688:	21 f0       	breq	.+8      	; 0x2692 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    268a:	13 e0       	ldi	r17, 0x03	; 3
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    268e:	11 e0       	ldi	r17, 0x01	; 1
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    2692:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    2694:	e9 de       	rcall	.-558    	; 0x2468 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	80 93 35 1f 	sts	0x1F35, r24

      PHY_DataConf(status);
    269c:	81 2f       	mov	r24, r17
    269e:	f8 dd       	rcall	.-1040   	; 0x2290 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    26a0:	ef e4       	ldi	r30, 0x4F	; 79
    26a2:	f1 e0       	ldi	r31, 0x01	; 1
    26a4:	80 81       	ld	r24, Z
    26a6:	80 64       	ori	r24, 0x40	; 64
    26a8:	80 83       	st	Z, r24
  }
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	08 95       	ret

000026bc <SYS_Init>:
/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  //prescaler defined, timer 4 defined
  HAL_Init();
    26bc:	26 d8       	rcall	.-4020   	; 0x170a <HAL_Init>
  //initialize application timer
  SYS_TimerInit();
    26be:	6d d0       	rcall	.+218    	; 0x279a <SYS_TimerInit>
  //transceiver initialization
  PHY_Init();
    26c0:	68 df       	rcall	.-304    	; 0x2592 <PHY_Init>
  //mesh network initialization
  NWK_Init();
    26c2:	82 d8       	rcall	.-3836   	; 0x17c8 <NWK_Init>
  PHY_TX_PWR = 0x00; //For maximizing Tx power
    26c4:	10 92 45 01 	sts	0x0145, r1
    26c8:	08 95       	ret

000026ca <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    26ca:	7d df       	rcall	.-262    	; 0x25c6 <PHY_TaskHandler>
  NWK_TaskHandler();
    26cc:	a8 d8       	rcall	.-3760   	; 0x181e <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    26ce:	cc c0       	rjmp	.+408    	; 0x2868 <SYS_TimerTaskHandler>
    26d0:	08 95       	ret

000026d2 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	ec 01       	movw	r28, r24
  if (timers)
    26dc:	80 91 36 1f 	lds	r24, 0x1F36
    26e0:	90 91 37 1f 	lds	r25, 0x1F37
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	09 f4       	brne	.+2      	; 0x26ea <placeTimer+0x18>
    26e8:	45 c0       	rjmp	.+138    	; 0x2774 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    26ea:	4e 81       	ldd	r20, Y+6	; 0x06
    26ec:	5f 81       	ldd	r21, Y+7	; 0x07
    26ee:	68 85       	ldd	r22, Y+8	; 0x08
    26f0:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    26f2:	fc 01       	movw	r30, r24
    26f4:	02 81       	ldd	r16, Z+2	; 0x02
    26f6:	13 81       	ldd	r17, Z+3	; 0x03
    26f8:	24 81       	ldd	r18, Z+4	; 0x04
    26fa:	35 81       	ldd	r19, Z+5	; 0x05
    26fc:	40 17       	cp	r20, r16
    26fe:	51 07       	cpc	r21, r17
    2700:	62 07       	cpc	r22, r18
    2702:	73 07       	cpc	r23, r19
    2704:	60 f0       	brcs	.+24     	; 0x271e <placeTimer+0x4c>
    2706:	dc 01       	movw	r26, r24
    2708:	17 c0       	rjmp	.+46     	; 0x2738 <placeTimer+0x66>
    270a:	02 81       	ldd	r16, Z+2	; 0x02
    270c:	13 81       	ldd	r17, Z+3	; 0x03
    270e:	24 81       	ldd	r18, Z+4	; 0x04
    2710:	35 81       	ldd	r19, Z+5	; 0x05
    2712:	40 17       	cp	r20, r16
    2714:	51 07       	cpc	r21, r17
    2716:	62 07       	cpc	r22, r18
    2718:	73 07       	cpc	r23, r19
    271a:	68 f4       	brcc	.+26     	; 0x2736 <placeTimer+0x64>
    271c:	03 c0       	rjmp	.+6      	; 0x2724 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    271e:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    2720:	a0 e0       	ldi	r26, 0x00	; 0
    2722:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    2724:	04 1b       	sub	r16, r20
    2726:	15 0b       	sbc	r17, r21
    2728:	26 0b       	sbc	r18, r22
    272a:	37 0b       	sbc	r19, r23
    272c:	02 83       	std	Z+2, r16	; 0x02
    272e:	13 83       	std	Z+3, r17	; 0x03
    2730:	24 83       	std	Z+4, r18	; 0x04
    2732:	35 83       	std	Z+5, r19	; 0x05
         break;
    2734:	0a c0       	rjmp	.+20     	; 0x274a <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2736:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    2738:	40 1b       	sub	r20, r16
    273a:	51 0b       	sbc	r21, r17
    273c:	62 0b       	sbc	r22, r18
    273e:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2740:	ed 91       	ld	r30, X+
    2742:	fc 91       	ld	r31, X
    2744:	11 97       	sbiw	r26, 0x01	; 1
    2746:	30 97       	sbiw	r30, 0x00	; 0
    2748:	01 f7       	brne	.-64     	; 0x270a <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    274a:	4a 83       	std	Y+2, r20	; 0x02
    274c:	5b 83       	std	Y+3, r21	; 0x03
    274e:	6c 83       	std	Y+4, r22	; 0x04
    2750:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    2752:	10 97       	sbiw	r26, 0x00	; 0
    2754:	41 f0       	breq	.+16     	; 0x2766 <placeTimer+0x94>
    {
      timer->next = prev->next;
    2756:	8d 91       	ld	r24, X+
    2758:	9c 91       	ld	r25, X
    275a:	11 97       	sbiw	r26, 0x01	; 1
    275c:	99 83       	std	Y+1, r25	; 0x01
    275e:	88 83       	st	Y, r24
      prev->next = timer;
    2760:	cd 93       	st	X+, r28
    2762:	dc 93       	st	X, r29
    2764:	15 c0       	rjmp	.+42     	; 0x2790 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    2766:	99 83       	std	Y+1, r25	; 0x01
    2768:	88 83       	st	Y, r24
      timers = timer;
    276a:	d0 93 37 1f 	sts	0x1F37, r29
    276e:	c0 93 36 1f 	sts	0x1F36, r28
    2772:	0e c0       	rjmp	.+28     	; 0x2790 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    2774:	19 82       	std	Y+1, r1	; 0x01
    2776:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    2778:	8e 81       	ldd	r24, Y+6	; 0x06
    277a:	9f 81       	ldd	r25, Y+7	; 0x07
    277c:	a8 85       	ldd	r26, Y+8	; 0x08
    277e:	b9 85       	ldd	r27, Y+9	; 0x09
    2780:	8a 83       	std	Y+2, r24	; 0x02
    2782:	9b 83       	std	Y+3, r25	; 0x03
    2784:	ac 83       	std	Y+4, r26	; 0x04
    2786:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    2788:	d0 93 37 1f 	sts	0x1F37, r29
    278c:	c0 93 36 1f 	sts	0x1F36, r28
  }
}
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	08 95       	ret

0000279a <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    279a:	10 92 37 1f 	sts	0x1F37, r1
    279e:	10 92 36 1f 	sts	0x1F36, r1
    27a2:	08 95       	ret

000027a4 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    27a8:	a0 91 36 1f 	lds	r26, 0x1F36
    27ac:	b0 91 37 1f 	lds	r27, 0x1F37
    27b0:	10 97       	sbiw	r26, 0x00	; 0
    27b2:	91 f1       	breq	.+100    	; 0x2818 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    27b4:	a8 17       	cp	r26, r24
    27b6:	b9 07       	cpc	r27, r25
    27b8:	51 f5       	brne	.+84     	; 0x280e <SYS_TimerStop+0x6a>
    27ba:	0a c0       	rjmp	.+20     	; 0x27d0 <SYS_TimerStop+0x2c>
    27bc:	8e 17       	cp	r24, r30
    27be:	9f 07       	cpc	r25, r31
    27c0:	29 f5       	brne	.+74     	; 0x280c <SYS_TimerStop+0x68>
    {
      if (prev)
    27c2:	10 97       	sbiw	r26, 0x00	; 0
    27c4:	31 f0       	breq	.+12     	; 0x27d2 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    27c6:	20 81       	ld	r18, Z
    27c8:	31 81       	ldd	r19, Z+1	; 0x01
    27ca:	2d 93       	st	X+, r18
    27cc:	3c 93       	st	X, r19
    27ce:	07 c0       	rjmp	.+14     	; 0x27de <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    27d0:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    27d2:	20 81       	ld	r18, Z
    27d4:	31 81       	ldd	r19, Z+1	; 0x01
    27d6:	30 93 37 1f 	sts	0x1F37, r19
    27da:	20 93 36 1f 	sts	0x1F36, r18

      if (t->next)
    27de:	01 90       	ld	r0, Z+
    27e0:	f0 81       	ld	r31, Z
    27e2:	e0 2d       	mov	r30, r0
    27e4:	30 97       	sbiw	r30, 0x00	; 0
    27e6:	c1 f0       	breq	.+48     	; 0x2818 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    27e8:	42 81       	ldd	r20, Z+2	; 0x02
    27ea:	53 81       	ldd	r21, Z+3	; 0x03
    27ec:	64 81       	ldd	r22, Z+4	; 0x04
    27ee:	75 81       	ldd	r23, Z+5	; 0x05
    27f0:	ec 01       	movw	r28, r24
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	9b 81       	ldd	r25, Y+3	; 0x03
    27f6:	ac 81       	ldd	r26, Y+4	; 0x04
    27f8:	bd 81       	ldd	r27, Y+5	; 0x05
    27fa:	84 0f       	add	r24, r20
    27fc:	95 1f       	adc	r25, r21
    27fe:	a6 1f       	adc	r26, r22
    2800:	b7 1f       	adc	r27, r23
    2802:	82 83       	std	Z+2, r24	; 0x02
    2804:	93 83       	std	Z+3, r25	; 0x03
    2806:	a4 83       	std	Z+4, r26	; 0x04
    2808:	b5 83       	std	Z+5, r27	; 0x05
    280a:	06 c0       	rjmp	.+12     	; 0x2818 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    280c:	df 01       	movw	r26, r30
    280e:	ed 91       	ld	r30, X+
    2810:	fc 91       	ld	r31, X
    2812:	11 97       	sbiw	r26, 0x01	; 1
    2814:	30 97       	sbiw	r30, 0x00	; 0
    2816:	91 f6       	brne	.-92     	; 0x27bc <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	08 95       	ret

0000281e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    281e:	e0 91 36 1f 	lds	r30, 0x1F36
    2822:	f0 91 37 1f 	lds	r31, 0x1F37
    2826:	30 97       	sbiw	r30, 0x00	; 0
    2828:	71 f0       	breq	.+28     	; 0x2846 <SYS_TimerStarted+0x28>
    if (t == timer)
    282a:	e8 17       	cp	r30, r24
    282c:	f9 07       	cpc	r31, r25
    282e:	21 f4       	brne	.+8      	; 0x2838 <SYS_TimerStarted+0x1a>
    2830:	0c c0       	rjmp	.+24     	; 0x284a <SYS_TimerStarted+0x2c>
    2832:	8e 17       	cp	r24, r30
    2834:	9f 07       	cpc	r25, r31
    2836:	59 f0       	breq	.+22     	; 0x284e <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2838:	01 90       	ld	r0, Z+
    283a:	f0 81       	ld	r31, Z
    283c:	e0 2d       	mov	r30, r0
    283e:	30 97       	sbiw	r30, 0x00	; 0
    2840:	c1 f7       	brne	.-16     	; 0x2832 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	08 95       	ret
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	08 95       	ret
    284e:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    2850:	08 95       	ret

00002852 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    2858:	e2 df       	rcall	.-60     	; 0x281e <SYS_TimerStarted>
    285a:	81 11       	cpse	r24, r1
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <SYS_TimerStart+0x10>
    placeTimer(timer);
    285e:	ce 01       	movw	r24, r28
    2860:	38 df       	rcall	.-400    	; 0x26d2 <placeTimer>
}
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	08 95       	ret

00002868 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    2874:	80 91 c4 20 	lds	r24, 0x20C4
    2878:	88 23       	and	r24, r24
    287a:	09 f4       	brne	.+2      	; 0x287e <SYS_TimerTaskHandler+0x16>
    287c:	59 c0       	rjmp	.+178    	; 0x2930 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    287e:	8f b7       	in	r24, 0x3f	; 63
    2880:	f8 94       	cli
    cnt = halTimerIrqCount;
    2882:	c0 90 c4 20 	lds	r12, 0x20C4
    halTimerIrqCount = 0;
    2886:	10 92 c4 20 	sts	0x20C4, r1
  ATOMIC_SECTION_LEAVE
    288a:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    288c:	d1 2c       	mov	r13, r1
    288e:	e1 2c       	mov	r14, r1
    2890:	f1 2c       	mov	r15, r1
    2892:	cc 0c       	add	r12, r12
    2894:	dd 1c       	adc	r13, r13
    2896:	ee 1c       	adc	r14, r14
    2898:	ff 1c       	adc	r15, r15
    289a:	d7 01       	movw	r26, r14
    289c:	c6 01       	movw	r24, r12
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	aa 1f       	adc	r26, r26
    28a4:	bb 1f       	adc	r27, r27
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	aa 1f       	adc	r26, r26
    28ac:	bb 1f       	adc	r27, r27
    28ae:	c8 0e       	add	r12, r24
    28b0:	d9 1e       	adc	r13, r25
    28b2:	ea 1e       	adc	r14, r26
    28b4:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    28b6:	c0 91 36 1f 	lds	r28, 0x1F36
    28ba:	d0 91 37 1f 	lds	r29, 0x1F37
    28be:	20 97       	sbiw	r28, 0x00	; 0
    28c0:	b9 f1       	breq	.+110    	; 0x2930 <SYS_TimerTaskHandler+0xc8>
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	9b 81       	ldd	r25, Y+3	; 0x03
    28c6:	ac 81       	ldd	r26, Y+4	; 0x04
    28c8:	bd 81       	ldd	r27, Y+5	; 0x05
    28ca:	c8 16       	cp	r12, r24
    28cc:	d9 06       	cpc	r13, r25
    28ce:	ea 06       	cpc	r14, r26
    28d0:	fb 06       	cpc	r15, r27
    28d2:	10 f1       	brcs	.+68     	; 0x2918 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    28d4:	c8 1a       	sub	r12, r24
    28d6:	d9 0a       	sbc	r13, r25
    28d8:	ea 0a       	sbc	r14, r26
    28da:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    28dc:	88 81       	ld	r24, Y
    28de:	99 81       	ldd	r25, Y+1	; 0x01
    28e0:	90 93 37 1f 	sts	0x1F37, r25
    28e4:	80 93 36 1f 	sts	0x1F36, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    28e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	11 f4       	brne	.+4      	; 0x28f2 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    28ee:	ce 01       	movw	r24, r28
    28f0:	f0 de       	rcall	.-544    	; 0x26d2 <placeTimer>
    timer->handler(timer);
    28f2:	eb 85       	ldd	r30, Y+11	; 0x0b
    28f4:	fc 85       	ldd	r31, Y+12	; 0x0c
    28f6:	ce 01       	movw	r24, r28
    28f8:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    28fa:	c0 91 36 1f 	lds	r28, 0x1F36
    28fe:	d0 91 37 1f 	lds	r29, 0x1F37
    2902:	20 97       	sbiw	r28, 0x00	; 0
    2904:	a9 f0       	breq	.+42     	; 0x2930 <SYS_TimerTaskHandler+0xc8>
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	9b 81       	ldd	r25, Y+3	; 0x03
    290a:	ac 81       	ldd	r26, Y+4	; 0x04
    290c:	bd 81       	ldd	r27, Y+5	; 0x05
    290e:	c8 16       	cp	r12, r24
    2910:	d9 06       	cpc	r13, r25
    2912:	ea 06       	cpc	r14, r26
    2914:	fb 06       	cpc	r15, r27
    2916:	f0 f6       	brcc	.-68     	; 0x28d4 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	ac 81       	ldd	r26, Y+4	; 0x04
    291e:	bd 81       	ldd	r27, Y+5	; 0x05
    2920:	8c 19       	sub	r24, r12
    2922:	9d 09       	sbc	r25, r13
    2924:	ae 09       	sbc	r26, r14
    2926:	bf 09       	sbc	r27, r15
    2928:	8a 83       	std	Y+2, r24	; 0x02
    292a:	9b 83       	std	Y+3, r25	; 0x03
    292c:	ac 83       	std	Y+4, r26	; 0x04
    292e:	bd 83       	std	Y+5, r27	; 0x05
}
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	df 90       	pop	r13
    293a:	cf 90       	pop	r12
    293c:	08 95       	ret

0000293e <errorTimerStatusHandler>:
	else
	{
		int_to_ascii((uint8_t)data);
		send_usart_char("\r\n");
	}
}
    293e:	80 91 24 20 	lds	r24, 0x2024
    2942:	8f 5f       	subi	r24, 0xFF	; 255
    2944:	80 93 24 20 	sts	0x2024, r24
    2948:	88 23       	and	r24, r24
    294a:	19 f0       	breq	.+6      	; 0x2952 <errorTimerStatusHandler+0x14>
    294c:	10 92 24 20 	sts	0x2024, r1
    2950:	08 95       	ret
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	80 93 49 20 	sts	0x2049, r24
    2958:	08 95       	ret

0000295a <appLEDIntervalTimerHandler>:
    295a:	8e e4       	ldi	r24, 0x4E	; 78
    295c:	90 e2       	ldi	r25, 0x20	; 32
    295e:	79 cf       	rjmp	.-270    	; 0x2852 <SYS_TimerStart>
    2960:	08 95       	ret

00002962 <appWPSActivationTimerHandler>:
    2962:	80 91 06 20 	lds	r24, 0x2006
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	81 f4       	brne	.+32     	; 0x298a <appWPSActivationTimerHandler+0x28>
    296a:	8f e8       	ldi	r24, 0x8F	; 143
    296c:	90 e2       	ldi	r25, 0x20	; 32
    296e:	1a df       	rcall	.-460    	; 0x27a4 <SYS_TimerStop>
    2970:	84 e0       	ldi	r24, 0x04	; 4
    2972:	80 93 10 20 	sts	0x2010, r24
    2976:	10 92 0b 20 	sts	0x200B, r1
    297a:	10 92 0a 20 	sts	0x200A, r1
    297e:	0e 94 85 02 	call	0x50a	; 0x50a <APP_IbLoadSettings_WPS>
    2982:	80 ea       	ldi	r24, 0xA0	; 160
    2984:	90 e2       	ldi	r25, 0x20	; 32
    2986:	65 cf       	rjmp	.-310    	; 0x2852 <SYS_TimerStart>
    2988:	08 95       	ret
    298a:	81 11       	cpse	r24, r1
    298c:	10 c0       	rjmp	.+32     	; 0x29ae <appWPSActivationTimerHandler+0x4c>
    298e:	8f e8       	ldi	r24, 0x8F	; 143
    2990:	90 e2       	ldi	r25, 0x20	; 32
    2992:	08 df       	rcall	.-496    	; 0x27a4 <SYS_TimerStop>
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	80 93 10 20 	sts	0x2010, r24
    299a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <APP_IbLoadSettings>
    299e:	0e 94 0c 03 	call	0x618	; 0x618 <APP_NwkInit>
    29a2:	80 ea       	ldi	r24, 0xA0	; 160
    29a4:	90 e2       	ldi	r25, 0x20	; 32
    29a6:	fe de       	rcall	.-516    	; 0x27a4 <SYS_TimerStop>
    29a8:	87 ee       	ldi	r24, 0xE7	; 231
    29aa:	9f e1       	ldi	r25, 0x1F	; 31
    29ac:	fb ce       	rjmp	.-522    	; 0x27a4 <SYS_TimerStop>
    29ae:	08 95       	ret

000029b0 <appWPSRequestTimerHandler>:
    29b0:	88 e3       	ldi	r24, 0x38	; 56
    29b2:	9f e1       	ldi	r25, 0x1F	; 31
    29b4:	0c 94 60 35 	jmp	0x6ac0	; 0x6ac0 <request_to_RF>
    29b8:	08 95       	ret

000029ba <errorTimerWpsHandler>:
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	80 93 e2 1f 	sts	0x1FE2, r24
    29c0:	8f e2       	ldi	r24, 0x2F	; 47
    29c2:	92 e0       	ldi	r25, 0x02	; 2
    29c4:	0c 94 05 26 	jmp	0x4c0a	; 0x4c0a <send_usart_char>
    29c8:	08 95       	ret

000029ca <appLEDTimerHandler>:
    29ca:	80 91 b5 1f 	lds	r24, 0x1FB5
    29ce:	82 30       	cpi	r24, 0x02	; 2
    29d0:	08 f0       	brcs	.+2      	; 0x29d4 <appLEDTimerHandler+0xa>
    29d2:	6a c0       	rjmp	.+212    	; 0x2aa8 <appLEDTimerHandler+0xde>
    29d4:	80 91 cc 1f 	lds	r24, 0x1FCC
    29d8:	82 30       	cpi	r24, 0x02	; 2
    29da:	49 f0       	breq	.+18     	; 0x29ee <appLEDTimerHandler+0x24>
    29dc:	18 f4       	brcc	.+6      	; 0x29e4 <appLEDTimerHandler+0x1a>
    29de:	81 30       	cpi	r24, 0x01	; 1
    29e0:	c9 f1       	breq	.+114    	; 0x2a54 <appLEDTimerHandler+0x8a>
    29e2:	49 c0       	rjmp	.+146    	; 0x2a76 <appLEDTimerHandler+0xac>
    29e4:	85 30       	cpi	r24, 0x05	; 5
    29e6:	a1 f0       	breq	.+40     	; 0x2a10 <appLEDTimerHandler+0x46>
    29e8:	86 30       	cpi	r24, 0x06	; 6
    29ea:	19 f1       	breq	.+70     	; 0x2a32 <appLEDTimerHandler+0x68>
    29ec:	44 c0       	rjmp	.+136    	; 0x2a76 <appLEDTimerHandler+0xac>
    29ee:	60 91 25 20 	lds	r22, 0x2025
    29f2:	70 91 26 20 	lds	r23, 0x2026
    29f6:	80 91 27 20 	lds	r24, 0x2027
    29fa:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    29fe:	60 91 03 20 	lds	r22, 0x2003
    2a02:	70 91 04 20 	lds	r23, 0x2004
    2a06:	80 91 05 20 	lds	r24, 0x2005
    2a0a:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2a0e:	43 c0       	rjmp	.+134    	; 0x2a96 <appLEDTimerHandler+0xcc>
    2a10:	60 91 03 20 	lds	r22, 0x2003
    2a14:	70 91 04 20 	lds	r23, 0x2004
    2a18:	80 91 05 20 	lds	r24, 0x2005
    2a1c:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2a20:	60 91 25 20 	lds	r22, 0x2025
    2a24:	70 91 26 20 	lds	r23, 0x2026
    2a28:	80 91 27 20 	lds	r24, 0x2027
    2a2c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2a30:	32 c0       	rjmp	.+100    	; 0x2a96 <appLEDTimerHandler+0xcc>
    2a32:	60 91 03 20 	lds	r22, 0x2003
    2a36:	70 91 04 20 	lds	r23, 0x2004
    2a3a:	80 91 05 20 	lds	r24, 0x2005
    2a3e:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2a42:	60 91 25 20 	lds	r22, 0x2025
    2a46:	70 91 26 20 	lds	r23, 0x2026
    2a4a:	80 91 27 20 	lds	r24, 0x2027
    2a4e:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2a52:	21 c0       	rjmp	.+66     	; 0x2a96 <appLEDTimerHandler+0xcc>
    2a54:	60 91 03 20 	lds	r22, 0x2003
    2a58:	70 91 04 20 	lds	r23, 0x2004
    2a5c:	80 91 05 20 	lds	r24, 0x2005
    2a60:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2a64:	60 91 25 20 	lds	r22, 0x2025
    2a68:	70 91 26 20 	lds	r23, 0x2026
    2a6c:	80 91 27 20 	lds	r24, 0x2027
    2a70:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2a74:	10 c0       	rjmp	.+32     	; 0x2a96 <appLEDTimerHandler+0xcc>
    2a76:	60 91 03 20 	lds	r22, 0x2003
    2a7a:	70 91 04 20 	lds	r23, 0x2004
    2a7e:	80 91 05 20 	lds	r24, 0x2005
    2a82:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2a86:	60 91 25 20 	lds	r22, 0x2025
    2a8a:	70 91 26 20 	lds	r23, 0x2026
    2a8e:	80 91 27 20 	lds	r24, 0x2027
    2a92:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2a96:	80 91 b5 1f 	lds	r24, 0x1FB5
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	80 93 b5 1f 	sts	0x1FB5, r24
    2aa0:	8e e4       	ldi	r24, 0x4E	; 78
    2aa2:	90 e2       	ldi	r25, 0x20	; 32
    2aa4:	d6 de       	rcall	.-596    	; 0x2852 <SYS_TimerStart>
    2aa6:	15 c0       	rjmp	.+42     	; 0x2ad2 <appLEDTimerHandler+0x108>
    2aa8:	60 91 03 20 	lds	r22, 0x2003
    2aac:	70 91 04 20 	lds	r23, 0x2004
    2ab0:	80 91 05 20 	lds	r24, 0x2005
    2ab4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2ab8:	60 91 25 20 	lds	r22, 0x2025
    2abc:	70 91 26 20 	lds	r23, 0x2026
    2ac0:	80 91 27 20 	lds	r24, 0x2027
    2ac4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2ac8:	10 92 b5 1f 	sts	0x1FB5, r1
    2acc:	88 e2       	ldi	r24, 0x28	; 40
    2ace:	90 e2       	ldi	r25, 0x20	; 32
    2ad0:	c0 de       	rcall	.-640    	; 0x2852 <SYS_TimerStart>
    2ad2:	a8 95       	wdr
    2ad4:	08 95       	ret

00002ad6 <PNEWELSGpioInit>:
    2ad6:	ef 92       	push	r14
    2ad8:	ff 92       	push	r15
    2ada:	0f 93       	push	r16
    2adc:	1f 93       	push	r17
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	eb e5       	ldi	r30, 0x5B	; 91
    2ae4:	f0 e2       	ldi	r31, 0x20	; 32
    2ae6:	10 82       	st	Z, r1
    2ae8:	0f 2e       	mov	r0, r31
    2aea:	f3 e0       	ldi	r31, 0x03	; 3
    2aec:	ff 2e       	mov	r15, r31
    2aee:	f0 2d       	mov	r31, r0
    2af0:	f1 82       	std	Z+1, r15	; 0x01
    2af2:	8b e0       	ldi	r24, 0x0B	; 11
    2af4:	82 83       	std	Z+2, r24	; 0x02
    2af6:	60 91 5b 20 	lds	r22, 0x205B
    2afa:	70 91 5c 20 	lds	r23, 0x205C
    2afe:	80 91 5d 20 	lds	r24, 0x205D
    2b02:	4b e1       	ldi	r20, 0x1B	; 27
    2b04:	5a e1       	ldi	r21, 0x1A	; 26
    2b06:	0e 94 4a 09 	call	0x1294	; 0x1294 <ext_int_set_interrupt_callback>
    2b0a:	60 91 5b 20 	lds	r22, 0x205B
    2b0e:	70 91 5c 20 	lds	r23, 0x205C
    2b12:	80 91 5d 20 	lds	r24, 0x205D
    2b16:	0e 94 34 09 	call	0x1268	; 0x1268 <ext_int_pcint_init>
    2b1a:	e4 ef       	ldi	r30, 0xF4	; 244
    2b1c:	ff e1       	ldi	r31, 0x1F	; 31
    2b1e:	10 82       	st	Z, r1
    2b20:	c2 e0       	ldi	r28, 0x02	; 2
    2b22:	c1 83       	std	Z+1, r28	; 0x01
    2b24:	8a e0       	ldi	r24, 0x0A	; 10
    2b26:	82 83       	std	Z+2, r24	; 0x02
    2b28:	60 91 f4 1f 	lds	r22, 0x1FF4
    2b2c:	70 91 f5 1f 	lds	r23, 0x1FF5
    2b30:	80 91 f6 1f 	lds	r24, 0x1FF6
    2b34:	0e 94 34 09 	call	0x1268	; 0x1268 <ext_int_pcint_init>
    2b38:	e7 ef       	ldi	r30, 0xF7	; 247
    2b3a:	ff e1       	ldi	r31, 0x1F	; 31
    2b3c:	10 82       	st	Z, r1
    2b3e:	d1 e0       	ldi	r29, 0x01	; 1
    2b40:	d1 83       	std	Z+1, r29	; 0x01
    2b42:	89 e0       	ldi	r24, 0x09	; 9
    2b44:	82 83       	std	Z+2, r24	; 0x02
    2b46:	60 91 f7 1f 	lds	r22, 0x1FF7
    2b4a:	70 91 f8 1f 	lds	r23, 0x1FF8
    2b4e:	80 91 f9 1f 	lds	r24, 0x1FF9
    2b52:	0e 94 34 09 	call	0x1268	; 0x1268 <ext_int_pcint_init>
    2b56:	ed e9       	ldi	r30, 0x9D	; 157
    2b58:	f0 e2       	ldi	r31, 0x20	; 32
    2b5a:	10 82       	st	Z, r1
    2b5c:	11 82       	std	Z+1, r1	; 0x01
    2b5e:	88 e0       	ldi	r24, 0x08	; 8
    2b60:	82 83       	std	Z+2, r24	; 0x02
    2b62:	60 91 9d 20 	lds	r22, 0x209D
    2b66:	70 91 9e 20 	lds	r23, 0x209E
    2b6a:	80 91 9f 20 	lds	r24, 0x209F
    2b6e:	0e 94 34 09 	call	0x1268	; 0x1268 <ext_int_pcint_init>
    2b72:	ea e4       	ldi	r30, 0x4A	; 74
    2b74:	f0 e2       	ldi	r31, 0x20	; 32
    2b76:	d0 83       	st	Z, r29
    2b78:	68 94       	set
    2b7a:	ee 24       	eor	r14, r14
    2b7c:	e2 f8       	bld	r14, 2
    2b7e:	e1 82       	std	Z+1, r14	; 0x01
    2b80:	60 91 4a 20 	lds	r22, 0x204A
    2b84:	70 91 4b 20 	lds	r23, 0x204B
    2b88:	80 91 4c 20 	lds	r24, 0x204C
    2b8c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    2b90:	60 91 4a 20 	lds	r22, 0x204A
    2b94:	70 91 4b 20 	lds	r23, 0x204B
    2b98:	80 91 4c 20 	lds	r24, 0x204C
    2b9c:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    2ba0:	e3 e0       	ldi	r30, 0x03	; 3
    2ba2:	f0 e2       	ldi	r31, 0x20	; 32
    2ba4:	c0 83       	st	Z, r28
    2ba6:	05 e0       	ldi	r16, 0x05	; 5
    2ba8:	01 83       	std	Z+1, r16	; 0x01
    2baa:	60 91 03 20 	lds	r22, 0x2003
    2bae:	70 91 04 20 	lds	r23, 0x2004
    2bb2:	80 91 05 20 	lds	r24, 0x2005
    2bb6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2bba:	e5 e2       	ldi	r30, 0x25	; 37
    2bbc:	f0 e2       	ldi	r31, 0x20	; 32
    2bbe:	c0 83       	st	Z, r28
    2bc0:	17 e0       	ldi	r17, 0x07	; 7
    2bc2:	11 83       	std	Z+1, r17	; 0x01
    2bc4:	60 91 25 20 	lds	r22, 0x2025
    2bc8:	70 91 26 20 	lds	r23, 0x2026
    2bcc:	80 91 27 20 	lds	r24, 0x2027
    2bd0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2bd4:	e7 e3       	ldi	r30, 0x37	; 55
    2bd6:	f0 e2       	ldi	r31, 0x20	; 32
    2bd8:	c0 83       	st	Z, r28
    2bda:	e1 82       	std	Z+1, r14	; 0x01
    2bdc:	60 91 37 20 	lds	r22, 0x2037
    2be0:	70 91 38 20 	lds	r23, 0x2038
    2be4:	80 91 39 20 	lds	r24, 0x2039
    2be8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2bec:	e7 e0       	ldi	r30, 0x07	; 7
    2bee:	f0 e2       	ldi	r31, 0x20	; 32
    2bf0:	c0 83       	st	Z, r28
    2bf2:	f1 82       	std	Z+1, r15	; 0x01
    2bf4:	60 91 07 20 	lds	r22, 0x2007
    2bf8:	70 91 08 20 	lds	r23, 0x2008
    2bfc:	80 91 09 20 	lds	r24, 0x2009
    2c00:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2c04:	00 93 e5 1f 	sts	0x1FE5, r16
    2c08:	60 91 e4 1f 	lds	r22, 0x1FE4
    2c0c:	70 91 e5 1f 	lds	r23, 0x1FE5
    2c10:	80 91 e6 1f 	lds	r24, 0x1FE6
    2c14:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2c18:	0f 2e       	mov	r0, r31
    2c1a:	f6 e0       	ldi	r31, 0x06	; 6
    2c1c:	ff 2e       	mov	r15, r31
    2c1e:	f0 2d       	mov	r31, r0
    2c20:	f0 92 b9 20 	sts	0x20B9, r15
    2c24:	60 91 b8 20 	lds	r22, 0x20B8
    2c28:	70 91 b9 20 	lds	r23, 0x20B9
    2c2c:	80 91 ba 20 	lds	r24, 0x20BA
    2c30:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2c34:	10 93 bf 20 	sts	0x20BF, r17
    2c38:	60 91 be 20 	lds	r22, 0x20BE
    2c3c:	70 91 bf 20 	lds	r23, 0x20BF
    2c40:	80 91 c0 20 	lds	r24, 0x20C0
    2c44:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2c48:	e2 eb       	ldi	r30, 0xB2	; 178
    2c4a:	f0 e2       	ldi	r31, 0x20	; 32
    2c4c:	c0 83       	st	Z, r28
    2c4e:	11 82       	std	Z+1, r1	; 0x01
    2c50:	60 91 b2 20 	lds	r22, 0x20B2
    2c54:	70 91 b3 20 	lds	r23, 0x20B3
    2c58:	80 91 b4 20 	lds	r24, 0x20B4
    2c5c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    2c60:	60 91 b2 20 	lds	r22, 0x20B2
    2c64:	70 91 b3 20 	lds	r23, 0x20B3
    2c68:	80 91 b4 20 	lds	r24, 0x20B4
    2c6c:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    2c70:	ed ea       	ldi	r30, 0xAD	; 173
    2c72:	f0 e2       	ldi	r31, 0x20	; 32
    2c74:	c0 83       	st	Z, r28
    2c76:	d1 83       	std	Z+1, r29	; 0x01
    2c78:	60 91 ad 20 	lds	r22, 0x20AD
    2c7c:	70 91 ae 20 	lds	r23, 0x20AE
    2c80:	80 91 af 20 	lds	r24, 0x20AF
    2c84:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    2c88:	60 91 ad 20 	lds	r22, 0x20AD
    2c8c:	70 91 ae 20 	lds	r23, 0x20AE
    2c90:	80 91 af 20 	lds	r24, 0x20AF
    2c94:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    2c98:	e0 e0       	ldi	r30, 0x00	; 0
    2c9a:	f0 e2       	ldi	r31, 0x20	; 32
    2c9c:	c0 83       	st	Z, r28
    2c9e:	c1 83       	std	Z+1, r28	; 0x01
    2ca0:	60 91 00 20 	lds	r22, 0x2000
    2ca4:	70 91 01 20 	lds	r23, 0x2001
    2ca8:	80 91 02 20 	lds	r24, 0x2002
    2cac:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    2cb0:	60 91 00 20 	lds	r22, 0x2000
    2cb4:	70 91 01 20 	lds	r23, 0x2001
    2cb8:	80 91 02 20 	lds	r24, 0x2002
    2cbc:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    2cc0:	ee e5       	ldi	r30, 0x5E	; 94
    2cc2:	f0 e2       	ldi	r31, 0x20	; 32
    2cc4:	d0 83       	st	Z, r29
    2cc6:	01 83       	std	Z+1, r16	; 0x01
    2cc8:	60 91 5e 20 	lds	r22, 0x205E
    2ccc:	70 91 5f 20 	lds	r23, 0x205F
    2cd0:	80 91 60 20 	lds	r24, 0x2060
    2cd4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    2cd8:	60 91 5e 20 	lds	r22, 0x205E
    2cdc:	70 91 5f 20 	lds	r23, 0x205F
    2ce0:	80 91 60 20 	lds	r24, 0x2060
    2ce4:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    2ce8:	e6 eb       	ldi	r30, 0xB6	; 182
    2cea:	ff e1       	ldi	r31, 0x1F	; 31
    2cec:	d0 83       	st	Z, r29
    2cee:	f1 82       	std	Z+1, r15	; 0x01
    2cf0:	60 91 b6 1f 	lds	r22, 0x1FB6
    2cf4:	70 91 b7 1f 	lds	r23, 0x1FB7
    2cf8:	80 91 b8 1f 	lds	r24, 0x1FB8
    2cfc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    2d00:	60 91 b6 1f 	lds	r22, 0x1FB6
    2d04:	70 91 b7 1f 	lds	r23, 0x1FB7
    2d08:	80 91 b8 1f 	lds	r24, 0x1FB8
    2d0c:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    2d10:	ed e0       	ldi	r30, 0x0D	; 13
    2d12:	f0 e2       	ldi	r31, 0x20	; 32
    2d14:	d0 83       	st	Z, r29
    2d16:	11 83       	std	Z+1, r17	; 0x01
    2d18:	60 91 0d 20 	lds	r22, 0x200D
    2d1c:	70 91 0e 20 	lds	r23, 0x200E
    2d20:	80 91 0f 20 	lds	r24, 0x200F
    2d24:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    2d28:	60 91 0d 20 	lds	r22, 0x200D
    2d2c:	70 91 0e 20 	lds	r23, 0x200E
    2d30:	80 91 0f 20 	lds	r24, 0x200F
    2d34:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	ff 90       	pop	r15
    2d42:	ef 90       	pop	r14
    2d44:	08 95       	ret

00002d46 <pneOperationMode>:
    2d46:	0f 93       	push	r16
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	80 91 10 20 	lds	r24, 0x2010
    2d50:	82 30       	cpi	r24, 0x02	; 2
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <pneOperationMode+0x10>
    2d54:	f1 c1       	rjmp	.+994    	; 0x3138 <pneOperationMode+0x3f2>
    2d56:	30 f4       	brcc	.+12     	; 0x2d64 <pneOperationMode+0x1e>
    2d58:	88 23       	and	r24, r24
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <pneOperationMode+0x18>
    2d5c:	6e c0       	rjmp	.+220    	; 0x2e3a <pneOperationMode+0xf4>
    2d5e:	81 30       	cpi	r24, 0x01	; 1
    2d60:	51 f0       	breq	.+20     	; 0x2d76 <pneOperationMode+0x30>
    2d62:	34 c3       	rjmp	.+1640   	; 0x33cc <pneOperationMode+0x686>
    2d64:	84 30       	cpi	r24, 0x04	; 4
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <pneOperationMode+0x24>
    2d68:	81 c2       	rjmp	.+1282   	; 0x326c <pneOperationMode+0x526>
    2d6a:	08 f4       	brcc	.+2      	; 0x2d6e <pneOperationMode+0x28>
    2d6c:	36 c1       	rjmp	.+620    	; 0x2fda <pneOperationMode+0x294>
    2d6e:	85 30       	cpi	r24, 0x05	; 5
    2d70:	09 f4       	brne	.+2      	; 0x2d74 <pneOperationMode+0x2e>
    2d72:	3f c2       	rjmp	.+1150   	; 0x31f2 <pneOperationMode+0x4ac>
    2d74:	2b c3       	rjmp	.+1622   	; 0x33cc <pneOperationMode+0x686>
    2d76:	10 92 06 20 	sts	0x2006, r1
    2d7a:	c1 e0       	ldi	r28, 0x01	; 1
    2d7c:	c0 93 e2 1f 	sts	0x1FE2, r28
    2d80:	60 91 e4 1f 	lds	r22, 0x1FE4
    2d84:	70 91 e5 1f 	lds	r23, 0x1FE5
    2d88:	80 91 e6 1f 	lds	r24, 0x1FE6
    2d8c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2d90:	ea eb       	ldi	r30, 0xBA	; 186
    2d92:	ff e1       	ldi	r31, 0x1F	; 31
    2d94:	13 86       	std	Z+11, r1	; 0x0b
    2d96:	c3 8b       	std	Z+19, r28	; 0x13
    2d98:	85 e0       	ldi	r24, 0x05	; 5
    2d9a:	82 8b       	std	Z+18, r24	; 0x12
    2d9c:	c1 8b       	std	Z+17, r28	; 0x11
    2d9e:	84 ef       	ldi	r24, 0xF4	; 244
    2da0:	91 e0       	ldi	r25, 0x01	; 1
    2da2:	a0 e0       	ldi	r26, 0x00	; 0
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	80 93 54 20 	sts	0x2054, r24
    2daa:	90 93 55 20 	sts	0x2055, r25
    2dae:	a0 93 56 20 	sts	0x2056, r26
    2db2:	b0 93 57 20 	sts	0x2057, r27
    2db6:	88 ee       	ldi	r24, 0xE8	; 232
    2db8:	93 e0       	ldi	r25, 0x03	; 3
    2dba:	a0 e0       	ldi	r26, 0x00	; 0
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	80 93 2e 20 	sts	0x202E, r24
    2dc2:	90 93 2f 20 	sts	0x202F, r25
    2dc6:	a0 93 30 20 	sts	0x2030, r26
    2dca:	b0 93 31 20 	sts	0x2031, r27
    2dce:	80 81       	ld	r24, Z
    2dd0:	81 30       	cpi	r24, 0x01	; 1
    2dd2:	81 f4       	brne	.+32     	; 0x2df4 <pneOperationMode+0xae>
    2dd4:	80 91 4d 20 	lds	r24, 0x204D
    2dd8:	81 11       	cpse	r24, r1
    2dda:	0c c0       	rjmp	.+24     	; 0x2df4 <pneOperationMode+0xae>
    2ddc:	60 91 37 20 	lds	r22, 0x2037
    2de0:	70 91 38 20 	lds	r23, 0x2038
    2de4:	80 91 39 20 	lds	r24, 0x2039
    2de8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    2dec:	81 11       	cpse	r24, r1
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <pneOperationMode+0xae>
    2df0:	10 92 10 20 	sts	0x2010, r1
    2df4:	80 91 c2 1f 	lds	r24, 0x1FC2
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	21 f0       	breq	.+8      	; 0x2e04 <pneOperationMode+0xbe>
    2dfc:	80 91 bd 1f 	lds	r24, 0x1FBD
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	11 f4       	brne	.+4      	; 0x2e08 <pneOperationMode+0xc2>
    2e04:	10 92 10 20 	sts	0x2010, r1
    2e08:	80 91 be 1f 	lds	r24, 0x1FBE
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	19 f4       	brne	.+6      	; 0x2e16 <pneOperationMode+0xd0>
    2e10:	85 e0       	ldi	r24, 0x05	; 5
    2e12:	80 93 10 20 	sts	0x2010, r24
    2e16:	80 91 c3 1f 	lds	r24, 0x1FC3
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	19 f4       	brne	.+6      	; 0x2e24 <pneOperationMode+0xde>
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	80 93 10 20 	sts	0x2010, r24
    2e24:	80 91 c4 1f 	lds	r24, 0x1FC4
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <pneOperationMode+0xe8>
    2e2c:	cf c2       	rjmp	.+1438   	; 0x33cc <pneOperationMode+0x686>
    2e2e:	83 e0       	ldi	r24, 0x03	; 3
    2e30:	80 93 10 20 	sts	0x2010, r24
    2e34:	10 92 3b 20 	sts	0x203B, r1
    2e38:	c9 c2       	rjmp	.+1426   	; 0x33cc <pneOperationMode+0x686>
    2e3a:	80 91 3b 20 	lds	r24, 0x203B
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	31 f4       	brne	.+12     	; 0x2e4e <pneOperationMode+0x108>
    2e42:	80 91 3b 20 	lds	r24, 0x203B
    2e46:	8f 5f       	subi	r24, 0xFF	; 255
    2e48:	80 93 3b 20 	sts	0x203B, r24
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <pneOperationMode+0x10c>
    2e4e:	10 92 3b 20 	sts	0x203B, r1
    2e52:	10 92 06 20 	sts	0x2006, r1
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	80 93 e2 1f 	sts	0x1FE2, r24
    2e5c:	ea eb       	ldi	r30, 0xBA	; 186
    2e5e:	ff e1       	ldi	r31, 0x1F	; 31
    2e60:	82 8b       	std	Z+18, r24	; 0x12
    2e62:	8a ef       	ldi	r24, 0xFA	; 250
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 e0       	ldi	r26, 0x00	; 0
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	80 93 54 20 	sts	0x2054, r24
    2e6e:	90 93 55 20 	sts	0x2055, r25
    2e72:	a0 93 56 20 	sts	0x2056, r26
    2e76:	b0 93 57 20 	sts	0x2057, r27
    2e7a:	84 ef       	ldi	r24, 0xF4	; 244
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	a0 e0       	ldi	r26, 0x00	; 0
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	80 93 2e 20 	sts	0x202E, r24
    2e86:	90 93 2f 20 	sts	0x202F, r25
    2e8a:	a0 93 30 20 	sts	0x2030, r26
    2e8e:	b0 93 31 20 	sts	0x2031, r27
    2e92:	80 89       	ldd	r24, Z+16	; 0x10
    2e94:	81 30       	cpi	r24, 0x01	; 1
    2e96:	21 f0       	breq	.+8      	; 0x2ea0 <pneOperationMode+0x15a>
    2e98:	80 91 cb 1f 	lds	r24, 0x1FCB
    2e9c:	81 11       	cpse	r24, r1
    2e9e:	14 c0       	rjmp	.+40     	; 0x2ec8 <pneOperationMode+0x182>
    2ea0:	60 91 e4 1f 	lds	r22, 0x1FE4
    2ea4:	70 91 e5 1f 	lds	r23, 0x1FE5
    2ea8:	80 91 e6 1f 	lds	r24, 0x1FE6
    2eac:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2eb0:	10 92 c5 1f 	sts	0x1FC5, r1
    2eb4:	80 91 8d 20 	lds	r24, 0x208D
    2eb8:	81 11       	cpse	r24, r1
    2eba:	06 c0       	rjmp	.+12     	; 0x2ec8 <pneOperationMode+0x182>
    2ebc:	87 e0       	ldi	r24, 0x07	; 7
    2ebe:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	80 93 8d 20 	sts	0x208D, r24
    2ec8:	80 91 ca 1f 	lds	r24, 0x1FCA
    2ecc:	81 11       	cpse	r24, r1
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <pneOperationMode+0x1a8>
    2ed0:	80 91 cb 1f 	lds	r24, 0x1FCB
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	59 f4       	brne	.+22     	; 0x2eee <pneOperationMode+0x1a8>
    2ed8:	60 91 e4 1f 	lds	r22, 0x1FE4
    2edc:	70 91 e5 1f 	lds	r23, 0x1FE5
    2ee0:	80 91 e6 1f 	lds	r24, 0x1FE6
    2ee4:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	80 93 c5 1f 	sts	0x1FC5, r24
    2eee:	80 91 b0 20 	lds	r24, 0x20B0
    2ef2:	81 11       	cpse	r24, r1
    2ef4:	06 c0       	rjmp	.+12     	; 0x2f02 <pneOperationMode+0x1bc>
    2ef6:	84 e0       	ldi	r24, 0x04	; 4
    2ef8:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	80 93 b0 20 	sts	0x20B0, r24
    2f02:	80 91 c4 1f 	lds	r24, 0x1FC4
    2f06:	81 30       	cpi	r24, 0x01	; 1
    2f08:	29 f4       	brne	.+10     	; 0x2f14 <pneOperationMode+0x1ce>
    2f0a:	83 e0       	ldi	r24, 0x03	; 3
    2f0c:	80 93 10 20 	sts	0x2010, r24
    2f10:	10 92 b0 20 	sts	0x20B0, r1
    2f14:	80 91 d9 1f 	lds	r24, 0x1FD9
    2f18:	81 11       	cpse	r24, r1
    2f1a:	16 c0       	rjmp	.+44     	; 0x2f48 <pneOperationMode+0x202>
    2f1c:	80 91 ba 1f 	lds	r24, 0x1FBA
    2f20:	81 11       	cpse	r24, r1
    2f22:	2a c0       	rjmp	.+84     	; 0x2f78 <pneOperationMode+0x232>
    2f24:	80 91 c2 1f 	lds	r24, 0x1FC2
    2f28:	81 11       	cpse	r24, r1
    2f2a:	26 c0       	rjmp	.+76     	; 0x2f78 <pneOperationMode+0x232>
    2f2c:	80 91 bd 1f 	lds	r24, 0x1FBD
    2f30:	81 11       	cpse	r24, r1
    2f32:	22 c0       	rjmp	.+68     	; 0x2f78 <pneOperationMode+0x232>
    2f34:	85 e0       	ldi	r24, 0x05	; 5
    2f36:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    2f3a:	10 92 b0 20 	sts	0x20B0, r1
    2f3e:	10 92 8d 20 	sts	0x208D, r1
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	80 93 10 20 	sts	0x2010, r24
    2f48:	80 91 d9 1f 	lds	r24, 0x1FD9
    2f4c:	81 30       	cpi	r24, 0x01	; 1
    2f4e:	a1 f4       	brne	.+40     	; 0x2f78 <pneOperationMode+0x232>
    2f50:	80 91 c2 1f 	lds	r24, 0x1FC2
    2f54:	81 30       	cpi	r24, 0x01	; 1
    2f56:	81 f4       	brne	.+32     	; 0x2f78 <pneOperationMode+0x232>
    2f58:	60 91 37 20 	lds	r22, 0x2037
    2f5c:	70 91 38 20 	lds	r23, 0x2038
    2f60:	80 91 39 20 	lds	r24, 0x2039
    2f64:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2f68:	ea eb       	ldi	r30, 0xBA	; 186
    2f6a:	ff e1       	ldi	r31, 0x1F	; 31
    2f6c:	10 86       	std	Z+8, r1	; 0x08
    2f6e:	13 82       	std	Z+3, r1	; 0x03
    2f70:	81 85       	ldd	r24, Z+9	; 0x09
    2f72:	81 30       	cpi	r24, 0x01	; 1
    2f74:	69 f5       	brne	.+90     	; 0x2fd0 <pneOperationMode+0x28a>
    2f76:	04 c0       	rjmp	.+8      	; 0x2f80 <pneOperationMode+0x23a>
    2f78:	80 91 c3 1f 	lds	r24, 0x1FC3
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	11 f4       	brne	.+4      	; 0x2f84 <pneOperationMode+0x23e>
    2f80:	10 92 c3 1f 	sts	0x1FC3, r1
    2f84:	80 91 bd 1f 	lds	r24, 0x1FBD
    2f88:	81 30       	cpi	r24, 0x01	; 1
    2f8a:	11 f5       	brne	.+68     	; 0x2fd0 <pneOperationMode+0x28a>
    2f8c:	80 91 be 1f 	lds	r24, 0x1FBE
    2f90:	81 30       	cpi	r24, 0x01	; 1
    2f92:	f1 f4       	brne	.+60     	; 0x2fd0 <pneOperationMode+0x28a>
    2f94:	80 91 21 20 	lds	r24, 0x2021
    2f98:	90 91 22 20 	lds	r25, 0x2022
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	90 93 22 20 	sts	0x2022, r25
    2fa2:	80 93 21 20 	sts	0x2021, r24
    2fa6:	89 3e       	cpi	r24, 0xE9	; 233
    2fa8:	9d 4f       	sbci	r25, 0xFD	; 253
    2faa:	08 f4       	brcc	.+2      	; 0x2fae <pneOperationMode+0x268>
    2fac:	0f c2       	rjmp	.+1054   	; 0x33cc <pneOperationMode+0x686>
    2fae:	82 e0       	ldi	r24, 0x02	; 2
    2fb0:	90 e1       	ldi	r25, 0x10	; 16
    2fb2:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <readE2prom>
    2fb6:	08 2f       	mov	r16, r24
    2fb8:	03 60       	ori	r16, 0x03	; 3
    2fba:	00 93 b9 1f 	sts	0x1FB9, r16
    2fbe:	20 e1       	ldi	r18, 0x10	; 16
    2fc0:	42 e0       	ldi	r20, 0x02	; 2
    2fc2:	65 e4       	ldi	r22, 0x45	; 69
    2fc4:	8e ea       	ldi	r24, 0xAE	; 174
    2fc6:	0e 94 90 20 	call	0x4120	; 0x4120 <PNEWELSE2promWrite>
    2fca:	0e 94 cc 31 	call	0x6398	; 0x6398 <reboot_to_rf>
    2fce:	fe c1       	rjmp	.+1020   	; 0x33cc <pneOperationMode+0x686>
    2fd0:	10 92 22 20 	sts	0x2022, r1
    2fd4:	10 92 21 20 	sts	0x2021, r1
    2fd8:	f9 c1       	rjmp	.+1010   	; 0x33cc <pneOperationMode+0x686>
    2fda:	ca eb       	ldi	r28, 0xBA	; 186
    2fdc:	df e1       	ldi	r29, 0x1F	; 31
    2fde:	83 e0       	ldi	r24, 0x03	; 3
    2fe0:	8a 8b       	std	Y+18, r24	; 0x12
    2fe2:	60 91 e4 1f 	lds	r22, 0x1FE4
    2fe6:	70 91 e5 1f 	lds	r23, 0x1FE5
    2fea:	80 91 e6 1f 	lds	r24, 0x1FE6
    2fee:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	8b 87       	std	Y+11, r24	; 0x0b
    2ff6:	10 92 06 20 	sts	0x2006, r1
    2ffa:	80 93 e2 1f 	sts	0x1FE2, r24
    2ffe:	80 91 b0 20 	lds	r24, 0x20B0
    3002:	81 11       	cpse	r24, r1
    3004:	11 c0       	rjmp	.+34     	; 0x3028 <pneOperationMode+0x2e2>
    3006:	82 e0       	ldi	r24, 0x02	; 2
    3008:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	80 93 b0 20 	sts	0x20B0, r24
    3012:	84 e6       	ldi	r24, 0x64	; 100
    3014:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <pend_to_rf>
    3018:	60 91 37 20 	lds	r22, 0x2037
    301c:	70 91 38 20 	lds	r23, 0x2038
    3020:	80 91 39 20 	lds	r24, 0x2039
    3024:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
    3028:	80 91 d9 1f 	lds	r24, 0x1FD9
    302c:	81 30       	cpi	r24, 0x01	; 1
    302e:	49 f5       	brne	.+82     	; 0x3082 <pneOperationMode+0x33c>
    3030:	83 e0       	ldi	r24, 0x03	; 3
    3032:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    3036:	62 e0       	ldi	r22, 0x02	; 2
    3038:	81 e6       	ldi	r24, 0x61	; 97
    303a:	0e 94 9c 34 	call	0x6938	; 0x6938 <test_completed>
    303e:	10 92 b0 20 	sts	0x20B0, r1
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	80 93 3b 20 	sts	0x203B, r24
    3048:	10 92 10 20 	sts	0x2010, r1
    304c:	ca eb       	ldi	r28, 0xBA	; 186
    304e:	df e1       	ldi	r29, 0x1F	; 31
    3050:	1a 86       	std	Y+10, r1	; 0x0a
    3052:	60 91 37 20 	lds	r22, 0x2037
    3056:	70 91 38 20 	lds	r23, 0x2038
    305a:	80 91 39 20 	lds	r24, 0x2039
    305e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    3062:	1b 86       	std	Y+11, r1	; 0x0b
    3064:	60 91 9d 20 	lds	r22, 0x209D
    3068:	70 91 9e 20 	lds	r23, 0x209E
    306c:	80 91 9f 20 	lds	r24, 0x209F
    3070:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3074:	91 e0       	ldi	r25, 0x01	; 1
    3076:	81 11       	cpse	r24, r1
    3078:	01 c0       	rjmp	.+2      	; 0x307c <pneOperationMode+0x336>
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	90 93 ba 1f 	sts	0x1FBA, r25
    3080:	a5 c1       	rjmp	.+842    	; 0x33cc <pneOperationMode+0x686>
    3082:	80 91 ca 1f 	lds	r24, 0x1FCA
    3086:	81 30       	cpi	r24, 0x01	; 1
    3088:	49 f5       	brne	.+82     	; 0x30dc <pneOperationMode+0x396>
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    3090:	62 e0       	ldi	r22, 0x02	; 2
    3092:	8e e6       	ldi	r24, 0x6E	; 110
    3094:	0e 94 9c 34 	call	0x6938	; 0x6938 <test_completed>
    3098:	10 92 b0 20 	sts	0x20B0, r1
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	80 93 3b 20 	sts	0x203B, r24
    30a2:	80 93 10 20 	sts	0x2010, r24
    30a6:	ca eb       	ldi	r28, 0xBA	; 186
    30a8:	df e1       	ldi	r29, 0x1F	; 31
    30aa:	1a 86       	std	Y+10, r1	; 0x0a
    30ac:	60 91 37 20 	lds	r22, 0x2037
    30b0:	70 91 38 20 	lds	r23, 0x2038
    30b4:	80 91 39 20 	lds	r24, 0x2039
    30b8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    30bc:	1b 86       	std	Y+11, r1	; 0x0b
    30be:	60 91 9d 20 	lds	r22, 0x209D
    30c2:	70 91 9e 20 	lds	r23, 0x209E
    30c6:	80 91 9f 20 	lds	r24, 0x209F
    30ca:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	81 11       	cpse	r24, r1
    30d2:	01 c0       	rjmp	.+2      	; 0x30d6 <pneOperationMode+0x390>
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	90 93 ba 1f 	sts	0x1FBA, r25
    30da:	78 c1       	rjmp	.+752    	; 0x33cc <pneOperationMode+0x686>
    30dc:	80 91 c4 1f 	lds	r24, 0x1FC4
    30e0:	81 30       	cpi	r24, 0x01	; 1
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <pneOperationMode+0x3a0>
    30e4:	73 c1       	rjmp	.+742    	; 0x33cc <pneOperationMode+0x686>
    30e6:	83 e0       	ldi	r24, 0x03	; 3
    30e8:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    30ec:	62 e0       	ldi	r22, 0x02	; 2
    30ee:	83 e7       	ldi	r24, 0x73	; 115
    30f0:	0e 94 9c 34 	call	0x6938	; 0x6938 <test_completed>
    30f4:	10 92 b0 20 	sts	0x20B0, r1
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	80 93 3b 20 	sts	0x203B, r24
    30fe:	80 93 10 20 	sts	0x2010, r24
    3102:	ca eb       	ldi	r28, 0xBA	; 186
    3104:	df e1       	ldi	r29, 0x1F	; 31
    3106:	1a 86       	std	Y+10, r1	; 0x0a
    3108:	60 91 37 20 	lds	r22, 0x2037
    310c:	70 91 38 20 	lds	r23, 0x2038
    3110:	80 91 39 20 	lds	r24, 0x2039
    3114:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    3118:	1b 86       	std	Y+11, r1	; 0x0b
    311a:	60 91 9d 20 	lds	r22, 0x209D
    311e:	70 91 9e 20 	lds	r23, 0x209E
    3122:	80 91 9f 20 	lds	r24, 0x209F
    3126:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	81 11       	cpse	r24, r1
    312e:	01 c0       	rjmp	.+2      	; 0x3132 <pneOperationMode+0x3ec>
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	90 93 ba 1f 	sts	0x1FBA, r25
    3136:	4a c1       	rjmp	.+660    	; 0x33cc <pneOperationMode+0x686>
    3138:	ea eb       	ldi	r30, 0xBA	; 186
    313a:	ff e1       	ldi	r31, 0x1F	; 31
    313c:	84 e0       	ldi	r24, 0x04	; 4
    313e:	82 8b       	std	Z+18, r24	; 0x12
    3140:	10 92 06 20 	sts	0x2006, r1
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	80 93 e2 1f 	sts	0x1FE2, r24
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	83 8b       	std	Z+19, r24	; 0x13
    314e:	80 91 b0 20 	lds	r24, 0x20B0
    3152:	81 11       	cpse	r24, r1
    3154:	08 c0       	rjmp	.+16     	; 0x3166 <pneOperationMode+0x420>
    3156:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	80 93 b0 20 	sts	0x20B0, r24
    3160:	83 e6       	ldi	r24, 0x63	; 99
    3162:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <pend_to_rf>
    3166:	80 91 ba 1f 	lds	r24, 0x1FBA
    316a:	81 30       	cpi	r24, 0x01	; 1
    316c:	a9 f4       	brne	.+42     	; 0x3198 <pneOperationMode+0x452>
    316e:	80 91 4d 20 	lds	r24, 0x204D
    3172:	81 11       	cpse	r24, r1
    3174:	11 c0       	rjmp	.+34     	; 0x3198 <pneOperationMode+0x452>
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    317c:	62 e0       	ldi	r22, 0x02	; 2
    317e:	81 e6       	ldi	r24, 0x61	; 97
    3180:	0e 94 9c 34 	call	0x6938	; 0x6938 <test_completed>
    3184:	10 92 b0 20 	sts	0x20B0, r1
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	80 93 3b 20 	sts	0x203B, r24
    318e:	80 93 10 20 	sts	0x2010, r24
    3192:	10 92 c3 1f 	sts	0x1FC3, r1
    3196:	1a c1       	rjmp	.+564    	; 0x33cc <pneOperationMode+0x686>
    3198:	80 91 b4 1f 	lds	r24, 0x1FB4
    319c:	90 91 bb 1f 	lds	r25, 0x1FBB
    31a0:	98 17       	cp	r25, r24
    31a2:	88 f0       	brcs	.+34     	; 0x31c6 <pneOperationMode+0x480>
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    31aa:	62 e0       	ldi	r22, 0x02	; 2
    31ac:	8e e6       	ldi	r24, 0x6E	; 110
    31ae:	0e 94 9c 34 	call	0x6938	; 0x6938 <test_completed>
    31b2:	10 92 b0 20 	sts	0x20B0, r1
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	80 93 3b 20 	sts	0x203B, r24
    31bc:	80 93 10 20 	sts	0x2010, r24
    31c0:	10 92 c3 1f 	sts	0x1FC3, r1
    31c4:	03 c1       	rjmp	.+518    	; 0x33cc <pneOperationMode+0x686>
    31c6:	80 91 c3 1f 	lds	r24, 0x1FC3
    31ca:	81 30       	cpi	r24, 0x01	; 1
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <pneOperationMode+0x48a>
    31ce:	fe c0       	rjmp	.+508    	; 0x33cc <pneOperationMode+0x686>
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	0e 94 4b 21 	call	0x4296	; 0x4296 <store>
    31d6:	62 e0       	ldi	r22, 0x02	; 2
    31d8:	83 e7       	ldi	r24, 0x73	; 115
    31da:	0e 94 9c 34 	call	0x6938	; 0x6938 <test_completed>
    31de:	10 92 b0 20 	sts	0x20B0, r1
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	80 93 3b 20 	sts	0x203B, r24
    31e8:	80 93 10 20 	sts	0x2010, r24
    31ec:	10 92 c3 1f 	sts	0x1FC3, r1
    31f0:	ed c0       	rjmp	.+474    	; 0x33cc <pneOperationMode+0x686>
    31f2:	80 91 06 20 	lds	r24, 0x2006
    31f6:	81 11       	cpse	r24, r1
    31f8:	08 c0       	rjmp	.+16     	; 0x320a <pneOperationMode+0x4c4>
    31fa:	8f e8       	ldi	r24, 0x8F	; 143
    31fc:	90 e2       	ldi	r25, 0x20	; 32
    31fe:	29 db       	rcall	.-2478   	; 0x2852 <SYS_TimerStart>
    3200:	80 91 06 20 	lds	r24, 0x2006
    3204:	8f 5f       	subi	r24, 0xFF	; 255
    3206:	80 93 06 20 	sts	0x2006, r24
    320a:	80 91 20 20 	lds	r24, 0x2020
    320e:	89 30       	cpi	r24, 0x09	; 9
    3210:	80 f0       	brcs	.+32     	; 0x3232 <pneOperationMode+0x4ec>
    3212:	60 91 f4 1f 	lds	r22, 0x1FF4
    3216:	70 91 f5 1f 	lds	r23, 0x1FF5
    321a:	80 91 f6 1f 	lds	r24, 0x1FF6
    321e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3222:	91 e0       	ldi	r25, 0x01	; 1
    3224:	81 11       	cpse	r24, r1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	90 93 be 1f 	sts	0x1FBE, r25
    322c:	10 92 20 20 	sts	0x2020, r1
    3230:	03 c0       	rjmp	.+6      	; 0x3238 <pneOperationMode+0x4f2>
    3232:	8f 5f       	subi	r24, 0xFF	; 255
    3234:	80 93 20 20 	sts	0x2020, r24
    3238:	80 91 be 1f 	lds	r24, 0x1FBE
    323c:	81 11       	cpse	r24, r1
    323e:	08 c0       	rjmp	.+16     	; 0x3250 <pneOperationMode+0x50a>
    3240:	8f e8       	ldi	r24, 0x8F	; 143
    3242:	90 e2       	ldi	r25, 0x20	; 32
    3244:	af da       	rcall	.-2722   	; 0x27a4 <SYS_TimerStop>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	80 93 10 20 	sts	0x2010, r24
    324c:	10 92 06 20 	sts	0x2006, r1
    3250:	80 91 ba 1f 	lds	r24, 0x1FBA
    3254:	81 30       	cpi	r24, 0x01	; 1
    3256:	09 f0       	breq	.+2      	; 0x325a <pneOperationMode+0x514>
    3258:	b9 c0       	rjmp	.+370    	; 0x33cc <pneOperationMode+0x686>
    325a:	80 91 4d 20 	lds	r24, 0x204D
    325e:	81 11       	cpse	r24, r1
    3260:	b5 c0       	rjmp	.+362    	; 0x33cc <pneOperationMode+0x686>
    3262:	10 92 10 20 	sts	0x2010, r1
    3266:	10 92 06 20 	sts	0x2006, r1
    326a:	b0 c0       	rjmp	.+352    	; 0x33cc <pneOperationMode+0x686>
    326c:	8d e7       	ldi	r24, 0x7D	; 125
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	a0 e0       	ldi	r26, 0x00	; 0
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	80 93 54 20 	sts	0x2054, r24
    3278:	90 93 55 20 	sts	0x2055, r25
    327c:	a0 93 56 20 	sts	0x2056, r26
    3280:	b0 93 57 20 	sts	0x2057, r27
    3284:	8a ef       	ldi	r24, 0xFA	; 250
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	a0 e0       	ldi	r26, 0x00	; 0
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	80 93 2e 20 	sts	0x202E, r24
    3290:	90 93 2f 20 	sts	0x202F, r25
    3294:	a0 93 30 20 	sts	0x2030, r26
    3298:	b0 93 31 20 	sts	0x2031, r27
    329c:	10 92 e2 1f 	sts	0x1FE2, r1
    32a0:	82 e0       	ldi	r24, 0x02	; 2
    32a2:	80 93 cc 1f 	sts	0x1FCC, r24
    32a6:	80 91 9c 20 	lds	r24, 0x209C
    32aa:	81 30       	cpi	r24, 0x01	; 1
    32ac:	31 f0       	breq	.+12     	; 0x32ba <pneOperationMode+0x574>
    32ae:	c0 f1       	brcs	.+112    	; 0x3320 <pneOperationMode+0x5da>
    32b0:	82 30       	cpi	r24, 0x02	; 2
    32b2:	51 f0       	breq	.+20     	; 0x32c8 <pneOperationMode+0x582>
    32b4:	83 30       	cpi	r24, 0x03	; 3
    32b6:	89 f0       	breq	.+34     	; 0x32da <pneOperationMode+0x594>
    32b8:	30 c0       	rjmp	.+96     	; 0x331a <pneOperationMode+0x5d4>
    32ba:	80 ea       	ldi	r24, 0xA0	; 160
    32bc:	90 e2       	ldi	r25, 0x20	; 32
    32be:	72 da       	rcall	.-2844   	; 0x27a4 <SYS_TimerStop>
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	80 93 9c 20 	sts	0x209C, r24
    32c6:	2c c0       	rjmp	.+88     	; 0x3320 <pneOperationMode+0x5da>
    32c8:	60 e1       	ldi	r22, 0x10	; 16
    32ca:	88 e3       	ldi	r24, 0x38	; 56
    32cc:	9f e1       	ldi	r25, 0x1F	; 31
    32ce:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <WPS_OK_Alert>
    32d2:	83 e0       	ldi	r24, 0x03	; 3
    32d4:	80 93 9c 20 	sts	0x209C, r24
    32d8:	23 c0       	rjmp	.+70     	; 0x3320 <pneOperationMode+0x5da>
    32da:	80 91 0a 20 	lds	r24, 0x200A
    32de:	90 91 0b 20 	lds	r25, 0x200B
    32e2:	81 35       	cpi	r24, 0x51	; 81
    32e4:	23 ec       	ldi	r18, 0xC3	; 195
    32e6:	92 07       	cpc	r25, r18
    32e8:	90 f0       	brcs	.+36     	; 0x330e <pneOperationMode+0x5c8>
    32ea:	80 91 b6 20 	lds	r24, 0x20B6
    32ee:	81 ff       	sbrs	r24, 1
    32f0:	0b c0       	rjmp	.+22     	; 0x3308 <pneOperationMode+0x5c2>
    32f2:	80 91 b6 20 	lds	r24, 0x20B6
    32f6:	8d 7f       	andi	r24, 0xFD	; 253
    32f8:	80 93 b6 20 	sts	0x20B6, r24
    32fc:	60 91 b6 20 	lds	r22, 0x20B6
    3300:	82 e0       	ldi	r24, 0x02	; 2
    3302:	90 e1       	ldi	r25, 0x10	; 16
    3304:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <writeE2prom>
    3308:	0e 94 cc 31 	call	0x6398	; 0x6398 <reboot_to_rf>
    330c:	09 c0       	rjmp	.+18     	; 0x3320 <pneOperationMode+0x5da>
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	90 93 0b 20 	sts	0x200B, r25
    3314:	80 93 0a 20 	sts	0x200A, r24
    3318:	03 c0       	rjmp	.+6      	; 0x3320 <pneOperationMode+0x5da>
    331a:	88 e0       	ldi	r24, 0x08	; 8
    331c:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3320:	80 91 20 20 	lds	r24, 0x2020
    3324:	89 30       	cpi	r24, 0x09	; 9
    3326:	f0 f0       	brcs	.+60     	; 0x3364 <pneOperationMode+0x61e>
    3328:	60 91 f4 1f 	lds	r22, 0x1FF4
    332c:	70 91 f5 1f 	lds	r23, 0x1FF5
    3330:	80 91 f6 1f 	lds	r24, 0x1FF6
    3334:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3338:	91 e0       	ldi	r25, 0x01	; 1
    333a:	81 11       	cpse	r24, r1
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	90 93 be 1f 	sts	0x1FBE, r25
    3342:	60 91 9d 20 	lds	r22, 0x209D
    3346:	70 91 9e 20 	lds	r23, 0x209E
    334a:	80 91 9f 20 	lds	r24, 0x209F
    334e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3352:	91 e0       	ldi	r25, 0x01	; 1
    3354:	81 11       	cpse	r24, r1
    3356:	01 c0       	rjmp	.+2      	; 0x335a <pneOperationMode+0x614>
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	90 93 ba 1f 	sts	0x1FBA, r25
    335e:	10 92 20 20 	sts	0x2020, r1
    3362:	03 c0       	rjmp	.+6      	; 0x336a <pneOperationMode+0x624>
    3364:	8f 5f       	subi	r24, 0xFF	; 255
    3366:	80 93 20 20 	sts	0x2020, r24
    336a:	80 91 be 1f 	lds	r24, 0x1FBE
    336e:	81 30       	cpi	r24, 0x01	; 1
    3370:	51 f4       	brne	.+20     	; 0x3386 <pneOperationMode+0x640>
    3372:	80 91 06 20 	lds	r24, 0x2006
    3376:	81 30       	cpi	r24, 0x01	; 1
    3378:	91 f4       	brne	.+36     	; 0x339e <pneOperationMode+0x658>
    337a:	8f e8       	ldi	r24, 0x8F	; 143
    337c:	90 e2       	ldi	r25, 0x20	; 32
    337e:	69 da       	rcall	.-2862   	; 0x2852 <SYS_TimerStart>
    3380:	10 92 06 20 	sts	0x2006, r1
    3384:	0c c0       	rjmp	.+24     	; 0x339e <pneOperationMode+0x658>
    3386:	81 11       	cpse	r24, r1
    3388:	0a c0       	rjmp	.+20     	; 0x339e <pneOperationMode+0x658>
    338a:	80 91 06 20 	lds	r24, 0x2006
    338e:	81 11       	cpse	r24, r1
    3390:	03 c0       	rjmp	.+6      	; 0x3398 <pneOperationMode+0x652>
    3392:	8f e8       	ldi	r24, 0x8F	; 143
    3394:	90 e2       	ldi	r25, 0x20	; 32
    3396:	06 da       	rcall	.-3060   	; 0x27a4 <SYS_TimerStop>
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	80 93 06 20 	sts	0x2006, r24
    339e:	80 91 ba 1f 	lds	r24, 0x1FBA
    33a2:	81 30       	cpi	r24, 0x01	; 1
    33a4:	99 f4       	brne	.+38     	; 0x33cc <pneOperationMode+0x686>
    33a6:	80 91 4d 20 	lds	r24, 0x204D
    33aa:	81 11       	cpse	r24, r1
    33ac:	0f c0       	rjmp	.+30     	; 0x33cc <pneOperationMode+0x686>
    33ae:	10 92 9c 20 	sts	0x209C, r1
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	80 93 10 20 	sts	0x2010, r24
    33b8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <APP_IbLoadSettings>
    33bc:	0e 94 0c 03 	call	0x618	; 0x618 <APP_NwkInit>
    33c0:	87 ee       	ldi	r24, 0xE7	; 231
    33c2:	9f e1       	ldi	r25, 0x1F	; 31
    33c4:	ef d9       	rcall	.-3106   	; 0x27a4 <SYS_TimerStop>
    33c6:	80 ea       	ldi	r24, 0xA0	; 160
    33c8:	90 e2       	ldi	r25, 0x20	; 32
    33ca:	ec d9       	rcall	.-3112   	; 0x27a4 <SYS_TimerStop>
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	0f 91       	pop	r16
    33d2:	08 95       	ret

000033d4 <pneOutgoingData>:
    33d4:	80 91 49 20 	lds	r24, 0x2049
    33d8:	88 23       	and	r24, r24
    33da:	71 f0       	breq	.+28     	; 0x33f8 <pneOutgoingData+0x24>
    33dc:	80 91 3b 20 	lds	r24, 0x203B
    33e0:	88 23       	and	r24, r24
    33e2:	19 f0       	breq	.+6      	; 0x33ea <pneOutgoingData+0x16>
    33e4:	10 92 3b 20 	sts	0x203B, r1
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <pneOutgoingData+0x1a>
    33ea:	0e 94 95 32 	call	0x652a	; 0x652a <status_send_to_rf>
    33ee:	82 e1       	ldi	r24, 0x12	; 18
    33f0:	90 e2       	ldi	r25, 0x20	; 32
    33f2:	2f da       	rcall	.-2978   	; 0x2852 <SYS_TimerStart>
    33f4:	10 92 49 20 	sts	0x2049, r1
    33f8:	08 95       	ret

000033fa <manual_btn_handler>:
    33fa:	80 91 c4 1f 	lds	r24, 0x1FC4
    33fe:	81 11       	cpse	r24, r1
    3400:	19 c0       	rjmp	.+50     	; 0x3434 <manual_btn_handler+0x3a>
    3402:	80 91 c2 1f 	lds	r24, 0x1FC2
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	21 f0       	breq	.+8      	; 0x3412 <manual_btn_handler+0x18>
    340a:	80 91 bd 1f 	lds	r24, 0x1FBD
    340e:	81 30       	cpi	r24, 0x01	; 1
    3410:	49 f4       	brne	.+18     	; 0x3424 <manual_btn_handler+0x2a>
    3412:	60 91 37 20 	lds	r22, 0x2037
    3416:	70 91 38 20 	lds	r23, 0x2038
    341a:	80 91 39 20 	lds	r24, 0x2039
    341e:	0c 94 92 09 	jmp	0x1324	; 0x1324 <gpio_set>
    3422:	08 95       	ret
    3424:	60 91 37 20 	lds	r22, 0x2037
    3428:	70 91 38 20 	lds	r23, 0x2038
    342c:	80 91 39 20 	lds	r24, 0x2039
    3430:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <gpio_clr>
    3434:	08 95       	ret

00003436 <manual_btn_isr>:
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	80 93 bb 20 	sts	0x20BB, r24
    343c:	de cf       	rjmp	.-68     	; 0x33fa <manual_btn_handler>
    343e:	08 95       	ret

00003440 <pneGetStatus>:
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	80 91 e3 1f 	lds	r24, 0x1FE3
    3448:	88 23       	and	r24, r24
    344a:	09 f4       	brne	.+2      	; 0x344e <pneGetStatus+0xe>
    344c:	60 c0       	rjmp	.+192    	; 0x350e <pneGetStatus+0xce>
    344e:	0e 94 94 36 	call	0x6d28	; 0x6d28 <pneBatteryAverage>
    3452:	ca eb       	ldi	r28, 0xBA	; 186
    3454:	df e1       	ldi	r29, 0x1F	; 31
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	ba d6       	rcall	.+3444   	; 0x41ce <PNEWELSTemperatureRead>
    345a:	8e 83       	std	Y+6, r24	; 0x06
    345c:	80 ef       	ldi	r24, 0xF0	; 240
    345e:	8f 87       	std	Y+15, r24	; 0x0f
    3460:	10 92 e3 1f 	sts	0x1FE3, r1
    3464:	eb e7       	ldi	r30, 0x7B	; 123
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	80 81       	ld	r24, Z
    346a:	87 7f       	andi	r24, 0xF7	; 247
    346c:	80 83       	st	Z, r24
    346e:	81 e6       	ldi	r24, 0x61	; 97
    3470:	80 93 7c 00 	sts	0x007C, r24
    3474:	ea e7       	ldi	r30, 0x7A	; 122
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	80 64       	ori	r24, 0x40	; 64
    347c:	80 83       	st	Z, r24
    347e:	80 81       	ld	r24, Z
    3480:	86 fd       	sbrc	r24, 6
    3482:	fd cf       	rjmp	.-6      	; 0x347e <pneGetStatus+0x3e>
    3484:	80 91 79 00 	lds	r24, 0x0079
    3488:	24 e2       	ldi	r18, 0x24	; 36
    348a:	82 9f       	mul	r24, r18
    348c:	c0 01       	movw	r24, r0
    348e:	11 24       	eor	r1, r1
    3490:	6f ef       	ldi	r22, 0xFF	; 255
    3492:	70 e0       	ldi	r23, 0x00	; 0
    3494:	0e 94 d5 4b 	call	0x97aa	; 0x97aa <__divmodhi4>
    3498:	60 93 bc 1f 	sts	0x1FBC, r22
    349c:	60 91 b2 20 	lds	r22, 0x20B2
    34a0:	70 91 b3 20 	lds	r23, 0x20B3
    34a4:	80 91 b4 20 	lds	r24, 0x20B4
    34a8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    34ac:	91 e0       	ldi	r25, 0x01	; 1
    34ae:	81 11       	cpse	r24, r1
    34b0:	01 c0       	rjmp	.+2      	; 0x34b4 <pneGetStatus+0x74>
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	90 93 d9 1f 	sts	0x1FD9, r25
    34b8:	20 91 bb 1f 	lds	r18, 0x1FBB
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	80 91 b1 20 	lds	r24, 0x20B1
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	0a 97       	sbiw	r24, 0x0a	; 10
    34c6:	28 17       	cp	r18, r24
    34c8:	39 07       	cpc	r19, r25
    34ca:	34 f4       	brge	.+12     	; 0x34d8 <pneGetStatus+0x98>
    34cc:	ea eb       	ldi	r30, 0xBA	; 186
    34ce:	ff e1       	ldi	r31, 0x1F	; 31
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	80 8b       	std	Z+16, r24	; 0x10
    34d4:	11 8a       	std	Z+17, r1	; 0x11
    34d6:	0d c0       	rjmp	.+26     	; 0x34f2 <pneGetStatus+0xb2>
    34d8:	80 91 b1 20 	lds	r24, 0x20B1
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	0a 96       	adiw	r24, 0x0a	; 10
    34e0:	28 17       	cp	r18, r24
    34e2:	39 07       	cpc	r19, r25
    34e4:	1c f0       	brlt	.+6      	; 0x34ec <pneGetStatus+0xac>
    34e6:	10 92 ca 1f 	sts	0x1FCA, r1
    34ea:	03 c0       	rjmp	.+6      	; 0x34f2 <pneGetStatus+0xb2>
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	80 93 ca 1f 	sts	0x1FCA, r24
    34f2:	80 91 c0 1f 	lds	r24, 0x1FC0
    34f6:	8d 33       	cpi	r24, 0x3D	; 61
    34f8:	18 f0       	brcs	.+6      	; 0x3500 <pneGetStatus+0xc0>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3500:	80 91 bb 1f 	lds	r24, 0x1FBB
    3504:	85 36       	cpi	r24, 0x65	; 101
    3506:	18 f4       	brcc	.+6      	; 0x350e <pneGetStatus+0xce>
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    350e:	80 91 23 20 	lds	r24, 0x2023
    3512:	81 30       	cpi	r24, 0x01	; 1
    3514:	29 f0       	breq	.+10     	; 0x3520 <pneGetStatus+0xe0>
    3516:	80 91 bb 20 	lds	r24, 0x20BB
    351a:	81 30       	cpi	r24, 0x01	; 1
    351c:	09 f0       	breq	.+2      	; 0x3520 <pneGetStatus+0xe0>
    351e:	b4 c0       	rjmp	.+360    	; 0x3688 <pneGetStatus+0x248>
    3520:	80 91 20 20 	lds	r24, 0x2020
    3524:	89 30       	cpi	r24, 0x09	; 9
    3526:	08 f4       	brcc	.+2      	; 0x352a <pneGetStatus+0xea>
    3528:	ac c0       	rjmp	.+344    	; 0x3682 <pneGetStatus+0x242>
    352a:	60 91 5b 20 	lds	r22, 0x205B
    352e:	70 91 5c 20 	lds	r23, 0x205C
    3532:	80 91 5d 20 	lds	r24, 0x205D
    3536:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    353a:	91 e0       	ldi	r25, 0x01	; 1
    353c:	81 11       	cpse	r24, r1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	90 93 bd 1f 	sts	0x1FBD, r25
    3544:	5a df       	rcall	.-332    	; 0x33fa <manual_btn_handler>
    3546:	60 91 f4 1f 	lds	r22, 0x1FF4
    354a:	70 91 f5 1f 	lds	r23, 0x1FF5
    354e:	80 91 f6 1f 	lds	r24, 0x1FF6
    3552:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3556:	91 e0       	ldi	r25, 0x01	; 1
    3558:	81 11       	cpse	r24, r1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	90 93 be 1f 	sts	0x1FBE, r25
    3560:	60 91 f7 1f 	lds	r22, 0x1FF7
    3564:	70 91 f8 1f 	lds	r23, 0x1FF8
    3568:	80 91 f9 1f 	lds	r24, 0x1FF9
    356c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3570:	91 e0       	ldi	r25, 0x01	; 1
    3572:	81 11       	cpse	r24, r1
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <pneGetStatus+0x138>
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	90 93 bf 1f 	sts	0x1FBF, r25
    357c:	60 91 9d 20 	lds	r22, 0x209D
    3580:	70 91 9e 20 	lds	r23, 0x209E
    3584:	80 91 9f 20 	lds	r24, 0x209F
    3588:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    358c:	91 e0       	ldi	r25, 0x01	; 1
    358e:	81 11       	cpse	r24, r1
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <pneGetStatus+0x154>
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	90 93 ba 1f 	sts	0x1FBA, r25
    3598:	60 91 b2 20 	lds	r22, 0x20B2
    359c:	70 91 b3 20 	lds	r23, 0x20B3
    35a0:	80 91 b4 20 	lds	r24, 0x20B4
    35a4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    35a8:	91 e0       	ldi	r25, 0x01	; 1
    35aa:	81 11       	cpse	r24, r1
    35ac:	01 c0       	rjmp	.+2      	; 0x35b0 <pneGetStatus+0x170>
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	90 93 d9 1f 	sts	0x1FD9, r25
    35b4:	60 91 ad 20 	lds	r22, 0x20AD
    35b8:	70 91 ae 20 	lds	r23, 0x20AE
    35bc:	80 91 af 20 	lds	r24, 0x20AF
    35c0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    35c4:	91 e0       	ldi	r25, 0x01	; 1
    35c6:	81 11       	cpse	r24, r1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	90 93 da 1f 	sts	0x1FDA, r25
    35ce:	60 91 00 20 	lds	r22, 0x2000
    35d2:	70 91 01 20 	lds	r23, 0x2001
    35d6:	80 91 02 20 	lds	r24, 0x2002
    35da:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    35de:	91 e0       	ldi	r25, 0x01	; 1
    35e0:	81 11       	cpse	r24, r1
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	90 93 db 1f 	sts	0x1FDB, r25
    35e8:	60 91 5e 20 	lds	r22, 0x205E
    35ec:	70 91 5f 20 	lds	r23, 0x205F
    35f0:	80 91 60 20 	lds	r24, 0x2060
    35f4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    35f8:	91 e0       	ldi	r25, 0x01	; 1
    35fa:	81 11       	cpse	r24, r1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	90 93 dc 1f 	sts	0x1FDC, r25
    3602:	60 91 b6 1f 	lds	r22, 0x1FB6
    3606:	70 91 b7 1f 	lds	r23, 0x1FB7
    360a:	80 91 b8 1f 	lds	r24, 0x1FB8
    360e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3612:	91 e0       	ldi	r25, 0x01	; 1
    3614:	81 11       	cpse	r24, r1
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	90 93 dd 1f 	sts	0x1FDD, r25
    361c:	60 91 0d 20 	lds	r22, 0x200D
    3620:	70 91 0e 20 	lds	r23, 0x200E
    3624:	80 91 0f 20 	lds	r24, 0x200F
    3628:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    362c:	91 e0       	ldi	r25, 0x01	; 1
    362e:	81 11       	cpse	r24, r1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	90 93 de 1f 	sts	0x1FDE, r25
    3636:	80 91 c2 1f 	lds	r24, 0x1FC2
    363a:	81 30       	cpi	r24, 0x01	; 1
    363c:	21 f0       	breq	.+8      	; 0x3646 <pneGetStatus+0x206>
    363e:	80 91 bd 1f 	lds	r24, 0x1FBD
    3642:	81 30       	cpi	r24, 0x01	; 1
    3644:	39 f4       	brne	.+14     	; 0x3654 <pneGetStatus+0x214>
    3646:	80 91 ba 1f 	lds	r24, 0x1FBA
    364a:	81 11       	cpse	r24, r1
    364c:	03 c0       	rjmp	.+6      	; 0x3654 <pneGetStatus+0x214>
    364e:	85 e0       	ldi	r24, 0x05	; 5
    3650:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3654:	10 92 23 20 	sts	0x2023, r1
    3658:	10 92 20 20 	sts	0x2020, r1
    365c:	80 91 ba 1f 	lds	r24, 0x1FBA
    3660:	81 11       	cpse	r24, r1
    3662:	06 c0       	rjmp	.+12     	; 0x3670 <pneGetStatus+0x230>
    3664:	80 91 d9 1f 	lds	r24, 0x1FD9
    3668:	81 11       	cpse	r24, r1
    366a:	02 c0       	rjmp	.+4      	; 0x3670 <pneGetStatus+0x230>
    366c:	10 92 4d 20 	sts	0x204D, r1
    3670:	80 91 bb 20 	lds	r24, 0x20BB
    3674:	81 30       	cpi	r24, 0x01	; 1
    3676:	41 f4       	brne	.+16     	; 0x3688 <pneGetStatus+0x248>
    3678:	80 93 49 20 	sts	0x2049, r24
    367c:	10 92 bb 20 	sts	0x20BB, r1
    3680:	03 c0       	rjmp	.+6      	; 0x3688 <pneGetStatus+0x248>
    3682:	8f 5f       	subi	r24, 0xFF	; 255
    3684:	80 93 20 20 	sts	0x2020, r24
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	08 95       	ret

0000368e <PNEWELSTaskHandler>:
    368e:	d8 de       	rcall	.-592    	; 0x3440 <pneGetStatus>
    3690:	5a db       	rcall	.-2380   	; 0x2d46 <pneOperationMode>
    3692:	a0 ce       	rjmp	.-704    	; 0x33d4 <pneOutgoingData>
    3694:	08 95       	ret

00003696 <pneIncomingData>:
    3696:	8f 92       	push	r8
    3698:	9f 92       	push	r9
    369a:	af 92       	push	r10
    369c:	bf 92       	push	r11
    369e:	ff 92       	push	r15
    36a0:	0f 93       	push	r16
    36a2:	1f 93       	push	r17
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
    36ac:	29 97       	sbiw	r28, 0x09	; 9
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	8c 01       	movw	r16, r24
    36ba:	f6 2e       	mov	r15, r22
    36bc:	0e 94 88 03 	call	0x710	; 0x710 <pneVerify_received>
    36c0:	80 93 f2 20 	sts	0x20F2, r24
    36c4:	88 23       	and	r24, r24
    36c6:	09 f4       	brne	.+2      	; 0x36ca <pneIncomingData+0x34>
    36c8:	cd c2       	rjmp	.+1434   	; 0x3c64 <pneIncomingData+0x5ce>
    36ca:	48 e0       	ldi	r20, 0x08	; 8
    36cc:	50 e0       	ldi	r21, 0x00	; 0
    36ce:	61 e4       	ldi	r22, 0x41	; 65
    36d0:	72 e0       	ldi	r23, 0x02	; 2
    36d2:	c8 01       	movw	r24, r16
    36d4:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    36d8:	89 2b       	or	r24, r25
    36da:	a1 f4       	brne	.+40     	; 0x3704 <pneIncomingData+0x6e>
    36dc:	80 91 10 20 	lds	r24, 0x2010
    36e0:	81 11       	cpse	r24, r1
    36e2:	0a c0       	rjmp	.+20     	; 0x36f8 <pneIncomingData+0x62>
    36e4:	80 91 c2 1f 	lds	r24, 0x1FC2
    36e8:	81 30       	cpi	r24, 0x01	; 1
    36ea:	31 f4       	brne	.+12     	; 0x36f8 <pneIncomingData+0x62>
    36ec:	83 e0       	ldi	r24, 0x03	; 3
    36ee:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    36f2:	ff 24       	eor	r15, r15
    36f4:	f3 94       	inc	r15
    36f6:	ba c2       	rjmp	.+1396   	; 0x3c6c <pneIncomingData+0x5d6>
    36f8:	0e 94 bb 32 	call	0x6576	; 0x6576 <emergency_on_to_rf>
    36fc:	7e de       	rcall	.-772    	; 0x33fa <manual_btn_handler>
    36fe:	ff 24       	eor	r15, r15
    3700:	f3 94       	inc	r15
    3702:	b4 c2       	rjmp	.+1384   	; 0x3c6c <pneIncomingData+0x5d6>
    3704:	48 e0       	ldi	r20, 0x08	; 8
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	6a e4       	ldi	r22, 0x4A	; 74
    370a:	72 e0       	ldi	r23, 0x02	; 2
    370c:	c8 01       	movw	r24, r16
    370e:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3712:	89 2b       	or	r24, r25
    3714:	a1 f4       	brne	.+40     	; 0x373e <pneIncomingData+0xa8>
    3716:	80 91 10 20 	lds	r24, 0x2010
    371a:	81 30       	cpi	r24, 0x01	; 1
    371c:	51 f4       	brne	.+20     	; 0x3732 <pneIncomingData+0x9c>
    371e:	80 91 c2 1f 	lds	r24, 0x1FC2
    3722:	81 11       	cpse	r24, r1
    3724:	06 c0       	rjmp	.+12     	; 0x3732 <pneIncomingData+0x9c>
    3726:	83 e0       	ldi	r24, 0x03	; 3
    3728:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    372c:	ff 24       	eor	r15, r15
    372e:	f3 94       	inc	r15
    3730:	9d c2       	rjmp	.+1338   	; 0x3c6c <pneIncomingData+0x5d6>
    3732:	0e 94 c5 32 	call	0x658a	; 0x658a <emergency_off_to_rf>
    3736:	61 de       	rcall	.-830    	; 0x33fa <manual_btn_handler>
    3738:	ff 24       	eor	r15, r15
    373a:	f3 94       	inc	r15
    373c:	97 c2       	rjmp	.+1326   	; 0x3c6c <pneIncomingData+0x5d6>
    373e:	48 e0       	ldi	r20, 0x08	; 8
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	63 e5       	ldi	r22, 0x53	; 83
    3744:	72 e0       	ldi	r23, 0x02	; 2
    3746:	c8 01       	movw	r24, r16
    3748:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    374c:	89 2b       	or	r24, r25
    374e:	09 f0       	breq	.+2      	; 0x3752 <pneIncomingData+0xbc>
    3750:	50 c0       	rjmp	.+160    	; 0x37f2 <pneIncomingData+0x15c>
    3752:	2f e0       	ldi	r18, 0x0F	; 15
    3754:	2f 15       	cp	r18, r15
    3756:	30 f0       	brcs	.+12     	; 0x3764 <pneIncomingData+0xce>
    3758:	84 e0       	ldi	r24, 0x04	; 4
    375a:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    375e:	ff 24       	eor	r15, r15
    3760:	f3 94       	inc	r15
    3762:	84 c2       	rjmp	.+1288   	; 0x3c6c <pneIncomingData+0x5d6>
    3764:	6e ef       	ldi	r22, 0xFE	; 254
    3766:	6f 0d       	add	r22, r15
    3768:	c8 01       	movw	r24, r16
    376a:	0e 94 76 35 	call	0x6aec	; 0x6aec <crc_verify>
    376e:	f8 2e       	mov	r15, r24
    3770:	88 23       	and	r24, r24
    3772:	09 f4       	brne	.+2      	; 0x3776 <pneIncomingData+0xe0>
    3774:	79 c2       	rjmp	.+1266   	; 0x3c68 <pneIncomingData+0x5d2>
    3776:	f8 01       	movw	r30, r16
    3778:	21 85       	ldd	r18, Z+9	; 0x09
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	20 53       	subi	r18, 0x30	; 48
    377e:	31 09       	sbc	r19, r1
    3780:	88 ee       	ldi	r24, 0xE8	; 232
    3782:	93 e0       	ldi	r25, 0x03	; 3
    3784:	28 9f       	mul	r18, r24
    3786:	a0 01       	movw	r20, r0
    3788:	29 9f       	mul	r18, r25
    378a:	50 0d       	add	r21, r0
    378c:	38 9f       	mul	r19, r24
    378e:	50 0d       	add	r21, r0
    3790:	11 24       	eor	r1, r1
    3792:	22 85       	ldd	r18, Z+10	; 0x0a
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	20 53       	subi	r18, 0x30	; 48
    3798:	31 09       	sbc	r19, r1
    379a:	64 e6       	ldi	r22, 0x64	; 100
    379c:	62 9f       	mul	r22, r18
    379e:	c0 01       	movw	r24, r0
    37a0:	63 9f       	mul	r22, r19
    37a2:	90 0d       	add	r25, r0
    37a4:	11 24       	eor	r1, r1
    37a6:	84 0f       	add	r24, r20
    37a8:	95 1f       	adc	r25, r21
    37aa:	24 85       	ldd	r18, Z+12	; 0x0c
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	20 53       	subi	r18, 0x30	; 48
    37b0:	31 09       	sbc	r19, r1
    37b2:	ac 01       	movw	r20, r24
    37b4:	42 0f       	add	r20, r18
    37b6:	53 1f       	adc	r21, r19
    37b8:	23 85       	ldd	r18, Z+11	; 0x0b
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	20 53       	subi	r18, 0x30	; 48
    37be:	31 09       	sbc	r19, r1
    37c0:	c9 01       	movw	r24, r18
    37c2:	88 0f       	add	r24, r24
    37c4:	99 1f       	adc	r25, r25
    37c6:	22 0f       	add	r18, r18
    37c8:	33 1f       	adc	r19, r19
    37ca:	22 0f       	add	r18, r18
    37cc:	33 1f       	adc	r19, r19
    37ce:	22 0f       	add	r18, r18
    37d0:	33 1f       	adc	r19, r19
    37d2:	28 0f       	add	r18, r24
    37d4:	39 1f       	adc	r19, r25
    37d6:	ca 01       	movw	r24, r20
    37d8:	82 0f       	add	r24, r18
    37da:	93 1f       	adc	r25, r19
    37dc:	8d 3f       	cpi	r24, 0xFD	; 253
    37de:	ff e0       	ldi	r31, 0x0F	; 15
    37e0:	9f 07       	cpc	r25, r31
    37e2:	20 f0       	brcs	.+8      	; 0x37ec <pneIncomingData+0x156>
    37e4:	84 e0       	ldi	r24, 0x04	; 4
    37e6:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    37ea:	40 c2       	rjmp	.+1152   	; 0x3c6c <pneIncomingData+0x5d6>
    37ec:	0e 94 ce 32 	call	0x659c	; 0x659c <eeprom_to_rf>
    37f0:	3d c2       	rjmp	.+1146   	; 0x3c6c <pneIncomingData+0x5d6>
    37f2:	48 e0       	ldi	r20, 0x08	; 8
    37f4:	50 e0       	ldi	r21, 0x00	; 0
    37f6:	6c e5       	ldi	r22, 0x5C	; 92
    37f8:	72 e0       	ldi	r23, 0x02	; 2
    37fa:	c8 01       	movw	r24, r16
    37fc:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3800:	89 2b       	or	r24, r25
    3802:	81 f4       	brne	.+32     	; 0x3824 <pneIncomingData+0x18e>
    3804:	80 91 10 20 	lds	r24, 0x2010
    3808:	81 11       	cpse	r24, r1
    380a:	06 c0       	rjmp	.+12     	; 0x3818 <pneIncomingData+0x182>
    380c:	83 e0       	ldi	r24, 0x03	; 3
    380e:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3812:	ff 24       	eor	r15, r15
    3814:	f3 94       	inc	r15
    3816:	2a c2       	rjmp	.+1108   	; 0x3c6c <pneIncomingData+0x5d6>
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	80 93 c3 1f 	sts	0x1FC3, r24
    381e:	ff 24       	eor	r15, r15
    3820:	f3 94       	inc	r15
    3822:	24 c2       	rjmp	.+1096   	; 0x3c6c <pneIncomingData+0x5d6>
    3824:	48 e0       	ldi	r20, 0x08	; 8
    3826:	50 e0       	ldi	r21, 0x00	; 0
    3828:	65 e6       	ldi	r22, 0x65	; 101
    382a:	72 e0       	ldi	r23, 0x02	; 2
    382c:	c8 01       	movw	r24, r16
    382e:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3832:	89 2b       	or	r24, r25
    3834:	79 f4       	brne	.+30     	; 0x3854 <pneIncomingData+0x1be>
    3836:	80 91 10 20 	lds	r24, 0x2010
    383a:	81 11       	cpse	r24, r1
    383c:	06 c0       	rjmp	.+12     	; 0x384a <pneIncomingData+0x1b4>
    383e:	83 e0       	ldi	r24, 0x03	; 3
    3840:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3844:	ff 24       	eor	r15, r15
    3846:	f3 94       	inc	r15
    3848:	11 c2       	rjmp	.+1058   	; 0x3c6c <pneIncomingData+0x5d6>
    384a:	10 92 c3 1f 	sts	0x1FC3, r1
    384e:	ff 24       	eor	r15, r15
    3850:	f3 94       	inc	r15
    3852:	0c c2       	rjmp	.+1048   	; 0x3c6c <pneIncomingData+0x5d6>
    3854:	48 e0       	ldi	r20, 0x08	; 8
    3856:	50 e0       	ldi	r21, 0x00	; 0
    3858:	6e e6       	ldi	r22, 0x6E	; 110
    385a:	72 e0       	ldi	r23, 0x02	; 2
    385c:	c8 01       	movw	r24, r16
    385e:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3862:	89 2b       	or	r24, r25
    3864:	81 f4       	brne	.+32     	; 0x3886 <pneIncomingData+0x1f0>
    3866:	80 91 10 20 	lds	r24, 0x2010
    386a:	81 11       	cpse	r24, r1
    386c:	06 c0       	rjmp	.+12     	; 0x387a <pneIncomingData+0x1e4>
    386e:	83 e0       	ldi	r24, 0x03	; 3
    3870:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3874:	ff 24       	eor	r15, r15
    3876:	f3 94       	inc	r15
    3878:	f9 c1       	rjmp	.+1010   	; 0x3c6c <pneIncomingData+0x5d6>
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	80 93 c4 1f 	sts	0x1FC4, r24
    3880:	ff 24       	eor	r15, r15
    3882:	f3 94       	inc	r15
    3884:	f3 c1       	rjmp	.+998    	; 0x3c6c <pneIncomingData+0x5d6>
    3886:	48 e0       	ldi	r20, 0x08	; 8
    3888:	50 e0       	ldi	r21, 0x00	; 0
    388a:	67 e7       	ldi	r22, 0x77	; 119
    388c:	72 e0       	ldi	r23, 0x02	; 2
    388e:	c8 01       	movw	r24, r16
    3890:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3894:	89 2b       	or	r24, r25
    3896:	79 f4       	brne	.+30     	; 0x38b6 <pneIncomingData+0x220>
    3898:	80 91 10 20 	lds	r24, 0x2010
    389c:	81 11       	cpse	r24, r1
    389e:	06 c0       	rjmp	.+12     	; 0x38ac <pneIncomingData+0x216>
    38a0:	83 e0       	ldi	r24, 0x03	; 3
    38a2:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    38a6:	ff 24       	eor	r15, r15
    38a8:	f3 94       	inc	r15
    38aa:	e0 c1       	rjmp	.+960    	; 0x3c6c <pneIncomingData+0x5d6>
    38ac:	10 92 c4 1f 	sts	0x1FC4, r1
    38b0:	ff 24       	eor	r15, r15
    38b2:	f3 94       	inc	r15
    38b4:	db c1       	rjmp	.+950    	; 0x3c6c <pneIncomingData+0x5d6>
    38b6:	48 e0       	ldi	r20, 0x08	; 8
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	60 e8       	ldi	r22, 0x80	; 128
    38bc:	72 e0       	ldi	r23, 0x02	; 2
    38be:	c8 01       	movw	r24, r16
    38c0:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    38c4:	89 2b       	or	r24, r25
    38c6:	09 f0       	breq	.+2      	; 0x38ca <pneIncomingData+0x234>
    38c8:	92 c0       	rjmp	.+292    	; 0x39ee <pneIncomingData+0x358>
    38ca:	23 e1       	ldi	r18, 0x13	; 19
    38cc:	2f 15       	cp	r18, r15
    38ce:	30 f0       	brcs	.+12     	; 0x38dc <pneIncomingData+0x246>
    38d0:	86 e0       	ldi	r24, 0x06	; 6
    38d2:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    38d6:	ff 24       	eor	r15, r15
    38d8:	f3 94       	inc	r15
    38da:	c8 c1       	rjmp	.+912    	; 0x3c6c <pneIncomingData+0x5d6>
    38dc:	6e ef       	ldi	r22, 0xFE	; 254
    38de:	6f 0d       	add	r22, r15
    38e0:	c8 01       	movw	r24, r16
    38e2:	0e 94 76 35 	call	0x6aec	; 0x6aec <crc_verify>
    38e6:	f8 2e       	mov	r15, r24
    38e8:	88 23       	and	r24, r24
    38ea:	09 f4       	brne	.+2      	; 0x38ee <pneIncomingData+0x258>
    38ec:	7a c0       	rjmp	.+244    	; 0x39e2 <pneIncomingData+0x34c>
    38ee:	f8 01       	movw	r30, r16
    38f0:	a1 85       	ldd	r26, Z+9	; 0x09
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	d0 97       	sbiw	r26, 0x30	; 48
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	3a ec       	ldi	r19, 0xCA	; 202
    38fa:	4a e9       	ldi	r20, 0x9A	; 154
    38fc:	5b e3       	ldi	r21, 0x3B	; 59
    38fe:	0e 94 27 4c 	call	0x984e	; 0x984e <__mulshisi3>
    3902:	4b 01       	movw	r8, r22
    3904:	5c 01       	movw	r10, r24
    3906:	a2 85       	ldd	r26, Z+10	; 0x0a
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	d0 97       	sbiw	r26, 0x30	; 48
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	31 ee       	ldi	r19, 0xE1	; 225
    3910:	45 ef       	ldi	r20, 0xF5	; 245
    3912:	55 e0       	ldi	r21, 0x05	; 5
    3914:	0e 94 27 4c 	call	0x984e	; 0x984e <__mulshisi3>
    3918:	86 0e       	add	r8, r22
    391a:	97 1e       	adc	r9, r23
    391c:	a8 1e       	adc	r10, r24
    391e:	b9 1e       	adc	r11, r25
    3920:	82 89       	ldd	r24, Z+18	; 0x12
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	c0 97       	sbiw	r24, 0x30	; 48
    3926:	09 2e       	mov	r0, r25
    3928:	00 0c       	add	r0, r0
    392a:	aa 0b       	sbc	r26, r26
    392c:	bb 0b       	sbc	r27, r27
    392e:	88 0e       	add	r8, r24
    3930:	99 1e       	adc	r9, r25
    3932:	aa 1e       	adc	r10, r26
    3934:	bb 1e       	adc	r11, r27
    3936:	a3 85       	ldd	r26, Z+11	; 0x0b
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	d0 97       	sbiw	r26, 0x30	; 48
    393c:	20 e8       	ldi	r18, 0x80	; 128
    393e:	36 e9       	ldi	r19, 0x96	; 150
    3940:	48 e9       	ldi	r20, 0x98	; 152
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	0e 94 27 4c 	call	0x984e	; 0x984e <__mulshisi3>
    3948:	86 0e       	add	r8, r22
    394a:	97 1e       	adc	r9, r23
    394c:	a8 1e       	adc	r10, r24
    394e:	b9 1e       	adc	r11, r25
    3950:	a4 85       	ldd	r26, Z+12	; 0x0c
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	d0 97       	sbiw	r26, 0x30	; 48
    3956:	20 e4       	ldi	r18, 0x40	; 64
    3958:	32 e4       	ldi	r19, 0x42	; 66
    395a:	4f e0       	ldi	r20, 0x0F	; 15
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	0e 94 27 4c 	call	0x984e	; 0x984e <__mulshisi3>
    3962:	86 0e       	add	r8, r22
    3964:	97 1e       	adc	r9, r23
    3966:	a8 1e       	adc	r10, r24
    3968:	b9 1e       	adc	r11, r25
    396a:	a5 85       	ldd	r26, Z+13	; 0x0d
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	d0 97       	sbiw	r26, 0x30	; 48
    3970:	20 ea       	ldi	r18, 0xA0	; 160
    3972:	36 e8       	ldi	r19, 0x86	; 134
    3974:	41 e0       	ldi	r20, 0x01	; 1
    3976:	50 e0       	ldi	r21, 0x00	; 0
    3978:	0e 94 27 4c 	call	0x984e	; 0x984e <__mulshisi3>
    397c:	86 0e       	add	r8, r22
    397e:	97 1e       	adc	r9, r23
    3980:	a8 1e       	adc	r10, r24
    3982:	b9 1e       	adc	r11, r25
    3984:	a6 85       	ldd	r26, Z+14	; 0x0e
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	d0 97       	sbiw	r26, 0x30	; 48
    398a:	20 e1       	ldi	r18, 0x10	; 16
    398c:	37 e2       	ldi	r19, 0x27	; 39
    398e:	0e 94 21 4c 	call	0x9842	; 0x9842 <__usmulhisi3>
    3992:	86 0e       	add	r8, r22
    3994:	97 1e       	adc	r9, r23
    3996:	a8 1e       	adc	r10, r24
    3998:	b9 1e       	adc	r11, r25
    399a:	a7 85       	ldd	r26, Z+15	; 0x0f
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	d0 97       	sbiw	r26, 0x30	; 48
    39a0:	28 ee       	ldi	r18, 0xE8	; 232
    39a2:	33 e0       	ldi	r19, 0x03	; 3
    39a4:	0e 94 21 4c 	call	0x9842	; 0x9842 <__usmulhisi3>
    39a8:	86 0e       	add	r8, r22
    39aa:	97 1e       	adc	r9, r23
    39ac:	a8 1e       	adc	r10, r24
    39ae:	b9 1e       	adc	r11, r25
    39b0:	a0 89       	ldd	r26, Z+16	; 0x10
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	d0 97       	sbiw	r26, 0x30	; 48
    39b6:	24 e6       	ldi	r18, 0x64	; 100
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	0e 94 21 4c 	call	0x9842	; 0x9842 <__usmulhisi3>
    39be:	86 0e       	add	r8, r22
    39c0:	97 1e       	adc	r9, r23
    39c2:	a8 1e       	adc	r10, r24
    39c4:	b9 1e       	adc	r11, r25
    39c6:	a1 89       	ldd	r26, Z+17	; 0x11
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	d0 97       	sbiw	r26, 0x30	; 48
    39cc:	2a e0       	ldi	r18, 0x0A	; 10
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	0e 94 21 4c 	call	0x9842	; 0x9842 <__usmulhisi3>
    39d4:	68 0d       	add	r22, r8
    39d6:	79 1d       	adc	r23, r9
    39d8:	8a 1d       	adc	r24, r10
    39da:	9b 1d       	adc	r25, r11
    39dc:	0e 94 8f 33 	call	0x671e	; 0x671e <time_to_rf>
    39e0:	45 c1       	rjmp	.+650    	; 0x3c6c <pneIncomingData+0x5d6>
    39e2:	87 e0       	ldi	r24, 0x07	; 7
    39e4:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    39e8:	ff 24       	eor	r15, r15
    39ea:	f3 94       	inc	r15
    39ec:	3f c1       	rjmp	.+638    	; 0x3c6c <pneIncomingData+0x5d6>
    39ee:	48 e0       	ldi	r20, 0x08	; 8
    39f0:	50 e0       	ldi	r21, 0x00	; 0
    39f2:	69 e8       	ldi	r22, 0x89	; 137
    39f4:	72 e0       	ldi	r23, 0x02	; 2
    39f6:	c8 01       	movw	r24, r16
    39f8:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    39fc:	89 2b       	or	r24, r25
    39fe:	39 f4       	brne	.+14     	; 0x3a0e <pneIncomingData+0x378>
    3a00:	82 e1       	ldi	r24, 0x12	; 18
    3a02:	90 e2       	ldi	r25, 0x20	; 32
    3a04:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <SYS_TimerStop>
    3a08:	ff 24       	eor	r15, r15
    3a0a:	f3 94       	inc	r15
    3a0c:	2f c1       	rjmp	.+606    	; 0x3c6c <pneIncomingData+0x5d6>
    3a0e:	48 e0       	ldi	r20, 0x08	; 8
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	62 e9       	ldi	r22, 0x92	; 146
    3a14:	72 e0       	ldi	r23, 0x02	; 2
    3a16:	c8 01       	movw	r24, r16
    3a18:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3a1c:	89 2b       	or	r24, r25
    3a1e:	29 f4       	brne	.+10     	; 0x3a2a <pneIncomingData+0x394>
    3a20:	0e 94 97 33 	call	0x672e	; 0x672e <clr_rom_to_rf>
    3a24:	ff 24       	eor	r15, r15
    3a26:	f3 94       	inc	r15
    3a28:	21 c1       	rjmp	.+578    	; 0x3c6c <pneIncomingData+0x5d6>
    3a2a:	48 e0       	ldi	r20, 0x08	; 8
    3a2c:	50 e0       	ldi	r21, 0x00	; 0
    3a2e:	6b e9       	ldi	r22, 0x9B	; 155
    3a30:	72 e0       	ldi	r23, 0x02	; 2
    3a32:	c8 01       	movw	r24, r16
    3a34:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3a38:	89 2b       	or	r24, r25
    3a3a:	29 f4       	brne	.+10     	; 0x3a46 <pneIncomingData+0x3b0>
    3a3c:	0e 94 cc 31 	call	0x6398	; 0x6398 <reboot_to_rf>
    3a40:	ff 24       	eor	r15, r15
    3a42:	f3 94       	inc	r15
    3a44:	13 c1       	rjmp	.+550    	; 0x3c6c <pneIncomingData+0x5d6>
    3a46:	48 e0       	ldi	r20, 0x08	; 8
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	64 ea       	ldi	r22, 0xA4	; 164
    3a4c:	72 e0       	ldi	r23, 0x02	; 2
    3a4e:	c8 01       	movw	r24, r16
    3a50:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3a54:	89 2b       	or	r24, r25
    3a56:	29 f4       	brne	.+10     	; 0x3a62 <pneIncomingData+0x3cc>
    3a58:	0e 94 a0 33 	call	0x6740	; 0x6740 <info_to_rf>
    3a5c:	ff 24       	eor	r15, r15
    3a5e:	f3 94       	inc	r15
    3a60:	05 c1       	rjmp	.+522    	; 0x3c6c <pneIncomingData+0x5d6>
    3a62:	48 e0       	ldi	r20, 0x08	; 8
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	6d ea       	ldi	r22, 0xAD	; 173
    3a68:	72 e0       	ldi	r23, 0x02	; 2
    3a6a:	c8 01       	movw	r24, r16
    3a6c:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3a70:	89 2b       	or	r24, r25
    3a72:	71 f5       	brne	.+92     	; 0x3ad0 <pneIncomingData+0x43a>
    3a74:	f1 e1       	ldi	r31, 0x11	; 17
    3a76:	ff 15       	cp	r31, r15
    3a78:	30 f0       	brcs	.+12     	; 0x3a86 <pneIncomingData+0x3f0>
    3a7a:	84 e0       	ldi	r24, 0x04	; 4
    3a7c:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3a80:	ff 24       	eor	r15, r15
    3a82:	f3 94       	inc	r15
    3a84:	f3 c0       	rjmp	.+486    	; 0x3c6c <pneIncomingData+0x5d6>
    3a86:	6e ef       	ldi	r22, 0xFE	; 254
    3a88:	6f 0d       	add	r22, r15
    3a8a:	c8 01       	movw	r24, r16
    3a8c:	0e 94 76 35 	call	0x6aec	; 0x6aec <crc_verify>
    3a90:	f8 2e       	mov	r15, r24
    3a92:	88 23       	and	r24, r24
    3a94:	b9 f0       	breq	.+46     	; 0x3ac4 <pneIncomingData+0x42e>
    3a96:	ce 01       	movw	r24, r28
    3a98:	01 96       	adiw	r24, 0x01	; 1
    3a9a:	26 e0       	ldi	r18, 0x06	; 6
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	11 92       	st	Z+, r1
    3aa0:	2a 95       	dec	r18
    3aa2:	e9 f7       	brne	.-6      	; 0x3a9e <pneIncomingData+0x408>
    3aa4:	f8 01       	movw	r30, r16
    3aa6:	21 85       	ldd	r18, Z+9	; 0x09
    3aa8:	29 83       	std	Y+1, r18	; 0x01
    3aaa:	22 85       	ldd	r18, Z+10	; 0x0a
    3aac:	2a 83       	std	Y+2, r18	; 0x02
    3aae:	23 85       	ldd	r18, Z+11	; 0x0b
    3ab0:	2b 83       	std	Y+3, r18	; 0x03
    3ab2:	24 85       	ldd	r18, Z+12	; 0x0c
    3ab4:	2c 83       	std	Y+4, r18	; 0x04
    3ab6:	25 85       	ldd	r18, Z+13	; 0x0d
    3ab8:	2d 83       	std	Y+5, r18	; 0x05
    3aba:	26 85       	ldd	r18, Z+14	; 0x0e
    3abc:	2e 83       	std	Y+6, r18	; 0x06
    3abe:	0e 94 c4 33 	call	0x6788	; 0x6788 <change_id_to_rf>
    3ac2:	d4 c0       	rjmp	.+424    	; 0x3c6c <pneIncomingData+0x5d6>
    3ac4:	84 e0       	ldi	r24, 0x04	; 4
    3ac6:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3aca:	ff 24       	eor	r15, r15
    3acc:	f3 94       	inc	r15
    3ace:	ce c0       	rjmp	.+412    	; 0x3c6c <pneIncomingData+0x5d6>
    3ad0:	48 e0       	ldi	r20, 0x08	; 8
    3ad2:	50 e0       	ldi	r21, 0x00	; 0
    3ad4:	66 eb       	ldi	r22, 0xB6	; 182
    3ad6:	72 e0       	ldi	r23, 0x02	; 2
    3ad8:	c8 01       	movw	r24, r16
    3ada:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3ade:	89 2b       	or	r24, r25
    3ae0:	09 f5       	brne	.+66     	; 0x3b24 <pneIncomingData+0x48e>
    3ae2:	fd e0       	ldi	r31, 0x0D	; 13
    3ae4:	ff 15       	cp	r31, r15
    3ae6:	30 f0       	brcs	.+12     	; 0x3af4 <pneIncomingData+0x45e>
    3ae8:	8b e0       	ldi	r24, 0x0B	; 11
    3aea:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3aee:	ff 24       	eor	r15, r15
    3af0:	f3 94       	inc	r15
    3af2:	bc c0       	rjmp	.+376    	; 0x3c6c <pneIncomingData+0x5d6>
    3af4:	6e ef       	ldi	r22, 0xFE	; 254
    3af6:	6f 0d       	add	r22, r15
    3af8:	c8 01       	movw	r24, r16
    3afa:	0e 94 76 35 	call	0x6aec	; 0x6aec <crc_verify>
    3afe:	f8 2e       	mov	r15, r24
    3b00:	88 23       	and	r24, r24
    3b02:	51 f0       	breq	.+20     	; 0x3b18 <pneIncomingData+0x482>
    3b04:	f8 01       	movw	r30, r16
    3b06:	81 85       	ldd	r24, Z+9	; 0x09
    3b08:	89 83       	std	Y+1, r24	; 0x01
    3b0a:	82 85       	ldd	r24, Z+10	; 0x0a
    3b0c:	8a 83       	std	Y+2, r24	; 0x02
    3b0e:	ce 01       	movw	r24, r28
    3b10:	01 96       	adiw	r24, 0x01	; 1
    3b12:	0e 94 ee 33 	call	0x67dc	; 0x67dc <battery_threshold_to_rf>
    3b16:	aa c0       	rjmp	.+340    	; 0x3c6c <pneIncomingData+0x5d6>
    3b18:	84 e0       	ldi	r24, 0x04	; 4
    3b1a:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3b1e:	ff 24       	eor	r15, r15
    3b20:	f3 94       	inc	r15
    3b22:	a4 c0       	rjmp	.+328    	; 0x3c6c <pneIncomingData+0x5d6>
    3b24:	48 e0       	ldi	r20, 0x08	; 8
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	6f eb       	ldi	r22, 0xBF	; 191
    3b2a:	72 e0       	ldi	r23, 0x02	; 2
    3b2c:	c8 01       	movw	r24, r16
    3b2e:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3b32:	89 2b       	or	r24, r25
    3b34:	a1 f4       	brne	.+40     	; 0x3b5e <pneIncomingData+0x4c8>
    3b36:	8f e8       	ldi	r24, 0x8F	; 143
    3b38:	90 e2       	ldi	r25, 0x20	; 32
    3b3a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <SYS_TimerStop>
    3b3e:	84 e0       	ldi	r24, 0x04	; 4
    3b40:	80 93 10 20 	sts	0x2010, r24
    3b44:	10 92 0b 20 	sts	0x200B, r1
    3b48:	10 92 0a 20 	sts	0x200A, r1
    3b4c:	0e 94 85 02 	call	0x50a	; 0x50a <APP_IbLoadSettings_WPS>
    3b50:	80 ea       	ldi	r24, 0xA0	; 160
    3b52:	90 e2       	ldi	r25, 0x20	; 32
    3b54:	0e 94 29 14 	call	0x2852	; 0x2852 <SYS_TimerStart>
    3b58:	ff 24       	eor	r15, r15
    3b5a:	f3 94       	inc	r15
    3b5c:	87 c0       	rjmp	.+270    	; 0x3c6c <pneIncomingData+0x5d6>
    3b5e:	48 e0       	ldi	r20, 0x08	; 8
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	68 ec       	ldi	r22, 0xC8	; 200
    3b64:	72 e0       	ldi	r23, 0x02	; 2
    3b66:	c8 01       	movw	r24, r16
    3b68:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3b6c:	89 2b       	or	r24, r25
    3b6e:	49 f4       	brne	.+18     	; 0x3b82 <pneIncomingData+0x4ec>
    3b70:	80 e2       	ldi	r24, 0x20	; 32
    3b72:	0e 94 04 34 	call	0x6808	; 0x6808 <last_1_log>
    3b76:	80 e2       	ldi	r24, 0x20	; 32
    3b78:	0e 94 50 34 	call	0x68a0	; 0x68a0 <last_2_log>
    3b7c:	ff 24       	eor	r15, r15
    3b7e:	f3 94       	inc	r15
    3b80:	75 c0       	rjmp	.+234    	; 0x3c6c <pneIncomingData+0x5d6>
    3b82:	48 e0       	ldi	r20, 0x08	; 8
    3b84:	50 e0       	ldi	r21, 0x00	; 0
    3b86:	61 ed       	ldi	r22, 0xD1	; 209
    3b88:	72 e0       	ldi	r23, 0x02	; 2
    3b8a:	c8 01       	movw	r24, r16
    3b8c:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3b90:	89 2b       	or	r24, r25
    3b92:	29 f4       	brne	.+10     	; 0x3b9e <pneIncomingData+0x508>
    3b94:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <dump_log_to_rf>
    3b98:	ff 24       	eor	r15, r15
    3b9a:	f3 94       	inc	r15
    3b9c:	67 c0       	rjmp	.+206    	; 0x3c6c <pneIncomingData+0x5d6>
    3b9e:	48 e0       	ldi	r20, 0x08	; 8
    3ba0:	50 e0       	ldi	r21, 0x00	; 0
    3ba2:	6a ed       	ldi	r22, 0xDA	; 218
    3ba4:	72 e0       	ldi	r23, 0x02	; 2
    3ba6:	c8 01       	movw	r24, r16
    3ba8:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3bac:	89 2b       	or	r24, r25
    3bae:	29 f4       	brne	.+10     	; 0x3bba <pneIncomingData+0x524>
    3bb0:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <stress_test>
    3bb4:	ff 24       	eor	r15, r15
    3bb6:	f3 94       	inc	r15
    3bb8:	59 c0       	rjmp	.+178    	; 0x3c6c <pneIncomingData+0x5d6>
    3bba:	48 e0       	ldi	r20, 0x08	; 8
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	63 ee       	ldi	r22, 0xE3	; 227
    3bc0:	72 e0       	ldi	r23, 0x02	; 2
    3bc2:	c8 01       	movw	r24, r16
    3bc4:	0e 94 a0 4c 	call	0x9940	; 0x9940 <memcmp>
    3bc8:	89 2b       	or	r24, r25
    3bca:	09 f0       	breq	.+2      	; 0x3bce <pneIncomingData+0x538>
    3bcc:	45 c0       	rjmp	.+138    	; 0x3c58 <pneIncomingData+0x5c2>
    3bce:	fb e1       	ldi	r31, 0x1B	; 27
    3bd0:	ff 15       	cp	r31, r15
    3bd2:	30 f0       	brcs	.+12     	; 0x3be0 <pneIncomingData+0x54a>
    3bd4:	88 e0       	ldi	r24, 0x08	; 8
    3bd6:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3bda:	ff 24       	eor	r15, r15
    3bdc:	f3 94       	inc	r15
    3bde:	46 c0       	rjmp	.+140    	; 0x3c6c <pneIncomingData+0x5d6>
    3be0:	6e ef       	ldi	r22, 0xFE	; 254
    3be2:	6f 0d       	add	r22, r15
    3be4:	c8 01       	movw	r24, r16
    3be6:	0e 94 76 35 	call	0x6aec	; 0x6aec <crc_verify>
    3bea:	f8 2e       	mov	r15, r24
    3bec:	88 23       	and	r24, r24
    3bee:	71 f1       	breq	.+92     	; 0x3c4c <pneIncomingData+0x5b6>
    3bf0:	d8 01       	movw	r26, r16
    3bf2:	19 96       	adiw	r26, 0x09	; 9
    3bf4:	e8 e3       	ldi	r30, 0x38	; 56
    3bf6:	ff e1       	ldi	r31, 0x1F	; 31
    3bf8:	cf 01       	movw	r24, r30
    3bfa:	80 5f       	subi	r24, 0xF0	; 240
    3bfc:	2d 91       	ld	r18, X+
    3bfe:	91 91       	ld	r25, Z+
    3c00:	29 17       	cp	r18, r25
    3c02:	29 f0       	breq	.+10     	; 0x3c0e <pneIncomingData+0x578>
    3c04:	89 e0       	ldi	r24, 0x09	; 9
    3c06:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3c0a:	f1 2c       	mov	r15, r1
    3c0c:	2f c0       	rjmp	.+94     	; 0x3c6c <pneIncomingData+0x5d6>
    3c0e:	8e 13       	cpse	r24, r30
    3c10:	f5 cf       	rjmp	.-22     	; 0x3bfc <pneIncomingData+0x566>
    3c12:	ce 01       	movw	r24, r28
    3c14:	01 96       	adiw	r24, 0x01	; 1
    3c16:	29 e0       	ldi	r18, 0x09	; 9
    3c18:	fc 01       	movw	r30, r24
    3c1a:	11 92       	st	Z+, r1
    3c1c:	2a 95       	dec	r18
    3c1e:	e9 f7       	brne	.-6      	; 0x3c1a <pneIncomingData+0x584>
    3c20:	f8 01       	movw	r30, r16
    3c22:	23 8d       	ldd	r18, Z+27	; 0x1b
    3c24:	29 83       	std	Y+1, r18	; 0x01
    3c26:	24 8d       	ldd	r18, Z+28	; 0x1c
    3c28:	2a 83       	std	Y+2, r18	; 0x02
    3c2a:	25 8d       	ldd	r18, Z+29	; 0x1d
    3c2c:	2b 83       	std	Y+3, r18	; 0x03
    3c2e:	26 8d       	ldd	r18, Z+30	; 0x1e
    3c30:	2c 83       	std	Y+4, r18	; 0x04
    3c32:	27 8d       	ldd	r18, Z+31	; 0x1f
    3c34:	2d 83       	std	Y+5, r18	; 0x05
    3c36:	20 a1       	ldd	r18, Z+32	; 0x20
    3c38:	2e 83       	std	Y+6, r18	; 0x06
    3c3a:	0e 94 cd 31 	call	0x639a	; 0x639a <WPS_pairing>
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	80 93 9c 20 	sts	0x209C, r24
    3c44:	88 ee       	ldi	r24, 0xE8	; 232
    3c46:	93 e0       	ldi	r25, 0x03	; 3
    3c48:	7e d1       	rcall	.+764    	; 0x3f46 <pne_delayms>
    3c4a:	10 c0       	rjmp	.+32     	; 0x3c6c <pneIncomingData+0x5d6>
    3c4c:	8a e0       	ldi	r24, 0x0A	; 10
    3c4e:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3c52:	ff 24       	eor	r15, r15
    3c54:	f3 94       	inc	r15
    3c56:	0a c0       	rjmp	.+20     	; 0x3c6c <pneIncomingData+0x5d6>
    3c58:	8b e0       	ldi	r24, 0x0B	; 11
    3c5a:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <error_to_rf>
    3c5e:	ff 24       	eor	r15, r15
    3c60:	f3 94       	inc	r15
    3c62:	04 c0       	rjmp	.+8      	; 0x3c6c <pneIncomingData+0x5d6>
    3c64:	f1 2c       	mov	r15, r1
    3c66:	02 c0       	rjmp	.+4      	; 0x3c6c <pneIncomingData+0x5d6>
    3c68:	ff 24       	eor	r15, r15
    3c6a:	f3 94       	inc	r15
    3c6c:	8f 2d       	mov	r24, r15
    3c6e:	29 96       	adiw	r28, 0x09	; 9
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	bf 90       	pop	r11
    3c86:	af 90       	pop	r10
    3c88:	9f 90       	pop	r9
    3c8a:	8f 90       	pop	r8
    3c8c:	08 95       	ret

00003c8e <getUID>:

/*************************************************************************//**
*****************************************************************************/

void getUID()
{
    3c8e:	0f 93       	push	r16
    3c90:	cf 93       	push	r28
    3c92:	df 93       	push	r29
    3c94:	1f 92       	push	r1
    3c96:	1f 92       	push	r1
    3c98:	cd b7       	in	r28, 0x3d	; 61
    3c9a:	de b7       	in	r29, 0x3e	; 62
	uint8_t serial_addr[2] = {0x00, 0x08};
    3c9c:	19 82       	std	Y+1, r1	; 0x01
    3c9e:	88 e0       	ldi	r24, 0x08	; 8
    3ca0:	8a 83       	std	Y+2, r24	; 0x02
		
	pne_APP_TwiInit(0xBF);
    3ca2:	8f eb       	ldi	r24, 0xBF	; 191
    3ca4:	64 d1       	rcall	.+712    	; 0x3f6e <pne_APP_TwiInit>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, UID, 16);
    3ca6:	00 e1       	ldi	r16, 0x10	; 16
    3ca8:	28 e3       	ldi	r18, 0x38	; 56
    3caa:	3f e1       	ldi	r19, 0x1F	; 31
    3cac:	4f eb       	ldi	r20, 0xBF	; 191
    3cae:	62 e0       	ldi	r22, 0x02	; 2
    3cb0:	ce 01       	movw	r24, r28
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	dd d1       	rcall	.+954    	; 0x4070 <pne_APP_TwiReceive>
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	df 91       	pop	r29
    3cbc:	cf 91       	pop	r28
    3cbe:	0f 91       	pop	r16
    3cc0:	08 95       	ret

00003cc2 <PNEWELSAppInit>:
	gpio_in(INPUT_LED_DRV2);
	gpio_pullup(INPUT_LED_DRV2);
}

void PNEWELSAppInit(void)
{
    3cc2:	0f 93       	push	r16
    3cc4:	1f 93       	push	r17
    3cc6:	cf 93       	push	r28
	initialize_flag = 1;
    3cc8:	c1 e0       	ldi	r28, 0x01	; 1
    3cca:	c0 93 23 20 	sts	0x2023, r28
	installation_flag = 1;
    3cce:	c0 93 4d 20 	sts	0x204D, r28
	data_update_flag = 1;
    3cd2:	c0 93 e3 1f 	sts	0x1FE3, r28
	status_report_flag = 1;
    3cd6:	c0 93 49 20 	sts	0x2049, r28
	interrupt_flag = 1;
    3cda:	c0 93 bb 20 	sts	0x20BB, r28
	debouncing_delay = 0;
    3cde:	10 92 20 20 	sts	0x2020, r1
	LED_flag = 0;
    3ce2:	10 92 b5 1f 	sts	0x1FB5, r1
	wps_flag = 0;
    3ce6:	10 92 06 20 	sts	0x2006, r1
	do_once = 0;
    3cea:	10 92 b0 20 	sts	0x20B0, r1
	operation_seq = off_emergency_light;
    3cee:	c0 93 10 20 	sts	0x2010, r28
	current_state_emergency_light = 0;
    3cf2:	10 92 c1 20 	sts	0x20C1, r1
	memory_address_incr = 0;
    3cf6:	10 92 c3 20 	sts	0x20C3, r1
    3cfa:	10 92 c2 20 	sts	0x20C2, r1
	error_count_status = 0;
    3cfe:	10 92 24 20 	sts	0x2024, r1
	error_count_wps = 0;
    3d02:	10 92 0c 20 	sts	0x200C, r1
	wps_send_flag = 1;
    3d06:	c0 93 e2 1f 	sts	0x1FE2, r28
	battery_low_once = 0;
    3d0a:	10 92 8d 20 	sts	0x208D, r1
	WPS_STATUS = WPS_init;
    3d0e:	10 92 9c 20 	sts	0x209C, r1
	rf_flag = 0;
    3d12:	10 92 3b 20 	sts	0x203B, r1
	countdown = 0;
    3d16:	10 92 22 20 	sts	0x2022, r1
    3d1a:	10 92 21 20 	sts	0x2021, r1
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    3d1e:	87 e8       	ldi	r24, 0x87	; 135
    3d20:	80 93 7a 00 	sts	0x007A, r24
	//do_once_stop_wps_timer = 0;
	
	adc_init(ADC_PRESCALER_DIV128);
	timer2_init();
    3d24:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <timer2_init>
	memoryCounter_init();
    3d28:	9c d2       	rcall	.+1336   	; 0x4262 <memoryCounter_init>
		.baudrate = USART_SERIAL_EXAMPLE_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    3d2a:	64 e0       	ldi	r22, 0x04	; 4
    3d2c:	72 e0       	ldi	r23, 0x02	; 2
    3d2e:	88 ec       	ldi	r24, 0xC8	; 200
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	0e 94 8d 06 	call	0xd1a	; 0xd1a <usart_init_rs232>
	
	/*Software timer declaration*/
	appLEDTimer.interval = STANDBY_TIMER;
    3d36:	ee e4       	ldi	r30, 0x4E	; 78
    3d38:	f0 e2       	ldi	r31, 0x20	; 32
    3d3a:	84 ef       	ldi	r24, 0xF4	; 244
    3d3c:	91 e0       	ldi	r25, 0x01	; 1
    3d3e:	a0 e0       	ldi	r26, 0x00	; 0
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	86 83       	std	Z+6, r24	; 0x06
    3d44:	97 83       	std	Z+7, r25	; 0x07
    3d46:	a0 87       	std	Z+8, r26	; 0x08
    3d48:	b1 87       	std	Z+9, r27	; 0x09
	appLEDTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3d4a:	12 86       	std	Z+10, r1	; 0x0a
	appLEDTimer.handler = appLEDTimerHandler;
    3d4c:	85 ee       	ldi	r24, 0xE5	; 229
    3d4e:	94 e1       	ldi	r25, 0x14	; 20
    3d50:	94 87       	std	Z+12, r25	; 0x0c
    3d52:	83 87       	std	Z+11, r24	; 0x0b
	SYS_TimerStart(&appLEDTimer);
    3d54:	cf 01       	movw	r24, r30
    3d56:	0e 94 29 14 	call	0x2852	; 0x2852 <SYS_TimerStart>
	
	appLEDIntervalTimer.interval = STANDBY_INTERVAL_TIMER;
    3d5a:	e8 e2       	ldi	r30, 0x28	; 40
    3d5c:	f0 e2       	ldi	r31, 0x20	; 32
    3d5e:	88 ee       	ldi	r24, 0xE8	; 232
    3d60:	93 e0       	ldi	r25, 0x03	; 3
    3d62:	a0 e0       	ldi	r26, 0x00	; 0
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	86 83       	std	Z+6, r24	; 0x06
    3d68:	97 83       	std	Z+7, r25	; 0x07
    3d6a:	a0 87       	std	Z+8, r26	; 0x08
    3d6c:	b1 87       	std	Z+9, r27	; 0x09
	appLEDIntervalTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3d6e:	12 86       	std	Z+10, r1	; 0x0a
	appLEDIntervalTimer.handler = appLEDIntervalTimerHandler;
    3d70:	8d ea       	ldi	r24, 0xAD	; 173
    3d72:	94 e1       	ldi	r25, 0x14	; 20
    3d74:	94 87       	std	Z+12, r25	; 0x0c
    3d76:	83 87       	std	Z+11, r24	; 0x0b
	
	error_timer_status.interval = rand()%400+100;
    3d78:	0e 94 92 4c 	call	0x9924	; 0x9924 <rand>
    3d7c:	e2 e1       	ldi	r30, 0x12	; 18
    3d7e:	f0 e2       	ldi	r31, 0x20	; 32
    3d80:	00 e9       	ldi	r16, 0x90	; 144
    3d82:	11 e0       	ldi	r17, 0x01	; 1
    3d84:	b8 01       	movw	r22, r16
    3d86:	0e 94 d5 4b 	call	0x97aa	; 0x97aa <__divmodhi4>
    3d8a:	8c 59       	subi	r24, 0x9C	; 156
    3d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8e:	09 2e       	mov	r0, r25
    3d90:	00 0c       	add	r0, r0
    3d92:	aa 0b       	sbc	r26, r26
    3d94:	bb 0b       	sbc	r27, r27
    3d96:	86 83       	std	Z+6, r24	; 0x06
    3d98:	97 83       	std	Z+7, r25	; 0x07
    3d9a:	a0 87       	std	Z+8, r26	; 0x08
    3d9c:	b1 87       	std	Z+9, r27	; 0x09
	error_timer_status.mode = SYS_TIMER_INTERVAL_MODE;
    3d9e:	12 86       	std	Z+10, r1	; 0x0a
	error_timer_status.handler = errorTimerStatusHandler;
    3da0:	8f e9       	ldi	r24, 0x9F	; 159
    3da2:	94 e1       	ldi	r25, 0x14	; 20
    3da4:	94 87       	std	Z+12, r25	; 0x0c
    3da6:	83 87       	std	Z+11, r24	; 0x0b
	
	error_timer_wps.interval = rand()%400+100;
    3da8:	0e 94 92 4c 	call	0x9924	; 0x9924 <rand>
    3dac:	e7 ee       	ldi	r30, 0xE7	; 231
    3dae:	ff e1       	ldi	r31, 0x1F	; 31
    3db0:	b8 01       	movw	r22, r16
    3db2:	0e 94 d5 4b 	call	0x97aa	; 0x97aa <__divmodhi4>
    3db6:	8c 59       	subi	r24, 0x9C	; 156
    3db8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dba:	09 2e       	mov	r0, r25
    3dbc:	00 0c       	add	r0, r0
    3dbe:	aa 0b       	sbc	r26, r26
    3dc0:	bb 0b       	sbc	r27, r27
    3dc2:	86 83       	std	Z+6, r24	; 0x06
    3dc4:	97 83       	std	Z+7, r25	; 0x07
    3dc6:	a0 87       	std	Z+8, r26	; 0x08
    3dc8:	b1 87       	std	Z+9, r27	; 0x09
	error_timer_wps.mode = SYS_TIMER_INTERVAL_MODE;
    3dca:	12 86       	std	Z+10, r1	; 0x0a
	error_timer_wps.handler = errorTimerWpsHandler;
    3dcc:	8d ed       	ldi	r24, 0xDD	; 221
    3dce:	94 e1       	ldi	r25, 0x14	; 20
    3dd0:	94 87       	std	Z+12, r25	; 0x0c
    3dd2:	83 87       	std	Z+11, r24	; 0x0b
	/*SYS_TimerStart(&error_timer_wps);*/
	
	appWPSRequestTimer.interval = WPS_REQUEST_TIMER;
    3dd4:	e0 ea       	ldi	r30, 0xA0	; 160
    3dd6:	f0 e2       	ldi	r31, 0x20	; 32
    3dd8:	88 e8       	ldi	r24, 0x88	; 136
    3dda:	93 e1       	ldi	r25, 0x13	; 19
    3ddc:	a0 e0       	ldi	r26, 0x00	; 0
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	86 83       	std	Z+6, r24	; 0x06
    3de2:	97 83       	std	Z+7, r25	; 0x07
    3de4:	a0 87       	std	Z+8, r26	; 0x08
    3de6:	b1 87       	std	Z+9, r27	; 0x09
	appWPSRequestTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3de8:	c2 87       	std	Z+10, r28	; 0x0a
	appWPSRequestTimer.handler = appWPSRequestTimerHandler;
    3dea:	28 ed       	ldi	r18, 0xD8	; 216
    3dec:	34 e1       	ldi	r19, 0x14	; 20
    3dee:	34 87       	std	Z+12, r19	; 0x0c
    3df0:	23 87       	std	Z+11, r18	; 0x0b
	/*SYS_TimerStart(&appWPSRequestTimer);*/
	
	appWPSActivationTimer.interval = WPS_REQUEST_TIMER;
    3df2:	ef e8       	ldi	r30, 0x8F	; 143
    3df4:	f0 e2       	ldi	r31, 0x20	; 32
    3df6:	86 83       	std	Z+6, r24	; 0x06
    3df8:	97 83       	std	Z+7, r25	; 0x07
    3dfa:	a0 87       	std	Z+8, r26	; 0x08
    3dfc:	b1 87       	std	Z+9, r27	; 0x09
	appWPSActivationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3dfe:	12 86       	std	Z+10, r1	; 0x0a
	appWPSActivationTimer.handler = appWPSActivationTimerHandler;
    3e00:	81 eb       	ldi	r24, 0xB1	; 177
    3e02:	94 e1       	ldi	r25, 0x14	; 20
    3e04:	94 87       	std	Z+12, r25	; 0x0c
    3e06:	83 87       	std	Z+11, r24	; 0x0b
	
	pneBatteryAverage_init(); //get average battery reading
    3e08:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <pneBatteryAverage_init>
	getUID(); //retrieve UID
    3e0c:	40 df       	rcall	.-384    	; 0x3c8e <getUID>
	
	/*Factory Status*/
	if(gpio_read(FACTORY_BTN) ? 0 : 1)
    3e0e:	60 91 4a 20 	lds	r22, 0x204A
    3e12:	70 91 4b 20 	lds	r23, 0x204B
    3e16:	80 91 4c 20 	lds	r24, 0x204C
    3e1a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3e1e:	81 11       	cpse	r24, r1
    3e20:	08 c0       	rjmp	.+16     	; 0x3e32 <PNEWELSAppInit+0x170>
	{
		PNEWELS_Buffer.IsFactory = STATUS_FACTORY_OK;
    3e22:	ea eb       	ldi	r30, 0xBA	; 186
    3e24:	ff e1       	ldi	r31, 0x1F	; 31
    3e26:	17 82       	std	Z+7, r1	; 0x07
		PNEWELS_Buffer.mode_Next = MODE_FACTORY;
    3e28:	86 e0       	ldi	r24, 0x06	; 6
    3e2a:	83 8b       	std	Z+19, r24	; 0x13
		factory_mode();
    3e2c:	0e 94 31 30 	call	0x6062	; 0x6062 <factory_mode>
    3e30:	03 c0       	rjmp	.+6      	; 0x3e38 <PNEWELSAppInit+0x176>
	}
	else
	{
		PNEWELS_Buffer.IsFactory = STATUS_FACTORY_NOK;
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	80 93 c1 1f 	sts	0x1FC1, r24
	}
}
    3e38:	cf 91       	pop	r28
    3e3a:	1f 91       	pop	r17
    3e3c:	0f 91       	pop	r16
    3e3e:	08 95       	ret

00003e40 <systemFlag_check>:
	//PNEWELSE2promWrite(0xAE, 'E', 01, 41, 0xFF); //reset flag
}

void systemFlag_check()
{
	if(device_flag & (1<<AC_FLAG))
    3e40:	80 91 b6 20 	lds	r24, 0x20B6
    3e44:	81 ff       	sbrs	r24, 1
    3e46:	0e c0       	rjmp	.+28     	; 0x3e64 <systemFlag_check+0x24>
	{
		operation_seq = wps_state;
    3e48:	84 e0       	ldi	r24, 0x04	; 4
    3e4a:	80 93 10 20 	sts	0x2010, r24
		reboot_countdown = 0;
    3e4e:	10 92 0b 20 	sts	0x200B, r1
    3e52:	10 92 0a 20 	sts	0x200A, r1
		APP_IbLoadSettings_WPS(); //load temporary setting
    3e56:	0e 94 85 02 	call	0x50a	; 0x50a <APP_IbLoadSettings_WPS>
		SYS_TimerStart(&appWPSRequestTimer); //start requesting data
    3e5a:	80 ea       	ldi	r24, 0xA0	; 160
    3e5c:	90 e2       	ldi	r25, 0x20	; 32
    3e5e:	0c 94 29 14 	jmp	0x2852	; 0x2852 <SYS_TimerStart>
    3e62:	08 95       	ret
	}
	else operation_seq = off_emergency_light;
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	80 93 10 20 	sts	0x2010, r24
    3e6a:	08 95       	ret

00003e6c <write_factory_default>:
	//device_flag = (device_flag & ~(1<<AC_FLAG)); //write the flag
	//writeE2prom(FLAG,device_flag);
}

void write_factory_default(uint16_t address, uint8_t factory_default)
{
    3e6c:	0f 93       	push	r16
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, factory_default); //set device address default value (LSB)
    3e6e:	06 2f       	mov	r16, r22
    3e70:	29 2f       	mov	r18, r25
    3e72:	48 2f       	mov	r20, r24
    3e74:	65 e4       	ldi	r22, 0x45	; 69
    3e76:	8e ea       	ldi	r24, 0xAE	; 174
    3e78:	53 d1       	rcall	.+678    	; 0x4120 <PNEWELSE2promWrite>
	pne_delayms(10);
    3e7a:	8a e0       	ldi	r24, 0x0A	; 10
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	63 d0       	rcall	.+198    	; 0x3f46 <pne_delayms>
	
    3e80:	0f 91       	pop	r16
    3e82:	08 95       	ret

00003e84 <factory_initialization>:
#include "memoryConfig.h"
#include "appIb.h"

void factory_initialization()
{
	device_flag = readE2prom(FLAG); //read flag form EEPROM
    3e84:	82 e0       	ldi	r24, 0x02	; 2
    3e86:	90 e1       	ldi	r25, 0x10	; 16
    3e88:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <readE2prom>
    3e8c:	80 93 b6 20 	sts	0x20B6, r24
	batt_low = readE2prom(BATTERY_LOW);
    3e90:	84 e0       	ldi	r24, 0x04	; 4
    3e92:	90 e1       	ldi	r25, 0x10	; 16
    3e94:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <readE2prom>
    3e98:	80 93 b1 20 	sts	0x20B1, r24
	batt_max = readE2prom(BATTERY_MAX);
    3e9c:	83 e0       	ldi	r24, 0x03	; 3
    3e9e:	90 e1       	ldi	r25, 0x10	; 16
    3ea0:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <readE2prom>
    3ea4:	80 93 b4 1f 	sts	0x1FB4, r24
	if(device_flag & (1<<FACTORY_FLAG))  //check whether this is the first time boot, or hard reset was commenced.
    3ea8:	80 91 b6 20 	lds	r24, 0x20B6
    3eac:	80 ff       	sbrs	r24, 0
    3eae:	2e c0       	rjmp	.+92     	; 0x3f0c <factory_initialization+0x88>
	{
		write_factory_default(DEVICE_ADDRESS_L,ADDRESS_DEFAULT_L);
    3eb0:	61 e0       	ldi	r22, 0x01	; 1
    3eb2:	8c ef       	ldi	r24, 0xFC	; 252
    3eb4:	9f e0       	ldi	r25, 0x0F	; 15
    3eb6:	da df       	rcall	.-76     	; 0x3e6c <write_factory_default>
		write_factory_default(DEVICE_ADDRESS_H,ADDRESS_DEFAULT_H); //set device address default value (MSB)
    3eb8:	60 e0       	ldi	r22, 0x00	; 0
    3eba:	8d ef       	ldi	r24, 0xFD	; 253
    3ebc:	9f e0       	ldi	r25, 0x0F	; 15
    3ebe:	d6 df       	rcall	.-84     	; 0x3e6c <write_factory_default>
		
		write_factory_default(DEVICE_CHANNEL_L,CHANNEL_DEFAULT_L); //set device channel default value (LSB)
    3ec0:	60 e1       	ldi	r22, 0x10	; 16
    3ec2:	8e ef       	ldi	r24, 0xFE	; 254
    3ec4:	9f e0       	ldi	r25, 0x0F	; 15
    3ec6:	d2 df       	rcall	.-92     	; 0x3e6c <write_factory_default>
		write_factory_default(DEVICE_CHANNEL_H,CHANNEL_DEFAULT_H); //set device channel default value (MSB)
    3ec8:	60 e0       	ldi	r22, 0x00	; 0
    3eca:	8f ef       	ldi	r24, 0xFF	; 255
    3ecc:	9f e0       	ldi	r25, 0x0F	; 15
    3ece:	ce df       	rcall	.-100    	; 0x3e6c <write_factory_default>
		
		write_factory_default(DEVICE_PAN_L,PAN_DEFAULT_L); //set device PAN default value (LSB)
    3ed0:	64 e3       	ldi	r22, 0x34	; 52
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	90 e1       	ldi	r25, 0x10	; 16
    3ed6:	ca df       	rcall	.-108    	; 0x3e6c <write_factory_default>
		write_factory_default(DEVICE_PAN_H,PAN_DEFAULT_H); //set device PAN default value (MSB)
    3ed8:	62 e1       	ldi	r22, 0x12	; 18
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	90 e1       	ldi	r25, 0x10	; 16
    3ede:	c6 df       	rcall	.-116    	; 0x3e6c <write_factory_default>
		
		write_factory_default(BATTERY_MAX,BATTERY_MAX_THRESH);
    3ee0:	6f e8       	ldi	r22, 0x8F	; 143
    3ee2:	83 e0       	ldi	r24, 0x03	; 3
    3ee4:	90 e1       	ldi	r25, 0x10	; 16
    3ee6:	c2 df       	rcall	.-124    	; 0x3e6c <write_factory_default>
		write_factory_default(BATTERY_LOW,BATTERY_LOW_THRESH);
    3ee8:	66 e6       	ldi	r22, 0x66	; 102
    3eea:	84 e0       	ldi	r24, 0x04	; 4
    3eec:	90 e1       	ldi	r25, 0x10	; 16
    3eee:	be df       	rcall	.-132    	; 0x3e6c <write_factory_default>
		
		clre2prom(); //wipe all log file
    3ef0:	9c d1       	rcall	.+824    	; 0x422a <clre2prom>
//		write_factory_default(GROUP_ID, GROUP_DEFAULT); //set Group ID default Value
//		write_factory_default(ZONE_ID, ZONE_DEFAULT); //set Zone ID default Value
//		write_factory_default(NODE_ID, NODE_DEFAULT); //set Node ID default value
		
		device_flag = (device_flag & ~(1<<FACTORY_FLAG));
    3ef2:	80 91 b6 20 	lds	r24, 0x20B6
    3ef6:	8e 7f       	andi	r24, 0xFE	; 254
    3ef8:	80 93 b6 20 	sts	0x20B6, r24
		
		write_factory_default(FLAG, device_flag); //set Factory flag
    3efc:	60 91 b6 20 	lds	r22, 0x20B6
    3f00:	82 e0       	ldi	r24, 0x02	; 2
    3f02:	90 e1       	ldi	r25, 0x10	; 16
    3f04:	b3 df       	rcall	.-154    	; 0x3e6c <write_factory_default>
		pne_delayms(10);
    3f06:	8a e0       	ldi	r24, 0x0A	; 10
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	1d c0       	rjmp	.+58     	; 0x3f46 <pne_delayms>
    3f0c:	08 95       	ret

00003f0e <rf_init>:
#include <string.h>
#include "pne_appDelay.h"
#include "pne_rf_processor.h"

uint16_t rf_init(uint16_t address, uint16_t app_type)
{
    3f0e:	1f 93       	push	r17
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	d8 2f       	mov	r29, r24
    3f16:	19 2f       	mov	r17, r25
	uint8_t cache[2] = {0};
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
		
	cache[0] = PNEWELSE2promRead(0xAF,'E',memory_address_low+1,memory_address_high);
    3f18:	41 e0       	ldi	r20, 0x01	; 1
    3f1a:	48 0f       	add	r20, r24
    3f1c:	29 2f       	mov	r18, r25
    3f1e:	65 e4       	ldi	r22, 0x45	; 69
    3f20:	8f ea       	ldi	r24, 0xAF	; 175
    3f22:	29 d1       	rcall	.+594    	; 0x4176 <PNEWELSE2promRead>
    3f24:	c8 2f       	mov	r28, r24
	cache[1] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    3f26:	21 2f       	mov	r18, r17
    3f28:	4d 2f       	mov	r20, r29
    3f2a:	65 e4       	ldi	r22, 0x45	; 69
    3f2c:	8f ea       	ldi	r24, 0xAF	; 175
    3f2e:	23 d1       	rcall	.+582    	; 0x4176 <PNEWELSE2promRead>
	app_type = cache[0];
    3f30:	2c 2f       	mov	r18, r28
    3f32:	30 e0       	ldi	r19, 0x00	; 0
	app_type = app_type << 8;
    3f34:	32 2f       	mov	r19, r18
    3f36:	22 27       	eor	r18, r18
	app_type |= cache[1];
	return app_type;
    3f38:	a9 01       	movw	r20, r18
    3f3a:	48 2b       	or	r20, r24
    3f3c:	ca 01       	movw	r24, r20
    3f3e:	df 91       	pop	r29
    3f40:	cf 91       	pop	r28
    3f42:	1f 91       	pop	r17
    3f44:	08 95       	ret

00003f46 <pne_delayms>:

#include "pne_appDelay.h"

void pne_delayms(uint16_t milisecond)
{
	uint16_t microsecond = milisecond * 1000;
    3f46:	28 ee       	ldi	r18, 0xE8	; 232
    3f48:	33 e0       	ldi	r19, 0x03	; 3
    3f4a:	ac 01       	movw	r20, r24
    3f4c:	42 9f       	mul	r20, r18
    3f4e:	c0 01       	movw	r24, r0
    3f50:	43 9f       	mul	r20, r19
    3f52:	90 0d       	add	r25, r0
    3f54:	52 9f       	mul	r21, r18
    3f56:	90 0d       	add	r25, r0
    3f58:	11 24       	eor	r1, r1
	
	for (int i=0; i<microsecond; i++)
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	39 f0       	breq	.+14     	; 0x3f6c <pne_delayms+0x26>
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	2f 5f       	subi	r18, 0xFF	; 255
    3f64:	3f 4f       	sbci	r19, 0xFF	; 255
    3f66:	28 17       	cp	r18, r24
    3f68:	39 07       	cpc	r19, r25
    3f6a:	d9 f7       	brne	.-10     	; 0x3f62 <pne_delayms+0x1c>
    3f6c:	08 95       	ret

00003f6e <pne_APP_TwiInit>:
#include "memoryConfig.h"


//Functions
void pne_APP_TwiInit(uint8_t slave_bus_address)
{	
    3f6e:	0f 93       	push	r16
    3f70:	1f 93       	push	r17
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	00 d0       	rcall	.+0      	; 0x3f78 <pne_APP_TwiInit+0xa>
    3f78:	00 d0       	rcall	.+0      	; 0x3f7a <pne_APP_TwiInit+0xc>
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
	//TWI Declaration
	twi_master_options_t opt =
    3f7e:	be 01       	movw	r22, r28
    3f80:	6f 5f       	subi	r22, 0xFF	; 255
    3f82:	7f 4f       	sbci	r23, 0xFF	; 255
    3f84:	96 e0       	ldi	r25, 0x06	; 6
    3f86:	fb 01       	movw	r30, r22
    3f88:	11 92       	st	Z+, r1
    3f8a:	9a 95       	dec	r25
    3f8c:	e9 f7       	brne	.-6      	; 0x3f88 <pne_APP_TwiInit+0x1a>
    3f8e:	08 e4       	ldi	r16, 0x48	; 72
    3f90:	18 ee       	ldi	r17, 0xE8	; 232
    3f92:	21 e0       	ldi	r18, 0x01	; 1
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	09 83       	std	Y+1, r16	; 0x01
    3f98:	1a 83       	std	Y+2, r17	; 0x02
    3f9a:	2b 83       	std	Y+3, r18	; 0x03
    3f9c:	3c 83       	std	Y+4, r19	; 0x04
    3f9e:	8e 83       	std	Y+6, r24	; 0x06
	{
		.speed = TWI_SPEED_HZ,
		.chip  = slave_bus_address,
	};
	opt .baud_reg = TWI_CLOCK_RATE(F_CPU, opt.speed);
    3fa0:	88 e1       	ldi	r24, 0x18	; 24
    3fa2:	8d 83       	std	Y+5, r24	; 0x05
	twi_master_init(TWI_EXAMPLE,&opt);
    3fa4:	88 eb       	ldi	r24, 0xB8	; 184
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	0e 94 12 04 	call	0x824	; 0x824 <twi_master_init>
}
    3fac:	26 96       	adiw	r28, 0x06	; 6
    3fae:	0f b6       	in	r0, 0x3f	; 63
    3fb0:	f8 94       	cli
    3fb2:	de bf       	out	0x3e, r29	; 62
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	cd bf       	out	0x3d, r28	; 61
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	08 95       	ret

00003fc2 <pne_APP_TwiSend>:

AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
    3fc8:	1f 93       	push	r17
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    3fd2:	2a 97       	sbiw	r28, 0x0a	; 10
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	f8 94       	cli
    3fd8:	de bf       	out	0x3e, r29	; 62
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	f9 01       	movw	r30, r18
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_WRITE_SUCCESS;
	
	twi_package_t temperature_packet =
    3fe0:	9e 01       	movw	r18, r28
    3fe2:	2f 5f       	subi	r18, 0xFF	; 255
    3fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe6:	79 01       	movw	r14, r18
    3fe8:	2a e0       	ldi	r18, 0x0A	; 10
    3fea:	d7 01       	movw	r26, r14
    3fec:	1d 92       	st	X+, r1
    3fee:	2a 95       	dec	r18
    3ff0:	e9 f7       	brne	.-6      	; 0x3fec <pne_APP_TwiSend+0x2a>
    3ff2:	49 83       	std	Y+1, r20	; 0x01
	{
		.addr[0]      = slave_mem_addr[0],               /* TWI slave memory address data */
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	3c 91       	ld	r19, X
AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_WRITE_SUCCESS;
	
	twi_package_t temperature_packet =
    3ff8:	3a 83       	std	Y+2, r19	; 0x02
    3ffa:	46 2f       	mov	r20, r22
    3ffc:	50 e0       	ldi	r21, 0x00	; 0
    3ffe:	5e 83       	std	Y+6, r21	; 0x06
    4000:	4d 83       	std	Y+5, r20	; 0x05
    4002:	f8 87       	std	Y+8, r31	; 0x08
    4004:	ef 83       	std	Y+7, r30	; 0x07
    4006:	10 e0       	ldi	r17, 0x00	; 0
    4008:	1a 87       	std	Y+10, r17	; 0x0a
    400a:	09 87       	std	Y+9, r16	; 0x09
		.chip         = slave_bus_address,               /* TWI slave bus address */
		.buffer       = (void *)test_pattern,            /* transfer data source buffer */
		.length       = test_pattern_length              /* transfer data size (bytes) */
	};
	
	if (slave_mem_addr_length == 1)
    400c:	61 30       	cpi	r22, 0x01	; 1
    400e:	c9 f0       	breq	.+50     	; 0x4042 <pne_APP_TwiSend+0x80>
	{
		temperature_packet.addr[0] = slave_mem_addr[0];
	}
	else if (slave_mem_addr_length == 2)
    4010:	62 30       	cpi	r22, 0x02	; 2
    4012:	29 f4       	brne	.+10     	; 0x401e <pne_APP_TwiSend+0x5c>
	{
		temperature_packet.addr[0] = slave_mem_addr[1];
    4014:	11 96       	adiw	r26, 0x01	; 1
    4016:	8c 91       	ld	r24, X
    4018:	8a 83       	std	Y+2, r24	; 0x02
		temperature_packet.addr[1] = slave_mem_addr[0];
    401a:	3b 83       	std	Y+3, r19	; 0x03
    401c:	12 c0       	rjmp	.+36     	; 0x4042 <pne_APP_TwiSend+0x80>
	}
	else if (slave_mem_addr_length == 3)
    401e:	63 30       	cpi	r22, 0x03	; 3
    4020:	81 f4       	brne	.+32     	; 0x4042 <pne_APP_TwiSend+0x80>
	{
		temperature_packet.addr[0] = slave_mem_addr[0];
		temperature_packet.addr[1] = slave_mem_addr[1];
    4022:	fc 01       	movw	r30, r24
    4024:	21 81       	ldd	r18, Z+1	; 0x01
    4026:	2b 83       	std	Y+3, r18	; 0x03
		temperature_packet.addr[2] = slave_mem_addr[2];
    4028:	82 81       	ldd	r24, Z+2	; 0x02
    402a:	8c 83       	std	Y+4, r24	; 0x04
    402c:	0a c0       	rjmp	.+20     	; 0x4042 <pne_APP_TwiSend+0x80>
	}
	
	while(twi_master_write(TWI_EXAMPLE,&temperature_packet) != TWI_SUCCESS)
	{
		pne_delayms(1);
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	89 df       	rcall	.-238    	; 0x3f46 <pne_delayms>
    4034:	11 50       	subi	r17, 0x01	; 1
		count++;
		if (count == 10)
    4036:	31 f4       	brne	.+12     	; 0x4044 <pne_APP_TwiSend+0x82>
		{
			count = 0;
			status = APP_PNEWELS_TWI_WRITE_FAIL;
			fatal_error_to_rf(twi_fatal_error);
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <fatal_error_to_rf>
		pne_delayms(1);
		count++;
		if (count == 10)
		{
			count = 0;
			status = APP_PNEWELS_TWI_WRITE_FAIL;
    403e:	81 e0       	ldi	r24, 0x01	; 1
			fatal_error_to_rf(twi_fatal_error);
			break;
    4040:	0a c0       	rjmp	.+20     	; 0x4056 <pne_APP_TwiSend+0x94>
	opt .baud_reg = TWI_CLOCK_RATE(F_CPU, opt.speed);
	twi_master_init(TWI_EXAMPLE,&opt);
}

AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
    4042:	1a e0       	ldi	r17, 0x0A	; 10
		temperature_packet.addr[0] = slave_mem_addr[0];
		temperature_packet.addr[1] = slave_mem_addr[1];
		temperature_packet.addr[2] = slave_mem_addr[2];
	}
	
	while(twi_master_write(TWI_EXAMPLE,&temperature_packet) != TWI_SUCCESS)
    4044:	be 01       	movw	r22, r28
    4046:	6f 5f       	subi	r22, 0xFF	; 255
    4048:	7f 4f       	sbci	r23, 0xFF	; 255
    404a:	88 eb       	ldi	r24, 0xB8	; 184
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	0e 94 b1 03 	call	0x762	; 0x762 <twi_master_write>
    4052:	81 11       	cpse	r24, r1
    4054:	ec cf       	rjmp	.-40     	; 0x402e <pne_APP_TwiSend+0x6c>
			break;
		}
	}
	
	return status;
}
    4056:	2a 96       	adiw	r28, 0x0a	; 10
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	1f 91       	pop	r17
    4068:	0f 91       	pop	r16
    406a:	ff 90       	pop	r15
    406c:	ef 90       	pop	r14
    406e:	08 95       	ret

00004070 <pne_APP_TwiReceive>:

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
    4070:	ef 92       	push	r14
    4072:	ff 92       	push	r15
    4074:	0f 93       	push	r16
    4076:	1f 93       	push	r17
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    4080:	2a 97       	sbiw	r28, 0x0a	; 10
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	de bf       	out	0x3e, r29	; 62
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	cd bf       	out	0x3d, r28	; 61
    408c:	f9 01       	movw	r30, r18
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
	
	twi_package_t packet_received =
    408e:	9e 01       	movw	r18, r28
    4090:	2f 5f       	subi	r18, 0xFF	; 255
    4092:	3f 4f       	sbci	r19, 0xFF	; 255
    4094:	79 01       	movw	r14, r18
    4096:	2a e0       	ldi	r18, 0x0A	; 10
    4098:	d7 01       	movw	r26, r14
    409a:	1d 92       	st	X+, r1
    409c:	2a 95       	dec	r18
    409e:	e9 f7       	brne	.-6      	; 0x409a <pne_APP_TwiReceive+0x2a>
    40a0:	49 83       	std	Y+1, r20	; 0x01
	{
		.addr[0]      = slave_mem_addr[0],               /* TWI slave memory address data */
    40a2:	dc 01       	movw	r26, r24
    40a4:	3c 91       	ld	r19, X
AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
	
	twi_package_t packet_received =
    40a6:	3a 83       	std	Y+2, r19	; 0x02
    40a8:	46 2f       	mov	r20, r22
    40aa:	50 e0       	ldi	r21, 0x00	; 0
    40ac:	5e 83       	std	Y+6, r21	; 0x06
    40ae:	4d 83       	std	Y+5, r20	; 0x05
    40b0:	f8 87       	std	Y+8, r31	; 0x08
    40b2:	ef 83       	std	Y+7, r30	; 0x07
    40b4:	10 e0       	ldi	r17, 0x00	; 0
    40b6:	1a 87       	std	Y+10, r17	; 0x0a
    40b8:	09 87       	std	Y+9, r16	; 0x09
		.chip         = slave_bus_address,               /* TWI slave bus address */
		.buffer       = data_received,                   /* transfer data source buffer */
		.length       = data_received_length             /* transfer data size (bytes) */
	};
	
	if (slave_mem_addr_length == 1)
    40ba:	61 30       	cpi	r22, 0x01	; 1
    40bc:	c9 f0       	breq	.+50     	; 0x40f0 <pne_APP_TwiReceive+0x80>
	{
		packet_received.addr[0] = slave_mem_addr[0];
	}
	else if (slave_mem_addr_length == 2)
    40be:	62 30       	cpi	r22, 0x02	; 2
    40c0:	29 f4       	brne	.+10     	; 0x40cc <pne_APP_TwiReceive+0x5c>
	{
		packet_received.addr[0] = slave_mem_addr[1];
    40c2:	11 96       	adiw	r26, 0x01	; 1
    40c4:	8c 91       	ld	r24, X
    40c6:	8a 83       	std	Y+2, r24	; 0x02
		packet_received.addr[1] = slave_mem_addr[0];
    40c8:	3b 83       	std	Y+3, r19	; 0x03
    40ca:	12 c0       	rjmp	.+36     	; 0x40f0 <pne_APP_TwiReceive+0x80>
	}
	else if (slave_mem_addr_length == 3)
    40cc:	63 30       	cpi	r22, 0x03	; 3
    40ce:	81 f4       	brne	.+32     	; 0x40f0 <pne_APP_TwiReceive+0x80>
	{
		packet_received.addr[0] = slave_mem_addr[0];
		packet_received.addr[1] = slave_mem_addr[1];
    40d0:	fc 01       	movw	r30, r24
    40d2:	21 81       	ldd	r18, Z+1	; 0x01
    40d4:	2b 83       	std	Y+3, r18	; 0x03
		packet_received.addr[2] = slave_mem_addr[2];
    40d6:	82 81       	ldd	r24, Z+2	; 0x02
    40d8:	8c 83       	std	Y+4, r24	; 0x04
    40da:	0a c0       	rjmp	.+20     	; 0x40f0 <pne_APP_TwiReceive+0x80>
		
	}
	
	while(twi_master_read(TWI_EXAMPLE,&packet_received) != TWI_SUCCESS)
	{
		pne_delayms(1);
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	32 df       	rcall	.-412    	; 0x3f46 <pne_delayms>
    40e2:	11 50       	subi	r17, 0x01	; 1
		count++;
		if (count == 10)
    40e4:	31 f4       	brne	.+12     	; 0x40f2 <pne_APP_TwiReceive+0x82>
		{
			count = 0;
			status = APP_PNEWELS_TWI_READ_FAIL;
			fatal_error_to_rf(twi_fatal_error);
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <fatal_error_to_rf>
		pne_delayms(1);
		count++;
		if (count == 10)
		{
			count = 0;
			status = APP_PNEWELS_TWI_READ_FAIL;
    40ec:	83 e0       	ldi	r24, 0x03	; 3
			fatal_error_to_rf(twi_fatal_error);
			break;
    40ee:	0b c0       	rjmp	.+22     	; 0x4106 <pne_APP_TwiReceive+0x96>
	
	return status;
}

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
    40f0:	1a e0       	ldi	r17, 0x0A	; 10
	else
	{
		
	}
	
	while(twi_master_read(TWI_EXAMPLE,&packet_received) != TWI_SUCCESS)
    40f2:	be 01       	movw	r22, r28
    40f4:	6f 5f       	subi	r22, 0xFF	; 255
    40f6:	7f 4f       	sbci	r23, 0xFF	; 255
    40f8:	88 eb       	ldi	r24, 0xB8	; 184
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	0e 94 dd 03 	call	0x7ba	; 0x7ba <twi_master_read>
    4100:	81 11       	cpse	r24, r1
    4102:	ec cf       	rjmp	.-40     	; 0x40dc <pne_APP_TwiReceive+0x6c>
}

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
    4104:	82 e0       	ldi	r24, 0x02	; 2
			break;
		}
	}
	
	return status;
}
    4106:	2a 96       	adiw	r28, 0x0a	; 10
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	df 91       	pop	r29
    4114:	cf 91       	pop	r28
    4116:	1f 91       	pop	r17
    4118:	0f 91       	pop	r16
    411a:	ff 90       	pop	r15
    411c:	ef 90       	pop	r14
    411e:	08 95       	ret

00004120 <PNEWELSE2promWrite>:
	

}

void PNEWELSE2promWrite(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2, uint8_t memory_data)
{
    4120:	ff 92       	push	r15
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	00 d0       	rcall	.+0      	; 0x412c <PNEWELSE2promWrite+0xc>
    412c:	cd b7       	in	r28, 0x3d	; 61
    412e:	de b7       	in	r29, 0x3e	; 62
    4130:	18 2f       	mov	r17, r24
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
    4132:	65 34       	cpi	r22, 0x45	; 69
    4134:	19 f0       	breq	.+6      	; 0x413c <PNEWELSE2promWrite+0x1c>
	{
		e2prom_address_length = 2;
	}
	else
	{
		e2prom_address_length = 1;
    4136:	ff 24       	eor	r15, r15
    4138:	f3 94       	inc	r15
    413a:	03 c0       	rjmp	.+6      	; 0x4142 <PNEWELSE2promWrite+0x22>
void PNEWELSE2promWrite(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2, uint8_t memory_data)
{
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
	{
		e2prom_address_length = 2;
    413c:	68 94       	set
    413e:	ff 24       	eor	r15, r15
    4140:	f1 f8       	bld	r15, 1
	else
	{
		e2prom_address_length = 1;
	}
	uint8_t e2prom_write_address = address;
	uint8_t e2prom_address[2] =
    4142:	49 83       	std	Y+1, r20	; 0x01
    4144:	2a 83       	std	Y+2, r18	; 0x02
	{
		memory_loc_1,
		memory_loc_2,
	};
	uint8_t write_data[1] =
    4146:	0b 83       	std	Y+3, r16	; 0x03
	{
		memory_data,
	};
	
	pne_APP_TwiInit(e2prom_write_address);
    4148:	81 2f       	mov	r24, r17
    414a:	11 df       	rcall	.-478    	; 0x3f6e <pne_APP_TwiInit>
	
	pne_APP_TwiSend(e2prom_address, e2prom_address_length, e2prom_write_address, write_data, 1);
    414c:	01 e0       	ldi	r16, 0x01	; 1
    414e:	9e 01       	movw	r18, r28
    4150:	2d 5f       	subi	r18, 0xFD	; 253
    4152:	3f 4f       	sbci	r19, 0xFF	; 255
    4154:	41 2f       	mov	r20, r17
    4156:	6f 2d       	mov	r22, r15
    4158:	ce 01       	movw	r24, r28
    415a:	01 96       	adiw	r24, 0x01	; 1
    415c:	32 df       	rcall	.-412    	; 0x3fc2 <pne_APP_TwiSend>
	pne_delayms(5);
    415e:	85 e0       	ldi	r24, 0x05	; 5
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	f1 de       	rcall	.-542    	; 0x3f46 <pne_delayms>
}
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	df 91       	pop	r29
    416c:	cf 91       	pop	r28
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	ff 90       	pop	r15
    4174:	08 95       	ret

00004176 <PNEWELSE2promRead>:

uint8_t PNEWELSE2promRead(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2)
{
    4176:	ff 92       	push	r15
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	00 d0       	rcall	.+0      	; 0x4182 <PNEWELSE2promRead+0xc>
    4182:	1f 92       	push	r1
    4184:	cd b7       	in	r28, 0x3d	; 61
    4186:	de b7       	in	r29, 0x3e	; 62
    4188:	18 2f       	mov	r17, r24
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
    418a:	65 34       	cpi	r22, 0x45	; 69
    418c:	19 f0       	breq	.+6      	; 0x4194 <PNEWELSE2promRead+0x1e>
	{
		e2prom_address_length = 2;
	}
	else
	{
		e2prom_address_length = 1;
    418e:	ff 24       	eor	r15, r15
    4190:	f3 94       	inc	r15
    4192:	03 c0       	rjmp	.+6      	; 0x419a <PNEWELSE2promRead+0x24>
uint8_t PNEWELSE2promRead(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2)
{
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
	{
		e2prom_address_length = 2;
    4194:	68 94       	set
    4196:	ff 24       	eor	r15, r15
    4198:	f1 f8       	bld	r15, 1
	else
	{
		e2prom_address_length = 1;
	}
	uint8_t e2prom_read_address = address;
	uint8_t e2prom_address[2] =
    419a:	49 83       	std	Y+1, r20	; 0x01
    419c:	2a 83       	std	Y+2, r18	; 0x02
	{
		memory_loc_1,
		memory_loc_2,
	};
	uint8_t read_data[2] = {0,0};
    419e:	1b 82       	std	Y+3, r1	; 0x03
    41a0:	1c 82       	std	Y+4, r1	; 0x04
	
	pne_APP_TwiInit(e2prom_read_address);
    41a2:	81 2f       	mov	r24, r17
    41a4:	e4 de       	rcall	.-568    	; 0x3f6e <pne_APP_TwiInit>
	
	pne_APP_TwiReceive(e2prom_address, e2prom_address_length, e2prom_read_address, read_data, 1);
    41a6:	01 e0       	ldi	r16, 0x01	; 1
    41a8:	9e 01       	movw	r18, r28
    41aa:	2d 5f       	subi	r18, 0xFD	; 253
    41ac:	3f 4f       	sbci	r19, 0xFF	; 255
    41ae:	41 2f       	mov	r20, r17
    41b0:	6f 2d       	mov	r22, r15
    41b2:	ce 01       	movw	r24, r28
    41b4:	01 96       	adiw	r24, 0x01	; 1
    41b6:	5c df       	rcall	.-328    	; 0x4070 <pne_APP_TwiReceive>
	
	return read_data[0];
}
    41b8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	df 91       	pop	r29
    41c4:	cf 91       	pop	r28
    41c6:	1f 91       	pop	r17
    41c8:	0f 91       	pop	r16
    41ca:	ff 90       	pop	r15
    41cc:	08 95       	ret

000041ce <PNEWELSTemperatureRead>:

uint8_t PNEWELSTemperatureRead(void)
{
    41ce:	0f 93       	push	r16
    41d0:	cf 93       	push	r28
    41d2:	df 93       	push	r29
    41d4:	00 d0       	rcall	.+0      	; 0x41d6 <PNEWELSTemperatureRead+0x8>
    41d6:	1f 92       	push	r1
    41d8:	cd b7       	in	r28, 0x3d	; 61
    41da:	de b7       	in	r29, 0x3e	; 62
	uint8_t temperature_write_address = 0x90;
	uint8_t temperature_read_address = 0x91;
	uint8_t temperature_register[2] =
    41dc:	19 82       	std	Y+1, r1	; 0x01
    41de:	1a 82       	std	Y+2, r1	; 0x02
	{
		0x00,
		0x00,
	};
	uint8_t data_received[2] = {0, 0};
    41e0:	1b 82       	std	Y+3, r1	; 0x03
    41e2:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t data = 0;
	
	pne_APP_TwiInit(temperature_write_address);
    41e4:	80 e9       	ldi	r24, 0x90	; 144
    41e6:	c3 de       	rcall	.-634    	; 0x3f6e <pne_APP_TwiInit>
	
	if (pne_APP_TwiSend(temperature_register, 1, temperature_write_address, 0, 0) == APP_PNEWELS_TWI_WRITE_SUCCESS)
    41e8:	00 e0       	ldi	r16, 0x00	; 0
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	40 e9       	ldi	r20, 0x90	; 144
    41f0:	61 e0       	ldi	r22, 0x01	; 1
    41f2:	ce 01       	movw	r24, r28
    41f4:	01 96       	adiw	r24, 0x01	; 1
    41f6:	e5 de       	rcall	.-566    	; 0x3fc2 <pne_APP_TwiSend>
    41f8:	81 11       	cpse	r24, r1
    41fa:	09 c0       	rjmp	.+18     	; 0x420e <PNEWELSTemperatureRead+0x40>
	{
		pne_APP_TwiReceive(temperature_register, 1, temperature_read_address, data_received, 2);
    41fc:	02 e0       	ldi	r16, 0x02	; 2
    41fe:	9e 01       	movw	r18, r28
    4200:	2d 5f       	subi	r18, 0xFD	; 253
    4202:	3f 4f       	sbci	r19, 0xFF	; 255
    4204:	41 e9       	ldi	r20, 0x91	; 145
    4206:	61 e0       	ldi	r22, 0x01	; 1
    4208:	ce 01       	movw	r24, r28
    420a:	01 96       	adiw	r24, 0x01	; 1
    420c:	31 df       	rcall	.-414    	; 0x4070 <pne_APP_TwiReceive>
	}
	
	data = (data_received[0]<<1) / 2;
    420e:	8b 81       	ldd	r24, Y+3	; 0x03
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	88 0f       	add	r24, r24
    4214:	99 1f       	adc	r25, r25
    4216:	95 95       	asr	r25
    4218:	87 95       	ror	r24

	return data;
}
    421a:	0f 90       	pop	r0
    421c:	0f 90       	pop	r0
    421e:	0f 90       	pop	r0
    4220:	0f 90       	pop	r0
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	0f 91       	pop	r16
    4228:	08 95       	ret

0000422a <clre2prom>:

void clre2prom()
{
    422a:	0f 93       	push	r16
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    4230:	c0 e0       	ldi	r28, 0x00	; 0
    4232:	d0 e0       	ldi	r29, 0x00	; 0
	{
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0xFF);
    4234:	0f ef       	ldi	r16, 0xFF	; 255
    4236:	2d 2f       	mov	r18, r29
    4238:	4c 2f       	mov	r20, r28
    423a:	65 e4       	ldi	r22, 0x45	; 69
    423c:	8e ea       	ldi	r24, 0xAE	; 174
    423e:	70 df       	rcall	.-288    	; 0x4120 <PNEWELSE2promWrite>
		pne_delayms(10);
    4240:	8a e0       	ldi	r24, 0x0A	; 10
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	80 de       	rcall	.-768    	; 0x3f46 <pne_delayms>
		wdt_reset();
    4246:	a8 95       	wdr
void clre2prom()
{
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    4248:	21 96       	adiw	r28, 0x01	; 1
    424a:	cc 3f       	cpi	r28, 0xFC	; 252
    424c:	8f e0       	ldi	r24, 0x0F	; 15
    424e:	d8 07       	cpc	r29, r24
    4250:	89 f7       	brne	.-30     	; 0x4234 <clre2prom+0xa>
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0xFF);
		pne_delayms(10);
		wdt_reset();
	}
	
	memory_address_incr = 0;
    4252:	10 92 c3 20 	sts	0x20C3, r1
    4256:	10 92 c2 20 	sts	0x20C2, r1
}
    425a:	df 91       	pop	r29
    425c:	cf 91       	pop	r28
    425e:	0f 91       	pop	r16
    4260:	08 95       	ret

00004262 <memoryCounter_init>:

void memoryCounter_init()
{
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
	uint8_t cache = 0;
	for (uint16_t counter = 0; counter<4092; counter = counter + 11)
    4266:	c0 e0       	ldi	r28, 0x00	; 0
    4268:	d0 e0       	ldi	r29, 0x00	; 0
	{
		cache = readE2prom(counter);
    426a:	ce 01       	movw	r24, r28
    426c:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <readE2prom>
		if(cache == 0xFF)
    4270:	8f 3f       	cpi	r24, 0xFF	; 255
    4272:	29 f4       	brne	.+10     	; 0x427e <memoryCounter_init+0x1c>
		{
			memory_address_incr = counter;
    4274:	d0 93 c3 20 	sts	0x20C3, r29
    4278:	c0 93 c2 20 	sts	0x20C2, r28
			break;
    427c:	05 c0       	rjmp	.+10     	; 0x4288 <memoryCounter_init+0x26>
}

void memoryCounter_init()
{
	uint8_t cache = 0;
	for (uint16_t counter = 0; counter<4092; counter = counter + 11)
    427e:	2b 96       	adiw	r28, 0x0b	; 11
    4280:	cc 3f       	cpi	r28, 0xFC	; 252
    4282:	8f e0       	ldi	r24, 0x0F	; 15
    4284:	d8 07       	cpc	r29, r24
    4286:	89 f7       	brne	.-30     	; 0x426a <memoryCounter_init+0x8>
		{
			memory_address_incr = counter;
			break;
		}
	}
}
    4288:	df 91       	pop	r29
    428a:	cf 91       	pop	r28
    428c:	08 95       	ret

0000428e <memoryCounter_save>:

void memoryCounter_save(uint16_t log_counter)
{
	writeE2prom(log_counter, 0xFF);
    428e:	6f ef       	ldi	r22, 0xFF	; 255
    4290:	0c 94 8e 2f 	jmp	0x5f1c	; 0x5f1c <writeE2prom>
    4294:	08 95       	ret

00004296 <store>:
	
	return status;
}

void store(store_seq_t seq)
{
    4296:	2f 92       	push	r2
    4298:	3f 92       	push	r3
    429a:	4f 92       	push	r4
    429c:	5f 92       	push	r5
    429e:	6f 92       	push	r6
    42a0:	7f 92       	push	r7
    42a2:	8f 92       	push	r8
    42a4:	9f 92       	push	r9
    42a6:	af 92       	push	r10
    42a8:	bf 92       	push	r11
    42aa:	cf 92       	push	r12
    42ac:	df 92       	push	r13
    42ae:	ef 92       	push	r14
    42b0:	ff 92       	push	r15
    42b2:	0f 93       	push	r16
    42b4:	1f 93       	push	r17
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
    42be:	6e 97       	sbiw	r28, 0x1e	; 30
    42c0:	0f b6       	in	r0, 0x3f	; 63
    42c2:	f8 94       	cli
    42c4:	de bf       	out	0x3e, r29	; 62
    42c6:	0f be       	out	0x3f, r0	; 63
    42c8:	cd bf       	out	0x3d, r28	; 61
	uint8_t time_4_byte = 0;
	uint8_t status_byte1 = 0;
	uint8_t status_byte2 = 0;
	uint8_t status_byte3 = 0;

	if (seq == charge_start)
    42ca:	81 11       	cpse	r24, r1
    42cc:	3f c0       	rjmp	.+126    	; 0x434c <store+0xb6>
	{
		if (memory_address_incr >= 4092)
    42ce:	80 91 c2 20 	lds	r24, 0x20C2
    42d2:	90 91 c3 20 	lds	r25, 0x20C3
    42d6:	8c 3f       	cpi	r24, 0xFC	; 252
    42d8:	9f 40       	sbci	r25, 0x0F	; 15
    42da:	20 f0       	brcs	.+8      	; 0x42e4 <store+0x4e>
		{
			memory_address_incr = 0;
    42dc:	10 92 c3 20 	sts	0x20C3, r1
    42e0:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    42e4:	40 91 c2 20 	lds	r20, 0x20C2
    42e8:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    42ec:	03 e4       	ldi	r16, 0x43	; 67
    42ee:	65 e4       	ldi	r22, 0x45	; 69
    42f0:	8e ea       	ldi	r24, 0xAE	; 174
    42f2:	16 df       	rcall	.-468    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    42f4:	80 91 c2 20 	lds	r24, 0x20C2
    42f8:	90 91 c3 20 	lds	r25, 0x20C3
    42fc:	01 96       	adiw	r24, 0x01	; 1
    42fe:	90 93 c3 20 	sts	0x20C3, r25
    4302:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    4306:	8a e0       	ldi	r24, 0x0A	; 10
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	1d de       	rcall	.-966    	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    430c:	80 91 c2 20 	lds	r24, 0x20C2
    4310:	90 91 c3 20 	lds	r25, 0x20C3
    4314:	8c 3f       	cpi	r24, 0xFC	; 252
    4316:	9f 40       	sbci	r25, 0x0F	; 15
    4318:	20 f0       	brcs	.+8      	; 0x4322 <store+0x8c>
		{
			memory_address_incr = 0;
    431a:	10 92 c3 20 	sts	0x20C3, r1
    431e:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4322:	40 91 c2 20 	lds	r20, 0x20C2
    4326:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    432a:	03 e5       	ldi	r16, 0x53	; 83
    432c:	65 e4       	ldi	r22, 0x45	; 69
    432e:	8e ea       	ldi	r24, 0xAE	; 174
    4330:	f7 de       	rcall	.-530    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    4332:	80 91 c2 20 	lds	r24, 0x20C2
    4336:	90 91 c3 20 	lds	r25, 0x20C3
    433a:	01 96       	adiw	r24, 0x01	; 1
    433c:	90 93 c3 20 	sts	0x20C3, r25
    4340:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    4344:	8a e0       	ldi	r24, 0x0A	; 10
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	fe dd       	rcall	.-1028   	; 0x3f46 <pne_delayms>
    434a:	0c c2       	rjmp	.+1048   	; 0x4764 <store+0x4ce>
	}
	else if (seq == charge_end)
    434c:	81 30       	cpi	r24, 0x01	; 1
    434e:	09 f0       	breq	.+2      	; 0x4352 <store+0xbc>
    4350:	3f c0       	rjmp	.+126    	; 0x43d0 <store+0x13a>
	{
		if (memory_address_incr >= 4092)
    4352:	80 91 c2 20 	lds	r24, 0x20C2
    4356:	90 91 c3 20 	lds	r25, 0x20C3
    435a:	8c 3f       	cpi	r24, 0xFC	; 252
    435c:	9f 40       	sbci	r25, 0x0F	; 15
    435e:	20 f0       	brcs	.+8      	; 0x4368 <store+0xd2>
		{
			memory_address_incr = 0;
    4360:	10 92 c3 20 	sts	0x20C3, r1
    4364:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4368:	40 91 c2 20 	lds	r20, 0x20C2
    436c:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    4370:	03 e4       	ldi	r16, 0x43	; 67
    4372:	65 e4       	ldi	r22, 0x45	; 69
    4374:	8e ea       	ldi	r24, 0xAE	; 174
    4376:	d4 de       	rcall	.-600    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    4378:	80 91 c2 20 	lds	r24, 0x20C2
    437c:	90 91 c3 20 	lds	r25, 0x20C3
    4380:	01 96       	adiw	r24, 0x01	; 1
    4382:	90 93 c3 20 	sts	0x20C3, r25
    4386:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    438a:	8a e0       	ldi	r24, 0x0A	; 10
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	db dd       	rcall	.-1098   	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    4390:	80 91 c2 20 	lds	r24, 0x20C2
    4394:	90 91 c3 20 	lds	r25, 0x20C3
    4398:	8c 3f       	cpi	r24, 0xFC	; 252
    439a:	9f 40       	sbci	r25, 0x0F	; 15
    439c:	20 f0       	brcs	.+8      	; 0x43a6 <store+0x110>
		{
			memory_address_incr = 0;
    439e:	10 92 c3 20 	sts	0x20C3, r1
    43a2:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    43a6:	40 91 c2 20 	lds	r20, 0x20C2
    43aa:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    43ae:	05 e4       	ldi	r16, 0x45	; 69
    43b0:	65 e4       	ldi	r22, 0x45	; 69
    43b2:	8e ea       	ldi	r24, 0xAE	; 174
    43b4:	b5 de       	rcall	.-662    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    43b6:	80 91 c2 20 	lds	r24, 0x20C2
    43ba:	90 91 c3 20 	lds	r25, 0x20C3
    43be:	01 96       	adiw	r24, 0x01	; 1
    43c0:	90 93 c3 20 	sts	0x20C3, r25
    43c4:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    43c8:	8a e0       	ldi	r24, 0x0A	; 10
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	bc dd       	rcall	.-1160   	; 0x3f46 <pne_delayms>
    43ce:	ca c1       	rjmp	.+916    	; 0x4764 <store+0x4ce>
	}
	else if (seq == discharge_start)
    43d0:	82 30       	cpi	r24, 0x02	; 2
    43d2:	09 f0       	breq	.+2      	; 0x43d6 <store+0x140>
    43d4:	3f c0       	rjmp	.+126    	; 0x4454 <store+0x1be>
	{
		if (memory_address_incr >= 4092)
    43d6:	80 91 c2 20 	lds	r24, 0x20C2
    43da:	90 91 c3 20 	lds	r25, 0x20C3
    43de:	8c 3f       	cpi	r24, 0xFC	; 252
    43e0:	9f 40       	sbci	r25, 0x0F	; 15
    43e2:	20 f0       	brcs	.+8      	; 0x43ec <store+0x156>
		{
			memory_address_incr = 0;
    43e4:	10 92 c3 20 	sts	0x20C3, r1
    43e8:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    43ec:	40 91 c2 20 	lds	r20, 0x20C2
    43f0:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    43f4:	04 e4       	ldi	r16, 0x44	; 68
    43f6:	65 e4       	ldi	r22, 0x45	; 69
    43f8:	8e ea       	ldi	r24, 0xAE	; 174
    43fa:	92 de       	rcall	.-732    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    43fc:	80 91 c2 20 	lds	r24, 0x20C2
    4400:	90 91 c3 20 	lds	r25, 0x20C3
    4404:	01 96       	adiw	r24, 0x01	; 1
    4406:	90 93 c3 20 	sts	0x20C3, r25
    440a:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    440e:	8a e0       	ldi	r24, 0x0A	; 10
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	99 dd       	rcall	.-1230   	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    4414:	80 91 c2 20 	lds	r24, 0x20C2
    4418:	90 91 c3 20 	lds	r25, 0x20C3
    441c:	8c 3f       	cpi	r24, 0xFC	; 252
    441e:	9f 40       	sbci	r25, 0x0F	; 15
    4420:	20 f0       	brcs	.+8      	; 0x442a <store+0x194>
		{
			memory_address_incr = 0;
    4422:	10 92 c3 20 	sts	0x20C3, r1
    4426:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    442a:	40 91 c2 20 	lds	r20, 0x20C2
    442e:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    4432:	03 e5       	ldi	r16, 0x53	; 83
    4434:	65 e4       	ldi	r22, 0x45	; 69
    4436:	8e ea       	ldi	r24, 0xAE	; 174
    4438:	73 de       	rcall	.-794    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    443a:	80 91 c2 20 	lds	r24, 0x20C2
    443e:	90 91 c3 20 	lds	r25, 0x20C3
    4442:	01 96       	adiw	r24, 0x01	; 1
    4444:	90 93 c3 20 	sts	0x20C3, r25
    4448:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    444c:	8a e0       	ldi	r24, 0x0A	; 10
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	7a dd       	rcall	.-1292   	; 0x3f46 <pne_delayms>
    4452:	88 c1       	rjmp	.+784    	; 0x4764 <store+0x4ce>
	}
	else if (seq == discharge_end)
    4454:	83 30       	cpi	r24, 0x03	; 3
    4456:	09 f0       	breq	.+2      	; 0x445a <store+0x1c4>
    4458:	3f c0       	rjmp	.+126    	; 0x44d8 <store+0x242>
	{
		if (memory_address_incr >= 4092)
    445a:	80 91 c2 20 	lds	r24, 0x20C2
    445e:	90 91 c3 20 	lds	r25, 0x20C3
    4462:	8c 3f       	cpi	r24, 0xFC	; 252
    4464:	9f 40       	sbci	r25, 0x0F	; 15
    4466:	20 f0       	brcs	.+8      	; 0x4470 <store+0x1da>
		{
			memory_address_incr = 0;
    4468:	10 92 c3 20 	sts	0x20C3, r1
    446c:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4470:	40 91 c2 20 	lds	r20, 0x20C2
    4474:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    4478:	04 e4       	ldi	r16, 0x44	; 68
    447a:	65 e4       	ldi	r22, 0x45	; 69
    447c:	8e ea       	ldi	r24, 0xAE	; 174
    447e:	50 de       	rcall	.-864    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    4480:	80 91 c2 20 	lds	r24, 0x20C2
    4484:	90 91 c3 20 	lds	r25, 0x20C3
    4488:	01 96       	adiw	r24, 0x01	; 1
    448a:	90 93 c3 20 	sts	0x20C3, r25
    448e:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    4492:	8a e0       	ldi	r24, 0x0A	; 10
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	57 dd       	rcall	.-1362   	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    4498:	80 91 c2 20 	lds	r24, 0x20C2
    449c:	90 91 c3 20 	lds	r25, 0x20C3
    44a0:	8c 3f       	cpi	r24, 0xFC	; 252
    44a2:	9f 40       	sbci	r25, 0x0F	; 15
    44a4:	20 f0       	brcs	.+8      	; 0x44ae <store+0x218>
		{
			memory_address_incr = 0;
    44a6:	10 92 c3 20 	sts	0x20C3, r1
    44aa:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    44ae:	40 91 c2 20 	lds	r20, 0x20C2
    44b2:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    44b6:	05 e4       	ldi	r16, 0x45	; 69
    44b8:	65 e4       	ldi	r22, 0x45	; 69
    44ba:	8e ea       	ldi	r24, 0xAE	; 174
    44bc:	31 de       	rcall	.-926    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    44be:	80 91 c2 20 	lds	r24, 0x20C2
    44c2:	90 91 c3 20 	lds	r25, 0x20C3
    44c6:	01 96       	adiw	r24, 0x01	; 1
    44c8:	90 93 c3 20 	sts	0x20C3, r25
    44cc:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    44d0:	8a e0       	ldi	r24, 0x0A	; 10
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	38 dd       	rcall	.-1424   	; 0x3f46 <pne_delayms>
    44d6:	46 c1       	rjmp	.+652    	; 0x4764 <store+0x4ce>
	}
	else if (seq == emergency_start)
    44d8:	84 30       	cpi	r24, 0x04	; 4
    44da:	09 f0       	breq	.+2      	; 0x44de <store+0x248>
    44dc:	3f c0       	rjmp	.+126    	; 0x455c <store+0x2c6>
	{
		if (memory_address_incr >= 4092)
    44de:	80 91 c2 20 	lds	r24, 0x20C2
    44e2:	90 91 c3 20 	lds	r25, 0x20C3
    44e6:	8c 3f       	cpi	r24, 0xFC	; 252
    44e8:	9f 40       	sbci	r25, 0x0F	; 15
    44ea:	20 f0       	brcs	.+8      	; 0x44f4 <store+0x25e>
		{
			memory_address_incr = 0;
    44ec:	10 92 c3 20 	sts	0x20C3, r1
    44f0:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    44f4:	40 91 c2 20 	lds	r20, 0x20C2
    44f8:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    44fc:	05 e4       	ldi	r16, 0x45	; 69
    44fe:	65 e4       	ldi	r22, 0x45	; 69
    4500:	8e ea       	ldi	r24, 0xAE	; 174
    4502:	0e de       	rcall	.-996    	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    4504:	80 91 c2 20 	lds	r24, 0x20C2
    4508:	90 91 c3 20 	lds	r25, 0x20C3
    450c:	01 96       	adiw	r24, 0x01	; 1
    450e:	90 93 c3 20 	sts	0x20C3, r25
    4512:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    4516:	8a e0       	ldi	r24, 0x0A	; 10
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	15 dd       	rcall	.-1494   	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    451c:	80 91 c2 20 	lds	r24, 0x20C2
    4520:	90 91 c3 20 	lds	r25, 0x20C3
    4524:	8c 3f       	cpi	r24, 0xFC	; 252
    4526:	9f 40       	sbci	r25, 0x0F	; 15
    4528:	20 f0       	brcs	.+8      	; 0x4532 <store+0x29c>
		{
			memory_address_incr = 0;
    452a:	10 92 c3 20 	sts	0x20C3, r1
    452e:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4532:	40 91 c2 20 	lds	r20, 0x20C2
    4536:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    453a:	03 e5       	ldi	r16, 0x53	; 83
    453c:	65 e4       	ldi	r22, 0x45	; 69
    453e:	8e ea       	ldi	r24, 0xAE	; 174
    4540:	ef dd       	rcall	.-1058   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    4542:	80 91 c2 20 	lds	r24, 0x20C2
    4546:	90 91 c3 20 	lds	r25, 0x20C3
    454a:	01 96       	adiw	r24, 0x01	; 1
    454c:	90 93 c3 20 	sts	0x20C3, r25
    4550:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    4554:	8a e0       	ldi	r24, 0x0A	; 10
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	f6 dc       	rcall	.-1556   	; 0x3f46 <pne_delayms>
    455a:	04 c1       	rjmp	.+520    	; 0x4764 <store+0x4ce>
	}
	else if (seq == emergency_end)
    455c:	85 30       	cpi	r24, 0x05	; 5
    455e:	09 f0       	breq	.+2      	; 0x4562 <store+0x2cc>
    4560:	3f c0       	rjmp	.+126    	; 0x45e0 <store+0x34a>
	{
		if (memory_address_incr >= 4092)
    4562:	80 91 c2 20 	lds	r24, 0x20C2
    4566:	90 91 c3 20 	lds	r25, 0x20C3
    456a:	8c 3f       	cpi	r24, 0xFC	; 252
    456c:	9f 40       	sbci	r25, 0x0F	; 15
    456e:	20 f0       	brcs	.+8      	; 0x4578 <store+0x2e2>
		{
			memory_address_incr = 0;
    4570:	10 92 c3 20 	sts	0x20C3, r1
    4574:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4578:	40 91 c2 20 	lds	r20, 0x20C2
    457c:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    4580:	05 e4       	ldi	r16, 0x45	; 69
    4582:	65 e4       	ldi	r22, 0x45	; 69
    4584:	8e ea       	ldi	r24, 0xAE	; 174
    4586:	cc dd       	rcall	.-1128   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    4588:	80 91 c2 20 	lds	r24, 0x20C2
    458c:	90 91 c3 20 	lds	r25, 0x20C3
    4590:	01 96       	adiw	r24, 0x01	; 1
    4592:	90 93 c3 20 	sts	0x20C3, r25
    4596:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    459a:	8a e0       	ldi	r24, 0x0A	; 10
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	d3 dc       	rcall	.-1626   	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    45a0:	80 91 c2 20 	lds	r24, 0x20C2
    45a4:	90 91 c3 20 	lds	r25, 0x20C3
    45a8:	8c 3f       	cpi	r24, 0xFC	; 252
    45aa:	9f 40       	sbci	r25, 0x0F	; 15
    45ac:	20 f0       	brcs	.+8      	; 0x45b6 <store+0x320>
		{
			memory_address_incr = 0;
    45ae:	10 92 c3 20 	sts	0x20C3, r1
    45b2:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    45b6:	40 91 c2 20 	lds	r20, 0x20C2
    45ba:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    45be:	05 e4       	ldi	r16, 0x45	; 69
    45c0:	65 e4       	ldi	r22, 0x45	; 69
    45c2:	8e ea       	ldi	r24, 0xAE	; 174
    45c4:	ad dd       	rcall	.-1190   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    45c6:	80 91 c2 20 	lds	r24, 0x20C2
    45ca:	90 91 c3 20 	lds	r25, 0x20C3
    45ce:	01 96       	adiw	r24, 0x01	; 1
    45d0:	90 93 c3 20 	sts	0x20C3, r25
    45d4:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    45d8:	8a e0       	ldi	r24, 0x0A	; 10
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	b4 dc       	rcall	.-1688   	; 0x3f46 <pne_delayms>
    45de:	c2 c0       	rjmp	.+388    	; 0x4764 <store+0x4ce>
	}
	else if (seq == battery_charged)
    45e0:	86 30       	cpi	r24, 0x06	; 6
    45e2:	09 f0       	breq	.+2      	; 0x45e6 <store+0x350>
    45e4:	3f c0       	rjmp	.+126    	; 0x4664 <store+0x3ce>
	{
		if (memory_address_incr >= 4092)
    45e6:	80 91 c2 20 	lds	r24, 0x20C2
    45ea:	90 91 c3 20 	lds	r25, 0x20C3
    45ee:	8c 3f       	cpi	r24, 0xFC	; 252
    45f0:	9f 40       	sbci	r25, 0x0F	; 15
    45f2:	20 f0       	brcs	.+8      	; 0x45fc <store+0x366>
		{
			memory_address_incr = 0;
    45f4:	10 92 c3 20 	sts	0x20C3, r1
    45f8:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    45fc:	40 91 c2 20 	lds	r20, 0x20C2
    4600:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x42);
    4604:	02 e4       	ldi	r16, 0x42	; 66
    4606:	65 e4       	ldi	r22, 0x45	; 69
    4608:	8e ea       	ldi	r24, 0xAE	; 174
    460a:	8a dd       	rcall	.-1260   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    460c:	80 91 c2 20 	lds	r24, 0x20C2
    4610:	90 91 c3 20 	lds	r25, 0x20C3
    4614:	01 96       	adiw	r24, 0x01	; 1
    4616:	90 93 c3 20 	sts	0x20C3, r25
    461a:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    461e:	8a e0       	ldi	r24, 0x0A	; 10
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	91 dc       	rcall	.-1758   	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    4624:	80 91 c2 20 	lds	r24, 0x20C2
    4628:	90 91 c3 20 	lds	r25, 0x20C3
    462c:	8c 3f       	cpi	r24, 0xFC	; 252
    462e:	9f 40       	sbci	r25, 0x0F	; 15
    4630:	20 f0       	brcs	.+8      	; 0x463a <store+0x3a4>
		{
			memory_address_incr = 0;
    4632:	10 92 c3 20 	sts	0x20C3, r1
    4636:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    463a:	40 91 c2 20 	lds	r20, 0x20C2
    463e:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    4642:	03 e4       	ldi	r16, 0x43	; 67
    4644:	65 e4       	ldi	r22, 0x45	; 69
    4646:	8e ea       	ldi	r24, 0xAE	; 174
    4648:	6b dd       	rcall	.-1322   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    464a:	80 91 c2 20 	lds	r24, 0x20C2
    464e:	90 91 c3 20 	lds	r25, 0x20C3
    4652:	01 96       	adiw	r24, 0x01	; 1
    4654:	90 93 c3 20 	sts	0x20C3, r25
    4658:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    465c:	8a e0       	ldi	r24, 0x0A	; 10
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	72 dc       	rcall	.-1820   	; 0x3f46 <pne_delayms>
    4662:	80 c0       	rjmp	.+256    	; 0x4764 <store+0x4ce>
	}
	else if (seq == battery_discharged)
    4664:	87 30       	cpi	r24, 0x07	; 7
    4666:	09 f0       	breq	.+2      	; 0x466a <store+0x3d4>
    4668:	3f c0       	rjmp	.+126    	; 0x46e8 <store+0x452>
	{
		if (memory_address_incr >= 4092)
    466a:	80 91 c2 20 	lds	r24, 0x20C2
    466e:	90 91 c3 20 	lds	r25, 0x20C3
    4672:	8c 3f       	cpi	r24, 0xFC	; 252
    4674:	9f 40       	sbci	r25, 0x0F	; 15
    4676:	20 f0       	brcs	.+8      	; 0x4680 <store+0x3ea>
		{
			memory_address_incr = 0;
    4678:	10 92 c3 20 	sts	0x20C3, r1
    467c:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4680:	40 91 c2 20 	lds	r20, 0x20C2
    4684:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x42);
    4688:	02 e4       	ldi	r16, 0x42	; 66
    468a:	65 e4       	ldi	r22, 0x45	; 69
    468c:	8e ea       	ldi	r24, 0xAE	; 174
    468e:	48 dd       	rcall	.-1392   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    4690:	80 91 c2 20 	lds	r24, 0x20C2
    4694:	90 91 c3 20 	lds	r25, 0x20C3
    4698:	01 96       	adiw	r24, 0x01	; 1
    469a:	90 93 c3 20 	sts	0x20C3, r25
    469e:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    46a2:	8a e0       	ldi	r24, 0x0A	; 10
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	4f dc       	rcall	.-1890   	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    46a8:	80 91 c2 20 	lds	r24, 0x20C2
    46ac:	90 91 c3 20 	lds	r25, 0x20C3
    46b0:	8c 3f       	cpi	r24, 0xFC	; 252
    46b2:	9f 40       	sbci	r25, 0x0F	; 15
    46b4:	20 f0       	brcs	.+8      	; 0x46be <store+0x428>
		{
			memory_address_incr = 0;
    46b6:	10 92 c3 20 	sts	0x20C3, r1
    46ba:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    46be:	40 91 c2 20 	lds	r20, 0x20C2
    46c2:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    46c6:	04 e4       	ldi	r16, 0x44	; 68
    46c8:	65 e4       	ldi	r22, 0x45	; 69
    46ca:	8e ea       	ldi	r24, 0xAE	; 174
    46cc:	29 dd       	rcall	.-1454   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    46ce:	80 91 c2 20 	lds	r24, 0x20C2
    46d2:	90 91 c3 20 	lds	r25, 0x20C3
    46d6:	01 96       	adiw	r24, 0x01	; 1
    46d8:	90 93 c3 20 	sts	0x20C3, r25
    46dc:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    46e0:	8a e0       	ldi	r24, 0x0A	; 10
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	30 dc       	rcall	.-1952   	; 0x3f46 <pne_delayms>
    46e6:	3e c0       	rjmp	.+124    	; 0x4764 <store+0x4ce>
	}
	else
	{
		if (memory_address_incr >= 4092)
    46e8:	80 91 c2 20 	lds	r24, 0x20C2
    46ec:	90 91 c3 20 	lds	r25, 0x20C3
    46f0:	8c 3f       	cpi	r24, 0xFC	; 252
    46f2:	9f 40       	sbci	r25, 0x0F	; 15
    46f4:	20 f0       	brcs	.+8      	; 0x46fe <store+0x468>
		{
			memory_address_incr = 0;
    46f6:	10 92 c3 20 	sts	0x20C3, r1
    46fa:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    46fe:	40 91 c2 20 	lds	r20, 0x20C2
    4702:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x4E);
    4706:	0e e4       	ldi	r16, 0x4E	; 78
    4708:	65 e4       	ldi	r22, 0x45	; 69
    470a:	8e ea       	ldi	r24, 0xAE	; 174
    470c:	09 dd       	rcall	.-1518   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    470e:	80 91 c2 20 	lds	r24, 0x20C2
    4712:	90 91 c3 20 	lds	r25, 0x20C3
    4716:	01 96       	adiw	r24, 0x01	; 1
    4718:	90 93 c3 20 	sts	0x20C3, r25
    471c:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    4720:	8a e0       	ldi	r24, 0x0A	; 10
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	10 dc       	rcall	.-2016   	; 0x3f46 <pne_delayms>
		if (memory_address_incr >= 4092)
    4726:	80 91 c2 20 	lds	r24, 0x20C2
    472a:	90 91 c3 20 	lds	r25, 0x20C3
    472e:	8c 3f       	cpi	r24, 0xFC	; 252
    4730:	9f 40       	sbci	r25, 0x0F	; 15
    4732:	20 f0       	brcs	.+8      	; 0x473c <store+0x4a6>
		{
			memory_address_incr = 0;
    4734:	10 92 c3 20 	sts	0x20C3, r1
    4738:	10 92 c2 20 	sts	0x20C2, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    473c:	40 91 c2 20 	lds	r20, 0x20C2
    4740:	20 91 c3 20 	lds	r18, 0x20C3
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x4E);
    4744:	0e e4       	ldi	r16, 0x4E	; 78
    4746:	65 e4       	ldi	r22, 0x45	; 69
    4748:	8e ea       	ldi	r24, 0xAE	; 174
    474a:	ea dc       	rcall	.-1580   	; 0x4120 <PNEWELSE2promWrite>
		memory_address_incr++;
    474c:	80 91 c2 20 	lds	r24, 0x20C2
    4750:	90 91 c3 20 	lds	r25, 0x20C3
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	90 93 c3 20 	sts	0x20C3, r25
    475a:	80 93 c2 20 	sts	0x20C2, r24
		pne_delayms(10);
    475e:	8a e0       	ldi	r24, 0x0A	; 10
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	f1 db       	rcall	.-2078   	; 0x3f46 <pne_delayms>
	}
	
	current_state_emergency_light = PNEWELS_Buffer.IsOutputEmergencyLED;
    4764:	80 91 c5 1f 	lds	r24, 0x1FC5
    4768:	80 93 c1 20 	sts	0x20C1, r24
	current_time = get_timestamp();
    476c:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <get_timestamp>
    4770:	6b 01       	movw	r12, r22
    4772:	7c 01       	movw	r14, r24
	time_4_byte = ((current_time & 0xFF000000) >> 24);
    4774:	4f 2d       	mov	r20, r15
    4776:	55 27       	eor	r21, r21
    4778:	66 27       	eor	r22, r22
    477a:	77 27       	eor	r23, r23
	time_3_byte = ((current_time & 0x00FF0000) >> 16);
    477c:	4e 2c       	mov	r4, r14
	time_2_byte = ((current_time & 0x0000FF00) >> 8);
    477e:	8d 2c       	mov	r8, r13
	time_1_byte = (current_time & 0x000000FF);
	status_byte1 = ((PNEWELS_Buffer.BUTTON_WPS & 0x01) | ((PNEWELS_Buffer.BUTTON_MANUAL & 0x01) << 1) | ((PNEWELS_Buffer.IsFactory & 0x01) << 2) | ((PNEWELS_Buffer.STATUS_VCHARGE & 0x01) << 3) | ((PNEWELS_Buffer.TEMP_ALARM & 0x01) << 4) | ((PNEWELS_Buffer.IsBatt & 0x01) << 5) | ((PNEWELS_Buffer.soft_manual & 0x01) << 6) | ((PNEWELS_Buffer.STATUS_AC & 0x01) << 7));
    4780:	a0 91 d9 1f 	lds	r26, 0x1FD9
    4784:	e0 e8       	ldi	r30, 0x80	; 128
    4786:	ae 9f       	mul	r26, r30
    4788:	d0 01       	movw	r26, r0
    478a:	11 24       	eor	r1, r1
    478c:	80 91 be 1f 	lds	r24, 0x1FBE
    4790:	81 70       	andi	r24, 0x01	; 1
    4792:	a8 2b       	or	r26, r24
    4794:	80 91 bd 1f 	lds	r24, 0x1FBD
    4798:	81 70       	andi	r24, 0x01	; 1
    479a:	89 83       	std	Y+1, r24	; 0x01
    479c:	1a 82       	std	Y+2, r1	; 0x02
    479e:	89 81       	ldd	r24, Y+1	; 0x01
    47a0:	9a 81       	ldd	r25, Y+2	; 0x02
    47a2:	88 0f       	add	r24, r24
    47a4:	99 1f       	adc	r25, r25
    47a6:	9a 2f       	mov	r25, r26
    47a8:	98 2b       	or	r25, r24
    47aa:	80 91 c1 1f 	lds	r24, 0x1FC1
    47ae:	80 fb       	bst	r24, 0
    47b0:	22 24       	eor	r2, r2
    47b2:	20 f8       	bld	r2, 0
    47b4:	31 2c       	mov	r3, r1
    47b6:	22 0c       	add	r2, r2
    47b8:	33 1c       	adc	r3, r3
    47ba:	22 0c       	add	r2, r2
    47bc:	33 1c       	adc	r3, r3
    47be:	29 2a       	or	r2, r25
    47c0:	aa eb       	ldi	r26, 0xBA	; 186
    47c2:	bf e1       	ldi	r27, 0x1F	; 31
    47c4:	8c 91       	ld	r24, X
    47c6:	81 70       	andi	r24, 0x01	; 1
    47c8:	8b 83       	std	Y+3, r24	; 0x03
    47ca:	1c 82       	std	Y+4, r1	; 0x04
    47cc:	eb 81       	ldd	r30, Y+3	; 0x03
    47ce:	fc 81       	ldd	r31, Y+4	; 0x04
    47d0:	ee 0f       	add	r30, r30
    47d2:	ff 1f       	adc	r31, r31
    47d4:	ee 0f       	add	r30, r30
    47d6:	ff 1f       	adc	r31, r31
    47d8:	ee 0f       	add	r30, r30
    47da:	ff 1f       	adc	r31, r31
    47dc:	82 2d       	mov	r24, r2
    47de:	8e 2b       	or	r24, r30
    47e0:	90 91 bf 1f 	lds	r25, 0x1FBF
    47e4:	91 70       	andi	r25, 0x01	; 1
    47e6:	9d 83       	std	Y+5, r25	; 0x05
    47e8:	1e 82       	std	Y+6, r1	; 0x06
    47ea:	2d 81       	ldd	r18, Y+5	; 0x05
    47ec:	3e 81       	ldd	r19, Y+6	; 0x06
    47ee:	22 95       	swap	r18
    47f0:	32 95       	swap	r19
    47f2:	30 7f       	andi	r19, 0xF0	; 240
    47f4:	32 27       	eor	r19, r18
    47f6:	20 7f       	andi	r18, 0xF0	; 240
    47f8:	32 27       	eor	r19, r18
    47fa:	28 2e       	mov	r2, r24
    47fc:	22 2a       	or	r2, r18
    47fe:	80 91 ca 1f 	lds	r24, 0x1FCA
    4802:	81 70       	andi	r24, 0x01	; 1
    4804:	8f 83       	std	Y+7, r24	; 0x07
    4806:	18 86       	std	Y+8, r1	; 0x08
    4808:	8f 81       	ldd	r24, Y+7	; 0x07
    480a:	98 85       	ldd	r25, Y+8	; 0x08
    480c:	88 0f       	add	r24, r24
    480e:	99 1f       	adc	r25, r25
    4810:	82 95       	swap	r24
    4812:	92 95       	swap	r25
    4814:	90 7f       	andi	r25, 0xF0	; 240
    4816:	98 27       	eor	r25, r24
    4818:	80 7f       	andi	r24, 0xF0	; 240
    481a:	98 27       	eor	r25, r24
    481c:	82 29       	or	r24, r2
    481e:	90 91 c2 1f 	lds	r25, 0x1FC2
    4822:	91 70       	andi	r25, 0x01	; 1
    4824:	99 87       	std	Y+9, r25	; 0x09
    4826:	1a 86       	std	Y+10, r1	; 0x0a
    4828:	29 84       	ldd	r2, Y+9	; 0x09
    482a:	3a 84       	ldd	r3, Y+10	; 0x0a
    482c:	00 24       	eor	r0, r0
    482e:	36 94       	lsr	r3
    4830:	27 94       	ror	r2
    4832:	07 94       	ror	r0
    4834:	36 94       	lsr	r3
    4836:	27 94       	ror	r2
    4838:	07 94       	ror	r0
    483a:	32 2c       	mov	r3, r2
    483c:	20 2c       	mov	r2, r0
    483e:	28 2a       	or	r2, r24
	status_byte2 = ((PNEWELS_Buffer.mode & 0x07) | ((PNEWELS_Buffer.IsOutputEmergencyLED & 0x01) << 3) | ((PNEWELS_Buffer.IsOutputDisableCharging & 0x01) << 4) | ((PNEWELS_Buffer.oled0 & 0x01) << 5) | ((PNEWELS_Buffer.oled1 & 0x01) << 6) | ((PNEWELS_Buffer.oled2 & 0x01) << 7));
    4840:	a0 91 e1 1f 	lds	r26, 0x1FE1
    4844:	e0 e8       	ldi	r30, 0x80	; 128
    4846:	ae 9f       	mul	r26, r30
    4848:	d0 01       	movw	r26, r0
    484a:	11 24       	eor	r1, r1
    484c:	80 91 cc 1f 	lds	r24, 0x1FCC
    4850:	87 70       	andi	r24, 0x07	; 7
    4852:	8a 2b       	or	r24, r26
    4854:	90 91 c5 1f 	lds	r25, 0x1FC5
    4858:	91 70       	andi	r25, 0x01	; 1
    485a:	9b 87       	std	Y+11, r25	; 0x0b
    485c:	1c 86       	std	Y+12, r1	; 0x0c
    485e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4860:	fc 85       	ldd	r31, Y+12	; 0x0c
    4862:	ee 0f       	add	r30, r30
    4864:	ff 1f       	adc	r31, r31
    4866:	ee 0f       	add	r30, r30
    4868:	ff 1f       	adc	r31, r31
    486a:	ee 0f       	add	r30, r30
    486c:	ff 1f       	adc	r31, r31
    486e:	8e 2b       	or	r24, r30
    4870:	90 91 c8 1f 	lds	r25, 0x1FC8
    4874:	91 70       	andi	r25, 0x01	; 1
    4876:	9d 87       	std	Y+13, r25	; 0x0d
    4878:	1e 86       	std	Y+14, r1	; 0x0e
    487a:	2d 85       	ldd	r18, Y+13	; 0x0d
    487c:	3e 85       	ldd	r19, Y+14	; 0x0e
    487e:	22 95       	swap	r18
    4880:	32 95       	swap	r19
    4882:	30 7f       	andi	r19, 0xF0	; 240
    4884:	32 27       	eor	r19, r18
    4886:	20 7f       	andi	r18, 0xF0	; 240
    4888:	32 27       	eor	r19, r18
    488a:	28 2b       	or	r18, r24
    488c:	80 91 df 1f 	lds	r24, 0x1FDF
    4890:	81 70       	andi	r24, 0x01	; 1
    4892:	8f 87       	std	Y+15, r24	; 0x0f
    4894:	18 8a       	std	Y+16, r1	; 0x10
    4896:	8f 85       	ldd	r24, Y+15	; 0x0f
    4898:	98 89       	ldd	r25, Y+16	; 0x10
    489a:	88 0f       	add	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	82 95       	swap	r24
    48a0:	92 95       	swap	r25
    48a2:	90 7f       	andi	r25, 0xF0	; 240
    48a4:	98 27       	eor	r25, r24
    48a6:	80 7f       	andi	r24, 0xF0	; 240
    48a8:	98 27       	eor	r25, r24
    48aa:	82 2b       	or	r24, r18
    48ac:	90 91 e0 1f 	lds	r25, 0x1FE0
    48b0:	91 70       	andi	r25, 0x01	; 1
    48b2:	99 8b       	std	Y+17, r25	; 0x11
    48b4:	1a 8a       	std	Y+18, r1	; 0x12
    48b6:	29 89       	ldd	r18, Y+17	; 0x11
    48b8:	3a 89       	ldd	r19, Y+18	; 0x12
    48ba:	00 24       	eor	r0, r0
    48bc:	36 95       	lsr	r19
    48be:	27 95       	ror	r18
    48c0:	07 94       	ror	r0
    48c2:	36 95       	lsr	r19
    48c4:	27 95       	ror	r18
    48c6:	07 94       	ror	r0
    48c8:	32 2f       	mov	r19, r18
    48ca:	20 2d       	mov	r18, r0
    48cc:	18 2f       	mov	r17, r24
    48ce:	12 2b       	or	r17, r18
	status_byte3 = ((PNEWELS_Buffer.led_ch1 & 0x01) | ((PNEWELS_Buffer.led_ch2 & 0x01) << 1) | ((PNEWELS_Buffer.led_drv0 & 0x01) << 2) | ((PNEWELS_Buffer.led_drv1 & 0x01) << 3) | ((PNEWELS_Buffer.led_drv2 & 0x01) << 4) | ((PNEWELS_Buffer.soft_charge & 0x01) << 5) | ((PNEWELS_Buffer.soft_discharge & 0x01) << 6));
    48d0:	80 91 db 1f 	lds	r24, 0x1FDB
    48d4:	81 70       	andi	r24, 0x01	; 1
    48d6:	8b 8b       	std	Y+19, r24	; 0x13
    48d8:	1c 8a       	std	Y+20, r1	; 0x14
    48da:	eb 89       	ldd	r30, Y+19	; 0x13
    48dc:	fc 89       	ldd	r31, Y+20	; 0x14
    48de:	ee 0f       	add	r30, r30
    48e0:	ff 1f       	adc	r31, r31
    48e2:	80 91 dc 1f 	lds	r24, 0x1FDC
    48e6:	81 70       	andi	r24, 0x01	; 1
    48e8:	8d 8b       	std	Y+21, r24	; 0x15
    48ea:	1e 8a       	std	Y+22, r1	; 0x16
    48ec:	8d 89       	ldd	r24, Y+21	; 0x15
    48ee:	9e 89       	ldd	r25, Y+22	; 0x16
    48f0:	88 0f       	add	r24, r24
    48f2:	99 1f       	adc	r25, r25
    48f4:	88 0f       	add	r24, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	8e 2b       	or	r24, r30
    48fa:	e0 91 da 1f 	lds	r30, 0x1FDA
    48fe:	e1 70       	andi	r30, 0x01	; 1
    4900:	8e 2b       	or	r24, r30
    4902:	90 91 dd 1f 	lds	r25, 0x1FDD
    4906:	91 70       	andi	r25, 0x01	; 1
    4908:	9f 8b       	std	Y+23, r25	; 0x17
    490a:	18 8e       	std	Y+24, r1	; 0x18
    490c:	ef 89       	ldd	r30, Y+23	; 0x17
    490e:	f8 8d       	ldd	r31, Y+24	; 0x18
    4910:	ee 0f       	add	r30, r30
    4912:	ff 1f       	adc	r31, r31
    4914:	ee 0f       	add	r30, r30
    4916:	ff 1f       	adc	r31, r31
    4918:	ee 0f       	add	r30, r30
    491a:	ff 1f       	adc	r31, r31
    491c:	8e 2b       	or	r24, r30
    491e:	90 91 de 1f 	lds	r25, 0x1FDE
    4922:	91 70       	andi	r25, 0x01	; 1
    4924:	99 8f       	std	Y+25, r25	; 0x19
    4926:	1a 8e       	std	Y+26, r1	; 0x1a
    4928:	29 8d       	ldd	r18, Y+25	; 0x19
    492a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    492c:	22 95       	swap	r18
    492e:	32 95       	swap	r19
    4930:	30 7f       	andi	r19, 0xF0	; 240
    4932:	32 27       	eor	r19, r18
    4934:	20 7f       	andi	r18, 0xF0	; 240
    4936:	32 27       	eor	r19, r18
    4938:	28 2b       	or	r18, r24
    493a:	80 91 c3 1f 	lds	r24, 0x1FC3
    493e:	81 70       	andi	r24, 0x01	; 1
    4940:	8b 8f       	std	Y+27, r24	; 0x1b
    4942:	1c 8e       	std	Y+28, r1	; 0x1c
    4944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4948:	88 0f       	add	r24, r24
    494a:	99 1f       	adc	r25, r25
    494c:	82 95       	swap	r24
    494e:	92 95       	swap	r25
    4950:	90 7f       	andi	r25, 0xF0	; 240
    4952:	98 27       	eor	r25, r24
    4954:	80 7f       	andi	r24, 0xF0	; 240
    4956:	98 27       	eor	r25, r24
    4958:	82 2b       	or	r24, r18
    495a:	90 91 c4 1f 	lds	r25, 0x1FC4
    495e:	91 70       	andi	r25, 0x01	; 1
    4960:	9d 8f       	std	Y+29, r25	; 0x1d
    4962:	1e 8e       	std	Y+30, r1	; 0x1e
    4964:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4966:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4968:	00 24       	eor	r0, r0
    496a:	36 95       	lsr	r19
    496c:	27 95       	ror	r18
    496e:	07 94       	ror	r0
    4970:	36 95       	lsr	r19
    4972:	27 95       	ror	r18
    4974:	07 94       	ror	r0
    4976:	32 2f       	mov	r19, r18
    4978:	20 2d       	mov	r18, r0
    497a:	38 2e       	mov	r3, r24
    497c:	32 2a       	or	r3, r18
		
	if (memory_address_incr >= 4092)
    497e:	80 91 c2 20 	lds	r24, 0x20C2
    4982:	90 91 c3 20 	lds	r25, 0x20C3
    4986:	8c 3f       	cpi	r24, 0xFC	; 252
    4988:	9f 40       	sbci	r25, 0x0F	; 15
    498a:	20 f0       	brcs	.+8      	; 0x4994 <store+0x6fe>
	{
		memory_address_incr = 0;
    498c:	10 92 c3 20 	sts	0x20C3, r1
    4990:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4994:	80 91 c2 20 	lds	r24, 0x20C2
    4998:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_4_byte);
    499c:	04 2f       	mov	r16, r20
    499e:	48 2f       	mov	r20, r24
    49a0:	65 e4       	ldi	r22, 0x45	; 69
    49a2:	8e ea       	ldi	r24, 0xAE	; 174
    49a4:	bd db       	rcall	.-2182   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    49a6:	80 91 c2 20 	lds	r24, 0x20C2
    49aa:	90 91 c3 20 	lds	r25, 0x20C3
    49ae:	01 96       	adiw	r24, 0x01	; 1
    49b0:	90 93 c3 20 	sts	0x20C3, r25
    49b4:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    49b8:	8a e0       	ldi	r24, 0x0A	; 10
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	c4 da       	rcall	.-2680   	; 0x3f46 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    49be:	80 91 c2 20 	lds	r24, 0x20C2
    49c2:	90 91 c3 20 	lds	r25, 0x20C3
    49c6:	8c 3f       	cpi	r24, 0xFC	; 252
    49c8:	9f 40       	sbci	r25, 0x0F	; 15
    49ca:	20 f0       	brcs	.+8      	; 0x49d4 <store+0x73e>
	{
		memory_address_incr = 0;
    49cc:	10 92 c3 20 	sts	0x20C3, r1
    49d0:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    49d4:	40 91 c2 20 	lds	r20, 0x20C2
    49d8:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_3_byte);
    49dc:	04 2d       	mov	r16, r4
    49de:	65 e4       	ldi	r22, 0x45	; 69
    49e0:	8e ea       	ldi	r24, 0xAE	; 174
    49e2:	9e db       	rcall	.-2244   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    49e4:	80 91 c2 20 	lds	r24, 0x20C2
    49e8:	90 91 c3 20 	lds	r25, 0x20C3
    49ec:	01 96       	adiw	r24, 0x01	; 1
    49ee:	90 93 c3 20 	sts	0x20C3, r25
    49f2:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    49f6:	8a e0       	ldi	r24, 0x0A	; 10
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	a5 da       	rcall	.-2742   	; 0x3f46 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    49fc:	80 91 c2 20 	lds	r24, 0x20C2
    4a00:	90 91 c3 20 	lds	r25, 0x20C3
    4a04:	8c 3f       	cpi	r24, 0xFC	; 252
    4a06:	9f 40       	sbci	r25, 0x0F	; 15
    4a08:	20 f0       	brcs	.+8      	; 0x4a12 <store+0x77c>
	{
		memory_address_incr = 0;
    4a0a:	10 92 c3 20 	sts	0x20C3, r1
    4a0e:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a12:	40 91 c2 20 	lds	r20, 0x20C2
    4a16:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_2_byte);
    4a1a:	08 2d       	mov	r16, r8
    4a1c:	65 e4       	ldi	r22, 0x45	; 69
    4a1e:	8e ea       	ldi	r24, 0xAE	; 174
    4a20:	7f db       	rcall	.-2306   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    4a22:	80 91 c2 20 	lds	r24, 0x20C2
    4a26:	90 91 c3 20 	lds	r25, 0x20C3
    4a2a:	01 96       	adiw	r24, 0x01	; 1
    4a2c:	90 93 c3 20 	sts	0x20C3, r25
    4a30:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    4a34:	8a e0       	ldi	r24, 0x0A	; 10
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	86 da       	rcall	.-2804   	; 0x3f46 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4a3a:	80 91 c2 20 	lds	r24, 0x20C2
    4a3e:	90 91 c3 20 	lds	r25, 0x20C3
    4a42:	8c 3f       	cpi	r24, 0xFC	; 252
    4a44:	9f 40       	sbci	r25, 0x0F	; 15
    4a46:	20 f0       	brcs	.+8      	; 0x4a50 <store+0x7ba>
	{
		memory_address_incr = 0;
    4a48:	10 92 c3 20 	sts	0x20C3, r1
    4a4c:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a50:	40 91 c2 20 	lds	r20, 0x20C2
    4a54:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_1_byte);
    4a58:	0c 2d       	mov	r16, r12
    4a5a:	65 e4       	ldi	r22, 0x45	; 69
    4a5c:	8e ea       	ldi	r24, 0xAE	; 174
    4a5e:	60 db       	rcall	.-2368   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    4a60:	80 91 c2 20 	lds	r24, 0x20C2
    4a64:	90 91 c3 20 	lds	r25, 0x20C3
    4a68:	01 96       	adiw	r24, 0x01	; 1
    4a6a:	90 93 c3 20 	sts	0x20C3, r25
    4a6e:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    4a72:	8a e0       	ldi	r24, 0x0A	; 10
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	67 da       	rcall	.-2866   	; 0x3f46 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4a78:	80 91 c2 20 	lds	r24, 0x20C2
    4a7c:	90 91 c3 20 	lds	r25, 0x20C3
    4a80:	8c 3f       	cpi	r24, 0xFC	; 252
    4a82:	9f 40       	sbci	r25, 0x0F	; 15
    4a84:	20 f0       	brcs	.+8      	; 0x4a8e <store+0x7f8>
	{
		memory_address_incr = 0;
    4a86:	10 92 c3 20 	sts	0x20C3, r1
    4a8a:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a8e:	40 91 c2 20 	lds	r20, 0x20C2
    4a92:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, PNEWELS_Buffer.V_BATT);
    4a96:	00 91 bb 1f 	lds	r16, 0x1FBB
    4a9a:	65 e4       	ldi	r22, 0x45	; 69
    4a9c:	8e ea       	ldi	r24, 0xAE	; 174
    4a9e:	40 db       	rcall	.-2432   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    4aa0:	80 91 c2 20 	lds	r24, 0x20C2
    4aa4:	90 91 c3 20 	lds	r25, 0x20C3
    4aa8:	01 96       	adiw	r24, 0x01	; 1
    4aaa:	90 93 c3 20 	sts	0x20C3, r25
    4aae:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    4ab2:	8a e0       	ldi	r24, 0x0A	; 10
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	47 da       	rcall	.-2930   	; 0x3f46 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4ab8:	80 91 c2 20 	lds	r24, 0x20C2
    4abc:	90 91 c3 20 	lds	r25, 0x20C3
    4ac0:	8c 3f       	cpi	r24, 0xFC	; 252
    4ac2:	9f 40       	sbci	r25, 0x0F	; 15
    4ac4:	20 f0       	brcs	.+8      	; 0x4ace <store+0x838>
	{
		memory_address_incr = 0;
    4ac6:	10 92 c3 20 	sts	0x20C3, r1
    4aca:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4ace:	40 91 c2 20 	lds	r20, 0x20C2
    4ad2:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, PNEWELS_Buffer.temperature);
    4ad6:	00 91 c0 1f 	lds	r16, 0x1FC0
    4ada:	65 e4       	ldi	r22, 0x45	; 69
    4adc:	8e ea       	ldi	r24, 0xAE	; 174
    4ade:	20 db       	rcall	.-2496   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    4ae0:	80 91 c2 20 	lds	r24, 0x20C2
    4ae4:	90 91 c3 20 	lds	r25, 0x20C3
    4ae8:	01 96       	adiw	r24, 0x01	; 1
    4aea:	90 93 c3 20 	sts	0x20C3, r25
    4aee:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    4af2:	8a e0       	ldi	r24, 0x0A	; 10
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	27 da       	rcall	.-2994   	; 0x3f46 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4af8:	80 91 c2 20 	lds	r24, 0x20C2
    4afc:	90 91 c3 20 	lds	r25, 0x20C3
    4b00:	8c 3f       	cpi	r24, 0xFC	; 252
    4b02:	9f 40       	sbci	r25, 0x0F	; 15
    4b04:	20 f0       	brcs	.+8      	; 0x4b0e <store+0x878>
	{
		memory_address_incr = 0;
    4b06:	10 92 c3 20 	sts	0x20C3, r1
    4b0a:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4b0e:	40 91 c2 20 	lds	r20, 0x20C2
    4b12:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte1);
    4b16:	02 2d       	mov	r16, r2
    4b18:	65 e4       	ldi	r22, 0x45	; 69
    4b1a:	8e ea       	ldi	r24, 0xAE	; 174
    4b1c:	01 db       	rcall	.-2558   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    4b1e:	80 91 c2 20 	lds	r24, 0x20C2
    4b22:	90 91 c3 20 	lds	r25, 0x20C3
    4b26:	01 96       	adiw	r24, 0x01	; 1
    4b28:	90 93 c3 20 	sts	0x20C3, r25
    4b2c:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    4b30:	8a e0       	ldi	r24, 0x0A	; 10
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	08 da       	rcall	.-3056   	; 0x3f46 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4b36:	80 91 c2 20 	lds	r24, 0x20C2
    4b3a:	90 91 c3 20 	lds	r25, 0x20C3
    4b3e:	8c 3f       	cpi	r24, 0xFC	; 252
    4b40:	9f 40       	sbci	r25, 0x0F	; 15
    4b42:	20 f0       	brcs	.+8      	; 0x4b4c <store+0x8b6>
	{
		memory_address_incr = 0;
    4b44:	10 92 c3 20 	sts	0x20C3, r1
    4b48:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4b4c:	40 91 c2 20 	lds	r20, 0x20C2
    4b50:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte2);
    4b54:	01 2f       	mov	r16, r17
    4b56:	65 e4       	ldi	r22, 0x45	; 69
    4b58:	8e ea       	ldi	r24, 0xAE	; 174
    4b5a:	e2 da       	rcall	.-2620   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    4b5c:	80 91 c2 20 	lds	r24, 0x20C2
    4b60:	90 91 c3 20 	lds	r25, 0x20C3
    4b64:	01 96       	adiw	r24, 0x01	; 1
    4b66:	90 93 c3 20 	sts	0x20C3, r25
    4b6a:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    4b6e:	8a e0       	ldi	r24, 0x0A	; 10
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	e9 d9       	rcall	.-3118   	; 0x3f46 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4b74:	80 91 c2 20 	lds	r24, 0x20C2
    4b78:	90 91 c3 20 	lds	r25, 0x20C3
    4b7c:	8c 3f       	cpi	r24, 0xFC	; 252
    4b7e:	9f 40       	sbci	r25, 0x0F	; 15
    4b80:	20 f0       	brcs	.+8      	; 0x4b8a <store+0x8f4>
	{
		memory_address_incr = 0;
    4b82:	10 92 c3 20 	sts	0x20C3, r1
    4b86:	10 92 c2 20 	sts	0x20C2, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4b8a:	40 91 c2 20 	lds	r20, 0x20C2
    4b8e:	20 91 c3 20 	lds	r18, 0x20C3
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte3);
    4b92:	03 2d       	mov	r16, r3
    4b94:	65 e4       	ldi	r22, 0x45	; 69
    4b96:	8e ea       	ldi	r24, 0xAE	; 174
    4b98:	c3 da       	rcall	.-2682   	; 0x4120 <PNEWELSE2promWrite>
	memory_address_incr++;
    4b9a:	80 91 c2 20 	lds	r24, 0x20C2
    4b9e:	90 91 c3 20 	lds	r25, 0x20C3
    4ba2:	01 96       	adiw	r24, 0x01	; 1
    4ba4:	90 93 c3 20 	sts	0x20C3, r25
    4ba8:	80 93 c2 20 	sts	0x20C2, r24
	pne_delayms(10);
    4bac:	8a e0       	ldi	r24, 0x0A	; 10
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	ca d9       	rcall	.-3180   	; 0x3f46 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4bb2:	80 91 c2 20 	lds	r24, 0x20C2
    4bb6:	90 91 c3 20 	lds	r25, 0x20C3
    4bba:	8c 3f       	cpi	r24, 0xFC	; 252
    4bbc:	9f 40       	sbci	r25, 0x0F	; 15
    4bbe:	20 f0       	brcs	.+8      	; 0x4bc8 <store+0x932>
	{
		memory_address_incr = 0;
    4bc0:	10 92 c3 20 	sts	0x20C3, r1
    4bc4:	10 92 c2 20 	sts	0x20C2, r1
	}
	memoryCounter_save(memory_address_incr);
    4bc8:	80 91 c2 20 	lds	r24, 0x20C2
    4bcc:	90 91 c3 20 	lds	r25, 0x20C3
    4bd0:	5e db       	rcall	.-2372   	; 0x428e <memoryCounter_save>
	pne_delayms(10);
    4bd2:	8a e0       	ldi	r24, 0x0A	; 10
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	b7 d9       	rcall	.-3218   	; 0x3f46 <pne_delayms>
	

}
    4bd8:	6e 96       	adiw	r28, 0x1e	; 30
    4bda:	0f b6       	in	r0, 0x3f	; 63
    4bdc:	f8 94       	cli
    4bde:	de bf       	out	0x3e, r29	; 62
    4be0:	0f be       	out	0x3f, r0	; 63
    4be2:	cd bf       	out	0x3d, r28	; 61
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	1f 91       	pop	r17
    4bea:	0f 91       	pop	r16
    4bec:	ff 90       	pop	r15
    4bee:	ef 90       	pop	r14
    4bf0:	df 90       	pop	r13
    4bf2:	cf 90       	pop	r12
    4bf4:	bf 90       	pop	r11
    4bf6:	af 90       	pop	r10
    4bf8:	9f 90       	pop	r9
    4bfa:	8f 90       	pop	r8
    4bfc:	7f 90       	pop	r7
    4bfe:	6f 90       	pop	r6
    4c00:	5f 90       	pop	r5
    4c02:	4f 90       	pop	r4
    4c04:	3f 90       	pop	r3
    4c06:	2f 90       	pop	r2
    4c08:	08 95       	ret

00004c0a <send_usart_char>:
	while (tx_buf[i] != 0x00)
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
		i++;
	}
}
    4c0a:	0f 93       	push	r16
    4c0c:	1f 93       	push	r17
    4c0e:	cf 93       	push	r28
    4c10:	fc 01       	movw	r30, r24
    4c12:	60 81       	ld	r22, Z
    4c14:	66 23       	and	r22, r22
    4c16:	69 f0       	breq	.+26     	; 0x4c32 <send_usart_char+0x28>
    4c18:	8c 01       	movw	r16, r24
    4c1a:	c0 e0       	ldi	r28, 0x00	; 0
    4c1c:	88 ec       	ldi	r24, 0xC8	; 200
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
    4c24:	cf 5f       	subi	r28, 0xFF	; 255
    4c26:	f8 01       	movw	r30, r16
    4c28:	ec 0f       	add	r30, r28
    4c2a:	f1 1d       	adc	r31, r1
    4c2c:	60 81       	ld	r22, Z
    4c2e:	61 11       	cpse	r22, r1
    4c30:	f5 cf       	rjmp	.-22     	; 0x4c1c <send_usart_char+0x12>
    4c32:	cf 91       	pop	r28
    4c34:	1f 91       	pop	r17
    4c36:	0f 91       	pop	r16
    4c38:	08 95       	ret

00004c3a <pnewels_get_usart>:
    4c3a:	90 91 8e 20 	lds	r25, 0x208E
    4c3e:	99 23       	and	r25, r25
    4c40:	19 f0       	breq	.+6      	; 0x4c48 <pnewels_get_usart+0xe>
    4c42:	91 30       	cpi	r25, 0x01	; 1
    4c44:	b9 f0       	breq	.+46     	; 0x4c74 <pnewels_get_usart+0x3a>
    4c46:	08 95       	ret
    4c48:	ec e3       	ldi	r30, 0x3C	; 60
    4c4a:	f0 e2       	ldi	r31, 0x20	; 32
    4c4c:	29 e4       	ldi	r18, 0x49	; 73
    4c4e:	30 e2       	ldi	r19, 0x20	; 32
    4c50:	90 e2       	ldi	r25, 0x20	; 32
    4c52:	91 93       	st	Z+, r25
    4c54:	e2 17       	cp	r30, r18
    4c56:	f3 07       	cpc	r31, r19
    4c58:	e1 f7       	brne	.-8      	; 0x4c52 <pnewels_get_usart+0x18>
    4c5a:	8b 35       	cpi	r24, 0x5B	; 91
    4c5c:	21 f4       	brne	.+8      	; 0x4c66 <pnewels_get_usart+0x2c>
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	80 93 8e 20 	sts	0x208E, r24
    4c64:	08 95       	ret
    4c66:	8d 35       	cpi	r24, 0x5D	; 93
    4c68:	19 f5       	brne	.+70     	; 0x4cb0 <pnewels_get_usart+0x76>
    4c6a:	10 92 1f 20 	sts	0x201F, r1
    4c6e:	10 92 8e 20 	sts	0x208E, r1
    4c72:	08 95       	ret
    4c74:	8d 35       	cpi	r24, 0x5D	; 93
    4c76:	41 f4       	brne	.+16     	; 0x4c88 <pnewels_get_usart+0x4e>
    4c78:	10 92 1f 20 	sts	0x201F, r1
    4c7c:	10 92 8e 20 	sts	0x208E, r1
    4c80:	81 e0       	ldi	r24, 0x01	; 1
    4c82:	80 93 fb 1f 	sts	0x1FFB, r24
    4c86:	08 95       	ret
    4c88:	90 91 1f 20 	lds	r25, 0x201F
    4c8c:	9d 30       	cpi	r25, 0x0D	; 13
    4c8e:	48 f4       	brcc	.+18     	; 0x4ca2 <pnewels_get_usart+0x68>
    4c90:	e9 2f       	mov	r30, r25
    4c92:	f0 e0       	ldi	r31, 0x00	; 0
    4c94:	e4 5c       	subi	r30, 0xC4	; 196
    4c96:	ff 4d       	sbci	r31, 0xDF	; 223
    4c98:	80 83       	st	Z, r24
    4c9a:	9f 5f       	subi	r25, 0xFF	; 255
    4c9c:	90 93 1f 20 	sts	0x201F, r25
    4ca0:	08 95       	ret
    4ca2:	10 92 1f 20 	sts	0x201F, r1
    4ca6:	10 92 8e 20 	sts	0x208E, r1
    4caa:	8c ee       	ldi	r24, 0xEC	; 236
    4cac:	92 e0       	ldi	r25, 0x02	; 2
    4cae:	ad cf       	rjmp	.-166    	; 0x4c0a <send_usart_char>
    4cb0:	08 95       	ret

00004cb2 <int_to_ascii>:


//---------- side function for factory mode ----------//
void int_to_ascii(uint8_t number)
{
    4cb2:	cf 93       	push	r28
    4cb4:	c8 2f       	mov	r28, r24
	uint8_t display;
	
	display = ((number>>4) & 0x0F);
    4cb6:	68 2f       	mov	r22, r24
    4cb8:	62 95       	swap	r22
    4cba:	6f 70       	andi	r22, 0x0F	; 15
	if (display > 9)
    4cbc:	6a 30       	cpi	r22, 0x0A	; 10
    4cbe:	10 f0       	brcs	.+4      	; 0x4cc4 <int_to_ascii+0x12>
	{
		display = display + 0x37;
    4cc0:	69 5c       	subi	r22, 0xC9	; 201
    4cc2:	01 c0       	rjmp	.+2      	; 0x4cc6 <int_to_ascii+0x14>
	}
	else
	{
		display = display + 0x30;
    4cc4:	60 5d       	subi	r22, 0xD0	; 208
	}
	usart_putchar(USART_SERIAL_EXAMPLE, display);
    4cc6:	88 ec       	ldi	r24, 0xC8	; 200
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
	
	display = ((number) & 0x0F);
    4cce:	cf 70       	andi	r28, 0x0F	; 15
	if (display > 9)
    4cd0:	ca 30       	cpi	r28, 0x0A	; 10
    4cd2:	18 f0       	brcs	.+6      	; 0x4cda <int_to_ascii+0x28>
	{
		display = display + 0x37;
    4cd4:	67 e3       	ldi	r22, 0x37	; 55
    4cd6:	6c 0f       	add	r22, r28
    4cd8:	02 c0       	rjmp	.+4      	; 0x4cde <int_to_ascii+0x2c>
	}
	else
	{
		display = display + 0x30;
    4cda:	60 e3       	ldi	r22, 0x30	; 48
    4cdc:	6c 0f       	add	r22, r28
	}
	usart_putchar(USART_SERIAL_EXAMPLE, display);
    4cde:	88 ec       	ldi	r24, 0xC8	; 200
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
}
    4ce6:	cf 91       	pop	r28
    4ce8:	08 95       	ret

00004cea <optionSelect>:
}

uint8_t optionSelect()
{
	/*char real_command[3] = "123";*/
	flag = 0;
    4cea:	10 92 fb 1f 	sts	0x1FFB, r1
	
	switch(commamd[0])
    4cee:	e0 91 3c 20 	lds	r30, 0x203C
    4cf2:	8e 2f       	mov	r24, r30
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	f1 97       	sbiw	r30, 0x31	; 49
    4cfa:	e9 30       	cpi	r30, 0x09	; 9
    4cfc:	f1 05       	cpc	r31, r1
    4cfe:	b0 f4       	brcc	.+44     	; 0x4d2c <optionSelect+0x42>
    4d00:	88 27       	eor	r24, r24
    4d02:	ed 59       	subi	r30, 0x9D	; 157
    4d04:	fe 4f       	sbci	r31, 0xFE	; 254
    4d06:	8f 4f       	sbci	r24, 0xFF	; 255
    4d08:	0c 94 0a 4c 	jmp	0x9814	; 0x9814 <__tablejump2__>
		case '1':
			return 1;
		break;
		
		case '2':
			return 2;
    4d0c:	82 e0       	ldi	r24, 0x02	; 2
    4d0e:	08 95       	ret
		break;
		
		case '3':
			return 3;
    4d10:	83 e0       	ldi	r24, 0x03	; 3
    4d12:	08 95       	ret
		break;
		
		case '4':
			return 4;
    4d14:	84 e0       	ldi	r24, 0x04	; 4
    4d16:	08 95       	ret
		break;
		
		case '5':
			return 5;
    4d18:	85 e0       	ldi	r24, 0x05	; 5
    4d1a:	08 95       	ret
		break;
		
		case '6':
			return 6;
    4d1c:	86 e0       	ldi	r24, 0x06	; 6
    4d1e:	08 95       	ret
		break;
		
		case '7':
			return 7;
    4d20:	87 e0       	ldi	r24, 0x07	; 7
    4d22:	08 95       	ret
		break;
		
		case '8':
			return 8;
    4d24:	88 e0       	ldi	r24, 0x08	; 8
    4d26:	08 95       	ret
		break;
		
		case '9':
			return 9;
    4d28:	89 e0       	ldi	r24, 0x09	; 9
    4d2a:	08 95       	ret
		break;
		
		default:
			send_usart_char("Invalid command\r\n");
    4d2c:	8c e0       	ldi	r24, 0x0C	; 12
    4d2e:	93 e0       	ldi	r25, 0x03	; 3
    4d30:	6c df       	rcall	.-296    	; 0x4c0a <send_usart_char>
		break;
			
	}
		return idle;
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
			return 1;
    4d36:	81 e0       	ldi	r24, 0x01	; 1
			send_usart_char("Invalid command\r\n");
		break;
			
	}
		return idle;
}
    4d38:	08 95       	ret

00004d3a <configSelect>:
}

uint8_t configSelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    4d3a:	10 92 fb 1f 	sts	0x1FFB, r1
	
	switch(commamd[0])
    4d3e:	80 91 3c 20 	lds	r24, 0x203C
    4d42:	81 33       	cpi	r24, 0x31	; 49
    4d44:	a1 f0       	breq	.+40     	; 0x4d6e <configSelect+0x34>
    4d46:	18 f4       	brcc	.+6      	; 0x4d4e <configSelect+0x14>
    4d48:	80 33       	cpi	r24, 0x30	; 48
    4d4a:	51 f0       	breq	.+20     	; 0x4d60 <configSelect+0x26>
    4d4c:	0b c0       	rjmp	.+22     	; 0x4d64 <configSelect+0x2a>
    4d4e:	82 33       	cpi	r24, 0x32	; 50
    4d50:	19 f0       	breq	.+6      	; 0x4d58 <configSelect+0x1e>
    4d52:	83 33       	cpi	r24, 0x33	; 51
    4d54:	19 f0       	breq	.+6      	; 0x4d5c <configSelect+0x22>
    4d56:	06 c0       	rjmp	.+12     	; 0x4d64 <configSelect+0x2a>
		case '1':
			return config_DeviceADDR;
		break;
		
		case '2':
			return config_DeviceCH;
    4d58:	82 e0       	ldi	r24, 0x02	; 2
    4d5a:	08 95       	ret
		break;
		
		case '3':
			return config_DevicePAN;
    4d5c:	83 e0       	ldi	r24, 0x03	; 3
    4d5e:	08 95       	ret
		break;
		
		case '0':
			return config_exit;
    4d60:	84 e0       	ldi	r24, 0x04	; 4
    4d62:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    4d64:	8c e0       	ldi	r24, 0x0C	; 12
    4d66:	93 e0       	ldi	r25, 0x03	; 3
    4d68:	50 df       	rcall	.-352    	; 0x4c0a <send_usart_char>
			return config_idle;
    4d6a:	85 e0       	ldi	r24, 0x05	; 5
    4d6c:	08 95       	ret
// 		case '3':
// 			return config_NodeID;
// 		break;
		
		case '1':
			return config_DeviceADDR;
    4d6e:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		
			
	}
}
    4d70:	08 95       	ret

00004d72 <send_usart_const_char>:
		}
	}
}

void send_usart_const_char(const char *tx_buf)
{
    4d72:	0f 93       	push	r16
    4d74:	1f 93       	push	r17
    4d76:	cf 93       	push	r28
	uint8_t i =0;
	
	while (tx_buf[i] != 0x00)
    4d78:	fc 01       	movw	r30, r24
    4d7a:	60 81       	ld	r22, Z
    4d7c:	66 23       	and	r22, r22
    4d7e:	69 f0       	breq	.+26     	; 0x4d9a <send_usart_const_char+0x28>
    4d80:	8c 01       	movw	r16, r24
    4d82:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
    4d84:	88 ec       	ldi	r24, 0xC8	; 200
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
		i++;
    4d8c:	cf 5f       	subi	r28, 0xFF	; 255

void send_usart_const_char(const char *tx_buf)
{
	uint8_t i =0;
	
	while (tx_buf[i] != 0x00)
    4d8e:	f8 01       	movw	r30, r16
    4d90:	ec 0f       	add	r30, r28
    4d92:	f1 1d       	adc	r31, r1
    4d94:	60 81       	ld	r22, Z
    4d96:	61 11       	cpse	r22, r1
    4d98:	f5 cf       	rjmp	.-22     	; 0x4d84 <send_usart_const_char+0x12>
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
		i++;
	}
}
    4d9a:	cf 91       	pop	r28
    4d9c:	1f 91       	pop	r17
    4d9e:	0f 91       	pop	r16
    4da0:	08 95       	ret

00004da2 <send_operation_info>:

void send_operation_info(const char *name, uint8_t data)
{
    4da2:	cf 93       	push	r28
    4da4:	c6 2f       	mov	r28, r22
	send_usart_const_char(name);
    4da6:	e5 df       	rcall	.-54     	; 0x4d72 <send_usart_const_char>
	send_usart_char(" changed to ");
    4da8:	8e e1       	ldi	r24, 0x1E	; 30
    4daa:	93 e0       	ldi	r25, 0x03	; 3
    4dac:	2e df       	rcall	.-420    	; 0x4c0a <send_usart_char>
	int_to_ascii(data);
    4dae:	8c 2f       	mov	r24, r28
    4db0:	80 df       	rcall	.-256    	; 0x4cb2 <int_to_ascii>
	/*send_usart_char("\r\n");*/
}
    4db2:	cf 91       	pop	r28
    4db4:	08 95       	ret

00004db6 <config_read_input>:
			
	}
}

void config_read_input(uint16_t address, char data_length, const char *name)
{
    4db6:	9f 92       	push	r9
    4db8:	af 92       	push	r10
    4dba:	bf 92       	push	r11
    4dbc:	cf 92       	push	r12
    4dbe:	df 92       	push	r13
    4dc0:	ef 92       	push	r14
    4dc2:	ff 92       	push	r15
    4dc4:	0f 93       	push	r16
    4dc6:	1f 93       	push	r17
    4dc8:	cf 93       	push	r28
    4dca:	df 93       	push	r29
    4dcc:	f6 2e       	mov	r15, r22
    4dce:	6a 01       	movw	r12, r20
	uint8_t data_short = 0;
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
    4dd0:	21 e0       	ldi	r18, 0x01	; 1
    4dd2:	20 93 61 20 	sts	0x2061, r18
	flag = 0;
    4dd6:	10 92 fb 1f 	sts	0x1FFB, r1
	uint8_t memory_address_low = (address & 0xFF);
    4dda:	18 2f       	mov	r17, r24
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
    4ddc:	b9 2e       	mov	r11, r25
		{
			switch(data_length)
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    4dde:	cc e3       	ldi	r28, 0x3C	; 60
    4de0:	d0 e2       	ldi	r29, 0x20	; 32
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
    4de2:	aa 24       	eor	r10, r10
    4de4:	a3 94       	inc	r10
    4de6:	a8 0e       	add	r10, r24
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
	flag = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	while(config_waiting_input == 1)
    4de8:	5b c0       	rjmp	.+182    	; 0x4ea0 <config_read_input+0xea>
	{
		if(flag == 1)
    4dea:	30 91 fb 1f 	lds	r19, 0x1FFB
    4dee:	31 30       	cpi	r19, 0x01	; 1
    4df0:	e1 f7       	brne	.-8      	; 0x4dea <config_read_input+0x34>
		{
			switch(data_length)
    4df2:	81 e3       	ldi	r24, 0x31	; 49
    4df4:	f8 16       	cp	r15, r24
    4df6:	21 f0       	breq	.+8      	; 0x4e00 <config_read_input+0x4a>
    4df8:	82 e3       	ldi	r24, 0x32	; 50
    4dfa:	f8 16       	cp	r15, r24
    4dfc:	f1 f0       	breq	.+60     	; 0x4e3a <config_read_input+0x84>
    4dfe:	4d c0       	rjmp	.+154    	; 0x4e9a <config_read_input+0xe4>
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    4e00:	88 81       	ld	r24, Y
    4e02:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <ascii_to_hex>
    4e06:	e8 2e       	mov	r14, r24
					cache[1] = ascii_to_hex(commamd[1]);
    4e08:	89 81       	ldd	r24, Y+1	; 0x01
    4e0a:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <ascii_to_hex>
		{
			switch(data_length)
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    4e0e:	ee 0c       	add	r14, r14
    4e10:	ee 0c       	add	r14, r14
    4e12:	ee 0c       	add	r14, r14
    4e14:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
    4e16:	e8 2a       	or	r14, r24
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, data_short);
    4e18:	0e 2d       	mov	r16, r14
    4e1a:	2b 2d       	mov	r18, r11
    4e1c:	41 2f       	mov	r20, r17
    4e1e:	65 e4       	ldi	r22, 0x45	; 69
    4e20:	8e ea       	ldi	r24, 0xAE	; 174
    4e22:	7e d9       	rcall	.-3332   	; 0x4120 <PNEWELSE2promWrite>
					send_operation_info(name, data_short);
    4e24:	6e 2d       	mov	r22, r14
    4e26:	c6 01       	movw	r24, r12
    4e28:	bc df       	rcall	.-136    	; 0x4da2 <send_operation_info>
					pne_delayms(10);
    4e2a:	8a e0       	ldi	r24, 0x0A	; 10
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	8b d8       	rcall	.-3818   	; 0x3f46 <pne_delayms>

					config_waiting_input = 0;
    4e30:	10 92 61 20 	sts	0x2061, r1
					flag = 0;
    4e34:	10 92 fb 1f 	sts	0x1FFB, r1
				}
				break;
    4e38:	33 c0       	rjmp	.+102    	; 0x4ea0 <config_read_input+0xea>
				
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    4e3a:	88 81       	ld	r24, Y
    4e3c:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <ascii_to_hex>
    4e40:	e8 2e       	mov	r14, r24
					cache[1] = ascii_to_hex(commamd[1]);
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <ascii_to_hex>
				}
				break;
				
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    4e48:	ee 0c       	add	r14, r14
    4e4a:	ee 0c       	add	r14, r14
    4e4c:	ee 0c       	add	r14, r14
    4e4e:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
    4e50:	e8 2a       	or	r14, r24
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
    4e52:	0e 2d       	mov	r16, r14
    4e54:	2b 2d       	mov	r18, r11
    4e56:	4a 2d       	mov	r20, r10
    4e58:	65 e4       	ldi	r22, 0x45	; 69
    4e5a:	8e ea       	ldi	r24, 0xAE	; 174
    4e5c:	61 d9       	rcall	.-3390   	; 0x4120 <PNEWELSE2promWrite>
					cache[0] = ascii_to_hex(commamd[2])<<4;
    4e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e60:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <ascii_to_hex>
    4e64:	98 2e       	mov	r9, r24
					cache[1] = ascii_to_hex(commamd[3]);
    4e66:	8b 81       	ldd	r24, Y+3	; 0x03
    4e68:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <ascii_to_hex>
    4e6c:	08 2f       	mov	r16, r24
					send_operation_info(name, data_short);
    4e6e:	6e 2d       	mov	r22, r14
    4e70:	c6 01       	movw	r24, r12
    4e72:	97 df       	rcall	.-210    	; 0x4da2 <send_operation_info>
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
					cache[0] = ascii_to_hex(commamd[2])<<4;
    4e74:	e9 2c       	mov	r14, r9
    4e76:	ee 0c       	add	r14, r14
    4e78:	ee 0c       	add	r14, r14
    4e7a:	ee 0c       	add	r14, r14
    4e7c:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[3]);
					send_operation_info(name, data_short);
					data_short = cache[0] | cache[1];
    4e7e:	e0 2a       	or	r14, r16
					PNEWELSE2promWrite(0xAF, 'E', memory_address_low , memory_address_high, data_short);
    4e80:	0e 2d       	mov	r16, r14
    4e82:	2b 2d       	mov	r18, r11
    4e84:	41 2f       	mov	r20, r17
    4e86:	65 e4       	ldi	r22, 0x45	; 69
    4e88:	8f ea       	ldi	r24, 0xAF	; 175
    4e8a:	4a d9       	rcall	.-3436   	; 0x4120 <PNEWELSE2promWrite>
					int_to_ascii(data_short);
    4e8c:	8e 2d       	mov	r24, r14
    4e8e:	11 df       	rcall	.-478    	; 0x4cb2 <int_to_ascii>
					config_waiting_input = 0;
    4e90:	10 92 61 20 	sts	0x2061, r1
					flag = 0;
    4e94:	10 92 fb 1f 	sts	0x1FFB, r1
				}
				break;
    4e98:	03 c0       	rjmp	.+6      	; 0x4ea0 <config_read_input+0xea>
				
				default:
					send_usart_char("Critical Error! Please contact manufacturer.");
    4e9a:	8b e2       	ldi	r24, 0x2B	; 43
    4e9c:	93 e0       	ldi	r25, 0x03	; 3
    4e9e:	b5 de       	rcall	.-662    	; 0x4c0a <send_usart_char>
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
	flag = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	while(config_waiting_input == 1)
    4ea0:	30 91 61 20 	lds	r19, 0x2061
    4ea4:	31 30       	cpi	r19, 0x01	; 1
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <config_read_input+0xf4>
    4ea8:	a0 cf       	rjmp	.-192    	; 0x4dea <config_read_input+0x34>
		else
		{
			
		}
	}
}
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	1f 91       	pop	r17
    4eb0:	0f 91       	pop	r16
    4eb2:	ff 90       	pop	r15
    4eb4:	ef 90       	pop	r14
    4eb6:	df 90       	pop	r13
    4eb8:	cf 90       	pop	r12
    4eba:	bf 90       	pop	r11
    4ebc:	af 90       	pop	r10
    4ebe:	9f 90       	pop	r9
    4ec0:	08 95       	ret

00004ec2 <pneConfiguration>:
	usart_putchar(USART_SERIAL_EXAMPLE, display);
}

void pneConfiguration()
{
	switch(config_state)
    4ec2:	80 91 fc 1f 	lds	r24, 0x1FFC
    4ec6:	82 30       	cpi	r24, 0x02	; 2
    4ec8:	51 f1       	breq	.+84     	; 0x4f1e <pneConfiguration+0x5c>
    4eca:	28 f4       	brcc	.+10     	; 0x4ed6 <pneConfiguration+0x14>
    4ecc:	88 23       	and	r24, r24
    4ece:	59 f0       	breq	.+22     	; 0x4ee6 <pneConfiguration+0x24>
    4ed0:	81 30       	cpi	r24, 0x01	; 1
    4ed2:	c9 f0       	breq	.+50     	; 0x4f06 <pneConfiguration+0x44>
    4ed4:	41 c0       	rjmp	.+130    	; 0x4f58 <pneConfiguration+0x96>
    4ed6:	84 30       	cpi	r24, 0x04	; 4
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <pneConfiguration+0x1a>
    4eda:	39 c0       	rjmp	.+114    	; 0x4f4e <pneConfiguration+0x8c>
    4edc:	60 f1       	brcs	.+88     	; 0x4f36 <pneConfiguration+0x74>
    4ede:	85 30       	cpi	r24, 0x05	; 5
    4ee0:	09 f4       	brne	.+2      	; 0x4ee4 <pneConfiguration+0x22>
    4ee2:	3f c0       	rjmp	.+126    	; 0x4f62 <pneConfiguration+0xa0>
    4ee4:	39 c0       	rjmp	.+114    	; 0x4f58 <pneConfiguration+0x96>
	{
		case config_startup_message:
		{
			send_usart_char("\r\n\r\nConfiguration mode. Select an option:\r\n\r\n");
    4ee6:	88 e5       	ldi	r24, 0x58	; 88
    4ee8:	93 e0       	ldi	r25, 0x03	; 3
    4eea:	8f de       	rcall	.-738    	; 0x4c0a <send_usart_char>
/*			send_usart_char("1. Change Group ID\r\n");*/
			send_usart_char("1. Change Device Address\r\n2. Change Device Channel\r\n3. Change Device PAN ID\r\n");
    4eec:	86 e8       	ldi	r24, 0x86	; 134
    4eee:	93 e0       	ldi	r25, 0x03	; 3
    4ef0:	8c de       	rcall	.-744    	; 0x4c0a <send_usart_char>
			send_usart_char("0. Exit configuration mode\r\n");
    4ef2:	8b ef       	ldi	r24, 0xFB	; 251
    4ef4:	95 e0       	ldi	r25, 0x05	; 5
    4ef6:	89 de       	rcall	.-750    	; 0x4c0a <send_usart_char>
			configuration_flag = 1;
    4ef8:	81 e0       	ldi	r24, 0x01	; 1
    4efa:	80 93 35 20 	sts	0x2035, r24
			config_state = config_idle;
    4efe:	85 e0       	ldi	r24, 0x05	; 5
    4f00:	80 93 fc 1f 	sts	0x1FFC, r24
		}
		break;
    4f04:	08 95       	ret
// 		}
// 		break;
		
		case config_DeviceADDR:
		{
			send_usart_char("Enter new device address: \r\n");
    4f06:	84 ed       	ldi	r24, 0xD4	; 212
    4f08:	93 e0       	ldi	r25, 0x03	; 3
    4f0a:	7f de       	rcall	.-770    	; 0x4c0a <send_usart_char>
			config_read_input(DEVICE_ADDRESS_L, '2', deviceADDR_display);
    4f0c:	47 e5       	ldi	r20, 0x57	; 87
    4f0e:	58 e0       	ldi	r21, 0x08	; 8
    4f10:	62 e3       	ldi	r22, 0x32	; 50
    4f12:	8c ef       	ldi	r24, 0xFC	; 252
    4f14:	9f e0       	ldi	r25, 0x0F	; 15
    4f16:	4f df       	rcall	.-354    	; 0x4db6 <config_read_input>
			config_state = config_startup_message;
    4f18:	10 92 fc 1f 	sts	0x1FFC, r1
		}
		break;
    4f1c:	08 95       	ret
		
		case config_DeviceCH:
		{
			send_usart_char("Enter new device channel: \r\n");
    4f1e:	81 ef       	ldi	r24, 0xF1	; 241
    4f20:	93 e0       	ldi	r25, 0x03	; 3
    4f22:	73 de       	rcall	.-794    	; 0x4c0a <send_usart_char>
			config_read_input(DEVICE_CHANNEL_L, '2', deviceCH_display);
    4f24:	48 e4       	ldi	r20, 0x48	; 72
    4f26:	58 e0       	ldi	r21, 0x08	; 8
    4f28:	62 e3       	ldi	r22, 0x32	; 50
    4f2a:	8e ef       	ldi	r24, 0xFE	; 254
    4f2c:	9f e0       	ldi	r25, 0x0F	; 15
    4f2e:	43 df       	rcall	.-378    	; 0x4db6 <config_read_input>
			config_state = config_startup_message;
    4f30:	10 92 fc 1f 	sts	0x1FFC, r1
		}
		break;
    4f34:	08 95       	ret
		
		case config_DevicePAN:
		{
			send_usart_char("Enter new device PAN ID: \r\n");
    4f36:	8e e0       	ldi	r24, 0x0E	; 14
    4f38:	94 e0       	ldi	r25, 0x04	; 4
    4f3a:	67 de       	rcall	.-818    	; 0x4c0a <send_usart_char>
			config_read_input(DEVICE_PAN_L, '2', devicePAN_display);
    4f3c:	4a e3       	ldi	r20, 0x3A	; 58
    4f3e:	58 e0       	ldi	r21, 0x08	; 8
    4f40:	62 e3       	ldi	r22, 0x32	; 50
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	90 e1       	ldi	r25, 0x10	; 16
    4f46:	37 df       	rcall	.-402    	; 0x4db6 <config_read_input>
			config_state = config_startup_message;
    4f48:	10 92 fc 1f 	sts	0x1FFC, r1
		}
		break;
    4f4c:	08 95       	ret
		case config_idle:
		break;
		
		case config_exit:
		{
			configuration_flag = 0;
    4f4e:	10 92 35 20 	sts	0x2035, r1
			send_usart_char("Exiting config mode");
    4f52:	8a e2       	ldi	r24, 0x2A	; 42
    4f54:	94 e0       	ldi	r25, 0x04	; 4
    4f56:	59 de       	rcall	.-846    	; 0x4c0a <send_usart_char>
			option_select = option_message;
			config_state = config_startup_message;
		}
		default:
			option_select = option_message;
    4f58:	89 e0       	ldi	r24, 0x09	; 9
    4f5a:	80 93 11 20 	sts	0x2011, r24
			config_state = config_startup_message;
    4f5e:	10 92 fc 1f 	sts	0x1FFC, r1
    4f62:	08 95       	ret

00004f64 <resetSelect>:


uint8_t resetSelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    4f64:	10 92 fb 1f 	sts	0x1FFB, r1
	
	switch(commamd[0])
    4f68:	80 91 3c 20 	lds	r24, 0x203C
    4f6c:	82 33       	cpi	r24, 0x32	; 50
    4f6e:	61 f0       	breq	.+24     	; 0x4f88 <resetSelect+0x24>
    4f70:	28 f4       	brcc	.+10     	; 0x4f7c <resetSelect+0x18>
    4f72:	80 33       	cpi	r24, 0x30	; 48
    4f74:	89 f0       	breq	.+34     	; 0x4f98 <resetSelect+0x34>
    4f76:	81 33       	cpi	r24, 0x31	; 49
    4f78:	b1 f0       	breq	.+44     	; 0x4fa6 <resetSelect+0x42>
    4f7a:	10 c0       	rjmp	.+32     	; 0x4f9c <resetSelect+0x38>
    4f7c:	84 33       	cpi	r24, 0x34	; 52
    4f7e:	41 f0       	breq	.+16     	; 0x4f90 <resetSelect+0x2c>
    4f80:	28 f0       	brcs	.+10     	; 0x4f8c <resetSelect+0x28>
    4f82:	85 33       	cpi	r24, 0x35	; 53
    4f84:	39 f0       	breq	.+14     	; 0x4f94 <resetSelect+0x30>
    4f86:	0a c0       	rjmp	.+20     	; 0x4f9c <resetSelect+0x38>
		case '1':
		return reset_all;
		break;
		
		case '2':
		return reset_bit0;
    4f88:	82 e0       	ldi	r24, 0x02	; 2
    4f8a:	08 95       	ret
		break;
		
		case '3':
		return reset_bit1;
    4f8c:	83 e0       	ldi	r24, 0x03	; 3
    4f8e:	08 95       	ret
		break;
		
		case '4':
		return reset_read_status;
    4f90:	84 e0       	ldi	r24, 0x04	; 4
    4f92:	08 95       	ret
		break;

		case '5':
		return reset_set_flag;
    4f94:	85 e0       	ldi	r24, 0x05	; 5
    4f96:	08 95       	ret
		break;
		
		case '0':
		return reset_exit;
    4f98:	87 e0       	ldi	r24, 0x07	; 7
    4f9a:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    4f9c:	8c e0       	ldi	r24, 0x0C	; 12
    4f9e:	93 e0       	ldi	r25, 0x03	; 3
    4fa0:	34 de       	rcall	.-920    	; 0x4c0a <send_usart_char>
			return reset_idle;
    4fa2:	86 e0       	ldi	r24, 0x06	; 6
    4fa4:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
		return reset_all;
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
			return reset_idle;
		}
		break;
				
	}
}
    4fa8:	08 95       	ret

00004faa <testMode>:

void testMode()
{
    4faa:	df 92       	push	r13
    4fac:	ef 92       	push	r14
    4fae:	ff 92       	push	r15
    4fb0:	0f 93       	push	r16
    4fb2:	1f 93       	push	r17
    4fb4:	cf 93       	push	r28
    4fb6:	df 93       	push	r29
	uint8_t button_status_factory6;
	uint8_t button_status_factory7;
	uint8_t button_status_factory8;
	uint8_t button_status_factory9;
	
	switch(button)
    4fb8:	80 91 fd 1f 	lds	r24, 0x1FFD
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	8a 30       	cpi	r24, 0x0A	; 10
    4fc0:	91 05       	cpc	r25, r1
    4fc2:	08 f0       	brcs	.+2      	; 0x4fc6 <testMode+0x1c>
    4fc4:	ef c5       	rjmp	.+3038   	; 0x5ba4 <testMode+0xbfa>
    4fc6:	fc 01       	movw	r30, r24
    4fc8:	88 27       	eor	r24, r24
    4fca:	e4 59       	subi	r30, 0x94	; 148
    4fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    4fce:	8f 4f       	sbci	r24, 0xFF	; 255
    4fd0:	0c 94 0a 4c 	jmp	0x9814	; 0x9814 <__tablejump2__>
	{
		case button1:
		{
			gpio_clr(STATUS_LED_1);
    4fd4:	60 91 03 20 	lds	r22, 0x2003
    4fd8:	70 91 04 20 	lds	r23, 0x2004
    4fdc:	80 91 05 20 	lds	r24, 0x2005
    4fe0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(STATUS_LED_2);
    4fe4:	60 91 25 20 	lds	r22, 0x2025
    4fe8:	70 91 26 20 	lds	r23, 0x2026
    4fec:	80 91 27 20 	lds	r24, 0x2027
    4ff0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(CHARGING_DISABLE);
    4ff4:	60 91 37 20 	lds	r22, 0x2037
    4ff8:	70 91 38 20 	lds	r23, 0x2038
    4ffc:	80 91 39 20 	lds	r24, 0x2039
    5000:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(EMER_LIGHT_EN);
    5004:	60 91 07 20 	lds	r22, 0x2007
    5008:	70 91 08 20 	lds	r23, 0x2008
    500c:	80 91 09 20 	lds	r24, 0x2009
    5010:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(OUT_LED_CH0);
    5014:	60 91 e4 1f 	lds	r22, 0x1FE4
    5018:	70 91 e5 1f 	lds	r23, 0x1FE5
    501c:	80 91 e6 1f 	lds	r24, 0x1FE6
    5020:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(OUT_LED_CH1);
    5024:	60 91 b8 20 	lds	r22, 0x20B8
    5028:	70 91 b9 20 	lds	r23, 0x20B9
    502c:	80 91 ba 20 	lds	r24, 0x20BA
    5030:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(OUT_LED_CH2);
    5034:	60 91 be 20 	lds	r22, 0x20BE
    5038:	70 91 bf 20 	lds	r23, 0x20BF
    503c:	80 91 c0 20 	lds	r24, 0x20C0
    5040:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			
			send_usart_char("\r\nIO Switch ");
    5044:	8e e3       	ldi	r24, 0x3E	; 62
    5046:	94 e0       	ldi	r25, 0x04	; 4
    5048:	e0 dd       	rcall	.-1088   	; 0x4c0a <send_usart_char>
			send_usart_char("1");
    504a:	8f e6       	ldi	r24, 0x6F	; 111
    504c:	97 e0       	ldi	r25, 0x07	; 7
    504e:	dd dd       	rcall	.-1094   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
    5050:	60 91 b2 20 	lds	r22, 0x20B2
    5054:	70 91 b3 20 	lds	r23, 0x20B3
    5058:	80 91 b4 20 	lds	r24, 0x20B4
    505c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5060:	88 23       	and	r24, r24
    5062:	51 f0       	breq	.+20     	; 0x5078 <testMode+0xce>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
    5064:	60 91 b2 20 	lds	r22, 0x20B2
    5068:	70 91 b3 20 	lds	r23, 0x20B3
    506c:	80 91 b4 20 	lds	r24, 0x20B4
    5070:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("1");
			
			button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			
			while(button_status_factory != 1)
    5074:	81 11       	cpse	r24, r1
    5076:	f6 cf       	rjmp	.-20     	; 0x5064 <testMode+0xba>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5078:	60 91 ad 20 	lds	r22, 0x20AD
    507c:	70 91 ae 20 	lds	r23, 0x20AE
    5080:	80 91 af 20 	lds	r24, 0x20AF
    5084:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5088:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    508a:	60 91 00 20 	lds	r22, 0x2000
    508e:	70 91 01 20 	lds	r23, 0x2001
    5092:	80 91 02 20 	lds	r24, 0x2002
    5096:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    509a:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    509c:	60 91 5e 20 	lds	r22, 0x205E
    50a0:	70 91 5f 20 	lds	r23, 0x205F
    50a4:	80 91 60 20 	lds	r24, 0x2060
    50a8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    50ac:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    50ae:	60 91 b6 1f 	lds	r22, 0x1FB6
    50b2:	70 91 b7 1f 	lds	r23, 0x1FB7
    50b6:	80 91 b8 1f 	lds	r24, 0x1FB8
    50ba:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    50be:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    50c0:	60 91 0d 20 	lds	r22, 0x200D
    50c4:	70 91 0e 20 	lds	r23, 0x200E
    50c8:	80 91 0f 20 	lds	r24, 0x200F
    50cc:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    50d0:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    50d2:	60 91 f4 1f 	lds	r22, 0x1FF4
    50d6:	70 91 f5 1f 	lds	r23, 0x1FF5
    50da:	80 91 f6 1f 	lds	r24, 0x1FF6
    50de:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    50e2:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    50e4:	60 91 9d 20 	lds	r22, 0x209D
    50e8:	70 91 9e 20 	lds	r23, 0x209E
    50ec:	80 91 9f 20 	lds	r24, 0x209F
    50f0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    50f4:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    50f6:	60 91 5b 20 	lds	r22, 0x205B
    50fa:	70 91 5c 20 	lds	r23, 0x205C
    50fe:	80 91 5d 20 	lds	r24, 0x205D
    5102:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5106:	21 e0       	ldi	r18, 0x01	; 1
    5108:	d1 10       	cpse	r13, r1
    510a:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    510c:	91 e0       	ldi	r25, 0x01	; 1
    510e:	e1 10       	cpse	r14, r1
    5110:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5112:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5114:	91 e0       	ldi	r25, 0x01	; 1
    5116:	f1 10       	cpse	r15, r1
    5118:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    511a:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    511c:	21 e0       	ldi	r18, 0x01	; 1
    511e:	01 11       	cpse	r16, r1
    5120:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5122:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5124:	91 e0       	ldi	r25, 0x01	; 1
    5126:	11 11       	cpse	r17, r1
    5128:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    512a:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    512c:	21 e0       	ldi	r18, 0x01	; 1
    512e:	d1 11       	cpse	r29, r1
    5130:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5132:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5134:	91 e0       	ldi	r25, 0x01	; 1
    5136:	c1 11       	cpse	r28, r1
    5138:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    513a:	92 2b       	or	r25, r18
    513c:	29 f4       	brne	.+10     	; 0x5148 <testMode+0x19e>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    513e:	91 e0       	ldi	r25, 0x01	; 1
    5140:	81 11       	cpse	r24, r1
    5142:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5144:	99 23       	and	r25, r25
    5146:	49 f0       	breq	.+18     	; 0x515a <testMode+0x1b0>
			{
				send_usart_char(" ------FAIL");
    5148:	8b e4       	ldi	r24, 0x4B	; 75
    514a:	94 e0       	ldi	r25, 0x04	; 4
    514c:	5e dd       	rcall	.-1348   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    514e:	87 e5       	ldi	r24, 0x57	; 87
    5150:	94 e0       	ldi	r25, 0x04	; 4
    5152:	5b dd       	rcall	.-1354   	; 0x4c0a <send_usart_char>
				button = button1;
    5154:	10 92 fd 1f 	sts	0x1FFD, r1
    5158:	25 c5       	rjmp	.+2634   	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(STATUS_LED_1);
    515a:	60 91 03 20 	lds	r22, 0x2003
    515e:	70 91 04 20 	lds	r23, 0x2004
    5162:	80 91 05 20 	lds	r24, 0x2005
    5166:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    516a:	84 e7       	ldi	r24, 0x74	; 116
    516c:	94 e0       	ldi	r25, 0x04	; 4
    516e:	4d dd       	rcall	.-1382   	; 0x4c0a <send_usart_char>
				button = button2;
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	80 93 fd 1f 	sts	0x1FFD, r24
    5176:	16 c5       	rjmp	.+2604   	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button2:
		{
			send_usart_char("\r\nIO Switch ");
    5178:	8e e3       	ldi	r24, 0x3E	; 62
    517a:	94 e0       	ldi	r25, 0x04	; 4
    517c:	46 dd       	rcall	.-1396   	; 0x4c0a <send_usart_char>
			send_usart_char("2");
    517e:	80 e8       	ldi	r24, 0x80	; 128
    5180:	94 e0       	ldi	r25, 0x04	; 4
    5182:	43 dd       	rcall	.-1402   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5184:	60 91 ad 20 	lds	r22, 0x20AD
    5188:	70 91 ae 20 	lds	r23, 0x20AE
    518c:	80 91 af 20 	lds	r24, 0x20AF
    5190:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5194:	88 23       	and	r24, r24
    5196:	51 f0       	breq	.+20     	; 0x51ac <testMode+0x202>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5198:	60 91 ad 20 	lds	r22, 0x20AD
    519c:	70 91 ae 20 	lds	r23, 0x20AE
    51a0:	80 91 af 20 	lds	r24, 0x20AF
    51a4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("2");
			
			button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			
			while(button_status_factory != 1)
    51a8:	81 11       	cpse	r24, r1
    51aa:	f6 cf       	rjmp	.-20     	; 0x5198 <testMode+0x1ee>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    51ac:	60 91 b2 20 	lds	r22, 0x20B2
    51b0:	70 91 b3 20 	lds	r23, 0x20B3
    51b4:	80 91 b4 20 	lds	r24, 0x20B4
    51b8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    51bc:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    51be:	60 91 00 20 	lds	r22, 0x2000
    51c2:	70 91 01 20 	lds	r23, 0x2001
    51c6:	80 91 02 20 	lds	r24, 0x2002
    51ca:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    51ce:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    51d0:	60 91 5e 20 	lds	r22, 0x205E
    51d4:	70 91 5f 20 	lds	r23, 0x205F
    51d8:	80 91 60 20 	lds	r24, 0x2060
    51dc:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    51e0:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    51e2:	60 91 b6 1f 	lds	r22, 0x1FB6
    51e6:	70 91 b7 1f 	lds	r23, 0x1FB7
    51ea:	80 91 b8 1f 	lds	r24, 0x1FB8
    51ee:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    51f2:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    51f4:	60 91 0d 20 	lds	r22, 0x200D
    51f8:	70 91 0e 20 	lds	r23, 0x200E
    51fc:	80 91 0f 20 	lds	r24, 0x200F
    5200:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5204:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5206:	60 91 f4 1f 	lds	r22, 0x1FF4
    520a:	70 91 f5 1f 	lds	r23, 0x1FF5
    520e:	80 91 f6 1f 	lds	r24, 0x1FF6
    5212:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5216:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5218:	60 91 9d 20 	lds	r22, 0x209D
    521c:	70 91 9e 20 	lds	r23, 0x209E
    5220:	80 91 9f 20 	lds	r24, 0x209F
    5224:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5228:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    522a:	60 91 5b 20 	lds	r22, 0x205B
    522e:	70 91 5c 20 	lds	r23, 0x205C
    5232:	80 91 5d 20 	lds	r24, 0x205D
    5236:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    523a:	21 e0       	ldi	r18, 0x01	; 1
    523c:	d1 10       	cpse	r13, r1
    523e:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5240:	91 e0       	ldi	r25, 0x01	; 1
    5242:	e1 10       	cpse	r14, r1
    5244:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5246:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5248:	91 e0       	ldi	r25, 0x01	; 1
    524a:	f1 10       	cpse	r15, r1
    524c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    524e:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5250:	21 e0       	ldi	r18, 0x01	; 1
    5252:	01 11       	cpse	r16, r1
    5254:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5256:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5258:	91 e0       	ldi	r25, 0x01	; 1
    525a:	11 11       	cpse	r17, r1
    525c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    525e:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5260:	21 e0       	ldi	r18, 0x01	; 1
    5262:	d1 11       	cpse	r29, r1
    5264:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5266:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5268:	91 e0       	ldi	r25, 0x01	; 1
    526a:	c1 11       	cpse	r28, r1
    526c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    526e:	92 2b       	or	r25, r18
    5270:	29 f4       	brne	.+10     	; 0x527c <testMode+0x2d2>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5272:	91 e0       	ldi	r25, 0x01	; 1
    5274:	81 11       	cpse	r24, r1
    5276:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5278:	99 23       	and	r25, r25
    527a:	49 f0       	breq	.+18     	; 0x528e <testMode+0x2e4>
			{
				send_usart_char(" ------FAIL");
    527c:	8b e4       	ldi	r24, 0x4B	; 75
    527e:	94 e0       	ldi	r25, 0x04	; 4
    5280:	c4 dc       	rcall	.-1656   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5282:	87 e5       	ldi	r24, 0x57	; 87
    5284:	94 e0       	ldi	r25, 0x04	; 4
    5286:	c1 dc       	rcall	.-1662   	; 0x4c0a <send_usart_char>
				button = button1;
    5288:	10 92 fd 1f 	sts	0x1FFD, r1
    528c:	8b c4       	rjmp	.+2326   	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(STATUS_LED_2);
    528e:	60 91 25 20 	lds	r22, 0x2025
    5292:	70 91 26 20 	lds	r23, 0x2026
    5296:	80 91 27 20 	lds	r24, 0x2027
    529a:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    529e:	84 e7       	ldi	r24, 0x74	; 116
    52a0:	94 e0       	ldi	r25, 0x04	; 4
    52a2:	b3 dc       	rcall	.-1690   	; 0x4c0a <send_usart_char>
				button = button3;
    52a4:	82 e0       	ldi	r24, 0x02	; 2
    52a6:	80 93 fd 1f 	sts	0x1FFD, r24
    52aa:	7c c4       	rjmp	.+2296   	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button3:
		{
			send_usart_char("\r\nIO Switch ");
    52ac:	8e e3       	ldi	r24, 0x3E	; 62
    52ae:	94 e0       	ldi	r25, 0x04	; 4
    52b0:	ac dc       	rcall	.-1704   	; 0x4c0a <send_usart_char>
			send_usart_char("3");
    52b2:	8d e2       	ldi	r24, 0x2D	; 45
    52b4:	92 e0       	ldi	r25, 0x02	; 2
    52b6:	a9 dc       	rcall	.-1710   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    52b8:	60 91 00 20 	lds	r22, 0x2000
    52bc:	70 91 01 20 	lds	r23, 0x2001
    52c0:	80 91 02 20 	lds	r24, 0x2002
    52c4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    52c8:	88 23       	and	r24, r24
    52ca:	51 f0       	breq	.+20     	; 0x52e0 <testMode+0x336>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    52cc:	60 91 00 20 	lds	r22, 0x2000
    52d0:	70 91 01 20 	lds	r23, 0x2001
    52d4:	80 91 02 20 	lds	r24, 0x2002
    52d8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("3");
			
			button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			
			while(button_status_factory != 1)
    52dc:	81 11       	cpse	r24, r1
    52de:	f6 cf       	rjmp	.-20     	; 0x52cc <testMode+0x322>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    52e0:	60 91 b2 20 	lds	r22, 0x20B2
    52e4:	70 91 b3 20 	lds	r23, 0x20B3
    52e8:	80 91 b4 20 	lds	r24, 0x20B4
    52ec:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    52f0:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    52f2:	60 91 ad 20 	lds	r22, 0x20AD
    52f6:	70 91 ae 20 	lds	r23, 0x20AE
    52fa:	80 91 af 20 	lds	r24, 0x20AF
    52fe:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5302:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5304:	60 91 5e 20 	lds	r22, 0x205E
    5308:	70 91 5f 20 	lds	r23, 0x205F
    530c:	80 91 60 20 	lds	r24, 0x2060
    5310:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5314:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5316:	60 91 b6 1f 	lds	r22, 0x1FB6
    531a:	70 91 b7 1f 	lds	r23, 0x1FB7
    531e:	80 91 b8 1f 	lds	r24, 0x1FB8
    5322:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5326:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5328:	60 91 0d 20 	lds	r22, 0x200D
    532c:	70 91 0e 20 	lds	r23, 0x200E
    5330:	80 91 0f 20 	lds	r24, 0x200F
    5334:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5338:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    533a:	60 91 f4 1f 	lds	r22, 0x1FF4
    533e:	70 91 f5 1f 	lds	r23, 0x1FF5
    5342:	80 91 f6 1f 	lds	r24, 0x1FF6
    5346:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    534a:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    534c:	60 91 9d 20 	lds	r22, 0x209D
    5350:	70 91 9e 20 	lds	r23, 0x209E
    5354:	80 91 9f 20 	lds	r24, 0x209F
    5358:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    535c:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    535e:	60 91 5b 20 	lds	r22, 0x205B
    5362:	70 91 5c 20 	lds	r23, 0x205C
    5366:	80 91 5d 20 	lds	r24, 0x205D
    536a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    536e:	21 e0       	ldi	r18, 0x01	; 1
    5370:	d1 10       	cpse	r13, r1
    5372:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5374:	91 e0       	ldi	r25, 0x01	; 1
    5376:	e1 10       	cpse	r14, r1
    5378:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    537a:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    537c:	91 e0       	ldi	r25, 0x01	; 1
    537e:	f1 10       	cpse	r15, r1
    5380:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5382:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5384:	21 e0       	ldi	r18, 0x01	; 1
    5386:	01 11       	cpse	r16, r1
    5388:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    538a:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    538c:	91 e0       	ldi	r25, 0x01	; 1
    538e:	11 11       	cpse	r17, r1
    5390:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5392:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5394:	21 e0       	ldi	r18, 0x01	; 1
    5396:	d1 11       	cpse	r29, r1
    5398:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    539a:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    539c:	91 e0       	ldi	r25, 0x01	; 1
    539e:	c1 11       	cpse	r28, r1
    53a0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    53a2:	92 2b       	or	r25, r18
    53a4:	29 f4       	brne	.+10     	; 0x53b0 <testMode+0x406>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    53a6:	91 e0       	ldi	r25, 0x01	; 1
    53a8:	81 11       	cpse	r24, r1
    53aa:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    53ac:	99 23       	and	r25, r25
    53ae:	49 f0       	breq	.+18     	; 0x53c2 <testMode+0x418>
			{
				send_usart_char(" ------FAIL");
    53b0:	8b e4       	ldi	r24, 0x4B	; 75
    53b2:	94 e0       	ldi	r25, 0x04	; 4
    53b4:	2a dc       	rcall	.-1964   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    53b6:	87 e5       	ldi	r24, 0x57	; 87
    53b8:	94 e0       	ldi	r25, 0x04	; 4
    53ba:	27 dc       	rcall	.-1970   	; 0x4c0a <send_usart_char>
				button = button1;
    53bc:	10 92 fd 1f 	sts	0x1FFD, r1
    53c0:	f1 c3       	rjmp	.+2018   	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(CHARGING_DISABLE);
    53c2:	60 91 37 20 	lds	r22, 0x2037
    53c6:	70 91 38 20 	lds	r23, 0x2038
    53ca:	80 91 39 20 	lds	r24, 0x2039
    53ce:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    53d2:	84 e7       	ldi	r24, 0x74	; 116
    53d4:	94 e0       	ldi	r25, 0x04	; 4
    53d6:	19 dc       	rcall	.-1998   	; 0x4c0a <send_usart_char>
				button = button4;
    53d8:	83 e0       	ldi	r24, 0x03	; 3
    53da:	80 93 fd 1f 	sts	0x1FFD, r24
    53de:	e2 c3       	rjmp	.+1988   	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button4:
		{
			send_usart_char("\r\nIO Switch ");
    53e0:	8e e3       	ldi	r24, 0x3E	; 62
    53e2:	94 e0       	ldi	r25, 0x04	; 4
    53e4:	12 dc       	rcall	.-2012   	; 0x4c0a <send_usart_char>
			send_usart_char("4");
    53e6:	82 e8       	ldi	r24, 0x82	; 130
    53e8:	94 e0       	ldi	r25, 0x04	; 4
    53ea:	0f dc       	rcall	.-2018   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    53ec:	60 91 5e 20 	lds	r22, 0x205E
    53f0:	70 91 5f 20 	lds	r23, 0x205F
    53f4:	80 91 60 20 	lds	r24, 0x2060
    53f8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    53fc:	88 23       	and	r24, r24
    53fe:	51 f0       	breq	.+20     	; 0x5414 <testMode+0x46a>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5400:	60 91 5e 20 	lds	r22, 0x205E
    5404:	70 91 5f 20 	lds	r23, 0x205F
    5408:	80 91 60 20 	lds	r24, 0x2060
    540c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("4");
			
			button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			
			while(button_status_factory != 1)
    5410:	81 11       	cpse	r24, r1
    5412:	f6 cf       	rjmp	.-20     	; 0x5400 <testMode+0x456>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5414:	60 91 b2 20 	lds	r22, 0x20B2
    5418:	70 91 b3 20 	lds	r23, 0x20B3
    541c:	80 91 b4 20 	lds	r24, 0x20B4
    5420:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5424:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5426:	60 91 ad 20 	lds	r22, 0x20AD
    542a:	70 91 ae 20 	lds	r23, 0x20AE
    542e:	80 91 af 20 	lds	r24, 0x20AF
    5432:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5436:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5438:	60 91 00 20 	lds	r22, 0x2000
    543c:	70 91 01 20 	lds	r23, 0x2001
    5440:	80 91 02 20 	lds	r24, 0x2002
    5444:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5448:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    544a:	60 91 b6 1f 	lds	r22, 0x1FB6
    544e:	70 91 b7 1f 	lds	r23, 0x1FB7
    5452:	80 91 b8 1f 	lds	r24, 0x1FB8
    5456:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    545a:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    545c:	60 91 0d 20 	lds	r22, 0x200D
    5460:	70 91 0e 20 	lds	r23, 0x200E
    5464:	80 91 0f 20 	lds	r24, 0x200F
    5468:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    546c:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    546e:	60 91 f4 1f 	lds	r22, 0x1FF4
    5472:	70 91 f5 1f 	lds	r23, 0x1FF5
    5476:	80 91 f6 1f 	lds	r24, 0x1FF6
    547a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    547e:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5480:	60 91 9d 20 	lds	r22, 0x209D
    5484:	70 91 9e 20 	lds	r23, 0x209E
    5488:	80 91 9f 20 	lds	r24, 0x209F
    548c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5490:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5492:	60 91 5b 20 	lds	r22, 0x205B
    5496:	70 91 5c 20 	lds	r23, 0x205C
    549a:	80 91 5d 20 	lds	r24, 0x205D
    549e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    54a2:	21 e0       	ldi	r18, 0x01	; 1
    54a4:	d1 10       	cpse	r13, r1
    54a6:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    54a8:	91 e0       	ldi	r25, 0x01	; 1
    54aa:	e1 10       	cpse	r14, r1
    54ac:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54ae:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    54b0:	91 e0       	ldi	r25, 0x01	; 1
    54b2:	f1 10       	cpse	r15, r1
    54b4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54b6:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    54b8:	21 e0       	ldi	r18, 0x01	; 1
    54ba:	01 11       	cpse	r16, r1
    54bc:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54be:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    54c0:	91 e0       	ldi	r25, 0x01	; 1
    54c2:	11 11       	cpse	r17, r1
    54c4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54c6:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    54c8:	21 e0       	ldi	r18, 0x01	; 1
    54ca:	d1 11       	cpse	r29, r1
    54cc:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54ce:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    54d0:	91 e0       	ldi	r25, 0x01	; 1
    54d2:	c1 11       	cpse	r28, r1
    54d4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54d6:	92 2b       	or	r25, r18
    54d8:	29 f4       	brne	.+10     	; 0x54e4 <testMode+0x53a>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    54da:	91 e0       	ldi	r25, 0x01	; 1
    54dc:	81 11       	cpse	r24, r1
    54de:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54e0:	99 23       	and	r25, r25
    54e2:	49 f0       	breq	.+18     	; 0x54f6 <testMode+0x54c>
			{
				send_usart_char(" ------FAIL");
    54e4:	8b e4       	ldi	r24, 0x4B	; 75
    54e6:	94 e0       	ldi	r25, 0x04	; 4
    54e8:	90 db       	rcall	.-2272   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    54ea:	87 e5       	ldi	r24, 0x57	; 87
    54ec:	94 e0       	ldi	r25, 0x04	; 4
    54ee:	8d db       	rcall	.-2278   	; 0x4c0a <send_usart_char>
				button = button1;
    54f0:	10 92 fd 1f 	sts	0x1FFD, r1
    54f4:	57 c3       	rjmp	.+1710   	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(EMER_LIGHT_EN);
    54f6:	60 91 07 20 	lds	r22, 0x2007
    54fa:	70 91 08 20 	lds	r23, 0x2008
    54fe:	80 91 09 20 	lds	r24, 0x2009
    5502:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    5506:	84 e7       	ldi	r24, 0x74	; 116
    5508:	94 e0       	ldi	r25, 0x04	; 4
    550a:	7f db       	rcall	.-2306   	; 0x4c0a <send_usart_char>
				button = button5;
    550c:	84 e0       	ldi	r24, 0x04	; 4
    550e:	80 93 fd 1f 	sts	0x1FFD, r24
    5512:	48 c3       	rjmp	.+1680   	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button5:
		{
			send_usart_char("\r\nIO Switch ");
    5514:	8e e3       	ldi	r24, 0x3E	; 62
    5516:	94 e0       	ldi	r25, 0x04	; 4
    5518:	78 db       	rcall	.-2320   	; 0x4c0a <send_usart_char>
			send_usart_char("5");
    551a:	84 e8       	ldi	r24, 0x84	; 132
    551c:	94 e0       	ldi	r25, 0x04	; 4
    551e:	75 db       	rcall	.-2326   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5520:	60 91 b6 1f 	lds	r22, 0x1FB6
    5524:	70 91 b7 1f 	lds	r23, 0x1FB7
    5528:	80 91 b8 1f 	lds	r24, 0x1FB8
    552c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5530:	88 23       	and	r24, r24
    5532:	51 f0       	breq	.+20     	; 0x5548 <testMode+0x59e>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5534:	60 91 b6 1f 	lds	r22, 0x1FB6
    5538:	70 91 b7 1f 	lds	r23, 0x1FB7
    553c:	80 91 b8 1f 	lds	r24, 0x1FB8
    5540:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("5");
			
			button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			
			while(button_status_factory != 1)
    5544:	81 11       	cpse	r24, r1
    5546:	f6 cf       	rjmp	.-20     	; 0x5534 <testMode+0x58a>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5548:	60 91 b2 20 	lds	r22, 0x20B2
    554c:	70 91 b3 20 	lds	r23, 0x20B3
    5550:	80 91 b4 20 	lds	r24, 0x20B4
    5554:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5558:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    555a:	60 91 ad 20 	lds	r22, 0x20AD
    555e:	70 91 ae 20 	lds	r23, 0x20AE
    5562:	80 91 af 20 	lds	r24, 0x20AF
    5566:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    556a:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    556c:	60 91 00 20 	lds	r22, 0x2000
    5570:	70 91 01 20 	lds	r23, 0x2001
    5574:	80 91 02 20 	lds	r24, 0x2002
    5578:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    557c:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    557e:	60 91 5e 20 	lds	r22, 0x205E
    5582:	70 91 5f 20 	lds	r23, 0x205F
    5586:	80 91 60 20 	lds	r24, 0x2060
    558a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    558e:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5590:	60 91 0d 20 	lds	r22, 0x200D
    5594:	70 91 0e 20 	lds	r23, 0x200E
    5598:	80 91 0f 20 	lds	r24, 0x200F
    559c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    55a0:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    55a2:	60 91 f4 1f 	lds	r22, 0x1FF4
    55a6:	70 91 f5 1f 	lds	r23, 0x1FF5
    55aa:	80 91 f6 1f 	lds	r24, 0x1FF6
    55ae:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    55b2:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    55b4:	60 91 9d 20 	lds	r22, 0x209D
    55b8:	70 91 9e 20 	lds	r23, 0x209E
    55bc:	80 91 9f 20 	lds	r24, 0x209F
    55c0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    55c4:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    55c6:	60 91 5b 20 	lds	r22, 0x205B
    55ca:	70 91 5c 20 	lds	r23, 0x205C
    55ce:	80 91 5d 20 	lds	r24, 0x205D
    55d2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    55d6:	21 e0       	ldi	r18, 0x01	; 1
    55d8:	d1 10       	cpse	r13, r1
    55da:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    55dc:	91 e0       	ldi	r25, 0x01	; 1
    55de:	e1 10       	cpse	r14, r1
    55e0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55e2:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    55e4:	91 e0       	ldi	r25, 0x01	; 1
    55e6:	f1 10       	cpse	r15, r1
    55e8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55ea:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    55ec:	21 e0       	ldi	r18, 0x01	; 1
    55ee:	01 11       	cpse	r16, r1
    55f0:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55f2:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    55f4:	91 e0       	ldi	r25, 0x01	; 1
    55f6:	11 11       	cpse	r17, r1
    55f8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55fa:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    55fc:	21 e0       	ldi	r18, 0x01	; 1
    55fe:	d1 11       	cpse	r29, r1
    5600:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5602:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5604:	91 e0       	ldi	r25, 0x01	; 1
    5606:	c1 11       	cpse	r28, r1
    5608:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    560a:	92 2b       	or	r25, r18
    560c:	29 f4       	brne	.+10     	; 0x5618 <testMode+0x66e>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    560e:	91 e0       	ldi	r25, 0x01	; 1
    5610:	81 11       	cpse	r24, r1
    5612:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5614:	99 23       	and	r25, r25
    5616:	49 f0       	breq	.+18     	; 0x562a <testMode+0x680>
			{
				send_usart_char(" ------FAIL");
    5618:	8b e4       	ldi	r24, 0x4B	; 75
    561a:	94 e0       	ldi	r25, 0x04	; 4
    561c:	f6 da       	rcall	.-2580   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    561e:	87 e5       	ldi	r24, 0x57	; 87
    5620:	94 e0       	ldi	r25, 0x04	; 4
    5622:	f3 da       	rcall	.-2586   	; 0x4c0a <send_usart_char>
				button = button1;
    5624:	10 92 fd 1f 	sts	0x1FFD, r1
    5628:	bd c2       	rjmp	.+1402   	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH0);
    562a:	60 91 e4 1f 	lds	r22, 0x1FE4
    562e:	70 91 e5 1f 	lds	r23, 0x1FE5
    5632:	80 91 e6 1f 	lds	r24, 0x1FE6
    5636:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    563a:	84 e7       	ldi	r24, 0x74	; 116
    563c:	94 e0       	ldi	r25, 0x04	; 4
    563e:	e5 da       	rcall	.-2614   	; 0x4c0a <send_usart_char>
				button = button6;
    5640:	85 e0       	ldi	r24, 0x05	; 5
    5642:	80 93 fd 1f 	sts	0x1FFD, r24
    5646:	ae c2       	rjmp	.+1372   	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button6:
		{
			send_usart_char("\r\nIO Switch ");
    5648:	8e e3       	ldi	r24, 0x3E	; 62
    564a:	94 e0       	ldi	r25, 0x04	; 4
    564c:	de da       	rcall	.-2628   	; 0x4c0a <send_usart_char>
			send_usart_char("6");
    564e:	86 e8       	ldi	r24, 0x86	; 134
    5650:	94 e0       	ldi	r25, 0x04	; 4
    5652:	db da       	rcall	.-2634   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5654:	60 91 0d 20 	lds	r22, 0x200D
    5658:	70 91 0e 20 	lds	r23, 0x200E
    565c:	80 91 0f 20 	lds	r24, 0x200F
    5660:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5664:	88 23       	and	r24, r24
    5666:	51 f0       	breq	.+20     	; 0x567c <testMode+0x6d2>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5668:	60 91 0d 20 	lds	r22, 0x200D
    566c:	70 91 0e 20 	lds	r23, 0x200E
    5670:	80 91 0f 20 	lds	r24, 0x200F
    5674:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("6");
			
			button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			
			while(button_status_factory != 1)
    5678:	81 11       	cpse	r24, r1
    567a:	f6 cf       	rjmp	.-20     	; 0x5668 <testMode+0x6be>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    567c:	60 91 b2 20 	lds	r22, 0x20B2
    5680:	70 91 b3 20 	lds	r23, 0x20B3
    5684:	80 91 b4 20 	lds	r24, 0x20B4
    5688:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    568c:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    568e:	60 91 ad 20 	lds	r22, 0x20AD
    5692:	70 91 ae 20 	lds	r23, 0x20AE
    5696:	80 91 af 20 	lds	r24, 0x20AF
    569a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    569e:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    56a0:	60 91 00 20 	lds	r22, 0x2000
    56a4:	70 91 01 20 	lds	r23, 0x2001
    56a8:	80 91 02 20 	lds	r24, 0x2002
    56ac:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    56b0:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    56b2:	60 91 5e 20 	lds	r22, 0x205E
    56b6:	70 91 5f 20 	lds	r23, 0x205F
    56ba:	80 91 60 20 	lds	r24, 0x2060
    56be:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    56c2:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    56c4:	60 91 b6 1f 	lds	r22, 0x1FB6
    56c8:	70 91 b7 1f 	lds	r23, 0x1FB7
    56cc:	80 91 b8 1f 	lds	r24, 0x1FB8
    56d0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    56d4:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    56d6:	60 91 f4 1f 	lds	r22, 0x1FF4
    56da:	70 91 f5 1f 	lds	r23, 0x1FF5
    56de:	80 91 f6 1f 	lds	r24, 0x1FF6
    56e2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    56e6:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    56e8:	60 91 9d 20 	lds	r22, 0x209D
    56ec:	70 91 9e 20 	lds	r23, 0x209E
    56f0:	80 91 9f 20 	lds	r24, 0x209F
    56f4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    56f8:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    56fa:	60 91 5b 20 	lds	r22, 0x205B
    56fe:	70 91 5c 20 	lds	r23, 0x205C
    5702:	80 91 5d 20 	lds	r24, 0x205D
    5706:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    570a:	21 e0       	ldi	r18, 0x01	; 1
    570c:	d1 10       	cpse	r13, r1
    570e:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5710:	91 e0       	ldi	r25, 0x01	; 1
    5712:	e1 10       	cpse	r14, r1
    5714:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5716:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5718:	91 e0       	ldi	r25, 0x01	; 1
    571a:	f1 10       	cpse	r15, r1
    571c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    571e:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5720:	21 e0       	ldi	r18, 0x01	; 1
    5722:	01 11       	cpse	r16, r1
    5724:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5726:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5728:	91 e0       	ldi	r25, 0x01	; 1
    572a:	11 11       	cpse	r17, r1
    572c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    572e:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5730:	21 e0       	ldi	r18, 0x01	; 1
    5732:	d1 11       	cpse	r29, r1
    5734:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5736:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5738:	91 e0       	ldi	r25, 0x01	; 1
    573a:	c1 11       	cpse	r28, r1
    573c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    573e:	92 2b       	or	r25, r18
    5740:	29 f4       	brne	.+10     	; 0x574c <testMode+0x7a2>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5742:	91 e0       	ldi	r25, 0x01	; 1
    5744:	81 11       	cpse	r24, r1
    5746:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5748:	99 23       	and	r25, r25
    574a:	49 f0       	breq	.+18     	; 0x575e <testMode+0x7b4>
			{
				send_usart_char(" ------FAIL");
    574c:	8b e4       	ldi	r24, 0x4B	; 75
    574e:	94 e0       	ldi	r25, 0x04	; 4
    5750:	5c da       	rcall	.-2888   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5752:	87 e5       	ldi	r24, 0x57	; 87
    5754:	94 e0       	ldi	r25, 0x04	; 4
    5756:	59 da       	rcall	.-2894   	; 0x4c0a <send_usart_char>
				button = button1;
    5758:	10 92 fd 1f 	sts	0x1FFD, r1
    575c:	23 c2       	rjmp	.+1094   	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH1);
    575e:	60 91 b8 20 	lds	r22, 0x20B8
    5762:	70 91 b9 20 	lds	r23, 0x20B9
    5766:	80 91 ba 20 	lds	r24, 0x20BA
    576a:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    576e:	84 e7       	ldi	r24, 0x74	; 116
    5770:	94 e0       	ldi	r25, 0x04	; 4
    5772:	4b da       	rcall	.-2922   	; 0x4c0a <send_usart_char>
				button = button7;
    5774:	86 e0       	ldi	r24, 0x06	; 6
    5776:	80 93 fd 1f 	sts	0x1FFD, r24
    577a:	14 c2       	rjmp	.+1064   	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button7:
		{
			send_usart_char("\r\nIO Switch ");
    577c:	8e e3       	ldi	r24, 0x3E	; 62
    577e:	94 e0       	ldi	r25, 0x04	; 4
    5780:	44 da       	rcall	.-2936   	; 0x4c0a <send_usart_char>
			send_usart_char("7");
    5782:	88 e8       	ldi	r24, 0x88	; 136
    5784:	94 e0       	ldi	r25, 0x04	; 4
    5786:	41 da       	rcall	.-2942   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
    5788:	60 91 f4 1f 	lds	r22, 0x1FF4
    578c:	70 91 f5 1f 	lds	r23, 0x1FF5
    5790:	80 91 f6 1f 	lds	r24, 0x1FF6
    5794:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5798:	88 23       	and	r24, r24
    579a:	51 f0       	breq	.+20     	; 0x57b0 <testMode+0x806>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
    579c:	60 91 f4 1f 	lds	r22, 0x1FF4
    57a0:	70 91 f5 1f 	lds	r23, 0x1FF5
    57a4:	80 91 f6 1f 	lds	r24, 0x1FF6
    57a8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("7");
			
			button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			
			while(button_status_factory != 1)
    57ac:	81 11       	cpse	r24, r1
    57ae:	f6 cf       	rjmp	.-20     	; 0x579c <testMode+0x7f2>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    57b0:	60 91 b2 20 	lds	r22, 0x20B2
    57b4:	70 91 b3 20 	lds	r23, 0x20B3
    57b8:	80 91 b4 20 	lds	r24, 0x20B4
    57bc:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    57c0:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    57c2:	60 91 ad 20 	lds	r22, 0x20AD
    57c6:	70 91 ae 20 	lds	r23, 0x20AE
    57ca:	80 91 af 20 	lds	r24, 0x20AF
    57ce:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    57d2:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    57d4:	60 91 00 20 	lds	r22, 0x2000
    57d8:	70 91 01 20 	lds	r23, 0x2001
    57dc:	80 91 02 20 	lds	r24, 0x2002
    57e0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    57e4:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    57e6:	60 91 5e 20 	lds	r22, 0x205E
    57ea:	70 91 5f 20 	lds	r23, 0x205F
    57ee:	80 91 60 20 	lds	r24, 0x2060
    57f2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    57f6:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    57f8:	60 91 b6 1f 	lds	r22, 0x1FB6
    57fc:	70 91 b7 1f 	lds	r23, 0x1FB7
    5800:	80 91 b8 1f 	lds	r24, 0x1FB8
    5804:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5808:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    580a:	60 91 0d 20 	lds	r22, 0x200D
    580e:	70 91 0e 20 	lds	r23, 0x200E
    5812:	80 91 0f 20 	lds	r24, 0x200F
    5816:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    581a:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    581c:	60 91 9d 20 	lds	r22, 0x209D
    5820:	70 91 9e 20 	lds	r23, 0x209E
    5824:	80 91 9f 20 	lds	r24, 0x209F
    5828:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    582c:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    582e:	60 91 5b 20 	lds	r22, 0x205B
    5832:	70 91 5c 20 	lds	r23, 0x205C
    5836:	80 91 5d 20 	lds	r24, 0x205D
    583a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    583e:	21 e0       	ldi	r18, 0x01	; 1
    5840:	d1 10       	cpse	r13, r1
    5842:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5844:	91 e0       	ldi	r25, 0x01	; 1
    5846:	e1 10       	cpse	r14, r1
    5848:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    584a:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    584c:	91 e0       	ldi	r25, 0x01	; 1
    584e:	f1 10       	cpse	r15, r1
    5850:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5852:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5854:	21 e0       	ldi	r18, 0x01	; 1
    5856:	01 11       	cpse	r16, r1
    5858:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    585a:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    585c:	91 e0       	ldi	r25, 0x01	; 1
    585e:	11 11       	cpse	r17, r1
    5860:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5862:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5864:	21 e0       	ldi	r18, 0x01	; 1
    5866:	d1 11       	cpse	r29, r1
    5868:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    586a:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    586c:	91 e0       	ldi	r25, 0x01	; 1
    586e:	c1 11       	cpse	r28, r1
    5870:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5872:	92 2b       	or	r25, r18
    5874:	29 f4       	brne	.+10     	; 0x5880 <testMode+0x8d6>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5876:	91 e0       	ldi	r25, 0x01	; 1
    5878:	81 11       	cpse	r24, r1
    587a:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    587c:	99 23       	and	r25, r25
    587e:	49 f0       	breq	.+18     	; 0x5892 <testMode+0x8e8>
			{
				send_usart_char(" ------FAIL");
    5880:	8b e4       	ldi	r24, 0x4B	; 75
    5882:	94 e0       	ldi	r25, 0x04	; 4
    5884:	c2 d9       	rcall	.-3196   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5886:	87 e5       	ldi	r24, 0x57	; 87
    5888:	94 e0       	ldi	r25, 0x04	; 4
    588a:	bf d9       	rcall	.-3202   	; 0x4c0a <send_usart_char>
				button = button1;
    588c:	10 92 fd 1f 	sts	0x1FFD, r1
    5890:	89 c1       	rjmp	.+786    	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH2);
    5892:	60 91 be 20 	lds	r22, 0x20BE
    5896:	70 91 bf 20 	lds	r23, 0x20BF
    589a:	80 91 c0 20 	lds	r24, 0x20C0
    589e:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    58a2:	84 e7       	ldi	r24, 0x74	; 116
    58a4:	94 e0       	ldi	r25, 0x04	; 4
    58a6:	b1 d9       	rcall	.-3230   	; 0x4c0a <send_usart_char>
				button = button8;
    58a8:	87 e0       	ldi	r24, 0x07	; 7
    58aa:	80 93 fd 1f 	sts	0x1FFD, r24
    58ae:	7a c1       	rjmp	.+756    	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button8:
		{
			send_usart_char("\r\nIO Switch ");
    58b0:	8e e3       	ldi	r24, 0x3E	; 62
    58b2:	94 e0       	ldi	r25, 0x04	; 4
    58b4:	aa d9       	rcall	.-3244   	; 0x4c0a <send_usart_char>
			send_usart_char("8");
    58b6:	8a e8       	ldi	r24, 0x8A	; 138
    58b8:	94 e0       	ldi	r25, 0x04	; 4
    58ba:	a7 d9       	rcall	.-3250   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
    58bc:	60 91 9d 20 	lds	r22, 0x209D
    58c0:	70 91 9e 20 	lds	r23, 0x209E
    58c4:	80 91 9f 20 	lds	r24, 0x209F
    58c8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    58cc:	88 23       	and	r24, r24
    58ce:	51 f0       	breq	.+20     	; 0x58e4 <testMode+0x93a>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
    58d0:	60 91 9d 20 	lds	r22, 0x209D
    58d4:	70 91 9e 20 	lds	r23, 0x209E
    58d8:	80 91 9f 20 	lds	r24, 0x209F
    58dc:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("8");
			
			button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			while(button_status_factory != 1)
    58e0:	81 11       	cpse	r24, r1
    58e2:	f6 cf       	rjmp	.-20     	; 0x58d0 <testMode+0x926>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    58e4:	60 91 b2 20 	lds	r22, 0x20B2
    58e8:	70 91 b3 20 	lds	r23, 0x20B3
    58ec:	80 91 b4 20 	lds	r24, 0x20B4
    58f0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    58f4:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    58f6:	60 91 ad 20 	lds	r22, 0x20AD
    58fa:	70 91 ae 20 	lds	r23, 0x20AE
    58fe:	80 91 af 20 	lds	r24, 0x20AF
    5902:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5906:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5908:	60 91 00 20 	lds	r22, 0x2000
    590c:	70 91 01 20 	lds	r23, 0x2001
    5910:	80 91 02 20 	lds	r24, 0x2002
    5914:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5918:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    591a:	60 91 5e 20 	lds	r22, 0x205E
    591e:	70 91 5f 20 	lds	r23, 0x205F
    5922:	80 91 60 20 	lds	r24, 0x2060
    5926:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    592a:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    592c:	60 91 b6 1f 	lds	r22, 0x1FB6
    5930:	70 91 b7 1f 	lds	r23, 0x1FB7
    5934:	80 91 b8 1f 	lds	r24, 0x1FB8
    5938:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    593c:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    593e:	60 91 0d 20 	lds	r22, 0x200D
    5942:	70 91 0e 20 	lds	r23, 0x200E
    5946:	80 91 0f 20 	lds	r24, 0x200F
    594a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    594e:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5950:	60 91 f4 1f 	lds	r22, 0x1FF4
    5954:	70 91 f5 1f 	lds	r23, 0x1FF5
    5958:	80 91 f6 1f 	lds	r24, 0x1FF6
    595c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5960:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5962:	60 91 5b 20 	lds	r22, 0x205B
    5966:	70 91 5c 20 	lds	r23, 0x205C
    596a:	80 91 5d 20 	lds	r24, 0x205D
    596e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5972:	21 e0       	ldi	r18, 0x01	; 1
    5974:	d1 10       	cpse	r13, r1
    5976:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5978:	91 e0       	ldi	r25, 0x01	; 1
    597a:	e1 10       	cpse	r14, r1
    597c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    597e:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5980:	91 e0       	ldi	r25, 0x01	; 1
    5982:	f1 10       	cpse	r15, r1
    5984:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5986:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5988:	21 e0       	ldi	r18, 0x01	; 1
    598a:	01 11       	cpse	r16, r1
    598c:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    598e:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5990:	91 e0       	ldi	r25, 0x01	; 1
    5992:	11 11       	cpse	r17, r1
    5994:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5996:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5998:	21 e0       	ldi	r18, 0x01	; 1
    599a:	d1 11       	cpse	r29, r1
    599c:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    599e:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    59a0:	91 e0       	ldi	r25, 0x01	; 1
    59a2:	c1 11       	cpse	r28, r1
    59a4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    59a6:	92 2b       	or	r25, r18
    59a8:	29 f4       	brne	.+10     	; 0x59b4 <testMode+0xa0a>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    59aa:	91 e0       	ldi	r25, 0x01	; 1
    59ac:	81 11       	cpse	r24, r1
    59ae:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    59b0:	99 23       	and	r25, r25
    59b2:	49 f0       	breq	.+18     	; 0x59c6 <testMode+0xa1c>
			{
				send_usart_char(" ------FAIL");
    59b4:	8b e4       	ldi	r24, 0x4B	; 75
    59b6:	94 e0       	ldi	r25, 0x04	; 4
    59b8:	28 d9       	rcall	.-3504   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    59ba:	87 e5       	ldi	r24, 0x57	; 87
    59bc:	94 e0       	ldi	r25, 0x04	; 4
    59be:	25 d9       	rcall	.-3510   	; 0x4c0a <send_usart_char>
				button = button1;
    59c0:	10 92 fd 1f 	sts	0x1FFD, r1
    59c4:	ef c0       	rjmp	.+478    	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_clr(OUT_LED_CH0);
    59c6:	60 91 e4 1f 	lds	r22, 0x1FE4
    59ca:	70 91 e5 1f 	lds	r23, 0x1FE5
    59ce:	80 91 e6 1f 	lds	r24, 0x1FE6
    59d2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(OUT_LED_CH1);
    59d6:	60 91 b8 20 	lds	r22, 0x20B8
    59da:	70 91 b9 20 	lds	r23, 0x20B9
    59de:	80 91 ba 20 	lds	r24, 0x20BA
    59e2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(OUT_LED_CH2);
    59e6:	60 91 be 20 	lds	r22, 0x20BE
    59ea:	70 91 bf 20 	lds	r23, 0x20BF
    59ee:	80 91 c0 20 	lds	r24, 0x20C0
    59f2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				send_usart_char(" ------PASS");
    59f6:	84 e7       	ldi	r24, 0x74	; 116
    59f8:	94 e0       	ldi	r25, 0x04	; 4
    59fa:	07 d9       	rcall	.-3570   	; 0x4c0a <send_usart_char>
				button = button9;
    59fc:	88 e0       	ldi	r24, 0x08	; 8
    59fe:	80 93 fd 1f 	sts	0x1FFD, r24
    5a02:	d0 c0       	rjmp	.+416    	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button9:
		{
			send_usart_char("\r\nIO Switch ");
    5a04:	8e e3       	ldi	r24, 0x3E	; 62
    5a06:	94 e0       	ldi	r25, 0x04	; 4
    5a08:	00 d9       	rcall	.-3584   	; 0x4c0a <send_usart_char>
			send_usart_char("9");
    5a0a:	8c e8       	ldi	r24, 0x8C	; 140
    5a0c:	94 e0       	ldi	r25, 0x04	; 4
    5a0e:	fd d8       	rcall	.-3590   	; 0x4c0a <send_usart_char>
			
			button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
    5a10:	60 91 5b 20 	lds	r22, 0x205B
    5a14:	70 91 5c 20 	lds	r23, 0x205C
    5a18:	80 91 5d 20 	lds	r24, 0x205D
    5a1c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5a20:	88 23       	and	r24, r24
    5a22:	51 f0       	breq	.+20     	; 0x5a38 <testMode+0xa8e>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
    5a24:	60 91 5b 20 	lds	r22, 0x205B
    5a28:	70 91 5c 20 	lds	r23, 0x205C
    5a2c:	80 91 5d 20 	lds	r24, 0x205D
    5a30:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("9");
			
			button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			while(button_status_factory != 1)
    5a34:	81 11       	cpse	r24, r1
    5a36:	f6 cf       	rjmp	.-20     	; 0x5a24 <testMode+0xa7a>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5a38:	60 91 b2 20 	lds	r22, 0x20B2
    5a3c:	70 91 b3 20 	lds	r23, 0x20B3
    5a40:	80 91 b4 20 	lds	r24, 0x20B4
    5a44:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5a48:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5a4a:	60 91 ad 20 	lds	r22, 0x20AD
    5a4e:	70 91 ae 20 	lds	r23, 0x20AE
    5a52:	80 91 af 20 	lds	r24, 0x20AF
    5a56:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5a5a:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5a5c:	60 91 00 20 	lds	r22, 0x2000
    5a60:	70 91 01 20 	lds	r23, 0x2001
    5a64:	80 91 02 20 	lds	r24, 0x2002
    5a68:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5a6c:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5a6e:	60 91 5e 20 	lds	r22, 0x205E
    5a72:	70 91 5f 20 	lds	r23, 0x205F
    5a76:	80 91 60 20 	lds	r24, 0x2060
    5a7a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5a7e:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5a80:	60 91 b6 1f 	lds	r22, 0x1FB6
    5a84:	70 91 b7 1f 	lds	r23, 0x1FB7
    5a88:	80 91 b8 1f 	lds	r24, 0x1FB8
    5a8c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5a90:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5a92:	60 91 0d 20 	lds	r22, 0x200D
    5a96:	70 91 0e 20 	lds	r23, 0x200E
    5a9a:	80 91 0f 20 	lds	r24, 0x200F
    5a9e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5aa2:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5aa4:	60 91 f4 1f 	lds	r22, 0x1FF4
    5aa8:	70 91 f5 1f 	lds	r23, 0x1FF5
    5aac:	80 91 f6 1f 	lds	r24, 0x1FF6
    5ab0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5ab4:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5ab6:	60 91 9d 20 	lds	r22, 0x209D
    5aba:	70 91 9e 20 	lds	r23, 0x209E
    5abe:	80 91 9f 20 	lds	r24, 0x209F
    5ac2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5ac6:	21 e0       	ldi	r18, 0x01	; 1
    5ac8:	d1 10       	cpse	r13, r1
    5aca:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5acc:	91 e0       	ldi	r25, 0x01	; 1
    5ace:	e1 10       	cpse	r14, r1
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5ad2:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5ad4:	91 e0       	ldi	r25, 0x01	; 1
    5ad6:	f1 10       	cpse	r15, r1
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5ada:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5adc:	21 e0       	ldi	r18, 0x01	; 1
    5ade:	01 11       	cpse	r16, r1
    5ae0:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5ae2:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5ae4:	91 e0       	ldi	r25, 0x01	; 1
    5ae6:	11 11       	cpse	r17, r1
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5aea:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5aec:	21 e0       	ldi	r18, 0x01	; 1
    5aee:	d1 11       	cpse	r29, r1
    5af0:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5af2:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5af4:	91 e0       	ldi	r25, 0x01	; 1
    5af6:	c1 11       	cpse	r28, r1
    5af8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5afa:	92 2b       	or	r25, r18
    5afc:	29 f4       	brne	.+10     	; 0x5b08 <testMode+0xb5e>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5afe:	91 e0       	ldi	r25, 0x01	; 1
    5b00:	81 11       	cpse	r24, r1
    5b02:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b04:	99 23       	and	r25, r25
    5b06:	49 f0       	breq	.+18     	; 0x5b1a <testMode+0xb70>
			{
				send_usart_char(" ------FAIL");
    5b08:	8b e4       	ldi	r24, 0x4B	; 75
    5b0a:	94 e0       	ldi	r25, 0x04	; 4
    5b0c:	7e d8       	rcall	.-3844   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5b0e:	87 e5       	ldi	r24, 0x57	; 87
    5b10:	94 e0       	ldi	r25, 0x04	; 4
    5b12:	7b d8       	rcall	.-3850   	; 0x4c0a <send_usart_char>
				button = button1;
    5b14:	10 92 fd 1f 	sts	0x1FFD, r1
    5b18:	45 c0       	rjmp	.+138    	; 0x5ba4 <testMode+0xbfa>
			}
			else
			{
				gpio_clr(STATUS_LED_1);
    5b1a:	60 91 03 20 	lds	r22, 0x2003
    5b1e:	70 91 04 20 	lds	r23, 0x2004
    5b22:	80 91 05 20 	lds	r24, 0x2005
    5b26:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(STATUS_LED_2);
    5b2a:	60 91 25 20 	lds	r22, 0x2025
    5b2e:	70 91 26 20 	lds	r23, 0x2026
    5b32:	80 91 27 20 	lds	r24, 0x2027
    5b36:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(CHARGING_DISABLE);
    5b3a:	60 91 37 20 	lds	r22, 0x2037
    5b3e:	70 91 38 20 	lds	r23, 0x2038
    5b42:	80 91 39 20 	lds	r24, 0x2039
    5b46:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(EMER_LIGHT_EN);
    5b4a:	60 91 07 20 	lds	r22, 0x2007
    5b4e:	70 91 08 20 	lds	r23, 0x2008
    5b52:	80 91 09 20 	lds	r24, 0x2009
    5b56:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_set(OUT_LED_CH0);
    5b5a:	60 91 e4 1f 	lds	r22, 0x1FE4
    5b5e:	70 91 e5 1f 	lds	r23, 0x1FE5
    5b62:	80 91 e6 1f 	lds	r24, 0x1FE6
    5b66:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				gpio_set(OUT_LED_CH1);
    5b6a:	60 91 b8 20 	lds	r22, 0x20B8
    5b6e:	70 91 b9 20 	lds	r23, 0x20B9
    5b72:	80 91 ba 20 	lds	r24, 0x20BA
    5b76:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				gpio_set(OUT_LED_CH2);
    5b7a:	60 91 be 20 	lds	r22, 0x20BE
    5b7e:	70 91 bf 20 	lds	r23, 0x20BF
    5b82:	80 91 c0 20 	lds	r24, 0x20C0
    5b86:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    5b8a:	84 e7       	ldi	r24, 0x74	; 116
    5b8c:	94 e0       	ldi	r25, 0x04	; 4
    5b8e:	3d d8       	rcall	.-3974   	; 0x4c0a <send_usart_char>
				send_usart_char("\r\n------ Test Finished ------\r\n------ Successful ------");
    5b90:	8e e8       	ldi	r24, 0x8E	; 142
    5b92:	94 e0       	ldi	r25, 0x04	; 4
    5b94:	3a d8       	rcall	.-3980   	; 0x4c0a <send_usart_char>
				button = button10;
    5b96:	89 e0       	ldi	r24, 0x09	; 9
    5b98:	80 93 fd 1f 	sts	0x1FFD, r24
    5b9c:	03 c0       	rjmp	.+6      	; 0x5ba4 <testMode+0xbfa>
		}
		break;
		
		case button10:
		{
			option_select = option_message;
    5b9e:	89 e0       	ldi	r24, 0x09	; 9
    5ba0:	80 93 11 20 	sts	0x2011, r24
		}
		break;
	}

}
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	1f 91       	pop	r17
    5baa:	0f 91       	pop	r16
    5bac:	ff 90       	pop	r15
    5bae:	ef 90       	pop	r14
    5bb0:	df 90       	pop	r13
    5bb2:	08 95       	ret

00005bb4 <dump_eeprom>:

void dump_eeprom()
{
    5bb4:	0f 93       	push	r16
    5bb6:	1f 93       	push	r17
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
    5bbc:	c0 e0       	ldi	r28, 0x00	; 0
    5bbe:	d0 e0       	ldi	r29, 0x00	; 0

}

void dump_eeprom()
{
	uint8_t block = 0;
    5bc0:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
	{
		if(block == 32)
		{
			send_usart_char("\r\n");
			block = 0;
    5bc2:	00 e0       	ldi	r16, 0x00	; 0
    5bc4:	06 c0       	rjmp	.+12     	; 0x5bd2 <dump_eeprom+0x1e>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
	{
		if(block == 32)
    5bc6:	10 32       	cpi	r17, 0x20	; 32
    5bc8:	21 f4       	brne	.+8      	; 0x5bd2 <dump_eeprom+0x1e>
		{
			send_usart_char("\r\n");
    5bca:	8b e5       	ldi	r24, 0x5B	; 91
    5bcc:	96 e0       	ldi	r25, 0x06	; 6
    5bce:	1d d8       	rcall	.-4038   	; 0x4c0a <send_usart_char>
			block = 0;
    5bd0:	10 2f       	mov	r17, r16
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		int_to_ascii(PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high));
    5bd2:	2d 2f       	mov	r18, r29
    5bd4:	4c 2f       	mov	r20, r28
    5bd6:	65 e4       	ldi	r22, 0x45	; 69
    5bd8:	8f ea       	ldi	r24, 0xAF	; 175
    5bda:	0e 94 bb 20 	call	0x4176	; 0x4176 <PNEWELSE2promRead>
    5bde:	69 d8       	rcall	.-3886   	; 0x4cb2 <int_to_ascii>
		send_usart_char(" ");
    5be0:	8d ee       	ldi	r24, 0xED	; 237
    5be2:	94 e0       	ldi	r25, 0x04	; 4
    5be4:	12 d8       	rcall	.-4060   	; 0x4c0a <send_usart_char>
		pne_delayms(5);
    5be6:	85 e0       	ldi	r24, 0x05	; 5
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <pne_delayms>
		block++;
    5bee:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
    5bf0:	21 96       	adiw	r28, 0x01	; 1
    5bf2:	c1 15       	cp	r28, r1
    5bf4:	80 e2       	ldi	r24, 0x20	; 32
    5bf6:	d8 07       	cpc	r29, r24
    5bf8:	31 f7       	brne	.-52     	; 0x5bc6 <dump_eeprom+0x12>
		send_usart_char(" ");
		pne_delayms(5);
		block++;
		
	}
	option_select = option_message;
    5bfa:	89 e0       	ldi	r24, 0x09	; 9
    5bfc:	80 93 11 20 	sts	0x2011, r24
}
    5c00:	df 91       	pop	r29
    5c02:	cf 91       	pop	r28
    5c04:	1f 91       	pop	r17
    5c06:	0f 91       	pop	r16
    5c08:	08 95       	ret

00005c0a <readE2prom>:
uint8_t readE2prom(uint16_t address)
{
	uint8_t cache = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	cache = PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high);
    5c0a:	29 2f       	mov	r18, r25
    5c0c:	48 2f       	mov	r20, r24
    5c0e:	65 e4       	ldi	r22, 0x45	; 69
    5c10:	8f ea       	ldi	r24, 0xAF	; 175
    5c12:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <PNEWELSE2promRead>
	return cache;
}
    5c16:	08 95       	ret

00005c18 <pneDisplayInfo>:
	}
		return idle;
}

void pneDisplayInfo()
{
    5c18:	ef 92       	push	r14
    5c1a:	ff 92       	push	r15
    5c1c:	0f 93       	push	r16
    5c1e:	1f 93       	push	r17
    5c20:	cf 93       	push	r28
    5c22:	df 93       	push	r29
    5c24:	cd b7       	in	r28, 0x3d	; 61
    5c26:	de b7       	in	r29, 0x3e	; 62
    5c28:	62 97       	sbiw	r28, 0x12	; 18
    5c2a:	0f b6       	in	r0, 0x3f	; 63
    5c2c:	f8 94       	cli
    5c2e:	de bf       	out	0x3e, r29	; 62
    5c30:	0f be       	out	0x3f, r0	; 63
    5c32:	cd bf       	out	0x3d, r28	; 61
	uint8_t cache[2]={0};
		
	send_usart_char("Device information:\r\n");
    5c34:	86 ec       	ldi	r24, 0xC6	; 198
    5c36:	94 e0       	ldi	r25, 0x04	; 4
    5c38:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
	send_usart_char("\r\nPAN ID (Zone)\t: ");
    5c3c:	8c ed       	ldi	r24, 0xDC	; 220
    5c3e:	94 e0       	ldi	r25, 0x04	; 4
    5c40:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
	cache[0] = readE2prom(DEVICE_PAN_H);
    5c44:	81 e0       	ldi	r24, 0x01	; 1
    5c46:	90 e1       	ldi	r25, 0x10	; 16
    5c48:	e0 df       	rcall	.-64     	; 0x5c0a <readE2prom>
    5c4a:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_PAN_L);
    5c4c:	80 e0       	ldi	r24, 0x00	; 0
    5c4e:	90 e1       	ldi	r25, 0x10	; 16
    5c50:	dc df       	rcall	.-72     	; 0x5c0a <readE2prom>
	PNEWELS_Buffer.devicePAN = cache[0];
    5c52:	21 2f       	mov	r18, r17
    5c54:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.devicePAN = PNEWELS_Buffer.devicePAN << 8;
    5c56:	32 2f       	mov	r19, r18
    5c58:	22 27       	eor	r18, r18
	PNEWELS_Buffer.devicePAN |= cache[1];
    5c5a:	a9 01       	movw	r20, r18
    5c5c:	48 2b       	or	r20, r24
    5c5e:	ca 01       	movw	r24, r20
    5c60:	0f 2e       	mov	r0, r31
    5c62:	fa eb       	ldi	r31, 0xBA	; 186
    5c64:	ef 2e       	mov	r14, r31
    5c66:	ff e1       	ldi	r31, 0x1F	; 31
    5c68:	ff 2e       	mov	r15, r31
    5c6a:	f0 2d       	mov	r31, r0
    5c6c:	f7 01       	movw	r30, r14
    5c6e:	96 8f       	std	Z+30, r25	; 0x1e
    5c70:	85 8f       	std	Z+29, r24	; 0x1d
	int_to_ascii((uint8_t)(PNEWELS_Buffer.devicePAN>>8));
    5c72:	89 2f       	mov	r24, r25
    5c74:	1e d8       	rcall	.-4036   	; 0x4cb2 <int_to_ascii>
	int_to_ascii((uint8_t)PNEWELS_Buffer.devicePAN);
    5c76:	f7 01       	movw	r30, r14
    5c78:	85 8d       	ldd	r24, Z+29	; 0x1d
    5c7a:	1b d8       	rcall	.-4042   	; 0x4cb2 <int_to_ascii>
	
// 	send_usart_char("\r\nNode ID\t\t: ");
// 	PNEWELS_Buffer.nodeID = readE2prom(NODE_ID);
// 	int_to_ascii(PNEWELS_Buffer.nodeID);
	
	send_usart_char("\r\nDevice address\t: ");
    5c7c:	8f ee       	ldi	r24, 0xEF	; 239
    5c7e:	94 e0       	ldi	r25, 0x04	; 4
    5c80:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
	cache[0] = readE2prom(DEVICE_ADDRESS_H);
    5c84:	8d ef       	ldi	r24, 0xFD	; 253
    5c86:	9f e0       	ldi	r25, 0x0F	; 15
    5c88:	c0 df       	rcall	.-128    	; 0x5c0a <readE2prom>
    5c8a:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_ADDRESS_L);
    5c8c:	8c ef       	ldi	r24, 0xFC	; 252
    5c8e:	9f e0       	ldi	r25, 0x0F	; 15
    5c90:	bc df       	rcall	.-136    	; 0x5c0a <readE2prom>
	PNEWELS_Buffer.deviceAddress = cache[0];
    5c92:	21 2f       	mov	r18, r17
    5c94:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.deviceAddress = PNEWELS_Buffer.deviceAddress << 8;
    5c96:	32 2f       	mov	r19, r18
    5c98:	22 27       	eor	r18, r18
	PNEWELS_Buffer.deviceAddress |= cache[1];
    5c9a:	a9 01       	movw	r20, r18
    5c9c:	48 2b       	or	r20, r24
    5c9e:	ca 01       	movw	r24, r20
    5ca0:	f7 01       	movw	r30, r14
    5ca2:	94 8f       	std	Z+28, r25	; 0x1c
    5ca4:	83 8f       	std	Z+27, r24	; 0x1b
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress>>8));
    5ca6:	89 2f       	mov	r24, r25
    5ca8:	04 d8       	rcall	.-4088   	; 0x4cb2 <int_to_ascii>
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress));
    5caa:	f7 01       	movw	r30, r14
    5cac:	83 8d       	ldd	r24, Z+27	; 0x1b
    5cae:	01 d8       	rcall	.-4094   	; 0x4cb2 <int_to_ascii>
	
	send_usart_char("\r\nDevice channel\t: ");
    5cb0:	83 e0       	ldi	r24, 0x03	; 3
    5cb2:	95 e0       	ldi	r25, 0x05	; 5
    5cb4:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
	cache[0] = readE2prom(DEVICE_CHANNEL_H);
    5cb8:	8f ef       	ldi	r24, 0xFF	; 255
    5cba:	9f e0       	ldi	r25, 0x0F	; 15
    5cbc:	a6 df       	rcall	.-180    	; 0x5c0a <readE2prom>
    5cbe:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_CHANNEL_L);
    5cc0:	8e ef       	ldi	r24, 0xFE	; 254
    5cc2:	9f e0       	ldi	r25, 0x0F	; 15
    5cc4:	a2 df       	rcall	.-188    	; 0x5c0a <readE2prom>
	PNEWELS_Buffer.deviceAddress = cache[0];
    5cc6:	21 2f       	mov	r18, r17
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.deviceAddress = PNEWELS_Buffer.deviceAddress << 8;
    5cca:	32 2f       	mov	r19, r18
    5ccc:	22 27       	eor	r18, r18
	PNEWELS_Buffer.deviceAddress |= cache[1];
    5cce:	a9 01       	movw	r20, r18
    5cd0:	48 2b       	or	r20, r24
    5cd2:	ca 01       	movw	r24, r20
    5cd4:	f7 01       	movw	r30, r14
    5cd6:	94 8f       	std	Z+28, r25	; 0x1c
    5cd8:	83 8f       	std	Z+27, r24	; 0x1b
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress>>8));
    5cda:	89 2f       	mov	r24, r25
    5cdc:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress));
    5ce0:	f7 01       	movw	r30, r14
    5ce2:	83 8d       	ldd	r24, Z+27	; 0x1b
    5ce4:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
	
	//Read EEPROM and display serial number
	uint8_t serial_addr[2] = {0x00, 0x08};
    5ce8:	19 82       	std	Y+1, r1	; 0x01
    5cea:	88 e0       	ldi	r24, 0x08	; 8
    5cec:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t serial_no[16] = {0};
    5cee:	7e 01       	movw	r14, r28
    5cf0:	f3 e0       	ldi	r31, 0x03	; 3
    5cf2:	ef 0e       	add	r14, r31
    5cf4:	f1 1c       	adc	r15, r1
    5cf6:	80 e1       	ldi	r24, 0x10	; 16
    5cf8:	f7 01       	movw	r30, r14
    5cfa:	11 92       	st	Z+, r1
    5cfc:	8a 95       	dec	r24
    5cfe:	e9 f7       	brne	.-6      	; 0x5cfa <pneDisplayInfo+0xe2>
								
	pne_APP_TwiInit(0xBF);
    5d00:	8f eb       	ldi	r24, 0xBF	; 191
    5d02:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <pne_APP_TwiInit>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, serial_no, 16);
    5d06:	00 e1       	ldi	r16, 0x10	; 16
    5d08:	97 01       	movw	r18, r14
    5d0a:	4f eb       	ldi	r20, 0xBF	; 191
    5d0c:	62 e0       	ldi	r22, 0x02	; 2
    5d0e:	ce 01       	movw	r24, r28
    5d10:	01 96       	adiw	r24, 0x01	; 1
    5d12:	0e 94 38 20 	call	0x4070	; 0x4070 <pne_APP_TwiReceive>
	send_usart_char("\r\nSerial Number   : ");
    5d16:	87 e1       	ldi	r24, 0x17	; 23
    5d18:	95 e0       	ldi	r25, 0x05	; 5
    5d1a:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
    5d1e:	87 01       	movw	r16, r14
    5d20:	7e 01       	movw	r14, r28
    5d22:	f2 e1       	ldi	r31, 0x12	; 18
    5d24:	ef 0e       	add	r14, r31
    5d26:	f1 1c       	adc	r15, r1
							
	uint8_t compare = 0;
							
	for (compare=0; compare<15; compare++)
	{
		int_to_ascii(serial_no[compare]);
    5d28:	f8 01       	movw	r30, r16
    5d2a:	81 91       	ld	r24, Z+
    5d2c:	8f 01       	movw	r16, r30
    5d2e:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
		usart_putchar(USART_SERIAL_EXAMPLE, 0x2E);
    5d32:	6e e2       	ldi	r22, 0x2E	; 46
    5d34:	88 ec       	ldi	r24, 0xC8	; 200
    5d36:	90 e0       	ldi	r25, 0x00	; 0
    5d38:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, serial_no, 16);
	send_usart_char("\r\nSerial Number   : ");
							
	uint8_t compare = 0;
							
	for (compare=0; compare<15; compare++)
    5d3c:	0e 15       	cp	r16, r14
    5d3e:	1f 05       	cpc	r17, r15
    5d40:	99 f7       	brne	.-26     	; 0x5d28 <pneDisplayInfo+0x110>
	{
		int_to_ascii(serial_no[compare]);
		usart_putchar(USART_SERIAL_EXAMPLE, 0x2E);
	}
							
	int_to_ascii(serial_no[15]);
    5d42:	8a 89       	ldd	r24, Y+18	; 0x12
    5d44:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
							
	//Read ADC
	uint8_t battery_voltage = pneBatteryAverage();
    5d48:	ef d7       	rcall	.+4062   	; 0x6d28 <pneBatteryAverage>
    5d4a:	08 2f       	mov	r16, r24
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    5d4c:	eb e7       	ldi	r30, 0x7B	; 123
    5d4e:	f0 e0       	ldi	r31, 0x00	; 0
    5d50:	90 81       	ld	r25, Z
    5d52:	97 7f       	andi	r25, 0xF7	; 247
    5d54:	90 83       	st	Z, r25
	}

	ADMUX
		= ((uint8_t)input &
    5d56:	81 e6       	ldi	r24, 0x61	; 97
    5d58:	80 93 7c 00 	sts	0x007C, r24
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    5d5c:	ea e7       	ldi	r30, 0x7A	; 122
    5d5e:	f0 e0       	ldi	r31, 0x00	; 0
    5d60:	90 81       	ld	r25, Z
    5d62:	90 64       	ori	r25, 0x40	; 64
    5d64:	90 83       	st	Z, r25

	while ((ADCSRA & (1 << ADSC))) {
    5d66:	90 81       	ld	r25, Z
    5d68:	96 fd       	sbrc	r25, 6
    5d6a:	fd cf       	rjmp	.-6      	; 0x5d66 <pneDisplayInfo+0x14e>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    5d6c:	10 91 79 00 	lds	r17, 0x0079
	uint8_t battery_capacity = adc_read_8bit(ADC_EMER_LIGHT_INPUT, ADC_VREF);
							
	send_usart_char("\r\nBattery Voltage : ");
    5d70:	8c e2       	ldi	r24, 0x2C	; 44
    5d72:	95 e0       	ldi	r25, 0x05	; 5
    5d74:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
	int_to_ascii(battery_voltage);
    5d78:	80 2f       	mov	r24, r16
    5d7a:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
	send_usart_char("\r\nBattery Capacity: ");
    5d7e:	81 e4       	ldi	r24, 0x41	; 65
    5d80:	95 e0       	ldi	r25, 0x05	; 5
    5d82:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
	int_to_ascii(battery_capacity);
    5d86:	81 2f       	mov	r24, r17
    5d88:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
	
	option_select = option_message;
    5d8c:	89 e0       	ldi	r24, 0x09	; 9
    5d8e:	80 93 11 20 	sts	0x2011, r24
}
    5d92:	62 96       	adiw	r28, 0x12	; 18
    5d94:	0f b6       	in	r0, 0x3f	; 63
    5d96:	f8 94       	cli
    5d98:	de bf       	out	0x3e, r29	; 62
    5d9a:	0f be       	out	0x3f, r0	; 63
    5d9c:	cd bf       	out	0x3d, r28	; 61
    5d9e:	df 91       	pop	r29
    5da0:	cf 91       	pop	r28
    5da2:	1f 91       	pop	r17
    5da4:	0f 91       	pop	r16
    5da6:	ff 90       	pop	r15
    5da8:	ef 90       	pop	r14
    5daa:	08 95       	ret

00005dac <resetFlag>:
	int_to_ascii(data);
	/*send_usart_char("\r\n");*/
}

void resetFlag()
{
    5dac:	0f 93       	push	r16
	
	uint8_t memory_address_low = (FLAG & 0xFF);
	uint8_t memory_address_high = ((FLAG >> 8) & 0xFF);
	
	switch(reset_state)
    5dae:	80 91 8c 20 	lds	r24, 0x208C
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	88 30       	cpi	r24, 0x08	; 8
    5db6:	91 05       	cpc	r25, r1
    5db8:	08 f0       	brcs	.+2      	; 0x5dbc <resetFlag+0x10>
    5dba:	73 c0       	rjmp	.+230    	; 0x5ea2 <resetFlag+0xf6>
    5dbc:	fc 01       	movw	r30, r24
    5dbe:	88 27       	eor	r24, r24
    5dc0:	ea 58       	subi	r30, 0x8A	; 138
    5dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    5dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    5dc6:	0c 94 0a 4c 	jmp	0x9814	; 0x9814 <__tablejump2__>
	{
		case reset_startup_message:
		{
			send_usart_char("\r\n\r\nFlag reset mode. Select an option:\r\n\r\n");
    5dca:	86 e5       	ldi	r24, 0x56	; 86
    5dcc:	95 e0       	ldi	r25, 0x05	; 5
    5dce:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			send_usart_char("1. Reset all flag\r\n2. Reset Factory flag (bit0)\r\n3. Reset AC Power flag (bit1)\r\n");
    5dd2:	81 e8       	ldi	r24, 0x81	; 129
    5dd4:	95 e0       	ldi	r25, 0x05	; 5
    5dd6:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			send_usart_char("4. Read system flag status\r\n5. Set flag\r\n0. Exit configuration mode\r\n");
    5dda:	82 ed       	ldi	r24, 0xD2	; 210
    5ddc:	95 e0       	ldi	r25, 0x05	; 5
    5dde:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			reset_option_flag = 1;
    5de2:	81 e0       	ldi	r24, 0x01	; 1
    5de4:	80 93 ff 1f 	sts	0x1FFF, r24
			reset_state = reset_idle;
    5de8:	86 e0       	ldi	r24, 0x06	; 6
    5dea:	80 93 8c 20 	sts	0x208C, r24
		}
		break;
    5dee:	60 c0       	rjmp	.+192    	; 0x5eb0 <resetFlag+0x104>
		
		case reset_all:
		{
 			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,0xFF);
    5df0:	0f ef       	ldi	r16, 0xFF	; 255
    5df2:	20 e1       	ldi	r18, 0x10	; 16
    5df4:	42 e0       	ldi	r20, 0x02	; 2
    5df6:	65 e4       	ldi	r22, 0x45	; 69
    5df8:	8e ea       	ldi	r24, 0xAE	; 174
    5dfa:	0e 94 90 20 	call	0x4120	; 0x4120 <PNEWELSE2promWrite>
			pne_delayms(10);
    5dfe:	8a e0       	ldi	r24, 0x0A	; 10
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <pne_delayms>
			reset_state = reset_startup_message;
    5e06:	10 92 8c 20 	sts	0x208C, r1
		}
		break;
    5e0a:	52 c0       	rjmp	.+164    	; 0x5eb0 <resetFlag+0x104>
		
		case reset_bit0:
		{
			reset_cache = readE2prom(FLAG);
    5e0c:	82 e0       	ldi	r24, 0x02	; 2
    5e0e:	90 e1       	ldi	r25, 0x10	; 16
    5e10:	fc de       	rcall	.-520    	; 0x5c0a <readE2prom>
			reset_cache = (reset_cache | 0x01); 
    5e12:	08 2f       	mov	r16, r24
    5e14:	01 60       	ori	r16, 0x01	; 1
    5e16:	00 93 b9 1f 	sts	0x1FB9, r16
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    5e1a:	20 e1       	ldi	r18, 0x10	; 16
    5e1c:	42 e0       	ldi	r20, 0x02	; 2
    5e1e:	65 e4       	ldi	r22, 0x45	; 69
    5e20:	8e ea       	ldi	r24, 0xAE	; 174
    5e22:	0e 94 90 20 	call	0x4120	; 0x4120 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    5e26:	10 92 8c 20 	sts	0x208C, r1
		}
		break;
    5e2a:	42 c0       	rjmp	.+132    	; 0x5eb0 <resetFlag+0x104>
		
		case reset_bit1:
		{
			reset_cache = readE2prom(FLAG);
    5e2c:	82 e0       	ldi	r24, 0x02	; 2
    5e2e:	90 e1       	ldi	r25, 0x10	; 16
    5e30:	ec de       	rcall	.-552    	; 0x5c0a <readE2prom>
			reset_cache = (reset_cache | 0x02); 
    5e32:	08 2f       	mov	r16, r24
    5e34:	02 60       	ori	r16, 0x02	; 2
    5e36:	00 93 b9 1f 	sts	0x1FB9, r16
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    5e3a:	20 e1       	ldi	r18, 0x10	; 16
    5e3c:	42 e0       	ldi	r20, 0x02	; 2
    5e3e:	65 e4       	ldi	r22, 0x45	; 69
    5e40:	8e ea       	ldi	r24, 0xAE	; 174
    5e42:	0e 94 90 20 	call	0x4120	; 0x4120 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    5e46:	10 92 8c 20 	sts	0x208C, r1
		}
		break;
    5e4a:	32 c0       	rjmp	.+100    	; 0x5eb0 <resetFlag+0x104>
		
		case reset_read_status:
		{
			reset_cache = readE2prom(FLAG);
    5e4c:	82 e0       	ldi	r24, 0x02	; 2
    5e4e:	90 e1       	ldi	r25, 0x10	; 16
    5e50:	dc de       	rcall	.-584    	; 0x5c0a <readE2prom>
    5e52:	80 93 b9 1f 	sts	0x1FB9, r24
			send_usart_char("\r\nSystem Flag: ");
    5e56:	88 e1       	ldi	r24, 0x18	; 24
    5e58:	96 e0       	ldi	r25, 0x06	; 6
    5e5a:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			int_to_ascii(reset_cache);
    5e5e:	80 91 b9 1f 	lds	r24, 0x1FB9
    5e62:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
			send_usart_char("\r\n");
    5e66:	8b e5       	ldi	r24, 0x5B	; 91
    5e68:	96 e0       	ldi	r25, 0x06	; 6
    5e6a:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			reset_state = reset_startup_message;
    5e6e:	10 92 8c 20 	sts	0x208C, r1
		}
		break;
    5e72:	1e c0       	rjmp	.+60     	; 0x5eb0 <resetFlag+0x104>

		case reset_set_flag:
		{
			reset_cache = 0xFC;
    5e74:	8c ef       	ldi	r24, 0xFC	; 252
    5e76:	80 93 b9 1f 	sts	0x1FB9, r24
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    5e7a:	0c ef       	ldi	r16, 0xFC	; 252
    5e7c:	20 e1       	ldi	r18, 0x10	; 16
    5e7e:	42 e0       	ldi	r20, 0x02	; 2
    5e80:	65 e4       	ldi	r22, 0x45	; 69
    5e82:	8e ea       	ldi	r24, 0xAE	; 174
    5e84:	0e 94 90 20 	call	0x4120	; 0x4120 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    5e88:	10 92 8c 20 	sts	0x208C, r1
		}
		break;
    5e8c:	11 c0       	rjmp	.+34     	; 0x5eb0 <resetFlag+0x104>
		case reset_idle:
		break;
		
		case reset_exit:
		{
			reset_option_flag = 0;
    5e8e:	10 92 ff 1f 	sts	0x1FFF, r1
			option_select = option_message;
    5e92:	89 e0       	ldi	r24, 0x09	; 9
    5e94:	80 93 11 20 	sts	0x2011, r24
			config_state = config_startup_message;
    5e98:	10 92 fc 1f 	sts	0x1FFC, r1
			reset_state = reset_startup_message;
    5e9c:	10 92 8c 20 	sts	0x208C, r1
			break;
    5ea0:	07 c0       	rjmp	.+14     	; 0x5eb0 <resetFlag+0x104>
		}
		default:
		option_select = option_message;
    5ea2:	89 e0       	ldi	r24, 0x09	; 9
    5ea4:	80 93 11 20 	sts	0x2011, r24
		config_state = config_startup_message;
    5ea8:	10 92 fc 1f 	sts	0x1FFC, r1
		reset_state = reset_startup_message;
    5eac:	10 92 8c 20 	sts	0x208C, r1
		break;
		
	}
}
    5eb0:	0f 91       	pop	r16
    5eb2:	08 95       	ret

00005eb4 <dump_log_file>:
	cache = PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high);
	return cache;
}

void dump_log_file()
{
    5eb4:	0f 93       	push	r16
    5eb6:	1f 93       	push	r17
    5eb8:	cf 93       	push	r28
    5eba:	df 93       	push	r29
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    5ebc:	c0 e0       	ldi	r28, 0x00	; 0
    5ebe:	d0 e0       	ldi	r29, 0x00	; 0
	return cache;
}

void dump_log_file()
{
	uint8_t block = 0;
    5ec0:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(block == 11)
		{
			send_usart_char("\r\n");
			block = 0;
    5ec2:	00 e0       	ldi	r16, 0x00	; 0
    5ec4:	07 c0       	rjmp	.+14     	; 0x5ed4 <dump_log_file+0x20>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(block == 11)
    5ec6:	1b 30       	cpi	r17, 0x0B	; 11
    5ec8:	29 f4       	brne	.+10     	; 0x5ed4 <dump_log_file+0x20>
		{
			send_usart_char("\r\n");
    5eca:	8b e5       	ldi	r24, 0x5B	; 91
    5ecc:	96 e0       	ldi	r25, 0x06	; 6
    5ece:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			block = 0;
    5ed2:	10 2f       	mov	r17, r16
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		int_to_ascii(PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high));
    5ed4:	2d 2f       	mov	r18, r29
    5ed6:	4c 2f       	mov	r20, r28
    5ed8:	65 e4       	ldi	r22, 0x45	; 69
    5eda:	8f ea       	ldi	r24, 0xAF	; 175
    5edc:	0e 94 bb 20 	call	0x4176	; 0x4176 <PNEWELSE2promRead>
    5ee0:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
		send_usart_char(" ");
    5ee4:	8d ee       	ldi	r24, 0xED	; 237
    5ee6:	94 e0       	ldi	r25, 0x04	; 4
    5ee8:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
		pne_delayms(5);
    5eec:	85 e0       	ldi	r24, 0x05	; 5
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <pne_delayms>
		block++;
    5ef4:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    5ef6:	21 96       	adiw	r28, 0x01	; 1
    5ef8:	cc 3f       	cpi	r28, 0xFC	; 252
    5efa:	8f e0       	ldi	r24, 0x0F	; 15
    5efc:	d8 07       	cpc	r29, r24
    5efe:	19 f7       	brne	.-58     	; 0x5ec6 <dump_log_file+0x12>
		send_usart_char(" ");
		pne_delayms(5);
		block++;
		
	}
	option_select = option_message;
    5f00:	89 e0       	ldi	r24, 0x09	; 9
    5f02:	80 93 11 20 	sts	0x2011, r24
}
    5f06:	df 91       	pop	r29
    5f08:	cf 91       	pop	r28
    5f0a:	1f 91       	pop	r17
    5f0c:	0f 91       	pop	r16
    5f0e:	08 95       	ret

00005f10 <erase_memory>:

void erase_memory()
{
	clre2prom();
    5f10:	0e 94 15 21 	call	0x422a	; 0x422a <clre2prom>
	option_select = option_message;
    5f14:	89 e0       	ldi	r24, 0x09	; 9
    5f16:	80 93 11 20 	sts	0x2011, r24
    5f1a:	08 95       	ret

00005f1c <writeE2prom>:
}

void writeE2prom(uint16_t address, uint8_t data)
{
    5f1c:	0f 93       	push	r16
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, data);
    5f1e:	06 2f       	mov	r16, r22
    5f20:	29 2f       	mov	r18, r25
    5f22:	48 2f       	mov	r20, r24
    5f24:	65 e4       	ldi	r22, 0x45	; 69
    5f26:	8e ea       	ldi	r24, 0xAE	; 174
    5f28:	0e 94 90 20 	call	0x4120	; 0x4120 <PNEWELSE2promWrite>
	pne_delayms(10);
    5f2c:	8a e0       	ldi	r24, 0x0A	; 10
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <pne_delayms>
}
    5f34:	0f 91       	pop	r16
    5f36:	08 95       	ret

00005f38 <battery_config>:

void battery_config()
{	
	switch(battery_state)
    5f38:	80 91 b7 20 	lds	r24, 0x20B7
    5f3c:	82 30       	cpi	r24, 0x02	; 2
    5f3e:	79 f1       	breq	.+94     	; 0x5f9e <battery_config+0x66>
    5f40:	28 f4       	brcc	.+10     	; 0x5f4c <battery_config+0x14>
    5f42:	88 23       	and	r24, r24
    5f44:	59 f0       	breq	.+22     	; 0x5f5c <battery_config+0x24>
    5f46:	81 30       	cpi	r24, 0x01	; 1
    5f48:	e1 f0       	breq	.+56     	; 0x5f82 <battery_config+0x4a>
    5f4a:	66 c0       	rjmp	.+204    	; 0x6018 <battery_config+0xe0>
    5f4c:	84 30       	cpi	r24, 0x04	; 4
    5f4e:	09 f4       	brne	.+2      	; 0x5f52 <battery_config+0x1a>
    5f50:	6a c0       	rjmp	.+212    	; 0x6026 <battery_config+0xee>
    5f52:	98 f1       	brcs	.+102    	; 0x5fba <battery_config+0x82>
    5f54:	85 30       	cpi	r24, 0x05	; 5
    5f56:	09 f4       	brne	.+2      	; 0x5f5a <battery_config+0x22>
    5f58:	55 c0       	rjmp	.+170    	; 0x6004 <battery_config+0xcc>
    5f5a:	5e c0       	rjmp	.+188    	; 0x6018 <battery_config+0xe0>
	{
		case battery_startup_message:
		{
			send_usart_char("\r\n\r\nBattery Configuration Mode. Select an option:\r\n\r\n");
    5f5c:	88 e2       	ldi	r24, 0x28	; 40
    5f5e:	96 e0       	ldi	r25, 0x06	; 6
    5f60:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			send_usart_char("1. Set Battery Low Threshold\r\n2. Set Battery Max Threshold\r\n");
    5f64:	8e e5       	ldi	r24, 0x5E	; 94
    5f66:	96 e0       	ldi	r25, 0x06	; 6
    5f68:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			send_usart_char("3. Display Battery Threshold\r\n0. Exit\r\n");
    5f6c:	8b e9       	ldi	r24, 0x9B	; 155
    5f6e:	96 e0       	ldi	r25, 0x06	; 6
    5f70:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			battery_option_flag = 1;
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	80 93 fe 1f 	sts	0x1FFE, r24
			battery_state = battery_idle;
    5f7a:	84 e0       	ldi	r24, 0x04	; 4
    5f7c:	80 93 b7 20 	sts	0x20B7, r24
		}
		break;
    5f80:	08 95       	ret
		
		case batteryLow:
		{
			send_usart_char("Enter battery low threshold value (00-FF): \r\n");
    5f82:	83 ec       	ldi	r24, 0xC3	; 195
    5f84:	96 e0       	ldi	r25, 0x06	; 6
    5f86:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			config_read_input(BATTERY_LOW, '1', batteryLOW_display);
    5f8a:	44 e2       	ldi	r20, 0x24	; 36
    5f8c:	58 e0       	ldi	r21, 0x08	; 8
    5f8e:	61 e3       	ldi	r22, 0x31	; 49
    5f90:	84 e0       	ldi	r24, 0x04	; 4
    5f92:	90 e1       	ldi	r25, 0x10	; 16
    5f94:	0e 94 db 26 	call	0x4db6	; 0x4db6 <config_read_input>
			battery_state = battery_startup_message;
    5f98:	10 92 b7 20 	sts	0x20B7, r1
		}
		break;
    5f9c:	08 95       	ret
		
		case batteryMax:
		{
			send_usart_char("Enter battery max threshold value (00-FF): \r\n");
    5f9e:	81 ef       	ldi	r24, 0xF1	; 241
    5fa0:	96 e0       	ldi	r25, 0x06	; 6
    5fa2:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			config_read_input(BATTERY_MAX, '1', batteryMAX_display);
    5fa6:	4e e0       	ldi	r20, 0x0E	; 14
    5fa8:	58 e0       	ldi	r21, 0x08	; 8
    5faa:	61 e3       	ldi	r22, 0x31	; 49
    5fac:	83 e0       	ldi	r24, 0x03	; 3
    5fae:	90 e1       	ldi	r25, 0x10	; 16
    5fb0:	0e 94 db 26 	call	0x4db6	; 0x4db6 <config_read_input>
			battery_state = battery_startup_message;
    5fb4:	10 92 b7 20 	sts	0x20B7, r1
		}
		break;
    5fb8:	08 95       	ret
		
		case batteryStatus:
		{
			battery_cache = readE2prom(BATTERY_LOW);
    5fba:	84 e0       	ldi	r24, 0x04	; 4
    5fbc:	90 e1       	ldi	r25, 0x10	; 16
    5fbe:	25 de       	rcall	.-950    	; 0x5c0a <readE2prom>
    5fc0:	80 93 bc 20 	sts	0x20BC, r24
			send_usart_char("\r\nBattery Low Threshold: ");
    5fc4:	8f e1       	ldi	r24, 0x1F	; 31
    5fc6:	97 e0       	ldi	r25, 0x07	; 7
    5fc8:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			int_to_ascii(battery_cache);
    5fcc:	80 91 bc 20 	lds	r24, 0x20BC
    5fd0:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
			send_usart_char("\r\n");
    5fd4:	8b e5       	ldi	r24, 0x5B	; 91
    5fd6:	96 e0       	ldi	r25, 0x06	; 6
    5fd8:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			battery_cache = readE2prom(BATTERY_MAX);
    5fdc:	83 e0       	ldi	r24, 0x03	; 3
    5fde:	90 e1       	ldi	r25, 0x10	; 16
    5fe0:	14 de       	rcall	.-984    	; 0x5c0a <readE2prom>
    5fe2:	80 93 bc 20 	sts	0x20BC, r24
			send_usart_char("\r\nBattery MAX Threshold: ");
    5fe6:	89 e3       	ldi	r24, 0x39	; 57
    5fe8:	97 e0       	ldi	r25, 0x07	; 7
    5fea:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			int_to_ascii(battery_cache);
    5fee:	80 91 bc 20 	lds	r24, 0x20BC
    5ff2:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <int_to_ascii>
			send_usart_char("\r\n");
    5ff6:	8b e5       	ldi	r24, 0x5B	; 91
    5ff8:	96 e0       	ldi	r25, 0x06	; 6
    5ffa:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			battery_state = battery_startup_message;
    5ffe:	10 92 b7 20 	sts	0x20B7, r1
		}
		break;
    6002:	08 95       	ret
		case battery_idle:
		break;
		
		case battery_exit:
		{
			battery_option_flag = 0;
    6004:	10 92 fe 1f 	sts	0x1FFE, r1
			option_select = option_message;
    6008:	89 e0       	ldi	r24, 0x09	; 9
    600a:	80 93 11 20 	sts	0x2011, r24
			config_state = config_startup_message;
    600e:	10 92 fc 1f 	sts	0x1FFC, r1
			battery_state = battery_startup_message;
    6012:	10 92 b7 20 	sts	0x20B7, r1
			break;
    6016:	08 95       	ret
		}
		default:
		option_select = option_message;
    6018:	89 e0       	ldi	r24, 0x09	; 9
    601a:	80 93 11 20 	sts	0x2011, r24
		config_state = config_startup_message;
    601e:	10 92 fc 1f 	sts	0x1FFC, r1
		battery_state = battery_startup_message;
    6022:	10 92 b7 20 	sts	0x20B7, r1
    6026:	08 95       	ret

00006028 <batterySelect>:


uint8_t batterySelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    6028:	10 92 fb 1f 	sts	0x1FFB, r1
	
	switch(commamd[0])
    602c:	80 91 3c 20 	lds	r24, 0x203C
    6030:	81 33       	cpi	r24, 0x31	; 49
    6032:	a9 f0       	breq	.+42     	; 0x605e <batterySelect+0x36>
    6034:	18 f4       	brcc	.+6      	; 0x603c <batterySelect+0x14>
    6036:	80 33       	cpi	r24, 0x30	; 48
    6038:	51 f0       	breq	.+20     	; 0x604e <batterySelect+0x26>
    603a:	0b c0       	rjmp	.+22     	; 0x6052 <batterySelect+0x2a>
    603c:	82 33       	cpi	r24, 0x32	; 50
    603e:	19 f0       	breq	.+6      	; 0x6046 <batterySelect+0x1e>
    6040:	83 33       	cpi	r24, 0x33	; 51
    6042:	19 f0       	breq	.+6      	; 0x604a <batterySelect+0x22>
    6044:	06 c0       	rjmp	.+12     	; 0x6052 <batterySelect+0x2a>
		case '1':
		return batteryLow;
		break;
		
		case '2':
		return batteryMax;
    6046:	82 e0       	ldi	r24, 0x02	; 2
    6048:	08 95       	ret
		break;
		
		case '3':
		return batteryStatus;
    604a:	83 e0       	ldi	r24, 0x03	; 3
    604c:	08 95       	ret
		break;
		
		case '0':
		return battery_exit;
    604e:	85 e0       	ldi	r24, 0x05	; 5
    6050:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    6052:	8c e0       	ldi	r24, 0x0C	; 12
    6054:	93 e0       	ldi	r25, 0x03	; 3
    6056:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
			return  battery_idle;
    605a:	84 e0       	ldi	r24, 0x04	; 4
    605c:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
		return batteryLow;
    605e:	81 e0       	ldi	r24, 0x01	; 1
			return  battery_idle;
		}
		break;
		
	}
    6060:	08 95       	ret

00006062 <factory_mode>:
#include "appBattery.h"

//---------- main routine for factory mode ----------//
void factory_mode(void)
{
	configuration_flag = 0; 
    6062:	10 92 35 20 	sts	0x2035, r1
	reset_option_flag = 0;
    6066:	10 92 ff 1f 	sts	0x1FFF, r1
	config_waiting_input = 0;
    606a:	10 92 61 20 	sts	0x2061, r1
	flag = 0;
    606e:	10 92 fb 1f 	sts	0x1FFB, r1
	count_usart = 0;
    6072:	10 92 1f 20 	sts	0x201F, r1
	usart_state = Usart_start;
    6076:	10 92 8e 20 	sts	0x208E, r1
	factory_state = factory_startup_message;
    607a:	10 92 b5 20 	sts	0x20B5, r1
	factory_command = groupID_command;
    607e:	10 92 fa 1f 	sts	0x1FFA, r1
	config_state = config_startup_message;
    6082:	10 92 fc 1f 	sts	0x1FFC, r1
	reset_state = reset_startup_message;
    6086:	10 92 8c 20 	sts	0x208C, r1
	config_command = groupID_config;
    608a:	10 92 bd 20 	sts	0x20BD, r1
	button = button1;
    608e:	10 92 fd 1f 	sts	0x1FFD, r1
	option_select = option_message;
    6092:	89 e0       	ldi	r24, 0x09	; 9
    6094:	80 93 11 20 	sts	0x2011, r24
	battery_option_flag = 0;
    6098:	10 92 fe 1f 	sts	0x1FFE, r1
	battery_state = battery_startup_message;
    609c:	10 92 b7 20 	sts	0x20B7, r1
    60a0:	ec e3       	ldi	r30, 0x3C	; 60
    60a2:	f0 e2       	ldi	r31, 0x20	; 32
    60a4:	89 e4       	ldi	r24, 0x49	; 73
    60a6:	90 e2       	ldi	r25, 0x20	; 32
	
	for (uint8_t i=0; i<max_command_length; i++)
	{
		commamd[i] = 0;
    60a8:	11 92       	st	Z+, r1
	button = button1;
	option_select = option_message;
	battery_option_flag = 0;
	battery_state = battery_startup_message;
	
	for (uint8_t i=0; i<max_command_length; i++)
    60aa:	e8 17       	cp	r30, r24
    60ac:	f9 07       	cpc	r31, r25
    60ae:	e1 f7       	brne	.-8      	; 0x60a8 <factory_mode+0x46>
	}


	while (1)
	{
		if(flag == 1)
    60b0:	80 91 fb 1f 	lds	r24, 0x1FFB
    60b4:	81 30       	cpi	r24, 0x01	; 1
    60b6:	f1 f4       	brne	.+60     	; 0x60f4 <factory_mode+0x92>
		{
			if(configuration_flag == 1)
    60b8:	80 91 35 20 	lds	r24, 0x2035
    60bc:	81 30       	cpi	r24, 0x01	; 1
    60be:	29 f4       	brne	.+10     	; 0x60ca <factory_mode+0x68>
				config_state = configSelect();
    60c0:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <configSelect>
    60c4:	80 93 fc 1f 	sts	0x1FFC, r24
    60c8:	15 c0       	rjmp	.+42     	; 0x60f4 <factory_mode+0x92>
			else if(reset_option_flag == 1)
    60ca:	80 91 ff 1f 	lds	r24, 0x1FFF
    60ce:	81 30       	cpi	r24, 0x01	; 1
    60d0:	29 f4       	brne	.+10     	; 0x60dc <factory_mode+0x7a>
				reset_state = resetSelect();
    60d2:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <resetSelect>
    60d6:	80 93 8c 20 	sts	0x208C, r24
    60da:	0c c0       	rjmp	.+24     	; 0x60f4 <factory_mode+0x92>
			else if(battery_option_flag == 1)
    60dc:	80 91 fe 1f 	lds	r24, 0x1FFE
    60e0:	81 30       	cpi	r24, 0x01	; 1
    60e2:	21 f4       	brne	.+8      	; 0x60ec <factory_mode+0x8a>
				battery_state = batterySelect();
    60e4:	a1 df       	rcall	.-190    	; 0x6028 <batterySelect>
    60e6:	80 93 b7 20 	sts	0x20B7, r24
    60ea:	04 c0       	rjmp	.+8      	; 0x60f4 <factory_mode+0x92>
			else option_select = optionSelect();
    60ec:	0e 94 75 26 	call	0x4cea	; 0x4cea <optionSelect>
    60f0:	80 93 11 20 	sts	0x2011, r24
		}
		
		switch(option_select)
    60f4:	e0 91 11 20 	lds	r30, 0x2011
    60f8:	8e 2f       	mov	r24, r30
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	fc 01       	movw	r30, r24
    60fe:	31 97       	sbiw	r30, 0x01	; 1
    6100:	e9 30       	cpi	r30, 0x09	; 9
    6102:	f1 05       	cpc	r31, r1
    6104:	a8 f6       	brcc	.-86     	; 0x60b0 <factory_mode+0x4e>
    6106:	88 27       	eor	r24, r24
    6108:	e2 58       	subi	r30, 0x82	; 130
    610a:	fe 4f       	sbci	r31, 0xFE	; 254
    610c:	8f 4f       	sbci	r24, 0xFF	; 255
    610e:	0c 94 0a 4c 	jmp	0x9814	; 0x9814 <__tablejump2__>
		{
			case config:
				pneConfiguration();
    6112:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <pneConfiguration>
			break;
    6116:	cc cf       	rjmp	.-104    	; 0x60b0 <factory_mode+0x4e>
			
			case display_info:
				pneDisplayInfo();
    6118:	7f dd       	rcall	.-1282   	; 0x5c18 <pneDisplayInfo>
			break;
    611a:	ca cf       	rjmp	.-108    	; 0x60b0 <factory_mode+0x4e>
			
			case reset_flag:
				resetFlag();
    611c:	47 de       	rcall	.-882    	; 0x5dac <resetFlag>
			break;
    611e:	c8 cf       	rjmp	.-112    	; 0x60b0 <factory_mode+0x4e>
			
			case option_message:
			{
				//Welcome Message	
				send_usart_char("\r\n\r\n\r\nPNEWELS ");
    6120:	83 e5       	ldi	r24, 0x53	; 83
    6122:	97 e0       	ldi	r25, 0x07	; 7
    6124:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
				send_usart_char(version);
    6128:	82 e6       	ldi	r24, 0x62	; 98
    612a:	97 e0       	ldi	r25, 0x07	; 7
    612c:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
				send_usart_char(" ");
    6130:	8d ee       	ldi	r24, 0xED	; 237
    6132:	94 e0       	ldi	r25, 0x04	; 4
    6134:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
				send_usart_char(version_date);
    6138:	81 e7       	ldi	r24, 0x71	; 113
    613a:	97 e0       	ldi	r25, 0x07	; 7
    613c:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
				send_usart_char("\r\n");
    6140:	8b e5       	ldi	r24, 0x5B	; 91
    6142:	96 e0       	ldi	r25, 0x06	; 6
    6144:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
				send_usart_char("1. Configuration\r\n2. Display info\r\n3. Test mode\r\n4. Reset device flag\r\n");
    6148:	86 e7       	ldi	r24, 0x76	; 118
    614a:	97 e0       	ldi	r25, 0x07	; 7
    614c:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
				send_usart_char("5. Dump Memory\r\n6. Dump Log Files\r\n7. Format Memory\r\n8. Battery Configuration\r\n");
    6150:	8e eb       	ldi	r24, 0xBE	; 190
    6152:	97 e0       	ldi	r25, 0x07	; 7
    6154:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <send_usart_char>
				option_select = idle;
    6158:	10 92 11 20 	sts	0x2011, r1
			}
			break;
    615c:	a9 cf       	rjmp	.-174    	; 0x60b0 <factory_mode+0x4e>
			
			case test_mode:
				testMode();
    615e:	0e 94 d5 27 	call	0x4faa	; 0x4faa <testMode>
			break;
    6162:	a6 cf       	rjmp	.-180    	; 0x60b0 <factory_mode+0x4e>
			
			case dump_memory:
				dump_eeprom();
    6164:	27 dd       	rcall	.-1458   	; 0x5bb4 <dump_eeprom>
			break;
    6166:	a4 cf       	rjmp	.-184    	; 0x60b0 <factory_mode+0x4e>
			
			case dump_log:
				dump_log_file();
    6168:	a5 de       	rcall	.-694    	; 0x5eb4 <dump_log_file>
			break;
    616a:	a2 cf       	rjmp	.-188    	; 0x60b0 <factory_mode+0x4e>

			case wipe_memory:
				erase_memory();
    616c:	d1 de       	rcall	.-606    	; 0x5f10 <erase_memory>
			break;
    616e:	a0 cf       	rjmp	.-192    	; 0x60b0 <factory_mode+0x4e>
			
			case battery_set:
				battery_config();
    6170:	e3 de       	rcall	.-570    	; 0x5f38 <battery_config>
			break;	
    6172:	9e cf       	rjmp	.-196    	; 0x60b0 <factory_mode+0x4e>

00006174 <packet_data>:
void charge_to_rf()
{
	uint16_t address = memory_address_incr - 11;
	eeprom_to_rf(address);
	address = memory_address_incr - 22;
	eeprom_to_rf(address);
    6174:	2f 92       	push	r2
    6176:	3f 92       	push	r3
    6178:	4f 92       	push	r4
    617a:	5f 92       	push	r5
    617c:	6f 92       	push	r6
    617e:	7f 92       	push	r7
    6180:	8f 92       	push	r8
    6182:	9f 92       	push	r9
    6184:	af 92       	push	r10
    6186:	bf 92       	push	r11
    6188:	cf 92       	push	r12
    618a:	df 92       	push	r13
    618c:	ef 92       	push	r14
    618e:	ff 92       	push	r15
    6190:	0f 93       	push	r16
    6192:	1f 93       	push	r17
    6194:	cf 93       	push	r28
    6196:	df 93       	push	r29
    6198:	cd b7       	in	r28, 0x3d	; 61
    619a:	de b7       	in	r29, 0x3e	; 62
    619c:	28 97       	sbiw	r28, 0x08	; 8
    619e:	0f b6       	in	r0, 0x3f	; 63
    61a0:	f8 94       	cli
    61a2:	de bf       	out	0x3e, r29	; 62
    61a4:	0f be       	out	0x3f, r0	; 63
    61a6:	cd bf       	out	0x3d, r28	; 61
    61a8:	ea eb       	ldi	r30, 0xBA	; 186
    61aa:	ff e1       	ldi	r31, 0x1F	; 31
    61ac:	c7 8c       	ldd	r12, Z+31	; 0x1f
    61ae:	20 e8       	ldi	r18, 0x80	; 128
    61b0:	c2 9e       	mul	r12, r18
    61b2:	60 01       	movw	r12, r0
    61b4:	11 24       	eor	r1, r1
    61b6:	d4 80       	ldd	r13, Z+4	; 0x04
    61b8:	8d 2d       	mov	r24, r13
    61ba:	81 70       	andi	r24, 0x01	; 1
    61bc:	c8 2a       	or	r12, r24
    61be:	d3 80       	ldd	r13, Z+3	; 0x03
    61c0:	d0 fa       	bst	r13, 0
    61c2:	ee 24       	eor	r14, r14
    61c4:	e0 f8       	bld	r14, 0
    61c6:	f1 2c       	mov	r15, r1
    61c8:	ee 0c       	add	r14, r14
    61ca:	ff 1c       	adc	r15, r15
    61cc:	ec 28       	or	r14, r12
    61ce:	f7 80       	ldd	r15, Z+7	; 0x07
    61d0:	0f 2d       	mov	r16, r15
    61d2:	01 70       	andi	r16, 0x01	; 1
    61d4:	10 e0       	ldi	r17, 0x00	; 0
    61d6:	00 0f       	add	r16, r16
    61d8:	11 1f       	adc	r17, r17
    61da:	00 0f       	add	r16, r16
    61dc:	11 1f       	adc	r17, r17
    61de:	e0 2a       	or	r14, r16
    61e0:	10 81       	ld	r17, Z
    61e2:	11 70       	andi	r17, 0x01	; 1
    61e4:	1f 83       	std	Y+7, r17	; 0x07
    61e6:	18 86       	std	Y+8, r1	; 0x08
    61e8:	0f 81       	ldd	r16, Y+7	; 0x07
    61ea:	18 85       	ldd	r17, Y+8	; 0x08
    61ec:	00 0f       	add	r16, r16
    61ee:	11 1f       	adc	r17, r17
    61f0:	00 0f       	add	r16, r16
    61f2:	11 1f       	adc	r17, r17
    61f4:	00 0f       	add	r16, r16
    61f6:	11 1f       	adc	r17, r17
    61f8:	e0 2a       	or	r14, r16
    61fa:	15 81       	ldd	r17, Z+5	; 0x05
    61fc:	a1 2f       	mov	r26, r17
    61fe:	a1 70       	andi	r26, 0x01	; 1
    6200:	b0 e0       	ldi	r27, 0x00	; 0
    6202:	a2 95       	swap	r26
    6204:	b2 95       	swap	r27
    6206:	b0 7f       	andi	r27, 0xF0	; 240
    6208:	ba 27       	eor	r27, r26
    620a:	a0 7f       	andi	r26, 0xF0	; 240
    620c:	ba 27       	eor	r27, r26
    620e:	ea 2a       	or	r14, r26
    6210:	a0 89       	ldd	r26, Z+16	; 0x10
    6212:	6a 2f       	mov	r22, r26
    6214:	61 70       	andi	r22, 0x01	; 1
    6216:	70 e0       	ldi	r23, 0x00	; 0
    6218:	66 0f       	add	r22, r22
    621a:	77 1f       	adc	r23, r23
    621c:	62 95       	swap	r22
    621e:	72 95       	swap	r23
    6220:	70 7f       	andi	r23, 0xF0	; 240
    6222:	76 27       	eor	r23, r22
    6224:	60 7f       	andi	r22, 0xF0	; 240
    6226:	76 27       	eor	r23, r22
    6228:	6e 29       	or	r22, r14
    622a:	70 85       	ldd	r23, Z+8	; 0x08
    622c:	47 2f       	mov	r20, r23
    622e:	41 70       	andi	r20, 0x01	; 1
    6230:	50 e0       	ldi	r21, 0x00	; 0
    6232:	00 24       	eor	r0, r0
    6234:	56 95       	lsr	r21
    6236:	47 95       	ror	r20
    6238:	07 94       	ror	r0
    623a:	56 95       	lsr	r21
    623c:	47 95       	ror	r20
    623e:	07 94       	ror	r0
    6240:	54 2f       	mov	r21, r20
    6242:	40 2d       	mov	r20, r0
    6244:	46 2b       	or	r20, r22
    6246:	40 93 ae 1f 	sts	0x1FAE, r20
    624a:	47 a1       	ldd	r20, Z+39	; 0x27
    624c:	90 e8       	ldi	r25, 0x80	; 128
    624e:	49 9f       	mul	r20, r25
    6250:	a0 01       	movw	r20, r0
    6252:	11 24       	eor	r1, r1
    6254:	52 89       	ldd	r21, Z+18	; 0x12
    6256:	57 70       	andi	r21, 0x07	; 7
    6258:	45 2b       	or	r20, r21
    625a:	53 85       	ldd	r21, Z+11	; 0x0b
    625c:	25 2f       	mov	r18, r21
    625e:	21 70       	andi	r18, 0x01	; 1
    6260:	30 e0       	ldi	r19, 0x00	; 0
    6262:	22 0f       	add	r18, r18
    6264:	33 1f       	adc	r19, r19
    6266:	22 0f       	add	r18, r18
    6268:	33 1f       	adc	r19, r19
    626a:	22 0f       	add	r18, r18
    626c:	33 1f       	adc	r19, r19
    626e:	24 2b       	or	r18, r20
    6270:	36 85       	ldd	r19, Z+14	; 0x0e
    6272:	83 2f       	mov	r24, r19
    6274:	81 70       	andi	r24, 0x01	; 1
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	82 95       	swap	r24
    627a:	92 95       	swap	r25
    627c:	90 7f       	andi	r25, 0xF0	; 240
    627e:	98 27       	eor	r25, r24
    6280:	80 7f       	andi	r24, 0xF0	; 240
    6282:	98 27       	eor	r25, r24
    6284:	82 2b       	or	r24, r18
    6286:	95 a1       	ldd	r25, Z+37	; 0x25
    6288:	90 fb       	bst	r25, 0
    628a:	aa 24       	eor	r10, r10
    628c:	a0 f8       	bld	r10, 0
    628e:	b1 2c       	mov	r11, r1
    6290:	aa 0c       	add	r10, r10
    6292:	bb 1c       	adc	r11, r11
    6294:	aa 0c       	add	r10, r10
    6296:	bb 1c       	adc	r11, r11
    6298:	aa 0c       	add	r10, r10
    629a:	bb 1c       	adc	r11, r11
    629c:	aa 0c       	add	r10, r10
    629e:	bb 1c       	adc	r11, r11
    62a0:	aa 0c       	add	r10, r10
    62a2:	bb 1c       	adc	r11, r11
    62a4:	a8 2a       	or	r10, r24
    62a6:	86 a1       	ldd	r24, Z+38	; 0x26
    62a8:	80 fb       	bst	r24, 0
    62aa:	88 24       	eor	r8, r8
    62ac:	80 f8       	bld	r8, 0
    62ae:	91 2c       	mov	r9, r1
    62b0:	00 24       	eor	r0, r0
    62b2:	96 94       	lsr	r9
    62b4:	87 94       	ror	r8
    62b6:	07 94       	ror	r0
    62b8:	96 94       	lsr	r9
    62ba:	87 94       	ror	r8
    62bc:	07 94       	ror	r0
    62be:	98 2c       	mov	r9, r8
    62c0:	80 2c       	mov	r8, r0
    62c2:	8a 28       	or	r8, r10
    62c4:	80 92 ad 1f 	sts	0x1FAD, r8
    62c8:	81 a1       	ldd	r24, Z+33	; 0x21
    62ca:	80 fb       	bst	r24, 0
    62cc:	66 24       	eor	r6, r6
    62ce:	60 f8       	bld	r6, 0
    62d0:	71 2c       	mov	r7, r1
    62d2:	66 0c       	add	r6, r6
    62d4:	77 1c       	adc	r7, r7
    62d6:	82 a1       	ldd	r24, Z+34	; 0x22
    62d8:	80 fb       	bst	r24, 0
    62da:	44 24       	eor	r4, r4
    62dc:	40 f8       	bld	r4, 0
    62de:	51 2c       	mov	r5, r1
    62e0:	44 0c       	add	r4, r4
    62e2:	55 1c       	adc	r5, r5
    62e4:	44 0c       	add	r4, r4
    62e6:	55 1c       	adc	r5, r5
    62e8:	46 28       	or	r4, r6
    62ea:	80 a1       	ldd	r24, Z+32	; 0x20
    62ec:	81 70       	andi	r24, 0x01	; 1
    62ee:	48 2a       	or	r4, r24
    62f0:	83 a1       	ldd	r24, Z+35	; 0x23
    62f2:	80 fb       	bst	r24, 0
    62f4:	22 24       	eor	r2, r2
    62f6:	20 f8       	bld	r2, 0
    62f8:	31 2c       	mov	r3, r1
    62fa:	22 0c       	add	r2, r2
    62fc:	33 1c       	adc	r3, r3
    62fe:	22 0c       	add	r2, r2
    6300:	33 1c       	adc	r3, r3
    6302:	22 0c       	add	r2, r2
    6304:	33 1c       	adc	r3, r3
    6306:	24 28       	or	r2, r4
    6308:	84 a1       	ldd	r24, Z+36	; 0x24
    630a:	81 70       	andi	r24, 0x01	; 1
    630c:	89 83       	std	Y+1, r24	; 0x01
    630e:	1a 82       	std	Y+2, r1	; 0x02
    6310:	49 81       	ldd	r20, Y+1	; 0x01
    6312:	5a 81       	ldd	r21, Y+2	; 0x02
    6314:	42 95       	swap	r20
    6316:	52 95       	swap	r21
    6318:	50 7f       	andi	r21, 0xF0	; 240
    631a:	54 27       	eor	r21, r20
    631c:	40 7f       	andi	r20, 0xF0	; 240
    631e:	54 27       	eor	r21, r20
    6320:	82 2d       	mov	r24, r2
    6322:	84 2b       	or	r24, r20
    6324:	91 85       	ldd	r25, Z+9	; 0x09
    6326:	91 70       	andi	r25, 0x01	; 1
    6328:	9b 83       	std	Y+3, r25	; 0x03
    632a:	1c 82       	std	Y+4, r1	; 0x04
    632c:	2b 81       	ldd	r18, Y+3	; 0x03
    632e:	3c 81       	ldd	r19, Y+4	; 0x04
    6330:	22 0f       	add	r18, r18
    6332:	33 1f       	adc	r19, r19
    6334:	22 95       	swap	r18
    6336:	32 95       	swap	r19
    6338:	30 7f       	andi	r19, 0xF0	; 240
    633a:	32 27       	eor	r19, r18
    633c:	20 7f       	andi	r18, 0xF0	; 240
    633e:	32 27       	eor	r19, r18
    6340:	28 2b       	or	r18, r24
    6342:	82 85       	ldd	r24, Z+10	; 0x0a
    6344:	81 70       	andi	r24, 0x01	; 1
    6346:	8d 83       	std	Y+5, r24	; 0x05
    6348:	1e 82       	std	Y+6, r1	; 0x06
    634a:	8d 81       	ldd	r24, Y+5	; 0x05
    634c:	9e 81       	ldd	r25, Y+6	; 0x06
    634e:	00 24       	eor	r0, r0
    6350:	96 95       	lsr	r25
    6352:	87 95       	ror	r24
    6354:	07 94       	ror	r0
    6356:	96 95       	lsr	r25
    6358:	87 95       	ror	r24
    635a:	07 94       	ror	r0
    635c:	98 2f       	mov	r25, r24
    635e:	80 2d       	mov	r24, r0
    6360:	82 2b       	or	r24, r18
    6362:	80 93 ac 1f 	sts	0x1FAC, r24
    6366:	28 96       	adiw	r28, 0x08	; 8
    6368:	0f b6       	in	r0, 0x3f	; 63
    636a:	f8 94       	cli
    636c:	de bf       	out	0x3e, r29	; 62
    636e:	0f be       	out	0x3f, r0	; 63
    6370:	cd bf       	out	0x3d, r28	; 61
    6372:	df 91       	pop	r29
    6374:	cf 91       	pop	r28
    6376:	1f 91       	pop	r17
    6378:	0f 91       	pop	r16
    637a:	ff 90       	pop	r15
    637c:	ef 90       	pop	r14
    637e:	df 90       	pop	r13
    6380:	cf 90       	pop	r12
    6382:	bf 90       	pop	r11
    6384:	af 90       	pop	r10
    6386:	9f 90       	pop	r9
    6388:	8f 90       	pop	r8
    638a:	7f 90       	pop	r7
    638c:	6f 90       	pop	r6
    638e:	5f 90       	pop	r5
    6390:	4f 90       	pop	r4
    6392:	3f 90       	pop	r3
    6394:	2f 90       	pop	r2
    6396:	08 95       	ret

00006398 <reboot_to_rf>:
    6398:	ff cf       	rjmp	.-2      	; 0x6398 <reboot_to_rf>

0000639a <WPS_pairing>:
    639a:	cf 93       	push	r28
    639c:	df 93       	push	r29
    639e:	ec 01       	movw	r28, r24
    63a0:	68 81       	ld	r22, Y
    63a2:	8d ef       	ldi	r24, 0xFD	; 253
    63a4:	9f e0       	ldi	r25, 0x0F	; 15
    63a6:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
    63aa:	69 81       	ldd	r22, Y+1	; 0x01
    63ac:	8c ef       	ldi	r24, 0xFC	; 252
    63ae:	9f e0       	ldi	r25, 0x0F	; 15
    63b0:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
    63b4:	6a 81       	ldd	r22, Y+2	; 0x02
    63b6:	8f ef       	ldi	r24, 0xFF	; 255
    63b8:	9f e0       	ldi	r25, 0x0F	; 15
    63ba:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
    63be:	6b 81       	ldd	r22, Y+3	; 0x03
    63c0:	8e ef       	ldi	r24, 0xFE	; 254
    63c2:	9f e0       	ldi	r25, 0x0F	; 15
    63c4:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
    63c8:	6c 81       	ldd	r22, Y+4	; 0x04
    63ca:	81 e0       	ldi	r24, 0x01	; 1
    63cc:	90 e1       	ldi	r25, 0x10	; 16
    63ce:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
    63d2:	6d 81       	ldd	r22, Y+5	; 0x05
    63d4:	80 e0       	ldi	r24, 0x00	; 0
    63d6:	90 e1       	ldi	r25, 0x10	; 16
    63d8:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
    63dc:	df 91       	pop	r29
    63de:	cf 91       	pop	r28
    63e0:	08 95       	ret

000063e2 <send_to_rf>:
    63e2:	af 92       	push	r10
    63e4:	bf 92       	push	r11
    63e6:	cf 92       	push	r12
    63e8:	df 92       	push	r13
    63ea:	ef 92       	push	r14
    63ec:	ff 92       	push	r15
    63ee:	0f 93       	push	r16
    63f0:	1f 93       	push	r17
    63f2:	cf 93       	push	r28
    63f4:	df 93       	push	r29
    63f6:	6c 01       	movw	r12, r24
    63f8:	f6 2e       	mov	r15, r22
    63fa:	5a 01       	movw	r10, r20
    63fc:	0e 94 4a 03 	call	0x694	; 0x694 <APP_NwkGetBuffer>
    6400:	ec 01       	movw	r28, r24
    6402:	00 97       	sbiw	r24, 0x00	; 0
    6404:	09 f4       	brne	.+2      	; 0x6408 <send_to_rf+0x26>
    6406:	86 c0       	rjmp	.+268    	; 0x6514 <send_to_rf+0x132>
    6408:	80 58       	subi	r24, 0x80	; 128
    640a:	9f 4f       	sbci	r25, 0xFF	; 255
    640c:	dc 01       	movw	r26, r24
    640e:	1c 92       	st	X, r1
    6410:	8e 01       	movw	r16, r28
    6412:	0d 5e       	subi	r16, 0xED	; 237
    6414:	1f 4f       	sbci	r17, 0xFF	; 255
    6416:	28 e0       	ldi	r18, 0x08	; 8
    6418:	f5 01       	movw	r30, r10
    641a:	d8 01       	movw	r26, r16
    641c:	01 90       	ld	r0, Z+
    641e:	0d 92       	st	X+, r0
    6420:	2a 95       	dec	r18
    6422:	e1 f7       	brne	.-8      	; 0x641c <send_to_rf+0x3a>
    6424:	28 e0       	ldi	r18, 0x08	; 8
    6426:	fc 01       	movw	r30, r24
    6428:	20 83       	st	Z, r18
    642a:	ff 20       	and	r15, r15
    642c:	89 f1       	breq	.+98     	; 0x6490 <send_to_rf+0xae>
    642e:	56 01       	movw	r10, r12
    6430:	6f ef       	ldi	r22, 0xFF	; 255
    6432:	6f 0d       	add	r22, r15
    6434:	70 e0       	ldi	r23, 0x00	; 0
    6436:	6f 5f       	subi	r22, 0xFF	; 255
    6438:	7f 4f       	sbci	r23, 0xFF	; 255
    643a:	6c 0d       	add	r22, r12
    643c:	7d 1d       	adc	r23, r13
    643e:	fc 01       	movw	r30, r24
    6440:	0f 2e       	mov	r0, r31
    6442:	fb e5       	ldi	r31, 0x5B	; 91
    6444:	df 2e       	mov	r13, r31
    6446:	f0 2d       	mov	r31, r0
    6448:	0f 2e       	mov	r0, r31
    644a:	fd e5       	ldi	r31, 0x5D	; 93
    644c:	ef 2e       	mov	r14, r31
    644e:	f0 2d       	mov	r31, r0
    6450:	90 81       	ld	r25, Z
    6452:	9e 01       	movw	r18, r28
    6454:	29 0f       	add	r18, r25
    6456:	31 1d       	adc	r19, r1
    6458:	d9 01       	movw	r26, r18
    645a:	53 96       	adiw	r26, 0x13	; 19
    645c:	dc 92       	st	X, r13
    645e:	22 e0       	ldi	r18, 0x02	; 2
    6460:	29 0f       	add	r18, r25
    6462:	20 83       	st	Z, r18
    6464:	d5 01       	movw	r26, r10
    6466:	3d 91       	ld	r19, X+
    6468:	5d 01       	movw	r10, r26
    646a:	81 e0       	ldi	r24, 0x01	; 1
    646c:	89 0f       	add	r24, r25
    646e:	ae 01       	movw	r20, r28
    6470:	48 0f       	add	r20, r24
    6472:	51 1d       	adc	r21, r1
    6474:	da 01       	movw	r26, r20
    6476:	53 96       	adiw	r26, 0x13	; 19
    6478:	3c 93       	st	X, r19
    647a:	9d 5f       	subi	r25, 0xFD	; 253
    647c:	90 83       	st	Z, r25
    647e:	ce 01       	movw	r24, r28
    6480:	82 0f       	add	r24, r18
    6482:	91 1d       	adc	r25, r1
    6484:	dc 01       	movw	r26, r24
    6486:	53 96       	adiw	r26, 0x13	; 19
    6488:	ec 92       	st	X, r14
    648a:	a6 16       	cp	r10, r22
    648c:	b7 06       	cpc	r11, r23
    648e:	01 f7       	brne	.-64     	; 0x6450 <send_to_rf+0x6e>
    6490:	c3 d4       	rcall	.+2438   	; 0x6e18 <crcInit>
    6492:	6e 01       	movw	r12, r28
    6494:	b0 e8       	ldi	r27, 0x80	; 128
    6496:	cb 0e       	add	r12, r27
    6498:	d1 1c       	adc	r13, r1
    649a:	f6 01       	movw	r30, r12
    649c:	b0 80       	ld	r11, Z
    649e:	81 e0       	ldi	r24, 0x01	; 1
    64a0:	8b 0d       	add	r24, r11
    64a2:	80 83       	st	Z, r24
    64a4:	8f 2d       	mov	r24, r15
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	7c 01       	movw	r14, r24
    64aa:	f8 e0       	ldi	r31, 0x08	; 8
    64ac:	ef 0e       	add	r14, r31
    64ae:	f1 1c       	adc	r15, r1
    64b0:	88 0f       	add	r24, r24
    64b2:	99 1f       	adc	r25, r25
    64b4:	e8 0e       	add	r14, r24
    64b6:	f9 1e       	adc	r15, r25
    64b8:	b7 01       	movw	r22, r14
    64ba:	c8 01       	movw	r24, r16
    64bc:	ca d4       	rcall	.+2452   	; 0x6e52 <crcFast>
    64be:	fe 01       	movw	r30, r28
    64c0:	eb 0d       	add	r30, r11
    64c2:	f1 1d       	adc	r31, r1
    64c4:	93 8b       	std	Z+19, r25	; 0x13
    64c6:	d6 01       	movw	r26, r12
    64c8:	bc 90       	ld	r11, X
    64ca:	81 e0       	ldi	r24, 0x01	; 1
    64cc:	8b 0d       	add	r24, r11
    64ce:	8c 93       	st	X, r24
    64d0:	b7 01       	movw	r22, r14
    64d2:	c8 01       	movw	r24, r16
    64d4:	be d4       	rcall	.+2428   	; 0x6e52 <crcFast>
    64d6:	fe 01       	movw	r30, r28
    64d8:	eb 0d       	add	r30, r11
    64da:	f1 1d       	adc	r31, r1
    64dc:	83 8b       	std	Z+19, r24	; 0x13
    64de:	f6 01       	movw	r30, r12
    64e0:	60 81       	ld	r22, Z
    64e2:	70 e0       	ldi	r23, 0x00	; 0
    64e4:	26 e0       	ldi	r18, 0x06	; 6
    64e6:	30 e0       	ldi	r19, 0x00	; 0
    64e8:	48 e2       	ldi	r20, 0x28	; 40
    64ea:	52 e0       	ldi	r21, 0x02	; 2
    64ec:	c8 01       	movw	r24, r16
    64ee:	0e 94 a6 4b 	call	0x974c	; 0x974c <pnesign>
    64f2:	d6 01       	movw	r26, r12
    64f4:	2c 91       	ld	r18, X
    64f6:	fe 01       	movw	r30, r28
    64f8:	e2 0f       	add	r30, r18
    64fa:	f1 1d       	adc	r31, r1
    64fc:	93 8b       	std	Z+19, r25	; 0x13
    64fe:	92 e0       	ldi	r25, 0x02	; 2
    6500:	92 0f       	add	r25, r18
    6502:	9c 93       	st	X, r25
    6504:	2f 5f       	subi	r18, 0xFF	; 255
    6506:	fe 01       	movw	r30, r28
    6508:	e2 0f       	add	r30, r18
    650a:	f1 1d       	adc	r31, r1
    650c:	83 8b       	std	Z+19, r24	; 0x13
    650e:	ce 01       	movw	r24, r28
    6510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <APP_NwkSendBuffer>
    6514:	df 91       	pop	r29
    6516:	cf 91       	pop	r28
    6518:	1f 91       	pop	r17
    651a:	0f 91       	pop	r16
    651c:	ff 90       	pop	r15
    651e:	ef 90       	pop	r14
    6520:	df 90       	pop	r13
    6522:	cf 90       	pop	r12
    6524:	bf 90       	pop	r11
    6526:	af 90       	pop	r10
    6528:	08 95       	ret

0000652a <status_send_to_rf>:
    652a:	cf 93       	push	r28
    652c:	df 93       	push	r29
    652e:	22 de       	rcall	.-956    	; 0x6174 <packet_data>
    6530:	c8 e4       	ldi	r28, 0x48	; 72
    6532:	df e1       	ldi	r29, 0x1F	; 31
    6534:	80 91 ae 1f 	lds	r24, 0x1FAE
    6538:	88 83       	st	Y, r24
    653a:	80 91 ad 1f 	lds	r24, 0x1FAD
    653e:	89 83       	std	Y+1, r24	; 0x01
    6540:	80 91 ac 1f 	lds	r24, 0x1FAC
    6544:	8a 83       	std	Y+2, r24	; 0x02
    6546:	ea eb       	ldi	r30, 0xBA	; 186
    6548:	ff e1       	ldi	r31, 0x1F	; 31
    654a:	86 81       	ldd	r24, Z+6	; 0x06
    654c:	8b 83       	std	Y+3, r24	; 0x03
    654e:	81 81       	ldd	r24, Z+1	; 0x01
    6550:	8c 83       	std	Y+4, r24	; 0x04
    6552:	82 81       	ldd	r24, Z+2	; 0x02
    6554:	8d 83       	std	Y+5, r24	; 0x05
    6556:	b5 d3       	rcall	.+1898   	; 0x6cc2 <get_timestamp>
    6558:	9e 83       	std	Y+6, r25	; 0x06
    655a:	b3 d3       	rcall	.+1894   	; 0x6cc2 <get_timestamp>
    655c:	8f 83       	std	Y+7, r24	; 0x07
    655e:	b1 d3       	rcall	.+1890   	; 0x6cc2 <get_timestamp>
    6560:	78 87       	std	Y+8, r23	; 0x08
    6562:	af d3       	rcall	.+1886   	; 0x6cc2 <get_timestamp>
    6564:	69 87       	std	Y+9, r22	; 0x09
    6566:	46 e6       	ldi	r20, 0x66	; 102
    6568:	58 e0       	ldi	r21, 0x08	; 8
    656a:	6a e0       	ldi	r22, 0x0A	; 10
    656c:	ce 01       	movw	r24, r28
    656e:	39 df       	rcall	.-398    	; 0x63e2 <send_to_rf>
    6570:	df 91       	pop	r29
    6572:	cf 91       	pop	r28
    6574:	08 95       	ret

00006576 <emergency_on_to_rf>:
    6576:	81 e0       	ldi	r24, 0x01	; 1
    6578:	80 93 c2 1f 	sts	0x1FC2, r24
    657c:	4f e6       	ldi	r20, 0x6F	; 111
    657e:	58 e0       	ldi	r21, 0x08	; 8
    6580:	60 e0       	ldi	r22, 0x00	; 0
    6582:	88 e4       	ldi	r24, 0x48	; 72
    6584:	9f e1       	ldi	r25, 0x1F	; 31
    6586:	2d cf       	rjmp	.-422    	; 0x63e2 <send_to_rf>
    6588:	08 95       	ret

0000658a <emergency_off_to_rf>:
    658a:	10 92 c2 1f 	sts	0x1FC2, r1
    658e:	4f e6       	ldi	r20, 0x6F	; 111
    6590:	58 e0       	ldi	r21, 0x08	; 8
    6592:	60 e0       	ldi	r22, 0x00	; 0
    6594:	88 e4       	ldi	r24, 0x48	; 72
    6596:	9f e1       	ldi	r25, 0x1F	; 31
    6598:	24 cf       	rjmp	.-440    	; 0x63e2 <send_to_rf>
    659a:	08 95       	ret

0000659c <eeprom_to_rf>:
    659c:	ef 92       	push	r14
    659e:	ff 92       	push	r15
    65a0:	0f 93       	push	r16
    65a2:	1f 93       	push	r17
    65a4:	cf 93       	push	r28
    65a6:	df 93       	push	r29
    65a8:	ec 01       	movw	r28, r24
    65aa:	08 e4       	ldi	r16, 0x48	; 72
    65ac:	1f e1       	ldi	r17, 0x1F	; 31
    65ae:	7c 01       	movw	r14, r24
    65b0:	8b e0       	ldi	r24, 0x0B	; 11
    65b2:	e8 0e       	add	r14, r24
    65b4:	f1 1c       	adc	r15, r1
    65b6:	2d 2f       	mov	r18, r29
    65b8:	4c 2f       	mov	r20, r28
    65ba:	65 e4       	ldi	r22, 0x45	; 69
    65bc:	8f ea       	ldi	r24, 0xAF	; 175
    65be:	0e 94 bb 20 	call	0x4176	; 0x4176 <PNEWELSE2promRead>
    65c2:	f8 01       	movw	r30, r16
    65c4:	81 93       	st	Z+, r24
    65c6:	8f 01       	movw	r16, r30
    65c8:	21 96       	adiw	r28, 0x01	; 1
    65ca:	8a e0       	ldi	r24, 0x0A	; 10
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <pne_delayms>
    65d2:	ce 15       	cp	r28, r14
    65d4:	df 05       	cpc	r29, r15
    65d6:	79 f7       	brne	.-34     	; 0x65b6 <eeprom_to_rf+0x1a>
    65d8:	43 e5       	ldi	r20, 0x53	; 83
    65da:	52 e0       	ldi	r21, 0x02	; 2
    65dc:	6b e0       	ldi	r22, 0x0B	; 11
    65de:	88 e4       	ldi	r24, 0x48	; 72
    65e0:	9f e1       	ldi	r25, 0x1F	; 31
    65e2:	ff de       	rcall	.-514    	; 0x63e2 <send_to_rf>
    65e4:	df 91       	pop	r29
    65e6:	cf 91       	pop	r28
    65e8:	1f 91       	pop	r17
    65ea:	0f 91       	pop	r16
    65ec:	ff 90       	pop	r15
    65ee:	ef 90       	pop	r14
    65f0:	08 95       	ret

000065f2 <error_to_rf>:
	send_to_rf(data_to_rf, 11, "[rd rom]");
}

void error_to_rf(uint8_t alert_type)
{
	switch(alert_type)
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	8c 30       	cpi	r24, 0x0C	; 12
    65f6:	91 05       	cpc	r25, r1
    65f8:	08 f0       	brcs	.+2      	; 0x65fc <error_to_rf+0xa>
    65fa:	7d c0       	rjmp	.+250    	; 0x66f6 <error_to_rf+0x104>
    65fc:	fc 01       	movw	r30, r24
    65fe:	88 27       	eor	r24, r24
    6600:	e9 57       	subi	r30, 0x79	; 121
    6602:	fe 4f       	sbci	r31, 0xFE	; 254
    6604:	8f 4f       	sbci	r24, 0xFF	; 255
    6606:	0c 94 0a 4c 	jmp	0x9814	; 0x9814 <__tablejump2__>
	{
		case temperature_alert:
			data_to_rf[0] = temperature_alert;
    660a:	10 92 48 1f 	sts	0x1F48, r1
			send_to_rf(data_to_rf,1,"[error!]");
    660e:	48 e7       	ldi	r20, 0x78	; 120
    6610:	58 e0       	ldi	r21, 0x08	; 8
    6612:	61 e0       	ldi	r22, 0x01	; 1
    6614:	88 e4       	ldi	r24, 0x48	; 72
    6616:	9f e1       	ldi	r25, 0x1F	; 31
    6618:	e4 ce       	rjmp	.-568    	; 0x63e2 <send_to_rf>
			break;
    661a:	08 95       	ret
			
		case battery_dead_alert:
			data_to_rf[0] = battery_dead_alert;
    661c:	81 e0       	ldi	r24, 0x01	; 1
    661e:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6622:	48 e7       	ldi	r20, 0x78	; 120
    6624:	58 e0       	ldi	r21, 0x08	; 8
    6626:	61 e0       	ldi	r22, 0x01	; 1
    6628:	88 e4       	ldi	r24, 0x48	; 72
    662a:	9f e1       	ldi	r25, 0x1F	; 31
    662c:	da ce       	rjmp	.-588    	; 0x63e2 <send_to_rf>
			break;
    662e:	08 95       	ret
			
		case conflicted_command:
			data_to_rf[0] = conflicted_command;
    6630:	83 e0       	ldi	r24, 0x03	; 3
    6632:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6636:	48 e7       	ldi	r20, 0x78	; 120
    6638:	58 e0       	ldi	r21, 0x08	; 8
    663a:	61 e0       	ldi	r22, 0x01	; 1
    663c:	88 e4       	ldi	r24, 0x48	; 72
    663e:	9f e1       	ldi	r25, 0x1F	; 31
    6640:	d0 ce       	rjmp	.-608    	; 0x63e2 <send_to_rf>
			break;
    6642:	08 95       	ret
		
		case battery_wrong_alert:
			data_to_rf[0] = battery_wrong_alert;
    6644:	82 e0       	ldi	r24, 0x02	; 2
    6646:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    664a:	48 e7       	ldi	r20, 0x78	; 120
    664c:	58 e0       	ldi	r21, 0x08	; 8
    664e:	61 e0       	ldi	r22, 0x01	; 1
    6650:	88 e4       	ldi	r24, 0x48	; 72
    6652:	9f e1       	ldi	r25, 0x1F	; 31
    6654:	c6 ce       	rjmp	.-628    	; 0x63e2 <send_to_rf>
			break;
    6656:	08 95       	ret
			
		case read_eeprom_error:
			data_to_rf[0] = read_eeprom_error;
    6658:	84 e0       	ldi	r24, 0x04	; 4
    665a:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    665e:	48 e7       	ldi	r20, 0x78	; 120
    6660:	58 e0       	ldi	r21, 0x08	; 8
    6662:	61 e0       	ldi	r22, 0x01	; 1
    6664:	88 e4       	ldi	r24, 0x48	; 72
    6666:	9f e1       	ldi	r25, 0x1F	; 31
    6668:	bc ce       	rjmp	.-648    	; 0x63e2 <send_to_rf>
			break;
    666a:	08 95       	ret
			
		case hardware_error:
			data_to_rf[0] = hardware_error;
    666c:	85 e0       	ldi	r24, 0x05	; 5
    666e:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6672:	48 e7       	ldi	r20, 0x78	; 120
    6674:	58 e0       	ldi	r21, 0x08	; 8
    6676:	61 e0       	ldi	r22, 0x01	; 1
    6678:	88 e4       	ldi	r24, 0x48	; 72
    667a:	9f e1       	ldi	r25, 0x1F	; 31
    667c:	b2 ce       	rjmp	.-668    	; 0x63e2 <send_to_rf>
			break;
    667e:	08 95       	ret
			
		case time_invalid_data_size:
			data_to_rf[0] = time_invalid_data_size;
    6680:	86 e0       	ldi	r24, 0x06	; 6
    6682:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6686:	48 e7       	ldi	r20, 0x78	; 120
    6688:	58 e0       	ldi	r21, 0x08	; 8
    668a:	61 e0       	ldi	r22, 0x01	; 1
    668c:	88 e4       	ldi	r24, 0x48	; 72
    668e:	9f e1       	ldi	r25, 0x1F	; 31
    6690:	a8 ce       	rjmp	.-688    	; 0x63e2 <send_to_rf>
			break;
    6692:	08 95       	ret
		
		case time_crc_error:
			data_to_rf[0] = time_crc_error;
    6694:	87 e0       	ldi	r24, 0x07	; 7
    6696:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    669a:	48 e7       	ldi	r20, 0x78	; 120
    669c:	58 e0       	ldi	r21, 0x08	; 8
    669e:	61 e0       	ldi	r22, 0x01	; 1
    66a0:	88 e4       	ldi	r24, 0x48	; 72
    66a2:	9f e1       	ldi	r25, 0x1F	; 31
    66a4:	9e ce       	rjmp	.-708    	; 0x63e2 <send_to_rf>
			break;
    66a6:	08 95       	ret
		
		case wps_invalid_data_size:
			data_to_rf[0] = wps_invalid_data_size;
    66a8:	88 e0       	ldi	r24, 0x08	; 8
    66aa:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    66ae:	48 e7       	ldi	r20, 0x78	; 120
    66b0:	58 e0       	ldi	r21, 0x08	; 8
    66b2:	61 e0       	ldi	r22, 0x01	; 1
    66b4:	88 e4       	ldi	r24, 0x48	; 72
    66b6:	9f e1       	ldi	r25, 0x1F	; 31
    66b8:	94 ce       	rjmp	.-728    	; 0x63e2 <send_to_rf>
			break;
    66ba:	08 95       	ret
			
		case invalid_command_error:
			data_to_rf[0] = invalid_command_error;
    66bc:	8b e0       	ldi	r24, 0x0B	; 11
    66be:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    66c2:	48 e7       	ldi	r20, 0x78	; 120
    66c4:	58 e0       	ldi	r21, 0x08	; 8
    66c6:	61 e0       	ldi	r22, 0x01	; 1
    66c8:	88 e4       	ldi	r24, 0x48	; 72
    66ca:	9f e1       	ldi	r25, 0x1F	; 31
    66cc:	8a ce       	rjmp	.-748    	; 0x63e2 <send_to_rf>
			break;
    66ce:	08 95       	ret
			
		case wps_invalid_UID:
			data_to_rf[0] = wps_invalid_UID;
    66d0:	89 e0       	ldi	r24, 0x09	; 9
    66d2:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    66d6:	48 e7       	ldi	r20, 0x78	; 120
    66d8:	58 e0       	ldi	r21, 0x08	; 8
    66da:	61 e0       	ldi	r22, 0x01	; 1
    66dc:	88 e4       	ldi	r24, 0x48	; 72
    66de:	9f e1       	ldi	r25, 0x1F	; 31
    66e0:	80 ce       	rjmp	.-768    	; 0x63e2 <send_to_rf>
			break;
    66e2:	08 95       	ret
			
		case wps_crc_error:
			data_to_rf[0] = wps_crc_error;
    66e4:	8a e0       	ldi	r24, 0x0A	; 10
    66e6:	80 93 48 1f 	sts	0x1F48, r24
			send_to_rf(data_to_rf,1,"[error!]");
    66ea:	48 e7       	ldi	r20, 0x78	; 120
    66ec:	58 e0       	ldi	r21, 0x08	; 8
    66ee:	61 e0       	ldi	r22, 0x01	; 1
    66f0:	88 e4       	ldi	r24, 0x48	; 72
    66f2:	9f e1       	ldi	r25, 0x1F	; 31
    66f4:	76 ce       	rjmp	.-788    	; 0x63e2 <send_to_rf>
    66f6:	08 95       	ret

000066f8 <pend_to_rf>:
	}
}

void pend_to_rf(char pend_type)
{
	switch(pend_type)
    66f8:	83 36       	cpi	r24, 0x63	; 99
    66fa:	19 f0       	breq	.+6      	; 0x6702 <pend_to_rf+0xa>
    66fc:	84 36       	cpi	r24, 0x64	; 100
    66fe:	41 f0       	breq	.+16     	; 0x6710 <pend_to_rf+0x18>
    6700:	08 95       	ret
	{
		case 'c':
			send_to_rf(data_to_rf, 0, "[chrgng]");
    6702:	41 e8       	ldi	r20, 0x81	; 129
    6704:	58 e0       	ldi	r21, 0x08	; 8
    6706:	60 e0       	ldi	r22, 0x00	; 0
    6708:	88 e4       	ldi	r24, 0x48	; 72
    670a:	9f e1       	ldi	r25, 0x1F	; 31
    670c:	6a ce       	rjmp	.-812    	; 0x63e2 <send_to_rf>
		break;
    670e:	08 95       	ret
		case 'd':
			send_to_rf(data_to_rf, 0, "[dschrg]");
    6710:	4a e8       	ldi	r20, 0x8A	; 138
    6712:	58 e0       	ldi	r21, 0x08	; 8
    6714:	60 e0       	ldi	r22, 0x00	; 0
    6716:	88 e4       	ldi	r24, 0x48	; 72
    6718:	9f e1       	ldi	r25, 0x1F	; 31
    671a:	63 ce       	rjmp	.-826    	; 0x63e2 <send_to_rf>
    671c:	08 95       	ret

0000671e <time_to_rf>:
	eeprom_to_rf(address);
}

void time_to_rf(uint32_t time)
{
	set_timestamp(time);
    671e:	c8 d2       	rcall	.+1424   	; 0x6cb0 <set_timestamp>
	send_to_rf(data_to_rf, 0, "[timech]");
    6720:	40 e8       	ldi	r20, 0x80	; 128
    6722:	52 e0       	ldi	r21, 0x02	; 2
    6724:	60 e0       	ldi	r22, 0x00	; 0
    6726:	88 e4       	ldi	r24, 0x48	; 72
    6728:	9f e1       	ldi	r25, 0x1F	; 31
    672a:	5b ce       	rjmp	.-842    	; 0x63e2 <send_to_rf>
    672c:	08 95       	ret

0000672e <clr_rom_to_rf>:
}

void clr_rom_to_rf()
{
	clre2prom();
    672e:	0e 94 15 21 	call	0x422a	; 0x422a <clre2prom>
	send_to_rf(data_to_rf, 0, "[clrrom]");
    6732:	42 e9       	ldi	r20, 0x92	; 146
    6734:	52 e0       	ldi	r21, 0x02	; 2
    6736:	60 e0       	ldi	r22, 0x00	; 0
    6738:	88 e4       	ldi	r24, 0x48	; 72
    673a:	9f e1       	ldi	r25, 0x1F	; 31
    673c:	52 ce       	rjmp	.-860    	; 0x63e2 <send_to_rf>
    673e:	08 95       	ret

00006740 <info_to_rf>:
		//after a while this will reset the system when watchdog enabled
	}
}

void info_to_rf()
{
    6740:	cf 93       	push	r28
    6742:	df 93       	push	r29
/*	data_to_rf[0] = readE2prom(GROUP_ID); //group*/
// 	data_to_rf[1] = readE2prom(ZONE_ID); //zone
// 	data_to_rf[2] = readE2prom(NODE_ID); //node
	data_to_rf[0] = readE2prom(DEVICE_ADDRESS_H); //address MSB
    6744:	8d ef       	ldi	r24, 0xFD	; 253
    6746:	9f e0       	ldi	r25, 0x0F	; 15
    6748:	60 da       	rcall	.-2880   	; 0x5c0a <readE2prom>
    674a:	c8 e4       	ldi	r28, 0x48	; 72
    674c:	df e1       	ldi	r29, 0x1F	; 31
    674e:	88 83       	st	Y, r24
	data_to_rf[1] = readE2prom(DEVICE_ADDRESS_L); //address LSB
    6750:	8c ef       	ldi	r24, 0xFC	; 252
    6752:	9f e0       	ldi	r25, 0x0F	; 15
    6754:	5a da       	rcall	.-2892   	; 0x5c0a <readE2prom>
    6756:	89 83       	std	Y+1, r24	; 0x01
	data_to_rf[2] = readE2prom(DEVICE_CHANNEL_H); //channel MSB
    6758:	8f ef       	ldi	r24, 0xFF	; 255
    675a:	9f e0       	ldi	r25, 0x0F	; 15
    675c:	56 da       	rcall	.-2900   	; 0x5c0a <readE2prom>
    675e:	8a 83       	std	Y+2, r24	; 0x02
	data_to_rf[3] = readE2prom(DEVICE_CHANNEL_L); //channel LSB
    6760:	8e ef       	ldi	r24, 0xFE	; 254
    6762:	9f e0       	ldi	r25, 0x0F	; 15
    6764:	52 da       	rcall	.-2908   	; 0x5c0a <readE2prom>
    6766:	8b 83       	std	Y+3, r24	; 0x03
	data_to_rf[4] = readE2prom(DEVICE_PAN_H); //pan id MSB
    6768:	81 e0       	ldi	r24, 0x01	; 1
    676a:	90 e1       	ldi	r25, 0x10	; 16
    676c:	4e da       	rcall	.-2916   	; 0x5c0a <readE2prom>
    676e:	8c 83       	std	Y+4, r24	; 0x04
	data_to_rf[5] = readE2prom(DEVICE_PAN_L); //pan id LSB
    6770:	80 e0       	ldi	r24, 0x00	; 0
    6772:	90 e1       	ldi	r25, 0x10	; 16
    6774:	4a da       	rcall	.-2924   	; 0x5c0a <readE2prom>
    6776:	8d 83       	std	Y+5, r24	; 0x05
	send_to_rf(data_to_rf, 6, "[infoid]");
    6778:	44 ea       	ldi	r20, 0xA4	; 164
    677a:	52 e0       	ldi	r21, 0x02	; 2
    677c:	66 e0       	ldi	r22, 0x06	; 6
    677e:	ce 01       	movw	r24, r28
    6780:	30 de       	rcall	.-928    	; 0x63e2 <send_to_rf>
}
    6782:	df 91       	pop	r29
    6784:	cf 91       	pop	r28
    6786:	08 95       	ret

00006788 <change_id_to_rf>:

void change_id_to_rf(uint8_t *data)
{
    6788:	cf 93       	push	r28
    678a:	df 93       	push	r29
    678c:	ec 01       	movw	r28, r24
/*	write_factory_default(GROUP_ID,data[0]);*/
// 	write_factory_default(ZONE_ID,data[1]);
// 	write_factory_default(NODE_ID,data[2]);
	write_factory_default(DEVICE_ADDRESS_H,data[0]);
    678e:	68 81       	ld	r22, Y
    6790:	8d ef       	ldi	r24, 0xFD	; 253
    6792:	9f e0       	ldi	r25, 0x0F	; 15
    6794:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
	write_factory_default(DEVICE_ADDRESS_L,data[1]);
    6798:	69 81       	ldd	r22, Y+1	; 0x01
    679a:	8c ef       	ldi	r24, 0xFC	; 252
    679c:	9f e0       	ldi	r25, 0x0F	; 15
    679e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
	write_factory_default(DEVICE_CHANNEL_H,data[2]);
    67a2:	6a 81       	ldd	r22, Y+2	; 0x02
    67a4:	8f ef       	ldi	r24, 0xFF	; 255
    67a6:	9f e0       	ldi	r25, 0x0F	; 15
    67a8:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
	write_factory_default(DEVICE_CHANNEL_L,data[3]);
    67ac:	6b 81       	ldd	r22, Y+3	; 0x03
    67ae:	8e ef       	ldi	r24, 0xFE	; 254
    67b0:	9f e0       	ldi	r25, 0x0F	; 15
    67b2:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
	write_factory_default(DEVICE_PAN_H,data[4]);
    67b6:	6c 81       	ldd	r22, Y+4	; 0x04
    67b8:	81 e0       	ldi	r24, 0x01	; 1
    67ba:	90 e1       	ldi	r25, 0x10	; 16
    67bc:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
	write_factory_default(DEVICE_PAN_L,data[5]);
    67c0:	6d 81       	ldd	r22, Y+5	; 0x05
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	90 e1       	ldi	r25, 0x10	; 16
    67c6:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
	send_to_rf(data_to_rf, 0, "[chngid]");
    67ca:	4d ea       	ldi	r20, 0xAD	; 173
    67cc:	52 e0       	ldi	r21, 0x02	; 2
    67ce:	60 e0       	ldi	r22, 0x00	; 0
    67d0:	88 e4       	ldi	r24, 0x48	; 72
    67d2:	9f e1       	ldi	r25, 0x1F	; 31
    67d4:	06 de       	rcall	.-1012   	; 0x63e2 <send_to_rf>
}
    67d6:	df 91       	pop	r29
    67d8:	cf 91       	pop	r28
    67da:	08 95       	ret

000067dc <battery_threshold_to_rf>:

void battery_threshold_to_rf(uint8_t *data)
{
    67dc:	cf 93       	push	r28
    67de:	df 93       	push	r29
    67e0:	ec 01       	movw	r28, r24
	write_factory_default(BATTERY_LOW,data[0]);
    67e2:	68 81       	ld	r22, Y
    67e4:	84 e0       	ldi	r24, 0x04	; 4
    67e6:	90 e1       	ldi	r25, 0x10	; 16
    67e8:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
	write_factory_default(BATTERY_MAX,data[1]);
    67ec:	69 81       	ldd	r22, Y+1	; 0x01
    67ee:	83 e0       	ldi	r24, 0x03	; 3
    67f0:	90 e1       	ldi	r25, 0x10	; 16
    67f2:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <write_factory_default>
	send_to_rf(data_to_rf, 0, "[batlvl]");
    67f6:	46 eb       	ldi	r20, 0xB6	; 182
    67f8:	52 e0       	ldi	r21, 0x02	; 2
    67fa:	60 e0       	ldi	r22, 0x00	; 0
    67fc:	88 e4       	ldi	r24, 0x48	; 72
    67fe:	9f e1       	ldi	r25, 0x1F	; 31
    6800:	f0 dd       	rcall	.-1056   	; 0x63e2 <send_to_rf>
}
    6802:	df 91       	pop	r29
    6804:	cf 91       	pop	r28
    6806:	08 95       	ret

00006808 <last_1_log>:

void last_1_log(char type)
{
    6808:	ff 92       	push	r15
    680a:	0f 93       	push	r16
    680c:	1f 93       	push	r17
    680e:	cf 93       	push	r28
    6810:	df 93       	push	r29
    6812:	f8 2e       	mov	r15, r24
    6814:	08 e4       	ldi	r16, 0x48	; 72
    6816:	1f e1       	ldi	r17, 0x1F	; 31
    6818:	c0 e0       	ldi	r28, 0x00	; 0
    681a:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t memory_address_low = 0;
  uint8_t memory_address_high = 0;
  for (uint8_t i=0; i<11; i++)
  {
    memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    681c:	40 91 c2 20 	lds	r20, 0x20C2
    6820:	50 91 c3 20 	lds	r21, 0x20C3
    6824:	9a 01       	movw	r18, r20
    6826:	26 51       	subi	r18, 0x16	; 22
    6828:	31 09       	sbc	r19, r1
    682a:	2c 0f       	add	r18, r28
    682c:	3d 1f       	adc	r19, r29
    682e:	46 51       	subi	r20, 0x16	; 22
    memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    6830:	4c 0f       	add	r20, r28
    data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6832:	23 2f       	mov	r18, r19
    6834:	65 e4       	ldi	r22, 0x45	; 69
    6836:	8f ea       	ldi	r24, 0xAF	; 175
    6838:	0e 94 bb 20 	call	0x4176	; 0x4176 <PNEWELSE2promRead>
    683c:	f8 01       	movw	r30, r16
    683e:	81 93       	st	Z+, r24
    6840:	8f 01       	movw	r16, r30
    6842:	21 96       	adiw	r28, 0x01	; 1

void last_1_log(char type)
{
  uint8_t memory_address_low = 0;
  uint8_t memory_address_high = 0;
  for (uint8_t i=0; i<11; i++)
    6844:	cb 30       	cpi	r28, 0x0B	; 11
    6846:	d1 05       	cpc	r29, r1
    6848:	49 f7       	brne	.-46     	; 0x681c <last_1_log+0x14>
    memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    /*pne_delayms(10);*/
  }
  switch(type)
    684a:	fe e6       	ldi	r31, 0x6E	; 110
    684c:	ff 16       	cp	r15, r31
    684e:	39 f0       	breq	.+14     	; 0x685e <last_1_log+0x56>
    6850:	83 e7       	ldi	r24, 0x73	; 115
    6852:	f8 16       	cp	r15, r24
    6854:	91 f0       	breq	.+36     	; 0x687a <last_1_log+0x72>
    6856:	e1 e6       	ldi	r30, 0x61	; 97
    6858:	fe 12       	cpse	r15, r30
    685a:	16 c0       	rjmp	.+44     	; 0x6888 <last_1_log+0x80>
    685c:	07 c0       	rjmp	.+14     	; 0x686c <last_1_log+0x64>
  {
	  case 'n':
		send_to_rf(data_to_rf, 6, "[1stnml]"); //temporary reduce the sent data to 6 only in order to reduce bandwidth usage. Default value is 11
    685e:	43 e9       	ldi	r20, 0x93	; 147
    6860:	58 e0       	ldi	r21, 0x08	; 8
    6862:	66 e0       	ldi	r22, 0x06	; 6
    6864:	88 e4       	ldi	r24, 0x48	; 72
    6866:	9f e1       	ldi	r25, 0x1F	; 31
    6868:	bc dd       	rcall	.-1160   	; 0x63e2 <send_to_rf>
		break;
    686a:	14 c0       	rjmp	.+40     	; 0x6894 <last_1_log+0x8c>
	  case 'a':
		send_to_rf(data_to_rf, 6, "[1staci]");
    686c:	4c e9       	ldi	r20, 0x9C	; 156
    686e:	58 e0       	ldi	r21, 0x08	; 8
    6870:	66 e0       	ldi	r22, 0x06	; 6
    6872:	88 e4       	ldi	r24, 0x48	; 72
    6874:	9f e1       	ldi	r25, 0x1F	; 31
    6876:	b5 dd       	rcall	.-1174   	; 0x63e2 <send_to_rf>
		break;
    6878:	0d c0       	rjmp	.+26     	; 0x6894 <last_1_log+0x8c>
	  case 's':
		send_to_rf(data_to_rf, 6, "[1stsft]");
    687a:	45 ea       	ldi	r20, 0xA5	; 165
    687c:	58 e0       	ldi	r21, 0x08	; 8
    687e:	66 e0       	ldi	r22, 0x06	; 6
    6880:	88 e4       	ldi	r24, 0x48	; 72
    6882:	9f e1       	ldi	r25, 0x1F	; 31
    6884:	ae dd       	rcall	.-1188   	; 0x63e2 <send_to_rf>
		break;
    6886:	06 c0       	rjmp	.+12     	; 0x6894 <last_1_log+0x8c>
	  default:
		send_to_rf(data_to_rf, 11, "[1stlog]");
    6888:	4e ea       	ldi	r20, 0xAE	; 174
    688a:	58 e0       	ldi	r21, 0x08	; 8
    688c:	6b e0       	ldi	r22, 0x0B	; 11
    688e:	88 e4       	ldi	r24, 0x48	; 72
    6890:	9f e1       	ldi	r25, 0x1F	; 31
    6892:	a7 dd       	rcall	.-1202   	; 0x63e2 <send_to_rf>
		break;
  }
}
    6894:	df 91       	pop	r29
    6896:	cf 91       	pop	r28
    6898:	1f 91       	pop	r17
    689a:	0f 91       	pop	r16
    689c:	ff 90       	pop	r15
    689e:	08 95       	ret

000068a0 <last_2_log>:


void last_2_log(char type)
{
    68a0:	ff 92       	push	r15
    68a2:	0f 93       	push	r16
    68a4:	1f 93       	push	r17
    68a6:	cf 93       	push	r28
    68a8:	df 93       	push	r29
    68aa:	f8 2e       	mov	r15, r24
    68ac:	08 e4       	ldi	r16, 0x48	; 72
    68ae:	1f e1       	ldi	r17, 0x1F	; 31
    68b0:	c0 e0       	ldi	r28, 0x00	; 0
    68b2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	for (uint8_t i=0; i<11; i++)
	{
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
    68b4:	40 91 c2 20 	lds	r20, 0x20C2
    68b8:	50 91 c3 20 	lds	r21, 0x20C3
    68bc:	9a 01       	movw	r18, r20
    68be:	2b 50       	subi	r18, 0x0B	; 11
    68c0:	31 09       	sbc	r19, r1
    68c2:	2c 0f       	add	r18, r28
    68c4:	3d 1f       	adc	r19, r29
    68c6:	4b 50       	subi	r20, 0x0B	; 11
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
    68c8:	4c 0f       	add	r20, r28
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    68ca:	23 2f       	mov	r18, r19
    68cc:	65 e4       	ldi	r22, 0x45	; 69
    68ce:	8f ea       	ldi	r24, 0xAF	; 175
    68d0:	0e 94 bb 20 	call	0x4176	; 0x4176 <PNEWELSE2promRead>
    68d4:	f8 01       	movw	r30, r16
    68d6:	81 93       	st	Z+, r24
    68d8:	8f 01       	movw	r16, r30
    68da:	21 96       	adiw	r28, 0x01	; 1

void last_2_log(char type)
{
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	for (uint8_t i=0; i<11; i++)
    68dc:	cb 30       	cpi	r28, 0x0B	; 11
    68de:	d1 05       	cpc	r29, r1
    68e0:	49 f7       	brne	.-46     	; 0x68b4 <last_2_log+0x14>
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		/*pne_delayms(10);*/
	}
	switch(type)
    68e2:	fe e6       	ldi	r31, 0x6E	; 110
    68e4:	ff 16       	cp	r15, r31
    68e6:	39 f0       	breq	.+14     	; 0x68f6 <last_2_log+0x56>
    68e8:	83 e7       	ldi	r24, 0x73	; 115
    68ea:	f8 16       	cp	r15, r24
    68ec:	91 f0       	breq	.+36     	; 0x6912 <last_2_log+0x72>
    68ee:	e1 e6       	ldi	r30, 0x61	; 97
    68f0:	fe 12       	cpse	r15, r30
    68f2:	16 c0       	rjmp	.+44     	; 0x6920 <last_2_log+0x80>
    68f4:	07 c0       	rjmp	.+14     	; 0x6904 <last_2_log+0x64>
	{
		case 'n':
			send_to_rf(data_to_rf, 6, "[2ndnml]");
    68f6:	47 eb       	ldi	r20, 0xB7	; 183
    68f8:	58 e0       	ldi	r21, 0x08	; 8
    68fa:	66 e0       	ldi	r22, 0x06	; 6
    68fc:	88 e4       	ldi	r24, 0x48	; 72
    68fe:	9f e1       	ldi	r25, 0x1F	; 31
    6900:	70 dd       	rcall	.-1312   	; 0x63e2 <send_to_rf>
			break;
    6902:	14 c0       	rjmp	.+40     	; 0x692c <last_2_log+0x8c>
		case 'a':
			send_to_rf(data_to_rf, 6, "[2ndaci]");
    6904:	40 ec       	ldi	r20, 0xC0	; 192
    6906:	58 e0       	ldi	r21, 0x08	; 8
    6908:	66 e0       	ldi	r22, 0x06	; 6
    690a:	88 e4       	ldi	r24, 0x48	; 72
    690c:	9f e1       	ldi	r25, 0x1F	; 31
    690e:	69 dd       	rcall	.-1326   	; 0x63e2 <send_to_rf>
			break;
    6910:	0d c0       	rjmp	.+26     	; 0x692c <last_2_log+0x8c>
		case 's':
			send_to_rf(data_to_rf, 6, "[2ndsft]");
    6912:	49 ec       	ldi	r20, 0xC9	; 201
    6914:	58 e0       	ldi	r21, 0x08	; 8
    6916:	66 e0       	ldi	r22, 0x06	; 6
    6918:	88 e4       	ldi	r24, 0x48	; 72
    691a:	9f e1       	ldi	r25, 0x1F	; 31
    691c:	62 dd       	rcall	.-1340   	; 0x63e2 <send_to_rf>
			break;
    691e:	06 c0       	rjmp	.+12     	; 0x692c <last_2_log+0x8c>
		default:
			send_to_rf(data_to_rf, 11, "[2ndlog]");
    6920:	42 ed       	ldi	r20, 0xD2	; 210
    6922:	58 e0       	ldi	r21, 0x08	; 8
    6924:	6b e0       	ldi	r22, 0x0B	; 11
    6926:	88 e4       	ldi	r24, 0x48	; 72
    6928:	9f e1       	ldi	r25, 0x1F	; 31
    692a:	5b dd       	rcall	.-1354   	; 0x63e2 <send_to_rf>
			break;
	}
}
    692c:	df 91       	pop	r29
    692e:	cf 91       	pop	r28
    6930:	1f 91       	pop	r17
    6932:	0f 91       	pop	r16
    6934:	ff 90       	pop	r15
    6936:	08 95       	ret

00006938 <test_completed>:

void test_completed(char type, uint8_t retry)
{
    6938:	df 92       	push	r13
    693a:	ef 92       	push	r14
    693c:	ff 92       	push	r15
    693e:	0f 93       	push	r16
    6940:	cf 93       	push	r28
    6942:	df 93       	push	r29
    6944:	08 2f       	mov	r16, r24
    6946:	d6 2e       	mov	r13, r22
    6948:	0f 2e       	mov	r0, r31
    694a:	f8 e4       	ldi	r31, 0x48	; 72
    694c:	ef 2e       	mov	r14, r31
    694e:	ff e1       	ldi	r31, 0x1F	; 31
    6950:	ff 2e       	mov	r15, r31
    6952:	f0 2d       	mov	r31, r0
    6954:	c0 e0       	ldi	r28, 0x00	; 0
    6956:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t memory_address_high = 0;
	uint8_t data_counter = 0;
	uint8_t counter = 0;
	for (uint8_t i=0; i<6; i++) //For the start of the test. Only retrieve the time portion. Fork of last_2_log function
	{
		memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    6958:	40 91 c2 20 	lds	r20, 0x20C2
    695c:	50 91 c3 20 	lds	r21, 0x20C3
    6960:	ca 01       	movw	r24, r20
    6962:	46 97       	sbiw	r24, 0x16	; 22
    6964:	8c 0f       	add	r24, r28
    6966:	9d 1f       	adc	r25, r29
    6968:	46 51       	subi	r20, 0x16	; 22
		memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    696a:	4c 0f       	add	r20, r28
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    696c:	29 2f       	mov	r18, r25
    696e:	65 e4       	ldi	r22, 0x45	; 69
    6970:	8f ea       	ldi	r24, 0xAF	; 175
    6972:	0e 94 bb 20 	call	0x4176	; 0x4176 <PNEWELSE2promRead>
    6976:	f7 01       	movw	r30, r14
    6978:	81 93       	st	Z+, r24
    697a:	7f 01       	movw	r14, r30
    697c:	21 96       	adiw	r28, 0x01	; 1
{
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	uint8_t data_counter = 0;
	uint8_t counter = 0;
	for (uint8_t i=0; i<6; i++) //For the start of the test. Only retrieve the time portion. Fork of last_2_log function
    697e:	c6 30       	cpi	r28, 0x06	; 6
    6980:	d1 05       	cpc	r29, r1
    6982:	51 f7       	brne	.-44     	; 0x6958 <test_completed+0x20>
    6984:	0f 2e       	mov	r0, r31
    6986:	fe e4       	ldi	r31, 0x4E	; 78
    6988:	ef 2e       	mov	r14, r31
    698a:	ff e1       	ldi	r31, 0x1F	; 31
    698c:	ff 2e       	mov	r15, r31
    698e:	f0 2d       	mov	r31, r0
    6990:	c0 e0       	ldi	r28, 0x00	; 0
    6992:	d0 e0       	ldi	r29, 0x00	; 0
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	for (uint8_t i=0; i<6; i++) //For the end of the test. Only retrieve the time portion
	{
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
    6994:	40 91 c2 20 	lds	r20, 0x20C2
    6998:	50 91 c3 20 	lds	r21, 0x20C3
    699c:	ca 01       	movw	r24, r20
    699e:	0b 97       	sbiw	r24, 0x0b	; 11
    69a0:	8c 0f       	add	r24, r28
    69a2:	9d 1f       	adc	r25, r29
    69a4:	4b 50       	subi	r20, 0x0B	; 11
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
    69a6:	4c 0f       	add	r20, r28
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    69a8:	29 2f       	mov	r18, r25
    69aa:	65 e4       	ldi	r22, 0x45	; 69
    69ac:	8f ea       	ldi	r24, 0xAF	; 175
    69ae:	0e 94 bb 20 	call	0x4176	; 0x4176 <PNEWELSE2promRead>
    69b2:	f7 01       	movw	r30, r14
    69b4:	81 93       	st	Z+, r24
    69b6:	7f 01       	movw	r14, r30
    69b8:	21 96       	adiw	r28, 0x01	; 1
		memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	for (uint8_t i=0; i<6; i++) //For the end of the test. Only retrieve the time portion
    69ba:	c6 30       	cpi	r28, 0x06	; 6
    69bc:	d1 05       	cpc	r29, r1
    69be:	51 f7       	brne	.-44     	; 0x6994 <test_completed+0x5c>
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	while(counter < retry)
    69c0:	dd 20       	and	r13, r13
    69c2:	31 f1       	breq	.+76     	; 0x6a10 <test_completed+0xd8>
    69c4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		switch(type)
    69c6:	0e 36       	cpi	r16, 0x6E	; 110
    69c8:	29 f0       	breq	.+10     	; 0x69d4 <test_completed+0x9c>
    69ca:	03 37       	cpi	r16, 0x73	; 115
    69cc:	89 f0       	breq	.+34     	; 0x69f0 <test_completed+0xb8>
    69ce:	01 36       	cpi	r16, 0x61	; 97
    69d0:	b1 f4       	brne	.+44     	; 0x69fe <test_completed+0xc6>
    69d2:	07 c0       	rjmp	.+14     	; 0x69e2 <test_completed+0xaa>
		{
			case 'n':
			send_to_rf(data_to_rf, data_counter, "[tstend]");
    69d4:	4b ed       	ldi	r20, 0xDB	; 219
    69d6:	58 e0       	ldi	r21, 0x08	; 8
    69d8:	6c e0       	ldi	r22, 0x0C	; 12
    69da:	88 e4       	ldi	r24, 0x48	; 72
    69dc:	9f e1       	ldi	r25, 0x1F	; 31
    69de:	01 dd       	rcall	.-1534   	; 0x63e2 <send_to_rf>
			break;
    69e0:	14 c0       	rjmp	.+40     	; 0x6a0a <test_completed+0xd2>
			case 'a':
			send_to_rf(data_to_rf, data_counter, "[tstaci]");
    69e2:	44 ee       	ldi	r20, 0xE4	; 228
    69e4:	58 e0       	ldi	r21, 0x08	; 8
    69e6:	6c e0       	ldi	r22, 0x0C	; 12
    69e8:	88 e4       	ldi	r24, 0x48	; 72
    69ea:	9f e1       	ldi	r25, 0x1F	; 31
    69ec:	fa dc       	rcall	.-1548   	; 0x63e2 <send_to_rf>
			break;
    69ee:	0d c0       	rjmp	.+26     	; 0x6a0a <test_completed+0xd2>
			case 's':
			send_to_rf(data_to_rf, data_counter, "[tststp]");
    69f0:	4d ee       	ldi	r20, 0xED	; 237
    69f2:	58 e0       	ldi	r21, 0x08	; 8
    69f4:	6c e0       	ldi	r22, 0x0C	; 12
    69f6:	88 e4       	ldi	r24, 0x48	; 72
    69f8:	9f e1       	ldi	r25, 0x1F	; 31
    69fa:	f3 dc       	rcall	.-1562   	; 0x63e2 <send_to_rf>
			break;
    69fc:	06 c0       	rjmp	.+12     	; 0x6a0a <test_completed+0xd2>
			default:
			send_to_rf(data_to_rf, data_counter, "[tstend]");
    69fe:	4b ed       	ldi	r20, 0xDB	; 219
    6a00:	58 e0       	ldi	r21, 0x08	; 8
    6a02:	6c e0       	ldi	r22, 0x0C	; 12
    6a04:	88 e4       	ldi	r24, 0x48	; 72
    6a06:	9f e1       	ldi	r25, 0x1F	; 31
    6a08:	ec dc       	rcall	.-1576   	; 0x63e2 <send_to_rf>
			break;
		}
		counter++;
    6a0a:	cf 5f       	subi	r28, 0xFF	; 255
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	while(counter < retry)
    6a0c:	cd 11       	cpse	r28, r13
    6a0e:	db cf       	rjmp	.-74     	; 0x69c6 <test_completed+0x8e>
	}
	
/*	send_to_rf(data_to_rf, data_counter + 1, "[tstend]");*/
// 	pne_delayms(10);
// 	send_to_rf(data_to_rf, data_counter + 1, "[tstend]");
}
    6a10:	df 91       	pop	r29
    6a12:	cf 91       	pop	r28
    6a14:	0f 91       	pop	r16
    6a16:	ff 90       	pop	r15
    6a18:	ef 90       	pop	r14
    6a1a:	df 90       	pop	r13
    6a1c:	08 95       	ret

00006a1e <dump_log_to_rf>:

/*---------This is experimental function----------------*/
void dump_log_to_rf()
{
    6a1e:	0f 93       	push	r16
    6a20:	1f 93       	push	r17
    6a22:	cf 93       	push	r28
    6a24:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6a26:	c0 e0       	ldi	r28, 0x00	; 0
    6a28:	d0 e0       	ldi	r29, 0x00	; 0
}

/*---------This is experimental function----------------*/
void dump_log_to_rf()
{
	uint8_t i = 0;
    6a2a:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(i == 11)
		{
			send_to_rf(data_to_rf, 11, "[dumpmm]");
			i = 0;
    6a2c:	00 e0       	ldi	r16, 0x00	; 0
    6a2e:	09 c0       	rjmp	.+18     	; 0x6a42 <dump_log_to_rf+0x24>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(i == 11)
    6a30:	1b 30       	cpi	r17, 0x0B	; 11
    6a32:	39 f4       	brne	.+14     	; 0x6a42 <dump_log_to_rf+0x24>
		{
			send_to_rf(data_to_rf, 11, "[dumpmm]");
    6a34:	46 ef       	ldi	r20, 0xF6	; 246
    6a36:	58 e0       	ldi	r21, 0x08	; 8
    6a38:	6b e0       	ldi	r22, 0x0B	; 11
    6a3a:	88 e4       	ldi	r24, 0x48	; 72
    6a3c:	9f e1       	ldi	r25, 0x1F	; 31
    6a3e:	d1 dc       	rcall	.-1630   	; 0x63e2 <send_to_rf>
			i = 0;
    6a40:	10 2f       	mov	r17, r16
			/*pne_delayms(10);*/
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6a42:	2d 2f       	mov	r18, r29
    6a44:	4c 2f       	mov	r20, r28
    6a46:	65 e4       	ldi	r22, 0x45	; 69
    6a48:	8f ea       	ldi	r24, 0xAF	; 175
    6a4a:	0e 94 bb 20 	call	0x4176	; 0x4176 <PNEWELSE2promRead>
    6a4e:	e1 2f       	mov	r30, r17
    6a50:	f0 e0       	ldi	r31, 0x00	; 0
    6a52:	e8 5b       	subi	r30, 0xB8	; 184
    6a54:	f0 4e       	sbci	r31, 0xE0	; 224
    6a56:	80 83       	st	Z, r24
		pne_delayms(10);
    6a58:	8a e0       	ldi	r24, 0x0A	; 10
    6a5a:	90 e0       	ldi	r25, 0x00	; 0
    6a5c:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <pne_delayms>
		i++;
    6a60:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t i = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6a62:	21 96       	adiw	r28, 0x01	; 1
    6a64:	cc 3f       	cpi	r28, 0xFC	; 252
    6a66:	8f e0       	ldi	r24, 0x0F	; 15
    6a68:	d8 07       	cpc	r29, r24
    6a6a:	11 f7       	brne	.-60     	; 0x6a30 <dump_log_to_rf+0x12>
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		pne_delayms(10);
		i++;
		
	}
}
    6a6c:	df 91       	pop	r29
    6a6e:	cf 91       	pop	r28
    6a70:	1f 91       	pop	r17
    6a72:	0f 91       	pop	r16
    6a74:	08 95       	ret

00006a76 <stress_test>:
//---------End of Experimental function-----------------*/
/*---------This is experimental function----------------*/
void stress_test()
{
    6a76:	ef 92       	push	r14
    6a78:	ff 92       	push	r15
    6a7a:	1f 93       	push	r17
    6a7c:	cf 93       	push	r28
    6a7e:	df 93       	push	r29
	for(uint8_t u = 0; u<20; u++)
    6a80:	10 e0       	ldi	r17, 0x00	; 0
    6a82:	0f 2e       	mov	r0, r31
    6a84:	f8 e4       	ldi	r31, 0x48	; 72
    6a86:	ef 2e       	mov	r14, r31
    6a88:	ff e1       	ldi	r31, 0x1F	; 31
    6a8a:	ff 2e       	mov	r15, r31
    6a8c:	f0 2d       	mov	r31, r0
    6a8e:	c7 e6       	ldi	r28, 0x67	; 103
    6a90:	df e1       	ldi	r29, 0x1F	; 31
    6a92:	0e c0       	rjmp	.+28     	; 0x6ab0 <stress_test+0x3a>
	{
		for(uint16_t i = 0; i<31; i++)
		{
			data_to_rf[i] = 0;
    6a94:	11 92       	st	Z+, r1
/*---------This is experimental function----------------*/
void stress_test()
{
	for(uint8_t u = 0; u<20; u++)
	{
		for(uint16_t i = 0; i<31; i++)
    6a96:	ec 17       	cp	r30, r28
    6a98:	fd 07       	cpc	r31, r29
    6a9a:	e1 f7       	brne	.-8      	; 0x6a94 <stress_test+0x1e>
		{
			data_to_rf[i] = 0;
		}
		data_to_rf[31] = u;
    6a9c:	f7 01       	movw	r30, r14
    6a9e:	17 8f       	std	Z+31, r17	; 0x1f
		send_to_rf(data_to_rf,32,"[stress]");
    6aa0:	4a ed       	ldi	r20, 0xDA	; 218
    6aa2:	52 e0       	ldi	r21, 0x02	; 2
    6aa4:	60 e2       	ldi	r22, 0x20	; 32
    6aa6:	c7 01       	movw	r24, r14
    6aa8:	9c dc       	rcall	.-1736   	; 0x63e2 <send_to_rf>
}
//---------End of Experimental function-----------------*/
/*---------This is experimental function----------------*/
void stress_test()
{
	for(uint8_t u = 0; u<20; u++)
    6aaa:	1f 5f       	subi	r17, 0xFF	; 255
    6aac:	14 31       	cpi	r17, 0x14	; 20
    6aae:	11 f0       	breq	.+4      	; 0x6ab4 <stress_test+0x3e>
    6ab0:	f7 01       	movw	r30, r14
    6ab2:	f0 cf       	rjmp	.-32     	; 0x6a94 <stress_test+0x1e>
			data_to_rf[i] = 0;
		}
		data_to_rf[31] = u;
		send_to_rf(data_to_rf,32,"[stress]");
	}
}
    6ab4:	df 91       	pop	r29
    6ab6:	cf 91       	pop	r28
    6ab8:	1f 91       	pop	r17
    6aba:	ff 90       	pop	r15
    6abc:	ef 90       	pop	r14
    6abe:	08 95       	ret

00006ac0 <request_to_RF>:
//---------End of Experimental function-----------------*/
void request_to_RF(uint8_t *RFU_UID)
{
    6ac0:	fc 01       	movw	r30, r24
    6ac2:	a8 e4       	ldi	r26, 0x48	; 72
    6ac4:	bf e1       	ldi	r27, 0x1F	; 31
    6ac6:	9c 01       	movw	r18, r24
    6ac8:	20 5f       	subi	r18, 0xF0	; 240
    6aca:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i = 0; i<max_UID_length; i++)
	{
		data_to_rf[i] = RFU_UID[i];
    6acc:	81 91       	ld	r24, Z+
    6ace:	8d 93       	st	X+, r24
	}
}
//---------End of Experimental function-----------------*/
void request_to_RF(uint8_t *RFU_UID)
{
	for(uint8_t i = 0; i<max_UID_length; i++)
    6ad0:	e2 17       	cp	r30, r18
    6ad2:	f3 07       	cpc	r31, r19
    6ad4:	d9 f7       	brne	.-10     	; 0x6acc <request_to_RF+0xc>
	{
		data_to_rf[i] = RFU_UID[i];
	}
	send_to_rf(data_to_rf, max_UID_length, "[requid]");
    6ad6:	4f ef       	ldi	r20, 0xFF	; 255
    6ad8:	58 e0       	ldi	r21, 0x08	; 8
    6ada:	60 e1       	ldi	r22, 0x10	; 16
    6adc:	88 e4       	ldi	r24, 0x48	; 72
    6ade:	9f e1       	ldi	r25, 0x1F	; 31
    6ae0:	80 cc       	rjmp	.-1792   	; 0x63e2 <send_to_rf>
    6ae2:	08 95       	ret

00006ae4 <WPS_OK_Alert>:
	/*send_to_rf(data_to_rf, 0, "[chngid]");*/
}

void WPS_OK_Alert(uint8_t *data, uint8_t size)
{
	send_to_rf(data,size,"[pairok]");
    6ae4:	48 e0       	ldi	r20, 0x08	; 8
    6ae6:	59 e0       	ldi	r21, 0x09	; 9
    6ae8:	7c cc       	rjmp	.-1800   	; 0x63e2 <send_to_rf>
    6aea:	08 95       	ret

00006aec <crc_verify>:
}


//crc verification routine
bool crc_verify(uint8_t *data, uint8_t size)
{
    6aec:	df 92       	push	r13
    6aee:	ef 92       	push	r14
    6af0:	ff 92       	push	r15
    6af2:	0f 93       	push	r16
    6af4:	1f 93       	push	r17
    6af6:	cf 93       	push	r28
    6af8:	df 93       	push	r29
    6afa:	8c 01       	movw	r16, r24
    6afc:	c6 2f       	mov	r28, r22
	uint8_t crc_upper = 0;
	uint8_t crc_lower = 0;
	crc_upper = data[size-2]; //crc_upper = (ascii_to_hex(data[size-4])*0x10 + ascii_to_hex(data[size-3]));
    6afe:	9c 01       	movw	r18, r24
    6b00:	26 0f       	add	r18, r22
    6b02:	31 1d       	adc	r19, r1
    6b04:	f9 01       	movw	r30, r18
    6b06:	32 97       	sbiw	r30, 0x02	; 2
    6b08:	e0 80       	ld	r14, Z
	crc_lower = data[size-1]; //crc_lower = (ascii_to_hex(data[size-1])*0x10 + ascii_to_hex(data[size-1]));
    6b0a:	31 96       	adiw	r30, 0x01	; 1
    6b0c:	d0 80       	ld	r13, Z
	uint8_t crc_upper_internal = 0;
	uint8_t crc_lower_internal = 0;
	uint8_t data_length = size-2; //uint8_t data_length = size-4;
	crcInit();
    6b0e:	84 d1       	rcall	.+776    	; 0x6e18 <crcInit>
	uint8_t crc_lower = 0;
	crc_upper = data[size-2]; //crc_upper = (ascii_to_hex(data[size-4])*0x10 + ascii_to_hex(data[size-3]));
	crc_lower = data[size-1]; //crc_lower = (ascii_to_hex(data[size-1])*0x10 + ascii_to_hex(data[size-1]));
	uint8_t crc_upper_internal = 0;
	uint8_t crc_lower_internal = 0;
	uint8_t data_length = size-2; //uint8_t data_length = size-4;
    6b10:	c2 50       	subi	r28, 0x02	; 2
	crcInit();
	crc_upper_internal = ((crcFast(data, (data_length)) & 0xFF00) >> 8);
    6b12:	d0 e0       	ldi	r29, 0x00	; 0
    6b14:	be 01       	movw	r22, r28
    6b16:	c8 01       	movw	r24, r16
    6b18:	9c d1       	rcall	.+824    	; 0x6e52 <crcFast>
    6b1a:	f9 2e       	mov	r15, r25
	crc_lower_internal = (crcFast(data, (data_length)) & 0x00FF);
    6b1c:	be 01       	movw	r22, r28
    6b1e:	c8 01       	movw	r24, r16
    6b20:	98 d1       	rcall	.+816    	; 0x6e52 <crcFast>
    6b22:	98 2f       	mov	r25, r24
	if ((crc_upper_internal == crc_upper) && (crc_lower_internal == crc_lower))
    6b24:	ef 10       	cpse	r14, r15
    6b26:	05 c0       	rjmp	.+10     	; 0x6b32 <crc_verify+0x46>
    6b28:	81 e0       	ldi	r24, 0x01	; 1
    6b2a:	d9 16       	cp	r13, r25
    6b2c:	19 f0       	breq	.+6      	; 0x6b34 <crc_verify+0x48>
    6b2e:	80 e0       	ldi	r24, 0x00	; 0
    6b30:	01 c0       	rjmp	.+2      	; 0x6b34 <crc_verify+0x48>
	{
		
		return true;
	}

	return false;	
    6b32:	80 e0       	ldi	r24, 0x00	; 0
}
    6b34:	df 91       	pop	r29
    6b36:	cf 91       	pop	r28
    6b38:	1f 91       	pop	r17
    6b3a:	0f 91       	pop	r16
    6b3c:	ff 90       	pop	r15
    6b3e:	ef 90       	pop	r14
    6b40:	df 90       	pop	r13
    6b42:	08 95       	ret

00006b44 <ascii_to_hex>:

//ascii to hex conversion routine
uint8_t ascii_to_hex(uint8_t data)
{
	uint8_t return_data = 0;
	if ((data<=0x39) && (data>=0x30))
    6b44:	90 ed       	ldi	r25, 0xD0	; 208
    6b46:	98 0f       	add	r25, r24
    6b48:	9a 30       	cpi	r25, 0x0A	; 10
    6b4a:	08 f0       	brcs	.+2      	; 0x6b4e <ascii_to_hex+0xa>


//ascii to hex conversion routine
uint8_t ascii_to_hex(uint8_t data)
{
	uint8_t return_data = 0;
    6b4c:	90 e0       	ldi	r25, 0x00	; 0
	if ((data<=0x39) && (data>=0x30))
	{
		return_data = data - 0x30;
	}
	if ((data<=0x5A) && (data>=0x41))
    6b4e:	2f eb       	ldi	r18, 0xBF	; 191
    6b50:	28 0f       	add	r18, r24
    6b52:	2a 31       	cpi	r18, 0x1A	; 26
    6b54:	10 f4       	brcc	.+4      	; 0x6b5a <ascii_to_hex+0x16>
	{
		return_data = data - 0x37;
    6b56:	99 ec       	ldi	r25, 0xC9	; 201
    6b58:	98 0f       	add	r25, r24
	}
	if ((data<=0x66) && (data>=0x61))
    6b5a:	2f e9       	ldi	r18, 0x9F	; 159
    6b5c:	28 0f       	add	r18, r24
    6b5e:	26 30       	cpi	r18, 0x06	; 6
    6b60:	10 f4       	brcc	.+4      	; 0x6b66 <ascii_to_hex+0x22>
	{
		return_data = data - 0x57;
    6b62:	99 ea       	ldi	r25, 0xA9	; 169
    6b64:	98 0f       	add	r25, r24
	}
	return return_data;
}
    6b66:	89 2f       	mov	r24, r25
    6b68:	08 95       	ret

00006b6a <fatal_error_to_rf>:


//fatal error routine
void fatal_error_to_rf(fatal_error_t error)
{
	if (error == adc_fatal_error)
    6b6a:	81 11       	cpse	r24, r1
    6b6c:	0a c0       	rjmp	.+20     	; 0x6b82 <fatal_error_to_rf+0x18>
	{
		data_to_rf[0] = adc_fatal_error+1;
    6b6e:	81 e0       	ldi	r24, 0x01	; 1
    6b70:	80 93 48 1f 	sts	0x1F48, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6b74:	41 e1       	ldi	r20, 0x11	; 17
    6b76:	59 e0       	ldi	r21, 0x09	; 9
    6b78:	61 e0       	ldi	r22, 0x01	; 1
    6b7a:	88 e4       	ldi	r24, 0x48	; 72
    6b7c:	9f e1       	ldi	r25, 0x1F	; 31
    6b7e:	31 cc       	rjmp	.-1950   	; 0x63e2 <send_to_rf>
    6b80:	08 95       	ret
	}
	else if (error == twi_fatal_error)
    6b82:	81 30       	cpi	r24, 0x01	; 1
    6b84:	51 f4       	brne	.+20     	; 0x6b9a <fatal_error_to_rf+0x30>
	{
		data_to_rf[0] = twi_fatal_error+1;
    6b86:	82 e0       	ldi	r24, 0x02	; 2
    6b88:	80 93 48 1f 	sts	0x1F48, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6b8c:	41 e1       	ldi	r20, 0x11	; 17
    6b8e:	59 e0       	ldi	r21, 0x09	; 9
    6b90:	61 e0       	ldi	r22, 0x01	; 1
    6b92:	88 e4       	ldi	r24, 0x48	; 72
    6b94:	9f e1       	ldi	r25, 0x1F	; 31
    6b96:	25 cc       	rjmp	.-1974   	; 0x63e2 <send_to_rf>
    6b98:	08 95       	ret
	}
	else if (error == usart_fatal_error)
    6b9a:	82 30       	cpi	r24, 0x02	; 2
    6b9c:	51 f4       	brne	.+20     	; 0x6bb2 <fatal_error_to_rf+0x48>
	{
		data_to_rf[0] = usart_fatal_error+1;
    6b9e:	83 e0       	ldi	r24, 0x03	; 3
    6ba0:	80 93 48 1f 	sts	0x1F48, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6ba4:	41 e1       	ldi	r20, 0x11	; 17
    6ba6:	59 e0       	ldi	r21, 0x09	; 9
    6ba8:	61 e0       	ldi	r22, 0x01	; 1
    6baa:	88 e4       	ldi	r24, 0x48	; 72
    6bac:	9f e1       	ldi	r25, 0x1F	; 31
    6bae:	19 cc       	rjmp	.-1998   	; 0x63e2 <send_to_rf>
    6bb0:	08 95       	ret
	}
	else
	{
		data_to_rf[0] = timer2_fatal_error+1;
    6bb2:	84 e0       	ldi	r24, 0x04	; 4
    6bb4:	80 93 48 1f 	sts	0x1F48, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6bb8:	41 e1       	ldi	r20, 0x11	; 17
    6bba:	59 e0       	ldi	r21, 0x09	; 9
    6bbc:	61 e0       	ldi	r22, 0x01	; 1
    6bbe:	88 e4       	ldi	r24, 0x48	; 72
    6bc0:	9f e1       	ldi	r25, 0x1F	; 31
    6bc2:	0f cc       	rjmp	.-2018   	; 0x63e2 <send_to_rf>
    6bc4:	08 95       	ret

00006bc6 <__vector_23>:
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
		date_out->month++;
	}
	date_out->date = day_number;
}
    6bc6:	1f 92       	push	r1
    6bc8:	0f 92       	push	r0
    6bca:	0f b6       	in	r0, 0x3f	; 63
    6bcc:	0f 92       	push	r0
    6bce:	11 24       	eor	r1, r1
    6bd0:	8f 93       	push	r24
    6bd2:	9f 93       	push	r25
    6bd4:	af 93       	push	r26
    6bd6:	bf 93       	push	r27
    6bd8:	80 91 af 1f 	lds	r24, 0x1FAF
    6bdc:	8f 5f       	subi	r24, 0xFF	; 255
    6bde:	80 93 af 1f 	sts	0x1FAF, r24
    6be2:	8e 31       	cpi	r24, 0x1E	; 30
    6be4:	a8 f0       	brcs	.+42     	; 0x6c10 <__vector_23+0x4a>
    6be6:	80 91 b0 1f 	lds	r24, 0x1FB0
    6bea:	90 91 b1 1f 	lds	r25, 0x1FB1
    6bee:	a0 91 b2 1f 	lds	r26, 0x1FB2
    6bf2:	b0 91 b3 1f 	lds	r27, 0x1FB3
    6bf6:	01 96       	adiw	r24, 0x01	; 1
    6bf8:	a1 1d       	adc	r26, r1
    6bfa:	b1 1d       	adc	r27, r1
    6bfc:	80 93 b0 1f 	sts	0x1FB0, r24
    6c00:	90 93 b1 1f 	sts	0x1FB1, r25
    6c04:	a0 93 b2 1f 	sts	0x1FB2, r26
    6c08:	b0 93 b3 1f 	sts	0x1FB3, r27
    6c0c:	10 92 af 1f 	sts	0x1FAF, r1
    6c10:	bf 91       	pop	r27
    6c12:	af 91       	pop	r26
    6c14:	9f 91       	pop	r25
    6c16:	8f 91       	pop	r24
    6c18:	0f 90       	pop	r0
    6c1a:	0f be       	out	0x3f, r0	; 63
    6c1c:	0f 90       	pop	r0
    6c1e:	1f 90       	pop	r1
    6c20:	18 95       	reti

00006c22 <__vector_15>:
    6c22:	1f 92       	push	r1
    6c24:	0f 92       	push	r0
    6c26:	0f b6       	in	r0, 0x3f	; 63
    6c28:	0f 92       	push	r0
    6c2a:	11 24       	eor	r1, r1
    6c2c:	8f 93       	push	r24
    6c2e:	9f 93       	push	r25
    6c30:	af 93       	push	r26
    6c32:	bf 93       	push	r27
    6c34:	80 91 b0 1f 	lds	r24, 0x1FB0
    6c38:	90 91 b1 1f 	lds	r25, 0x1FB1
    6c3c:	a0 91 b2 1f 	lds	r26, 0x1FB2
    6c40:	b0 91 b3 1f 	lds	r27, 0x1FB3
    6c44:	01 96       	adiw	r24, 0x01	; 1
    6c46:	a1 1d       	adc	r26, r1
    6c48:	b1 1d       	adc	r27, r1
    6c4a:	80 93 b0 1f 	sts	0x1FB0, r24
    6c4e:	90 93 b1 1f 	sts	0x1FB1, r25
    6c52:	a0 93 b2 1f 	sts	0x1FB2, r26
    6c56:	b0 93 b3 1f 	sts	0x1FB3, r27
    6c5a:	bf 91       	pop	r27
    6c5c:	af 91       	pop	r26
    6c5e:	9f 91       	pop	r25
    6c60:	8f 91       	pop	r24
    6c62:	0f 90       	pop	r0
    6c64:	0f be       	out	0x3f, r0	; 63
    6c66:	0f 90       	pop	r0
    6c68:	1f 90       	pop	r1
    6c6a:	18 95       	reti

00006c6c <timer2_init>:
    6c6c:	f8 94       	cli
    6c6e:	10 92 70 00 	sts	0x0070, r1
    6c72:	e6 eb       	ldi	r30, 0xB6	; 182
    6c74:	f0 e0       	ldi	r31, 0x00	; 0
    6c76:	80 81       	ld	r24, Z
    6c78:	80 62       	ori	r24, 0x20	; 32
    6c7a:	80 83       	st	Z, r24
    6c7c:	10 92 b2 00 	sts	0x00B2, r1
    6c80:	10 92 b0 00 	sts	0x00B0, r1
    6c84:	85 e0       	ldi	r24, 0x05	; 5
    6c86:	80 93 b1 00 	sts	0x00B1, r24
    6c8a:	80 81       	ld	r24, Z
    6c8c:	83 70       	andi	r24, 0x03	; 3
    6c8e:	83 30       	cpi	r24, 0x03	; 3
    6c90:	e1 f3       	breq	.-8      	; 0x6c8a <timer2_init+0x1e>
    6c92:	10 92 b2 00 	sts	0x00B2, r1
    6c96:	10 92 b0 00 	sts	0x00B0, r1
    6c9a:	85 e0       	ldi	r24, 0x05	; 5
    6c9c:	80 93 b1 00 	sts	0x00B1, r24
    6ca0:	17 ba       	out	0x17, r1	; 23
    6ca2:	e0 e7       	ldi	r30, 0x70	; 112
    6ca4:	f0 e0       	ldi	r31, 0x00	; 0
    6ca6:	80 81       	ld	r24, Z
    6ca8:	81 60       	ori	r24, 0x01	; 1
    6caa:	80 83       	st	Z, r24
    6cac:	78 94       	sei
    6cae:	08 95       	ret

00006cb0 <set_timestamp>:

void set_timestamp(uint32_t timestamp)
{
	timestamp_internal = timestamp;
    6cb0:	60 93 b0 1f 	sts	0x1FB0, r22
    6cb4:	70 93 b1 1f 	sts	0x1FB1, r23
    6cb8:	80 93 b2 1f 	sts	0x1FB2, r24
    6cbc:	90 93 b3 1f 	sts	0x1FB3, r25
    6cc0:	08 95       	ret

00006cc2 <get_timestamp>:
}

uint32_t get_timestamp(void)
{
	return timestamp_internal;
    6cc2:	60 91 b0 1f 	lds	r22, 0x1FB0
    6cc6:	70 91 b1 1f 	lds	r23, 0x1FB1
    6cca:	80 91 b2 1f 	lds	r24, 0x1FB2
    6cce:	90 91 b3 1f 	lds	r25, 0x1FB3
    6cd2:	08 95       	ret

00006cd4 <pneBatteryAverage_init>:
#include "PNE_Factory.h"



void pneBatteryAverage_init()
{
    6cd4:	0f 93       	push	r16
    6cd6:	1f 93       	push	r17
    6cd8:	cf 93       	push	r28
    6cda:	df 93       	push	r29
	battery_counter = 0;
    6cdc:	10 92 f3 20 	sts	0x20F3, r1
    6ce0:	ad ee       	ldi	r26, 0xED	; 237
    6ce2:	b0 e2       	ldi	r27, 0x20	; 32
    6ce4:	62 ef       	ldi	r22, 0xF2	; 242
    6ce6:	70 e2       	ldi	r23, 0x20	; 32
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    6ce8:	0b e7       	ldi	r16, 0x7B	; 123
    6cea:	10 e0       	ldi	r17, 0x00	; 0
	}

	ADMUX
		= ((uint8_t)input &
    6cec:	4c e7       	ldi	r20, 0x7C	; 124
    6cee:	50 e0       	ldi	r21, 0x00	; 0
    6cf0:	90 e6       	ldi	r25, 0x60	; 96
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    6cf2:	ea e7       	ldi	r30, 0x7A	; 122
    6cf4:	f0 e0       	ldi	r31, 0x00	; 0
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    6cf6:	29 e7       	ldi	r18, 0x79	; 121
    6cf8:	30 e0       	ldi	r19, 0x00	; 0
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    6cfa:	e8 01       	movw	r28, r16
    6cfc:	88 81       	ld	r24, Y
    6cfe:	87 7f       	andi	r24, 0xF7	; 247
    6d00:	88 83       	st	Y, r24
	}

	ADMUX
		= ((uint8_t)input &
    6d02:	ea 01       	movw	r28, r20
    6d04:	98 83       	st	Y, r25
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    6d06:	80 81       	ld	r24, Z
    6d08:	80 64       	ori	r24, 0x40	; 64
    6d0a:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
    6d0c:	80 81       	ld	r24, Z
    6d0e:	86 fd       	sbrc	r24, 6
    6d10:	fd cf       	rjmp	.-6      	; 0x6d0c <pneBatteryAverage_init+0x38>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    6d12:	e9 01       	movw	r28, r18
    6d14:	88 81       	ld	r24, Y
	uint8_t i=0;
		
	for(i=0; i<5; i++)
	{
		battery_average[i] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);
    6d16:	8d 93       	st	X+, r24
void pneBatteryAverage_init()
{
	battery_counter = 0;
	uint8_t i=0;
		
	for(i=0; i<5; i++)
    6d18:	a6 17       	cp	r26, r22
    6d1a:	b7 07       	cpc	r27, r23
    6d1c:	71 f7       	brne	.-36     	; 0x6cfa <pneBatteryAverage_init+0x26>
	{
		battery_average[i] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);
		//int_to_ascii(battery_average[i]);
	}
}
    6d1e:	df 91       	pop	r29
    6d20:	cf 91       	pop	r28
    6d22:	1f 91       	pop	r17
    6d24:	0f 91       	pop	r16
    6d26:	08 95       	ret

00006d28 <pneBatteryAverage>:

uint8_t pneBatteryAverage()
{
	if(battery_counter > 5)
    6d28:	80 91 f3 20 	lds	r24, 0x20F3
    6d2c:	86 30       	cpi	r24, 0x06	; 6
    6d2e:	10 f0       	brcs	.+4      	; 0x6d34 <pneBatteryAverage+0xc>
	{
		battery_counter = 0;
    6d30:	10 92 f3 20 	sts	0x20F3, r1
	}
	
	battery_average[battery_counter] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);//*18*10/255;
    6d34:	a0 91 f3 20 	lds	r26, 0x20F3
    6d38:	b0 e0       	ldi	r27, 0x00	; 0
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    6d3a:	eb e7       	ldi	r30, 0x7B	; 123
    6d3c:	f0 e0       	ldi	r31, 0x00	; 0
    6d3e:	80 81       	ld	r24, Z
    6d40:	87 7f       	andi	r24, 0xF7	; 247
    6d42:	80 83       	st	Z, r24
	}

	ADMUX
		= ((uint8_t)input &
    6d44:	80 e6       	ldi	r24, 0x60	; 96
    6d46:	80 93 7c 00 	sts	0x007C, r24
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    6d4a:	ea e7       	ldi	r30, 0x7A	; 122
    6d4c:	f0 e0       	ldi	r31, 0x00	; 0
    6d4e:	80 81       	ld	r24, Z
    6d50:	80 64       	ori	r24, 0x40	; 64
    6d52:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
    6d54:	80 81       	ld	r24, Z
    6d56:	86 fd       	sbrc	r24, 6
    6d58:	fd cf       	rjmp	.-6      	; 0x6d54 <pneBatteryAverage+0x2c>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    6d5a:	80 91 79 00 	lds	r24, 0x0079
    6d5e:	ed ee       	ldi	r30, 0xED	; 237
    6d60:	f0 e2       	ldi	r31, 0x20	; 32
    6d62:	a3 51       	subi	r26, 0x13	; 19
    6d64:	bf 4d       	sbci	r27, 0xDF	; 223
    6d66:	8c 93       	st	X, r24
	battery_counter++;
    6d68:	80 91 f3 20 	lds	r24, 0x20F3
    6d6c:	8f 5f       	subi	r24, 0xFF	; 255
    6d6e:	80 93 f3 20 	sts	0x20F3, r24
	
	return (battery_average[0]+battery_average[1]+battery_average[2]+battery_average[3]+battery_average[4])/5;
    6d72:	20 81       	ld	r18, Z
    6d74:	81 81       	ldd	r24, Z+1	; 0x01
    6d76:	90 e0       	ldi	r25, 0x00	; 0
    6d78:	82 0f       	add	r24, r18
    6d7a:	91 1d       	adc	r25, r1
    6d7c:	22 81       	ldd	r18, Z+2	; 0x02
    6d7e:	82 0f       	add	r24, r18
    6d80:	91 1d       	adc	r25, r1
    6d82:	23 81       	ldd	r18, Z+3	; 0x03
    6d84:	82 0f       	add	r24, r18
    6d86:	91 1d       	adc	r25, r1
    6d88:	24 81       	ldd	r18, Z+4	; 0x04
    6d8a:	82 0f       	add	r24, r18
    6d8c:	91 1d       	adc	r25, r1
    6d8e:	65 e0       	ldi	r22, 0x05	; 5
    6d90:	70 e0       	ldi	r23, 0x00	; 0
    6d92:	0e 94 d5 4b 	call	0x97aa	; 0x97aa <__divmodhi4>
    6d96:	86 2f       	mov	r24, r22
}
    6d98:	08 95       	ret

00006d9a <reflect>:
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
    6d9a:	8f 92       	push	r8
    6d9c:	9f 92       	push	r9
    6d9e:	af 92       	push	r10
    6da0:	bf 92       	push	r11
    6da2:	cf 92       	push	r12
    6da4:	df 92       	push	r13
    6da6:	ef 92       	push	r14
    6da8:	ff 92       	push	r15
    6daa:	cf 93       	push	r28
    6dac:	df 93       	push	r29
    6dae:	44 23       	and	r20, r20
    6db0:	19 f1       	breq	.+70     	; 0x6df8 <reflect+0x5e>
    6db2:	e4 2f       	mov	r30, r20
    6db4:	f0 e0       	ldi	r31, 0x00	; 0
    6db6:	31 97       	sbiw	r30, 0x01	; 1
    6db8:	20 e0       	ldi	r18, 0x00	; 0
    6dba:	81 2c       	mov	r8, r1
    6dbc:	91 2c       	mov	r9, r1
    6dbe:	54 01       	movw	r10, r8
    6dc0:	c1 e0       	ldi	r28, 0x01	; 1
    6dc2:	d0 e0       	ldi	r29, 0x00	; 0
    6dc4:	60 ff       	sbrs	r22, 0
    6dc6:	0f c0       	rjmp	.+30     	; 0x6de6 <reflect+0x4c>
    6dc8:	6e 01       	movw	r12, r28
    6dca:	0e 2e       	mov	r0, r30
    6dcc:	02 c0       	rjmp	.+4      	; 0x6dd2 <reflect+0x38>
    6dce:	cc 0c       	add	r12, r12
    6dd0:	dd 1c       	adc	r13, r13
    6dd2:	0a 94       	dec	r0
    6dd4:	e2 f7       	brpl	.-8      	; 0x6dce <reflect+0x34>
    6dd6:	0d 2c       	mov	r0, r13
    6dd8:	00 0c       	add	r0, r0
    6dda:	ee 08       	sbc	r14, r14
    6ddc:	ff 08       	sbc	r15, r15
    6dde:	8c 28       	or	r8, r12
    6de0:	9d 28       	or	r9, r13
    6de2:	ae 28       	or	r10, r14
    6de4:	bf 28       	or	r11, r15
    6de6:	96 95       	lsr	r25
    6de8:	87 95       	ror	r24
    6dea:	77 95       	ror	r23
    6dec:	67 95       	ror	r22
    6dee:	2f 5f       	subi	r18, 0xFF	; 255
    6df0:	31 97       	sbiw	r30, 0x01	; 1
    6df2:	24 13       	cpse	r18, r20
    6df4:	e7 cf       	rjmp	.-50     	; 0x6dc4 <reflect+0x2a>
    6df6:	03 c0       	rjmp	.+6      	; 0x6dfe <reflect+0x64>
    6df8:	81 2c       	mov	r8, r1
    6dfa:	91 2c       	mov	r9, r1
    6dfc:	54 01       	movw	r10, r8
    6dfe:	c5 01       	movw	r24, r10
    6e00:	b4 01       	movw	r22, r8
    6e02:	df 91       	pop	r29
    6e04:	cf 91       	pop	r28
    6e06:	ff 90       	pop	r15
    6e08:	ef 90       	pop	r14
    6e0a:	df 90       	pop	r13
    6e0c:	cf 90       	pop	r12
    6e0e:	bf 90       	pop	r11
    6e10:	af 90       	pop	r10
    6e12:	9f 90       	pop	r9
    6e14:	8f 90       	pop	r8
    6e16:	08 95       	ret

00006e18 <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
    6e18:	e4 ef       	ldi	r30, 0xF4	; 244
    6e1a:	f0 e2       	ldi	r31, 0x20	; 32


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    6e1c:	40 e0       	ldi	r20, 0x00	; 0
    6e1e:	50 e0       	ldi	r21, 0x00	; 0
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
    6e20:	38 e0       	ldi	r19, 0x08	; 8
    6e22:	94 2f       	mov	r25, r20
    6e24:	88 27       	eor	r24, r24
    6e26:	23 2f       	mov	r18, r19
        for (bit = 8; bit > 0; --bit)
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
    6e28:	99 23       	and	r25, r25
    6e2a:	34 f4       	brge	.+12     	; 0x6e38 <crcInit+0x20>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
    6e2c:	88 0f       	add	r24, r24
    6e2e:	99 1f       	adc	r25, r25
    6e30:	65 e0       	ldi	r22, 0x05	; 5
    6e32:	86 27       	eor	r24, r22
    6e34:	90 58       	subi	r25, 0x80	; 128
    6e36:	02 c0       	rjmp	.+4      	; 0x6e3c <crcInit+0x24>
            }
            else
            {
                remainder = (remainder << 1);
    6e38:	88 0f       	add	r24, r24
    6e3a:	99 1f       	adc	r25, r25
    6e3c:	21 50       	subi	r18, 0x01	; 1
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
    6e3e:	a1 f7       	brne	.-24     	; 0x6e28 <crcInit+0x10>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    6e40:	81 93       	st	Z+, r24
    6e42:	91 93       	st	Z+, r25


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    6e44:	4f 5f       	subi	r20, 0xFF	; 255
    6e46:	5f 4f       	sbci	r21, 0xFF	; 255
    6e48:	41 15       	cp	r20, r1
    6e4a:	81 e0       	ldi	r24, 0x01	; 1
    6e4c:	58 07       	cpc	r21, r24
    6e4e:	49 f7       	brne	.-46     	; 0x6e22 <crcInit+0xa>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
    6e50:	08 95       	ret

00006e52 <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    6e52:	ef 92       	push	r14
    6e54:	ff 92       	push	r15
    6e56:	0f 93       	push	r16
    6e58:	1f 93       	push	r17
    6e5a:	cf 93       	push	r28
    6e5c:	df 93       	push	r29


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    6e5e:	16 16       	cp	r1, r22
    6e60:	17 06       	cpc	r1, r23
    6e62:	fc f4       	brge	.+62     	; 0x6ea2 <crcFast+0x50>
    6e64:	7c 01       	movw	r14, r24
    6e66:	8c 01       	movw	r16, r24
    6e68:	06 0f       	add	r16, r22
    6e6a:	17 1f       	adc	r17, r23
    6e6c:	c0 e0       	ldi	r28, 0x00	; 0
    6e6e:	d0 e0       	ldi	r29, 0x00	; 0
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
    6e70:	f7 01       	movw	r30, r14
    6e72:	61 91       	ld	r22, Z+
    6e74:	7f 01       	movw	r14, r30
    6e76:	70 e0       	ldi	r23, 0x00	; 0
    6e78:	80 e0       	ldi	r24, 0x00	; 0
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	48 e0       	ldi	r20, 0x08	; 8
    6e7e:	8d df       	rcall	.-230    	; 0x6d9a <reflect>
    6e80:	6d 27       	eor	r22, r29
  		remainder = crcTable[data] ^ (remainder << 8);
    6e82:	e6 2f       	mov	r30, r22
    6e84:	f0 e0       	ldi	r31, 0x00	; 0
    6e86:	ee 0f       	add	r30, r30
    6e88:	ff 1f       	adc	r31, r31
    6e8a:	ec 50       	subi	r30, 0x0C	; 12
    6e8c:	ff 4d       	sbci	r31, 0xDF	; 223
    6e8e:	80 81       	ld	r24, Z
    6e90:	91 81       	ldd	r25, Z+1	; 0x01
    6e92:	dc 2f       	mov	r29, r28
    6e94:	cc 27       	eor	r28, r28
    6e96:	c8 27       	eor	r28, r24
    6e98:	d9 27       	eor	r29, r25


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    6e9a:	e0 16       	cp	r14, r16
    6e9c:	f1 06       	cpc	r15, r17
    6e9e:	41 f7       	brne	.-48     	; 0x6e70 <crcFast+0x1e>
    6ea0:	02 c0       	rjmp	.+4      	; 0x6ea6 <crcFast+0x54>
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    crc	           remainder = INITIAL_REMAINDER;
    6ea2:	c0 e0       	ldi	r28, 0x00	; 0
    6ea4:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
    6ea6:	be 01       	movw	r22, r28
    6ea8:	80 e0       	ldi	r24, 0x00	; 0
    6eaa:	90 e0       	ldi	r25, 0x00	; 0
    6eac:	40 e1       	ldi	r20, 0x10	; 16
    6eae:	75 df       	rcall	.-278    	; 0x6d9a <reflect>

}   /* crcFast() */
    6eb0:	cb 01       	movw	r24, r22
    6eb2:	df 91       	pop	r29
    6eb4:	cf 91       	pop	r28
    6eb6:	1f 91       	pop	r17
    6eb8:	0f 91       	pop	r16
    6eba:	ff 90       	pop	r15
    6ebc:	ef 90       	pop	r14
    6ebe:	08 95       	ret

00006ec0 <md5_process>:
 */
void md5_hmac_reset( md5_context *ctx )
{
    md5_starts( ctx );
    md5_update( ctx, ctx->ipad, 64 );
}
    6ec0:	2f 92       	push	r2
    6ec2:	3f 92       	push	r3
    6ec4:	4f 92       	push	r4
    6ec6:	5f 92       	push	r5
    6ec8:	6f 92       	push	r6
    6eca:	7f 92       	push	r7
    6ecc:	8f 92       	push	r8
    6ece:	9f 92       	push	r9
    6ed0:	af 92       	push	r10
    6ed2:	bf 92       	push	r11
    6ed4:	cf 92       	push	r12
    6ed6:	df 92       	push	r13
    6ed8:	ef 92       	push	r14
    6eda:	ff 92       	push	r15
    6edc:	0f 93       	push	r16
    6ede:	1f 93       	push	r17
    6ee0:	cf 93       	push	r28
    6ee2:	df 93       	push	r29
    6ee4:	cd b7       	in	r28, 0x3d	; 61
    6ee6:	de b7       	in	r29, 0x3e	; 62
    6ee8:	c0 55       	subi	r28, 0x50	; 80
    6eea:	d1 09       	sbc	r29, r1
    6eec:	0f b6       	in	r0, 0x3f	; 63
    6eee:	f8 94       	cli
    6ef0:	de bf       	out	0x3e, r29	; 62
    6ef2:	0f be       	out	0x3f, r0	; 63
    6ef4:	cd bf       	out	0x3d, r28	; 61
    6ef6:	1c 01       	movw	r2, r24
    6ef8:	fb 01       	movw	r30, r22
    6efa:	21 81       	ldd	r18, Z+1	; 0x01
    6efc:	82 81       	ldd	r24, Z+2	; 0x02
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	a0 e0       	ldi	r26, 0x00	; 0
    6f02:	b0 e0       	ldi	r27, 0x00	; 0
    6f04:	dc 01       	movw	r26, r24
    6f06:	99 27       	eor	r25, r25
    6f08:	88 27       	eor	r24, r24
    6f0a:	92 2b       	or	r25, r18
    6f0c:	20 81       	ld	r18, Z
    6f0e:	6c 01       	movw	r12, r24
    6f10:	7d 01       	movw	r14, r26
    6f12:	c2 2a       	or	r12, r18
    6f14:	23 81       	ldd	r18, Z+3	; 0x03
    6f16:	b7 01       	movw	r22, r14
    6f18:	a6 01       	movw	r20, r12
    6f1a:	72 2b       	or	r23, r18
    6f1c:	49 87       	std	Y+9, r20	; 0x09
    6f1e:	5a 87       	std	Y+10, r21	; 0x0a
    6f20:	6b 87       	std	Y+11, r22	; 0x0b
    6f22:	7c 87       	std	Y+12, r23	; 0x0c
    6f24:	85 81       	ldd	r24, Z+5	; 0x05
    6f26:	86 80       	ldd	r8, Z+6	; 0x06
    6f28:	91 2c       	mov	r9, r1
    6f2a:	a1 2c       	mov	r10, r1
    6f2c:	b1 2c       	mov	r11, r1
    6f2e:	54 01       	movw	r10, r8
    6f30:	99 24       	eor	r9, r9
    6f32:	88 24       	eor	r8, r8
    6f34:	98 2a       	or	r9, r24
    6f36:	84 81       	ldd	r24, Z+4	; 0x04
    6f38:	88 2a       	or	r8, r24
    6f3a:	87 81       	ldd	r24, Z+7	; 0x07
    6f3c:	75 01       	movw	r14, r10
    6f3e:	64 01       	movw	r12, r8
    6f40:	f8 2a       	or	r15, r24
    6f42:	cd 86       	std	Y+13, r12	; 0x0d
    6f44:	de 86       	std	Y+14, r13	; 0x0e
    6f46:	ef 86       	std	Y+15, r14	; 0x0f
    6f48:	f8 8a       	std	Y+16, r15	; 0x10
    6f4a:	81 85       	ldd	r24, Z+9	; 0x09
    6f4c:	82 84       	ldd	r8, Z+10	; 0x0a
    6f4e:	91 2c       	mov	r9, r1
    6f50:	a1 2c       	mov	r10, r1
    6f52:	b1 2c       	mov	r11, r1
    6f54:	54 01       	movw	r10, r8
    6f56:	99 24       	eor	r9, r9
    6f58:	88 24       	eor	r8, r8
    6f5a:	98 2a       	or	r9, r24
    6f5c:	80 85       	ldd	r24, Z+8	; 0x08
    6f5e:	88 2a       	or	r8, r24
    6f60:	83 85       	ldd	r24, Z+11	; 0x0b
    6f62:	85 01       	movw	r16, r10
    6f64:	74 01       	movw	r14, r8
    6f66:	18 2b       	or	r17, r24
    6f68:	e9 8a       	std	Y+17, r14	; 0x11
    6f6a:	fa 8a       	std	Y+18, r15	; 0x12
    6f6c:	0b 8b       	std	Y+19, r16	; 0x13
    6f6e:	1c 8b       	std	Y+20, r17	; 0x14
    6f70:	85 85       	ldd	r24, Z+13	; 0x0d
    6f72:	06 85       	ldd	r16, Z+14	; 0x0e
    6f74:	10 e0       	ldi	r17, 0x00	; 0
    6f76:	20 e0       	ldi	r18, 0x00	; 0
    6f78:	30 e0       	ldi	r19, 0x00	; 0
    6f7a:	98 01       	movw	r18, r16
    6f7c:	11 27       	eor	r17, r17
    6f7e:	00 27       	eor	r16, r16
    6f80:	18 2b       	or	r17, r24
    6f82:	84 85       	ldd	r24, Z+12	; 0x0c
    6f84:	08 2b       	or	r16, r24
    6f86:	87 85       	ldd	r24, Z+15	; 0x0f
    6f88:	b9 01       	movw	r22, r18
    6f8a:	a8 01       	movw	r20, r16
    6f8c:	78 2b       	or	r23, r24
    6f8e:	4d 8b       	std	Y+21, r20	; 0x15
    6f90:	5e 8b       	std	Y+22, r21	; 0x16
    6f92:	6f 8b       	std	Y+23, r22	; 0x17
    6f94:	78 8f       	std	Y+24, r23	; 0x18
    6f96:	81 89       	ldd	r24, Z+17	; 0x11
    6f98:	82 88       	ldd	r8, Z+18	; 0x12
    6f9a:	91 2c       	mov	r9, r1
    6f9c:	a1 2c       	mov	r10, r1
    6f9e:	b1 2c       	mov	r11, r1
    6fa0:	54 01       	movw	r10, r8
    6fa2:	99 24       	eor	r9, r9
    6fa4:	88 24       	eor	r8, r8
    6fa6:	98 2a       	or	r9, r24
    6fa8:	80 89       	ldd	r24, Z+16	; 0x10
    6faa:	88 2a       	or	r8, r24
    6fac:	83 89       	ldd	r24, Z+19	; 0x13
    6fae:	75 01       	movw	r14, r10
    6fb0:	64 01       	movw	r12, r8
    6fb2:	f8 2a       	or	r15, r24
    6fb4:	c9 8e       	std	Y+25, r12	; 0x19
    6fb6:	da 8e       	std	Y+26, r13	; 0x1a
    6fb8:	eb 8e       	std	Y+27, r14	; 0x1b
    6fba:	fc 8e       	std	Y+28, r15	; 0x1c
    6fbc:	85 89       	ldd	r24, Z+21	; 0x15
    6fbe:	06 89       	ldd	r16, Z+22	; 0x16
    6fc0:	10 e0       	ldi	r17, 0x00	; 0
    6fc2:	20 e0       	ldi	r18, 0x00	; 0
    6fc4:	30 e0       	ldi	r19, 0x00	; 0
    6fc6:	98 01       	movw	r18, r16
    6fc8:	11 27       	eor	r17, r17
    6fca:	00 27       	eor	r16, r16
    6fcc:	18 2b       	or	r17, r24
    6fce:	84 89       	ldd	r24, Z+20	; 0x14
    6fd0:	08 2b       	or	r16, r24
    6fd2:	87 89       	ldd	r24, Z+23	; 0x17
    6fd4:	b9 01       	movw	r22, r18
    6fd6:	a8 01       	movw	r20, r16
    6fd8:	78 2b       	or	r23, r24
    6fda:	4d 8f       	std	Y+29, r20	; 0x1d
    6fdc:	5e 8f       	std	Y+30, r21	; 0x1e
    6fde:	6f 8f       	std	Y+31, r22	; 0x1f
    6fe0:	78 a3       	std	Y+32, r23	; 0x20
    6fe2:	81 8d       	ldd	r24, Z+25	; 0x19
    6fe4:	82 8c       	ldd	r8, Z+26	; 0x1a
    6fe6:	91 2c       	mov	r9, r1
    6fe8:	a1 2c       	mov	r10, r1
    6fea:	b1 2c       	mov	r11, r1
    6fec:	54 01       	movw	r10, r8
    6fee:	99 24       	eor	r9, r9
    6ff0:	88 24       	eor	r8, r8
    6ff2:	98 2a       	or	r9, r24
    6ff4:	80 8d       	ldd	r24, Z+24	; 0x18
    6ff6:	88 2a       	or	r8, r24
    6ff8:	83 8d       	ldd	r24, Z+27	; 0x1b
    6ffa:	75 01       	movw	r14, r10
    6ffc:	64 01       	movw	r12, r8
    6ffe:	f8 2a       	or	r15, r24
    7000:	c9 a2       	std	Y+33, r12	; 0x21
    7002:	da a2       	std	Y+34, r13	; 0x22
    7004:	eb a2       	std	Y+35, r14	; 0x23
    7006:	fc a2       	std	Y+36, r15	; 0x24
    7008:	85 8d       	ldd	r24, Z+29	; 0x1d
    700a:	06 8d       	ldd	r16, Z+30	; 0x1e
    700c:	10 e0       	ldi	r17, 0x00	; 0
    700e:	20 e0       	ldi	r18, 0x00	; 0
    7010:	30 e0       	ldi	r19, 0x00	; 0
    7012:	98 01       	movw	r18, r16
    7014:	11 27       	eor	r17, r17
    7016:	00 27       	eor	r16, r16
    7018:	18 2b       	or	r17, r24
    701a:	84 8d       	ldd	r24, Z+28	; 0x1c
    701c:	08 2b       	or	r16, r24
    701e:	87 8d       	ldd	r24, Z+31	; 0x1f
    7020:	b9 01       	movw	r22, r18
    7022:	a8 01       	movw	r20, r16
    7024:	78 2b       	or	r23, r24
    7026:	4d a3       	std	Y+37, r20	; 0x25
    7028:	5e a3       	std	Y+38, r21	; 0x26
    702a:	6f a3       	std	Y+39, r22	; 0x27
    702c:	78 a7       	std	Y+40, r23	; 0x28
    702e:	81 a1       	ldd	r24, Z+33	; 0x21
    7030:	82 a0       	ldd	r8, Z+34	; 0x22
    7032:	91 2c       	mov	r9, r1
    7034:	a1 2c       	mov	r10, r1
    7036:	b1 2c       	mov	r11, r1
    7038:	54 01       	movw	r10, r8
    703a:	99 24       	eor	r9, r9
    703c:	88 24       	eor	r8, r8
    703e:	98 2a       	or	r9, r24
    7040:	80 a1       	ldd	r24, Z+32	; 0x20
    7042:	88 2a       	or	r8, r24
    7044:	83 a1       	ldd	r24, Z+35	; 0x23
    7046:	75 01       	movw	r14, r10
    7048:	64 01       	movw	r12, r8
    704a:	f8 2a       	or	r15, r24
    704c:	c9 a6       	std	Y+41, r12	; 0x29
    704e:	da a6       	std	Y+42, r13	; 0x2a
    7050:	eb a6       	std	Y+43, r14	; 0x2b
    7052:	fc a6       	std	Y+44, r15	; 0x2c
    7054:	85 a1       	ldd	r24, Z+37	; 0x25
    7056:	c6 a0       	ldd	r12, Z+38	; 0x26
    7058:	d1 2c       	mov	r13, r1
    705a:	e1 2c       	mov	r14, r1
    705c:	f1 2c       	mov	r15, r1
    705e:	76 01       	movw	r14, r12
    7060:	dd 24       	eor	r13, r13
    7062:	cc 24       	eor	r12, r12
    7064:	d8 2a       	or	r13, r24
    7066:	84 a1       	ldd	r24, Z+36	; 0x24
    7068:	c8 2a       	or	r12, r24
    706a:	87 a1       	ldd	r24, Z+39	; 0x27
    706c:	97 01       	movw	r18, r14
    706e:	86 01       	movw	r16, r12
    7070:	38 2b       	or	r19, r24
    7072:	0d a7       	std	Y+45, r16	; 0x2d
    7074:	1e a7       	std	Y+46, r17	; 0x2e
    7076:	2f a7       	std	Y+47, r18	; 0x2f
    7078:	38 ab       	std	Y+48, r19	; 0x30
    707a:	81 a5       	ldd	r24, Z+41	; 0x29
    707c:	02 a5       	ldd	r16, Z+42	; 0x2a
    707e:	10 e0       	ldi	r17, 0x00	; 0
    7080:	20 e0       	ldi	r18, 0x00	; 0
    7082:	30 e0       	ldi	r19, 0x00	; 0
    7084:	98 01       	movw	r18, r16
    7086:	11 27       	eor	r17, r17
    7088:	00 27       	eor	r16, r16
    708a:	18 2b       	or	r17, r24
    708c:	80 a5       	ldd	r24, Z+40	; 0x28
    708e:	08 2b       	or	r16, r24
    7090:	83 a5       	ldd	r24, Z+43	; 0x2b
    7092:	b9 01       	movw	r22, r18
    7094:	a8 01       	movw	r20, r16
    7096:	78 2b       	or	r23, r24
    7098:	49 ab       	std	Y+49, r20	; 0x31
    709a:	5a ab       	std	Y+50, r21	; 0x32
    709c:	6b ab       	std	Y+51, r22	; 0x33
    709e:	7c ab       	std	Y+52, r23	; 0x34
    70a0:	85 a5       	ldd	r24, Z+45	; 0x2d
    70a2:	46 a5       	ldd	r20, Z+46	; 0x2e
    70a4:	50 e0       	ldi	r21, 0x00	; 0
    70a6:	60 e0       	ldi	r22, 0x00	; 0
    70a8:	70 e0       	ldi	r23, 0x00	; 0
    70aa:	ba 01       	movw	r22, r20
    70ac:	55 27       	eor	r21, r21
    70ae:	44 27       	eor	r20, r20
    70b0:	58 2b       	or	r21, r24
    70b2:	84 a5       	ldd	r24, Z+44	; 0x2c
    70b4:	48 2b       	or	r20, r24
    70b6:	87 a5       	ldd	r24, Z+47	; 0x2f
    70b8:	6a 01       	movw	r12, r20
    70ba:	7b 01       	movw	r14, r22
    70bc:	f8 2a       	or	r15, r24
    70be:	cd aa       	std	Y+53, r12	; 0x35
    70c0:	de aa       	std	Y+54, r13	; 0x36
    70c2:	ef aa       	std	Y+55, r14	; 0x37
    70c4:	f8 ae       	std	Y+56, r15	; 0x38
    70c6:	81 a9       	ldd	r24, Z+49	; 0x31
    70c8:	02 a9       	ldd	r16, Z+50	; 0x32
    70ca:	10 e0       	ldi	r17, 0x00	; 0
    70cc:	20 e0       	ldi	r18, 0x00	; 0
    70ce:	30 e0       	ldi	r19, 0x00	; 0
    70d0:	98 01       	movw	r18, r16
    70d2:	11 27       	eor	r17, r17
    70d4:	00 27       	eor	r16, r16
    70d6:	18 2b       	or	r17, r24
    70d8:	80 a9       	ldd	r24, Z+48	; 0x30
    70da:	08 2b       	or	r16, r24
    70dc:	83 a9       	ldd	r24, Z+51	; 0x33
    70de:	b9 01       	movw	r22, r18
    70e0:	a8 01       	movw	r20, r16
    70e2:	78 2b       	or	r23, r24
    70e4:	49 af       	std	Y+57, r20	; 0x39
    70e6:	5a af       	std	Y+58, r21	; 0x3a
    70e8:	6b af       	std	Y+59, r22	; 0x3b
    70ea:	7c af       	std	Y+60, r23	; 0x3c
    70ec:	85 a9       	ldd	r24, Z+53	; 0x35
    70ee:	86 a8       	ldd	r8, Z+54	; 0x36
    70f0:	91 2c       	mov	r9, r1
    70f2:	a1 2c       	mov	r10, r1
    70f4:	b1 2c       	mov	r11, r1
    70f6:	54 01       	movw	r10, r8
    70f8:	99 24       	eor	r9, r9
    70fa:	88 24       	eor	r8, r8
    70fc:	98 2a       	or	r9, r24
    70fe:	84 a9       	ldd	r24, Z+52	; 0x34
    7100:	88 2a       	or	r8, r24
    7102:	87 a9       	ldd	r24, Z+55	; 0x37
    7104:	75 01       	movw	r14, r10
    7106:	64 01       	movw	r12, r8
    7108:	f8 2a       	or	r15, r24
    710a:	21 96       	adiw	r28, 0x01	; 1
    710c:	cc ae       	std	Y+60, r12	; 0x3c
    710e:	dd ae       	std	Y+61, r13	; 0x3d
    7110:	ee ae       	std	Y+62, r14	; 0x3e
    7112:	ff ae       	std	Y+63, r15	; 0x3f
    7114:	21 97       	sbiw	r28, 0x01	; 1
    7116:	81 ad       	ldd	r24, Z+57	; 0x39
    7118:	02 ad       	ldd	r16, Z+58	; 0x3a
    711a:	10 e0       	ldi	r17, 0x00	; 0
    711c:	20 e0       	ldi	r18, 0x00	; 0
    711e:	30 e0       	ldi	r19, 0x00	; 0
    7120:	98 01       	movw	r18, r16
    7122:	11 27       	eor	r17, r17
    7124:	00 27       	eor	r16, r16
    7126:	18 2b       	or	r17, r24
    7128:	80 ad       	ldd	r24, Z+56	; 0x38
    712a:	08 2b       	or	r16, r24
    712c:	83 ad       	ldd	r24, Z+59	; 0x3b
    712e:	b9 01       	movw	r22, r18
    7130:	a8 01       	movw	r20, r16
    7132:	78 2b       	or	r23, r24
    7134:	25 96       	adiw	r28, 0x05	; 5
    7136:	4c af       	std	Y+60, r20	; 0x3c
    7138:	5d af       	std	Y+61, r21	; 0x3d
    713a:	6e af       	std	Y+62, r22	; 0x3e
    713c:	7f af       	std	Y+63, r23	; 0x3f
    713e:	25 97       	sbiw	r28, 0x05	; 5
    7140:	85 ad       	ldd	r24, Z+61	; 0x3d
    7142:	46 ad       	ldd	r20, Z+62	; 0x3e
    7144:	50 e0       	ldi	r21, 0x00	; 0
    7146:	60 e0       	ldi	r22, 0x00	; 0
    7148:	70 e0       	ldi	r23, 0x00	; 0
    714a:	ba 01       	movw	r22, r20
    714c:	55 27       	eor	r21, r21
    714e:	44 27       	eor	r20, r20
    7150:	58 2b       	or	r21, r24
    7152:	84 ad       	ldd	r24, Z+60	; 0x3c
    7154:	48 2b       	or	r20, r24
    7156:	87 ad       	ldd	r24, Z+63	; 0x3f
    7158:	6a 01       	movw	r12, r20
    715a:	7b 01       	movw	r14, r22
    715c:	f8 2a       	or	r15, r24
    715e:	29 96       	adiw	r28, 0x09	; 9
    7160:	cc ae       	std	Y+60, r12	; 0x3c
    7162:	dd ae       	std	Y+61, r13	; 0x3d
    7164:	ee ae       	std	Y+62, r14	; 0x3e
    7166:	ff ae       	std	Y+63, r15	; 0x3f
    7168:	29 97       	sbiw	r28, 0x09	; 9
    716a:	d1 01       	movw	r26, r2
    716c:	18 96       	adiw	r26, 0x08	; 8
    716e:	ed 90       	ld	r14, X+
    7170:	fd 90       	ld	r15, X+
    7172:	0d 91       	ld	r16, X+
    7174:	1c 91       	ld	r17, X
    7176:	1b 97       	sbiw	r26, 0x0b	; 11
    7178:	61 96       	adiw	r28, 0x11	; 17
    717a:	ec ae       	std	Y+60, r14	; 0x3c
    717c:	fd ae       	std	Y+61, r15	; 0x3d
    717e:	0e af       	std	Y+62, r16	; 0x3e
    7180:	1f af       	std	Y+63, r17	; 0x3f
    7182:	61 97       	sbiw	r28, 0x11	; 17
    7184:	1c 96       	adiw	r26, 0x0c	; 12
    7186:	cd 90       	ld	r12, X+
    7188:	dd 90       	ld	r13, X+
    718a:	ed 90       	ld	r14, X+
    718c:	fc 90       	ld	r15, X
    718e:	1f 97       	sbiw	r26, 0x0f	; 15
    7190:	c9 82       	std	Y+1, r12	; 0x01
    7192:	da 82       	std	Y+2, r13	; 0x02
    7194:	eb 82       	std	Y+3, r14	; 0x03
    7196:	fc 82       	std	Y+4, r15	; 0x04
    7198:	50 96       	adiw	r26, 0x10	; 16
    719a:	cd 90       	ld	r12, X+
    719c:	dd 90       	ld	r13, X+
    719e:	ed 90       	ld	r14, X+
    71a0:	fc 90       	ld	r15, X
    71a2:	53 97       	sbiw	r26, 0x13	; 19
    71a4:	cd 82       	std	Y+5, r12	; 0x05
    71a6:	de 82       	std	Y+6, r13	; 0x06
    71a8:	ef 82       	std	Y+7, r14	; 0x07
    71aa:	f8 86       	std	Y+8, r15	; 0x08
    71ac:	54 96       	adiw	r26, 0x14	; 20
    71ae:	cd 90       	ld	r12, X+
    71b0:	dd 90       	ld	r13, X+
    71b2:	ed 90       	ld	r14, X+
    71b4:	fc 90       	ld	r15, X
    71b6:	57 97       	sbiw	r26, 0x17	; 23
    71b8:	2d 96       	adiw	r28, 0x0d	; 13
    71ba:	cc ae       	std	Y+60, r12	; 0x3c
    71bc:	dd ae       	std	Y+61, r13	; 0x3d
    71be:	ee ae       	std	Y+62, r14	; 0x3e
    71c0:	ff ae       	std	Y+63, r15	; 0x3f
    71c2:	2d 97       	sbiw	r28, 0x0d	; 13
    71c4:	61 96       	adiw	r28, 0x11	; 17
    71c6:	4c ad       	ldd	r20, Y+60	; 0x3c
    71c8:	5d ad       	ldd	r21, Y+61	; 0x3d
    71ca:	6e ad       	ldd	r22, Y+62	; 0x3e
    71cc:	7f ad       	ldd	r23, Y+63	; 0x3f
    71ce:	61 97       	sbiw	r28, 0x11	; 17
    71d0:	48 58       	subi	r20, 0x88	; 136
    71d2:	5b 45       	sbci	r21, 0x5B	; 91
    71d4:	65 49       	sbci	r22, 0x95	; 149
    71d6:	78 42       	sbci	r23, 0x28	; 40
    71d8:	d7 01       	movw	r26, r14
    71da:	c6 01       	movw	r24, r12
    71dc:	cd 80       	ldd	r12, Y+5	; 0x05
    71de:	de 80       	ldd	r13, Y+6	; 0x06
    71e0:	ef 80       	ldd	r14, Y+7	; 0x07
    71e2:	f8 84       	ldd	r15, Y+8	; 0x08
    71e4:	8c 25       	eor	r24, r12
    71e6:	9d 25       	eor	r25, r13
    71e8:	ae 25       	eor	r26, r14
    71ea:	bf 25       	eor	r27, r15
    71ec:	e9 80       	ldd	r14, Y+1	; 0x01
    71ee:	fa 80       	ldd	r15, Y+2	; 0x02
    71f0:	0b 81       	ldd	r16, Y+3	; 0x03
    71f2:	1c 81       	ldd	r17, Y+4	; 0x04
    71f4:	8e 21       	and	r24, r14
    71f6:	9f 21       	and	r25, r15
    71f8:	a0 23       	and	r26, r16
    71fa:	b1 23       	and	r27, r17
    71fc:	2d 96       	adiw	r28, 0x0d	; 13
    71fe:	0c ad       	ldd	r16, Y+60	; 0x3c
    7200:	1d ad       	ldd	r17, Y+61	; 0x3d
    7202:	2e ad       	ldd	r18, Y+62	; 0x3e
    7204:	3f ad       	ldd	r19, Y+63	; 0x3f
    7206:	2d 97       	sbiw	r28, 0x0d	; 13
    7208:	80 27       	eor	r24, r16
    720a:	91 27       	eor	r25, r17
    720c:	a2 27       	eor	r26, r18
    720e:	b3 27       	eor	r27, r19
    7210:	84 0f       	add	r24, r20
    7212:	95 1f       	adc	r25, r21
    7214:	a6 1f       	adc	r26, r22
    7216:	b7 1f       	adc	r27, r23
    7218:	29 85       	ldd	r18, Y+9	; 0x09
    721a:	3a 85       	ldd	r19, Y+10	; 0x0a
    721c:	4b 85       	ldd	r20, Y+11	; 0x0b
    721e:	5c 85       	ldd	r21, Y+12	; 0x0c
    7220:	82 0f       	add	r24, r18
    7222:	93 1f       	adc	r25, r19
    7224:	a4 1f       	adc	r26, r20
    7226:	b5 1f       	adc	r27, r21
    7228:	8c 01       	movw	r16, r24
    722a:	9d 01       	movw	r18, r26
    722c:	00 0f       	add	r16, r16
    722e:	11 1f       	adc	r17, r17
    7230:	22 1f       	adc	r18, r18
    7232:	33 1f       	adc	r19, r19
    7234:	00 0f       	add	r16, r16
    7236:	11 1f       	adc	r17, r17
    7238:	22 1f       	adc	r18, r18
    723a:	33 1f       	adc	r19, r19
    723c:	00 0f       	add	r16, r16
    723e:	11 1f       	adc	r17, r17
    7240:	22 1f       	adc	r18, r18
    7242:	33 1f       	adc	r19, r19
    7244:	00 0f       	add	r16, r16
    7246:	11 1f       	adc	r17, r17
    7248:	22 1f       	adc	r18, r18
    724a:	33 1f       	adc	r19, r19
    724c:	00 0f       	add	r16, r16
    724e:	11 1f       	adc	r17, r17
    7250:	22 1f       	adc	r18, r18
    7252:	33 1f       	adc	r19, r19
    7254:	00 0f       	add	r16, r16
    7256:	11 1f       	adc	r17, r17
    7258:	22 1f       	adc	r18, r18
    725a:	33 1f       	adc	r19, r19
    725c:	00 0f       	add	r16, r16
    725e:	11 1f       	adc	r17, r17
    7260:	22 1f       	adc	r18, r18
    7262:	33 1f       	adc	r19, r19
    7264:	07 2e       	mov	r0, r23
    7266:	79 e1       	ldi	r23, 0x19	; 25
    7268:	b6 95       	lsr	r27
    726a:	a7 95       	ror	r26
    726c:	97 95       	ror	r25
    726e:	87 95       	ror	r24
    7270:	7a 95       	dec	r23
    7272:	d1 f7       	brne	.-12     	; 0x7268 <md5_process+0x3a8>
    7274:	70 2d       	mov	r23, r0
    7276:	80 2b       	or	r24, r16
    7278:	91 2b       	or	r25, r17
    727a:	a2 2b       	or	r26, r18
    727c:	b3 2b       	or	r27, r19
    727e:	49 81       	ldd	r20, Y+1	; 0x01
    7280:	5a 81       	ldd	r21, Y+2	; 0x02
    7282:	6b 81       	ldd	r22, Y+3	; 0x03
    7284:	7c 81       	ldd	r23, Y+4	; 0x04
    7286:	84 0f       	add	r24, r20
    7288:	95 1f       	adc	r25, r21
    728a:	a6 1f       	adc	r26, r22
    728c:	b7 1f       	adc	r27, r23
    728e:	2d 96       	adiw	r28, 0x0d	; 13
    7290:	0c ad       	ldd	r16, Y+60	; 0x3c
    7292:	1d ad       	ldd	r17, Y+61	; 0x3d
    7294:	2e ad       	ldd	r18, Y+62	; 0x3e
    7296:	3f ad       	ldd	r19, Y+63	; 0x3f
    7298:	2d 97       	sbiw	r28, 0x0d	; 13
    729a:	0a 5a       	subi	r16, 0xAA	; 170
    729c:	18 44       	sbci	r17, 0x48	; 72
    729e:	28 43       	sbci	r18, 0x38	; 56
    72a0:	37 41       	sbci	r19, 0x17	; 23
    72a2:	4d 85       	ldd	r20, Y+13	; 0x0d
    72a4:	5e 85       	ldd	r21, Y+14	; 0x0e
    72a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    72a8:	78 89       	ldd	r23, Y+16	; 0x10
    72aa:	40 0f       	add	r20, r16
    72ac:	51 1f       	adc	r21, r17
    72ae:	62 1f       	adc	r22, r18
    72b0:	73 1f       	adc	r23, r19
    72b2:	0d 81       	ldd	r16, Y+5	; 0x05
    72b4:	1e 81       	ldd	r17, Y+6	; 0x06
    72b6:	2f 81       	ldd	r18, Y+7	; 0x07
    72b8:	38 85       	ldd	r19, Y+8	; 0x08
    72ba:	c9 80       	ldd	r12, Y+1	; 0x01
    72bc:	da 80       	ldd	r13, Y+2	; 0x02
    72be:	eb 80       	ldd	r14, Y+3	; 0x03
    72c0:	fc 80       	ldd	r15, Y+4	; 0x04
    72c2:	0c 25       	eor	r16, r12
    72c4:	1d 25       	eor	r17, r13
    72c6:	2e 25       	eor	r18, r14
    72c8:	3f 25       	eor	r19, r15
    72ca:	08 23       	and	r16, r24
    72cc:	19 23       	and	r17, r25
    72ce:	2a 23       	and	r18, r26
    72d0:	3b 23       	and	r19, r27
    72d2:	cd 80       	ldd	r12, Y+5	; 0x05
    72d4:	de 80       	ldd	r13, Y+6	; 0x06
    72d6:	ef 80       	ldd	r14, Y+7	; 0x07
    72d8:	f8 84       	ldd	r15, Y+8	; 0x08
    72da:	0c 25       	eor	r16, r12
    72dc:	1d 25       	eor	r17, r13
    72de:	2e 25       	eor	r18, r14
    72e0:	3f 25       	eor	r19, r15
    72e2:	04 0f       	add	r16, r20
    72e4:	15 1f       	adc	r17, r21
    72e6:	26 1f       	adc	r18, r22
    72e8:	37 1f       	adc	r19, r23
    72ea:	b9 01       	movw	r22, r18
    72ec:	a8 01       	movw	r20, r16
    72ee:	03 2e       	mov	r0, r19
    72f0:	3c e0       	ldi	r19, 0x0C	; 12
    72f2:	44 0f       	add	r20, r20
    72f4:	55 1f       	adc	r21, r21
    72f6:	66 1f       	adc	r22, r22
    72f8:	77 1f       	adc	r23, r23
    72fa:	3a 95       	dec	r19
    72fc:	d1 f7       	brne	.-12     	; 0x72f2 <md5_process+0x432>
    72fe:	30 2d       	mov	r19, r0
    7300:	0f 2e       	mov	r0, r31
    7302:	f4 e1       	ldi	r31, 0x14	; 20
    7304:	36 95       	lsr	r19
    7306:	27 95       	ror	r18
    7308:	17 95       	ror	r17
    730a:	07 95       	ror	r16
    730c:	fa 95       	dec	r31
    730e:	d1 f7       	brne	.-12     	; 0x7304 <md5_process+0x444>
    7310:	f0 2d       	mov	r31, r0
    7312:	04 2b       	or	r16, r20
    7314:	15 2b       	or	r17, r21
    7316:	26 2b       	or	r18, r22
    7318:	37 2b       	or	r19, r23
    731a:	08 0f       	add	r16, r24
    731c:	19 1f       	adc	r17, r25
    731e:	2a 1f       	adc	r18, r26
    7320:	3b 1f       	adc	r19, r27
    7322:	46 01       	movw	r8, r12
    7324:	57 01       	movw	r10, r14
    7326:	45 e2       	ldi	r20, 0x25	; 37
    7328:	84 1a       	sub	r8, r20
    732a:	4f e8       	ldi	r20, 0x8F	; 143
    732c:	94 0a       	sbc	r9, r20
    732e:	4f ed       	ldi	r20, 0xDF	; 223
    7330:	a4 0a       	sbc	r10, r20
    7332:	4b ed       	ldi	r20, 0xDB	; 219
    7334:	b4 0a       	sbc	r11, r20
    7336:	49 89       	ldd	r20, Y+17	; 0x11
    7338:	5a 89       	ldd	r21, Y+18	; 0x12
    733a:	6b 89       	ldd	r22, Y+19	; 0x13
    733c:	7c 89       	ldd	r23, Y+20	; 0x14
    733e:	48 0d       	add	r20, r8
    7340:	59 1d       	adc	r21, r9
    7342:	6a 1d       	adc	r22, r10
    7344:	7b 1d       	adc	r23, r11
    7346:	89 80       	ldd	r8, Y+1	; 0x01
    7348:	9a 80       	ldd	r9, Y+2	; 0x02
    734a:	ab 80       	ldd	r10, Y+3	; 0x03
    734c:	bc 80       	ldd	r11, Y+4	; 0x04
    734e:	88 26       	eor	r8, r24
    7350:	99 26       	eor	r9, r25
    7352:	aa 26       	eor	r10, r26
    7354:	bb 26       	eor	r11, r27
    7356:	80 22       	and	r8, r16
    7358:	91 22       	and	r9, r17
    735a:	a2 22       	and	r10, r18
    735c:	b3 22       	and	r11, r19
    735e:	c9 80       	ldd	r12, Y+1	; 0x01
    7360:	da 80       	ldd	r13, Y+2	; 0x02
    7362:	eb 80       	ldd	r14, Y+3	; 0x03
    7364:	fc 80       	ldd	r15, Y+4	; 0x04
    7366:	8c 24       	eor	r8, r12
    7368:	9d 24       	eor	r9, r13
    736a:	ae 24       	eor	r10, r14
    736c:	bf 24       	eor	r11, r15
    736e:	84 0e       	add	r8, r20
    7370:	95 1e       	adc	r9, r21
    7372:	a6 1e       	adc	r10, r22
    7374:	b7 1e       	adc	r11, r23
    7376:	b5 01       	movw	r22, r10
    7378:	a4 01       	movw	r20, r8
    737a:	03 2e       	mov	r0, r19
    737c:	3f e0       	ldi	r19, 0x0F	; 15
    737e:	76 95       	lsr	r23
    7380:	67 95       	ror	r22
    7382:	57 95       	ror	r21
    7384:	47 95       	ror	r20
    7386:	3a 95       	dec	r19
    7388:	d1 f7       	brne	.-12     	; 0x737e <md5_process+0x4be>
    738a:	30 2d       	mov	r19, r0
    738c:	07 2e       	mov	r0, r23
    738e:	71 e1       	ldi	r23, 0x11	; 17
    7390:	88 0c       	add	r8, r8
    7392:	99 1c       	adc	r9, r9
    7394:	aa 1c       	adc	r10, r10
    7396:	bb 1c       	adc	r11, r11
    7398:	7a 95       	dec	r23
    739a:	d1 f7       	brne	.-12     	; 0x7390 <md5_process+0x4d0>
    739c:	70 2d       	mov	r23, r0
    739e:	84 2a       	or	r8, r20
    73a0:	95 2a       	or	r9, r21
    73a2:	a6 2a       	or	r10, r22
    73a4:	b7 2a       	or	r11, r23
    73a6:	80 0e       	add	r8, r16
    73a8:	91 1e       	adc	r9, r17
    73aa:	a2 1e       	adc	r10, r18
    73ac:	b3 1e       	adc	r11, r19
    73ae:	42 e1       	ldi	r20, 0x12	; 18
    73b0:	c4 1a       	sub	r12, r20
    73b2:	41 e3       	ldi	r20, 0x31	; 49
    73b4:	d4 0a       	sbc	r13, r20
    73b6:	42 e4       	ldi	r20, 0x42	; 66
    73b8:	e4 0a       	sbc	r14, r20
    73ba:	4e e3       	ldi	r20, 0x3E	; 62
    73bc:	f4 0a       	sbc	r15, r20
    73be:	4d 89       	ldd	r20, Y+21	; 0x15
    73c0:	5e 89       	ldd	r21, Y+22	; 0x16
    73c2:	6f 89       	ldd	r22, Y+23	; 0x17
    73c4:	78 8d       	ldd	r23, Y+24	; 0x18
    73c6:	4c 0d       	add	r20, r12
    73c8:	5d 1d       	adc	r21, r13
    73ca:	6e 1d       	adc	r22, r14
    73cc:	7f 1d       	adc	r23, r15
    73ce:	68 01       	movw	r12, r16
    73d0:	79 01       	movw	r14, r18
    73d2:	c8 26       	eor	r12, r24
    73d4:	d9 26       	eor	r13, r25
    73d6:	ea 26       	eor	r14, r26
    73d8:	fb 26       	eor	r15, r27
    73da:	c8 20       	and	r12, r8
    73dc:	d9 20       	and	r13, r9
    73de:	ea 20       	and	r14, r10
    73e0:	fb 20       	and	r15, r11
    73e2:	c8 26       	eor	r12, r24
    73e4:	d9 26       	eor	r13, r25
    73e6:	ea 26       	eor	r14, r26
    73e8:	fb 26       	eor	r15, r27
    73ea:	c4 0e       	add	r12, r20
    73ec:	d5 1e       	adc	r13, r21
    73ee:	e6 1e       	adc	r14, r22
    73f0:	f7 1e       	adc	r15, r23
    73f2:	b7 01       	movw	r22, r14
    73f4:	a6 01       	movw	r20, r12
    73f6:	03 2e       	mov	r0, r19
    73f8:	3a e0       	ldi	r19, 0x0A	; 10
    73fa:	76 95       	lsr	r23
    73fc:	67 95       	ror	r22
    73fe:	57 95       	ror	r21
    7400:	47 95       	ror	r20
    7402:	3a 95       	dec	r19
    7404:	d1 f7       	brne	.-12     	; 0x73fa <md5_process+0x53a>
    7406:	30 2d       	mov	r19, r0
    7408:	0b 2e       	mov	r0, r27
    740a:	b6 e1       	ldi	r27, 0x16	; 22
    740c:	cc 0c       	add	r12, r12
    740e:	dd 1c       	adc	r13, r13
    7410:	ee 1c       	adc	r14, r14
    7412:	ff 1c       	adc	r15, r15
    7414:	ba 95       	dec	r27
    7416:	d1 f7       	brne	.-12     	; 0x740c <md5_process+0x54c>
    7418:	b0 2d       	mov	r27, r0
    741a:	c4 2a       	or	r12, r20
    741c:	d5 2a       	or	r13, r21
    741e:	e6 2a       	or	r14, r22
    7420:	f7 2a       	or	r15, r23
    7422:	c8 0c       	add	r12, r8
    7424:	d9 1c       	adc	r13, r9
    7426:	ea 1c       	adc	r14, r10
    7428:	fb 1c       	adc	r15, r11
    742a:	49 8d       	ldd	r20, Y+25	; 0x19
    742c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    742e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    7430:	7c 8d       	ldd	r23, Y+28	; 0x1c
    7432:	41 55       	subi	r20, 0x51	; 81
    7434:	50 4f       	sbci	r21, 0xF0	; 240
    7436:	63 48       	sbci	r22, 0x83	; 131
    7438:	7a 40       	sbci	r23, 0x0A	; 10
    743a:	84 0f       	add	r24, r20
    743c:	95 1f       	adc	r25, r21
    743e:	a6 1f       	adc	r26, r22
    7440:	b7 1f       	adc	r27, r23
    7442:	b5 01       	movw	r22, r10
    7444:	a4 01       	movw	r20, r8
    7446:	40 27       	eor	r20, r16
    7448:	51 27       	eor	r21, r17
    744a:	62 27       	eor	r22, r18
    744c:	73 27       	eor	r23, r19
    744e:	4c 21       	and	r20, r12
    7450:	5d 21       	and	r21, r13
    7452:	6e 21       	and	r22, r14
    7454:	7f 21       	and	r23, r15
    7456:	40 27       	eor	r20, r16
    7458:	51 27       	eor	r21, r17
    745a:	62 27       	eor	r22, r18
    745c:	73 27       	eor	r23, r19
    745e:	84 0f       	add	r24, r20
    7460:	95 1f       	adc	r25, r21
    7462:	a6 1f       	adc	r26, r22
    7464:	b7 1f       	adc	r27, r23
    7466:	2c 01       	movw	r4, r24
    7468:	3d 01       	movw	r6, r26
    746a:	44 0c       	add	r4, r4
    746c:	55 1c       	adc	r5, r5
    746e:	66 1c       	adc	r6, r6
    7470:	77 1c       	adc	r7, r7
    7472:	44 0c       	add	r4, r4
    7474:	55 1c       	adc	r5, r5
    7476:	66 1c       	adc	r6, r6
    7478:	77 1c       	adc	r7, r7
    747a:	44 0c       	add	r4, r4
    747c:	55 1c       	adc	r5, r5
    747e:	66 1c       	adc	r6, r6
    7480:	77 1c       	adc	r7, r7
    7482:	44 0c       	add	r4, r4
    7484:	55 1c       	adc	r5, r5
    7486:	66 1c       	adc	r6, r6
    7488:	77 1c       	adc	r7, r7
    748a:	44 0c       	add	r4, r4
    748c:	55 1c       	adc	r5, r5
    748e:	66 1c       	adc	r6, r6
    7490:	77 1c       	adc	r7, r7
    7492:	44 0c       	add	r4, r4
    7494:	55 1c       	adc	r5, r5
    7496:	66 1c       	adc	r6, r6
    7498:	77 1c       	adc	r7, r7
    749a:	44 0c       	add	r4, r4
    749c:	55 1c       	adc	r5, r5
    749e:	66 1c       	adc	r6, r6
    74a0:	77 1c       	adc	r7, r7
    74a2:	07 2e       	mov	r0, r23
    74a4:	79 e1       	ldi	r23, 0x19	; 25
    74a6:	b6 95       	lsr	r27
    74a8:	a7 95       	ror	r26
    74aa:	97 95       	ror	r25
    74ac:	87 95       	ror	r24
    74ae:	7a 95       	dec	r23
    74b0:	d1 f7       	brne	.-12     	; 0x74a6 <md5_process+0x5e6>
    74b2:	70 2d       	mov	r23, r0
    74b4:	84 29       	or	r24, r4
    74b6:	95 29       	or	r25, r5
    74b8:	a6 29       	or	r26, r6
    74ba:	b7 29       	or	r27, r7
    74bc:	8c 0d       	add	r24, r12
    74be:	9d 1d       	adc	r25, r13
    74c0:	ae 1d       	adc	r26, r14
    74c2:	bf 1d       	adc	r27, r15
    74c4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    74c6:	5e 8d       	ldd	r21, Y+30	; 0x1e
    74c8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    74ca:	78 a1       	ldd	r23, Y+32	; 0x20
    74cc:	46 5d       	subi	r20, 0xD6	; 214
    74ce:	59 43       	sbci	r21, 0x39	; 57
    74d0:	68 47       	sbci	r22, 0x78	; 120
    74d2:	78 4b       	sbci	r23, 0xB8	; 184
    74d4:	04 0f       	add	r16, r20
    74d6:	15 1f       	adc	r17, r21
    74d8:	26 1f       	adc	r18, r22
    74da:	37 1f       	adc	r19, r23
    74dc:	b7 01       	movw	r22, r14
    74de:	a6 01       	movw	r20, r12
    74e0:	48 25       	eor	r20, r8
    74e2:	59 25       	eor	r21, r9
    74e4:	6a 25       	eor	r22, r10
    74e6:	7b 25       	eor	r23, r11
    74e8:	48 23       	and	r20, r24
    74ea:	59 23       	and	r21, r25
    74ec:	6a 23       	and	r22, r26
    74ee:	7b 23       	and	r23, r27
    74f0:	48 25       	eor	r20, r8
    74f2:	59 25       	eor	r21, r9
    74f4:	6a 25       	eor	r22, r10
    74f6:	7b 25       	eor	r23, r11
    74f8:	04 0f       	add	r16, r20
    74fa:	15 1f       	adc	r17, r21
    74fc:	26 1f       	adc	r18, r22
    74fe:	37 1f       	adc	r19, r23
    7500:	b9 01       	movw	r22, r18
    7502:	a8 01       	movw	r20, r16
    7504:	03 2e       	mov	r0, r19
    7506:	3c e0       	ldi	r19, 0x0C	; 12
    7508:	44 0f       	add	r20, r20
    750a:	55 1f       	adc	r21, r21
    750c:	66 1f       	adc	r22, r22
    750e:	77 1f       	adc	r23, r23
    7510:	3a 95       	dec	r19
    7512:	d1 f7       	brne	.-12     	; 0x7508 <md5_process+0x648>
    7514:	30 2d       	mov	r19, r0
    7516:	0f 2e       	mov	r0, r31
    7518:	f4 e1       	ldi	r31, 0x14	; 20
    751a:	36 95       	lsr	r19
    751c:	27 95       	ror	r18
    751e:	17 95       	ror	r17
    7520:	07 95       	ror	r16
    7522:	fa 95       	dec	r31
    7524:	d1 f7       	brne	.-12     	; 0x751a <md5_process+0x65a>
    7526:	f0 2d       	mov	r31, r0
    7528:	04 2b       	or	r16, r20
    752a:	15 2b       	or	r17, r21
    752c:	26 2b       	or	r18, r22
    752e:	37 2b       	or	r19, r23
    7530:	08 0f       	add	r16, r24
    7532:	19 1f       	adc	r17, r25
    7534:	2a 1f       	adc	r18, r26
    7536:	3b 1f       	adc	r19, r27
    7538:	49 a1       	ldd	r20, Y+33	; 0x21
    753a:	5a a1       	ldd	r21, Y+34	; 0x22
    753c:	6b a1       	ldd	r22, Y+35	; 0x23
    753e:	7c a1       	ldd	r23, Y+36	; 0x24
    7540:	4d 5e       	subi	r20, 0xED	; 237
    7542:	59 4b       	sbci	r21, 0xB9	; 185
    7544:	6f 4c       	sbci	r22, 0xCF	; 207
    7546:	77 45       	sbci	r23, 0x57	; 87
    7548:	84 0e       	add	r8, r20
    754a:	95 1e       	adc	r9, r21
    754c:	a6 1e       	adc	r10, r22
    754e:	b7 1e       	adc	r11, r23
    7550:	ac 01       	movw	r20, r24
    7552:	bd 01       	movw	r22, r26
    7554:	4c 25       	eor	r20, r12
    7556:	5d 25       	eor	r21, r13
    7558:	6e 25       	eor	r22, r14
    755a:	7f 25       	eor	r23, r15
    755c:	40 23       	and	r20, r16
    755e:	51 23       	and	r21, r17
    7560:	62 23       	and	r22, r18
    7562:	73 23       	and	r23, r19
    7564:	4c 25       	eor	r20, r12
    7566:	5d 25       	eor	r21, r13
    7568:	6e 25       	eor	r22, r14
    756a:	7f 25       	eor	r23, r15
    756c:	84 0e       	add	r8, r20
    756e:	95 1e       	adc	r9, r21
    7570:	a6 1e       	adc	r10, r22
    7572:	b7 1e       	adc	r11, r23
    7574:	b5 01       	movw	r22, r10
    7576:	a4 01       	movw	r20, r8
    7578:	03 2e       	mov	r0, r19
    757a:	3f e0       	ldi	r19, 0x0F	; 15
    757c:	76 95       	lsr	r23
    757e:	67 95       	ror	r22
    7580:	57 95       	ror	r21
    7582:	47 95       	ror	r20
    7584:	3a 95       	dec	r19
    7586:	d1 f7       	brne	.-12     	; 0x757c <md5_process+0x6bc>
    7588:	30 2d       	mov	r19, r0
    758a:	07 2e       	mov	r0, r23
    758c:	71 e1       	ldi	r23, 0x11	; 17
    758e:	88 0c       	add	r8, r8
    7590:	99 1c       	adc	r9, r9
    7592:	aa 1c       	adc	r10, r10
    7594:	bb 1c       	adc	r11, r11
    7596:	7a 95       	dec	r23
    7598:	d1 f7       	brne	.-12     	; 0x758e <md5_process+0x6ce>
    759a:	70 2d       	mov	r23, r0
    759c:	84 2a       	or	r8, r20
    759e:	95 2a       	or	r9, r21
    75a0:	a6 2a       	or	r10, r22
    75a2:	b7 2a       	or	r11, r23
    75a4:	80 0e       	add	r8, r16
    75a6:	91 1e       	adc	r9, r17
    75a8:	a2 1e       	adc	r10, r18
    75aa:	b3 1e       	adc	r11, r19
    75ac:	4d a1       	ldd	r20, Y+37	; 0x25
    75ae:	5e a1       	ldd	r21, Y+38	; 0x26
    75b0:	6f a1       	ldd	r22, Y+39	; 0x27
    75b2:	78 a5       	ldd	r23, Y+40	; 0x28
    75b4:	4f 5f       	subi	r20, 0xFF	; 255
    75b6:	5a 46       	sbci	r21, 0x6A	; 106
    75b8:	69 4b       	sbci	r22, 0xB9	; 185
    75ba:	72 40       	sbci	r23, 0x02	; 2
    75bc:	c4 0e       	add	r12, r20
    75be:	d5 1e       	adc	r13, r21
    75c0:	e6 1e       	adc	r14, r22
    75c2:	f7 1e       	adc	r15, r23
    75c4:	b9 01       	movw	r22, r18
    75c6:	a8 01       	movw	r20, r16
    75c8:	48 27       	eor	r20, r24
    75ca:	59 27       	eor	r21, r25
    75cc:	6a 27       	eor	r22, r26
    75ce:	7b 27       	eor	r23, r27
    75d0:	48 21       	and	r20, r8
    75d2:	59 21       	and	r21, r9
    75d4:	6a 21       	and	r22, r10
    75d6:	7b 21       	and	r23, r11
    75d8:	48 27       	eor	r20, r24
    75da:	59 27       	eor	r21, r25
    75dc:	6a 27       	eor	r22, r26
    75de:	7b 27       	eor	r23, r27
    75e0:	c4 0e       	add	r12, r20
    75e2:	d5 1e       	adc	r13, r21
    75e4:	e6 1e       	adc	r14, r22
    75e6:	f7 1e       	adc	r15, r23
    75e8:	b7 01       	movw	r22, r14
    75ea:	a6 01       	movw	r20, r12
    75ec:	03 2e       	mov	r0, r19
    75ee:	3a e0       	ldi	r19, 0x0A	; 10
    75f0:	76 95       	lsr	r23
    75f2:	67 95       	ror	r22
    75f4:	57 95       	ror	r21
    75f6:	47 95       	ror	r20
    75f8:	3a 95       	dec	r19
    75fa:	d1 f7       	brne	.-12     	; 0x75f0 <md5_process+0x730>
    75fc:	30 2d       	mov	r19, r0
    75fe:	0b 2e       	mov	r0, r27
    7600:	b6 e1       	ldi	r27, 0x16	; 22
    7602:	cc 0c       	add	r12, r12
    7604:	dd 1c       	adc	r13, r13
    7606:	ee 1c       	adc	r14, r14
    7608:	ff 1c       	adc	r15, r15
    760a:	ba 95       	dec	r27
    760c:	d1 f7       	brne	.-12     	; 0x7602 <md5_process+0x742>
    760e:	b0 2d       	mov	r27, r0
    7610:	c4 2a       	or	r12, r20
    7612:	d5 2a       	or	r13, r21
    7614:	e6 2a       	or	r14, r22
    7616:	f7 2a       	or	r15, r23
    7618:	c8 0c       	add	r12, r8
    761a:	d9 1c       	adc	r13, r9
    761c:	ea 1c       	adc	r14, r10
    761e:	fb 1c       	adc	r15, r11
    7620:	49 a5       	ldd	r20, Y+41	; 0x29
    7622:	5a a5       	ldd	r21, Y+42	; 0x2a
    7624:	6b a5       	ldd	r22, Y+43	; 0x2b
    7626:	7c a5       	ldd	r23, Y+44	; 0x2c
    7628:	48 52       	subi	r20, 0x28	; 40
    762a:	57 46       	sbci	r21, 0x67	; 103
    762c:	6f 47       	sbci	r22, 0x7F	; 127
    762e:	76 49       	sbci	r23, 0x96	; 150
    7630:	84 0f       	add	r24, r20
    7632:	95 1f       	adc	r25, r21
    7634:	a6 1f       	adc	r26, r22
    7636:	b7 1f       	adc	r27, r23
    7638:	b5 01       	movw	r22, r10
    763a:	a4 01       	movw	r20, r8
    763c:	40 27       	eor	r20, r16
    763e:	51 27       	eor	r21, r17
    7640:	62 27       	eor	r22, r18
    7642:	73 27       	eor	r23, r19
    7644:	4c 21       	and	r20, r12
    7646:	5d 21       	and	r21, r13
    7648:	6e 21       	and	r22, r14
    764a:	7f 21       	and	r23, r15
    764c:	2a 01       	movw	r4, r20
    764e:	3b 01       	movw	r6, r22
    7650:	40 26       	eor	r4, r16
    7652:	51 26       	eor	r5, r17
    7654:	62 26       	eor	r6, r18
    7656:	73 26       	eor	r7, r19
    7658:	ac 01       	movw	r20, r24
    765a:	bd 01       	movw	r22, r26
    765c:	44 0d       	add	r20, r4
    765e:	55 1d       	adc	r21, r5
    7660:	66 1d       	adc	r22, r6
    7662:	77 1d       	adc	r23, r7
    7664:	2a 01       	movw	r4, r20
    7666:	3b 01       	movw	r6, r22
    7668:	44 0c       	add	r4, r4
    766a:	55 1c       	adc	r5, r5
    766c:	66 1c       	adc	r6, r6
    766e:	77 1c       	adc	r7, r7
    7670:	44 0c       	add	r4, r4
    7672:	55 1c       	adc	r5, r5
    7674:	66 1c       	adc	r6, r6
    7676:	77 1c       	adc	r7, r7
    7678:	44 0c       	add	r4, r4
    767a:	55 1c       	adc	r5, r5
    767c:	66 1c       	adc	r6, r6
    767e:	77 1c       	adc	r7, r7
    7680:	44 0c       	add	r4, r4
    7682:	55 1c       	adc	r5, r5
    7684:	66 1c       	adc	r6, r6
    7686:	77 1c       	adc	r7, r7
    7688:	44 0c       	add	r4, r4
    768a:	55 1c       	adc	r5, r5
    768c:	66 1c       	adc	r6, r6
    768e:	77 1c       	adc	r7, r7
    7690:	44 0c       	add	r4, r4
    7692:	55 1c       	adc	r5, r5
    7694:	66 1c       	adc	r6, r6
    7696:	77 1c       	adc	r7, r7
    7698:	44 0c       	add	r4, r4
    769a:	55 1c       	adc	r5, r5
    769c:	66 1c       	adc	r6, r6
    769e:	77 1c       	adc	r7, r7
    76a0:	03 2e       	mov	r0, r19
    76a2:	39 e1       	ldi	r19, 0x19	; 25
    76a4:	76 95       	lsr	r23
    76a6:	67 95       	ror	r22
    76a8:	57 95       	ror	r21
    76aa:	47 95       	ror	r20
    76ac:	3a 95       	dec	r19
    76ae:	d1 f7       	brne	.-12     	; 0x76a4 <md5_process+0x7e4>
    76b0:	30 2d       	mov	r19, r0
    76b2:	44 29       	or	r20, r4
    76b4:	55 29       	or	r21, r5
    76b6:	66 29       	or	r22, r6
    76b8:	77 29       	or	r23, r7
    76ba:	4c 0d       	add	r20, r12
    76bc:	5d 1d       	adc	r21, r13
    76be:	6e 1d       	adc	r22, r14
    76c0:	7f 1d       	adc	r23, r15
    76c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    76c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    76c6:	af a5       	ldd	r26, Y+47	; 0x2f
    76c8:	b8 a9       	ldd	r27, Y+48	; 0x30
    76ca:	81 55       	subi	r24, 0x51	; 81
    76cc:	98 40       	sbci	r25, 0x08	; 8
    76ce:	ab 4b       	sbci	r26, 0xBB	; 187
    76d0:	b4 47       	sbci	r27, 0x74	; 116
    76d2:	08 0f       	add	r16, r24
    76d4:	19 1f       	adc	r17, r25
    76d6:	2a 1f       	adc	r18, r26
    76d8:	3b 1f       	adc	r19, r27
    76da:	d7 01       	movw	r26, r14
    76dc:	c6 01       	movw	r24, r12
    76de:	88 25       	eor	r24, r8
    76e0:	99 25       	eor	r25, r9
    76e2:	aa 25       	eor	r26, r10
    76e4:	bb 25       	eor	r27, r11
    76e6:	84 23       	and	r24, r20
    76e8:	95 23       	and	r25, r21
    76ea:	a6 23       	and	r26, r22
    76ec:	b7 23       	and	r27, r23
    76ee:	88 25       	eor	r24, r8
    76f0:	99 25       	eor	r25, r9
    76f2:	aa 25       	eor	r26, r10
    76f4:	bb 25       	eor	r27, r11
    76f6:	08 0f       	add	r16, r24
    76f8:	19 1f       	adc	r17, r25
    76fa:	2a 1f       	adc	r18, r26
    76fc:	3b 1f       	adc	r19, r27
    76fe:	d9 01       	movw	r26, r18
    7700:	c8 01       	movw	r24, r16
    7702:	07 2e       	mov	r0, r23
    7704:	7c e0       	ldi	r23, 0x0C	; 12
    7706:	88 0f       	add	r24, r24
    7708:	99 1f       	adc	r25, r25
    770a:	aa 1f       	adc	r26, r26
    770c:	bb 1f       	adc	r27, r27
    770e:	7a 95       	dec	r23
    7710:	d1 f7       	brne	.-12     	; 0x7706 <md5_process+0x846>
    7712:	70 2d       	mov	r23, r0
    7714:	0f 2e       	mov	r0, r31
    7716:	f4 e1       	ldi	r31, 0x14	; 20
    7718:	36 95       	lsr	r19
    771a:	27 95       	ror	r18
    771c:	17 95       	ror	r17
    771e:	07 95       	ror	r16
    7720:	fa 95       	dec	r31
    7722:	d1 f7       	brne	.-12     	; 0x7718 <md5_process+0x858>
    7724:	f0 2d       	mov	r31, r0
    7726:	08 2b       	or	r16, r24
    7728:	19 2b       	or	r17, r25
    772a:	2a 2b       	or	r18, r26
    772c:	3b 2b       	or	r19, r27
    772e:	04 0f       	add	r16, r20
    7730:	15 1f       	adc	r17, r21
    7732:	26 1f       	adc	r18, r22
    7734:	37 1f       	adc	r19, r23
    7736:	89 a9       	ldd	r24, Y+49	; 0x31
    7738:	9a a9       	ldd	r25, Y+50	; 0x32
    773a:	ab a9       	ldd	r26, Y+51	; 0x33
    773c:	bc a9       	ldd	r27, Y+52	; 0x34
    773e:	8f 54       	subi	r24, 0x4F	; 79
    7740:	94 4a       	sbci	r25, 0xA4	; 164
    7742:	a1 09       	sbc	r26, r1
    7744:	b1 09       	sbc	r27, r1
    7746:	88 0e       	add	r8, r24
    7748:	99 1e       	adc	r9, r25
    774a:	aa 1e       	adc	r10, r26
    774c:	bb 1e       	adc	r11, r27
    774e:	db 01       	movw	r26, r22
    7750:	ca 01       	movw	r24, r20
    7752:	8c 25       	eor	r24, r12
    7754:	9d 25       	eor	r25, r13
    7756:	ae 25       	eor	r26, r14
    7758:	bf 25       	eor	r27, r15
    775a:	80 23       	and	r24, r16
    775c:	91 23       	and	r25, r17
    775e:	a2 23       	and	r26, r18
    7760:	b3 23       	and	r27, r19
    7762:	8c 25       	eor	r24, r12
    7764:	9d 25       	eor	r25, r13
    7766:	ae 25       	eor	r26, r14
    7768:	bf 25       	eor	r27, r15
    776a:	88 0e       	add	r8, r24
    776c:	99 1e       	adc	r9, r25
    776e:	aa 1e       	adc	r10, r26
    7770:	bb 1e       	adc	r11, r27
    7772:	d5 01       	movw	r26, r10
    7774:	c4 01       	movw	r24, r8
    7776:	07 2e       	mov	r0, r23
    7778:	7f e0       	ldi	r23, 0x0F	; 15
    777a:	b6 95       	lsr	r27
    777c:	a7 95       	ror	r26
    777e:	97 95       	ror	r25
    7780:	87 95       	ror	r24
    7782:	7a 95       	dec	r23
    7784:	d1 f7       	brne	.-12     	; 0x777a <md5_process+0x8ba>
    7786:	70 2d       	mov	r23, r0
    7788:	07 2e       	mov	r0, r23
    778a:	71 e1       	ldi	r23, 0x11	; 17
    778c:	88 0c       	add	r8, r8
    778e:	99 1c       	adc	r9, r9
    7790:	aa 1c       	adc	r10, r10
    7792:	bb 1c       	adc	r11, r11
    7794:	7a 95       	dec	r23
    7796:	d1 f7       	brne	.-12     	; 0x778c <md5_process+0x8cc>
    7798:	70 2d       	mov	r23, r0
    779a:	88 2a       	or	r8, r24
    779c:	99 2a       	or	r9, r25
    779e:	aa 2a       	or	r10, r26
    77a0:	bb 2a       	or	r11, r27
    77a2:	80 0e       	add	r8, r16
    77a4:	91 1e       	adc	r9, r17
    77a6:	a2 1e       	adc	r10, r18
    77a8:	b3 1e       	adc	r11, r19
    77aa:	8d a9       	ldd	r24, Y+53	; 0x35
    77ac:	9e a9       	ldd	r25, Y+54	; 0x36
    77ae:	af a9       	ldd	r26, Y+55	; 0x37
    77b0:	b8 ad       	ldd	r27, Y+56	; 0x38
    77b2:	82 54       	subi	r24, 0x42	; 66
    77b4:	98 42       	sbci	r25, 0x28	; 40
    77b6:	a3 4a       	sbci	r26, 0xA3	; 163
    77b8:	b6 47       	sbci	r27, 0x76	; 118
    77ba:	c8 0e       	add	r12, r24
    77bc:	d9 1e       	adc	r13, r25
    77be:	ea 1e       	adc	r14, r26
    77c0:	fb 1e       	adc	r15, r27
    77c2:	d9 01       	movw	r26, r18
    77c4:	c8 01       	movw	r24, r16
    77c6:	84 27       	eor	r24, r20
    77c8:	95 27       	eor	r25, r21
    77ca:	a6 27       	eor	r26, r22
    77cc:	b7 27       	eor	r27, r23
    77ce:	88 21       	and	r24, r8
    77d0:	99 21       	and	r25, r9
    77d2:	aa 21       	and	r26, r10
    77d4:	bb 21       	and	r27, r11
    77d6:	2c 01       	movw	r4, r24
    77d8:	3d 01       	movw	r6, r26
    77da:	44 26       	eor	r4, r20
    77dc:	55 26       	eor	r5, r21
    77de:	66 26       	eor	r6, r22
    77e0:	77 26       	eor	r7, r23
    77e2:	d7 01       	movw	r26, r14
    77e4:	c6 01       	movw	r24, r12
    77e6:	84 0d       	add	r24, r4
    77e8:	95 1d       	adc	r25, r5
    77ea:	a6 1d       	adc	r26, r6
    77ec:	b7 1d       	adc	r27, r7
    77ee:	2c 01       	movw	r4, r24
    77f0:	3d 01       	movw	r6, r26
    77f2:	03 2e       	mov	r0, r19
    77f4:	3a e0       	ldi	r19, 0x0A	; 10
    77f6:	76 94       	lsr	r7
    77f8:	67 94       	ror	r6
    77fa:	57 94       	ror	r5
    77fc:	47 94       	ror	r4
    77fe:	3a 95       	dec	r19
    7800:	d1 f7       	brne	.-12     	; 0x77f6 <md5_process+0x936>
    7802:	30 2d       	mov	r19, r0
    7804:	07 2e       	mov	r0, r23
    7806:	76 e1       	ldi	r23, 0x16	; 22
    7808:	88 0f       	add	r24, r24
    780a:	99 1f       	adc	r25, r25
    780c:	aa 1f       	adc	r26, r26
    780e:	bb 1f       	adc	r27, r27
    7810:	7a 95       	dec	r23
    7812:	d1 f7       	brne	.-12     	; 0x7808 <md5_process+0x948>
    7814:	70 2d       	mov	r23, r0
    7816:	84 29       	or	r24, r4
    7818:	95 29       	or	r25, r5
    781a:	a6 29       	or	r26, r6
    781c:	b7 29       	or	r27, r7
    781e:	88 0d       	add	r24, r8
    7820:	99 1d       	adc	r25, r9
    7822:	aa 1d       	adc	r26, r10
    7824:	bb 1d       	adc	r27, r11
    7826:	c9 ac       	ldd	r12, Y+57	; 0x39
    7828:	da ac       	ldd	r13, Y+58	; 0x3a
    782a:	eb ac       	ldd	r14, Y+59	; 0x3b
    782c:	fc ac       	ldd	r15, Y+60	; 0x3c
    782e:	ee ed       	ldi	r30, 0xDE	; 222
    7830:	ce 1a       	sub	r12, r30
    7832:	ee ee       	ldi	r30, 0xEE	; 238
    7834:	de 0a       	sbc	r13, r30
    7836:	ef e6       	ldi	r30, 0x6F	; 111
    7838:	ee 0a       	sbc	r14, r30
    783a:	e4 e9       	ldi	r30, 0x94	; 148
    783c:	fe 0a       	sbc	r15, r30
    783e:	4c 0d       	add	r20, r12
    7840:	5d 1d       	adc	r21, r13
    7842:	6e 1d       	adc	r22, r14
    7844:	7f 1d       	adc	r23, r15
    7846:	75 01       	movw	r14, r10
    7848:	64 01       	movw	r12, r8
    784a:	c0 26       	eor	r12, r16
    784c:	d1 26       	eor	r13, r17
    784e:	e2 26       	eor	r14, r18
    7850:	f3 26       	eor	r15, r19
    7852:	c8 22       	and	r12, r24
    7854:	d9 22       	and	r13, r25
    7856:	ea 22       	and	r14, r26
    7858:	fb 22       	and	r15, r27
    785a:	c0 26       	eor	r12, r16
    785c:	d1 26       	eor	r13, r17
    785e:	e2 26       	eor	r14, r18
    7860:	f3 26       	eor	r15, r19
    7862:	4c 0d       	add	r20, r12
    7864:	5d 1d       	adc	r21, r13
    7866:	6e 1d       	adc	r22, r14
    7868:	7f 1d       	adc	r23, r15
    786a:	6a 01       	movw	r12, r20
    786c:	7b 01       	movw	r14, r22
    786e:	cc 0c       	add	r12, r12
    7870:	dd 1c       	adc	r13, r13
    7872:	ee 1c       	adc	r14, r14
    7874:	ff 1c       	adc	r15, r15
    7876:	cc 0c       	add	r12, r12
    7878:	dd 1c       	adc	r13, r13
    787a:	ee 1c       	adc	r14, r14
    787c:	ff 1c       	adc	r15, r15
    787e:	cc 0c       	add	r12, r12
    7880:	dd 1c       	adc	r13, r13
    7882:	ee 1c       	adc	r14, r14
    7884:	ff 1c       	adc	r15, r15
    7886:	cc 0c       	add	r12, r12
    7888:	dd 1c       	adc	r13, r13
    788a:	ee 1c       	adc	r14, r14
    788c:	ff 1c       	adc	r15, r15
    788e:	cc 0c       	add	r12, r12
    7890:	dd 1c       	adc	r13, r13
    7892:	ee 1c       	adc	r14, r14
    7894:	ff 1c       	adc	r15, r15
    7896:	cc 0c       	add	r12, r12
    7898:	dd 1c       	adc	r13, r13
    789a:	ee 1c       	adc	r14, r14
    789c:	ff 1c       	adc	r15, r15
    789e:	cc 0c       	add	r12, r12
    78a0:	dd 1c       	adc	r13, r13
    78a2:	ee 1c       	adc	r14, r14
    78a4:	ff 1c       	adc	r15, r15
    78a6:	03 2e       	mov	r0, r19
    78a8:	39 e1       	ldi	r19, 0x19	; 25
    78aa:	76 95       	lsr	r23
    78ac:	67 95       	ror	r22
    78ae:	57 95       	ror	r21
    78b0:	47 95       	ror	r20
    78b2:	3a 95       	dec	r19
    78b4:	d1 f7       	brne	.-12     	; 0x78aa <md5_process+0x9ea>
    78b6:	30 2d       	mov	r19, r0
    78b8:	4c 29       	or	r20, r12
    78ba:	5d 29       	or	r21, r13
    78bc:	6e 29       	or	r22, r14
    78be:	7f 29       	or	r23, r15
    78c0:	48 0f       	add	r20, r24
    78c2:	59 1f       	adc	r21, r25
    78c4:	6a 1f       	adc	r22, r26
    78c6:	7b 1f       	adc	r23, r27
    78c8:	21 96       	adiw	r28, 0x01	; 1
    78ca:	cc ac       	ldd	r12, Y+60	; 0x3c
    78cc:	dd ac       	ldd	r13, Y+61	; 0x3d
    78ce:	ee ac       	ldd	r14, Y+62	; 0x3e
    78d0:	ff ac       	ldd	r15, Y+63	; 0x3f
    78d2:	21 97       	sbiw	r28, 0x01	; 1
    78d4:	fd e6       	ldi	r31, 0x6D	; 109
    78d6:	cf 1a       	sub	r12, r31
    78d8:	fe e8       	ldi	r31, 0x8E	; 142
    78da:	df 0a       	sbc	r13, r31
    78dc:	f7 e6       	ldi	r31, 0x67	; 103
    78de:	ef 0a       	sbc	r14, r31
    78e0:	f2 e0       	ldi	r31, 0x02	; 2
    78e2:	ff 0a       	sbc	r15, r31
    78e4:	0c 0d       	add	r16, r12
    78e6:	1d 1d       	adc	r17, r13
    78e8:	2e 1d       	adc	r18, r14
    78ea:	3f 1d       	adc	r19, r15
    78ec:	6c 01       	movw	r12, r24
    78ee:	7d 01       	movw	r14, r26
    78f0:	c8 24       	eor	r12, r8
    78f2:	d9 24       	eor	r13, r9
    78f4:	ea 24       	eor	r14, r10
    78f6:	fb 24       	eor	r15, r11
    78f8:	c4 22       	and	r12, r20
    78fa:	d5 22       	and	r13, r21
    78fc:	e6 22       	and	r14, r22
    78fe:	f7 22       	and	r15, r23
    7900:	c8 24       	eor	r12, r8
    7902:	d9 24       	eor	r13, r9
    7904:	ea 24       	eor	r14, r10
    7906:	fb 24       	eor	r15, r11
    7908:	0c 0d       	add	r16, r12
    790a:	1d 1d       	adc	r17, r13
    790c:	2e 1d       	adc	r18, r14
    790e:	3f 1d       	adc	r19, r15
    7910:	68 01       	movw	r12, r16
    7912:	79 01       	movw	r14, r18
    7914:	0b 2e       	mov	r0, r27
    7916:	bc e0       	ldi	r27, 0x0C	; 12
    7918:	cc 0c       	add	r12, r12
    791a:	dd 1c       	adc	r13, r13
    791c:	ee 1c       	adc	r14, r14
    791e:	ff 1c       	adc	r15, r15
    7920:	ba 95       	dec	r27
    7922:	d1 f7       	brne	.-12     	; 0x7918 <md5_process+0xa58>
    7924:	b0 2d       	mov	r27, r0
    7926:	0f 2e       	mov	r0, r31
    7928:	f4 e1       	ldi	r31, 0x14	; 20
    792a:	36 95       	lsr	r19
    792c:	27 95       	ror	r18
    792e:	17 95       	ror	r17
    7930:	07 95       	ror	r16
    7932:	fa 95       	dec	r31
    7934:	d1 f7       	brne	.-12     	; 0x792a <md5_process+0xa6a>
    7936:	f0 2d       	mov	r31, r0
    7938:	0c 29       	or	r16, r12
    793a:	1d 29       	or	r17, r13
    793c:	2e 29       	or	r18, r14
    793e:	3f 29       	or	r19, r15
    7940:	04 0f       	add	r16, r20
    7942:	15 1f       	adc	r17, r21
    7944:	26 1f       	adc	r18, r22
    7946:	37 1f       	adc	r19, r23
    7948:	25 96       	adiw	r28, 0x05	; 5
    794a:	cc ac       	ldd	r12, Y+60	; 0x3c
    794c:	dd ac       	ldd	r13, Y+61	; 0x3d
    794e:	ee ac       	ldd	r14, Y+62	; 0x3e
    7950:	ff ac       	ldd	r15, Y+63	; 0x3f
    7952:	25 97       	sbiw	r28, 0x05	; 5
    7954:	e2 e7       	ldi	r30, 0x72	; 114
    7956:	ce 1a       	sub	r12, r30
    7958:	ec eb       	ldi	r30, 0xBC	; 188
    795a:	de 0a       	sbc	r13, r30
    795c:	e6 e8       	ldi	r30, 0x86	; 134
    795e:	ee 0a       	sbc	r14, r30
    7960:	e9 e5       	ldi	r30, 0x59	; 89
    7962:	fe 0a       	sbc	r15, r30
    7964:	8c 0c       	add	r8, r12
    7966:	9d 1c       	adc	r9, r13
    7968:	ae 1c       	adc	r10, r14
    796a:	bf 1c       	adc	r11, r15
    796c:	6a 01       	movw	r12, r20
    796e:	7b 01       	movw	r14, r22
    7970:	c8 26       	eor	r12, r24
    7972:	d9 26       	eor	r13, r25
    7974:	ea 26       	eor	r14, r26
    7976:	fb 26       	eor	r15, r27
    7978:	c0 22       	and	r12, r16
    797a:	d1 22       	and	r13, r17
    797c:	e2 22       	and	r14, r18
    797e:	f3 22       	and	r15, r19
    7980:	c8 26       	eor	r12, r24
    7982:	d9 26       	eor	r13, r25
    7984:	ea 26       	eor	r14, r26
    7986:	fb 26       	eor	r15, r27
    7988:	8c 0c       	add	r8, r12
    798a:	9d 1c       	adc	r9, r13
    798c:	ae 1c       	adc	r10, r14
    798e:	bf 1c       	adc	r11, r15
    7990:	75 01       	movw	r14, r10
    7992:	64 01       	movw	r12, r8
    7994:	0b 2e       	mov	r0, r27
    7996:	bf e0       	ldi	r27, 0x0F	; 15
    7998:	f6 94       	lsr	r15
    799a:	e7 94       	ror	r14
    799c:	d7 94       	ror	r13
    799e:	c7 94       	ror	r12
    79a0:	ba 95       	dec	r27
    79a2:	d1 f7       	brne	.-12     	; 0x7998 <md5_process+0xad8>
    79a4:	b0 2d       	mov	r27, r0
    79a6:	07 2e       	mov	r0, r23
    79a8:	71 e1       	ldi	r23, 0x11	; 17
    79aa:	88 0c       	add	r8, r8
    79ac:	99 1c       	adc	r9, r9
    79ae:	aa 1c       	adc	r10, r10
    79b0:	bb 1c       	adc	r11, r11
    79b2:	7a 95       	dec	r23
    79b4:	d1 f7       	brne	.-12     	; 0x79aa <md5_process+0xaea>
    79b6:	70 2d       	mov	r23, r0
    79b8:	8c 28       	or	r8, r12
    79ba:	9d 28       	or	r9, r13
    79bc:	ae 28       	or	r10, r14
    79be:	bf 28       	or	r11, r15
    79c0:	80 0e       	add	r8, r16
    79c2:	91 1e       	adc	r9, r17
    79c4:	a2 1e       	adc	r10, r18
    79c6:	b3 1e       	adc	r11, r19
    79c8:	29 96       	adiw	r28, 0x09	; 9
    79ca:	cc ac       	ldd	r12, Y+60	; 0x3c
    79cc:	dd ac       	ldd	r13, Y+61	; 0x3d
    79ce:	ee ac       	ldd	r14, Y+62	; 0x3e
    79d0:	ff ac       	ldd	r15, Y+63	; 0x3f
    79d2:	29 97       	sbiw	r28, 0x09	; 9
    79d4:	ff ed       	ldi	r31, 0xDF	; 223
    79d6:	cf 1a       	sub	r12, r31
    79d8:	f7 ef       	ldi	r31, 0xF7	; 247
    79da:	df 0a       	sbc	r13, r31
    79dc:	fb e4       	ldi	r31, 0x4B	; 75
    79de:	ef 0a       	sbc	r14, r31
    79e0:	f6 eb       	ldi	r31, 0xB6	; 182
    79e2:	ff 0a       	sbc	r15, r31
    79e4:	8c 0d       	add	r24, r12
    79e6:	9d 1d       	adc	r25, r13
    79e8:	ae 1d       	adc	r26, r14
    79ea:	bf 1d       	adc	r27, r15
    79ec:	68 01       	movw	r12, r16
    79ee:	79 01       	movw	r14, r18
    79f0:	c4 26       	eor	r12, r20
    79f2:	d5 26       	eor	r13, r21
    79f4:	e6 26       	eor	r14, r22
    79f6:	f7 26       	eor	r15, r23
    79f8:	c8 20       	and	r12, r8
    79fa:	d9 20       	and	r13, r9
    79fc:	ea 20       	and	r14, r10
    79fe:	fb 20       	and	r15, r11
    7a00:	c4 26       	eor	r12, r20
    7a02:	d5 26       	eor	r13, r21
    7a04:	e6 26       	eor	r14, r22
    7a06:	f7 26       	eor	r15, r23
    7a08:	8c 0d       	add	r24, r12
    7a0a:	9d 1d       	adc	r25, r13
    7a0c:	ae 1d       	adc	r26, r14
    7a0e:	bf 1d       	adc	r27, r15
    7a10:	6c 01       	movw	r12, r24
    7a12:	7d 01       	movw	r14, r26
    7a14:	0b 2e       	mov	r0, r27
    7a16:	ba e0       	ldi	r27, 0x0A	; 10
    7a18:	f6 94       	lsr	r15
    7a1a:	e7 94       	ror	r14
    7a1c:	d7 94       	ror	r13
    7a1e:	c7 94       	ror	r12
    7a20:	ba 95       	dec	r27
    7a22:	d1 f7       	brne	.-12     	; 0x7a18 <md5_process+0xb58>
    7a24:	b0 2d       	mov	r27, r0
    7a26:	07 2e       	mov	r0, r23
    7a28:	76 e1       	ldi	r23, 0x16	; 22
    7a2a:	88 0f       	add	r24, r24
    7a2c:	99 1f       	adc	r25, r25
    7a2e:	aa 1f       	adc	r26, r26
    7a30:	bb 1f       	adc	r27, r27
    7a32:	7a 95       	dec	r23
    7a34:	d1 f7       	brne	.-12     	; 0x7a2a <md5_process+0xb6a>
    7a36:	70 2d       	mov	r23, r0
    7a38:	8c 29       	or	r24, r12
    7a3a:	9d 29       	or	r25, r13
    7a3c:	ae 29       	or	r26, r14
    7a3e:	bf 29       	or	r27, r15
    7a40:	88 0d       	add	r24, r8
    7a42:	99 1d       	adc	r25, r9
    7a44:	aa 1d       	adc	r26, r10
    7a46:	bb 1d       	adc	r27, r11
    7a48:	cd 84       	ldd	r12, Y+13	; 0x0d
    7a4a:	de 84       	ldd	r13, Y+14	; 0x0e
    7a4c:	ef 84       	ldd	r14, Y+15	; 0x0f
    7a4e:	f8 88       	ldd	r15, Y+16	; 0x10
    7a50:	ee e9       	ldi	r30, 0x9E	; 158
    7a52:	ce 1a       	sub	r12, r30
    7a54:	ea ed       	ldi	r30, 0xDA	; 218
    7a56:	de 0a       	sbc	r13, r30
    7a58:	e1 ee       	ldi	r30, 0xE1	; 225
    7a5a:	ee 0a       	sbc	r14, r30
    7a5c:	e9 e0       	ldi	r30, 0x09	; 9
    7a5e:	fe 0a       	sbc	r15, r30
    7a60:	4c 0d       	add	r20, r12
    7a62:	5d 1d       	adc	r21, r13
    7a64:	6e 1d       	adc	r22, r14
    7a66:	7f 1d       	adc	r23, r15
    7a68:	6c 01       	movw	r12, r24
    7a6a:	7d 01       	movw	r14, r26
    7a6c:	c8 24       	eor	r12, r8
    7a6e:	d9 24       	eor	r13, r9
    7a70:	ea 24       	eor	r14, r10
    7a72:	fb 24       	eor	r15, r11
    7a74:	c0 22       	and	r12, r16
    7a76:	d1 22       	and	r13, r17
    7a78:	e2 22       	and	r14, r18
    7a7a:	f3 22       	and	r15, r19
    7a7c:	c8 24       	eor	r12, r8
    7a7e:	d9 24       	eor	r13, r9
    7a80:	ea 24       	eor	r14, r10
    7a82:	fb 24       	eor	r15, r11
    7a84:	4c 0d       	add	r20, r12
    7a86:	5d 1d       	adc	r21, r13
    7a88:	6e 1d       	adc	r22, r14
    7a8a:	7f 1d       	adc	r23, r15
    7a8c:	6a 01       	movw	r12, r20
    7a8e:	7b 01       	movw	r14, r22
    7a90:	cc 0c       	add	r12, r12
    7a92:	dd 1c       	adc	r13, r13
    7a94:	ee 1c       	adc	r14, r14
    7a96:	ff 1c       	adc	r15, r15
    7a98:	cc 0c       	add	r12, r12
    7a9a:	dd 1c       	adc	r13, r13
    7a9c:	ee 1c       	adc	r14, r14
    7a9e:	ff 1c       	adc	r15, r15
    7aa0:	cc 0c       	add	r12, r12
    7aa2:	dd 1c       	adc	r13, r13
    7aa4:	ee 1c       	adc	r14, r14
    7aa6:	ff 1c       	adc	r15, r15
    7aa8:	cc 0c       	add	r12, r12
    7aaa:	dd 1c       	adc	r13, r13
    7aac:	ee 1c       	adc	r14, r14
    7aae:	ff 1c       	adc	r15, r15
    7ab0:	cc 0c       	add	r12, r12
    7ab2:	dd 1c       	adc	r13, r13
    7ab4:	ee 1c       	adc	r14, r14
    7ab6:	ff 1c       	adc	r15, r15
    7ab8:	03 2e       	mov	r0, r19
    7aba:	3b e1       	ldi	r19, 0x1B	; 27
    7abc:	76 95       	lsr	r23
    7abe:	67 95       	ror	r22
    7ac0:	57 95       	ror	r21
    7ac2:	47 95       	ror	r20
    7ac4:	3a 95       	dec	r19
    7ac6:	d1 f7       	brne	.-12     	; 0x7abc <md5_process+0xbfc>
    7ac8:	30 2d       	mov	r19, r0
    7aca:	4c 29       	or	r20, r12
    7acc:	5d 29       	or	r21, r13
    7ace:	6e 29       	or	r22, r14
    7ad0:	7f 29       	or	r23, r15
    7ad2:	48 0f       	add	r20, r24
    7ad4:	59 1f       	adc	r21, r25
    7ad6:	6a 1f       	adc	r22, r26
    7ad8:	7b 1f       	adc	r23, r27
    7ada:	c9 a0       	ldd	r12, Y+33	; 0x21
    7adc:	da a0       	ldd	r13, Y+34	; 0x22
    7ade:	eb a0       	ldd	r14, Y+35	; 0x23
    7ae0:	fc a0       	ldd	r15, Y+36	; 0x24
    7ae2:	f0 ec       	ldi	r31, 0xC0	; 192
    7ae4:	cf 1a       	sub	r12, r31
    7ae6:	fc e4       	ldi	r31, 0x4C	; 76
    7ae8:	df 0a       	sbc	r13, r31
    7aea:	ff eb       	ldi	r31, 0xBF	; 191
    7aec:	ef 0a       	sbc	r14, r31
    7aee:	ff e3       	ldi	r31, 0x3F	; 63
    7af0:	ff 0a       	sbc	r15, r31
    7af2:	0c 0d       	add	r16, r12
    7af4:	1d 1d       	adc	r17, r13
    7af6:	2e 1d       	adc	r18, r14
    7af8:	3f 1d       	adc	r19, r15
    7afa:	6a 01       	movw	r12, r20
    7afc:	7b 01       	movw	r14, r22
    7afe:	c8 26       	eor	r12, r24
    7b00:	d9 26       	eor	r13, r25
    7b02:	ea 26       	eor	r14, r26
    7b04:	fb 26       	eor	r15, r27
    7b06:	c8 20       	and	r12, r8
    7b08:	d9 20       	and	r13, r9
    7b0a:	ea 20       	and	r14, r10
    7b0c:	fb 20       	and	r15, r11
    7b0e:	c8 26       	eor	r12, r24
    7b10:	d9 26       	eor	r13, r25
    7b12:	ea 26       	eor	r14, r26
    7b14:	fb 26       	eor	r15, r27
    7b16:	0c 0d       	add	r16, r12
    7b18:	1d 1d       	adc	r17, r13
    7b1a:	2e 1d       	adc	r18, r14
    7b1c:	3f 1d       	adc	r19, r15
    7b1e:	68 01       	movw	r12, r16
    7b20:	79 01       	movw	r14, r18
    7b22:	0b 2e       	mov	r0, r27
    7b24:	b9 e0       	ldi	r27, 0x09	; 9
    7b26:	cc 0c       	add	r12, r12
    7b28:	dd 1c       	adc	r13, r13
    7b2a:	ee 1c       	adc	r14, r14
    7b2c:	ff 1c       	adc	r15, r15
    7b2e:	ba 95       	dec	r27
    7b30:	d1 f7       	brne	.-12     	; 0x7b26 <md5_process+0xc66>
    7b32:	b0 2d       	mov	r27, r0
    7b34:	0f 2e       	mov	r0, r31
    7b36:	f7 e1       	ldi	r31, 0x17	; 23
    7b38:	36 95       	lsr	r19
    7b3a:	27 95       	ror	r18
    7b3c:	17 95       	ror	r17
    7b3e:	07 95       	ror	r16
    7b40:	fa 95       	dec	r31
    7b42:	d1 f7       	brne	.-12     	; 0x7b38 <md5_process+0xc78>
    7b44:	f0 2d       	mov	r31, r0
    7b46:	0c 29       	or	r16, r12
    7b48:	1d 29       	or	r17, r13
    7b4a:	2e 29       	or	r18, r14
    7b4c:	3f 29       	or	r19, r15
    7b4e:	04 0f       	add	r16, r20
    7b50:	15 1f       	adc	r17, r21
    7b52:	26 1f       	adc	r18, r22
    7b54:	37 1f       	adc	r19, r23
    7b56:	cd a8       	ldd	r12, Y+53	; 0x35
    7b58:	de a8       	ldd	r13, Y+54	; 0x36
    7b5a:	ef a8       	ldd	r14, Y+55	; 0x37
    7b5c:	f8 ac       	ldd	r15, Y+56	; 0x38
    7b5e:	ef ea       	ldi	r30, 0xAF	; 175
    7b60:	ce 1a       	sub	r12, r30
    7b62:	e5 ea       	ldi	r30, 0xA5	; 165
    7b64:	de 0a       	sbc	r13, r30
    7b66:	e1 ea       	ldi	r30, 0xA1	; 161
    7b68:	ee 0a       	sbc	r14, r30
    7b6a:	e9 ed       	ldi	r30, 0xD9	; 217
    7b6c:	fe 0a       	sbc	r15, r30
    7b6e:	8c 0c       	add	r8, r12
    7b70:	9d 1c       	adc	r9, r13
    7b72:	ae 1c       	adc	r10, r14
    7b74:	bf 1c       	adc	r11, r15
    7b76:	68 01       	movw	r12, r16
    7b78:	79 01       	movw	r14, r18
    7b7a:	c4 26       	eor	r12, r20
    7b7c:	d5 26       	eor	r13, r21
    7b7e:	e6 26       	eor	r14, r22
    7b80:	f7 26       	eor	r15, r23
    7b82:	c8 22       	and	r12, r24
    7b84:	d9 22       	and	r13, r25
    7b86:	ea 22       	and	r14, r26
    7b88:	fb 22       	and	r15, r27
    7b8a:	c4 26       	eor	r12, r20
    7b8c:	d5 26       	eor	r13, r21
    7b8e:	e6 26       	eor	r14, r22
    7b90:	f7 26       	eor	r15, r23
    7b92:	8c 0c       	add	r8, r12
    7b94:	9d 1c       	adc	r9, r13
    7b96:	ae 1c       	adc	r10, r14
    7b98:	bf 1c       	adc	r11, r15
    7b9a:	75 01       	movw	r14, r10
    7b9c:	64 01       	movw	r12, r8
    7b9e:	0b 2e       	mov	r0, r27
    7ba0:	be e0       	ldi	r27, 0x0E	; 14
    7ba2:	cc 0c       	add	r12, r12
    7ba4:	dd 1c       	adc	r13, r13
    7ba6:	ee 1c       	adc	r14, r14
    7ba8:	ff 1c       	adc	r15, r15
    7baa:	ba 95       	dec	r27
    7bac:	d1 f7       	brne	.-12     	; 0x7ba2 <md5_process+0xce2>
    7bae:	b0 2d       	mov	r27, r0
    7bb0:	07 2e       	mov	r0, r23
    7bb2:	72 e1       	ldi	r23, 0x12	; 18
    7bb4:	b6 94       	lsr	r11
    7bb6:	a7 94       	ror	r10
    7bb8:	97 94       	ror	r9
    7bba:	87 94       	ror	r8
    7bbc:	7a 95       	dec	r23
    7bbe:	d1 f7       	brne	.-12     	; 0x7bb4 <md5_process+0xcf4>
    7bc0:	70 2d       	mov	r23, r0
    7bc2:	8c 28       	or	r8, r12
    7bc4:	9d 28       	or	r9, r13
    7bc6:	ae 28       	or	r10, r14
    7bc8:	bf 28       	or	r11, r15
    7bca:	80 0e       	add	r8, r16
    7bcc:	91 1e       	adc	r9, r17
    7bce:	a2 1e       	adc	r10, r18
    7bd0:	b3 1e       	adc	r11, r19
    7bd2:	c9 84       	ldd	r12, Y+9	; 0x09
    7bd4:	da 84       	ldd	r13, Y+10	; 0x0a
    7bd6:	eb 84       	ldd	r14, Y+11	; 0x0b
    7bd8:	fc 84       	ldd	r15, Y+12	; 0x0c
    7bda:	f6 e5       	ldi	r31, 0x56	; 86
    7bdc:	cf 1a       	sub	r12, r31
    7bde:	f8 e3       	ldi	r31, 0x38	; 56
    7be0:	df 0a       	sbc	r13, r31
    7be2:	f9 e4       	ldi	r31, 0x49	; 73
    7be4:	ef 0a       	sbc	r14, r31
    7be6:	f6 e1       	ldi	r31, 0x16	; 22
    7be8:	ff 0a       	sbc	r15, r31
    7bea:	8c 0d       	add	r24, r12
    7bec:	9d 1d       	adc	r25, r13
    7bee:	ae 1d       	adc	r26, r14
    7bf0:	bf 1d       	adc	r27, r15
    7bf2:	75 01       	movw	r14, r10
    7bf4:	64 01       	movw	r12, r8
    7bf6:	c0 26       	eor	r12, r16
    7bf8:	d1 26       	eor	r13, r17
    7bfa:	e2 26       	eor	r14, r18
    7bfc:	f3 26       	eor	r15, r19
    7bfe:	c4 22       	and	r12, r20
    7c00:	d5 22       	and	r13, r21
    7c02:	e6 22       	and	r14, r22
    7c04:	f7 22       	and	r15, r23
    7c06:	c0 26       	eor	r12, r16
    7c08:	d1 26       	eor	r13, r17
    7c0a:	e2 26       	eor	r14, r18
    7c0c:	f3 26       	eor	r15, r19
    7c0e:	8c 0d       	add	r24, r12
    7c10:	9d 1d       	adc	r25, r13
    7c12:	ae 1d       	adc	r26, r14
    7c14:	bf 1d       	adc	r27, r15
    7c16:	6c 01       	movw	r12, r24
    7c18:	7d 01       	movw	r14, r26
    7c1a:	0b 2e       	mov	r0, r27
    7c1c:	bc e0       	ldi	r27, 0x0C	; 12
    7c1e:	f6 94       	lsr	r15
    7c20:	e7 94       	ror	r14
    7c22:	d7 94       	ror	r13
    7c24:	c7 94       	ror	r12
    7c26:	ba 95       	dec	r27
    7c28:	d1 f7       	brne	.-12     	; 0x7c1e <md5_process+0xd5e>
    7c2a:	b0 2d       	mov	r27, r0
    7c2c:	07 2e       	mov	r0, r23
    7c2e:	74 e1       	ldi	r23, 0x14	; 20
    7c30:	88 0f       	add	r24, r24
    7c32:	99 1f       	adc	r25, r25
    7c34:	aa 1f       	adc	r26, r26
    7c36:	bb 1f       	adc	r27, r27
    7c38:	7a 95       	dec	r23
    7c3a:	d1 f7       	brne	.-12     	; 0x7c30 <md5_process+0xd70>
    7c3c:	70 2d       	mov	r23, r0
    7c3e:	8c 29       	or	r24, r12
    7c40:	9d 29       	or	r25, r13
    7c42:	ae 29       	or	r26, r14
    7c44:	bf 29       	or	r27, r15
    7c46:	88 0d       	add	r24, r8
    7c48:	99 1d       	adc	r25, r9
    7c4a:	aa 1d       	adc	r26, r10
    7c4c:	bb 1d       	adc	r27, r11
    7c4e:	cd 8c       	ldd	r12, Y+29	; 0x1d
    7c50:	de 8c       	ldd	r13, Y+30	; 0x1e
    7c52:	ef 8c       	ldd	r14, Y+31	; 0x1f
    7c54:	f8 a0       	ldd	r15, Y+32	; 0x20
    7c56:	e3 ea       	ldi	r30, 0xA3	; 163
    7c58:	ce 1a       	sub	r12, r30
    7c5a:	ef ee       	ldi	r30, 0xEF	; 239
    7c5c:	de 0a       	sbc	r13, r30
    7c5e:	e0 ed       	ldi	r30, 0xD0	; 208
    7c60:	ee 0a       	sbc	r14, r30
    7c62:	e9 e2       	ldi	r30, 0x29	; 41
    7c64:	fe 0a       	sbc	r15, r30
    7c66:	4c 0d       	add	r20, r12
    7c68:	5d 1d       	adc	r21, r13
    7c6a:	6e 1d       	adc	r22, r14
    7c6c:	7f 1d       	adc	r23, r15
    7c6e:	6c 01       	movw	r12, r24
    7c70:	7d 01       	movw	r14, r26
    7c72:	c8 24       	eor	r12, r8
    7c74:	d9 24       	eor	r13, r9
    7c76:	ea 24       	eor	r14, r10
    7c78:	fb 24       	eor	r15, r11
    7c7a:	c0 22       	and	r12, r16
    7c7c:	d1 22       	and	r13, r17
    7c7e:	e2 22       	and	r14, r18
    7c80:	f3 22       	and	r15, r19
    7c82:	c8 24       	eor	r12, r8
    7c84:	d9 24       	eor	r13, r9
    7c86:	ea 24       	eor	r14, r10
    7c88:	fb 24       	eor	r15, r11
    7c8a:	4c 0d       	add	r20, r12
    7c8c:	5d 1d       	adc	r21, r13
    7c8e:	6e 1d       	adc	r22, r14
    7c90:	7f 1d       	adc	r23, r15
    7c92:	6a 01       	movw	r12, r20
    7c94:	7b 01       	movw	r14, r22
    7c96:	cc 0c       	add	r12, r12
    7c98:	dd 1c       	adc	r13, r13
    7c9a:	ee 1c       	adc	r14, r14
    7c9c:	ff 1c       	adc	r15, r15
    7c9e:	cc 0c       	add	r12, r12
    7ca0:	dd 1c       	adc	r13, r13
    7ca2:	ee 1c       	adc	r14, r14
    7ca4:	ff 1c       	adc	r15, r15
    7ca6:	cc 0c       	add	r12, r12
    7ca8:	dd 1c       	adc	r13, r13
    7caa:	ee 1c       	adc	r14, r14
    7cac:	ff 1c       	adc	r15, r15
    7cae:	cc 0c       	add	r12, r12
    7cb0:	dd 1c       	adc	r13, r13
    7cb2:	ee 1c       	adc	r14, r14
    7cb4:	ff 1c       	adc	r15, r15
    7cb6:	cc 0c       	add	r12, r12
    7cb8:	dd 1c       	adc	r13, r13
    7cba:	ee 1c       	adc	r14, r14
    7cbc:	ff 1c       	adc	r15, r15
    7cbe:	03 2e       	mov	r0, r19
    7cc0:	3b e1       	ldi	r19, 0x1B	; 27
    7cc2:	76 95       	lsr	r23
    7cc4:	67 95       	ror	r22
    7cc6:	57 95       	ror	r21
    7cc8:	47 95       	ror	r20
    7cca:	3a 95       	dec	r19
    7ccc:	d1 f7       	brne	.-12     	; 0x7cc2 <md5_process+0xe02>
    7cce:	30 2d       	mov	r19, r0
    7cd0:	4c 29       	or	r20, r12
    7cd2:	5d 29       	or	r21, r13
    7cd4:	6e 29       	or	r22, r14
    7cd6:	7f 29       	or	r23, r15
    7cd8:	48 0f       	add	r20, r24
    7cda:	59 1f       	adc	r21, r25
    7cdc:	6a 1f       	adc	r22, r26
    7cde:	7b 1f       	adc	r23, r27
    7ce0:	c9 a8       	ldd	r12, Y+49	; 0x31
    7ce2:	da a8       	ldd	r13, Y+50	; 0x32
    7ce4:	eb a8       	ldd	r14, Y+51	; 0x33
    7ce6:	fc a8       	ldd	r15, Y+52	; 0x34
    7ce8:	fd ea       	ldi	r31, 0xAD	; 173
    7cea:	cf 1a       	sub	r12, r31
    7cec:	fb ee       	ldi	r31, 0xEB	; 235
    7cee:	df 0a       	sbc	r13, r31
    7cf0:	fb eb       	ldi	r31, 0xBB	; 187
    7cf2:	ef 0a       	sbc	r14, r31
    7cf4:	fd ef       	ldi	r31, 0xFD	; 253
    7cf6:	ff 0a       	sbc	r15, r31
    7cf8:	0c 0d       	add	r16, r12
    7cfa:	1d 1d       	adc	r17, r13
    7cfc:	2e 1d       	adc	r18, r14
    7cfe:	3f 1d       	adc	r19, r15
    7d00:	6a 01       	movw	r12, r20
    7d02:	7b 01       	movw	r14, r22
    7d04:	c8 26       	eor	r12, r24
    7d06:	d9 26       	eor	r13, r25
    7d08:	ea 26       	eor	r14, r26
    7d0a:	fb 26       	eor	r15, r27
    7d0c:	c8 20       	and	r12, r8
    7d0e:	d9 20       	and	r13, r9
    7d10:	ea 20       	and	r14, r10
    7d12:	fb 20       	and	r15, r11
    7d14:	c8 26       	eor	r12, r24
    7d16:	d9 26       	eor	r13, r25
    7d18:	ea 26       	eor	r14, r26
    7d1a:	fb 26       	eor	r15, r27
    7d1c:	0c 0d       	add	r16, r12
    7d1e:	1d 1d       	adc	r17, r13
    7d20:	2e 1d       	adc	r18, r14
    7d22:	3f 1d       	adc	r19, r15
    7d24:	68 01       	movw	r12, r16
    7d26:	79 01       	movw	r14, r18
    7d28:	0b 2e       	mov	r0, r27
    7d2a:	b9 e0       	ldi	r27, 0x09	; 9
    7d2c:	cc 0c       	add	r12, r12
    7d2e:	dd 1c       	adc	r13, r13
    7d30:	ee 1c       	adc	r14, r14
    7d32:	ff 1c       	adc	r15, r15
    7d34:	ba 95       	dec	r27
    7d36:	d1 f7       	brne	.-12     	; 0x7d2c <md5_process+0xe6c>
    7d38:	b0 2d       	mov	r27, r0
    7d3a:	0f 2e       	mov	r0, r31
    7d3c:	f7 e1       	ldi	r31, 0x17	; 23
    7d3e:	36 95       	lsr	r19
    7d40:	27 95       	ror	r18
    7d42:	17 95       	ror	r17
    7d44:	07 95       	ror	r16
    7d46:	fa 95       	dec	r31
    7d48:	d1 f7       	brne	.-12     	; 0x7d3e <md5_process+0xe7e>
    7d4a:	f0 2d       	mov	r31, r0
    7d4c:	0c 29       	or	r16, r12
    7d4e:	1d 29       	or	r17, r13
    7d50:	2e 29       	or	r18, r14
    7d52:	3f 29       	or	r19, r15
    7d54:	04 0f       	add	r16, r20
    7d56:	15 1f       	adc	r17, r21
    7d58:	26 1f       	adc	r18, r22
    7d5a:	37 1f       	adc	r19, r23
    7d5c:	29 96       	adiw	r28, 0x09	; 9
    7d5e:	cc ac       	ldd	r12, Y+60	; 0x3c
    7d60:	dd ac       	ldd	r13, Y+61	; 0x3d
    7d62:	ee ac       	ldd	r14, Y+62	; 0x3e
    7d64:	ff ac       	ldd	r15, Y+63	; 0x3f
    7d66:	29 97       	sbiw	r28, 0x09	; 9
    7d68:	ef e7       	ldi	r30, 0x7F	; 127
    7d6a:	ce 1a       	sub	r12, r30
    7d6c:	e9 e1       	ldi	r30, 0x19	; 25
    7d6e:	de 0a       	sbc	r13, r30
    7d70:	ee e5       	ldi	r30, 0x5E	; 94
    7d72:	ee 0a       	sbc	r14, r30
    7d74:	e7 e2       	ldi	r30, 0x27	; 39
    7d76:	fe 0a       	sbc	r15, r30
    7d78:	8c 0c       	add	r8, r12
    7d7a:	9d 1c       	adc	r9, r13
    7d7c:	ae 1c       	adc	r10, r14
    7d7e:	bf 1c       	adc	r11, r15
    7d80:	68 01       	movw	r12, r16
    7d82:	79 01       	movw	r14, r18
    7d84:	c4 26       	eor	r12, r20
    7d86:	d5 26       	eor	r13, r21
    7d88:	e6 26       	eor	r14, r22
    7d8a:	f7 26       	eor	r15, r23
    7d8c:	c8 22       	and	r12, r24
    7d8e:	d9 22       	and	r13, r25
    7d90:	ea 22       	and	r14, r26
    7d92:	fb 22       	and	r15, r27
    7d94:	c4 26       	eor	r12, r20
    7d96:	d5 26       	eor	r13, r21
    7d98:	e6 26       	eor	r14, r22
    7d9a:	f7 26       	eor	r15, r23
    7d9c:	8c 0c       	add	r8, r12
    7d9e:	9d 1c       	adc	r9, r13
    7da0:	ae 1c       	adc	r10, r14
    7da2:	bf 1c       	adc	r11, r15
    7da4:	75 01       	movw	r14, r10
    7da6:	64 01       	movw	r12, r8
    7da8:	0b 2e       	mov	r0, r27
    7daa:	be e0       	ldi	r27, 0x0E	; 14
    7dac:	cc 0c       	add	r12, r12
    7dae:	dd 1c       	adc	r13, r13
    7db0:	ee 1c       	adc	r14, r14
    7db2:	ff 1c       	adc	r15, r15
    7db4:	ba 95       	dec	r27
    7db6:	d1 f7       	brne	.-12     	; 0x7dac <md5_process+0xeec>
    7db8:	b0 2d       	mov	r27, r0
    7dba:	07 2e       	mov	r0, r23
    7dbc:	72 e1       	ldi	r23, 0x12	; 18
    7dbe:	b6 94       	lsr	r11
    7dc0:	a7 94       	ror	r10
    7dc2:	97 94       	ror	r9
    7dc4:	87 94       	ror	r8
    7dc6:	7a 95       	dec	r23
    7dc8:	d1 f7       	brne	.-12     	; 0x7dbe <md5_process+0xefe>
    7dca:	70 2d       	mov	r23, r0
    7dcc:	8c 28       	or	r8, r12
    7dce:	9d 28       	or	r9, r13
    7dd0:	ae 28       	or	r10, r14
    7dd2:	bf 28       	or	r11, r15
    7dd4:	80 0e       	add	r8, r16
    7dd6:	91 1e       	adc	r9, r17
    7dd8:	a2 1e       	adc	r10, r18
    7dda:	b3 1e       	adc	r11, r19
    7ddc:	c9 8c       	ldd	r12, Y+25	; 0x19
    7dde:	da 8c       	ldd	r13, Y+26	; 0x1a
    7de0:	eb 8c       	ldd	r14, Y+27	; 0x1b
    7de2:	fc 8c       	ldd	r15, Y+28	; 0x1c
    7de4:	f8 e3       	ldi	r31, 0x38	; 56
    7de6:	cf 1a       	sub	r12, r31
    7de8:	f4 e0       	ldi	r31, 0x04	; 4
    7dea:	df 0a       	sbc	r13, r31
    7dec:	fc e2       	ldi	r31, 0x2C	; 44
    7dee:	ef 0a       	sbc	r14, r31
    7df0:	f8 e1       	ldi	r31, 0x18	; 24
    7df2:	ff 0a       	sbc	r15, r31
    7df4:	8c 0d       	add	r24, r12
    7df6:	9d 1d       	adc	r25, r13
    7df8:	ae 1d       	adc	r26, r14
    7dfa:	bf 1d       	adc	r27, r15
    7dfc:	75 01       	movw	r14, r10
    7dfe:	64 01       	movw	r12, r8
    7e00:	c0 26       	eor	r12, r16
    7e02:	d1 26       	eor	r13, r17
    7e04:	e2 26       	eor	r14, r18
    7e06:	f3 26       	eor	r15, r19
    7e08:	c4 22       	and	r12, r20
    7e0a:	d5 22       	and	r13, r21
    7e0c:	e6 22       	and	r14, r22
    7e0e:	f7 22       	and	r15, r23
    7e10:	c0 26       	eor	r12, r16
    7e12:	d1 26       	eor	r13, r17
    7e14:	e2 26       	eor	r14, r18
    7e16:	f3 26       	eor	r15, r19
    7e18:	8c 0d       	add	r24, r12
    7e1a:	9d 1d       	adc	r25, r13
    7e1c:	ae 1d       	adc	r26, r14
    7e1e:	bf 1d       	adc	r27, r15
    7e20:	6c 01       	movw	r12, r24
    7e22:	7d 01       	movw	r14, r26
    7e24:	0b 2e       	mov	r0, r27
    7e26:	bc e0       	ldi	r27, 0x0C	; 12
    7e28:	f6 94       	lsr	r15
    7e2a:	e7 94       	ror	r14
    7e2c:	d7 94       	ror	r13
    7e2e:	c7 94       	ror	r12
    7e30:	ba 95       	dec	r27
    7e32:	d1 f7       	brne	.-12     	; 0x7e28 <md5_process+0xf68>
    7e34:	b0 2d       	mov	r27, r0
    7e36:	07 2e       	mov	r0, r23
    7e38:	74 e1       	ldi	r23, 0x14	; 20
    7e3a:	88 0f       	add	r24, r24
    7e3c:	99 1f       	adc	r25, r25
    7e3e:	aa 1f       	adc	r26, r26
    7e40:	bb 1f       	adc	r27, r27
    7e42:	7a 95       	dec	r23
    7e44:	d1 f7       	brne	.-12     	; 0x7e3a <md5_process+0xf7a>
    7e46:	70 2d       	mov	r23, r0
    7e48:	8c 29       	or	r24, r12
    7e4a:	9d 29       	or	r25, r13
    7e4c:	ae 29       	or	r26, r14
    7e4e:	bf 29       	or	r27, r15
    7e50:	88 0d       	add	r24, r8
    7e52:	99 1d       	adc	r25, r9
    7e54:	aa 1d       	adc	r26, r10
    7e56:	bb 1d       	adc	r27, r11
    7e58:	cd a4       	ldd	r12, Y+45	; 0x2d
    7e5a:	de a4       	ldd	r13, Y+46	; 0x2e
    7e5c:	ef a4       	ldd	r14, Y+47	; 0x2f
    7e5e:	f8 a8       	ldd	r15, Y+48	; 0x30
    7e60:	ea e1       	ldi	r30, 0x1A	; 26
    7e62:	ce 1a       	sub	r12, r30
    7e64:	e2 e3       	ldi	r30, 0x32	; 50
    7e66:	de 0a       	sbc	r13, r30
    7e68:	ee e1       	ldi	r30, 0x1E	; 30
    7e6a:	ee 0a       	sbc	r14, r30
    7e6c:	ee ed       	ldi	r30, 0xDE	; 222
    7e6e:	fe 0a       	sbc	r15, r30
    7e70:	4c 0d       	add	r20, r12
    7e72:	5d 1d       	adc	r21, r13
    7e74:	6e 1d       	adc	r22, r14
    7e76:	7f 1d       	adc	r23, r15
    7e78:	6c 01       	movw	r12, r24
    7e7a:	7d 01       	movw	r14, r26
    7e7c:	c8 24       	eor	r12, r8
    7e7e:	d9 24       	eor	r13, r9
    7e80:	ea 24       	eor	r14, r10
    7e82:	fb 24       	eor	r15, r11
    7e84:	c0 22       	and	r12, r16
    7e86:	d1 22       	and	r13, r17
    7e88:	e2 22       	and	r14, r18
    7e8a:	f3 22       	and	r15, r19
    7e8c:	c8 24       	eor	r12, r8
    7e8e:	d9 24       	eor	r13, r9
    7e90:	ea 24       	eor	r14, r10
    7e92:	fb 24       	eor	r15, r11
    7e94:	4c 0d       	add	r20, r12
    7e96:	5d 1d       	adc	r21, r13
    7e98:	6e 1d       	adc	r22, r14
    7e9a:	7f 1d       	adc	r23, r15
    7e9c:	6a 01       	movw	r12, r20
    7e9e:	7b 01       	movw	r14, r22
    7ea0:	cc 0c       	add	r12, r12
    7ea2:	dd 1c       	adc	r13, r13
    7ea4:	ee 1c       	adc	r14, r14
    7ea6:	ff 1c       	adc	r15, r15
    7ea8:	cc 0c       	add	r12, r12
    7eaa:	dd 1c       	adc	r13, r13
    7eac:	ee 1c       	adc	r14, r14
    7eae:	ff 1c       	adc	r15, r15
    7eb0:	cc 0c       	add	r12, r12
    7eb2:	dd 1c       	adc	r13, r13
    7eb4:	ee 1c       	adc	r14, r14
    7eb6:	ff 1c       	adc	r15, r15
    7eb8:	cc 0c       	add	r12, r12
    7eba:	dd 1c       	adc	r13, r13
    7ebc:	ee 1c       	adc	r14, r14
    7ebe:	ff 1c       	adc	r15, r15
    7ec0:	cc 0c       	add	r12, r12
    7ec2:	dd 1c       	adc	r13, r13
    7ec4:	ee 1c       	adc	r14, r14
    7ec6:	ff 1c       	adc	r15, r15
    7ec8:	03 2e       	mov	r0, r19
    7eca:	3b e1       	ldi	r19, 0x1B	; 27
    7ecc:	76 95       	lsr	r23
    7ece:	67 95       	ror	r22
    7ed0:	57 95       	ror	r21
    7ed2:	47 95       	ror	r20
    7ed4:	3a 95       	dec	r19
    7ed6:	d1 f7       	brne	.-12     	; 0x7ecc <md5_process+0x100c>
    7ed8:	30 2d       	mov	r19, r0
    7eda:	4c 29       	or	r20, r12
    7edc:	5d 29       	or	r21, r13
    7ede:	6e 29       	or	r22, r14
    7ee0:	7f 29       	or	r23, r15
    7ee2:	48 0f       	add	r20, r24
    7ee4:	59 1f       	adc	r21, r25
    7ee6:	6a 1f       	adc	r22, r26
    7ee8:	7b 1f       	adc	r23, r27
    7eea:	25 96       	adiw	r28, 0x05	; 5
    7eec:	cc ac       	ldd	r12, Y+60	; 0x3c
    7eee:	dd ac       	ldd	r13, Y+61	; 0x3d
    7ef0:	ee ac       	ldd	r14, Y+62	; 0x3e
    7ef2:	ff ac       	ldd	r15, Y+63	; 0x3f
    7ef4:	25 97       	sbiw	r28, 0x05	; 5
    7ef6:	fa e2       	ldi	r31, 0x2A	; 42
    7ef8:	cf 1a       	sub	r12, r31
    7efa:	f8 ef       	ldi	r31, 0xF8	; 248
    7efc:	df 0a       	sbc	r13, r31
    7efe:	f8 ec       	ldi	r31, 0xC8	; 200
    7f00:	ef 0a       	sbc	r14, r31
    7f02:	fc e3       	ldi	r31, 0x3C	; 60
    7f04:	ff 0a       	sbc	r15, r31
    7f06:	0c 0d       	add	r16, r12
    7f08:	1d 1d       	adc	r17, r13
    7f0a:	2e 1d       	adc	r18, r14
    7f0c:	3f 1d       	adc	r19, r15
    7f0e:	6a 01       	movw	r12, r20
    7f10:	7b 01       	movw	r14, r22
    7f12:	c8 26       	eor	r12, r24
    7f14:	d9 26       	eor	r13, r25
    7f16:	ea 26       	eor	r14, r26
    7f18:	fb 26       	eor	r15, r27
    7f1a:	c8 20       	and	r12, r8
    7f1c:	d9 20       	and	r13, r9
    7f1e:	ea 20       	and	r14, r10
    7f20:	fb 20       	and	r15, r11
    7f22:	c8 26       	eor	r12, r24
    7f24:	d9 26       	eor	r13, r25
    7f26:	ea 26       	eor	r14, r26
    7f28:	fb 26       	eor	r15, r27
    7f2a:	0c 0d       	add	r16, r12
    7f2c:	1d 1d       	adc	r17, r13
    7f2e:	2e 1d       	adc	r18, r14
    7f30:	3f 1d       	adc	r19, r15
    7f32:	68 01       	movw	r12, r16
    7f34:	79 01       	movw	r14, r18
    7f36:	0b 2e       	mov	r0, r27
    7f38:	b9 e0       	ldi	r27, 0x09	; 9
    7f3a:	cc 0c       	add	r12, r12
    7f3c:	dd 1c       	adc	r13, r13
    7f3e:	ee 1c       	adc	r14, r14
    7f40:	ff 1c       	adc	r15, r15
    7f42:	ba 95       	dec	r27
    7f44:	d1 f7       	brne	.-12     	; 0x7f3a <md5_process+0x107a>
    7f46:	b0 2d       	mov	r27, r0
    7f48:	0f 2e       	mov	r0, r31
    7f4a:	f7 e1       	ldi	r31, 0x17	; 23
    7f4c:	36 95       	lsr	r19
    7f4e:	27 95       	ror	r18
    7f50:	17 95       	ror	r17
    7f52:	07 95       	ror	r16
    7f54:	fa 95       	dec	r31
    7f56:	d1 f7       	brne	.-12     	; 0x7f4c <md5_process+0x108c>
    7f58:	f0 2d       	mov	r31, r0
    7f5a:	0c 29       	or	r16, r12
    7f5c:	1d 29       	or	r17, r13
    7f5e:	2e 29       	or	r18, r14
    7f60:	3f 29       	or	r19, r15
    7f62:	04 0f       	add	r16, r20
    7f64:	15 1f       	adc	r17, r21
    7f66:	26 1f       	adc	r18, r22
    7f68:	37 1f       	adc	r19, r23
    7f6a:	cd 88       	ldd	r12, Y+21	; 0x15
    7f6c:	de 88       	ldd	r13, Y+22	; 0x16
    7f6e:	ef 88       	ldd	r14, Y+23	; 0x17
    7f70:	f8 8c       	ldd	r15, Y+24	; 0x18
    7f72:	e9 e7       	ldi	r30, 0x79	; 121
    7f74:	ce 1a       	sub	r12, r30
    7f76:	e2 ef       	ldi	r30, 0xF2	; 242
    7f78:	de 0a       	sbc	r13, r30
    7f7a:	ea e2       	ldi	r30, 0x2A	; 42
    7f7c:	ee 0a       	sbc	r14, r30
    7f7e:	eb e0       	ldi	r30, 0x0B	; 11
    7f80:	fe 0a       	sbc	r15, r30
    7f82:	8c 0c       	add	r8, r12
    7f84:	9d 1c       	adc	r9, r13
    7f86:	ae 1c       	adc	r10, r14
    7f88:	bf 1c       	adc	r11, r15
    7f8a:	68 01       	movw	r12, r16
    7f8c:	79 01       	movw	r14, r18
    7f8e:	c4 26       	eor	r12, r20
    7f90:	d5 26       	eor	r13, r21
    7f92:	e6 26       	eor	r14, r22
    7f94:	f7 26       	eor	r15, r23
    7f96:	c8 22       	and	r12, r24
    7f98:	d9 22       	and	r13, r25
    7f9a:	ea 22       	and	r14, r26
    7f9c:	fb 22       	and	r15, r27
    7f9e:	c4 26       	eor	r12, r20
    7fa0:	d5 26       	eor	r13, r21
    7fa2:	e6 26       	eor	r14, r22
    7fa4:	f7 26       	eor	r15, r23
    7fa6:	8c 0c       	add	r8, r12
    7fa8:	9d 1c       	adc	r9, r13
    7faa:	ae 1c       	adc	r10, r14
    7fac:	bf 1c       	adc	r11, r15
    7fae:	75 01       	movw	r14, r10
    7fb0:	64 01       	movw	r12, r8
    7fb2:	0b 2e       	mov	r0, r27
    7fb4:	be e0       	ldi	r27, 0x0E	; 14
    7fb6:	cc 0c       	add	r12, r12
    7fb8:	dd 1c       	adc	r13, r13
    7fba:	ee 1c       	adc	r14, r14
    7fbc:	ff 1c       	adc	r15, r15
    7fbe:	ba 95       	dec	r27
    7fc0:	d1 f7       	brne	.-12     	; 0x7fb6 <md5_process+0x10f6>
    7fc2:	b0 2d       	mov	r27, r0
    7fc4:	07 2e       	mov	r0, r23
    7fc6:	72 e1       	ldi	r23, 0x12	; 18
    7fc8:	b6 94       	lsr	r11
    7fca:	a7 94       	ror	r10
    7fcc:	97 94       	ror	r9
    7fce:	87 94       	ror	r8
    7fd0:	7a 95       	dec	r23
    7fd2:	d1 f7       	brne	.-12     	; 0x7fc8 <md5_process+0x1108>
    7fd4:	70 2d       	mov	r23, r0
    7fd6:	8c 28       	or	r8, r12
    7fd8:	9d 28       	or	r9, r13
    7fda:	ae 28       	or	r10, r14
    7fdc:	bf 28       	or	r11, r15
    7fde:	80 0e       	add	r8, r16
    7fe0:	91 1e       	adc	r9, r17
    7fe2:	a2 1e       	adc	r10, r18
    7fe4:	b3 1e       	adc	r11, r19
    7fe6:	c9 a4       	ldd	r12, Y+41	; 0x29
    7fe8:	da a4       	ldd	r13, Y+42	; 0x2a
    7fea:	eb a4       	ldd	r14, Y+43	; 0x2b
    7fec:	fc a4       	ldd	r15, Y+44	; 0x2c
    7fee:	f3 e1       	ldi	r31, 0x13	; 19
    7ff0:	cf 1a       	sub	r12, r31
    7ff2:	fb ee       	ldi	r31, 0xEB	; 235
    7ff4:	df 0a       	sbc	r13, r31
    7ff6:	f5 ea       	ldi	r31, 0xA5	; 165
    7ff8:	ef 0a       	sbc	r14, r31
    7ffa:	fa eb       	ldi	r31, 0xBA	; 186
    7ffc:	ff 0a       	sbc	r15, r31
    7ffe:	8c 0d       	add	r24, r12
    8000:	9d 1d       	adc	r25, r13
    8002:	ae 1d       	adc	r26, r14
    8004:	bf 1d       	adc	r27, r15
    8006:	75 01       	movw	r14, r10
    8008:	64 01       	movw	r12, r8
    800a:	c0 26       	eor	r12, r16
    800c:	d1 26       	eor	r13, r17
    800e:	e2 26       	eor	r14, r18
    8010:	f3 26       	eor	r15, r19
    8012:	c4 22       	and	r12, r20
    8014:	d5 22       	and	r13, r21
    8016:	e6 22       	and	r14, r22
    8018:	f7 22       	and	r15, r23
    801a:	c0 26       	eor	r12, r16
    801c:	d1 26       	eor	r13, r17
    801e:	e2 26       	eor	r14, r18
    8020:	f3 26       	eor	r15, r19
    8022:	8c 0d       	add	r24, r12
    8024:	9d 1d       	adc	r25, r13
    8026:	ae 1d       	adc	r26, r14
    8028:	bf 1d       	adc	r27, r15
    802a:	6c 01       	movw	r12, r24
    802c:	7d 01       	movw	r14, r26
    802e:	0b 2e       	mov	r0, r27
    8030:	bc e0       	ldi	r27, 0x0C	; 12
    8032:	f6 94       	lsr	r15
    8034:	e7 94       	ror	r14
    8036:	d7 94       	ror	r13
    8038:	c7 94       	ror	r12
    803a:	ba 95       	dec	r27
    803c:	d1 f7       	brne	.-12     	; 0x8032 <md5_process+0x1172>
    803e:	b0 2d       	mov	r27, r0
    8040:	07 2e       	mov	r0, r23
    8042:	74 e1       	ldi	r23, 0x14	; 20
    8044:	88 0f       	add	r24, r24
    8046:	99 1f       	adc	r25, r25
    8048:	aa 1f       	adc	r26, r26
    804a:	bb 1f       	adc	r27, r27
    804c:	7a 95       	dec	r23
    804e:	d1 f7       	brne	.-12     	; 0x8044 <md5_process+0x1184>
    8050:	70 2d       	mov	r23, r0
    8052:	8c 29       	or	r24, r12
    8054:	9d 29       	or	r25, r13
    8056:	ae 29       	or	r26, r14
    8058:	bf 29       	or	r27, r15
    805a:	88 0d       	add	r24, r8
    805c:	99 1d       	adc	r25, r9
    805e:	aa 1d       	adc	r26, r10
    8060:	bb 1d       	adc	r27, r11
    8062:	21 96       	adiw	r28, 0x01	; 1
    8064:	cc ac       	ldd	r12, Y+60	; 0x3c
    8066:	dd ac       	ldd	r13, Y+61	; 0x3d
    8068:	ee ac       	ldd	r14, Y+62	; 0x3e
    806a:	ff ac       	ldd	r15, Y+63	; 0x3f
    806c:	21 97       	sbiw	r28, 0x01	; 1
    806e:	eb ef       	ldi	r30, 0xFB	; 251
    8070:	ce 1a       	sub	r12, r30
    8072:	e6 e1       	ldi	r30, 0x16	; 22
    8074:	de 0a       	sbc	r13, r30
    8076:	ec e1       	ldi	r30, 0x1C	; 28
    8078:	ee 0a       	sbc	r14, r30
    807a:	e6 e5       	ldi	r30, 0x56	; 86
    807c:	fe 0a       	sbc	r15, r30
    807e:	4c 0d       	add	r20, r12
    8080:	5d 1d       	adc	r21, r13
    8082:	6e 1d       	adc	r22, r14
    8084:	7f 1d       	adc	r23, r15
    8086:	6c 01       	movw	r12, r24
    8088:	7d 01       	movw	r14, r26
    808a:	c8 24       	eor	r12, r8
    808c:	d9 24       	eor	r13, r9
    808e:	ea 24       	eor	r14, r10
    8090:	fb 24       	eor	r15, r11
    8092:	c0 22       	and	r12, r16
    8094:	d1 22       	and	r13, r17
    8096:	e2 22       	and	r14, r18
    8098:	f3 22       	and	r15, r19
    809a:	c8 24       	eor	r12, r8
    809c:	d9 24       	eor	r13, r9
    809e:	ea 24       	eor	r14, r10
    80a0:	fb 24       	eor	r15, r11
    80a2:	4c 0d       	add	r20, r12
    80a4:	5d 1d       	adc	r21, r13
    80a6:	6e 1d       	adc	r22, r14
    80a8:	7f 1d       	adc	r23, r15
    80aa:	6a 01       	movw	r12, r20
    80ac:	7b 01       	movw	r14, r22
    80ae:	cc 0c       	add	r12, r12
    80b0:	dd 1c       	adc	r13, r13
    80b2:	ee 1c       	adc	r14, r14
    80b4:	ff 1c       	adc	r15, r15
    80b6:	cc 0c       	add	r12, r12
    80b8:	dd 1c       	adc	r13, r13
    80ba:	ee 1c       	adc	r14, r14
    80bc:	ff 1c       	adc	r15, r15
    80be:	cc 0c       	add	r12, r12
    80c0:	dd 1c       	adc	r13, r13
    80c2:	ee 1c       	adc	r14, r14
    80c4:	ff 1c       	adc	r15, r15
    80c6:	cc 0c       	add	r12, r12
    80c8:	dd 1c       	adc	r13, r13
    80ca:	ee 1c       	adc	r14, r14
    80cc:	ff 1c       	adc	r15, r15
    80ce:	cc 0c       	add	r12, r12
    80d0:	dd 1c       	adc	r13, r13
    80d2:	ee 1c       	adc	r14, r14
    80d4:	ff 1c       	adc	r15, r15
    80d6:	03 2e       	mov	r0, r19
    80d8:	3b e1       	ldi	r19, 0x1B	; 27
    80da:	76 95       	lsr	r23
    80dc:	67 95       	ror	r22
    80de:	57 95       	ror	r21
    80e0:	47 95       	ror	r20
    80e2:	3a 95       	dec	r19
    80e4:	d1 f7       	brne	.-12     	; 0x80da <md5_process+0x121a>
    80e6:	30 2d       	mov	r19, r0
    80e8:	4c 29       	or	r20, r12
    80ea:	5d 29       	or	r21, r13
    80ec:	6e 29       	or	r22, r14
    80ee:	7f 29       	or	r23, r15
    80f0:	48 0f       	add	r20, r24
    80f2:	59 1f       	adc	r21, r25
    80f4:	6a 1f       	adc	r22, r26
    80f6:	7b 1f       	adc	r23, r27
    80f8:	c9 88       	ldd	r12, Y+17	; 0x11
    80fa:	da 88       	ldd	r13, Y+18	; 0x12
    80fc:	eb 88       	ldd	r14, Y+19	; 0x13
    80fe:	fc 88       	ldd	r15, Y+20	; 0x14
    8100:	f8 e0       	ldi	r31, 0x08	; 8
    8102:	cf 1a       	sub	r12, r31
    8104:	fc e5       	ldi	r31, 0x5C	; 92
    8106:	df 0a       	sbc	r13, r31
    8108:	f0 e1       	ldi	r31, 0x10	; 16
    810a:	ef 0a       	sbc	r14, r31
    810c:	f3 e0       	ldi	r31, 0x03	; 3
    810e:	ff 0a       	sbc	r15, r31
    8110:	0c 0d       	add	r16, r12
    8112:	1d 1d       	adc	r17, r13
    8114:	2e 1d       	adc	r18, r14
    8116:	3f 1d       	adc	r19, r15
    8118:	6a 01       	movw	r12, r20
    811a:	7b 01       	movw	r14, r22
    811c:	c8 26       	eor	r12, r24
    811e:	d9 26       	eor	r13, r25
    8120:	ea 26       	eor	r14, r26
    8122:	fb 26       	eor	r15, r27
    8124:	c8 20       	and	r12, r8
    8126:	d9 20       	and	r13, r9
    8128:	ea 20       	and	r14, r10
    812a:	fb 20       	and	r15, r11
    812c:	c8 26       	eor	r12, r24
    812e:	d9 26       	eor	r13, r25
    8130:	ea 26       	eor	r14, r26
    8132:	fb 26       	eor	r15, r27
    8134:	0c 0d       	add	r16, r12
    8136:	1d 1d       	adc	r17, r13
    8138:	2e 1d       	adc	r18, r14
    813a:	3f 1d       	adc	r19, r15
    813c:	68 01       	movw	r12, r16
    813e:	79 01       	movw	r14, r18
    8140:	0b 2e       	mov	r0, r27
    8142:	b9 e0       	ldi	r27, 0x09	; 9
    8144:	cc 0c       	add	r12, r12
    8146:	dd 1c       	adc	r13, r13
    8148:	ee 1c       	adc	r14, r14
    814a:	ff 1c       	adc	r15, r15
    814c:	ba 95       	dec	r27
    814e:	d1 f7       	brne	.-12     	; 0x8144 <md5_process+0x1284>
    8150:	b0 2d       	mov	r27, r0
    8152:	0f 2e       	mov	r0, r31
    8154:	f7 e1       	ldi	r31, 0x17	; 23
    8156:	36 95       	lsr	r19
    8158:	27 95       	ror	r18
    815a:	17 95       	ror	r17
    815c:	07 95       	ror	r16
    815e:	fa 95       	dec	r31
    8160:	d1 f7       	brne	.-12     	; 0x8156 <md5_process+0x1296>
    8162:	f0 2d       	mov	r31, r0
    8164:	0c 29       	or	r16, r12
    8166:	1d 29       	or	r17, r13
    8168:	2e 29       	or	r18, r14
    816a:	3f 29       	or	r19, r15
    816c:	04 0f       	add	r16, r20
    816e:	15 1f       	adc	r17, r21
    8170:	26 1f       	adc	r18, r22
    8172:	37 1f       	adc	r19, r23
    8174:	cd a0       	ldd	r12, Y+37	; 0x25
    8176:	de a0       	ldd	r13, Y+38	; 0x26
    8178:	ef a0       	ldd	r14, Y+39	; 0x27
    817a:	f8 a4       	ldd	r15, Y+40	; 0x28
    817c:	e7 e2       	ldi	r30, 0x27	; 39
    817e:	ce 1a       	sub	r12, r30
    8180:	ed ef       	ldi	r30, 0xFD	; 253
    8182:	de 0a       	sbc	r13, r30
    8184:	e0 e9       	ldi	r30, 0x90	; 144
    8186:	ee 0a       	sbc	r14, r30
    8188:	e8 e9       	ldi	r30, 0x98	; 152
    818a:	fe 0a       	sbc	r15, r30
    818c:	8c 0c       	add	r8, r12
    818e:	9d 1c       	adc	r9, r13
    8190:	ae 1c       	adc	r10, r14
    8192:	bf 1c       	adc	r11, r15
    8194:	68 01       	movw	r12, r16
    8196:	79 01       	movw	r14, r18
    8198:	c4 26       	eor	r12, r20
    819a:	d5 26       	eor	r13, r21
    819c:	e6 26       	eor	r14, r22
    819e:	f7 26       	eor	r15, r23
    81a0:	c8 22       	and	r12, r24
    81a2:	d9 22       	and	r13, r25
    81a4:	ea 22       	and	r14, r26
    81a6:	fb 22       	and	r15, r27
    81a8:	c4 26       	eor	r12, r20
    81aa:	d5 26       	eor	r13, r21
    81ac:	e6 26       	eor	r14, r22
    81ae:	f7 26       	eor	r15, r23
    81b0:	8c 0c       	add	r8, r12
    81b2:	9d 1c       	adc	r9, r13
    81b4:	ae 1c       	adc	r10, r14
    81b6:	bf 1c       	adc	r11, r15
    81b8:	75 01       	movw	r14, r10
    81ba:	64 01       	movw	r12, r8
    81bc:	0b 2e       	mov	r0, r27
    81be:	be e0       	ldi	r27, 0x0E	; 14
    81c0:	cc 0c       	add	r12, r12
    81c2:	dd 1c       	adc	r13, r13
    81c4:	ee 1c       	adc	r14, r14
    81c6:	ff 1c       	adc	r15, r15
    81c8:	ba 95       	dec	r27
    81ca:	d1 f7       	brne	.-12     	; 0x81c0 <md5_process+0x1300>
    81cc:	b0 2d       	mov	r27, r0
    81ce:	07 2e       	mov	r0, r23
    81d0:	72 e1       	ldi	r23, 0x12	; 18
    81d2:	b6 94       	lsr	r11
    81d4:	a7 94       	ror	r10
    81d6:	97 94       	ror	r9
    81d8:	87 94       	ror	r8
    81da:	7a 95       	dec	r23
    81dc:	d1 f7       	brne	.-12     	; 0x81d2 <md5_process+0x1312>
    81de:	70 2d       	mov	r23, r0
    81e0:	8c 28       	or	r8, r12
    81e2:	9d 28       	or	r9, r13
    81e4:	ae 28       	or	r10, r14
    81e6:	bf 28       	or	r11, r15
    81e8:	80 0e       	add	r8, r16
    81ea:	91 1e       	adc	r9, r17
    81ec:	a2 1e       	adc	r10, r18
    81ee:	b3 1e       	adc	r11, r19
    81f0:	75 01       	movw	r14, r10
    81f2:	64 01       	movw	r12, r8
    81f4:	c0 26       	eor	r12, r16
    81f6:	d1 26       	eor	r13, r17
    81f8:	e2 26       	eor	r14, r18
    81fa:	f3 26       	eor	r15, r19
    81fc:	49 ac       	ldd	r4, Y+57	; 0x39
    81fe:	5a ac       	ldd	r5, Y+58	; 0x3a
    8200:	6b ac       	ldd	r6, Y+59	; 0x3b
    8202:	7c ac       	ldd	r7, Y+60	; 0x3c
    8204:	f6 e7       	ldi	r31, 0x76	; 118
    8206:	4f 1a       	sub	r4, r31
    8208:	f3 eb       	ldi	r31, 0xB3	; 179
    820a:	5f 0a       	sbc	r5, r31
    820c:	f5 ed       	ldi	r31, 0xD5	; 213
    820e:	6f 0a       	sbc	r6, r31
    8210:	f2 e7       	ldi	r31, 0x72	; 114
    8212:	7f 0a       	sbc	r7, r31
    8214:	84 0d       	add	r24, r4
    8216:	95 1d       	adc	r25, r5
    8218:	a6 1d       	adc	r26, r6
    821a:	b7 1d       	adc	r27, r7
    821c:	26 01       	movw	r4, r12
    821e:	37 01       	movw	r6, r14
    8220:	44 22       	and	r4, r20
    8222:	55 22       	and	r5, r21
    8224:	66 22       	and	r6, r22
    8226:	77 22       	and	r7, r23
    8228:	40 26       	eor	r4, r16
    822a:	51 26       	eor	r5, r17
    822c:	62 26       	eor	r6, r18
    822e:	73 26       	eor	r7, r19
    8230:	84 0d       	add	r24, r4
    8232:	95 1d       	adc	r25, r5
    8234:	a6 1d       	adc	r26, r6
    8236:	b7 1d       	adc	r27, r7
    8238:	2c 01       	movw	r4, r24
    823a:	3d 01       	movw	r6, r26
    823c:	03 2e       	mov	r0, r19
    823e:	3c e0       	ldi	r19, 0x0C	; 12
    8240:	76 94       	lsr	r7
    8242:	67 94       	ror	r6
    8244:	57 94       	ror	r5
    8246:	47 94       	ror	r4
    8248:	3a 95       	dec	r19
    824a:	d1 f7       	brne	.-12     	; 0x8240 <__stack+0x41>
    824c:	30 2d       	mov	r19, r0
    824e:	07 2e       	mov	r0, r23
    8250:	74 e1       	ldi	r23, 0x14	; 20
    8252:	88 0f       	add	r24, r24
    8254:	99 1f       	adc	r25, r25
    8256:	aa 1f       	adc	r26, r26
    8258:	bb 1f       	adc	r27, r27
    825a:	7a 95       	dec	r23
    825c:	d1 f7       	brne	.-12     	; 0x8252 <__stack+0x53>
    825e:	70 2d       	mov	r23, r0
    8260:	84 29       	or	r24, r4
    8262:	95 29       	or	r25, r5
    8264:	a6 29       	or	r26, r6
    8266:	b7 29       	or	r27, r7
    8268:	88 0d       	add	r24, r8
    826a:	99 1d       	adc	r25, r9
    826c:	aa 1d       	adc	r26, r10
    826e:	bb 1d       	adc	r27, r11
    8270:	4d 8c       	ldd	r4, Y+29	; 0x1d
    8272:	5e 8c       	ldd	r5, Y+30	; 0x1e
    8274:	6f 8c       	ldd	r6, Y+31	; 0x1f
    8276:	78 a0       	ldd	r7, Y+32	; 0x20
    8278:	ee eb       	ldi	r30, 0xBE	; 190
    827a:	4e 1a       	sub	r4, r30
    827c:	e6 ec       	ldi	r30, 0xC6	; 198
    827e:	5e 0a       	sbc	r5, r30
    8280:	e5 e0       	ldi	r30, 0x05	; 5
    8282:	6e 0a       	sbc	r6, r30
    8284:	71 08       	sbc	r7, r1
    8286:	44 0d       	add	r20, r4
    8288:	55 1d       	adc	r21, r5
    828a:	66 1d       	adc	r22, r6
    828c:	77 1d       	adc	r23, r7
    828e:	c8 26       	eor	r12, r24
    8290:	d9 26       	eor	r13, r25
    8292:	ea 26       	eor	r14, r26
    8294:	fb 26       	eor	r15, r27
    8296:	4c 0d       	add	r20, r12
    8298:	5d 1d       	adc	r21, r13
    829a:	6e 1d       	adc	r22, r14
    829c:	7f 1d       	adc	r23, r15
    829e:	6a 01       	movw	r12, r20
    82a0:	7b 01       	movw	r14, r22
    82a2:	cc 0c       	add	r12, r12
    82a4:	dd 1c       	adc	r13, r13
    82a6:	ee 1c       	adc	r14, r14
    82a8:	ff 1c       	adc	r15, r15
    82aa:	cc 0c       	add	r12, r12
    82ac:	dd 1c       	adc	r13, r13
    82ae:	ee 1c       	adc	r14, r14
    82b0:	ff 1c       	adc	r15, r15
    82b2:	cc 0c       	add	r12, r12
    82b4:	dd 1c       	adc	r13, r13
    82b6:	ee 1c       	adc	r14, r14
    82b8:	ff 1c       	adc	r15, r15
    82ba:	cc 0c       	add	r12, r12
    82bc:	dd 1c       	adc	r13, r13
    82be:	ee 1c       	adc	r14, r14
    82c0:	ff 1c       	adc	r15, r15
    82c2:	03 2e       	mov	r0, r19
    82c4:	3c e1       	ldi	r19, 0x1C	; 28
    82c6:	76 95       	lsr	r23
    82c8:	67 95       	ror	r22
    82ca:	57 95       	ror	r21
    82cc:	47 95       	ror	r20
    82ce:	3a 95       	dec	r19
    82d0:	d1 f7       	brne	.-12     	; 0x82c6 <__stack+0xc7>
    82d2:	30 2d       	mov	r19, r0
    82d4:	4c 29       	or	r20, r12
    82d6:	5d 29       	or	r21, r13
    82d8:	6e 29       	or	r22, r14
    82da:	7f 29       	or	r23, r15
    82dc:	48 0f       	add	r20, r24
    82de:	59 1f       	adc	r21, r25
    82e0:	6a 1f       	adc	r22, r26
    82e2:	7b 1f       	adc	r23, r27
    82e4:	c9 a4       	ldd	r12, Y+41	; 0x29
    82e6:	da a4       	ldd	r13, Y+42	; 0x2a
    82e8:	eb a4       	ldd	r14, Y+43	; 0x2b
    82ea:	fc a4       	ldd	r15, Y+44	; 0x2c
    82ec:	ff e7       	ldi	r31, 0x7F	; 127
    82ee:	cf 1a       	sub	r12, r31
    82f0:	f9 e0       	ldi	r31, 0x09	; 9
    82f2:	df 0a       	sbc	r13, r31
    82f4:	fe e8       	ldi	r31, 0x8E	; 142
    82f6:	ef 0a       	sbc	r14, r31
    82f8:	f8 e7       	ldi	r31, 0x78	; 120
    82fa:	ff 0a       	sbc	r15, r31
    82fc:	0c 0d       	add	r16, r12
    82fe:	1d 1d       	adc	r17, r13
    8300:	2e 1d       	adc	r18, r14
    8302:	3f 1d       	adc	r19, r15
    8304:	6c 01       	movw	r12, r24
    8306:	7d 01       	movw	r14, r26
    8308:	c8 24       	eor	r12, r8
    830a:	d9 24       	eor	r13, r9
    830c:	ea 24       	eor	r14, r10
    830e:	fb 24       	eor	r15, r11
    8310:	c4 26       	eor	r12, r20
    8312:	d5 26       	eor	r13, r21
    8314:	e6 26       	eor	r14, r22
    8316:	f7 26       	eor	r15, r23
    8318:	0c 0d       	add	r16, r12
    831a:	1d 1d       	adc	r17, r13
    831c:	2e 1d       	adc	r18, r14
    831e:	3f 1d       	adc	r19, r15
    8320:	68 01       	movw	r12, r16
    8322:	79 01       	movw	r14, r18
    8324:	0b 2e       	mov	r0, r27
    8326:	bb e0       	ldi	r27, 0x0B	; 11
    8328:	cc 0c       	add	r12, r12
    832a:	dd 1c       	adc	r13, r13
    832c:	ee 1c       	adc	r14, r14
    832e:	ff 1c       	adc	r15, r15
    8330:	ba 95       	dec	r27
    8332:	d1 f7       	brne	.-12     	; 0x8328 <__stack+0x129>
    8334:	b0 2d       	mov	r27, r0
    8336:	0f 2e       	mov	r0, r31
    8338:	f5 e1       	ldi	r31, 0x15	; 21
    833a:	36 95       	lsr	r19
    833c:	27 95       	ror	r18
    833e:	17 95       	ror	r17
    8340:	07 95       	ror	r16
    8342:	fa 95       	dec	r31
    8344:	d1 f7       	brne	.-12     	; 0x833a <__stack+0x13b>
    8346:	f0 2d       	mov	r31, r0
    8348:	0c 29       	or	r16, r12
    834a:	1d 29       	or	r17, r13
    834c:	2e 29       	or	r18, r14
    834e:	3f 29       	or	r19, r15
    8350:	04 0f       	add	r16, r20
    8352:	15 1f       	adc	r17, r21
    8354:	26 1f       	adc	r18, r22
    8356:	37 1f       	adc	r19, r23
    8358:	cd a8       	ldd	r12, Y+53	; 0x35
    835a:	de a8       	ldd	r13, Y+54	; 0x36
    835c:	ef a8       	ldd	r14, Y+55	; 0x37
    835e:	f8 ac       	ldd	r15, Y+56	; 0x38
    8360:	ee ed       	ldi	r30, 0xDE	; 222
    8362:	ce 1a       	sub	r12, r30
    8364:	ee e9       	ldi	r30, 0x9E	; 158
    8366:	de 0a       	sbc	r13, r30
    8368:	e2 e6       	ldi	r30, 0x62	; 98
    836a:	ee 0a       	sbc	r14, r30
    836c:	e2 e9       	ldi	r30, 0x92	; 146
    836e:	fe 0a       	sbc	r15, r30
    8370:	8c 0c       	add	r8, r12
    8372:	9d 1c       	adc	r9, r13
    8374:	ae 1c       	adc	r10, r14
    8376:	bf 1c       	adc	r11, r15
    8378:	6a 01       	movw	r12, r20
    837a:	7b 01       	movw	r14, r22
    837c:	c8 26       	eor	r12, r24
    837e:	d9 26       	eor	r13, r25
    8380:	ea 26       	eor	r14, r26
    8382:	fb 26       	eor	r15, r27
    8384:	c0 26       	eor	r12, r16
    8386:	d1 26       	eor	r13, r17
    8388:	e2 26       	eor	r14, r18
    838a:	f3 26       	eor	r15, r19
    838c:	8c 0c       	add	r8, r12
    838e:	9d 1c       	adc	r9, r13
    8390:	ae 1c       	adc	r10, r14
    8392:	bf 1c       	adc	r11, r15
    8394:	64 01       	movw	r12, r8
    8396:	45 01       	movw	r8, r10
    8398:	56 01       	movw	r10, r12
    839a:	80 0e       	add	r8, r16
    839c:	91 1e       	adc	r9, r17
    839e:	a2 1e       	adc	r10, r18
    83a0:	b3 1e       	adc	r11, r19
    83a2:	25 96       	adiw	r28, 0x05	; 5
    83a4:	cc ac       	ldd	r12, Y+60	; 0x3c
    83a6:	dd ac       	ldd	r13, Y+61	; 0x3d
    83a8:	ee ac       	ldd	r14, Y+62	; 0x3e
    83aa:	ff ac       	ldd	r15, Y+63	; 0x3f
    83ac:	25 97       	sbiw	r28, 0x05	; 5
    83ae:	e4 ef       	ldi	r30, 0xF4	; 244
    83b0:	ce 1a       	sub	r12, r30
    83b2:	e7 ec       	ldi	r30, 0xC7	; 199
    83b4:	de 0a       	sbc	r13, r30
    83b6:	ea e1       	ldi	r30, 0x1A	; 26
    83b8:	ee 0a       	sbc	r14, r30
    83ba:	e2 e0       	ldi	r30, 0x02	; 2
    83bc:	fe 0a       	sbc	r15, r30
    83be:	8c 0d       	add	r24, r12
    83c0:	9d 1d       	adc	r25, r13
    83c2:	ae 1d       	adc	r26, r14
    83c4:	bf 1d       	adc	r27, r15
    83c6:	68 01       	movw	r12, r16
    83c8:	79 01       	movw	r14, r18
    83ca:	c4 26       	eor	r12, r20
    83cc:	d5 26       	eor	r13, r21
    83ce:	e6 26       	eor	r14, r22
    83d0:	f7 26       	eor	r15, r23
    83d2:	c8 24       	eor	r12, r8
    83d4:	d9 24       	eor	r13, r9
    83d6:	ea 24       	eor	r14, r10
    83d8:	fb 24       	eor	r15, r11
    83da:	8c 0d       	add	r24, r12
    83dc:	9d 1d       	adc	r25, r13
    83de:	ae 1d       	adc	r26, r14
    83e0:	bf 1d       	adc	r27, r15
    83e2:	6c 01       	movw	r12, r24
    83e4:	7d 01       	movw	r14, r26
    83e6:	0b 2e       	mov	r0, r27
    83e8:	b9 e0       	ldi	r27, 0x09	; 9
    83ea:	f6 94       	lsr	r15
    83ec:	e7 94       	ror	r14
    83ee:	d7 94       	ror	r13
    83f0:	c7 94       	ror	r12
    83f2:	ba 95       	dec	r27
    83f4:	d1 f7       	brne	.-12     	; 0x83ea <__stack+0x1eb>
    83f6:	b0 2d       	mov	r27, r0
    83f8:	07 2e       	mov	r0, r23
    83fa:	77 e1       	ldi	r23, 0x17	; 23
    83fc:	88 0f       	add	r24, r24
    83fe:	99 1f       	adc	r25, r25
    8400:	aa 1f       	adc	r26, r26
    8402:	bb 1f       	adc	r27, r27
    8404:	7a 95       	dec	r23
    8406:	d1 f7       	brne	.-12     	; 0x83fc <__stack+0x1fd>
    8408:	70 2d       	mov	r23, r0
    840a:	8c 29       	or	r24, r12
    840c:	9d 29       	or	r25, r13
    840e:	ae 29       	or	r26, r14
    8410:	bf 29       	or	r27, r15
    8412:	88 0d       	add	r24, r8
    8414:	99 1d       	adc	r25, r9
    8416:	aa 1d       	adc	r26, r10
    8418:	bb 1d       	adc	r27, r11
    841a:	4d 84       	ldd	r4, Y+13	; 0x0d
    841c:	5e 84       	ldd	r5, Y+14	; 0x0e
    841e:	6f 84       	ldd	r6, Y+15	; 0x0f
    8420:	78 88       	ldd	r7, Y+16	; 0x10
    8422:	fc eb       	ldi	r31, 0xBC	; 188
    8424:	4f 1a       	sub	r4, r31
    8426:	f5 e1       	ldi	r31, 0x15	; 21
    8428:	5f 0a       	sbc	r5, r31
    842a:	f1 e4       	ldi	r31, 0x41	; 65
    842c:	6f 0a       	sbc	r6, r31
    842e:	fb e5       	ldi	r31, 0x5B	; 91
    8430:	7f 0a       	sbc	r7, r31
    8432:	44 0d       	add	r20, r4
    8434:	55 1d       	adc	r21, r5
    8436:	66 1d       	adc	r22, r6
    8438:	77 1d       	adc	r23, r7
    843a:	24 01       	movw	r4, r8
    843c:	35 01       	movw	r6, r10
    843e:	40 26       	eor	r4, r16
    8440:	51 26       	eor	r5, r17
    8442:	62 26       	eor	r6, r18
    8444:	73 26       	eor	r7, r19
    8446:	48 26       	eor	r4, r24
    8448:	59 26       	eor	r5, r25
    844a:	6a 26       	eor	r6, r26
    844c:	7b 26       	eor	r7, r27
    844e:	44 0d       	add	r20, r4
    8450:	55 1d       	adc	r21, r5
    8452:	66 1d       	adc	r22, r6
    8454:	77 1d       	adc	r23, r7
    8456:	6a 01       	movw	r12, r20
    8458:	7b 01       	movw	r14, r22
    845a:	cc 0c       	add	r12, r12
    845c:	dd 1c       	adc	r13, r13
    845e:	ee 1c       	adc	r14, r14
    8460:	ff 1c       	adc	r15, r15
    8462:	cc 0c       	add	r12, r12
    8464:	dd 1c       	adc	r13, r13
    8466:	ee 1c       	adc	r14, r14
    8468:	ff 1c       	adc	r15, r15
    846a:	cc 0c       	add	r12, r12
    846c:	dd 1c       	adc	r13, r13
    846e:	ee 1c       	adc	r14, r14
    8470:	ff 1c       	adc	r15, r15
    8472:	cc 0c       	add	r12, r12
    8474:	dd 1c       	adc	r13, r13
    8476:	ee 1c       	adc	r14, r14
    8478:	ff 1c       	adc	r15, r15
    847a:	03 2e       	mov	r0, r19
    847c:	3c e1       	ldi	r19, 0x1C	; 28
    847e:	76 95       	lsr	r23
    8480:	67 95       	ror	r22
    8482:	57 95       	ror	r21
    8484:	47 95       	ror	r20
    8486:	3a 95       	dec	r19
    8488:	d1 f7       	brne	.-12     	; 0x847e <__stack+0x27f>
    848a:	30 2d       	mov	r19, r0
    848c:	4c 29       	or	r20, r12
    848e:	5d 29       	or	r21, r13
    8490:	6e 29       	or	r22, r14
    8492:	7f 29       	or	r23, r15
    8494:	48 0f       	add	r20, r24
    8496:	59 1f       	adc	r21, r25
    8498:	6a 1f       	adc	r22, r26
    849a:	7b 1f       	adc	r23, r27
    849c:	c9 8c       	ldd	r12, Y+25	; 0x19
    849e:	da 8c       	ldd	r13, Y+26	; 0x1a
    84a0:	eb 8c       	ldd	r14, Y+27	; 0x1b
    84a2:	fc 8c       	ldd	r15, Y+28	; 0x1c
    84a4:	e7 e5       	ldi	r30, 0x57	; 87
    84a6:	ce 1a       	sub	r12, r30
    84a8:	e0 e3       	ldi	r30, 0x30	; 48
    84aa:	de 0a       	sbc	r13, r30
    84ac:	e1 e2       	ldi	r30, 0x21	; 33
    84ae:	ee 0a       	sbc	r14, r30
    84b0:	e4 eb       	ldi	r30, 0xB4	; 180
    84b2:	fe 0a       	sbc	r15, r30
    84b4:	0c 0d       	add	r16, r12
    84b6:	1d 1d       	adc	r17, r13
    84b8:	2e 1d       	adc	r18, r14
    84ba:	3f 1d       	adc	r19, r15
    84bc:	6c 01       	movw	r12, r24
    84be:	7d 01       	movw	r14, r26
    84c0:	c8 24       	eor	r12, r8
    84c2:	d9 24       	eor	r13, r9
    84c4:	ea 24       	eor	r14, r10
    84c6:	fb 24       	eor	r15, r11
    84c8:	c4 26       	eor	r12, r20
    84ca:	d5 26       	eor	r13, r21
    84cc:	e6 26       	eor	r14, r22
    84ce:	f7 26       	eor	r15, r23
    84d0:	0c 0d       	add	r16, r12
    84d2:	1d 1d       	adc	r17, r13
    84d4:	2e 1d       	adc	r18, r14
    84d6:	3f 1d       	adc	r19, r15
    84d8:	68 01       	movw	r12, r16
    84da:	79 01       	movw	r14, r18
    84dc:	0b 2e       	mov	r0, r27
    84de:	bb e0       	ldi	r27, 0x0B	; 11
    84e0:	cc 0c       	add	r12, r12
    84e2:	dd 1c       	adc	r13, r13
    84e4:	ee 1c       	adc	r14, r14
    84e6:	ff 1c       	adc	r15, r15
    84e8:	ba 95       	dec	r27
    84ea:	d1 f7       	brne	.-12     	; 0x84e0 <__stack+0x2e1>
    84ec:	b0 2d       	mov	r27, r0
    84ee:	0f 2e       	mov	r0, r31
    84f0:	f5 e1       	ldi	r31, 0x15	; 21
    84f2:	36 95       	lsr	r19
    84f4:	27 95       	ror	r18
    84f6:	17 95       	ror	r17
    84f8:	07 95       	ror	r16
    84fa:	fa 95       	dec	r31
    84fc:	d1 f7       	brne	.-12     	; 0x84f2 <__stack+0x2f3>
    84fe:	f0 2d       	mov	r31, r0
    8500:	0c 29       	or	r16, r12
    8502:	1d 29       	or	r17, r13
    8504:	2e 29       	or	r18, r14
    8506:	3f 29       	or	r19, r15
    8508:	04 0f       	add	r16, r20
    850a:	15 1f       	adc	r17, r21
    850c:	26 1f       	adc	r18, r22
    850e:	37 1f       	adc	r19, r23
    8510:	cd a0       	ldd	r12, Y+37	; 0x25
    8512:	de a0       	ldd	r13, Y+38	; 0x26
    8514:	ef a0       	ldd	r14, Y+39	; 0x27
    8516:	f8 a4       	ldd	r15, Y+40	; 0x28
    8518:	f0 ea       	ldi	r31, 0xA0	; 160
    851a:	cf 1a       	sub	r12, r31
    851c:	f4 eb       	ldi	r31, 0xB4	; 180
    851e:	df 0a       	sbc	r13, r31
    8520:	f4 e4       	ldi	r31, 0x44	; 68
    8522:	ef 0a       	sbc	r14, r31
    8524:	f9 e0       	ldi	r31, 0x09	; 9
    8526:	ff 0a       	sbc	r15, r31
    8528:	8c 0c       	add	r8, r12
    852a:	9d 1c       	adc	r9, r13
    852c:	ae 1c       	adc	r10, r14
    852e:	bf 1c       	adc	r11, r15
    8530:	6a 01       	movw	r12, r20
    8532:	7b 01       	movw	r14, r22
    8534:	c8 26       	eor	r12, r24
    8536:	d9 26       	eor	r13, r25
    8538:	ea 26       	eor	r14, r26
    853a:	fb 26       	eor	r15, r27
    853c:	c0 26       	eor	r12, r16
    853e:	d1 26       	eor	r13, r17
    8540:	e2 26       	eor	r14, r18
    8542:	f3 26       	eor	r15, r19
    8544:	8c 0c       	add	r8, r12
    8546:	9d 1c       	adc	r9, r13
    8548:	ae 1c       	adc	r10, r14
    854a:	bf 1c       	adc	r11, r15
    854c:	64 01       	movw	r12, r8
    854e:	45 01       	movw	r8, r10
    8550:	56 01       	movw	r10, r12
    8552:	80 0e       	add	r8, r16
    8554:	91 1e       	adc	r9, r17
    8556:	a2 1e       	adc	r10, r18
    8558:	b3 1e       	adc	r11, r19
    855a:	c9 a8       	ldd	r12, Y+49	; 0x31
    855c:	da a8       	ldd	r13, Y+50	; 0x32
    855e:	eb a8       	ldd	r14, Y+51	; 0x33
    8560:	fc a8       	ldd	r15, Y+52	; 0x34
    8562:	e0 e9       	ldi	r30, 0x90	; 144
    8564:	ce 1a       	sub	r12, r30
    8566:	e3 e4       	ldi	r30, 0x43	; 67
    8568:	de 0a       	sbc	r13, r30
    856a:	e0 e4       	ldi	r30, 0x40	; 64
    856c:	ee 0a       	sbc	r14, r30
    856e:	e1 e4       	ldi	r30, 0x41	; 65
    8570:	fe 0a       	sbc	r15, r30
    8572:	8c 0d       	add	r24, r12
    8574:	9d 1d       	adc	r25, r13
    8576:	ae 1d       	adc	r26, r14
    8578:	bf 1d       	adc	r27, r15
    857a:	68 01       	movw	r12, r16
    857c:	79 01       	movw	r14, r18
    857e:	c4 26       	eor	r12, r20
    8580:	d5 26       	eor	r13, r21
    8582:	e6 26       	eor	r14, r22
    8584:	f7 26       	eor	r15, r23
    8586:	c8 24       	eor	r12, r8
    8588:	d9 24       	eor	r13, r9
    858a:	ea 24       	eor	r14, r10
    858c:	fb 24       	eor	r15, r11
    858e:	8c 0d       	add	r24, r12
    8590:	9d 1d       	adc	r25, r13
    8592:	ae 1d       	adc	r26, r14
    8594:	bf 1d       	adc	r27, r15
    8596:	6c 01       	movw	r12, r24
    8598:	7d 01       	movw	r14, r26
    859a:	0b 2e       	mov	r0, r27
    859c:	b9 e0       	ldi	r27, 0x09	; 9
    859e:	f6 94       	lsr	r15
    85a0:	e7 94       	ror	r14
    85a2:	d7 94       	ror	r13
    85a4:	c7 94       	ror	r12
    85a6:	ba 95       	dec	r27
    85a8:	d1 f7       	brne	.-12     	; 0x859e <__stack+0x39f>
    85aa:	b0 2d       	mov	r27, r0
    85ac:	07 2e       	mov	r0, r23
    85ae:	77 e1       	ldi	r23, 0x17	; 23
    85b0:	88 0f       	add	r24, r24
    85b2:	99 1f       	adc	r25, r25
    85b4:	aa 1f       	adc	r26, r26
    85b6:	bb 1f       	adc	r27, r27
    85b8:	7a 95       	dec	r23
    85ba:	d1 f7       	brne	.-12     	; 0x85b0 <__stack+0x3b1>
    85bc:	70 2d       	mov	r23, r0
    85be:	8c 29       	or	r24, r12
    85c0:	9d 29       	or	r25, r13
    85c2:	ae 29       	or	r26, r14
    85c4:	bf 29       	or	r27, r15
    85c6:	88 0d       	add	r24, r8
    85c8:	99 1d       	adc	r25, r9
    85ca:	aa 1d       	adc	r26, r10
    85cc:	bb 1d       	adc	r27, r11
    85ce:	21 96       	adiw	r28, 0x01	; 1
    85d0:	4c ac       	ldd	r4, Y+60	; 0x3c
    85d2:	5d ac       	ldd	r5, Y+61	; 0x3d
    85d4:	6e ac       	ldd	r6, Y+62	; 0x3e
    85d6:	7f ac       	ldd	r7, Y+63	; 0x3f
    85d8:	21 97       	sbiw	r28, 0x01	; 1
    85da:	fa e3       	ldi	r31, 0x3A	; 58
    85dc:	4f 1a       	sub	r4, r31
    85de:	f1 e8       	ldi	r31, 0x81	; 129
    85e0:	5f 0a       	sbc	r5, r31
    85e2:	f4 e6       	ldi	r31, 0x64	; 100
    85e4:	6f 0a       	sbc	r6, r31
    85e6:	f7 ed       	ldi	r31, 0xD7	; 215
    85e8:	7f 0a       	sbc	r7, r31
    85ea:	44 0d       	add	r20, r4
    85ec:	55 1d       	adc	r21, r5
    85ee:	66 1d       	adc	r22, r6
    85f0:	77 1d       	adc	r23, r7
    85f2:	24 01       	movw	r4, r8
    85f4:	35 01       	movw	r6, r10
    85f6:	40 26       	eor	r4, r16
    85f8:	51 26       	eor	r5, r17
    85fa:	62 26       	eor	r6, r18
    85fc:	73 26       	eor	r7, r19
    85fe:	73 01       	movw	r14, r6
    8600:	62 01       	movw	r12, r4
    8602:	c8 26       	eor	r12, r24
    8604:	d9 26       	eor	r13, r25
    8606:	ea 26       	eor	r14, r26
    8608:	fb 26       	eor	r15, r27
    860a:	2a 01       	movw	r4, r20
    860c:	3b 01       	movw	r6, r22
    860e:	4c 0c       	add	r4, r12
    8610:	5d 1c       	adc	r5, r13
    8612:	6e 1c       	adc	r6, r14
    8614:	7f 1c       	adc	r7, r15
    8616:	73 01       	movw	r14, r6
    8618:	62 01       	movw	r12, r4
    861a:	cc 0c       	add	r12, r12
    861c:	dd 1c       	adc	r13, r13
    861e:	ee 1c       	adc	r14, r14
    8620:	ff 1c       	adc	r15, r15
    8622:	cc 0c       	add	r12, r12
    8624:	dd 1c       	adc	r13, r13
    8626:	ee 1c       	adc	r14, r14
    8628:	ff 1c       	adc	r15, r15
    862a:	cc 0c       	add	r12, r12
    862c:	dd 1c       	adc	r13, r13
    862e:	ee 1c       	adc	r14, r14
    8630:	ff 1c       	adc	r15, r15
    8632:	cc 0c       	add	r12, r12
    8634:	dd 1c       	adc	r13, r13
    8636:	ee 1c       	adc	r14, r14
    8638:	ff 1c       	adc	r15, r15
    863a:	03 2e       	mov	r0, r19
    863c:	3c e1       	ldi	r19, 0x1C	; 28
    863e:	76 94       	lsr	r7
    8640:	67 94       	ror	r6
    8642:	57 94       	ror	r5
    8644:	47 94       	ror	r4
    8646:	3a 95       	dec	r19
    8648:	d1 f7       	brne	.-12     	; 0x863e <__stack+0x43f>
    864a:	30 2d       	mov	r19, r0
    864c:	4c 28       	or	r4, r12
    864e:	5d 28       	or	r5, r13
    8650:	6e 28       	or	r6, r14
    8652:	7f 28       	or	r7, r15
    8654:	48 0e       	add	r4, r24
    8656:	59 1e       	adc	r5, r25
    8658:	6a 1e       	adc	r6, r26
    865a:	7b 1e       	adc	r7, r27
    865c:	49 85       	ldd	r20, Y+9	; 0x09
    865e:	5a 85       	ldd	r21, Y+10	; 0x0a
    8660:	6b 85       	ldd	r22, Y+11	; 0x0b
    8662:	7c 85       	ldd	r23, Y+12	; 0x0c
    8664:	46 50       	subi	r20, 0x06	; 6
    8666:	58 4d       	sbci	r21, 0xD8	; 216
    8668:	6e 45       	sbci	r22, 0x5E	; 94
    866a:	75 41       	sbci	r23, 0x15	; 21
    866c:	04 0f       	add	r16, r20
    866e:	15 1f       	adc	r17, r21
    8670:	26 1f       	adc	r18, r22
    8672:	37 1f       	adc	r19, r23
    8674:	ac 01       	movw	r20, r24
    8676:	bd 01       	movw	r22, r26
    8678:	48 25       	eor	r20, r8
    867a:	59 25       	eor	r21, r9
    867c:	6a 25       	eor	r22, r10
    867e:	7b 25       	eor	r23, r11
    8680:	6a 01       	movw	r12, r20
    8682:	7b 01       	movw	r14, r22
    8684:	c4 24       	eor	r12, r4
    8686:	d5 24       	eor	r13, r5
    8688:	e6 24       	eor	r14, r6
    868a:	f7 24       	eor	r15, r7
    868c:	b9 01       	movw	r22, r18
    868e:	a8 01       	movw	r20, r16
    8690:	4c 0d       	add	r20, r12
    8692:	5d 1d       	adc	r21, r13
    8694:	6e 1d       	adc	r22, r14
    8696:	7f 1d       	adc	r23, r15
    8698:	6a 01       	movw	r12, r20
    869a:	7b 01       	movw	r14, r22
    869c:	0b 2e       	mov	r0, r27
    869e:	bb e0       	ldi	r27, 0x0B	; 11
    86a0:	cc 0c       	add	r12, r12
    86a2:	dd 1c       	adc	r13, r13
    86a4:	ee 1c       	adc	r14, r14
    86a6:	ff 1c       	adc	r15, r15
    86a8:	ba 95       	dec	r27
    86aa:	d1 f7       	brne	.-12     	; 0x86a0 <__stack+0x4a1>
    86ac:	b0 2d       	mov	r27, r0
    86ae:	03 2e       	mov	r0, r19
    86b0:	35 e1       	ldi	r19, 0x15	; 21
    86b2:	76 95       	lsr	r23
    86b4:	67 95       	ror	r22
    86b6:	57 95       	ror	r21
    86b8:	47 95       	ror	r20
    86ba:	3a 95       	dec	r19
    86bc:	d1 f7       	brne	.-12     	; 0x86b2 <__stack+0x4b3>
    86be:	30 2d       	mov	r19, r0
    86c0:	4c 29       	or	r20, r12
    86c2:	5d 29       	or	r21, r13
    86c4:	6e 29       	or	r22, r14
    86c6:	7f 29       	or	r23, r15
    86c8:	44 0d       	add	r20, r4
    86ca:	55 1d       	adc	r21, r5
    86cc:	66 1d       	adc	r22, r6
    86ce:	77 1d       	adc	r23, r7
    86d0:	0d 89       	ldd	r16, Y+21	; 0x15
    86d2:	1e 89       	ldd	r17, Y+22	; 0x16
    86d4:	2f 89       	ldd	r18, Y+23	; 0x17
    86d6:	38 8d       	ldd	r19, Y+24	; 0x18
    86d8:	0b 57       	subi	r16, 0x7B	; 123
    86da:	1f 4c       	sbci	r17, 0xCF	; 207
    86dc:	20 41       	sbci	r18, 0x10	; 16
    86de:	3b 42       	sbci	r19, 0x2B	; 43
    86e0:	80 0e       	add	r8, r16
    86e2:	91 1e       	adc	r9, r17
    86e4:	a2 1e       	adc	r10, r18
    86e6:	b3 1e       	adc	r11, r19
    86e8:	93 01       	movw	r18, r6
    86ea:	82 01       	movw	r16, r4
    86ec:	08 27       	eor	r16, r24
    86ee:	19 27       	eor	r17, r25
    86f0:	2a 27       	eor	r18, r26
    86f2:	3b 27       	eor	r19, r27
    86f4:	04 27       	eor	r16, r20
    86f6:	15 27       	eor	r17, r21
    86f8:	26 27       	eor	r18, r22
    86fa:	37 27       	eor	r19, r23
    86fc:	80 0e       	add	r8, r16
    86fe:	91 1e       	adc	r9, r17
    8700:	a2 1e       	adc	r10, r18
    8702:	b3 1e       	adc	r11, r19
    8704:	64 01       	movw	r12, r8
    8706:	45 01       	movw	r8, r10
    8708:	56 01       	movw	r10, r12
    870a:	84 0e       	add	r8, r20
    870c:	95 1e       	adc	r9, r21
    870e:	a6 1e       	adc	r10, r22
    8710:	b7 1e       	adc	r11, r23
    8712:	c9 a0       	ldd	r12, Y+33	; 0x21
    8714:	da a0       	ldd	r13, Y+34	; 0x22
    8716:	eb a0       	ldd	r14, Y+35	; 0x23
    8718:	fc a0       	ldd	r15, Y+36	; 0x24
    871a:	0b ef       	ldi	r16, 0xFB	; 251
    871c:	c0 1a       	sub	r12, r16
    871e:	02 ee       	ldi	r16, 0xE2	; 226
    8720:	d0 0a       	sbc	r13, r16
    8722:	07 e7       	ldi	r16, 0x77	; 119
    8724:	e0 0a       	sbc	r14, r16
    8726:	0b ef       	ldi	r16, 0xFB	; 251
    8728:	f0 0a       	sbc	r15, r16
    872a:	8c 0d       	add	r24, r12
    872c:	9d 1d       	adc	r25, r13
    872e:	ae 1d       	adc	r26, r14
    8730:	bf 1d       	adc	r27, r15
    8732:	6a 01       	movw	r12, r20
    8734:	7b 01       	movw	r14, r22
    8736:	c4 24       	eor	r12, r4
    8738:	d5 24       	eor	r13, r5
    873a:	e6 24       	eor	r14, r6
    873c:	f7 24       	eor	r15, r7
    873e:	97 01       	movw	r18, r14
    8740:	86 01       	movw	r16, r12
    8742:	08 25       	eor	r16, r8
    8744:	19 25       	eor	r17, r9
    8746:	2a 25       	eor	r18, r10
    8748:	3b 25       	eor	r19, r11
    874a:	6c 01       	movw	r12, r24
    874c:	7d 01       	movw	r14, r26
    874e:	c0 0e       	add	r12, r16
    8750:	d1 1e       	adc	r13, r17
    8752:	e2 1e       	adc	r14, r18
    8754:	f3 1e       	adc	r15, r19
    8756:	97 01       	movw	r18, r14
    8758:	86 01       	movw	r16, r12
    875a:	0f 2e       	mov	r0, r31
    875c:	f9 e0       	ldi	r31, 0x09	; 9
    875e:	36 95       	lsr	r19
    8760:	27 95       	ror	r18
    8762:	17 95       	ror	r17
    8764:	07 95       	ror	r16
    8766:	fa 95       	dec	r31
    8768:	d1 f7       	brne	.-12     	; 0x875e <__stack+0x55f>
    876a:	f0 2d       	mov	r31, r0
    876c:	0b 2e       	mov	r0, r27
    876e:	b7 e1       	ldi	r27, 0x17	; 23
    8770:	cc 0c       	add	r12, r12
    8772:	dd 1c       	adc	r13, r13
    8774:	ee 1c       	adc	r14, r14
    8776:	ff 1c       	adc	r15, r15
    8778:	ba 95       	dec	r27
    877a:	d1 f7       	brne	.-12     	; 0x8770 <__stack+0x571>
    877c:	b0 2d       	mov	r27, r0
    877e:	c0 2a       	or	r12, r16
    8780:	d1 2a       	or	r13, r17
    8782:	e2 2a       	or	r14, r18
    8784:	f3 2a       	or	r15, r19
    8786:	c8 0c       	add	r12, r8
    8788:	d9 1c       	adc	r13, r9
    878a:	ea 1c       	adc	r14, r10
    878c:	fb 1c       	adc	r15, r11
    878e:	8d a5       	ldd	r24, Y+45	; 0x2d
    8790:	9e a5       	ldd	r25, Y+46	; 0x2e
    8792:	af a5       	ldd	r26, Y+47	; 0x2f
    8794:	b8 a9       	ldd	r27, Y+48	; 0x30
    8796:	87 5c       	subi	r24, 0xC7	; 199
    8798:	9f 42       	sbci	r25, 0x2F	; 47
    879a:	ab 42       	sbci	r26, 0x2B	; 43
    879c:	b6 42       	sbci	r27, 0x26	; 38
    879e:	48 0e       	add	r4, r24
    87a0:	59 1e       	adc	r5, r25
    87a2:	6a 1e       	adc	r6, r26
    87a4:	7b 1e       	adc	r7, r27
    87a6:	95 01       	movw	r18, r10
    87a8:	84 01       	movw	r16, r8
    87aa:	04 27       	eor	r16, r20
    87ac:	15 27       	eor	r17, r21
    87ae:	26 27       	eor	r18, r22
    87b0:	37 27       	eor	r19, r23
    87b2:	0c 25       	eor	r16, r12
    87b4:	1d 25       	eor	r17, r13
    87b6:	2e 25       	eor	r18, r14
    87b8:	3f 25       	eor	r19, r15
    87ba:	40 0e       	add	r4, r16
    87bc:	51 1e       	adc	r5, r17
    87be:	62 1e       	adc	r6, r18
    87c0:	73 1e       	adc	r7, r19
    87c2:	93 01       	movw	r18, r6
    87c4:	82 01       	movw	r16, r4
    87c6:	00 0f       	add	r16, r16
    87c8:	11 1f       	adc	r17, r17
    87ca:	22 1f       	adc	r18, r18
    87cc:	33 1f       	adc	r19, r19
    87ce:	00 0f       	add	r16, r16
    87d0:	11 1f       	adc	r17, r17
    87d2:	22 1f       	adc	r18, r18
    87d4:	33 1f       	adc	r19, r19
    87d6:	00 0f       	add	r16, r16
    87d8:	11 1f       	adc	r17, r17
    87da:	22 1f       	adc	r18, r18
    87dc:	33 1f       	adc	r19, r19
    87de:	00 0f       	add	r16, r16
    87e0:	11 1f       	adc	r17, r17
    87e2:	22 1f       	adc	r18, r18
    87e4:	33 1f       	adc	r19, r19
    87e6:	03 2e       	mov	r0, r19
    87e8:	3c e1       	ldi	r19, 0x1C	; 28
    87ea:	76 94       	lsr	r7
    87ec:	67 94       	ror	r6
    87ee:	57 94       	ror	r5
    87f0:	47 94       	ror	r4
    87f2:	3a 95       	dec	r19
    87f4:	d1 f7       	brne	.-12     	; 0x87ea <__stack+0x5eb>
    87f6:	30 2d       	mov	r19, r0
    87f8:	40 2a       	or	r4, r16
    87fa:	51 2a       	or	r5, r17
    87fc:	62 2a       	or	r6, r18
    87fe:	73 2a       	or	r7, r19
    8800:	4c 0c       	add	r4, r12
    8802:	5d 1c       	adc	r5, r13
    8804:	6e 1c       	adc	r6, r14
    8806:	7f 1c       	adc	r7, r15
    8808:	89 ad       	ldd	r24, Y+57	; 0x39
    880a:	9a ad       	ldd	r25, Y+58	; 0x3a
    880c:	ab ad       	ldd	r26, Y+59	; 0x3b
    880e:	bc ad       	ldd	r27, Y+60	; 0x3c
    8810:	8b 51       	subi	r24, 0x1B	; 27
    8812:	96 46       	sbci	r25, 0x66	; 102
    8814:	a4 42       	sbci	r26, 0x24	; 36
    8816:	b9 41       	sbci	r27, 0x19	; 25
    8818:	48 0f       	add	r20, r24
    881a:	59 1f       	adc	r21, r25
    881c:	6a 1f       	adc	r22, r26
    881e:	7b 1f       	adc	r23, r27
    8820:	d7 01       	movw	r26, r14
    8822:	c6 01       	movw	r24, r12
    8824:	88 25       	eor	r24, r8
    8826:	99 25       	eor	r25, r9
    8828:	aa 25       	eor	r26, r10
    882a:	bb 25       	eor	r27, r11
    882c:	84 25       	eor	r24, r4
    882e:	95 25       	eor	r25, r5
    8830:	a6 25       	eor	r26, r6
    8832:	b7 25       	eor	r27, r7
    8834:	48 0f       	add	r20, r24
    8836:	59 1f       	adc	r21, r25
    8838:	6a 1f       	adc	r22, r26
    883a:	7b 1f       	adc	r23, r27
    883c:	db 01       	movw	r26, r22
    883e:	ca 01       	movw	r24, r20
    8840:	07 2e       	mov	r0, r23
    8842:	7b e0       	ldi	r23, 0x0B	; 11
    8844:	88 0f       	add	r24, r24
    8846:	99 1f       	adc	r25, r25
    8848:	aa 1f       	adc	r26, r26
    884a:	bb 1f       	adc	r27, r27
    884c:	7a 95       	dec	r23
    884e:	d1 f7       	brne	.-12     	; 0x8844 <__stack+0x645>
    8850:	70 2d       	mov	r23, r0
    8852:	03 2e       	mov	r0, r19
    8854:	35 e1       	ldi	r19, 0x15	; 21
    8856:	76 95       	lsr	r23
    8858:	67 95       	ror	r22
    885a:	57 95       	ror	r21
    885c:	47 95       	ror	r20
    885e:	3a 95       	dec	r19
    8860:	d1 f7       	brne	.-12     	; 0x8856 <__stack+0x657>
    8862:	30 2d       	mov	r19, r0
    8864:	48 2b       	or	r20, r24
    8866:	59 2b       	or	r21, r25
    8868:	6a 2b       	or	r22, r26
    886a:	7b 2b       	or	r23, r27
    886c:	44 0d       	add	r20, r4
    886e:	55 1d       	adc	r21, r5
    8870:	66 1d       	adc	r22, r6
    8872:	77 1d       	adc	r23, r7
    8874:	29 96       	adiw	r28, 0x09	; 9
    8876:	8c ad       	ldd	r24, Y+60	; 0x3c
    8878:	9d ad       	ldd	r25, Y+61	; 0x3d
    887a:	ae ad       	ldd	r26, Y+62	; 0x3e
    887c:	bf ad       	ldd	r27, Y+63	; 0x3f
    887e:	29 97       	sbiw	r28, 0x09	; 9
    8880:	88 50       	subi	r24, 0x08	; 8
    8882:	93 48       	sbci	r25, 0x83	; 131
    8884:	ad 45       	sbci	r26, 0x5D	; 93
    8886:	b0 4e       	sbci	r27, 0xE0	; 224
    8888:	88 0e       	add	r8, r24
    888a:	99 1e       	adc	r9, r25
    888c:	aa 1e       	adc	r10, r26
    888e:	bb 1e       	adc	r11, r27
    8890:	d3 01       	movw	r26, r6
    8892:	c2 01       	movw	r24, r4
    8894:	8c 25       	eor	r24, r12
    8896:	9d 25       	eor	r25, r13
    8898:	ae 25       	eor	r26, r14
    889a:	bf 25       	eor	r27, r15
    889c:	84 27       	eor	r24, r20
    889e:	95 27       	eor	r25, r21
    88a0:	a6 27       	eor	r26, r22
    88a2:	b7 27       	eor	r27, r23
    88a4:	88 0e       	add	r8, r24
    88a6:	99 1e       	adc	r9, r25
    88a8:	aa 1e       	adc	r10, r26
    88aa:	bb 1e       	adc	r11, r27
    88ac:	94 01       	movw	r18, r8
    88ae:	45 01       	movw	r8, r10
    88b0:	59 01       	movw	r10, r18
    88b2:	84 0e       	add	r8, r20
    88b4:	95 1e       	adc	r9, r21
    88b6:	a6 1e       	adc	r10, r22
    88b8:	b7 1e       	adc	r11, r23
    88ba:	89 89       	ldd	r24, Y+17	; 0x11
    88bc:	9a 89       	ldd	r25, Y+18	; 0x12
    88be:	ab 89       	ldd	r26, Y+19	; 0x13
    88c0:	bc 89       	ldd	r27, Y+20	; 0x14
    88c2:	8b 59       	subi	r24, 0x9B	; 155
    88c4:	99 4a       	sbci	r25, 0xA9	; 169
    88c6:	a3 45       	sbci	r26, 0x53	; 83
    88c8:	bb 43       	sbci	r27, 0x3B	; 59
    88ca:	c8 0e       	add	r12, r24
    88cc:	d9 1e       	adc	r13, r25
    88ce:	ea 1e       	adc	r14, r26
    88d0:	fb 1e       	adc	r15, r27
    88d2:	8a 01       	movw	r16, r20
    88d4:	9b 01       	movw	r18, r22
    88d6:	04 25       	eor	r16, r4
    88d8:	15 25       	eor	r17, r5
    88da:	26 25       	eor	r18, r6
    88dc:	37 25       	eor	r19, r7
    88de:	08 25       	eor	r16, r8
    88e0:	19 25       	eor	r17, r9
    88e2:	2a 25       	eor	r18, r10
    88e4:	3b 25       	eor	r19, r11
    88e6:	c0 0e       	add	r12, r16
    88e8:	d1 1e       	adc	r13, r17
    88ea:	e2 1e       	adc	r14, r18
    88ec:	f3 1e       	adc	r15, r19
    88ee:	97 01       	movw	r18, r14
    88f0:	86 01       	movw	r16, r12
    88f2:	0f 2e       	mov	r0, r31
    88f4:	f9 e0       	ldi	r31, 0x09	; 9
    88f6:	36 95       	lsr	r19
    88f8:	27 95       	ror	r18
    88fa:	17 95       	ror	r17
    88fc:	07 95       	ror	r16
    88fe:	fa 95       	dec	r31
    8900:	d1 f7       	brne	.-12     	; 0x88f6 <__stack+0x6f7>
    8902:	f0 2d       	mov	r31, r0
    8904:	0b 2e       	mov	r0, r27
    8906:	b7 e1       	ldi	r27, 0x17	; 23
    8908:	cc 0c       	add	r12, r12
    890a:	dd 1c       	adc	r13, r13
    890c:	ee 1c       	adc	r14, r14
    890e:	ff 1c       	adc	r15, r15
    8910:	ba 95       	dec	r27
    8912:	d1 f7       	brne	.-12     	; 0x8908 <__stack+0x709>
    8914:	b0 2d       	mov	r27, r0
    8916:	c0 2a       	or	r12, r16
    8918:	d1 2a       	or	r13, r17
    891a:	e2 2a       	or	r14, r18
    891c:	f3 2a       	or	r15, r19
    891e:	c8 0c       	add	r12, r8
    8920:	d9 1c       	adc	r13, r9
    8922:	ea 1c       	adc	r14, r10
    8924:	fb 1c       	adc	r15, r11
    8926:	89 85       	ldd	r24, Y+9	; 0x09
    8928:	9a 85       	ldd	r25, Y+10	; 0x0a
    892a:	ab 85       	ldd	r26, Y+11	; 0x0b
    892c:	bc 85       	ldd	r27, Y+12	; 0x0c
    892e:	8c 5b       	subi	r24, 0xBC	; 188
    8930:	9d 4d       	sbci	r25, 0xDD	; 221
    8932:	a6 4d       	sbci	r26, 0xD6	; 214
    8934:	bb 40       	sbci	r27, 0x0B	; 11
    8936:	48 0e       	add	r4, r24
    8938:	59 1e       	adc	r5, r25
    893a:	6a 1e       	adc	r6, r26
    893c:	7b 1e       	adc	r7, r27
    893e:	db 01       	movw	r26, r22
    8940:	ca 01       	movw	r24, r20
    8942:	80 95       	com	r24
    8944:	90 95       	com	r25
    8946:	a0 95       	com	r26
    8948:	b0 95       	com	r27
    894a:	8c 29       	or	r24, r12
    894c:	9d 29       	or	r25, r13
    894e:	ae 29       	or	r26, r14
    8950:	bf 29       	or	r27, r15
    8952:	8c 01       	movw	r16, r24
    8954:	9d 01       	movw	r18, r26
    8956:	08 25       	eor	r16, r8
    8958:	19 25       	eor	r17, r9
    895a:	2a 25       	eor	r18, r10
    895c:	3b 25       	eor	r19, r11
    895e:	d3 01       	movw	r26, r6
    8960:	c2 01       	movw	r24, r4
    8962:	80 0f       	add	r24, r16
    8964:	91 1f       	adc	r25, r17
    8966:	a2 1f       	adc	r26, r18
    8968:	b3 1f       	adc	r27, r19
    896a:	8c 01       	movw	r16, r24
    896c:	9d 01       	movw	r18, r26
    896e:	00 0f       	add	r16, r16
    8970:	11 1f       	adc	r17, r17
    8972:	22 1f       	adc	r18, r18
    8974:	33 1f       	adc	r19, r19
    8976:	00 0f       	add	r16, r16
    8978:	11 1f       	adc	r17, r17
    897a:	22 1f       	adc	r18, r18
    897c:	33 1f       	adc	r19, r19
    897e:	00 0f       	add	r16, r16
    8980:	11 1f       	adc	r17, r17
    8982:	22 1f       	adc	r18, r18
    8984:	33 1f       	adc	r19, r19
    8986:	00 0f       	add	r16, r16
    8988:	11 1f       	adc	r17, r17
    898a:	22 1f       	adc	r18, r18
    898c:	33 1f       	adc	r19, r19
    898e:	00 0f       	add	r16, r16
    8990:	11 1f       	adc	r17, r17
    8992:	22 1f       	adc	r18, r18
    8994:	33 1f       	adc	r19, r19
    8996:	00 0f       	add	r16, r16
    8998:	11 1f       	adc	r17, r17
    899a:	22 1f       	adc	r18, r18
    899c:	33 1f       	adc	r19, r19
    899e:	07 2e       	mov	r0, r23
    89a0:	7a e1       	ldi	r23, 0x1A	; 26
    89a2:	b6 95       	lsr	r27
    89a4:	a7 95       	ror	r26
    89a6:	97 95       	ror	r25
    89a8:	87 95       	ror	r24
    89aa:	7a 95       	dec	r23
    89ac:	d1 f7       	brne	.-12     	; 0x89a2 <__stack+0x7a3>
    89ae:	70 2d       	mov	r23, r0
    89b0:	80 2b       	or	r24, r16
    89b2:	91 2b       	or	r25, r17
    89b4:	a2 2b       	or	r26, r18
    89b6:	b3 2b       	or	r27, r19
    89b8:	8c 0d       	add	r24, r12
    89ba:	9d 1d       	adc	r25, r13
    89bc:	ae 1d       	adc	r26, r14
    89be:	bf 1d       	adc	r27, r15
    89c0:	0d a1       	ldd	r16, Y+37	; 0x25
    89c2:	1e a1       	ldd	r17, Y+38	; 0x26
    89c4:	2f a1       	ldd	r18, Y+39	; 0x27
    89c6:	38 a5       	ldd	r19, Y+40	; 0x28
    89c8:	09 56       	subi	r16, 0x69	; 105
    89ca:	11 09       	sbc	r17, r1
    89cc:	25 4d       	sbci	r18, 0xD5	; 213
    89ce:	3c 4b       	sbci	r19, 0xBC	; 188
    89d0:	40 0f       	add	r20, r16
    89d2:	51 1f       	adc	r21, r17
    89d4:	62 1f       	adc	r22, r18
    89d6:	73 1f       	adc	r23, r19
    89d8:	95 01       	movw	r18, r10
    89da:	84 01       	movw	r16, r8
    89dc:	00 95       	com	r16
    89de:	10 95       	com	r17
    89e0:	20 95       	com	r18
    89e2:	30 95       	com	r19
    89e4:	08 2b       	or	r16, r24
    89e6:	19 2b       	or	r17, r25
    89e8:	2a 2b       	or	r18, r26
    89ea:	3b 2b       	or	r19, r27
    89ec:	0c 25       	eor	r16, r12
    89ee:	1d 25       	eor	r17, r13
    89f0:	2e 25       	eor	r18, r14
    89f2:	3f 25       	eor	r19, r15
    89f4:	40 0f       	add	r20, r16
    89f6:	51 1f       	adc	r21, r17
    89f8:	62 1f       	adc	r22, r18
    89fa:	73 1f       	adc	r23, r19
    89fc:	8a 01       	movw	r16, r20
    89fe:	9b 01       	movw	r18, r22
    8a00:	0f 2e       	mov	r0, r31
    8a02:	fa e0       	ldi	r31, 0x0A	; 10
    8a04:	00 0f       	add	r16, r16
    8a06:	11 1f       	adc	r17, r17
    8a08:	22 1f       	adc	r18, r18
    8a0a:	33 1f       	adc	r19, r19
    8a0c:	fa 95       	dec	r31
    8a0e:	d1 f7       	brne	.-12     	; 0x8a04 <__stack+0x805>
    8a10:	f0 2d       	mov	r31, r0
    8a12:	03 2e       	mov	r0, r19
    8a14:	36 e1       	ldi	r19, 0x16	; 22
    8a16:	76 95       	lsr	r23
    8a18:	67 95       	ror	r22
    8a1a:	57 95       	ror	r21
    8a1c:	47 95       	ror	r20
    8a1e:	3a 95       	dec	r19
    8a20:	d1 f7       	brne	.-12     	; 0x8a16 <__stack+0x817>
    8a22:	30 2d       	mov	r19, r0
    8a24:	40 2b       	or	r20, r16
    8a26:	51 2b       	or	r21, r17
    8a28:	62 2b       	or	r22, r18
    8a2a:	73 2b       	or	r23, r19
    8a2c:	48 0f       	add	r20, r24
    8a2e:	59 1f       	adc	r21, r25
    8a30:	6a 1f       	adc	r22, r26
    8a32:	7b 1f       	adc	r23, r27
    8a34:	25 96       	adiw	r28, 0x05	; 5
    8a36:	0c ad       	ldd	r16, Y+60	; 0x3c
    8a38:	1d ad       	ldd	r17, Y+61	; 0x3d
    8a3a:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a3c:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a3e:	25 97       	sbiw	r28, 0x05	; 5
    8a40:	09 55       	subi	r16, 0x59	; 89
    8a42:	1c 4d       	sbci	r17, 0xDC	; 220
    8a44:	2b 46       	sbci	r18, 0x6B	; 107
    8a46:	34 45       	sbci	r19, 0x54	; 84
    8a48:	80 0e       	add	r8, r16
    8a4a:	91 1e       	adc	r9, r17
    8a4c:	a2 1e       	adc	r10, r18
    8a4e:	b3 1e       	adc	r11, r19
    8a50:	26 01       	movw	r4, r12
    8a52:	37 01       	movw	r6, r14
    8a54:	40 94       	com	r4
    8a56:	50 94       	com	r5
    8a58:	60 94       	com	r6
    8a5a:	70 94       	com	r7
    8a5c:	44 2a       	or	r4, r20
    8a5e:	55 2a       	or	r5, r21
    8a60:	66 2a       	or	r6, r22
    8a62:	77 2a       	or	r7, r23
    8a64:	48 26       	eor	r4, r24
    8a66:	59 26       	eor	r5, r25
    8a68:	6a 26       	eor	r6, r26
    8a6a:	7b 26       	eor	r7, r27
    8a6c:	84 0c       	add	r8, r4
    8a6e:	95 1c       	adc	r9, r5
    8a70:	a6 1c       	adc	r10, r6
    8a72:	b7 1c       	adc	r11, r7
    8a74:	24 01       	movw	r4, r8
    8a76:	35 01       	movw	r6, r10
    8a78:	03 2e       	mov	r0, r19
    8a7a:	3f e0       	ldi	r19, 0x0F	; 15
    8a7c:	44 0c       	add	r4, r4
    8a7e:	55 1c       	adc	r5, r5
    8a80:	66 1c       	adc	r6, r6
    8a82:	77 1c       	adc	r7, r7
    8a84:	3a 95       	dec	r19
    8a86:	d1 f7       	brne	.-12     	; 0x8a7c <__stack+0x87d>
    8a88:	30 2d       	mov	r19, r0
    8a8a:	07 2e       	mov	r0, r23
    8a8c:	71 e1       	ldi	r23, 0x11	; 17
    8a8e:	b6 94       	lsr	r11
    8a90:	a7 94       	ror	r10
    8a92:	97 94       	ror	r9
    8a94:	87 94       	ror	r8
    8a96:	7a 95       	dec	r23
    8a98:	d1 f7       	brne	.-12     	; 0x8a8e <__stack+0x88f>
    8a9a:	70 2d       	mov	r23, r0
    8a9c:	84 28       	or	r8, r4
    8a9e:	95 28       	or	r9, r5
    8aa0:	a6 28       	or	r10, r6
    8aa2:	b7 28       	or	r11, r7
    8aa4:	84 0e       	add	r8, r20
    8aa6:	95 1e       	adc	r9, r21
    8aa8:	a6 1e       	adc	r10, r22
    8aaa:	b7 1e       	adc	r11, r23
    8aac:	0d 8d       	ldd	r16, Y+29	; 0x1d
    8aae:	1e 8d       	ldd	r17, Y+30	; 0x1e
    8ab0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    8ab2:	38 a1       	ldd	r19, Y+32	; 0x20
    8ab4:	07 5c       	subi	r16, 0xC7	; 199
    8ab6:	1f 45       	sbci	r17, 0x5F	; 95
    8ab8:	2c 46       	sbci	r18, 0x6C	; 108
    8aba:	33 40       	sbci	r19, 0x03	; 3
    8abc:	c0 0e       	add	r12, r16
    8abe:	d1 1e       	adc	r13, r17
    8ac0:	e2 1e       	adc	r14, r18
    8ac2:	f3 1e       	adc	r15, r19
    8ac4:	8c 01       	movw	r16, r24
    8ac6:	9d 01       	movw	r18, r26
    8ac8:	00 95       	com	r16
    8aca:	10 95       	com	r17
    8acc:	20 95       	com	r18
    8ace:	30 95       	com	r19
    8ad0:	08 29       	or	r16, r8
    8ad2:	19 29       	or	r17, r9
    8ad4:	2a 29       	or	r18, r10
    8ad6:	3b 29       	or	r19, r11
    8ad8:	04 27       	eor	r16, r20
    8ada:	15 27       	eor	r17, r21
    8adc:	26 27       	eor	r18, r22
    8ade:	37 27       	eor	r19, r23
    8ae0:	c0 0e       	add	r12, r16
    8ae2:	d1 1e       	adc	r13, r17
    8ae4:	e2 1e       	adc	r14, r18
    8ae6:	f3 1e       	adc	r15, r19
    8ae8:	97 01       	movw	r18, r14
    8aea:	86 01       	movw	r16, r12
    8aec:	0f 2e       	mov	r0, r31
    8aee:	fb e0       	ldi	r31, 0x0B	; 11
    8af0:	36 95       	lsr	r19
    8af2:	27 95       	ror	r18
    8af4:	17 95       	ror	r17
    8af6:	07 95       	ror	r16
    8af8:	fa 95       	dec	r31
    8afa:	d1 f7       	brne	.-12     	; 0x8af0 <__stack+0x8f1>
    8afc:	f0 2d       	mov	r31, r0
    8afe:	0b 2e       	mov	r0, r27
    8b00:	b5 e1       	ldi	r27, 0x15	; 21
    8b02:	cc 0c       	add	r12, r12
    8b04:	dd 1c       	adc	r13, r13
    8b06:	ee 1c       	adc	r14, r14
    8b08:	ff 1c       	adc	r15, r15
    8b0a:	ba 95       	dec	r27
    8b0c:	d1 f7       	brne	.-12     	; 0x8b02 <__stack+0x903>
    8b0e:	b0 2d       	mov	r27, r0
    8b10:	c0 2a       	or	r12, r16
    8b12:	d1 2a       	or	r13, r17
    8b14:	e2 2a       	or	r14, r18
    8b16:	f3 2a       	or	r15, r19
    8b18:	c8 0c       	add	r12, r8
    8b1a:	d9 1c       	adc	r13, r9
    8b1c:	ea 1c       	adc	r14, r10
    8b1e:	fb 1c       	adc	r15, r11
    8b20:	09 ad       	ldd	r16, Y+57	; 0x39
    8b22:	1a ad       	ldd	r17, Y+58	; 0x3a
    8b24:	2b ad       	ldd	r18, Y+59	; 0x3b
    8b26:	3c ad       	ldd	r19, Y+60	; 0x3c
    8b28:	0d 53       	subi	r16, 0x3D	; 61
    8b2a:	16 4a       	sbci	r17, 0xA6	; 166
    8b2c:	24 4a       	sbci	r18, 0xA4	; 164
    8b2e:	3a 49       	sbci	r19, 0x9A	; 154
    8b30:	80 0f       	add	r24, r16
    8b32:	91 1f       	adc	r25, r17
    8b34:	a2 1f       	adc	r26, r18
    8b36:	b3 1f       	adc	r27, r19
    8b38:	2a 01       	movw	r4, r20
    8b3a:	3b 01       	movw	r6, r22
    8b3c:	40 94       	com	r4
    8b3e:	50 94       	com	r5
    8b40:	60 94       	com	r6
    8b42:	70 94       	com	r7
    8b44:	4c 28       	or	r4, r12
    8b46:	5d 28       	or	r5, r13
    8b48:	6e 28       	or	r6, r14
    8b4a:	7f 28       	or	r7, r15
    8b4c:	48 24       	eor	r4, r8
    8b4e:	59 24       	eor	r5, r9
    8b50:	6a 24       	eor	r6, r10
    8b52:	7b 24       	eor	r7, r11
    8b54:	84 0d       	add	r24, r4
    8b56:	95 1d       	adc	r25, r5
    8b58:	a6 1d       	adc	r26, r6
    8b5a:	b7 1d       	adc	r27, r7
    8b5c:	8c 01       	movw	r16, r24
    8b5e:	9d 01       	movw	r18, r26
    8b60:	00 0f       	add	r16, r16
    8b62:	11 1f       	adc	r17, r17
    8b64:	22 1f       	adc	r18, r18
    8b66:	33 1f       	adc	r19, r19
    8b68:	00 0f       	add	r16, r16
    8b6a:	11 1f       	adc	r17, r17
    8b6c:	22 1f       	adc	r18, r18
    8b6e:	33 1f       	adc	r19, r19
    8b70:	00 0f       	add	r16, r16
    8b72:	11 1f       	adc	r17, r17
    8b74:	22 1f       	adc	r18, r18
    8b76:	33 1f       	adc	r19, r19
    8b78:	00 0f       	add	r16, r16
    8b7a:	11 1f       	adc	r17, r17
    8b7c:	22 1f       	adc	r18, r18
    8b7e:	33 1f       	adc	r19, r19
    8b80:	00 0f       	add	r16, r16
    8b82:	11 1f       	adc	r17, r17
    8b84:	22 1f       	adc	r18, r18
    8b86:	33 1f       	adc	r19, r19
    8b88:	00 0f       	add	r16, r16
    8b8a:	11 1f       	adc	r17, r17
    8b8c:	22 1f       	adc	r18, r18
    8b8e:	33 1f       	adc	r19, r19
    8b90:	07 2e       	mov	r0, r23
    8b92:	7a e1       	ldi	r23, 0x1A	; 26
    8b94:	b6 95       	lsr	r27
    8b96:	a7 95       	ror	r26
    8b98:	97 95       	ror	r25
    8b9a:	87 95       	ror	r24
    8b9c:	7a 95       	dec	r23
    8b9e:	d1 f7       	brne	.-12     	; 0x8b94 <__stack+0x995>
    8ba0:	70 2d       	mov	r23, r0
    8ba2:	80 2b       	or	r24, r16
    8ba4:	91 2b       	or	r25, r17
    8ba6:	a2 2b       	or	r26, r18
    8ba8:	b3 2b       	or	r27, r19
    8baa:	8c 0d       	add	r24, r12
    8bac:	9d 1d       	adc	r25, r13
    8bae:	ae 1d       	adc	r26, r14
    8bb0:	bf 1d       	adc	r27, r15
    8bb2:	0d 89       	ldd	r16, Y+21	; 0x15
    8bb4:	1e 89       	ldd	r17, Y+22	; 0x16
    8bb6:	2f 89       	ldd	r18, Y+23	; 0x17
    8bb8:	38 8d       	ldd	r19, Y+24	; 0x18
    8bba:	0e 56       	subi	r16, 0x6E	; 110
    8bbc:	13 43       	sbci	r17, 0x33	; 51
    8bbe:	23 4f       	sbci	r18, 0xF3	; 243
    8bc0:	30 47       	sbci	r19, 0x70	; 112
    8bc2:	40 0f       	add	r20, r16
    8bc4:	51 1f       	adc	r21, r17
    8bc6:	62 1f       	adc	r22, r18
    8bc8:	73 1f       	adc	r23, r19
    8bca:	95 01       	movw	r18, r10
    8bcc:	84 01       	movw	r16, r8
    8bce:	00 95       	com	r16
    8bd0:	10 95       	com	r17
    8bd2:	20 95       	com	r18
    8bd4:	30 95       	com	r19
    8bd6:	08 2b       	or	r16, r24
    8bd8:	19 2b       	or	r17, r25
    8bda:	2a 2b       	or	r18, r26
    8bdc:	3b 2b       	or	r19, r27
    8bde:	0c 25       	eor	r16, r12
    8be0:	1d 25       	eor	r17, r13
    8be2:	2e 25       	eor	r18, r14
    8be4:	3f 25       	eor	r19, r15
    8be6:	40 0f       	add	r20, r16
    8be8:	51 1f       	adc	r21, r17
    8bea:	62 1f       	adc	r22, r18
    8bec:	73 1f       	adc	r23, r19
    8bee:	8a 01       	movw	r16, r20
    8bf0:	9b 01       	movw	r18, r22
    8bf2:	0f 2e       	mov	r0, r31
    8bf4:	fa e0       	ldi	r31, 0x0A	; 10
    8bf6:	00 0f       	add	r16, r16
    8bf8:	11 1f       	adc	r17, r17
    8bfa:	22 1f       	adc	r18, r18
    8bfc:	33 1f       	adc	r19, r19
    8bfe:	fa 95       	dec	r31
    8c00:	d1 f7       	brne	.-12     	; 0x8bf6 <__stack+0x9f7>
    8c02:	f0 2d       	mov	r31, r0
    8c04:	03 2e       	mov	r0, r19
    8c06:	36 e1       	ldi	r19, 0x16	; 22
    8c08:	76 95       	lsr	r23
    8c0a:	67 95       	ror	r22
    8c0c:	57 95       	ror	r21
    8c0e:	47 95       	ror	r20
    8c10:	3a 95       	dec	r19
    8c12:	d1 f7       	brne	.-12     	; 0x8c08 <__stack+0xa09>
    8c14:	30 2d       	mov	r19, r0
    8c16:	40 2b       	or	r20, r16
    8c18:	51 2b       	or	r21, r17
    8c1a:	62 2b       	or	r22, r18
    8c1c:	73 2b       	or	r23, r19
    8c1e:	48 0f       	add	r20, r24
    8c20:	59 1f       	adc	r21, r25
    8c22:	6a 1f       	adc	r22, r26
    8c24:	7b 1f       	adc	r23, r27
    8c26:	09 a9       	ldd	r16, Y+49	; 0x31
    8c28:	1a a9       	ldd	r17, Y+50	; 0x32
    8c2a:	2b a9       	ldd	r18, Y+51	; 0x33
    8c2c:	3c a9       	ldd	r19, Y+52	; 0x34
    8c2e:	03 58       	subi	r16, 0x83	; 131
    8c30:	1b 40       	sbci	r17, 0x0B	; 11
    8c32:	20 41       	sbci	r18, 0x10	; 16
    8c34:	31 09       	sbc	r19, r1
    8c36:	80 0e       	add	r8, r16
    8c38:	91 1e       	adc	r9, r17
    8c3a:	a2 1e       	adc	r10, r18
    8c3c:	b3 1e       	adc	r11, r19
    8c3e:	97 01       	movw	r18, r14
    8c40:	86 01       	movw	r16, r12
    8c42:	00 95       	com	r16
    8c44:	10 95       	com	r17
    8c46:	20 95       	com	r18
    8c48:	30 95       	com	r19
    8c4a:	04 2b       	or	r16, r20
    8c4c:	15 2b       	or	r17, r21
    8c4e:	26 2b       	or	r18, r22
    8c50:	37 2b       	or	r19, r23
    8c52:	28 01       	movw	r4, r16
    8c54:	39 01       	movw	r6, r18
    8c56:	48 26       	eor	r4, r24
    8c58:	59 26       	eor	r5, r25
    8c5a:	6a 26       	eor	r6, r26
    8c5c:	7b 26       	eor	r7, r27
    8c5e:	95 01       	movw	r18, r10
    8c60:	84 01       	movw	r16, r8
    8c62:	04 0d       	add	r16, r4
    8c64:	15 1d       	adc	r17, r5
    8c66:	26 1d       	adc	r18, r6
    8c68:	37 1d       	adc	r19, r7
    8c6a:	28 01       	movw	r4, r16
    8c6c:	39 01       	movw	r6, r18
    8c6e:	03 2e       	mov	r0, r19
    8c70:	3f e0       	ldi	r19, 0x0F	; 15
    8c72:	44 0c       	add	r4, r4
    8c74:	55 1c       	adc	r5, r5
    8c76:	66 1c       	adc	r6, r6
    8c78:	77 1c       	adc	r7, r7
    8c7a:	3a 95       	dec	r19
    8c7c:	d1 f7       	brne	.-12     	; 0x8c72 <__stack+0xa73>
    8c7e:	30 2d       	mov	r19, r0
    8c80:	0f 2e       	mov	r0, r31
    8c82:	f1 e1       	ldi	r31, 0x11	; 17
    8c84:	36 95       	lsr	r19
    8c86:	27 95       	ror	r18
    8c88:	17 95       	ror	r17
    8c8a:	07 95       	ror	r16
    8c8c:	fa 95       	dec	r31
    8c8e:	d1 f7       	brne	.-12     	; 0x8c84 <__stack+0xa85>
    8c90:	f0 2d       	mov	r31, r0
    8c92:	04 29       	or	r16, r4
    8c94:	15 29       	or	r17, r5
    8c96:	26 29       	or	r18, r6
    8c98:	37 29       	or	r19, r7
    8c9a:	04 0f       	add	r16, r20
    8c9c:	15 1f       	adc	r17, r21
    8c9e:	26 1f       	adc	r18, r22
    8ca0:	37 1f       	adc	r19, r23
    8ca2:	8d 84       	ldd	r8, Y+13	; 0x0d
    8ca4:	9e 84       	ldd	r9, Y+14	; 0x0e
    8ca6:	af 84       	ldd	r10, Y+15	; 0x0f
    8ca8:	b8 88       	ldd	r11, Y+16	; 0x10
    8caa:	ef e2       	ldi	r30, 0x2F	; 47
    8cac:	8e 1a       	sub	r8, r30
    8cae:	e2 ea       	ldi	r30, 0xA2	; 162
    8cb0:	9e 0a       	sbc	r9, r30
    8cb2:	eb e7       	ldi	r30, 0x7B	; 123
    8cb4:	ae 0a       	sbc	r10, r30
    8cb6:	ea e7       	ldi	r30, 0x7A	; 122
    8cb8:	be 0a       	sbc	r11, r30
    8cba:	c8 0c       	add	r12, r8
    8cbc:	d9 1c       	adc	r13, r9
    8cbe:	ea 1c       	adc	r14, r10
    8cc0:	fb 1c       	adc	r15, r11
    8cc2:	4c 01       	movw	r8, r24
    8cc4:	5d 01       	movw	r10, r26
    8cc6:	80 94       	com	r8
    8cc8:	90 94       	com	r9
    8cca:	a0 94       	com	r10
    8ccc:	b0 94       	com	r11
    8cce:	80 2a       	or	r8, r16
    8cd0:	91 2a       	or	r9, r17
    8cd2:	a2 2a       	or	r10, r18
    8cd4:	b3 2a       	or	r11, r19
    8cd6:	84 26       	eor	r8, r20
    8cd8:	95 26       	eor	r9, r21
    8cda:	a6 26       	eor	r10, r22
    8cdc:	b7 26       	eor	r11, r23
    8cde:	c8 0c       	add	r12, r8
    8ce0:	d9 1c       	adc	r13, r9
    8ce2:	ea 1c       	adc	r14, r10
    8ce4:	fb 1c       	adc	r15, r11
    8ce6:	46 01       	movw	r8, r12
    8ce8:	57 01       	movw	r10, r14
    8cea:	07 2e       	mov	r0, r23
    8cec:	7b e0       	ldi	r23, 0x0B	; 11
    8cee:	b6 94       	lsr	r11
    8cf0:	a7 94       	ror	r10
    8cf2:	97 94       	ror	r9
    8cf4:	87 94       	ror	r8
    8cf6:	7a 95       	dec	r23
    8cf8:	d1 f7       	brne	.-12     	; 0x8cee <__stack+0xaef>
    8cfa:	70 2d       	mov	r23, r0
    8cfc:	0b 2e       	mov	r0, r27
    8cfe:	b5 e1       	ldi	r27, 0x15	; 21
    8d00:	cc 0c       	add	r12, r12
    8d02:	dd 1c       	adc	r13, r13
    8d04:	ee 1c       	adc	r14, r14
    8d06:	ff 1c       	adc	r15, r15
    8d08:	ba 95       	dec	r27
    8d0a:	d1 f7       	brne	.-12     	; 0x8d00 <__stack+0xb01>
    8d0c:	b0 2d       	mov	r27, r0
    8d0e:	c8 28       	or	r12, r8
    8d10:	d9 28       	or	r13, r9
    8d12:	ea 28       	or	r14, r10
    8d14:	fb 28       	or	r15, r11
    8d16:	c0 0e       	add	r12, r16
    8d18:	d1 1e       	adc	r13, r17
    8d1a:	e2 1e       	adc	r14, r18
    8d1c:	f3 1e       	adc	r15, r19
    8d1e:	89 a4       	ldd	r8, Y+41	; 0x29
    8d20:	9a a4       	ldd	r9, Y+42	; 0x2a
    8d22:	ab a4       	ldd	r10, Y+43	; 0x2b
    8d24:	bc a4       	ldd	r11, Y+44	; 0x2c
    8d26:	f1 eb       	ldi	r31, 0xB1	; 177
    8d28:	8f 1a       	sub	r8, r31
    8d2a:	f1 e8       	ldi	r31, 0x81	; 129
    8d2c:	9f 0a       	sbc	r9, r31
    8d2e:	f7 e5       	ldi	r31, 0x57	; 87
    8d30:	af 0a       	sbc	r10, r31
    8d32:	f0 e9       	ldi	r31, 0x90	; 144
    8d34:	bf 0a       	sbc	r11, r31
    8d36:	88 0d       	add	r24, r8
    8d38:	99 1d       	adc	r25, r9
    8d3a:	aa 1d       	adc	r26, r10
    8d3c:	bb 1d       	adc	r27, r11
    8d3e:	2a 01       	movw	r4, r20
    8d40:	3b 01       	movw	r6, r22
    8d42:	40 94       	com	r4
    8d44:	50 94       	com	r5
    8d46:	60 94       	com	r6
    8d48:	70 94       	com	r7
    8d4a:	4c 28       	or	r4, r12
    8d4c:	5d 28       	or	r5, r13
    8d4e:	6e 28       	or	r6, r14
    8d50:	7f 28       	or	r7, r15
    8d52:	40 26       	eor	r4, r16
    8d54:	51 26       	eor	r5, r17
    8d56:	62 26       	eor	r6, r18
    8d58:	73 26       	eor	r7, r19
    8d5a:	84 0d       	add	r24, r4
    8d5c:	95 1d       	adc	r25, r5
    8d5e:	a6 1d       	adc	r26, r6
    8d60:	b7 1d       	adc	r27, r7
    8d62:	4c 01       	movw	r8, r24
    8d64:	5d 01       	movw	r10, r26
    8d66:	88 0c       	add	r8, r8
    8d68:	99 1c       	adc	r9, r9
    8d6a:	aa 1c       	adc	r10, r10
    8d6c:	bb 1c       	adc	r11, r11
    8d6e:	88 0c       	add	r8, r8
    8d70:	99 1c       	adc	r9, r9
    8d72:	aa 1c       	adc	r10, r10
    8d74:	bb 1c       	adc	r11, r11
    8d76:	88 0c       	add	r8, r8
    8d78:	99 1c       	adc	r9, r9
    8d7a:	aa 1c       	adc	r10, r10
    8d7c:	bb 1c       	adc	r11, r11
    8d7e:	88 0c       	add	r8, r8
    8d80:	99 1c       	adc	r9, r9
    8d82:	aa 1c       	adc	r10, r10
    8d84:	bb 1c       	adc	r11, r11
    8d86:	88 0c       	add	r8, r8
    8d88:	99 1c       	adc	r9, r9
    8d8a:	aa 1c       	adc	r10, r10
    8d8c:	bb 1c       	adc	r11, r11
    8d8e:	88 0c       	add	r8, r8
    8d90:	99 1c       	adc	r9, r9
    8d92:	aa 1c       	adc	r10, r10
    8d94:	bb 1c       	adc	r11, r11
    8d96:	07 2e       	mov	r0, r23
    8d98:	7a e1       	ldi	r23, 0x1A	; 26
    8d9a:	b6 95       	lsr	r27
    8d9c:	a7 95       	ror	r26
    8d9e:	97 95       	ror	r25
    8da0:	87 95       	ror	r24
    8da2:	7a 95       	dec	r23
    8da4:	d1 f7       	brne	.-12     	; 0x8d9a <__stack+0xb9b>
    8da6:	70 2d       	mov	r23, r0
    8da8:	88 29       	or	r24, r8
    8daa:	99 29       	or	r25, r9
    8dac:	aa 29       	or	r26, r10
    8dae:	bb 29       	or	r27, r11
    8db0:	8c 0d       	add	r24, r12
    8db2:	9d 1d       	adc	r25, r13
    8db4:	ae 1d       	adc	r26, r14
    8db6:	bf 1d       	adc	r27, r15
    8db8:	29 96       	adiw	r28, 0x09	; 9
    8dba:	8c ac       	ldd	r8, Y+60	; 0x3c
    8dbc:	9d ac       	ldd	r9, Y+61	; 0x3d
    8dbe:	ae ac       	ldd	r10, Y+62	; 0x3e
    8dc0:	bf ac       	ldd	r11, Y+63	; 0x3f
    8dc2:	29 97       	sbiw	r28, 0x09	; 9
    8dc4:	e0 e2       	ldi	r30, 0x20	; 32
    8dc6:	8e 1a       	sub	r8, r30
    8dc8:	e9 e1       	ldi	r30, 0x19	; 25
    8dca:	9e 0a       	sbc	r9, r30
    8dcc:	e3 ed       	ldi	r30, 0xD3	; 211
    8dce:	ae 0a       	sbc	r10, r30
    8dd0:	e1 e0       	ldi	r30, 0x01	; 1
    8dd2:	be 0a       	sbc	r11, r30
    8dd4:	48 0d       	add	r20, r8
    8dd6:	59 1d       	adc	r21, r9
    8dd8:	6a 1d       	adc	r22, r10
    8dda:	7b 1d       	adc	r23, r11
    8ddc:	48 01       	movw	r8, r16
    8dde:	59 01       	movw	r10, r18
    8de0:	80 94       	com	r8
    8de2:	90 94       	com	r9
    8de4:	a0 94       	com	r10
    8de6:	b0 94       	com	r11
    8de8:	88 2a       	or	r8, r24
    8dea:	99 2a       	or	r9, r25
    8dec:	aa 2a       	or	r10, r26
    8dee:	bb 2a       	or	r11, r27
    8df0:	8c 24       	eor	r8, r12
    8df2:	9d 24       	eor	r9, r13
    8df4:	ae 24       	eor	r10, r14
    8df6:	bf 24       	eor	r11, r15
    8df8:	48 0d       	add	r20, r8
    8dfa:	59 1d       	adc	r21, r9
    8dfc:	6a 1d       	adc	r22, r10
    8dfe:	7b 1d       	adc	r23, r11
    8e00:	4a 01       	movw	r8, r20
    8e02:	5b 01       	movw	r10, r22
    8e04:	07 2e       	mov	r0, r23
    8e06:	7a e0       	ldi	r23, 0x0A	; 10
    8e08:	88 0c       	add	r8, r8
    8e0a:	99 1c       	adc	r9, r9
    8e0c:	aa 1c       	adc	r10, r10
    8e0e:	bb 1c       	adc	r11, r11
    8e10:	7a 95       	dec	r23
    8e12:	d1 f7       	brne	.-12     	; 0x8e08 <__stack+0xc09>
    8e14:	70 2d       	mov	r23, r0
    8e16:	03 2e       	mov	r0, r19
    8e18:	36 e1       	ldi	r19, 0x16	; 22
    8e1a:	76 95       	lsr	r23
    8e1c:	67 95       	ror	r22
    8e1e:	57 95       	ror	r21
    8e20:	47 95       	ror	r20
    8e22:	3a 95       	dec	r19
    8e24:	d1 f7       	brne	.-12     	; 0x8e1a <__stack+0xc1b>
    8e26:	30 2d       	mov	r19, r0
    8e28:	48 29       	or	r20, r8
    8e2a:	59 29       	or	r21, r9
    8e2c:	6a 29       	or	r22, r10
    8e2e:	7b 29       	or	r23, r11
    8e30:	48 0f       	add	r20, r24
    8e32:	59 1f       	adc	r21, r25
    8e34:	6a 1f       	adc	r22, r26
    8e36:	7b 1f       	adc	r23, r27
    8e38:	89 a0       	ldd	r8, Y+33	; 0x21
    8e3a:	9a a0       	ldd	r9, Y+34	; 0x22
    8e3c:	ab a0       	ldd	r10, Y+35	; 0x23
    8e3e:	bc a0       	ldd	r11, Y+36	; 0x24
    8e40:	fc ee       	ldi	r31, 0xEC	; 236
    8e42:	8f 1a       	sub	r8, r31
    8e44:	fc eb       	ldi	r31, 0xBC	; 188
    8e46:	9f 0a       	sbc	r9, r31
    8e48:	fe ef       	ldi	r31, 0xFE	; 254
    8e4a:	af 0a       	sbc	r10, r31
    8e4c:	fc e5       	ldi	r31, 0x5C	; 92
    8e4e:	bf 0a       	sbc	r11, r31
    8e50:	08 0d       	add	r16, r8
    8e52:	19 1d       	adc	r17, r9
    8e54:	2a 1d       	adc	r18, r10
    8e56:	3b 1d       	adc	r19, r11
    8e58:	46 01       	movw	r8, r12
    8e5a:	57 01       	movw	r10, r14
    8e5c:	80 94       	com	r8
    8e5e:	90 94       	com	r9
    8e60:	a0 94       	com	r10
    8e62:	b0 94       	com	r11
    8e64:	84 2a       	or	r8, r20
    8e66:	95 2a       	or	r9, r21
    8e68:	a6 2a       	or	r10, r22
    8e6a:	b7 2a       	or	r11, r23
    8e6c:	88 26       	eor	r8, r24
    8e6e:	99 26       	eor	r9, r25
    8e70:	aa 26       	eor	r10, r26
    8e72:	bb 26       	eor	r11, r27
    8e74:	08 0d       	add	r16, r8
    8e76:	19 1d       	adc	r17, r9
    8e78:	2a 1d       	adc	r18, r10
    8e7a:	3b 1d       	adc	r19, r11
    8e7c:	48 01       	movw	r8, r16
    8e7e:	59 01       	movw	r10, r18
    8e80:	07 2e       	mov	r0, r23
    8e82:	7f e0       	ldi	r23, 0x0F	; 15
    8e84:	88 0c       	add	r8, r8
    8e86:	99 1c       	adc	r9, r9
    8e88:	aa 1c       	adc	r10, r10
    8e8a:	bb 1c       	adc	r11, r11
    8e8c:	7a 95       	dec	r23
    8e8e:	d1 f7       	brne	.-12     	; 0x8e84 <__stack+0xc85>
    8e90:	70 2d       	mov	r23, r0
    8e92:	0f 2e       	mov	r0, r31
    8e94:	f1 e1       	ldi	r31, 0x11	; 17
    8e96:	36 95       	lsr	r19
    8e98:	27 95       	ror	r18
    8e9a:	17 95       	ror	r17
    8e9c:	07 95       	ror	r16
    8e9e:	fa 95       	dec	r31
    8ea0:	d1 f7       	brne	.-12     	; 0x8e96 <__stack+0xc97>
    8ea2:	f0 2d       	mov	r31, r0
    8ea4:	08 29       	or	r16, r8
    8ea6:	19 29       	or	r17, r9
    8ea8:	2a 29       	or	r18, r10
    8eaa:	3b 29       	or	r19, r11
    8eac:	04 0f       	add	r16, r20
    8eae:	15 1f       	adc	r17, r21
    8eb0:	26 1f       	adc	r18, r22
    8eb2:	37 1f       	adc	r19, r23
    8eb4:	21 96       	adiw	r28, 0x01	; 1
    8eb6:	8c ac       	ldd	r8, Y+60	; 0x3c
    8eb8:	9d ac       	ldd	r9, Y+61	; 0x3d
    8eba:	ae ac       	ldd	r10, Y+62	; 0x3e
    8ebc:	bf ac       	ldd	r11, Y+63	; 0x3f
    8ebe:	21 97       	sbiw	r28, 0x01	; 1
    8ec0:	ef e5       	ldi	r30, 0x5F	; 95
    8ec2:	8e 1a       	sub	r8, r30
    8ec4:	ee ee       	ldi	r30, 0xEE	; 238
    8ec6:	9e 0a       	sbc	r9, r30
    8ec8:	e7 ef       	ldi	r30, 0xF7	; 247
    8eca:	ae 0a       	sbc	r10, r30
    8ecc:	e1 eb       	ldi	r30, 0xB1	; 177
    8ece:	be 0a       	sbc	r11, r30
    8ed0:	c8 0c       	add	r12, r8
    8ed2:	d9 1c       	adc	r13, r9
    8ed4:	ea 1c       	adc	r14, r10
    8ed6:	fb 1c       	adc	r15, r11
    8ed8:	4c 01       	movw	r8, r24
    8eda:	5d 01       	movw	r10, r26
    8edc:	80 94       	com	r8
    8ede:	90 94       	com	r9
    8ee0:	a0 94       	com	r10
    8ee2:	b0 94       	com	r11
    8ee4:	80 2a       	or	r8, r16
    8ee6:	91 2a       	or	r9, r17
    8ee8:	a2 2a       	or	r10, r18
    8eea:	b3 2a       	or	r11, r19
    8eec:	84 26       	eor	r8, r20
    8eee:	95 26       	eor	r9, r21
    8ef0:	a6 26       	eor	r10, r22
    8ef2:	b7 26       	eor	r11, r23
    8ef4:	c8 0c       	add	r12, r8
    8ef6:	d9 1c       	adc	r13, r9
    8ef8:	ea 1c       	adc	r14, r10
    8efa:	fb 1c       	adc	r15, r11
    8efc:	46 01       	movw	r8, r12
    8efe:	57 01       	movw	r10, r14
    8f00:	07 2e       	mov	r0, r23
    8f02:	7b e0       	ldi	r23, 0x0B	; 11
    8f04:	b6 94       	lsr	r11
    8f06:	a7 94       	ror	r10
    8f08:	97 94       	ror	r9
    8f0a:	87 94       	ror	r8
    8f0c:	7a 95       	dec	r23
    8f0e:	d1 f7       	brne	.-12     	; 0x8f04 <__stack+0xd05>
    8f10:	70 2d       	mov	r23, r0
    8f12:	0b 2e       	mov	r0, r27
    8f14:	b5 e1       	ldi	r27, 0x15	; 21
    8f16:	cc 0c       	add	r12, r12
    8f18:	dd 1c       	adc	r13, r13
    8f1a:	ee 1c       	adc	r14, r14
    8f1c:	ff 1c       	adc	r15, r15
    8f1e:	ba 95       	dec	r27
    8f20:	d1 f7       	brne	.-12     	; 0x8f16 <__stack+0xd17>
    8f22:	b0 2d       	mov	r27, r0
    8f24:	c8 28       	or	r12, r8
    8f26:	d9 28       	or	r13, r9
    8f28:	ea 28       	or	r14, r10
    8f2a:	fb 28       	or	r15, r11
    8f2c:	c0 0e       	add	r12, r16
    8f2e:	d1 1e       	adc	r13, r17
    8f30:	e2 1e       	adc	r14, r18
    8f32:	f3 1e       	adc	r15, r19
    8f34:	89 8c       	ldd	r8, Y+25	; 0x19
    8f36:	9a 8c       	ldd	r9, Y+26	; 0x1a
    8f38:	ab 8c       	ldd	r10, Y+27	; 0x1b
    8f3a:	bc 8c       	ldd	r11, Y+28	; 0x1c
    8f3c:	fe e7       	ldi	r31, 0x7E	; 126
    8f3e:	8f 1a       	sub	r8, r31
    8f40:	f1 e8       	ldi	r31, 0x81	; 129
    8f42:	9f 0a       	sbc	r9, r31
    8f44:	fc ea       	ldi	r31, 0xAC	; 172
    8f46:	af 0a       	sbc	r10, r31
    8f48:	f8 e0       	ldi	r31, 0x08	; 8
    8f4a:	bf 0a       	sbc	r11, r31
    8f4c:	88 0d       	add	r24, r8
    8f4e:	99 1d       	adc	r25, r9
    8f50:	aa 1d       	adc	r26, r10
    8f52:	bb 1d       	adc	r27, r11
    8f54:	2a 01       	movw	r4, r20
    8f56:	3b 01       	movw	r6, r22
    8f58:	40 94       	com	r4
    8f5a:	50 94       	com	r5
    8f5c:	60 94       	com	r6
    8f5e:	70 94       	com	r7
    8f60:	4c 28       	or	r4, r12
    8f62:	5d 28       	or	r5, r13
    8f64:	6e 28       	or	r6, r14
    8f66:	7f 28       	or	r7, r15
    8f68:	40 26       	eor	r4, r16
    8f6a:	51 26       	eor	r5, r17
    8f6c:	62 26       	eor	r6, r18
    8f6e:	73 26       	eor	r7, r19
    8f70:	84 0d       	add	r24, r4
    8f72:	95 1d       	adc	r25, r5
    8f74:	a6 1d       	adc	r26, r6
    8f76:	b7 1d       	adc	r27, r7
    8f78:	4c 01       	movw	r8, r24
    8f7a:	5d 01       	movw	r10, r26
    8f7c:	88 0c       	add	r8, r8
    8f7e:	99 1c       	adc	r9, r9
    8f80:	aa 1c       	adc	r10, r10
    8f82:	bb 1c       	adc	r11, r11
    8f84:	88 0c       	add	r8, r8
    8f86:	99 1c       	adc	r9, r9
    8f88:	aa 1c       	adc	r10, r10
    8f8a:	bb 1c       	adc	r11, r11
    8f8c:	88 0c       	add	r8, r8
    8f8e:	99 1c       	adc	r9, r9
    8f90:	aa 1c       	adc	r10, r10
    8f92:	bb 1c       	adc	r11, r11
    8f94:	88 0c       	add	r8, r8
    8f96:	99 1c       	adc	r9, r9
    8f98:	aa 1c       	adc	r10, r10
    8f9a:	bb 1c       	adc	r11, r11
    8f9c:	88 0c       	add	r8, r8
    8f9e:	99 1c       	adc	r9, r9
    8fa0:	aa 1c       	adc	r10, r10
    8fa2:	bb 1c       	adc	r11, r11
    8fa4:	88 0c       	add	r8, r8
    8fa6:	99 1c       	adc	r9, r9
    8fa8:	aa 1c       	adc	r10, r10
    8faa:	bb 1c       	adc	r11, r11
    8fac:	07 2e       	mov	r0, r23
    8fae:	7a e1       	ldi	r23, 0x1A	; 26
    8fb0:	b6 95       	lsr	r27
    8fb2:	a7 95       	ror	r26
    8fb4:	97 95       	ror	r25
    8fb6:	87 95       	ror	r24
    8fb8:	7a 95       	dec	r23
    8fba:	d1 f7       	brne	.-12     	; 0x8fb0 <__stack+0xdb1>
    8fbc:	70 2d       	mov	r23, r0
    8fbe:	88 29       	or	r24, r8
    8fc0:	99 29       	or	r25, r9
    8fc2:	aa 29       	or	r26, r10
    8fc4:	bb 29       	or	r27, r11
    8fc6:	8c 0d       	add	r24, r12
    8fc8:	9d 1d       	adc	r25, r13
    8fca:	ae 1d       	adc	r26, r14
    8fcc:	bf 1d       	adc	r27, r15
    8fce:	8d a8       	ldd	r8, Y+53	; 0x35
    8fd0:	9e a8       	ldd	r9, Y+54	; 0x36
    8fd2:	af a8       	ldd	r10, Y+55	; 0x37
    8fd4:	b8 ac       	ldd	r11, Y+56	; 0x38
    8fd6:	eb ec       	ldi	r30, 0xCB	; 203
    8fd8:	8e 1a       	sub	r8, r30
    8fda:	ed e0       	ldi	r30, 0x0D	; 13
    8fdc:	9e 0a       	sbc	r9, r30
    8fde:	e5 ec       	ldi	r30, 0xC5	; 197
    8fe0:	ae 0a       	sbc	r10, r30
    8fe2:	e2 e4       	ldi	r30, 0x42	; 66
    8fe4:	be 0a       	sbc	r11, r30
    8fe6:	48 0d       	add	r20, r8
    8fe8:	59 1d       	adc	r21, r9
    8fea:	6a 1d       	adc	r22, r10
    8fec:	7b 1d       	adc	r23, r11
    8fee:	48 01       	movw	r8, r16
    8ff0:	59 01       	movw	r10, r18
    8ff2:	80 94       	com	r8
    8ff4:	90 94       	com	r9
    8ff6:	a0 94       	com	r10
    8ff8:	b0 94       	com	r11
    8ffa:	88 2a       	or	r8, r24
    8ffc:	99 2a       	or	r9, r25
    8ffe:	aa 2a       	or	r10, r26
    9000:	bb 2a       	or	r11, r27
    9002:	8c 24       	eor	r8, r12
    9004:	9d 24       	eor	r9, r13
    9006:	ae 24       	eor	r10, r14
    9008:	bf 24       	eor	r11, r15
    900a:	48 0d       	add	r20, r8
    900c:	59 1d       	adc	r21, r9
    900e:	6a 1d       	adc	r22, r10
    9010:	7b 1d       	adc	r23, r11
    9012:	4a 01       	movw	r8, r20
    9014:	5b 01       	movw	r10, r22
    9016:	07 2e       	mov	r0, r23
    9018:	7a e0       	ldi	r23, 0x0A	; 10
    901a:	88 0c       	add	r8, r8
    901c:	99 1c       	adc	r9, r9
    901e:	aa 1c       	adc	r10, r10
    9020:	bb 1c       	adc	r11, r11
    9022:	7a 95       	dec	r23
    9024:	d1 f7       	brne	.-12     	; 0x901a <__stack+0xe1b>
    9026:	70 2d       	mov	r23, r0
    9028:	03 2e       	mov	r0, r19
    902a:	36 e1       	ldi	r19, 0x16	; 22
    902c:	76 95       	lsr	r23
    902e:	67 95       	ror	r22
    9030:	57 95       	ror	r21
    9032:	47 95       	ror	r20
    9034:	3a 95       	dec	r19
    9036:	d1 f7       	brne	.-12     	; 0x902c <__stack+0xe2d>
    9038:	30 2d       	mov	r19, r0
    903a:	48 29       	or	r20, r8
    903c:	59 29       	or	r21, r9
    903e:	6a 29       	or	r22, r10
    9040:	7b 29       	or	r23, r11
    9042:	48 0f       	add	r20, r24
    9044:	59 1f       	adc	r21, r25
    9046:	6a 1f       	adc	r22, r26
    9048:	7b 1f       	adc	r23, r27
    904a:	89 88       	ldd	r8, Y+17	; 0x11
    904c:	9a 88       	ldd	r9, Y+18	; 0x12
    904e:	ab 88       	ldd	r10, Y+19	; 0x13
    9050:	bc 88       	ldd	r11, Y+20	; 0x14
    9052:	f5 e4       	ldi	r31, 0x45	; 69
    9054:	8f 1a       	sub	r8, r31
    9056:	fd e2       	ldi	r31, 0x2D	; 45
    9058:	9f 0a       	sbc	r9, r31
    905a:	f8 e2       	ldi	r31, 0x28	; 40
    905c:	af 0a       	sbc	r10, r31
    905e:	f5 ed       	ldi	r31, 0xD5	; 213
    9060:	bf 0a       	sbc	r11, r31
    9062:	08 0d       	add	r16, r8
    9064:	19 1d       	adc	r17, r9
    9066:	2a 1d       	adc	r18, r10
    9068:	3b 1d       	adc	r19, r11
    906a:	46 01       	movw	r8, r12
    906c:	57 01       	movw	r10, r14
    906e:	80 94       	com	r8
    9070:	90 94       	com	r9
    9072:	a0 94       	com	r10
    9074:	b0 94       	com	r11
    9076:	84 2a       	or	r8, r20
    9078:	95 2a       	or	r9, r21
    907a:	a6 2a       	or	r10, r22
    907c:	b7 2a       	or	r11, r23
    907e:	88 26       	eor	r8, r24
    9080:	99 26       	eor	r9, r25
    9082:	aa 26       	eor	r10, r26
    9084:	bb 26       	eor	r11, r27
    9086:	08 0d       	add	r16, r8
    9088:	19 1d       	adc	r17, r9
    908a:	2a 1d       	adc	r18, r10
    908c:	3b 1d       	adc	r19, r11
    908e:	48 01       	movw	r8, r16
    9090:	59 01       	movw	r10, r18
    9092:	07 2e       	mov	r0, r23
    9094:	7f e0       	ldi	r23, 0x0F	; 15
    9096:	88 0c       	add	r8, r8
    9098:	99 1c       	adc	r9, r9
    909a:	aa 1c       	adc	r10, r10
    909c:	bb 1c       	adc	r11, r11
    909e:	7a 95       	dec	r23
    90a0:	d1 f7       	brne	.-12     	; 0x9096 <__stack+0xe97>
    90a2:	70 2d       	mov	r23, r0
    90a4:	0f 2e       	mov	r0, r31
    90a6:	f1 e1       	ldi	r31, 0x11	; 17
    90a8:	36 95       	lsr	r19
    90aa:	27 95       	ror	r18
    90ac:	17 95       	ror	r17
    90ae:	07 95       	ror	r16
    90b0:	fa 95       	dec	r31
    90b2:	d1 f7       	brne	.-12     	; 0x90a8 <__stack+0xea9>
    90b4:	f0 2d       	mov	r31, r0
    90b6:	08 29       	or	r16, r8
    90b8:	19 29       	or	r17, r9
    90ba:	2a 29       	or	r18, r10
    90bc:	3b 29       	or	r19, r11
    90be:	04 0f       	add	r16, r20
    90c0:	15 1f       	adc	r17, r21
    90c2:	26 1f       	adc	r18, r22
    90c4:	37 1f       	adc	r19, r23
    90c6:	8d a4       	ldd	r8, Y+45	; 0x2d
    90c8:	9e a4       	ldd	r9, Y+46	; 0x2e
    90ca:	af a4       	ldd	r10, Y+47	; 0x2f
    90cc:	b8 a8       	ldd	r11, Y+48	; 0x30
    90ce:	ef e6       	ldi	r30, 0x6F	; 111
    90d0:	8e 1a       	sub	r8, r30
    90d2:	ec e2       	ldi	r30, 0x2C	; 44
    90d4:	9e 0a       	sbc	r9, r30
    90d6:	e9 e7       	ldi	r30, 0x79	; 121
    90d8:	ae 0a       	sbc	r10, r30
    90da:	e4 e1       	ldi	r30, 0x14	; 20
    90dc:	be 0a       	sbc	r11, r30
    90de:	c8 0c       	add	r12, r8
    90e0:	d9 1c       	adc	r13, r9
    90e2:	ea 1c       	adc	r14, r10
    90e4:	fb 1c       	adc	r15, r11
    90e6:	61 96       	adiw	r28, 0x11	; 17
    90e8:	8c ac       	ldd	r8, Y+60	; 0x3c
    90ea:	9d ac       	ldd	r9, Y+61	; 0x3d
    90ec:	ae ac       	ldd	r10, Y+62	; 0x3e
    90ee:	bf ac       	ldd	r11, Y+63	; 0x3f
    90f0:	61 97       	sbiw	r28, 0x11	; 17
    90f2:	88 0e       	add	r8, r24
    90f4:	99 1e       	adc	r9, r25
    90f6:	aa 1e       	adc	r10, r26
    90f8:	bb 1e       	adc	r11, r27
    90fa:	f1 01       	movw	r30, r2
    90fc:	80 86       	std	Z+8, r8	; 0x08
    90fe:	91 86       	std	Z+9, r9	; 0x09
    9100:	a2 86       	std	Z+10, r10	; 0x0a
    9102:	b3 86       	std	Z+11, r11	; 0x0b
    9104:	89 80       	ldd	r8, Y+1	; 0x01
    9106:	9a 80       	ldd	r9, Y+2	; 0x02
    9108:	ab 80       	ldd	r10, Y+3	; 0x03
    910a:	bc 80       	ldd	r11, Y+4	; 0x04
    910c:	80 0e       	add	r8, r16
    910e:	91 1e       	adc	r9, r17
    9110:	a2 1e       	adc	r10, r18
    9112:	b3 1e       	adc	r11, r19
    9114:	80 95       	com	r24
    9116:	90 95       	com	r25
    9118:	a0 95       	com	r26
    911a:	b0 95       	com	r27
    911c:	80 2b       	or	r24, r16
    911e:	91 2b       	or	r25, r17
    9120:	a2 2b       	or	r26, r18
    9122:	b3 2b       	or	r27, r19
    9124:	84 27       	eor	r24, r20
    9126:	95 27       	eor	r25, r21
    9128:	a6 27       	eor	r26, r22
    912a:	b7 27       	eor	r27, r23
    912c:	c8 0e       	add	r12, r24
    912e:	d9 1e       	adc	r13, r25
    9130:	ea 1e       	adc	r14, r26
    9132:	fb 1e       	adc	r15, r27
    9134:	26 01       	movw	r4, r12
    9136:	37 01       	movw	r6, r14
    9138:	03 2e       	mov	r0, r19
    913a:	3b e0       	ldi	r19, 0x0B	; 11
    913c:	76 94       	lsr	r7
    913e:	67 94       	ror	r6
    9140:	57 94       	ror	r5
    9142:	47 94       	ror	r4
    9144:	3a 95       	dec	r19
    9146:	d1 f7       	brne	.-12     	; 0x913c <__stack+0xf3d>
    9148:	30 2d       	mov	r19, r0
    914a:	0b 2e       	mov	r0, r27
    914c:	b5 e1       	ldi	r27, 0x15	; 21
    914e:	cc 0c       	add	r12, r12
    9150:	dd 1c       	adc	r13, r13
    9152:	ee 1c       	adc	r14, r14
    9154:	ff 1c       	adc	r15, r15
    9156:	ba 95       	dec	r27
    9158:	d1 f7       	brne	.-12     	; 0x914e <__stack+0xf4f>
    915a:	b0 2d       	mov	r27, r0
    915c:	c4 28       	or	r12, r4
    915e:	d5 28       	or	r13, r5
    9160:	e6 28       	or	r14, r6
    9162:	f7 28       	or	r15, r7
    9164:	8c 0c       	add	r8, r12
    9166:	9d 1c       	adc	r9, r13
    9168:	ae 1c       	adc	r10, r14
    916a:	bf 1c       	adc	r11, r15
    916c:	84 86       	std	Z+12, r8	; 0x0c
    916e:	95 86       	std	Z+13, r9	; 0x0d
    9170:	a6 86       	std	Z+14, r10	; 0x0e
    9172:	b7 86       	std	Z+15, r11	; 0x0f
    9174:	cd 80       	ldd	r12, Y+5	; 0x05
    9176:	de 80       	ldd	r13, Y+6	; 0x06
    9178:	ef 80       	ldd	r14, Y+7	; 0x07
    917a:	f8 84       	ldd	r15, Y+8	; 0x08
    917c:	0c 0d       	add	r16, r12
    917e:	1d 1d       	adc	r17, r13
    9180:	2e 1d       	adc	r18, r14
    9182:	3f 1d       	adc	r19, r15
    9184:	00 8b       	std	Z+16, r16	; 0x10
    9186:	11 8b       	std	Z+17, r17	; 0x11
    9188:	22 8b       	std	Z+18, r18	; 0x12
    918a:	33 8b       	std	Z+19, r19	; 0x13
    918c:	2d 96       	adiw	r28, 0x0d	; 13
    918e:	cc ac       	ldd	r12, Y+60	; 0x3c
    9190:	dd ac       	ldd	r13, Y+61	; 0x3d
    9192:	ee ac       	ldd	r14, Y+62	; 0x3e
    9194:	ff ac       	ldd	r15, Y+63	; 0x3f
    9196:	2d 97       	sbiw	r28, 0x0d	; 13
    9198:	4c 0d       	add	r20, r12
    919a:	5d 1d       	adc	r21, r13
    919c:	6e 1d       	adc	r22, r14
    919e:	7f 1d       	adc	r23, r15
    91a0:	44 8b       	std	Z+20, r20	; 0x14
    91a2:	55 8b       	std	Z+21, r21	; 0x15
    91a4:	66 8b       	std	Z+22, r22	; 0x16
    91a6:	77 8b       	std	Z+23, r23	; 0x17
    91a8:	c0 5b       	subi	r28, 0xB0	; 176
    91aa:	df 4f       	sbci	r29, 0xFF	; 255
    91ac:	0f b6       	in	r0, 0x3f	; 63
    91ae:	f8 94       	cli
    91b0:	de bf       	out	0x3e, r29	; 62
    91b2:	0f be       	out	0x3f, r0	; 63
    91b4:	cd bf       	out	0x3d, r28	; 61
    91b6:	df 91       	pop	r29
    91b8:	cf 91       	pop	r28
    91ba:	1f 91       	pop	r17
    91bc:	0f 91       	pop	r16
    91be:	ff 90       	pop	r15
    91c0:	ef 90       	pop	r14
    91c2:	df 90       	pop	r13
    91c4:	cf 90       	pop	r12
    91c6:	bf 90       	pop	r11
    91c8:	af 90       	pop	r10
    91ca:	9f 90       	pop	r9
    91cc:	8f 90       	pop	r8
    91ce:	7f 90       	pop	r7
    91d0:	6f 90       	pop	r6
    91d2:	5f 90       	pop	r5
    91d4:	4f 90       	pop	r4
    91d6:	3f 90       	pop	r3
    91d8:	2f 90       	pop	r2
    91da:	08 95       	ret

000091dc <md5_starts>:
    91dc:	fc 01       	movw	r30, r24
    91de:	10 82       	st	Z, r1
    91e0:	11 82       	std	Z+1, r1	; 0x01
    91e2:	12 82       	std	Z+2, r1	; 0x02
    91e4:	13 82       	std	Z+3, r1	; 0x03
    91e6:	14 82       	std	Z+4, r1	; 0x04
    91e8:	15 82       	std	Z+5, r1	; 0x05
    91ea:	16 82       	std	Z+6, r1	; 0x06
    91ec:	17 82       	std	Z+7, r1	; 0x07
    91ee:	81 e0       	ldi	r24, 0x01	; 1
    91f0:	93 e2       	ldi	r25, 0x23	; 35
    91f2:	a5 e4       	ldi	r26, 0x45	; 69
    91f4:	b7 e6       	ldi	r27, 0x67	; 103
    91f6:	80 87       	std	Z+8, r24	; 0x08
    91f8:	91 87       	std	Z+9, r25	; 0x09
    91fa:	a2 87       	std	Z+10, r26	; 0x0a
    91fc:	b3 87       	std	Z+11, r27	; 0x0b
    91fe:	89 e8       	ldi	r24, 0x89	; 137
    9200:	9b ea       	ldi	r25, 0xAB	; 171
    9202:	ad ec       	ldi	r26, 0xCD	; 205
    9204:	bf ee       	ldi	r27, 0xEF	; 239
    9206:	84 87       	std	Z+12, r24	; 0x0c
    9208:	95 87       	std	Z+13, r25	; 0x0d
    920a:	a6 87       	std	Z+14, r26	; 0x0e
    920c:	b7 87       	std	Z+15, r27	; 0x0f
    920e:	8e ef       	ldi	r24, 0xFE	; 254
    9210:	9c ed       	ldi	r25, 0xDC	; 220
    9212:	aa eb       	ldi	r26, 0xBA	; 186
    9214:	b8 e9       	ldi	r27, 0x98	; 152
    9216:	80 8b       	std	Z+16, r24	; 0x10
    9218:	91 8b       	std	Z+17, r25	; 0x11
    921a:	a2 8b       	std	Z+18, r26	; 0x12
    921c:	b3 8b       	std	Z+19, r27	; 0x13
    921e:	86 e7       	ldi	r24, 0x76	; 118
    9220:	94 e5       	ldi	r25, 0x54	; 84
    9222:	a2 e3       	ldi	r26, 0x32	; 50
    9224:	b0 e1       	ldi	r27, 0x10	; 16
    9226:	84 8b       	std	Z+20, r24	; 0x14
    9228:	95 8b       	std	Z+21, r25	; 0x15
    922a:	a6 8b       	std	Z+22, r26	; 0x16
    922c:	b7 8b       	std	Z+23, r27	; 0x17
    922e:	08 95       	ret

00009230 <md5_update>:
    9230:	8f 92       	push	r8
    9232:	9f 92       	push	r9
    9234:	af 92       	push	r10
    9236:	bf 92       	push	r11
    9238:	cf 92       	push	r12
    923a:	df 92       	push	r13
    923c:	ef 92       	push	r14
    923e:	ff 92       	push	r15
    9240:	0f 93       	push	r16
    9242:	1f 93       	push	r17
    9244:	cf 93       	push	r28
    9246:	df 93       	push	r29
    9248:	7c 01       	movw	r14, r24
    924a:	8b 01       	movw	r16, r22
    924c:	ea 01       	movw	r28, r20
    924e:	1c 16       	cp	r1, r28
    9250:	1d 06       	cpc	r1, r29
    9252:	0c f0       	brlt	.+2      	; 0x9256 <md5_update+0x26>
    9254:	6b c0       	rjmp	.+214    	; 0x932c <md5_update+0xfc>
    9256:	fc 01       	movw	r30, r24
    9258:	80 81       	ld	r24, Z
    925a:	91 81       	ldd	r25, Z+1	; 0x01
    925c:	a2 81       	ldd	r26, Z+2	; 0x02
    925e:	b3 81       	ldd	r27, Z+3	; 0x03
    9260:	4c 01       	movw	r8, r24
    9262:	5d 01       	movw	r10, r26
    9264:	ff e3       	ldi	r31, 0x3F	; 63
    9266:	8f 22       	and	r8, r31
    9268:	99 24       	eor	r9, r9
    926a:	aa 24       	eor	r10, r10
    926c:	bb 24       	eor	r11, r11
    926e:	05 2e       	mov	r0, r21
    9270:	00 0c       	add	r0, r0
    9272:	66 0b       	sbc	r22, r22
    9274:	77 0b       	sbc	r23, r23
    9276:	84 0f       	add	r24, r20
    9278:	95 1f       	adc	r25, r21
    927a:	a6 1f       	adc	r26, r22
    927c:	b7 1f       	adc	r27, r23
    927e:	f7 01       	movw	r30, r14
    9280:	80 83       	st	Z, r24
    9282:	91 83       	std	Z+1, r25	; 0x01
    9284:	a2 83       	std	Z+2, r26	; 0x02
    9286:	b3 83       	std	Z+3, r27	; 0x03
    9288:	84 17       	cp	r24, r20
    928a:	95 07       	cpc	r25, r21
    928c:	a6 07       	cpc	r26, r22
    928e:	b7 07       	cpc	r27, r23
    9290:	58 f4       	brcc	.+22     	; 0x92a8 <md5_update+0x78>
    9292:	84 81       	ldd	r24, Z+4	; 0x04
    9294:	95 81       	ldd	r25, Z+5	; 0x05
    9296:	a6 81       	ldd	r26, Z+6	; 0x06
    9298:	b7 81       	ldd	r27, Z+7	; 0x07
    929a:	01 96       	adiw	r24, 0x01	; 1
    929c:	a1 1d       	adc	r26, r1
    929e:	b1 1d       	adc	r27, r1
    92a0:	84 83       	std	Z+4, r24	; 0x04
    92a2:	95 83       	std	Z+5, r25	; 0x05
    92a4:	a6 83       	std	Z+6, r26	; 0x06
    92a6:	b7 83       	std	Z+7, r27	; 0x07
    92a8:	81 14       	cp	r8, r1
    92aa:	91 04       	cpc	r9, r1
    92ac:	a1 04       	cpc	r10, r1
    92ae:	b1 04       	cpc	r11, r1
    92b0:	c9 f1       	breq	.+114    	; 0x9324 <md5_update+0xf4>
    92b2:	80 e4       	ldi	r24, 0x40	; 64
    92b4:	90 e0       	ldi	r25, 0x00	; 0
    92b6:	6c 01       	movw	r12, r24
    92b8:	c8 18       	sub	r12, r8
    92ba:	d9 08       	sbc	r13, r9
    92bc:	cc 15       	cp	r28, r12
    92be:	dd 05       	cpc	r29, r13
    92c0:	8c f1       	brlt	.+98     	; 0x9324 <md5_update+0xf4>
    92c2:	c4 01       	movw	r24, r8
    92c4:	48 96       	adiw	r24, 0x18	; 24
    92c6:	a6 01       	movw	r20, r12
    92c8:	b8 01       	movw	r22, r16
    92ca:	8e 0d       	add	r24, r14
    92cc:	9f 1d       	adc	r25, r15
    92ce:	45 d3       	rcall	.+1674   	; 0x995a <memcpy>
    92d0:	b7 01       	movw	r22, r14
    92d2:	68 5e       	subi	r22, 0xE8	; 232
    92d4:	7f 4f       	sbci	r23, 0xFF	; 255
    92d6:	c7 01       	movw	r24, r14
    92d8:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <md5_process>
    92dc:	0c 0d       	add	r16, r12
    92de:	1d 1d       	adc	r17, r13
    92e0:	cc 19       	sub	r28, r12
    92e2:	dd 09       	sbc	r29, r13
    92e4:	c0 34       	cpi	r28, 0x40	; 64
    92e6:	d1 05       	cpc	r29, r1
    92e8:	7c f0       	brlt	.+30     	; 0x9308 <md5_update+0xd8>
    92ea:	81 2c       	mov	r8, r1
    92ec:	91 2c       	mov	r9, r1
    92ee:	54 01       	movw	r10, r8
    92f0:	b8 01       	movw	r22, r16
    92f2:	c7 01       	movw	r24, r14
    92f4:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <md5_process>
    92f8:	00 5c       	subi	r16, 0xC0	; 192
    92fa:	1f 4f       	sbci	r17, 0xFF	; 255
    92fc:	c0 54       	subi	r28, 0x40	; 64
    92fe:	d1 09       	sbc	r29, r1
    9300:	c0 34       	cpi	r28, 0x40	; 64
    9302:	d1 05       	cpc	r29, r1
    9304:	ac f7       	brge	.-22     	; 0x92f0 <md5_update+0xc0>
    9306:	03 c0       	rjmp	.+6      	; 0x930e <md5_update+0xde>
    9308:	81 2c       	mov	r8, r1
    930a:	91 2c       	mov	r9, r1
    930c:	54 01       	movw	r10, r8
    930e:	1c 16       	cp	r1, r28
    9310:	1d 06       	cpc	r1, r29
    9312:	64 f4       	brge	.+24     	; 0x932c <md5_update+0xfc>
    9314:	c4 01       	movw	r24, r8
    9316:	48 96       	adiw	r24, 0x18	; 24
    9318:	ae 01       	movw	r20, r28
    931a:	b8 01       	movw	r22, r16
    931c:	8e 0d       	add	r24, r14
    931e:	9f 1d       	adc	r25, r15
    9320:	1c d3       	rcall	.+1592   	; 0x995a <memcpy>
    9322:	04 c0       	rjmp	.+8      	; 0x932c <md5_update+0xfc>
    9324:	c0 34       	cpi	r28, 0x40	; 64
    9326:	d1 05       	cpc	r29, r1
    9328:	1c f7       	brge	.-58     	; 0x92f0 <md5_update+0xc0>
    932a:	f4 cf       	rjmp	.-24     	; 0x9314 <md5_update+0xe4>
    932c:	df 91       	pop	r29
    932e:	cf 91       	pop	r28
    9330:	1f 91       	pop	r17
    9332:	0f 91       	pop	r16
    9334:	ff 90       	pop	r15
    9336:	ef 90       	pop	r14
    9338:	df 90       	pop	r13
    933a:	cf 90       	pop	r12
    933c:	bf 90       	pop	r11
    933e:	af 90       	pop	r10
    9340:	9f 90       	pop	r9
    9342:	8f 90       	pop	r8
    9344:	08 95       	ret

00009346 <md5_finish>:
    9346:	8f 92       	push	r8
    9348:	9f 92       	push	r9
    934a:	af 92       	push	r10
    934c:	bf 92       	push	r11
    934e:	ef 92       	push	r14
    9350:	ff 92       	push	r15
    9352:	0f 93       	push	r16
    9354:	1f 93       	push	r17
    9356:	cf 93       	push	r28
    9358:	df 93       	push	r29
    935a:	cd b7       	in	r28, 0x3d	; 61
    935c:	de b7       	in	r29, 0x3e	; 62
    935e:	28 97       	sbiw	r28, 0x08	; 8
    9360:	0f b6       	in	r0, 0x3f	; 63
    9362:	f8 94       	cli
    9364:	de bf       	out	0x3e, r29	; 62
    9366:	0f be       	out	0x3f, r0	; 63
    9368:	cd bf       	out	0x3d, r28	; 61
    936a:	8c 01       	movw	r16, r24
    936c:	7b 01       	movw	r14, r22
    936e:	fc 01       	movw	r30, r24
    9370:	80 81       	ld	r24, Z
    9372:	91 81       	ldd	r25, Z+1	; 0x01
    9374:	a2 81       	ldd	r26, Z+2	; 0x02
    9376:	b3 81       	ldd	r27, Z+3	; 0x03
    9378:	44 81       	ldd	r20, Z+4	; 0x04
    937a:	55 81       	ldd	r21, Z+5	; 0x05
    937c:	66 81       	ldd	r22, Z+6	; 0x06
    937e:	77 81       	ldd	r23, Z+7	; 0x07
    9380:	44 0f       	add	r20, r20
    9382:	55 1f       	adc	r21, r21
    9384:	66 1f       	adc	r22, r22
    9386:	77 1f       	adc	r23, r23
    9388:	44 0f       	add	r20, r20
    938a:	55 1f       	adc	r21, r21
    938c:	66 1f       	adc	r22, r22
    938e:	77 1f       	adc	r23, r23
    9390:	44 0f       	add	r20, r20
    9392:	55 1f       	adc	r21, r21
    9394:	66 1f       	adc	r22, r22
    9396:	77 1f       	adc	r23, r23
    9398:	4c 01       	movw	r8, r24
    939a:	5d 01       	movw	r10, r26
    939c:	07 2e       	mov	r0, r23
    939e:	7d e1       	ldi	r23, 0x1D	; 29
    93a0:	b6 94       	lsr	r11
    93a2:	a7 94       	ror	r10
    93a4:	97 94       	ror	r9
    93a6:	87 94       	ror	r8
    93a8:	7a 95       	dec	r23
    93aa:	d1 f7       	brne	.-12     	; 0x93a0 <md5_finish+0x5a>
    93ac:	70 2d       	mov	r23, r0
    93ae:	48 29       	or	r20, r8
    93b0:	59 29       	or	r21, r9
    93b2:	6a 29       	or	r22, r10
    93b4:	7b 29       	or	r23, r11
    93b6:	4c 01       	movw	r8, r24
    93b8:	5d 01       	movw	r10, r26
    93ba:	88 0c       	add	r8, r8
    93bc:	99 1c       	adc	r9, r9
    93be:	aa 1c       	adc	r10, r10
    93c0:	bb 1c       	adc	r11, r11
    93c2:	88 0c       	add	r8, r8
    93c4:	99 1c       	adc	r9, r9
    93c6:	aa 1c       	adc	r10, r10
    93c8:	bb 1c       	adc	r11, r11
    93ca:	88 0c       	add	r8, r8
    93cc:	99 1c       	adc	r9, r9
    93ce:	aa 1c       	adc	r10, r10
    93d0:	bb 1c       	adc	r11, r11
    93d2:	89 82       	std	Y+1, r8	; 0x01
    93d4:	9a 82       	std	Y+2, r9	; 0x02
    93d6:	ab 82       	std	Y+3, r10	; 0x03
    93d8:	bc 82       	std	Y+4, r11	; 0x04
    93da:	4d 83       	std	Y+5, r20	; 0x05
    93dc:	5e 83       	std	Y+6, r21	; 0x06
    93de:	6f 83       	std	Y+7, r22	; 0x07
    93e0:	78 87       	std	Y+8, r23	; 0x08
    93e2:	8f 73       	andi	r24, 0x3F	; 63
    93e4:	99 27       	eor	r25, r25
    93e6:	aa 27       	eor	r26, r26
    93e8:	bb 27       	eor	r27, r27
    93ea:	88 33       	cpi	r24, 0x38	; 56
    93ec:	91 05       	cpc	r25, r1
    93ee:	a1 05       	cpc	r26, r1
    93f0:	b1 05       	cpc	r27, r1
    93f2:	48 f4       	brcc	.+18     	; 0x9406 <md5_finish+0xc0>
    93f4:	48 e3       	ldi	r20, 0x38	; 56
    93f6:	50 e0       	ldi	r21, 0x00	; 0
    93f8:	60 e0       	ldi	r22, 0x00	; 0
    93fa:	70 e0       	ldi	r23, 0x00	; 0
    93fc:	48 1b       	sub	r20, r24
    93fe:	59 0b       	sbc	r21, r25
    9400:	6a 0b       	sbc	r22, r26
    9402:	7b 0b       	sbc	r23, r27
    9404:	08 c0       	rjmp	.+16     	; 0x9416 <md5_finish+0xd0>
    9406:	48 e7       	ldi	r20, 0x78	; 120
    9408:	50 e0       	ldi	r21, 0x00	; 0
    940a:	60 e0       	ldi	r22, 0x00	; 0
    940c:	70 e0       	ldi	r23, 0x00	; 0
    940e:	48 1b       	sub	r20, r24
    9410:	59 0b       	sbc	r21, r25
    9412:	6a 0b       	sbc	r22, r26
    9414:	7b 0b       	sbc	r23, r27
    9416:	6a e1       	ldi	r22, 0x1A	; 26
    9418:	79 e0       	ldi	r23, 0x09	; 9
    941a:	c8 01       	movw	r24, r16
    941c:	09 df       	rcall	.-494    	; 0x9230 <md5_update>
    941e:	48 e0       	ldi	r20, 0x08	; 8
    9420:	50 e0       	ldi	r21, 0x00	; 0
    9422:	be 01       	movw	r22, r28
    9424:	6f 5f       	subi	r22, 0xFF	; 255
    9426:	7f 4f       	sbci	r23, 0xFF	; 255
    9428:	c8 01       	movw	r24, r16
    942a:	02 df       	rcall	.-508    	; 0x9230 <md5_update>
    942c:	f8 01       	movw	r30, r16
    942e:	80 85       	ldd	r24, Z+8	; 0x08
    9430:	f7 01       	movw	r30, r14
    9432:	80 83       	st	Z, r24
    9434:	f8 01       	movw	r30, r16
    9436:	81 85       	ldd	r24, Z+9	; 0x09
    9438:	f7 01       	movw	r30, r14
    943a:	81 83       	std	Z+1, r24	; 0x01
    943c:	f8 01       	movw	r30, r16
    943e:	82 85       	ldd	r24, Z+10	; 0x0a
    9440:	f7 01       	movw	r30, r14
    9442:	82 83       	std	Z+2, r24	; 0x02
    9444:	f8 01       	movw	r30, r16
    9446:	83 85       	ldd	r24, Z+11	; 0x0b
    9448:	f7 01       	movw	r30, r14
    944a:	83 83       	std	Z+3, r24	; 0x03
    944c:	f8 01       	movw	r30, r16
    944e:	84 85       	ldd	r24, Z+12	; 0x0c
    9450:	f7 01       	movw	r30, r14
    9452:	84 83       	std	Z+4, r24	; 0x04
    9454:	f8 01       	movw	r30, r16
    9456:	85 85       	ldd	r24, Z+13	; 0x0d
    9458:	f7 01       	movw	r30, r14
    945a:	85 83       	std	Z+5, r24	; 0x05
    945c:	f8 01       	movw	r30, r16
    945e:	86 85       	ldd	r24, Z+14	; 0x0e
    9460:	f7 01       	movw	r30, r14
    9462:	86 83       	std	Z+6, r24	; 0x06
    9464:	f8 01       	movw	r30, r16
    9466:	87 85       	ldd	r24, Z+15	; 0x0f
    9468:	f7 01       	movw	r30, r14
    946a:	87 83       	std	Z+7, r24	; 0x07
    946c:	f8 01       	movw	r30, r16
    946e:	80 89       	ldd	r24, Z+16	; 0x10
    9470:	f7 01       	movw	r30, r14
    9472:	80 87       	std	Z+8, r24	; 0x08
    9474:	f8 01       	movw	r30, r16
    9476:	81 89       	ldd	r24, Z+17	; 0x11
    9478:	f7 01       	movw	r30, r14
    947a:	81 87       	std	Z+9, r24	; 0x09
    947c:	f8 01       	movw	r30, r16
    947e:	82 89       	ldd	r24, Z+18	; 0x12
    9480:	f7 01       	movw	r30, r14
    9482:	82 87       	std	Z+10, r24	; 0x0a
    9484:	f8 01       	movw	r30, r16
    9486:	83 89       	ldd	r24, Z+19	; 0x13
    9488:	f7 01       	movw	r30, r14
    948a:	83 87       	std	Z+11, r24	; 0x0b
    948c:	f8 01       	movw	r30, r16
    948e:	84 89       	ldd	r24, Z+20	; 0x14
    9490:	f7 01       	movw	r30, r14
    9492:	84 87       	std	Z+12, r24	; 0x0c
    9494:	f8 01       	movw	r30, r16
    9496:	85 89       	ldd	r24, Z+21	; 0x15
    9498:	f7 01       	movw	r30, r14
    949a:	85 87       	std	Z+13, r24	; 0x0d
    949c:	f8 01       	movw	r30, r16
    949e:	86 89       	ldd	r24, Z+22	; 0x16
    94a0:	f7 01       	movw	r30, r14
    94a2:	86 87       	std	Z+14, r24	; 0x0e
    94a4:	f8 01       	movw	r30, r16
    94a6:	87 89       	ldd	r24, Z+23	; 0x17
    94a8:	f7 01       	movw	r30, r14
    94aa:	87 87       	std	Z+15, r24	; 0x0f
    94ac:	28 96       	adiw	r28, 0x08	; 8
    94ae:	0f b6       	in	r0, 0x3f	; 63
    94b0:	f8 94       	cli
    94b2:	de bf       	out	0x3e, r29	; 62
    94b4:	0f be       	out	0x3f, r0	; 63
    94b6:	cd bf       	out	0x3d, r28	; 61
    94b8:	df 91       	pop	r29
    94ba:	cf 91       	pop	r28
    94bc:	1f 91       	pop	r17
    94be:	0f 91       	pop	r16
    94c0:	ff 90       	pop	r15
    94c2:	ef 90       	pop	r14
    94c4:	bf 90       	pop	r11
    94c6:	af 90       	pop	r10
    94c8:	9f 90       	pop	r9
    94ca:	8f 90       	pop	r8
    94cc:	08 95       	ret

000094ce <md5>:
    94ce:	af 92       	push	r10
    94d0:	bf 92       	push	r11
    94d2:	cf 92       	push	r12
    94d4:	df 92       	push	r13
    94d6:	ef 92       	push	r14
    94d8:	ff 92       	push	r15
    94da:	0f 93       	push	r16
    94dc:	1f 93       	push	r17
    94de:	cf 93       	push	r28
    94e0:	df 93       	push	r29
    94e2:	cd b7       	in	r28, 0x3d	; 61
    94e4:	de b7       	in	r29, 0x3e	; 62
    94e6:	c8 5d       	subi	r28, 0xD8	; 216
    94e8:	d1 09       	sbc	r29, r1
    94ea:	0f b6       	in	r0, 0x3f	; 63
    94ec:	f8 94       	cli
    94ee:	de bf       	out	0x3e, r29	; 62
    94f0:	0f be       	out	0x3f, r0	; 63
    94f2:	cd bf       	out	0x3d, r28	; 61
    94f4:	6c 01       	movw	r12, r24
    94f6:	5b 01       	movw	r10, r22
    94f8:	7a 01       	movw	r14, r20
    94fa:	8e 01       	movw	r16, r28
    94fc:	0f 5f       	subi	r16, 0xFF	; 255
    94fe:	1f 4f       	sbci	r17, 0xFF	; 255
    9500:	c8 01       	movw	r24, r16
    9502:	6c de       	rcall	.-808    	; 0x91dc <md5_starts>
    9504:	a5 01       	movw	r20, r10
    9506:	b6 01       	movw	r22, r12
    9508:	c8 01       	movw	r24, r16
    950a:	92 de       	rcall	.-732    	; 0x9230 <md5_update>
    950c:	b7 01       	movw	r22, r14
    950e:	c8 01       	movw	r24, r16
    9510:	1a df       	rcall	.-460    	; 0x9346 <md5_finish>
    9512:	88 ed       	ldi	r24, 0xD8	; 216
    9514:	f8 01       	movw	r30, r16
    9516:	11 92       	st	Z+, r1
    9518:	8a 95       	dec	r24
    951a:	e9 f7       	brne	.-6      	; 0x9516 <md5+0x48>
    951c:	c8 52       	subi	r28, 0x28	; 40
    951e:	df 4f       	sbci	r29, 0xFF	; 255
    9520:	0f b6       	in	r0, 0x3f	; 63
    9522:	f8 94       	cli
    9524:	de bf       	out	0x3e, r29	; 62
    9526:	0f be       	out	0x3f, r0	; 63
    9528:	cd bf       	out	0x3d, r28	; 61
    952a:	df 91       	pop	r29
    952c:	cf 91       	pop	r28
    952e:	1f 91       	pop	r17
    9530:	0f 91       	pop	r16
    9532:	ff 90       	pop	r15
    9534:	ef 90       	pop	r14
    9536:	df 90       	pop	r13
    9538:	cf 90       	pop	r12
    953a:	bf 90       	pop	r11
    953c:	af 90       	pop	r10
    953e:	08 95       	ret

00009540 <md5_hmac_starts>:
    9540:	8f 92       	push	r8
    9542:	9f 92       	push	r9
    9544:	af 92       	push	r10
    9546:	bf 92       	push	r11
    9548:	cf 92       	push	r12
    954a:	df 92       	push	r13
    954c:	ef 92       	push	r14
    954e:	ff 92       	push	r15
    9550:	0f 93       	push	r16
    9552:	1f 93       	push	r17
    9554:	cf 93       	push	r28
    9556:	df 93       	push	r29
    9558:	cd b7       	in	r28, 0x3d	; 61
    955a:	de b7       	in	r29, 0x3e	; 62
    955c:	60 97       	sbiw	r28, 0x10	; 16
    955e:	0f b6       	in	r0, 0x3f	; 63
    9560:	f8 94       	cli
    9562:	de bf       	out	0x3e, r29	; 62
    9564:	0f be       	out	0x3f, r0	; 63
    9566:	cd bf       	out	0x3d, r28	; 61
    9568:	8c 01       	movw	r16, r24
    956a:	a6 2e       	mov	r10, r22
    956c:	b7 2e       	mov	r11, r23
    956e:	6a 01       	movw	r12, r20
    9570:	41 34       	cpi	r20, 0x41	; 65
    9572:	51 05       	cpc	r21, r1
    9574:	0c f1       	brlt	.+66     	; 0x95b8 <md5_hmac_starts+0x78>
    9576:	de 01       	movw	r26, r28
    9578:	11 96       	adiw	r26, 0x01	; 1
    957a:	4d 01       	movw	r8, r26
    957c:	ad 01       	movw	r20, r26
    957e:	b6 01       	movw	r22, r12
    9580:	8a 2d       	mov	r24, r10
    9582:	9b 2d       	mov	r25, r11
    9584:	a4 df       	rcall	.-184    	; 0x94ce <md5>
    9586:	78 01       	movw	r14, r16
    9588:	b8 e5       	ldi	r27, 0x58	; 88
    958a:	eb 0e       	add	r14, r27
    958c:	f1 1c       	adc	r15, r1
    958e:	40 e4       	ldi	r20, 0x40	; 64
    9590:	50 e0       	ldi	r21, 0x00	; 0
    9592:	66 e3       	ldi	r22, 0x36	; 54
    9594:	70 e0       	ldi	r23, 0x00	; 0
    9596:	c7 01       	movw	r24, r14
    9598:	e9 d1       	rcall	.+978    	; 0x996c <memset>
    959a:	40 e4       	ldi	r20, 0x40	; 64
    959c:	50 e0       	ldi	r21, 0x00	; 0
    959e:	6c e5       	ldi	r22, 0x5C	; 92
    95a0:	70 e0       	ldi	r23, 0x00	; 0
    95a2:	c8 01       	movw	r24, r16
    95a4:	88 56       	subi	r24, 0x68	; 104
    95a6:	9f 4f       	sbci	r25, 0xFF	; 255
    95a8:	e1 d1       	rcall	.+962    	; 0x996c <memset>
    95aa:	68 94       	set
    95ac:	cc 24       	eor	r12, r12
    95ae:	c4 f8       	bld	r12, 4
    95b0:	d1 2c       	mov	r13, r1
    95b2:	a8 2c       	mov	r10, r8
    95b4:	b9 2c       	mov	r11, r9
    95b6:	15 c0       	rjmp	.+42     	; 0x95e2 <md5_hmac_starts+0xa2>
    95b8:	78 01       	movw	r14, r16
    95ba:	e8 e5       	ldi	r30, 0x58	; 88
    95bc:	ee 0e       	add	r14, r30
    95be:	f1 1c       	adc	r15, r1
    95c0:	40 e4       	ldi	r20, 0x40	; 64
    95c2:	50 e0       	ldi	r21, 0x00	; 0
    95c4:	66 e3       	ldi	r22, 0x36	; 54
    95c6:	70 e0       	ldi	r23, 0x00	; 0
    95c8:	c7 01       	movw	r24, r14
    95ca:	d0 d1       	rcall	.+928    	; 0x996c <memset>
    95cc:	40 e4       	ldi	r20, 0x40	; 64
    95ce:	50 e0       	ldi	r21, 0x00	; 0
    95d0:	6c e5       	ldi	r22, 0x5C	; 92
    95d2:	70 e0       	ldi	r23, 0x00	; 0
    95d4:	c8 01       	movw	r24, r16
    95d6:	88 56       	subi	r24, 0x68	; 104
    95d8:	9f 4f       	sbci	r25, 0xFF	; 255
    95da:	c8 d1       	rcall	.+912    	; 0x996c <memset>
    95dc:	1c 14       	cp	r1, r12
    95de:	1d 04       	cpc	r1, r13
    95e0:	f4 f4       	brge	.+60     	; 0x961e <md5_hmac_starts+0xde>
    95e2:	a8 01       	movw	r20, r16
    95e4:	48 5a       	subi	r20, 0xA8	; 168
    95e6:	5f 4f       	sbci	r21, 0xFF	; 255
    95e8:	8a 2c       	mov	r8, r10
    95ea:	9b 2c       	mov	r9, r11
    95ec:	d8 01       	movw	r26, r16
    95ee:	a8 56       	subi	r26, 0x68	; 104
    95f0:	bf 4f       	sbci	r27, 0xFF	; 255
    95f2:	20 e0       	ldi	r18, 0x00	; 0
    95f4:	30 e0       	ldi	r19, 0x00	; 0
    95f6:	b4 01       	movw	r22, r8
    95f8:	fa 01       	movw	r30, r20
    95fa:	80 81       	ld	r24, Z
    95fc:	f4 01       	movw	r30, r8
    95fe:	91 91       	ld	r25, Z+
    9600:	4f 01       	movw	r8, r30
    9602:	98 27       	eor	r25, r24
    9604:	fa 01       	movw	r30, r20
    9606:	91 93       	st	Z+, r25
    9608:	af 01       	movw	r20, r30
    960a:	8c 91       	ld	r24, X
    960c:	fb 01       	movw	r30, r22
    960e:	90 81       	ld	r25, Z
    9610:	98 27       	eor	r25, r24
    9612:	9d 93       	st	X+, r25
    9614:	2f 5f       	subi	r18, 0xFF	; 255
    9616:	3f 4f       	sbci	r19, 0xFF	; 255
    9618:	2c 15       	cp	r18, r12
    961a:	3d 05       	cpc	r19, r13
    961c:	64 f3       	brlt	.-40     	; 0x95f6 <md5_hmac_starts+0xb6>
    961e:	c8 01       	movw	r24, r16
    9620:	dd dd       	rcall	.-1094   	; 0x91dc <md5_starts>
    9622:	40 e4       	ldi	r20, 0x40	; 64
    9624:	50 e0       	ldi	r21, 0x00	; 0
    9626:	b7 01       	movw	r22, r14
    9628:	c8 01       	movw	r24, r16
    962a:	02 de       	rcall	.-1020   	; 0x9230 <md5_update>
    962c:	fe 01       	movw	r30, r28
    962e:	31 96       	adiw	r30, 0x01	; 1
    9630:	80 e1       	ldi	r24, 0x10	; 16
    9632:	df 01       	movw	r26, r30
    9634:	1d 92       	st	X+, r1
    9636:	8a 95       	dec	r24
    9638:	e9 f7       	brne	.-6      	; 0x9634 <md5_hmac_starts+0xf4>
    963a:	60 96       	adiw	r28, 0x10	; 16
    963c:	0f b6       	in	r0, 0x3f	; 63
    963e:	f8 94       	cli
    9640:	de bf       	out	0x3e, r29	; 62
    9642:	0f be       	out	0x3f, r0	; 63
    9644:	cd bf       	out	0x3d, r28	; 61
    9646:	df 91       	pop	r29
    9648:	cf 91       	pop	r28
    964a:	1f 91       	pop	r17
    964c:	0f 91       	pop	r16
    964e:	ff 90       	pop	r15
    9650:	ef 90       	pop	r14
    9652:	df 90       	pop	r13
    9654:	cf 90       	pop	r12
    9656:	bf 90       	pop	r11
    9658:	af 90       	pop	r10
    965a:	9f 90       	pop	r9
    965c:	8f 90       	pop	r8
    965e:	08 95       	ret

00009660 <md5_hmac_finish>:
    9660:	cf 92       	push	r12
    9662:	df 92       	push	r13
    9664:	ef 92       	push	r14
    9666:	ff 92       	push	r15
    9668:	0f 93       	push	r16
    966a:	1f 93       	push	r17
    966c:	cf 93       	push	r28
    966e:	df 93       	push	r29
    9670:	cd b7       	in	r28, 0x3d	; 61
    9672:	de b7       	in	r29, 0x3e	; 62
    9674:	60 97       	sbiw	r28, 0x10	; 16
    9676:	0f b6       	in	r0, 0x3f	; 63
    9678:	f8 94       	cli
    967a:	de bf       	out	0x3e, r29	; 62
    967c:	0f be       	out	0x3f, r0	; 63
    967e:	cd bf       	out	0x3d, r28	; 61
    9680:	8c 01       	movw	r16, r24
    9682:	6b 01       	movw	r12, r22
    9684:	ce 01       	movw	r24, r28
    9686:	01 96       	adiw	r24, 0x01	; 1
    9688:	7c 01       	movw	r14, r24
    968a:	bc 01       	movw	r22, r24
    968c:	c8 01       	movw	r24, r16
    968e:	5b de       	rcall	.-842    	; 0x9346 <md5_finish>
    9690:	c8 01       	movw	r24, r16
    9692:	a4 dd       	rcall	.-1208   	; 0x91dc <md5_starts>
    9694:	b8 01       	movw	r22, r16
    9696:	68 56       	subi	r22, 0x68	; 104
    9698:	7f 4f       	sbci	r23, 0xFF	; 255
    969a:	40 e4       	ldi	r20, 0x40	; 64
    969c:	50 e0       	ldi	r21, 0x00	; 0
    969e:	c8 01       	movw	r24, r16
    96a0:	c7 dd       	rcall	.-1138   	; 0x9230 <md5_update>
    96a2:	40 e1       	ldi	r20, 0x10	; 16
    96a4:	50 e0       	ldi	r21, 0x00	; 0
    96a6:	b7 01       	movw	r22, r14
    96a8:	c8 01       	movw	r24, r16
    96aa:	c2 dd       	rcall	.-1148   	; 0x9230 <md5_update>
    96ac:	b6 01       	movw	r22, r12
    96ae:	c8 01       	movw	r24, r16
    96b0:	4a de       	rcall	.-876    	; 0x9346 <md5_finish>
    96b2:	80 e1       	ldi	r24, 0x10	; 16
    96b4:	f7 01       	movw	r30, r14
    96b6:	11 92       	st	Z+, r1
    96b8:	8a 95       	dec	r24
    96ba:	e9 f7       	brne	.-6      	; 0x96b6 <md5_hmac_finish+0x56>
    96bc:	60 96       	adiw	r28, 0x10	; 16
    96be:	0f b6       	in	r0, 0x3f	; 63
    96c0:	f8 94       	cli
    96c2:	de bf       	out	0x3e, r29	; 62
    96c4:	0f be       	out	0x3f, r0	; 63
    96c6:	cd bf       	out	0x3d, r28	; 61
    96c8:	df 91       	pop	r29
    96ca:	cf 91       	pop	r28
    96cc:	1f 91       	pop	r17
    96ce:	0f 91       	pop	r16
    96d0:	ff 90       	pop	r15
    96d2:	ef 90       	pop	r14
    96d4:	df 90       	pop	r13
    96d6:	cf 90       	pop	r12
    96d8:	08 95       	ret

000096da <md5_hmac>:
 * output = HMAC-MD5( hmac key, input buffer )
 */
void md5_hmac( const unsigned char *key, int keylen,
               const unsigned char *input, int ilen,
               unsigned char output[16] )
{
    96da:	af 92       	push	r10
    96dc:	bf 92       	push	r11
    96de:	cf 92       	push	r12
    96e0:	df 92       	push	r13
    96e2:	ef 92       	push	r14
    96e4:	ff 92       	push	r15
    96e6:	0f 93       	push	r16
    96e8:	1f 93       	push	r17
    96ea:	cf 93       	push	r28
    96ec:	df 93       	push	r29
    96ee:	cd b7       	in	r28, 0x3d	; 61
    96f0:	de b7       	in	r29, 0x3e	; 62
    96f2:	c8 5d       	subi	r28, 0xD8	; 216
    96f4:	d1 09       	sbc	r29, r1
    96f6:	0f b6       	in	r0, 0x3f	; 63
    96f8:	f8 94       	cli
    96fa:	de bf       	out	0x3e, r29	; 62
    96fc:	0f be       	out	0x3f, r0	; 63
    96fe:	cd bf       	out	0x3d, r28	; 61
    9700:	6a 01       	movw	r12, r20
    9702:	59 01       	movw	r10, r18
    md5_context ctx;

    md5_hmac_starts( &ctx, key, keylen );
    9704:	ab 01       	movw	r20, r22
    9706:	bc 01       	movw	r22, r24
    9708:	ce 01       	movw	r24, r28
    970a:	01 96       	adiw	r24, 0x01	; 1
    970c:	7c 01       	movw	r14, r24
    970e:	18 df       	rcall	.-464    	; 0x9540 <md5_hmac_starts>
/*
 * MD5 HMAC process buffer
 */
void md5_hmac_update( md5_context *ctx, const unsigned char *input, int ilen )
{
    md5_update( ctx, input, ilen );
    9710:	a5 01       	movw	r20, r10
    9712:	b6 01       	movw	r22, r12
    9714:	c7 01       	movw	r24, r14
    9716:	8c dd       	rcall	.-1256   	; 0x9230 <md5_update>
{
    md5_context ctx;

    md5_hmac_starts( &ctx, key, keylen );
    md5_hmac_update( &ctx, input, ilen );
    md5_hmac_finish( &ctx, output );
    9718:	b8 01       	movw	r22, r16
    971a:	c7 01       	movw	r24, r14
    971c:	a1 df       	rcall	.-190    	; 0x9660 <md5_hmac_finish>

    memset( &ctx, 0, sizeof( md5_context ) );
    971e:	88 ed       	ldi	r24, 0xD8	; 216
    9720:	f7 01       	movw	r30, r14
    9722:	11 92       	st	Z+, r1
    9724:	8a 95       	dec	r24
    9726:	e9 f7       	brne	.-6      	; 0x9722 <md5_hmac+0x48>
}
    9728:	c8 52       	subi	r28, 0x28	; 40
    972a:	df 4f       	sbci	r29, 0xFF	; 255
    972c:	0f b6       	in	r0, 0x3f	; 63
    972e:	f8 94       	cli
    9730:	de bf       	out	0x3e, r29	; 62
    9732:	0f be       	out	0x3f, r0	; 63
    9734:	cd bf       	out	0x3d, r28	; 61
    9736:	df 91       	pop	r29
    9738:	cf 91       	pop	r28
    973a:	1f 91       	pop	r17
    973c:	0f 91       	pop	r16
    973e:	ff 90       	pop	r15
    9740:	ef 90       	pop	r14
    9742:	df 90       	pop	r13
    9744:	cf 90       	pop	r12
    9746:	bf 90       	pop	r11
    9748:	af 90       	pop	r10
    974a:	08 95       	ret

0000974c <pnesign>:

uint16_t pnesign(const unsigned char* data, uint16_t dataLen, const unsigned char* key, uint16_t keyLen)
{
    974c:	0f 93       	push	r16
    974e:	1f 93       	push	r17
    9750:	cf 93       	push	r28
    9752:	df 93       	push	r29
    9754:	cd b7       	in	r28, 0x3d	; 61
    9756:	de b7       	in	r29, 0x3e	; 62
    9758:	60 97       	sbiw	r28, 0x10	; 16
    975a:	0f b6       	in	r0, 0x3f	; 63
    975c:	f8 94       	cli
    975e:	de bf       	out	0x3e, r29	; 62
    9760:	0f be       	out	0x3f, r0	; 63
    9762:	cd bf       	out	0x3d, r28	; 61
    9764:	fc 01       	movw	r30, r24
    9766:	db 01       	movw	r26, r22
    9768:	ca 01       	movw	r24, r20
    976a:	b9 01       	movw	r22, r18
// 	}
	//int_to_ascii(keyLen);

	
		
	md5_hmac(key, keyLen, data, dataLen, tmpbuf);//md5_hmac(key, 6, data1, 80, tmpbuf);
    976c:	8e 01       	movw	r16, r28
    976e:	0f 5f       	subi	r16, 0xFF	; 255
    9770:	1f 4f       	sbci	r17, 0xFF	; 255
    9772:	9d 01       	movw	r18, r26
    9774:	af 01       	movw	r20, r30
    9776:	b1 df       	rcall	.-158    	; 0x96da <md5_hmac>
// 	{
// 		int_to_ascii(tmpbuf[i]);
// 	}
// 	send_usart_char("\r\n");
	
	sign = ((uint16_t*)tmpbuf)[0] ^ ((uint16_t*)tmpbuf)[1] ^ ((uint16_t*)tmpbuf)[2] ^ ((uint16_t*)tmpbuf)[3];
    9778:	2b 81       	ldd	r18, Y+3	; 0x03
    977a:	3c 81       	ldd	r19, Y+4	; 0x04
    977c:	89 81       	ldd	r24, Y+1	; 0x01
    977e:	9a 81       	ldd	r25, Y+2	; 0x02
    9780:	82 27       	eor	r24, r18
    9782:	93 27       	eor	r25, r19
    9784:	2d 81       	ldd	r18, Y+5	; 0x05
    9786:	3e 81       	ldd	r19, Y+6	; 0x06
    9788:	82 27       	eor	r24, r18
    978a:	93 27       	eor	r25, r19
    978c:	2f 81       	ldd	r18, Y+7	; 0x07
    978e:	38 85       	ldd	r19, Y+8	; 0x08
	return sign;
}
    9790:	82 27       	eor	r24, r18
    9792:	93 27       	eor	r25, r19
    9794:	60 96       	adiw	r28, 0x10	; 16
    9796:	0f b6       	in	r0, 0x3f	; 63
    9798:	f8 94       	cli
    979a:	de bf       	out	0x3e, r29	; 62
    979c:	0f be       	out	0x3f, r0	; 63
    979e:	cd bf       	out	0x3d, r28	; 61
    97a0:	df 91       	pop	r29
    97a2:	cf 91       	pop	r28
    97a4:	1f 91       	pop	r17
    97a6:	0f 91       	pop	r16
    97a8:	08 95       	ret

000097aa <__divmodhi4>:
    97aa:	97 fb       	bst	r25, 7
    97ac:	07 2e       	mov	r0, r23
    97ae:	16 f4       	brtc	.+4      	; 0x97b4 <__divmodhi4+0xa>
    97b0:	00 94       	com	r0
    97b2:	06 d0       	rcall	.+12     	; 0x97c0 <__divmodhi4_neg1>
    97b4:	77 fd       	sbrc	r23, 7
    97b6:	08 d0       	rcall	.+16     	; 0x97c8 <__divmodhi4_neg2>
    97b8:	50 d0       	rcall	.+160    	; 0x985a <__udivmodhi4>
    97ba:	07 fc       	sbrc	r0, 7
    97bc:	05 d0       	rcall	.+10     	; 0x97c8 <__divmodhi4_neg2>
    97be:	3e f4       	brtc	.+14     	; 0x97ce <__divmodhi4_exit>

000097c0 <__divmodhi4_neg1>:
    97c0:	90 95       	com	r25
    97c2:	81 95       	neg	r24
    97c4:	9f 4f       	sbci	r25, 0xFF	; 255
    97c6:	08 95       	ret

000097c8 <__divmodhi4_neg2>:
    97c8:	70 95       	com	r23
    97ca:	61 95       	neg	r22
    97cc:	7f 4f       	sbci	r23, 0xFF	; 255

000097ce <__divmodhi4_exit>:
    97ce:	08 95       	ret

000097d0 <__udivmodsi4>:
    97d0:	a1 e2       	ldi	r26, 0x21	; 33
    97d2:	1a 2e       	mov	r1, r26
    97d4:	aa 1b       	sub	r26, r26
    97d6:	bb 1b       	sub	r27, r27
    97d8:	fd 01       	movw	r30, r26
    97da:	0d c0       	rjmp	.+26     	; 0x97f6 <__udivmodsi4_ep>

000097dc <__udivmodsi4_loop>:
    97dc:	aa 1f       	adc	r26, r26
    97de:	bb 1f       	adc	r27, r27
    97e0:	ee 1f       	adc	r30, r30
    97e2:	ff 1f       	adc	r31, r31
    97e4:	a2 17       	cp	r26, r18
    97e6:	b3 07       	cpc	r27, r19
    97e8:	e4 07       	cpc	r30, r20
    97ea:	f5 07       	cpc	r31, r21
    97ec:	20 f0       	brcs	.+8      	; 0x97f6 <__udivmodsi4_ep>
    97ee:	a2 1b       	sub	r26, r18
    97f0:	b3 0b       	sbc	r27, r19
    97f2:	e4 0b       	sbc	r30, r20
    97f4:	f5 0b       	sbc	r31, r21

000097f6 <__udivmodsi4_ep>:
    97f6:	66 1f       	adc	r22, r22
    97f8:	77 1f       	adc	r23, r23
    97fa:	88 1f       	adc	r24, r24
    97fc:	99 1f       	adc	r25, r25
    97fe:	1a 94       	dec	r1
    9800:	69 f7       	brne	.-38     	; 0x97dc <__udivmodsi4_loop>
    9802:	60 95       	com	r22
    9804:	70 95       	com	r23
    9806:	80 95       	com	r24
    9808:	90 95       	com	r25
    980a:	9b 01       	movw	r18, r22
    980c:	ac 01       	movw	r20, r24
    980e:	bd 01       	movw	r22, r26
    9810:	cf 01       	movw	r24, r30
    9812:	08 95       	ret

00009814 <__tablejump2__>:
    9814:	ee 0f       	add	r30, r30
    9816:	ff 1f       	adc	r31, r31
    9818:	88 1f       	adc	r24, r24
    981a:	8b bf       	out	0x3b, r24	; 59
    981c:	07 90       	elpm	r0, Z+
    981e:	f6 91       	elpm	r31, Z
    9820:	e0 2d       	mov	r30, r0
    9822:	19 94       	eijmp

00009824 <__umulhisi3>:
    9824:	a2 9f       	mul	r26, r18
    9826:	b0 01       	movw	r22, r0
    9828:	b3 9f       	mul	r27, r19
    982a:	c0 01       	movw	r24, r0
    982c:	a3 9f       	mul	r26, r19
    982e:	70 0d       	add	r23, r0
    9830:	81 1d       	adc	r24, r1
    9832:	11 24       	eor	r1, r1
    9834:	91 1d       	adc	r25, r1
    9836:	b2 9f       	mul	r27, r18
    9838:	70 0d       	add	r23, r0
    983a:	81 1d       	adc	r24, r1
    983c:	11 24       	eor	r1, r1
    983e:	91 1d       	adc	r25, r1
    9840:	08 95       	ret

00009842 <__usmulhisi3>:
    9842:	f0 df       	rcall	.-32     	; 0x9824 <__umulhisi3>

00009844 <__usmulhisi3_tail>:
    9844:	b7 ff       	sbrs	r27, 7
    9846:	08 95       	ret
    9848:	82 1b       	sub	r24, r18
    984a:	93 0b       	sbc	r25, r19
    984c:	08 95       	ret

0000984e <__mulshisi3>:
    984e:	b7 ff       	sbrs	r27, 7
    9850:	18 c0       	rjmp	.+48     	; 0x9882 <__muluhisi3>

00009852 <__mulohisi3>:
    9852:	17 d0       	rcall	.+46     	; 0x9882 <__muluhisi3>
    9854:	82 1b       	sub	r24, r18
    9856:	93 0b       	sbc	r25, r19
    9858:	08 95       	ret

0000985a <__udivmodhi4>:
    985a:	aa 1b       	sub	r26, r26
    985c:	bb 1b       	sub	r27, r27
    985e:	51 e1       	ldi	r21, 0x11	; 17
    9860:	07 c0       	rjmp	.+14     	; 0x9870 <__udivmodhi4_ep>

00009862 <__udivmodhi4_loop>:
    9862:	aa 1f       	adc	r26, r26
    9864:	bb 1f       	adc	r27, r27
    9866:	a6 17       	cp	r26, r22
    9868:	b7 07       	cpc	r27, r23
    986a:	10 f0       	brcs	.+4      	; 0x9870 <__udivmodhi4_ep>
    986c:	a6 1b       	sub	r26, r22
    986e:	b7 0b       	sbc	r27, r23

00009870 <__udivmodhi4_ep>:
    9870:	88 1f       	adc	r24, r24
    9872:	99 1f       	adc	r25, r25
    9874:	5a 95       	dec	r21
    9876:	a9 f7       	brne	.-22     	; 0x9862 <__udivmodhi4_loop>
    9878:	80 95       	com	r24
    987a:	90 95       	com	r25
    987c:	bc 01       	movw	r22, r24
    987e:	cd 01       	movw	r24, r26
    9880:	08 95       	ret

00009882 <__muluhisi3>:
    9882:	d0 df       	rcall	.-96     	; 0x9824 <__umulhisi3>
    9884:	a5 9f       	mul	r26, r21
    9886:	90 0d       	add	r25, r0
    9888:	b4 9f       	mul	r27, r20
    988a:	90 0d       	add	r25, r0
    988c:	a4 9f       	mul	r26, r20
    988e:	80 0d       	add	r24, r0
    9890:	91 1d       	adc	r25, r1
    9892:	11 24       	eor	r1, r1
    9894:	08 95       	ret

00009896 <do_rand>:
    9896:	8f 92       	push	r8
    9898:	9f 92       	push	r9
    989a:	af 92       	push	r10
    989c:	bf 92       	push	r11
    989e:	cf 92       	push	r12
    98a0:	df 92       	push	r13
    98a2:	ef 92       	push	r14
    98a4:	ff 92       	push	r15
    98a6:	cf 93       	push	r28
    98a8:	df 93       	push	r29
    98aa:	ec 01       	movw	r28, r24
    98ac:	68 81       	ld	r22, Y
    98ae:	79 81       	ldd	r23, Y+1	; 0x01
    98b0:	8a 81       	ldd	r24, Y+2	; 0x02
    98b2:	9b 81       	ldd	r25, Y+3	; 0x03
    98b4:	61 15       	cp	r22, r1
    98b6:	71 05       	cpc	r23, r1
    98b8:	81 05       	cpc	r24, r1
    98ba:	91 05       	cpc	r25, r1
    98bc:	21 f4       	brne	.+8      	; 0x98c6 <do_rand+0x30>
    98be:	64 e2       	ldi	r22, 0x24	; 36
    98c0:	79 ed       	ldi	r23, 0xD9	; 217
    98c2:	8b e5       	ldi	r24, 0x5B	; 91
    98c4:	97 e0       	ldi	r25, 0x07	; 7
    98c6:	2d e1       	ldi	r18, 0x1D	; 29
    98c8:	33 ef       	ldi	r19, 0xF3	; 243
    98ca:	41 e0       	ldi	r20, 0x01	; 1
    98cc:	50 e0       	ldi	r21, 0x00	; 0
    98ce:	55 d0       	rcall	.+170    	; 0x997a <__divmodsi4>
    98d0:	49 01       	movw	r8, r18
    98d2:	5a 01       	movw	r10, r20
    98d4:	9b 01       	movw	r18, r22
    98d6:	ac 01       	movw	r20, r24
    98d8:	a7 ea       	ldi	r26, 0xA7	; 167
    98da:	b1 e4       	ldi	r27, 0x41	; 65
    98dc:	d2 df       	rcall	.-92     	; 0x9882 <__muluhisi3>
    98de:	6b 01       	movw	r12, r22
    98e0:	7c 01       	movw	r14, r24
    98e2:	ac ee       	ldi	r26, 0xEC	; 236
    98e4:	b4 ef       	ldi	r27, 0xF4	; 244
    98e6:	a5 01       	movw	r20, r10
    98e8:	94 01       	movw	r18, r8
    98ea:	b3 df       	rcall	.-154    	; 0x9852 <__mulohisi3>
    98ec:	dc 01       	movw	r26, r24
    98ee:	cb 01       	movw	r24, r22
    98f0:	8c 0d       	add	r24, r12
    98f2:	9d 1d       	adc	r25, r13
    98f4:	ae 1d       	adc	r26, r14
    98f6:	bf 1d       	adc	r27, r15
    98f8:	b7 ff       	sbrs	r27, 7
    98fa:	03 c0       	rjmp	.+6      	; 0x9902 <do_rand+0x6c>
    98fc:	01 97       	sbiw	r24, 0x01	; 1
    98fe:	a1 09       	sbc	r26, r1
    9900:	b0 48       	sbci	r27, 0x80	; 128
    9902:	88 83       	st	Y, r24
    9904:	99 83       	std	Y+1, r25	; 0x01
    9906:	aa 83       	std	Y+2, r26	; 0x02
    9908:	bb 83       	std	Y+3, r27	; 0x03
    990a:	9f 77       	andi	r25, 0x7F	; 127
    990c:	df 91       	pop	r29
    990e:	cf 91       	pop	r28
    9910:	ff 90       	pop	r15
    9912:	ef 90       	pop	r14
    9914:	df 90       	pop	r13
    9916:	cf 90       	pop	r12
    9918:	bf 90       	pop	r11
    991a:	af 90       	pop	r10
    991c:	9f 90       	pop	r9
    991e:	8f 90       	pop	r8
    9920:	08 95       	ret

00009922 <rand_r>:
    9922:	b9 cf       	rjmp	.-142    	; 0x9896 <do_rand>

00009924 <rand>:
    9924:	80 e0       	ldi	r24, 0x00	; 0
    9926:	92 e0       	ldi	r25, 0x02	; 2
    9928:	b6 cf       	rjmp	.-148    	; 0x9896 <do_rand>

0000992a <srand>:
    992a:	a0 e0       	ldi	r26, 0x00	; 0
    992c:	b0 e0       	ldi	r27, 0x00	; 0
    992e:	80 93 00 02 	sts	0x0200, r24
    9932:	90 93 01 02 	sts	0x0201, r25
    9936:	a0 93 02 02 	sts	0x0202, r26
    993a:	b0 93 03 02 	sts	0x0203, r27
    993e:	08 95       	ret

00009940 <memcmp>:
    9940:	fb 01       	movw	r30, r22
    9942:	dc 01       	movw	r26, r24
    9944:	04 c0       	rjmp	.+8      	; 0x994e <memcmp+0xe>
    9946:	8d 91       	ld	r24, X+
    9948:	01 90       	ld	r0, Z+
    994a:	80 19       	sub	r24, r0
    994c:	21 f4       	brne	.+8      	; 0x9956 <memcmp+0x16>
    994e:	41 50       	subi	r20, 0x01	; 1
    9950:	50 40       	sbci	r21, 0x00	; 0
    9952:	c8 f7       	brcc	.-14     	; 0x9946 <memcmp+0x6>
    9954:	88 1b       	sub	r24, r24
    9956:	99 0b       	sbc	r25, r25
    9958:	08 95       	ret

0000995a <memcpy>:
    995a:	fb 01       	movw	r30, r22
    995c:	dc 01       	movw	r26, r24
    995e:	02 c0       	rjmp	.+4      	; 0x9964 <memcpy+0xa>
    9960:	01 90       	ld	r0, Z+
    9962:	0d 92       	st	X+, r0
    9964:	41 50       	subi	r20, 0x01	; 1
    9966:	50 40       	sbci	r21, 0x00	; 0
    9968:	d8 f7       	brcc	.-10     	; 0x9960 <memcpy+0x6>
    996a:	08 95       	ret

0000996c <memset>:
    996c:	dc 01       	movw	r26, r24
    996e:	01 c0       	rjmp	.+2      	; 0x9972 <memset+0x6>
    9970:	6d 93       	st	X+, r22
    9972:	41 50       	subi	r20, 0x01	; 1
    9974:	50 40       	sbci	r21, 0x00	; 0
    9976:	e0 f7       	brcc	.-8      	; 0x9970 <memset+0x4>
    9978:	08 95       	ret

0000997a <__divmodsi4>:
    997a:	05 2e       	mov	r0, r21
    997c:	97 fb       	bst	r25, 7
    997e:	16 f4       	brtc	.+4      	; 0x9984 <__divmodsi4+0xa>
    9980:	00 94       	com	r0
    9982:	0f d0       	rcall	.+30     	; 0x99a2 <__negsi2>
    9984:	57 fd       	sbrc	r21, 7
    9986:	05 d0       	rcall	.+10     	; 0x9992 <__divmodsi4_neg2>
    9988:	23 df       	rcall	.-442    	; 0x97d0 <__udivmodsi4>
    998a:	07 fc       	sbrc	r0, 7
    998c:	02 d0       	rcall	.+4      	; 0x9992 <__divmodsi4_neg2>
    998e:	46 f4       	brtc	.+16     	; 0x99a0 <__divmodsi4_exit>
    9990:	08 c0       	rjmp	.+16     	; 0x99a2 <__negsi2>

00009992 <__divmodsi4_neg2>:
    9992:	50 95       	com	r21
    9994:	40 95       	com	r20
    9996:	30 95       	com	r19
    9998:	21 95       	neg	r18
    999a:	3f 4f       	sbci	r19, 0xFF	; 255
    999c:	4f 4f       	sbci	r20, 0xFF	; 255
    999e:	5f 4f       	sbci	r21, 0xFF	; 255

000099a0 <__divmodsi4_exit>:
    99a0:	08 95       	ret

000099a2 <__negsi2>:
    99a2:	90 95       	com	r25
    99a4:	80 95       	com	r24
    99a6:	70 95       	com	r23
    99a8:	61 95       	neg	r22
    99aa:	7f 4f       	sbci	r23, 0xFF	; 255
    99ac:	8f 4f       	sbci	r24, 0xFF	; 255
    99ae:	9f 4f       	sbci	r25, 0xFF	; 255
    99b0:	08 95       	ret

000099b2 <_exit>:
    99b2:	f8 94       	cli

000099b4 <__stop_program>:
    99b4:	ff cf       	rjmp	.-2      	; 0x99b4 <__stop_program>
