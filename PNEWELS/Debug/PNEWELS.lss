
PNEWELS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000752  00800200  00009c9a  00009d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009c9a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001c56  00800952  00800952  0000a4a0  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000a4a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000060  00000000  00000000  0000a4a3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000a504  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a78  00000000  00000000  0000a548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00015c2c  00000000  00000000  0000afc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003ce5  00000000  00000000  00020bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000083d8  00000000  00000000  000248d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002054  00000000  00000000  0002ccac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004212  00000000  00000000  0002ed00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a632  00000000  00000000  00032f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a08  00000000  00000000  0003d544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	92 c1       	rjmp	.+804    	; 0x326 <__ctors_end>
       2:	00 00       	nop
       4:	35 c7       	rjmp	.+3690   	; 0xe70 <__vector_1>
       6:	00 00       	nop
       8:	60 c7       	rjmp	.+3776   	; 0xeca <__vector_2>
       a:	00 00       	nop
       c:	8b c7       	rjmp	.+3862   	; 0xf24 <__vector_3>
       e:	00 00       	nop
      10:	b6 c7       	rjmp	.+3948   	; 0xf7e <__vector_4>
      12:	00 00       	nop
      14:	e1 c7       	rjmp	.+4034   	; 0xfd8 <__vector_5>
      16:	00 00       	nop
      18:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_6>
      1c:	0c 94 46 08 	jmp	0x108c	; 0x108c <__vector_7>
      20:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_8>
      24:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_9>
      28:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_10>
      2c:	9c c1       	rjmp	.+824    	; 0x366 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9a c1       	rjmp	.+820    	; 0x366 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c1       	rjmp	.+816    	; 0x366 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c1       	rjmp	.+812    	; 0x366 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 83 37 	jmp	0x6f06	; 0x6f06 <__vector_15>
      40:	92 c1       	rjmp	.+804    	; 0x366 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c1       	rjmp	.+800    	; 0x366 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c1       	rjmp	.+796    	; 0x366 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c1       	rjmp	.+792    	; 0x366 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c1       	rjmp	.+788    	; 0x366 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c1       	rjmp	.+784    	; 0x366 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c1       	rjmp	.+780    	; 0x366 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 55 37 	jmp	0x6eaa	; 0x6eaa <__vector_23>
      60:	82 c1       	rjmp	.+772    	; 0x366 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c1       	rjmp	.+768    	; 0x366 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c1       	rjmp	.+764    	; 0x366 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c1       	rjmp	.+760    	; 0x366 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c1       	rjmp	.+756    	; 0x366 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c1       	rjmp	.+752    	; 0x366 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c1       	rjmp	.+748    	; 0x366 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c1       	rjmp	.+744    	; 0x366 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c1       	rjmp	.+740    	; 0x366 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c1       	rjmp	.+736    	; 0x366 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c1       	rjmp	.+732    	; 0x366 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c1       	rjmp	.+728    	; 0x366 <__bad_interrupt>
      8e:	00 00       	nop
      90:	82 c6       	rjmp	.+3332   	; 0xd96 <__vector_36>
      92:	00 00       	nop
      94:	68 c1       	rjmp	.+720    	; 0x366 <__bad_interrupt>
      96:	00 00       	nop
      98:	66 c1       	rjmp	.+716    	; 0x366 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d6 c3       	rjmp	.+1964   	; 0x84a <__vector_39>
      9e:	00 00       	nop
      a0:	62 c1       	rjmp	.+708    	; 0x366 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	60 c1       	rjmp	.+704    	; 0x366 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_42>
      ac:	5c c1       	rjmp	.+696    	; 0x366 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5a c1       	rjmp	.+692    	; 0x366 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	58 c1       	rjmp	.+688    	; 0x366 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	56 c1       	rjmp	.+684    	; 0x366 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	54 c1       	rjmp	.+680    	; 0x366 <__bad_interrupt>
      be:	00 00       	nop
      c0:	52 c1       	rjmp	.+676    	; 0x366 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	50 c1       	rjmp	.+672    	; 0x366 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4e c1       	rjmp	.+668    	; 0x366 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4c c1       	rjmp	.+664    	; 0x366 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4a c1       	rjmp	.+660    	; 0x366 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	48 c1       	rjmp	.+656    	; 0x366 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	46 c1       	rjmp	.+652    	; 0x366 <__bad_interrupt>
      da:	00 00       	nop
      dc:	44 c1       	rjmp	.+648    	; 0x366 <__bad_interrupt>
      de:	00 00       	nop
      e0:	42 c1       	rjmp	.+644    	; 0x366 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	40 c1       	rjmp	.+640    	; 0x366 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	3e c1       	rjmp	.+636    	; 0x366 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	3c c1       	rjmp	.+632    	; 0x366 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	3a c1       	rjmp	.+628    	; 0x366 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	38 c1       	rjmp	.+624    	; 0x366 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	36 c1       	rjmp	.+620    	; 0x366 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	34 c1       	rjmp	.+616    	; 0x366 <__bad_interrupt>
      fe:	00 00       	nop
     100:	32 c1       	rjmp	.+612    	; 0x366 <__bad_interrupt>
     102:	00 00       	nop
     104:	30 c1       	rjmp	.+608    	; 0x366 <__bad_interrupt>
     106:	00 00       	nop
     108:	2e c1       	rjmp	.+604    	; 0x366 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	2c c1       	rjmp	.+600    	; 0x366 <__bad_interrupt>
     10e:	00 00       	nop
     110:	2a c1       	rjmp	.+596    	; 0x366 <__bad_interrupt>
     112:	00 00       	nop
     114:	28 c1       	rjmp	.+592    	; 0x366 <__bad_interrupt>
     116:	00 00       	nop
     118:	26 c1       	rjmp	.+588    	; 0x366 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	24 c1       	rjmp	.+584    	; 0x366 <__bad_interrupt>
     11e:	00 00       	nop
     120:	22 c1       	rjmp	.+580    	; 0x366 <__bad_interrupt>
     122:	00 00       	nop
     124:	20 c1       	rjmp	.+576    	; 0x366 <__bad_interrupt>
     126:	00 00       	nop
     128:	1e c1       	rjmp	.+572    	; 0x366 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	1c c1       	rjmp	.+568    	; 0x366 <__bad_interrupt>
     12e:	00 00       	nop
     130:	1a c1       	rjmp	.+564    	; 0x366 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 04       	cpc	r13, r0
     136:	cc 05       	cpc	r28, r12
     138:	cc 05       	cpc	r28, r12
     13a:	cc 05       	cpc	r28, r12
     13c:	cc 05       	cpc	r28, r12
     13e:	cc 05       	cpc	r28, r12
     140:	cc 05       	cpc	r28, r12
     142:	cc 05       	cpc	r28, r12
     144:	47 04       	cpc	r4, r7
     146:	cc 05       	cpc	r28, r12
     148:	cc 05       	cpc	r28, r12
     14a:	cc 05       	cpc	r28, r12
     14c:	cc 05       	cpc	r28, r12
     14e:	cc 05       	cpc	r28, r12
     150:	cc 05       	cpc	r28, r12
     152:	cc 05       	cpc	r28, r12
     154:	47 04       	cpc	r4, r7
     156:	cc 05       	cpc	r28, r12
     158:	cc 05       	cpc	r28, r12
     15a:	cc 05       	cpc	r28, r12
     15c:	cc 05       	cpc	r28, r12
     15e:	cc 05       	cpc	r28, r12
     160:	cc 05       	cpc	r28, r12
     162:	cc 05       	cpc	r28, r12
     164:	6c 04       	cpc	r6, r12
     166:	cc 05       	cpc	r28, r12
     168:	cc 05       	cpc	r28, r12
     16a:	cc 05       	cpc	r28, r12
     16c:	cc 05       	cpc	r28, r12
     16e:	cc 05       	cpc	r28, r12
     170:	cc 05       	cpc	r28, r12
     172:	cc 05       	cpc	r28, r12
     174:	d0 04       	cpc	r13, r0
     176:	cc 05       	cpc	r28, r12
     178:	cc 05       	cpc	r28, r12
     17a:	cc 05       	cpc	r28, r12
     17c:	cc 05       	cpc	r28, r12
     17e:	cc 05       	cpc	r28, r12
     180:	cc 05       	cpc	r28, r12
     182:	cc 05       	cpc	r28, r12
     184:	6c 04       	cpc	r6, r12
     186:	cc 05       	cpc	r28, r12
     188:	cc 05       	cpc	r28, r12
     18a:	cc 05       	cpc	r28, r12
     18c:	cc 05       	cpc	r28, r12
     18e:	cc 05       	cpc	r28, r12
     190:	cc 05       	cpc	r28, r12
     192:	cc 05       	cpc	r28, r12
     194:	d0 04       	cpc	r13, r0
     196:	cc 05       	cpc	r28, r12
     198:	cc 05       	cpc	r28, r12
     19a:	cc 05       	cpc	r28, r12
     19c:	cc 05       	cpc	r28, r12
     19e:	cc 05       	cpc	r28, r12
     1a0:	cc 05       	cpc	r28, r12
     1a2:	cc 05       	cpc	r28, r12
     1a4:	5d 05       	cpc	r21, r13
     1a6:	cc 05       	cpc	r28, r12
     1a8:	cc 05       	cpc	r28, r12
     1aa:	cc 05       	cpc	r28, r12
     1ac:	cc 05       	cpc	r28, r12
     1ae:	cc 05       	cpc	r28, r12
     1b0:	cc 05       	cpc	r28, r12
     1b2:	cc 05       	cpc	r28, r12
     1b4:	d5 04       	cpc	r13, r5
     1b6:	cc 05       	cpc	r28, r12
     1b8:	cc 05       	cpc	r28, r12
     1ba:	cc 05       	cpc	r28, r12
     1bc:	cc 05       	cpc	r28, r12
     1be:	cc 05       	cpc	r28, r12
     1c0:	cc 05       	cpc	r28, r12
     1c2:	cc 05       	cpc	r28, r12
     1c4:	d0 04       	cpc	r13, r0
     1c6:	cc 05       	cpc	r28, r12
     1c8:	cc 05       	cpc	r28, r12
     1ca:	cc 05       	cpc	r28, r12
     1cc:	cc 05       	cpc	r28, r12
     1ce:	cc 05       	cpc	r28, r12
     1d0:	cc 05       	cpc	r28, r12
     1d2:	cc 05       	cpc	r28, r12
     1d4:	fe 04       	cpc	r15, r14
     1d6:	cc 05       	cpc	r28, r12
     1d8:	cc 05       	cpc	r28, r12
     1da:	cc 05       	cpc	r28, r12
     1dc:	cc 05       	cpc	r28, r12
     1de:	cc 05       	cpc	r28, r12
     1e0:	cc 05       	cpc	r28, r12
     1e2:	cc 05       	cpc	r28, r12
     1e4:	36 05       	cpc	r19, r6
     1e6:	cc 05       	cpc	r28, r12
     1e8:	cc 05       	cpc	r28, r12
     1ea:	cc 05       	cpc	r28, r12
     1ec:	cc 05       	cpc	r28, r12
     1ee:	cc 05       	cpc	r28, r12
     1f0:	cc 05       	cpc	r28, r12
     1f2:	cc 05       	cpc	r28, r12
     1f4:	91 05       	cpc	r25, r1
     1f6:	cc 05       	cpc	r28, r12
     1f8:	cc 05       	cpc	r28, r12
     1fa:	cc 05       	cpc	r28, r12
     1fc:	cc 05       	cpc	r28, r12
     1fe:	cc 05       	cpc	r28, r12
     200:	cc 05       	cpc	r28, r12
     202:	cc 05       	cpc	r28, r12
     204:	91 05       	cpc	r25, r1
     206:	cc 05       	cpc	r28, r12
     208:	cc 05       	cpc	r28, r12
     20a:	cc 05       	cpc	r28, r12
     20c:	cc 05       	cpc	r28, r12
     20e:	cc 05       	cpc	r28, r12
     210:	cc 05       	cpc	r28, r12
     212:	cc 05       	cpc	r28, r12
     214:	91 05       	cpc	r25, r1
     216:	cc 05       	cpc	r28, r12
     218:	cc 05       	cpc	r28, r12
     21a:	cc 05       	cpc	r28, r12
     21c:	cc 05       	cpc	r28, r12
     21e:	cc 05       	cpc	r28, r12
     220:	cc 05       	cpc	r28, r12
     222:	cc 05       	cpc	r28, r12
     224:	91 05       	cpc	r25, r1
     226:	cc 05       	cpc	r28, r12
     228:	cc 05       	cpc	r28, r12
     22a:	cc 05       	cpc	r28, r12
     22c:	cc 05       	cpc	r28, r12
     22e:	cc 05       	cpc	r28, r12
     230:	cc 05       	cpc	r28, r12
     232:	cc 05       	cpc	r28, r12
     234:	9b 05       	cpc	r25, r11
     236:	cc 05       	cpc	r28, r12
     238:	cc 05       	cpc	r28, r12
     23a:	cc 05       	cpc	r28, r12
     23c:	cc 05       	cpc	r28, r12
     23e:	cc 05       	cpc	r28, r12
     240:	cc 05       	cpc	r28, r12
     242:	cc 05       	cpc	r28, r12
     244:	c0 05       	cpc	r28, r0
     246:	cc 05       	cpc	r28, r12
     248:	cc 05       	cpc	r28, r12
     24a:	cc 05       	cpc	r28, r12
     24c:	cc 05       	cpc	r28, r12
     24e:	cc 05       	cpc	r28, r12
     250:	cc 05       	cpc	r28, r12
     252:	cc 05       	cpc	r28, r12
     254:	9b 05       	cpc	r25, r11
     256:	cc 05       	cpc	r28, r12
     258:	cc 05       	cpc	r28, r12
     25a:	cc 05       	cpc	r28, r12
     25c:	cc 05       	cpc	r28, r12
     25e:	cc 05       	cpc	r28, r12
     260:	cc 05       	cpc	r28, r12
     262:	cc 05       	cpc	r28, r12
     264:	c0 05       	cpc	r28, r0
     266:	cc 05       	cpc	r28, r12
     268:	cc 05       	cpc	r28, r12
     26a:	cc 05       	cpc	r28, r12
     26c:	cc 05       	cpc	r28, r12
     26e:	cc 05       	cpc	r28, r12
     270:	cc 05       	cpc	r28, r12
     272:	cc 05       	cpc	r28, r12
     274:	b4 05       	cpc	r27, r4
     276:	cc 05       	cpc	r28, r12
     278:	cc 05       	cpc	r28, r12
     27a:	cc 05       	cpc	r28, r12
     27c:	cc 05       	cpc	r28, r12
     27e:	cc 05       	cpc	r28, r12
     280:	cc 05       	cpc	r28, r12
     282:	cc 05       	cpc	r28, r12
     284:	66 05       	cpc	r22, r6
     286:	cc 05       	cpc	r28, r12
     288:	cc 05       	cpc	r28, r12
     28a:	cc 05       	cpc	r28, r12
     28c:	cc 05       	cpc	r28, r12
     28e:	cc 05       	cpc	r28, r12
     290:	cc 05       	cpc	r28, r12
     292:	cc 05       	cpc	r28, r12
     294:	66 05       	cpc	r22, r6
     296:	cc 05       	cpc	r28, r12
     298:	cc 05       	cpc	r28, r12
     29a:	cc 05       	cpc	r28, r12
     29c:	cc 05       	cpc	r28, r12
     29e:	cc 05       	cpc	r28, r12
     2a0:	cc 05       	cpc	r28, r12
     2a2:	cc 05       	cpc	r28, r12
     2a4:	6a 05       	cpc	r22, r10
     2a6:	cc 05       	cpc	r28, r12
     2a8:	cc 05       	cpc	r28, r12
     2aa:	cc 05       	cpc	r28, r12
     2ac:	cc 05       	cpc	r28, r12
     2ae:	cc 05       	cpc	r28, r12
     2b0:	cc 05       	cpc	r28, r12
     2b2:	cc 05       	cpc	r28, r12
     2b4:	85 05       	cpc	r24, r5
     2b6:	cc 05       	cpc	r28, r12
     2b8:	cc 05       	cpc	r28, r12
     2ba:	cc 05       	cpc	r28, r12
     2bc:	cc 05       	cpc	r28, r12
     2be:	cc 05       	cpc	r28, r12
     2c0:	cc 05       	cpc	r28, r12
     2c2:	cc 05       	cpc	r28, r12
     2c4:	c0 05       	cpc	r28, r0
     2c6:	23 28       	or	r2, r3
     2c8:	0e 28       	or	r0, r14
     2ca:	10 28       	or	r1, r0
     2cc:	12 28       	or	r1, r2
     2ce:	14 28       	or	r1, r4
     2d0:	16 28       	or	r1, r6
     2d2:	18 28       	or	r1, r8
     2d4:	1a 28       	or	r1, r10
     2d6:	1c 28       	or	r1, r12
     2d8:	72 29       	or	r23, r2
     2da:	44 2a       	or	r4, r20
     2dc:	de 2a       	or	r13, r30
     2de:	78 2b       	or	r23, r24
     2e0:	12 2c       	mov	r1, r2
     2e2:	ac 2c       	mov	r10, r12
     2e4:	46 2d       	mov	r20, r6
     2e6:	e0 2d       	mov	r30, r0
     2e8:	8a 2e       	mov	r8, r26
     2ea:	57 2f       	mov	r21, r23
     2ec:	6d 30       	cpi	r22, 0x0D	; 13
     2ee:	80 30       	cpi	r24, 0x00	; 0
     2f0:	8e 30       	cpi	r24, 0x0E	; 14
     2f2:	9e 30       	cpi	r25, 0x0E	; 14
     2f4:	ae 30       	cpi	r26, 0x0E	; 14
     2f6:	c2 30       	cpi	r28, 0x02	; 2
     2f8:	e0 30       	cpi	r30, 0x00	; 0
     2fa:	cf 30       	cpi	r28, 0x0F	; 15
     2fc:	11 32       	cpi	r17, 0x21	; 33
     2fe:	14 32       	cpi	r17, 0x24	; 36
     300:	37 32       	cpi	r19, 0x27	; 39
     302:	16 32       	cpi	r17, 0x26	; 38
     304:	3a 32       	cpi	r19, 0x2A	; 42
     306:	3c 32       	cpi	r19, 0x2C	; 44
     308:	3e 32       	cpi	r19, 0x2E	; 46
     30a:	40 32       	cpi	r20, 0x20	; 32
     30c:	18 32       	cpi	r17, 0x28	; 40
     30e:	8d 34       	cpi	r24, 0x4D	; 77
     310:	96 34       	cpi	r25, 0x46	; 70
     312:	aa 34       	cpi	r26, 0x4A	; 74
     314:	a0 34       	cpi	r26, 0x40	; 64
     316:	b4 34       	cpi	r27, 0x44	; 68
     318:	be 34       	cpi	r27, 0x4E	; 78
     31a:	c8 34       	cpi	r28, 0x48	; 72
     31c:	d2 34       	cpi	r29, 0x42	; 66
     31e:	dc 34       	cpi	r29, 0x4C	; 76
     320:	f0 34       	cpi	r31, 0x40	; 64
     322:	fa 34       	cpi	r31, 0x4A	; 74
     324:	e6 34       	cpi	r30, 0x46	; 70

00000326 <__ctors_end>:
     326:	11 24       	eor	r1, r1
     328:	1f be       	out	0x3f, r1	; 63
     32a:	cf ef       	ldi	r28, 0xFF	; 255
     32c:	d1 e8       	ldi	r29, 0x81	; 129
     32e:	de bf       	out	0x3e, r29	; 62
     330:	cd bf       	out	0x3d, r28	; 61
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	0c bf       	out	0x3c, r16	; 60

00000336 <__do_copy_data>:
     336:	19 e0       	ldi	r17, 0x09	; 9
     338:	a0 e0       	ldi	r26, 0x00	; 0
     33a:	b2 e0       	ldi	r27, 0x02	; 2
     33c:	ea e9       	ldi	r30, 0x9A	; 154
     33e:	fc e9       	ldi	r31, 0x9C	; 156
     340:	00 e0       	ldi	r16, 0x00	; 0
     342:	0b bf       	out	0x3b, r16	; 59
     344:	02 c0       	rjmp	.+4      	; 0x34a <__do_copy_data+0x14>
     346:	07 90       	elpm	r0, Z+
     348:	0d 92       	st	X+, r0
     34a:	a2 35       	cpi	r26, 0x52	; 82
     34c:	b1 07       	cpc	r27, r17
     34e:	d9 f7       	brne	.-10     	; 0x346 <__do_copy_data+0x10>

00000350 <__do_clear_bss>:
     350:	25 e2       	ldi	r18, 0x25	; 37
     352:	a2 e5       	ldi	r26, 0x52	; 82
     354:	b9 e0       	ldi	r27, 0x09	; 9
     356:	01 c0       	rjmp	.+2      	; 0x35a <.do_clear_bss_start>

00000358 <.do_clear_bss_loop>:
     358:	1d 92       	st	X+, r1

0000035a <.do_clear_bss_start>:
     35a:	a8 3a       	cpi	r26, 0xA8	; 168
     35c:	b2 07       	cpc	r27, r18
     35e:	e1 f7       	brne	.-8      	; 0x358 <.do_clear_bss_loop>
     360:	5b d5       	rcall	.+2742   	; 0xe18 <main>
     362:	0c 94 4b 4e 	jmp	0x9c96	; 0x9c96 <_exit>

00000366 <__bad_interrupt>:
     366:	4c ce       	rjmp	.-872    	; 0x0 <__vectors>

00000368 <APP_EepromReadByte>:
  for (uint16_t i = 0; i < size; i++)
  {
    if (APP_EepromReadByte(address + i) != data[i])
      APP_EepromWriteByte(address + i, data[i]);
  }
}
     368:	f9 99       	sbic	0x1f, 1	; 31
     36a:	fe cf       	rjmp	.-4      	; 0x368 <APP_EepromReadByte>
     36c:	92 bd       	out	0x22, r25	; 34
     36e:	81 bd       	out	0x21, r24	; 33
     370:	f8 9a       	sbi	0x1f, 0	; 31
     372:	80 b5       	in	r24, 0x20	; 32
     374:	08 95       	ret

00000376 <APP_EepromRead>:

/*****************************************************************************
*****************************************************************************/
void APP_EepromRead(uint16_t address, uint8_t *data, uint16_t size)
{
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
  for (uint16_t i = 0; i < size; i++)
     382:	41 15       	cp	r20, r1
     384:	51 05       	cpc	r21, r1
     386:	79 f0       	breq	.+30     	; 0x3a6 <APP_EepromRead+0x30>
     388:	8b 01       	movw	r16, r22
     38a:	04 0f       	add	r16, r20
     38c:	15 1f       	adc	r17, r21
     38e:	eb 01       	movw	r28, r22
     390:	7c 01       	movw	r14, r24
     392:	e6 1a       	sub	r14, r22
     394:	f7 0a       	sbc	r15, r23
  {
    data[i] = APP_EepromReadByte(address + i);
     396:	c7 01       	movw	r24, r14
     398:	8c 0f       	add	r24, r28
     39a:	9d 1f       	adc	r25, r29
     39c:	e5 df       	rcall	.-54     	; 0x368 <APP_EepromReadByte>
     39e:	89 93       	st	Y+, r24

/*****************************************************************************
*****************************************************************************/
void APP_EepromRead(uint16_t address, uint8_t *data, uint16_t size)
{
  for (uint16_t i = 0; i < size; i++)
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	c1 f7       	brne	.-16     	; 0x396 <APP_EepromRead+0x20>
  {
    data[i] = APP_EepromReadByte(address + i);
  }
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	08 95       	ret

000003b4 <APP_IbLoadSettings>:
}

/*****************************************************************************
*****************************************************************************/
void APP_IbLoadSettings(void)
{
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	61 97       	sbiw	r28, 0x11	; 17
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
  APP_EepromRead(APP_IB_EEPROM_OFFSET, (uint8_t *)&appIb, sizeof(appIb));
     3d0:	4a e2       	ldi	r20, 0x2A	; 42
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	66 e1       	ldi	r22, 0x16	; 22
     3d6:	73 e2       	ldi	r23, 0x23	; 35
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	cc df       	rcall	.-104    	; 0x376 <APP_EepromRead>

  if (APP_EEPROM_MAGIC != appIb.magic)
     3de:	80 91 3c 23 	lds	r24, 0x233C
     3e2:	90 91 3d 23 	lds	r25, 0x233D
     3e6:	a0 91 3e 23 	lds	r26, 0x233E
     3ea:	b0 91 3f 23 	lds	r27, 0x233F
     3ee:	81 34       	cpi	r24, 0x41	; 65
     3f0:	9c 46       	sbci	r25, 0x6C	; 108
     3f2:	a5 46       	sbci	r26, 0x65	; 101
     3f4:	b8 47       	sbci	r27, 0x78	; 120
     3f6:	09 f4       	brne	.+2      	; 0x3fa <APP_IbLoadSettings+0x46>
     3f8:	7b c0       	rjmp	.+246    	; 0x4f0 <APP_IbLoadSettings+0x13c>
  {
    char hex[] = "0123456789abcdef";
     3fa:	81 e1       	ldi	r24, 0x11	; 17
     3fc:	e7 e1       	ldi	r30, 0x17	; 23
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	de 01       	movw	r26, r28
     402:	11 96       	adiw	r26, 0x01	; 1
     404:	01 90       	ld	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	8a 95       	dec	r24
     40a:	e1 f7       	brne	.-8      	; 0x404 <APP_IbLoadSettings+0x50>

/*-------------Initialize RF parameter----------------*/
    appIb.addr = rf_init(DEVICE_ADDRESS_L,PNEWELS_Buffer.deviceAddress);
     40c:	0f 2e       	mov	r0, r31
     40e:	fe e6       	ldi	r31, 0x6E	; 110
     410:	ef 2e       	mov	r14, r31
     412:	f2 e2       	ldi	r31, 0x22	; 34
     414:	ff 2e       	mov	r15, r31
     416:	f0 2d       	mov	r31, r0
     418:	f7 01       	movw	r30, r14
     41a:	63 8d       	ldd	r22, Z+27	; 0x1b
     41c:	74 8d       	ldd	r23, Z+28	; 0x1c
     41e:	8c ef       	ldi	r24, 0xFC	; 252
     420:	9f e0       	ldi	r25, 0x0F	; 15
     422:	0e 94 0f 21 	call	0x421e	; 0x421e <rf_init>
     426:	06 e1       	ldi	r16, 0x16	; 22
     428:	13 e2       	ldi	r17, 0x23	; 35
     42a:	f8 01       	movw	r30, r16
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	80 83       	st	Z, r24
    appIb.panId = rf_init(DEVICE_PAN_L,PNEWELS_Buffer.devicePAN);
     430:	f7 01       	movw	r30, r14
     432:	65 8d       	ldd	r22, Z+29	; 0x1d
     434:	76 8d       	ldd	r23, Z+30	; 0x1e
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e1       	ldi	r25, 0x10	; 16
     43a:	0e 94 0f 21 	call	0x421e	; 0x421e <rf_init>
     43e:	f8 01       	movw	r30, r16
     440:	95 83       	std	Z+5, r25	; 0x05
     442:	84 83       	std	Z+4, r24	; 0x04
    appIb.channel = rf_init(DEVICE_CHANNEL_L,PNEWELS_Buffer.deviceChannel);
     444:	f7 01       	movw	r30, r14
     446:	61 8d       	ldd	r22, Z+25	; 0x19
     448:	72 8d       	ldd	r23, Z+26	; 0x1a
     44a:	8e ef       	ldi	r24, 0xFE	; 254
     44c:	9f e0       	ldi	r25, 0x0F	; 15
     44e:	0e 94 0f 21 	call	0x421e	; 0x421e <rf_init>
     452:	f8 01       	movw	r30, r16
     454:	93 83       	std	Z+3, r25	; 0x03
     456:	82 83       	std	Z+2, r24	; 0x02
//------------------------------------------------------
/*-------------Initialize Device parameter----------------*/
	/*PNEWELS_Buffer.groupID = readE2prom(GROUP_ID);*/

    memset(appIb.name, ' ', sizeof(appIb.name));
     458:	40 e2       	ldi	r20, 0x20	; 32
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	60 e2       	ldi	r22, 0x20	; 32
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	8c e1       	ldi	r24, 0x1C	; 28
     462:	93 e2       	ldi	r25, 0x23	; 35
     464:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <memset>
    memcpy(appIb.name, "Device_xxxx", strlen("Device_xxxx"));
     468:	8b e0       	ldi	r24, 0x0B	; 11
     46a:	eb e0       	ldi	r30, 0x0B	; 11
     46c:	f2 e0       	ldi	r31, 0x02	; 2
     46e:	ac e1       	ldi	r26, 0x1C	; 28
     470:	b3 e2       	ldi	r27, 0x23	; 35
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <APP_IbLoadSettings+0xbe>
    appIb.name[7] = hex[(appIb.addr >> 12) & 0x0f];
     47a:	f8 01       	movw	r30, r16
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	fc 01       	movw	r30, r24
     482:	ef 2f       	mov	r30, r31
     484:	ff 27       	eor	r31, r31
     486:	e2 95       	swap	r30
     488:	ef 70       	andi	r30, 0x0F	; 15
     48a:	21 e0       	ldi	r18, 0x01	; 1
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	2c 0f       	add	r18, r28
     490:	3d 1f       	adc	r19, r29
     492:	e2 0f       	add	r30, r18
     494:	f3 1f       	adc	r31, r19
     496:	20 81       	ld	r18, Z
     498:	f8 01       	movw	r30, r16
     49a:	25 87       	std	Z+13, r18	; 0x0d
    appIb.name[8] = hex[(appIb.addr >> 8) & 0x0f];
     49c:	e9 2f       	mov	r30, r25
     49e:	ff 27       	eor	r31, r31
     4a0:	ef 70       	andi	r30, 0x0F	; 15
     4a2:	ff 27       	eor	r31, r31
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	2c 0f       	add	r18, r28
     4aa:	3d 1f       	adc	r19, r29
     4ac:	e2 0f       	add	r30, r18
     4ae:	f3 1f       	adc	r31, r19
     4b0:	20 81       	ld	r18, Z
     4b2:	f8 01       	movw	r30, r16
     4b4:	26 87       	std	Z+14, r18	; 0x0e
    appIb.name[9] = hex[(appIb.addr >> 4) & 0x0f];
     4b6:	fc 01       	movw	r30, r24
     4b8:	f2 95       	swap	r31
     4ba:	e2 95       	swap	r30
     4bc:	ef 70       	andi	r30, 0x0F	; 15
     4be:	ef 27       	eor	r30, r31
     4c0:	ff 70       	andi	r31, 0x0F	; 15
     4c2:	ef 27       	eor	r30, r31
     4c4:	ef 70       	andi	r30, 0x0F	; 15
     4c6:	ff 27       	eor	r31, r31
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	2c 0f       	add	r18, r28
     4ce:	3d 1f       	adc	r19, r29
     4d0:	e2 0f       	add	r30, r18
     4d2:	f3 1f       	adc	r31, r19
     4d4:	20 81       	ld	r18, Z
     4d6:	f8 01       	movw	r30, r16
     4d8:	27 87       	std	Z+15, r18	; 0x0f
    appIb.name[10] = hex[appIb.addr & 0x0f];
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	99 27       	eor	r25, r25
     4de:	e1 e0       	ldi	r30, 0x01	; 1
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ec 0f       	add	r30, r28
     4e4:	fd 1f       	adc	r31, r29
     4e6:	e8 0f       	add	r30, r24
     4e8:	f9 1f       	adc	r31, r25
     4ea:	80 81       	ld	r24, Z
     4ec:	f8 01       	movw	r30, r16
     4ee:	80 8b       	std	Z+16, r24	; 0x10
  }
}
     4f0:	61 96       	adiw	r28, 0x11	; 17
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <APP_IbLoadSettings_WPS>:

void APP_IbLoadSettings_WPS(void)
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	APP_EepromRead(APP_IB_EEPROM_OFFSET, (uint8_t *)&appIb, sizeof(appIb));
     50e:	4a e2       	ldi	r20, 0x2A	; 42
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	66 e1       	ldi	r22, 0x16	; 22
     514:	73 e2       	ldi	r23, 0x23	; 35
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	2d df       	rcall	.-422    	; 0x376 <APP_EepromRead>

	if (APP_EEPROM_MAGIC != appIb.magic)
     51c:	80 91 3c 23 	lds	r24, 0x233C
     520:	90 91 3d 23 	lds	r25, 0x233D
     524:	a0 91 3e 23 	lds	r26, 0x233E
     528:	b0 91 3f 23 	lds	r27, 0x233F
     52c:	81 34       	cpi	r24, 0x41	; 65
     52e:	9c 46       	sbci	r25, 0x6C	; 108
     530:	a5 46       	sbci	r26, 0x65	; 101
     532:	b8 47       	sbci	r27, 0x78	; 120
     534:	11 f1       	breq	.+68     	; 0x57a <APP_IbLoadSettings_WPS+0x70>
	{
		char hex[] = "0123456789abcdef";

		/*-------------Initialize RF parameter----------------*/
		appIb.addr = WPS_ADDRESS;
     536:	c6 e1       	ldi	r28, 0x16	; 22
     538:	d3 e2       	ldi	r29, 0x23	; 35
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	99 83       	std	Y+1, r25	; 0x01
     540:	88 83       	st	Y, r24
		appIb.panId = WPS_PANID;
     542:	9d 83       	std	Y+5, r25	; 0x05
     544:	8c 83       	std	Y+4, r24	; 0x04
		appIb.channel = WPS_CHANNEL;
     546:	8f e0       	ldi	r24, 0x0F	; 15
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9b 83       	std	Y+3, r25	; 0x03
     54c:	8a 83       	std	Y+2, r24	; 0x02
		//------------------------------------------------------

		memset(appIb.name, ' ', sizeof(appIb.name));
     54e:	40 e2       	ldi	r20, 0x20	; 32
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	60 e2       	ldi	r22, 0x20	; 32
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	8c e1       	ldi	r24, 0x1C	; 28
     558:	93 e2       	ldi	r25, 0x23	; 35
     55a:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <memset>
		memcpy(appIb.name, "Device_xxxx", strlen("Device_xxxx"));
     55e:	8b e0       	ldi	r24, 0x0B	; 11
     560:	eb e0       	ldi	r30, 0x0B	; 11
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	ac e1       	ldi	r26, 0x1C	; 28
     566:	b3 e2       	ldi	r27, 0x23	; 35
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	8a 95       	dec	r24
     56e:	e1 f7       	brne	.-8      	; 0x568 <APP_IbLoadSettings_WPS+0x5e>
		appIb.name[7] = hex[(appIb.addr >> 12) & 0x0f];
     570:	86 e6       	ldi	r24, 0x66	; 102
     572:	8d 87       	std	Y+13, r24	; 0x0d
		appIb.name[8] = hex[(appIb.addr >> 8) & 0x0f];
     574:	8e 87       	std	Y+14, r24	; 0x0e
		appIb.name[9] = hex[(appIb.addr >> 4) & 0x0f];
     576:	8f 87       	std	Y+15, r24	; 0x0f
		appIb.name[10] = hex[appIb.addr & 0x0f];
     578:	88 8b       	std	Y+16, r24	; 0x10
	}
	APP_NwkInit(); //execute new setting
     57a:	4e d0       	rcall	.+156    	; 0x618 <APP_NwkInit>
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <appNwkDataConf>:
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
    if (req == &appNwkBuffer[idx].req)
     582:	29 e0       	ldi	r18, 0x09	; 9
     584:	84 35       	cpi	r24, 0x54	; 84
     586:	92 07       	cpc	r25, r18
     588:	69 f0       	breq	.+26     	; 0x5a4 <appNwkDataConf+0x22>
     58a:	45 ed       	ldi	r20, 0xD5	; 213
     58c:	59 e0       	ldi	r21, 0x09	; 9
     58e:	bc 01       	movw	r22, r24
*****************************************************************************/
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
     590:	21 e0       	ldi	r18, 0x01	; 1
    if (req == &appNwkBuffer[idx].req)
     592:	46 17       	cp	r20, r22
     594:	57 07       	cpc	r21, r23
     596:	39 f0       	breq	.+14     	; 0x5a6 <appNwkDataConf+0x24>
*****************************************************************************/
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	4f 57       	subi	r20, 0x7F	; 127
     59c:	5f 4f       	sbci	r21, 0xFF	; 255
     59e:	24 31       	cpi	r18, 0x14	; 20
     5a0:	c1 f7       	brne	.-16     	; 0x592 <appNwkDataConf+0x10>
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <appNwkDataConf+0x24>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
    if (req == &appNwkBuffer[idx].req)
      break;

  if (NWK_SUCCESS_STATUS == req->status)
     5a6:	fc 01       	movw	r30, r24
     5a8:	37 85       	ldd	r19, Z+15	; 0x0f
     5aa:	31 11       	cpse	r19, r1
     5ac:	0e c0       	rjmp	.+28     	; 0x5ca <appNwkDataConf+0x48>
  {
    appNwkBuffer[idx].busy = false;
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	f6 95       	lsr	r31
     5b4:	fe 2f       	mov	r31, r30
     5b6:	ee 27       	eor	r30, r30
     5b8:	f7 95       	ror	r31
     5ba:	e7 95       	ror	r30
     5bc:	2e 0f       	add	r18, r30
     5be:	3f 1f       	adc	r19, r31
     5c0:	f9 01       	movw	r30, r18
     5c2:	ee 5a       	subi	r30, 0xAE	; 174
     5c4:	f6 4f       	sbci	r31, 0xF6	; 246
     5c6:	10 82       	st	Z, r1
     5c8:	08 95       	ret
  }
  else
  {
    if (--appNwkBuffer[idx].retries)
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	f9 01       	movw	r30, r18
     5ce:	f6 95       	lsr	r31
     5d0:	fe 2f       	mov	r31, r30
     5d2:	ee 27       	eor	r30, r30
     5d4:	f7 95       	ror	r31
     5d6:	e7 95       	ror	r30
     5d8:	e2 0f       	add	r30, r18
     5da:	f3 1f       	adc	r31, r19
     5dc:	ee 5a       	subi	r30, 0xAE	; 174
     5de:	f6 4f       	sbci	r31, 0xF6	; 246
     5e0:	41 81       	ldd	r20, Z+1	; 0x01
     5e2:	41 50       	subi	r20, 0x01	; 1
     5e4:	41 83       	std	Z+1, r20	; 0x01
     5e6:	44 23       	and	r20, r20
     5e8:	19 f0       	breq	.+6      	; 0x5f0 <appNwkDataConf+0x6e>
      NWK_DataReq(req);
     5ea:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <NWK_DataReq>
     5ee:	08 95       	ret
    else
      appNwkBuffer[idx].busy = false;
     5f0:	f9 01       	movw	r30, r18
     5f2:	f6 95       	lsr	r31
     5f4:	fe 2f       	mov	r31, r30
     5f6:	ee 27       	eor	r30, r30
     5f8:	f7 95       	ror	r31
     5fa:	e7 95       	ror	r30
     5fc:	2e 0f       	add	r18, r30
     5fe:	3f 1f       	adc	r19, r31
     600:	f9 01       	movw	r30, r18
     602:	ee 5a       	subi	r30, 0xAE	; 174
     604:	f6 4f       	sbci	r31, 0xF6	; 246
     606:	10 82       	st	Z, r1
     608:	08 95       	ret

0000060a <appNwkDataInd>:
/*************************************************************************//**
*****************************************************************************/
static bool appNwkDataInd(NWK_DataInd_t *ind)
{
  //return APP_CommandReceived(ind->data, ind->size);
  return pneIncomingData(ind->data, ind->size);
     60a:	fc 01       	movw	r30, r24
     60c:	61 85       	ldd	r22, Z+9	; 0x09
     60e:	87 81       	ldd	r24, Z+7	; 0x07
     610:	90 85       	ldd	r25, Z+8	; 0x08
     612:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <pneIncomingData>
}
     616:	08 95       	ret

00000618 <APP_NwkInit>:
}

/*************************************************************************//**
*****************************************************************************/
void APP_NwkInit(void)
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
  NWK_SetAddr(appIb.addr);
     61c:	c6 e1       	ldi	r28, 0x16	; 22
     61e:	d3 e2       	ldi	r29, 0x23	; 35
     620:	88 81       	ld	r24, Y
     622:	99 81       	ldd	r25, Y+1	; 0x01
     624:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <NWK_SetAddr>
  NWK_SetPanId(appIb.panId);
     628:	8c 81       	ldd	r24, Y+4	; 0x04
     62a:	9d 81       	ldd	r25, Y+5	; 0x05
     62c:	0e 94 03 0c 	call	0x1806	; 0x1806 <NWK_SetPanId>
  PHY_SetChannel(appIb.channel);
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	0e 94 1f 14 	call	0x283e	; 0x283e <PHY_SetChannel>
  PHY_SetRxState(true);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 1b 14 	call	0x2836	; 0x2836 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);
     63c:	65 e0       	ldi	r22, 0x05	; 5
     63e:	73 e0       	ldi	r23, 0x03	; 3
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 0a 0c 	call	0x1814	; 0x1814 <NWK_OpenEndpoint>
     646:	a2 e5       	ldi	r26, 0x52	; 82
     648:	b9 e0       	ldi	r27, 0x09	; 9
     64a:	ed e5       	ldi	r30, 0x5D	; 93
     64c:	f9 e0       	ldi	r31, 0x09	; 9
     64e:	61 e7       	ldi	r22, 0x71	; 113
     650:	73 e1       	ldi	r23, 0x13	; 19

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    appNwkBuffer[i].busy = false;
    appNwkBuffer[i].req.dstAddr = 0;
    appNwkBuffer[i].req.dstEndpoint = APP_ENDPOINT;
     652:	81 e0       	ldi	r24, 0x01	; 1
    appNwkBuffer[i].req.srcEndpoint = APP_ENDPOINT;
    appNwkBuffer[i].req.options = NWK_OPT_ACK_REQUEST;
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
    appNwkBuffer[i].req.confirm = appNwkDataConf;
     654:	41 ec       	ldi	r20, 0xC1	; 193
     656:	52 e0       	ldi	r21, 0x02	; 2

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    appNwkBuffer[i].busy = false;
     658:	1c 92       	st	X, r1
    appNwkBuffer[i].req.dstAddr = 0;
     65a:	18 96       	adiw	r26, 0x08	; 8
     65c:	1c 92       	st	X, r1
     65e:	1e 92       	st	-X, r1
     660:	17 97       	sbiw	r26, 0x07	; 7
     662:	ef 01       	movw	r28, r30
     664:	22 97       	sbiw	r28, 0x02	; 2
    appNwkBuffer[i].req.dstEndpoint = APP_ENDPOINT;
     666:	88 83       	st	Y, r24
     668:	21 96       	adiw	r28, 0x01	; 1
    appNwkBuffer[i].req.srcEndpoint = APP_ENDPOINT;
     66a:	88 83       	st	Y, r24
    appNwkBuffer[i].req.options = NWK_OPT_ACK_REQUEST;
     66c:	80 83       	st	Z, r24
     66e:	9f 01       	movw	r18, r30
     670:	28 5f       	subi	r18, 0xF8	; 248
     672:	3f 4f       	sbci	r19, 0xFF	; 255
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
     674:	32 83       	std	Z+2, r19	; 0x02
     676:	21 83       	std	Z+1, r18	; 0x01
    appNwkBuffer[i].req.confirm = appNwkDataConf;
     678:	55 83       	std	Z+5, r21	; 0x05
     67a:	44 83       	std	Z+4, r20	; 0x04
     67c:	af 57       	subi	r26, 0x7F	; 127
     67e:	bf 4f       	sbci	r27, 0xFF	; 255
     680:	ef 57       	subi	r30, 0x7F	; 127
     682:	ff 4f       	sbci	r31, 0xFF	; 255
  PHY_SetChannel(appIb.channel);
  PHY_SetRxState(true);

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
     684:	e6 17       	cp	r30, r22
     686:	f7 07       	cpc	r31, r23
     688:	39 f7       	brne	.-50     	; 0x658 <APP_NwkInit+0x40>
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
    appNwkBuffer[i].req.confirm = appNwkDataConf;
  }

  //APP_CommandReport();
  pneOutgoingData();
     68a:	0e 94 b9 1b 	call	0x3772	; 0x3772 <pneOutgoingData>
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <APP_NwkGetBuffer>:
*****************************************************************************/
AppNwkBuffer_t *APP_NwkGetBuffer(void)
{
  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    if (false == appNwkBuffer[i].busy)
     694:	80 91 52 09 	lds	r24, 0x0952
     698:	88 23       	and	r24, r24
     69a:	59 f0       	breq	.+22     	; 0x6b2 <APP_NwkGetBuffer+0x1e>
     69c:	e3 ed       	ldi	r30, 0xD3	; 211
     69e:	f9 e0       	ldi	r31, 0x09	; 9
     6a0:	66 e6       	ldi	r22, 0x66	; 102
     6a2:	73 e1       	ldi	r23, 0x13	; 19
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	ac 01       	movw	r20, r24
     6aa:	20 81       	ld	r18, Z
     6ac:	21 11       	cpse	r18, r1
     6ae:	18 c0       	rjmp	.+48     	; 0x6e0 <APP_NwkGetBuffer+0x4c>
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <APP_NwkGetBuffer+0x22>
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
    {
      appNwkBuffer[i].busy = true;
     6b6:	fa 01       	movw	r30, r20
     6b8:	f6 95       	lsr	r31
     6ba:	fe 2f       	mov	r31, r30
     6bc:	ee 27       	eor	r30, r30
     6be:	f7 95       	ror	r31
     6c0:	e7 95       	ror	r30
     6c2:	4e 0f       	add	r20, r30
     6c4:	5f 1f       	adc	r21, r31
     6c6:	fa 01       	movw	r30, r20
     6c8:	ee 5a       	subi	r30, 0xAE	; 174
     6ca:	f6 4f       	sbci	r31, 0xF6	; 246
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 83       	st	Z, r24
      appNwkBuffer[i].size = 0;
     6d0:	df 01       	movw	r26, r30
     6d2:	a0 58       	subi	r26, 0x80	; 128
     6d4:	bf 4f       	sbci	r27, 0xFF	; 255
     6d6:	1c 92       	st	X, r1
      appNwkBuffer[i].retries = APP_NWK_RETRIES;
     6d8:	81 83       	std	Z+1, r24	; 0x01
      return &appNwkBuffer[i];
     6da:	8e 2f       	mov	r24, r30
     6dc:	9f 2f       	mov	r25, r31
     6de:	08 95       	ret
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	ef 57       	subi	r30, 0x7F	; 127
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255

/*************************************************************************//**
*****************************************************************************/
AppNwkBuffer_t *APP_NwkGetBuffer(void)
{
  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
     6e6:	e6 17       	cp	r30, r22
     6e8:	f7 07       	cpc	r31, r23
     6ea:	f1 f6       	brne	.-68     	; 0x6a8 <APP_NwkGetBuffer+0x14>
      appNwkBuffer[i].retries = APP_NWK_RETRIES;
      return &appNwkBuffer[i];
    }
  }

  return NULL;
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
}
     6f0:	08 95       	ret

000006f2 <APP_NwkSendBuffer>:

/*************************************************************************//**
*****************************************************************************/
void APP_NwkSendBuffer(AppNwkBuffer_t *buf)
{
  if (buf->size)
     6f2:	fc 01       	movw	r30, r24
     6f4:	e0 58       	subi	r30, 0x80	; 128
     6f6:	ff 4f       	sbci	r31, 0xFF	; 255
     6f8:	20 81       	ld	r18, Z
     6fa:	22 23       	and	r18, r18
     6fc:	31 f0       	breq	.+12     	; 0x70a <APP_NwkSendBuffer+0x18>
  {
    buf->req.size = buf->size;
     6fe:	fc 01       	movw	r30, r24
     700:	26 87       	std	Z+14, r18	; 0x0e
    NWK_DataReq(&buf->req);
     702:	02 96       	adiw	r24, 0x02	; 2
     704:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <NWK_DataReq>
     708:	08 95       	ret
  }
  else
  {
    buf->busy = false;
     70a:	fc 01       	movw	r30, r24
     70c:	10 82       	st	Z, r1
     70e:	08 95       	ret

00000710 <pneVerify_received>:
#include "PNE_Factory.h"
#include "crc.h"
#include "pneConfig.h"

uint8_t pneVerify_received(uint8_t *data, uint8_t size)
{
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
	uint16_t signature_d = (((uint16_t)data[size-2]) << 8) | ((uint16_t)data[size-1]);
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	9c 01       	movw	r18, r24
     718:	26 0f       	add	r18, r22
     71a:	37 1f       	adc	r19, r23
     71c:	f9 01       	movw	r30, r18
     71e:	32 97       	sbiw	r30, 0x02	; 2
     720:	c0 81       	ld	r28, Z
     722:	d0 e0       	ldi	r29, 0x00	; 0
     724:	dc 2f       	mov	r29, r28
     726:	cc 27       	eor	r28, r28
     728:	31 96       	adiw	r30, 0x01	; 1
     72a:	20 81       	ld	r18, Z
     72c:	c2 2b       	or	r28, r18
// 	int_to_ascii((uint8_t)(signature_d >> 8));
// 	int_to_ascii((uint8_t)(signature_d));
// 	send_usart_char("\r\n");
	/*int_to_ascii(data[9]);*/
	uint16_t signature = pnesign(((char*)(data)), ((uint16_t)(size - 2)), SIGNATURE_KEY, strlen(SIGNATURE_KEY)); //need some rework
     72e:	62 50       	subi	r22, 0x02	; 2
     730:	71 09       	sbc	r23, r1
     732:	26 e0       	ldi	r18, 0x06	; 6
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	48 e2       	ldi	r20, 0x28	; 40
     738:	52 e0       	ldi	r21, 0x02	; 2
     73a:	0e 94 18 4d 	call	0x9a30	; 0x9a30 <pnesign>
// 	int_to_ascii((uint8_t)(signature >> 8));
// 	int_to_ascii((uint8_t)(signature));
// 	send_usart_char("\r\n");
	if (signature == signature_d )
     73e:	21 e0       	ldi	r18, 0x01	; 1
     740:	c8 17       	cp	r28, r24
     742:	d9 07       	cpc	r29, r25
     744:	09 f0       	breq	.+2      	; 0x748 <pneVerify_received+0x38>
     746:	20 e0       	ldi	r18, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}
     748:	82 2f       	mov	r24, r18
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <twi_master_bus_reset>:
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 75 13 	sts	0x1375, r24
     756:	10 92 67 13 	sts	0x1367, r1
     75a:	80 e9       	ldi	r24, 0x90	; 144
     75c:	80 93 bc 00 	sts	0x00BC, r24
     760:	08 95       	ret

00000762 <twi_master_write>:
     762:	61 15       	cp	r22, r1
     764:	71 05       	cpc	r23, r1
     766:	29 f1       	breq	.+74     	; 0x7b2 <twi_master_write+0x50>
     768:	80 91 67 13 	lds	r24, 0x1367
     76c:	81 11       	cpse	r24, r1
     76e:	23 c0       	rjmp	.+70     	; 0x7b6 <twi_master_write+0x54>
     770:	ef e6       	ldi	r30, 0x6F	; 111
     772:	f3 e1       	ldi	r31, 0x13	; 19
     774:	71 83       	std	Z+1, r23	; 0x01
     776:	60 83       	st	Z, r22
     778:	13 82       	std	Z+3, r1	; 0x03
     77a:	12 82       	std	Z+2, r1	; 0x02
     77c:	15 82       	std	Z+5, r1	; 0x05
     77e:	14 82       	std	Z+4, r1	; 0x04
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 67 13 	sts	0x1367, r24
     786:	fb 01       	movw	r30, r22
     788:	84 81       	ldd	r24, Z+4	; 0x04
     78a:	95 81       	ldd	r25, Z+5	; 0x05
     78c:	89 2b       	or	r24, r25
     78e:	21 f4       	brne	.+8      	; 0x798 <twi_master_write+0x36>
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	80 93 75 13 	sts	0x1375, r24
     796:	03 c0       	rjmp	.+6      	; 0x79e <twi_master_write+0x3c>
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	80 93 75 13 	sts	0x1375, r24
     79e:	85 ea       	ldi	r24, 0xA5	; 165
     7a0:	80 93 bc 00 	sts	0x00BC, r24
     7a4:	80 91 67 13 	lds	r24, 0x1367
     7a8:	81 11       	cpse	r24, r1
     7aa:	fc cf       	rjmp	.-8      	; 0x7a4 <twi_master_write+0x42>
     7ac:	80 91 76 13 	lds	r24, 0x1376
     7b0:	08 95       	ret
     7b2:	88 ef       	ldi	r24, 0xF8	; 248
     7b4:	08 95       	ret
     7b6:	80 e8       	ldi	r24, 0x80	; 128
     7b8:	08 95       	ret

000007ba <twi_master_read>:
     7ba:	70 93 70 13 	sts	0x1370, r23
     7be:	60 93 6f 13 	sts	0x136F, r22
     7c2:	61 15       	cp	r22, r1
     7c4:	71 05       	cpc	r23, r1
     7c6:	41 f1       	breq	.+80     	; 0x818 <twi_master_read+0x5e>
     7c8:	fb 01       	movw	r30, r22
     7ca:	80 85       	ldd	r24, Z+8	; 0x08
     7cc:	91 85       	ldd	r25, Z+9	; 0x09
     7ce:	89 2b       	or	r24, r25
     7d0:	29 f1       	breq	.+74     	; 0x81c <twi_master_read+0x62>
     7d2:	80 91 67 13 	lds	r24, 0x1367
     7d6:	81 11       	cpse	r24, r1
     7d8:	23 c0       	rjmp	.+70     	; 0x820 <twi_master_read+0x66>
     7da:	ef e6       	ldi	r30, 0x6F	; 111
     7dc:	f3 e1       	ldi	r31, 0x13	; 19
     7de:	13 82       	std	Z+3, r1	; 0x03
     7e0:	12 82       	std	Z+2, r1	; 0x02
     7e2:	15 82       	std	Z+5, r1	; 0x05
     7e4:	14 82       	std	Z+4, r1	; 0x04
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 67 13 	sts	0x1367, r24
     7ec:	fb 01       	movw	r30, r22
     7ee:	84 81       	ldd	r24, Z+4	; 0x04
     7f0:	95 81       	ldd	r25, Z+5	; 0x05
     7f2:	89 2b       	or	r24, r25
     7f4:	21 f4       	brne	.+8      	; 0x7fe <twi_master_read+0x44>
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	80 93 75 13 	sts	0x1375, r24
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <twi_master_read+0x4a>
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	80 93 75 13 	sts	0x1375, r24
     804:	85 ea       	ldi	r24, 0xA5	; 165
     806:	80 93 bc 00 	sts	0x00BC, r24
     80a:	80 91 67 13 	lds	r24, 0x1367
     80e:	81 11       	cpse	r24, r1
     810:	fc cf       	rjmp	.-8      	; 0x80a <twi_master_read+0x50>
     812:	80 91 76 13 	lds	r24, 0x1376
     816:	08 95       	ret
     818:	88 ef       	ldi	r24, 0xF8	; 248
     81a:	08 95       	ret
     81c:	88 ef       	ldi	r24, 0xF8	; 248
     81e:	08 95       	ret
     820:	80 e8       	ldi	r24, 0x80	; 128
     822:	08 95       	ret

00000824 <twi_master_init>:
     824:	f8 94       	cli
     826:	ec eb       	ldi	r30, 0xBC	; 188
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	10 82       	st	Z, r1
     82c:	10 92 b9 00 	sts	0x00B9, r1
     830:	db 01       	movw	r26, r22
     832:	14 96       	adiw	r26, 0x04	; 4
     834:	8c 91       	ld	r24, X
     836:	80 93 b8 00 	sts	0x00B8, r24
     83a:	80 81       	ld	r24, Z
     83c:	81 60       	ori	r24, 0x01	; 1
     83e:	80 83       	st	Z, r24
     840:	78 94       	sei
     842:	10 92 66 13 	sts	0x1366, r1
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret

0000084a <__vector_39>:
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	0b b6       	in	r0, 0x3b	; 59
     856:	0f 92       	push	r0
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	4f 93       	push	r20
     85e:	5f 93       	push	r21
     860:	6f 93       	push	r22
     862:	7f 93       	push	r23
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	af 93       	push	r26
     86a:	bf 93       	push	r27
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	80 91 b9 00 	lds	r24, 0x00B9
     874:	88 7f       	andi	r24, 0xF8	; 248
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	89 3c       	cpi	r24, 0xC9	; 201
     87a:	91 05       	cpc	r25, r1
     87c:	08 f0       	brcs	.+2      	; 0x880 <__vector_39+0x36>
     87e:	8c c1       	rjmp	.+792    	; 0xb98 <__vector_39+0x34e>
     880:	fc 01       	movw	r30, r24
     882:	88 27       	eor	r24, r24
     884:	e6 56       	subi	r30, 0x66	; 102
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	8f 4f       	sbci	r24, 0xFF	; 255
     88a:	0c 94 7c 4d 	jmp	0x9af8	; 0x9af8 <__tablejump2__>
     88e:	80 91 75 13 	lds	r24, 0x1375
     892:	9e ef       	ldi	r25, 0xFE	; 254
     894:	98 0f       	add	r25, r24
     896:	93 30       	cpi	r25, 0x03	; 3
     898:	60 f4       	brcc	.+24     	; 0x8b2 <__vector_39+0x68>
     89a:	e0 91 6f 13 	lds	r30, 0x136F
     89e:	f0 91 70 13 	lds	r31, 0x1370
     8a2:	80 81       	ld	r24, Z
     8a4:	8e 7f       	andi	r24, 0xFE	; 254
     8a6:	80 93 bb 00 	sts	0x00BB, r24
     8aa:	85 e8       	ldi	r24, 0x85	; 133
     8ac:	80 93 bc 00 	sts	0x00BC, r24
     8b0:	8b c1       	rjmp	.+790    	; 0xbc8 <__vector_39+0x37e>
     8b2:	85 30       	cpi	r24, 0x05	; 5
     8b4:	61 f4       	brne	.+24     	; 0x8ce <__vector_39+0x84>
     8b6:	e0 91 6f 13 	lds	r30, 0x136F
     8ba:	f0 91 70 13 	lds	r31, 0x1370
     8be:	80 81       	ld	r24, Z
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	80 93 bb 00 	sts	0x00BB, r24
     8c6:	85 e8       	ldi	r24, 0x85	; 133
     8c8:	80 93 bc 00 	sts	0x00BC, r24
     8cc:	7d c1       	rjmp	.+762    	; 0xbc8 <__vector_39+0x37e>
     8ce:	40 df       	rcall	.-384    	; 0x750 <twi_master_bus_reset>
     8d0:	8b ef       	ldi	r24, 0xFB	; 251
     8d2:	80 93 76 13 	sts	0x1376, r24
     8d6:	78 c1       	rjmp	.+752    	; 0xbc8 <__vector_39+0x37e>
     8d8:	80 91 75 13 	lds	r24, 0x1375
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	51 f5       	brne	.+84     	; 0x934 <__vector_39+0xea>
     8e0:	ef e6       	ldi	r30, 0x6F	; 111
     8e2:	f3 e1       	ldi	r31, 0x13	; 19
     8e4:	84 81       	ldd	r24, Z+4	; 0x04
     8e6:	95 81       	ldd	r25, Z+5	; 0x05
     8e8:	01 90       	ld	r0, Z+
     8ea:	f0 81       	ld	r31, Z
     8ec:	e0 2d       	mov	r30, r0
     8ee:	20 85       	ldd	r18, Z+8	; 0x08
     8f0:	31 85       	ldd	r19, Z+9	; 0x09
     8f2:	82 17       	cp	r24, r18
     8f4:	93 07       	cpc	r25, r19
     8f6:	98 f4       	brcc	.+38     	; 0x91e <__vector_39+0xd4>
     8f8:	26 81       	ldd	r18, Z+6	; 0x06
     8fa:	37 81       	ldd	r19, Z+7	; 0x07
     8fc:	ac 01       	movw	r20, r24
     8fe:	4f 5f       	subi	r20, 0xFF	; 255
     900:	5f 4f       	sbci	r21, 0xFF	; 255
     902:	50 93 74 13 	sts	0x1374, r21
     906:	40 93 73 13 	sts	0x1373, r20
     90a:	f9 01       	movw	r30, r18
     90c:	e8 0f       	add	r30, r24
     90e:	f9 1f       	adc	r31, r25
     910:	80 81       	ld	r24, Z
     912:	80 93 bb 00 	sts	0x00BB, r24
     916:	85 e8       	ldi	r24, 0x85	; 133
     918:	80 93 bc 00 	sts	0x00BC, r24
     91c:	55 c1       	rjmp	.+682    	; 0xbc8 <__vector_39+0x37e>
     91e:	84 e9       	ldi	r24, 0x94	; 148
     920:	80 93 bc 00 	sts	0x00BC, r24
     924:	ef e6       	ldi	r30, 0x6F	; 111
     926:	f3 e1       	ldi	r31, 0x13	; 19
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	86 83       	std	Z+6, r24	; 0x06
     92c:	17 82       	std	Z+7, r1	; 0x07
     92e:	10 92 67 13 	sts	0x1367, r1
     932:	4a c1       	rjmp	.+660    	; 0xbc8 <__vector_39+0x37e>
     934:	9e ef       	ldi	r25, 0xFE	; 254
     936:	98 0f       	add	r25, r24
     938:	92 30       	cpi	r25, 0x02	; 2
     93a:	38 f5       	brcc	.+78     	; 0x98a <__vector_39+0x140>
     93c:	ef e6       	ldi	r30, 0x6F	; 111
     93e:	f3 e1       	ldi	r31, 0x13	; 19
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	93 81       	ldd	r25, Z+3	; 0x03
     944:	a0 81       	ld	r26, Z
     946:	b1 81       	ldd	r27, Z+1	; 0x01
     948:	a8 0f       	add	r26, r24
     94a:	b9 1f       	adc	r27, r25
     94c:	11 96       	adiw	r26, 0x01	; 1
     94e:	2c 91       	ld	r18, X
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	93 83       	std	Z+3, r25	; 0x03
     954:	82 83       	std	Z+2, r24	; 0x02
     956:	20 93 bb 00 	sts	0x00BB, r18
     95a:	25 e8       	ldi	r18, 0x85	; 133
     95c:	20 93 bc 00 	sts	0x00BC, r18
     960:	01 90       	ld	r0, Z+
     962:	f0 81       	ld	r31, Z
     964:	e0 2d       	mov	r30, r0
     966:	24 81       	ldd	r18, Z+4	; 0x04
     968:	35 81       	ldd	r19, Z+5	; 0x05
     96a:	28 17       	cp	r18, r24
     96c:	39 07       	cpc	r19, r25
     96e:	09 f0       	breq	.+2      	; 0x972 <__vector_39+0x128>
     970:	2b c1       	rjmp	.+598    	; 0xbc8 <__vector_39+0x37e>
     972:	80 91 75 13 	lds	r24, 0x1375
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__vector_39+0x138>
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	80 93 75 13 	sts	0x1375, r24
     980:	23 c1       	rjmp	.+582    	; 0xbc8 <__vector_39+0x37e>
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	80 93 75 13 	sts	0x1375, r24
     988:	1f c1       	rjmp	.+574    	; 0xbc8 <__vector_39+0x37e>
     98a:	85 30       	cpi	r24, 0x05	; 5
     98c:	21 f4       	brne	.+8      	; 0x996 <__vector_39+0x14c>
     98e:	85 ea       	ldi	r24, 0xA5	; 165
     990:	80 93 bc 00 	sts	0x00BC, r24
     994:	19 c1       	rjmp	.+562    	; 0xbc8 <__vector_39+0x37e>
     996:	dc de       	rcall	.-584    	; 0x750 <twi_master_bus_reset>
     998:	8b ef       	ldi	r24, 0xFB	; 251
     99a:	80 93 76 13 	sts	0x1376, r24
     99e:	14 c1       	rjmp	.+552    	; 0xbc8 <__vector_39+0x37e>
     9a0:	d7 de       	rcall	.-594    	; 0x750 <twi_master_bus_reset>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	80 93 76 13 	sts	0x1376, r24
     9a8:	0f c1       	rjmp	.+542    	; 0xbc8 <__vector_39+0x37e>
     9aa:	80 91 75 13 	lds	r24, 0x1375
     9ae:	85 30       	cpi	r24, 0x05	; 5
     9b0:	01 f5       	brne	.+64     	; 0x9f2 <__vector_39+0x1a8>
     9b2:	ef e6       	ldi	r30, 0x6F	; 111
     9b4:	f3 e1       	ldi	r31, 0x13	; 19
     9b6:	a0 81       	ld	r26, Z
     9b8:	b1 81       	ldd	r27, Z+1	; 0x01
     9ba:	18 96       	adiw	r26, 0x08	; 8
     9bc:	8d 91       	ld	r24, X+
     9be:	9c 91       	ld	r25, X
     9c0:	19 97       	sbiw	r26, 0x09	; 9
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	24 81       	ldd	r18, Z+4	; 0x04
     9c6:	35 81       	ldd	r19, Z+5	; 0x05
     9c8:	28 17       	cp	r18, r24
     9ca:	39 07       	cpc	r19, r25
     9cc:	49 f4       	brne	.+18     	; 0x9e0 <__vector_39+0x196>
     9ce:	ec eb       	ldi	r30, 0xBC	; 188
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	8f 7b       	andi	r24, 0xBF	; 191
     9d6:	80 83       	st	Z, r24
     9d8:	80 81       	ld	r24, Z
     9da:	85 68       	ori	r24, 0x85	; 133
     9dc:	80 83       	st	Z, r24
     9de:	f4 c0       	rjmp	.+488    	; 0xbc8 <__vector_39+0x37e>
     9e0:	ec eb       	ldi	r30, 0xBC	; 188
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	80 64       	ori	r24, 0x40	; 64
     9e8:	80 83       	st	Z, r24
     9ea:	80 81       	ld	r24, Z
     9ec:	85 68       	ori	r24, 0x85	; 133
     9ee:	80 83       	st	Z, r24
     9f0:	eb c0       	rjmp	.+470    	; 0xbc8 <__vector_39+0x37e>
     9f2:	ae de       	rcall	.-676    	; 0x750 <twi_master_bus_reset>
     9f4:	8b ef       	ldi	r24, 0xFB	; 251
     9f6:	80 93 76 13 	sts	0x1376, r24
     9fa:	e6 c0       	rjmp	.+460    	; 0xbc8 <__vector_39+0x37e>
     9fc:	20 91 bb 00 	lds	r18, 0x00BB
     a00:	80 91 75 13 	lds	r24, 0x1375
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	69 f5       	brne	.+90     	; 0xa62 <__vector_39+0x218>
     a08:	ef e6       	ldi	r30, 0x6F	; 111
     a0a:	f3 e1       	ldi	r31, 0x13	; 19
     a0c:	a0 81       	ld	r26, Z
     a0e:	b1 81       	ldd	r27, Z+1	; 0x01
     a10:	16 96       	adiw	r26, 0x06	; 6
     a12:	6d 91       	ld	r22, X+
     a14:	7c 91       	ld	r23, X
     a16:	17 97       	sbiw	r26, 0x07	; 7
     a18:	84 81       	ldd	r24, Z+4	; 0x04
     a1a:	95 81       	ldd	r25, Z+5	; 0x05
     a1c:	ac 01       	movw	r20, r24
     a1e:	4f 5f       	subi	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	55 83       	std	Z+5, r21	; 0x05
     a24:	44 83       	std	Z+4, r20	; 0x04
     a26:	fb 01       	movw	r30, r22
     a28:	e8 0f       	add	r30, r24
     a2a:	f9 1f       	adc	r31, r25
     a2c:	20 83       	st	Z, r18
     a2e:	18 96       	adiw	r26, 0x08	; 8
     a30:	8d 91       	ld	r24, X+
     a32:	9c 91       	ld	r25, X
     a34:	19 97       	sbiw	r26, 0x09	; 9
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	48 17       	cp	r20, r24
     a3a:	59 07       	cpc	r21, r25
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__vector_39+0x206>
     a3e:	ec eb       	ldi	r30, 0xBC	; 188
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	80 64       	ori	r24, 0x40	; 64
     a46:	80 83       	st	Z, r24
     a48:	80 81       	ld	r24, Z
     a4a:	85 68       	ori	r24, 0x85	; 133
     a4c:	80 83       	st	Z, r24
     a4e:	bc c0       	rjmp	.+376    	; 0xbc8 <__vector_39+0x37e>
     a50:	ec eb       	ldi	r30, 0xBC	; 188
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	8f 7b       	andi	r24, 0xBF	; 191
     a58:	80 83       	st	Z, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	85 68       	ori	r24, 0x85	; 133
     a5e:	80 83       	st	Z, r24
     a60:	b3 c0       	rjmp	.+358    	; 0xbc8 <__vector_39+0x37e>
     a62:	76 de       	rcall	.-788    	; 0x750 <twi_master_bus_reset>
     a64:	8b ef       	ldi	r24, 0xFB	; 251
     a66:	80 93 76 13 	sts	0x1376, r24
     a6a:	ae c0       	rjmp	.+348    	; 0xbc8 <__vector_39+0x37e>
     a6c:	20 91 bb 00 	lds	r18, 0x00BB
     a70:	80 91 75 13 	lds	r24, 0x1375
     a74:	85 30       	cpi	r24, 0x05	; 5
     a76:	e1 f4       	brne	.+56     	; 0xab0 <__vector_39+0x266>
     a78:	ef e6       	ldi	r30, 0x6F	; 111
     a7a:	f3 e1       	ldi	r31, 0x13	; 19
     a7c:	a0 81       	ld	r26, Z
     a7e:	b1 81       	ldd	r27, Z+1	; 0x01
     a80:	16 96       	adiw	r26, 0x06	; 6
     a82:	4d 91       	ld	r20, X+
     a84:	5c 91       	ld	r21, X
     a86:	17 97       	sbiw	r26, 0x07	; 7
     a88:	84 81       	ldd	r24, Z+4	; 0x04
     a8a:	95 81       	ldd	r25, Z+5	; 0x05
     a8c:	bc 01       	movw	r22, r24
     a8e:	6f 5f       	subi	r22, 0xFF	; 255
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	75 83       	std	Z+5, r23	; 0x05
     a94:	64 83       	std	Z+4, r22	; 0x04
     a96:	da 01       	movw	r26, r20
     a98:	a8 0f       	add	r26, r24
     a9a:	b9 1f       	adc	r27, r25
     a9c:	2c 93       	st	X, r18
     a9e:	84 e9       	ldi	r24, 0x94	; 148
     aa0:	80 93 bc 00 	sts	0x00BC, r24
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	86 83       	std	Z+6, r24	; 0x06
     aa8:	17 82       	std	Z+7, r1	; 0x07
     aaa:	10 92 67 13 	sts	0x1367, r1
     aae:	8c c0       	rjmp	.+280    	; 0xbc8 <__vector_39+0x37e>
     ab0:	4f de       	rcall	.-866    	; 0x750 <twi_master_bus_reset>
     ab2:	8b ef       	ldi	r24, 0xFB	; 251
     ab4:	80 93 76 13 	sts	0x1376, r24
     ab8:	87 c0       	rjmp	.+270    	; 0xbc8 <__vector_39+0x37e>
     aba:	ef e6       	ldi	r30, 0x6F	; 111
     abc:	f3 e1       	ldi	r31, 0x13	; 19
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	86 83       	std	Z+6, r24	; 0x06
     ac2:	86 ef       	ldi	r24, 0xF6	; 246
     ac4:	87 83       	std	Z+7, r24	; 0x07
     ac6:	10 92 67 13 	sts	0x1367, r1
     aca:	7e c0       	rjmp	.+252    	; 0xbc8 <__vector_39+0x37e>
     acc:	10 92 6b 13 	sts	0x136B, r1
     ad0:	10 92 6a 13 	sts	0x136A, r1
     ad4:	e8 e6       	ldi	r30, 0x68	; 104
     ad6:	f3 e1       	ldi	r31, 0x13	; 19
     ad8:	a0 81       	ld	r26, Z
     ada:	b1 81       	ldd	r27, Z+1	; 0x01
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	2d 91       	ld	r18, X+
     ae0:	3c 91       	ld	r19, X
     ae2:	13 97       	sbiw	r26, 0x03	; 3
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	93 81       	ldd	r25, Z+3	; 0x03
     ae8:	ac 01       	movw	r20, r24
     aea:	4f 5f       	subi	r20, 0xFF	; 255
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	53 83       	std	Z+3, r21	; 0x03
     af0:	42 83       	std	Z+2, r20	; 0x02
     af2:	d9 01       	movw	r26, r18
     af4:	a8 0f       	add	r26, r24
     af6:	b9 1f       	adc	r27, r25
     af8:	8c 91       	ld	r24, X
     afa:	80 93 bb 00 	sts	0x00BB, r24
     afe:	85 ec       	ldi	r24, 0xC5	; 197
     b00:	80 93 bc 00 	sts	0x00BC, r24
     b04:	88 e0       	ldi	r24, 0x08	; 8
     b06:	84 83       	std	Z+4, r24	; 0x04
     b08:	5f c0       	rjmp	.+190    	; 0xbc8 <__vector_39+0x37e>
     b0a:	e8 e6       	ldi	r30, 0x68	; 104
     b0c:	f3 e1       	ldi	r31, 0x13	; 19
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	84 83       	std	Z+4, r24	; 0x04
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	96 83       	std	Z+6, r25	; 0x06
     b18:	85 83       	std	Z+5, r24	; 0x05
     b1a:	85 ec       	ldi	r24, 0xC5	; 197
     b1c:	80 93 bc 00 	sts	0x00BC, r24
     b20:	53 c0       	rjmp	.+166    	; 0xbc8 <__vector_39+0x37e>
     b22:	e8 e6       	ldi	r30, 0x68	; 104
     b24:	f3 e1       	ldi	r31, 0x13	; 19
     b26:	13 82       	std	Z+3, r1	; 0x03
     b28:	12 82       	std	Z+2, r1	; 0x02
     b2a:	85 ec       	ldi	r24, 0xC5	; 197
     b2c:	80 93 bc 00 	sts	0x00BC, r24
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	84 83       	std	Z+4, r24	; 0x04
     b34:	49 c0       	rjmp	.+146    	; 0xbc8 <__vector_39+0x37e>
     b36:	20 91 bb 00 	lds	r18, 0x00BB
     b3a:	e8 e6       	ldi	r30, 0x68	; 104
     b3c:	f3 e1       	ldi	r31, 0x13	; 19
     b3e:	a0 81       	ld	r26, Z
     b40:	b1 81       	ldd	r27, Z+1	; 0x01
     b42:	4d 91       	ld	r20, X+
     b44:	5c 91       	ld	r21, X
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	bc 01       	movw	r22, r24
     b4c:	6f 5f       	subi	r22, 0xFF	; 255
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	73 83       	std	Z+3, r23	; 0x03
     b52:	62 83       	std	Z+2, r22	; 0x02
     b54:	da 01       	movw	r26, r20
     b56:	a8 0f       	add	r26, r24
     b58:	b9 1f       	adc	r27, r25
     b5a:	2c 93       	st	X, r18
     b5c:	85 ec       	ldi	r24, 0xC5	; 197
     b5e:	80 93 bc 00 	sts	0x00BC, r24
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	84 83       	std	Z+4, r24	; 0x04
     b66:	30 c0       	rjmp	.+96     	; 0xbc8 <__vector_39+0x37e>
     b68:	e8 e6       	ldi	r30, 0x68	; 104
     b6a:	f3 e1       	ldi	r31, 0x13	; 19
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	84 83       	std	Z+4, r24	; 0x04
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	96 83       	std	Z+6, r25	; 0x06
     b76:	85 83       	std	Z+5, r24	; 0x05
     b78:	85 ec       	ldi	r24, 0xC5	; 197
     b7a:	80 93 bc 00 	sts	0x00BC, r24
     b7e:	24 c0       	rjmp	.+72     	; 0xbc8 <__vector_39+0x37e>
     b80:	e8 e6       	ldi	r30, 0x68	; 104
     b82:	f3 e1       	ldi	r31, 0x13	; 19
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	84 83       	std	Z+4, r24	; 0x04
     b88:	80 e9       	ldi	r24, 0x90	; 144
     b8a:	80 93 bc 00 	sts	0x00BC, r24
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	96 83       	std	Z+6, r25	; 0x06
     b94:	85 83       	std	Z+5, r24	; 0x05
     b96:	18 c0       	rjmp	.+48     	; 0xbc8 <__vector_39+0x37e>
     b98:	80 91 66 13 	lds	r24, 0x1366
     b9c:	81 11       	cpse	r24, r1
     b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <__vector_39+0x368>
     ba0:	ef e6       	ldi	r30, 0x6F	; 111
     ba2:	f3 e1       	ldi	r31, 0x13	; 19
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	86 83       	std	Z+6, r24	; 0x06
     ba8:	8b ef       	ldi	r24, 0xFB	; 251
     baa:	87 83       	std	Z+7, r24	; 0x07
     bac:	10 92 67 13 	sts	0x1367, r1
     bb0:	0b c0       	rjmp	.+22     	; 0xbc8 <__vector_39+0x37e>
     bb2:	e8 e6       	ldi	r30, 0x68	; 104
     bb4:	f3 e1       	ldi	r31, 0x13	; 19
     bb6:	8e ef       	ldi	r24, 0xFE	; 254
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	96 83       	std	Z+6, r25	; 0x06
     bbc:	85 83       	std	Z+5, r24	; 0x05
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	84 83       	std	Z+4, r24	; 0x04
     bc2:	85 ec       	ldi	r24, 0xC5	; 197
     bc4:	80 93 bc 00 	sts	0x00BC, r24
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	0b be       	out	0x3b, r0	; 59
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <usart_putchar>:
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	8c 01       	movw	r16, r24
     bf8:	d6 2f       	mov	r29, r22
     bfa:	ca e0       	ldi	r28, 0x0A	; 10
     bfc:	0a c0       	rjmp	.+20     	; 0xc12 <usart_putchar+0x24>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 2b 21 	call	0x4256	; 0x4256 <pne_delayms>
     c06:	c1 50       	subi	r28, 0x01	; 1
     c08:	21 f4       	brne	.+8      	; 0xc12 <usart_putchar+0x24>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <fatal_error_to_rf>
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <usart_putchar+0x2c>
     c12:	f8 01       	movw	r30, r16
     c14:	90 81       	ld	r25, Z
     c16:	95 ff       	sbrs	r25, 5
     c18:	f2 cf       	rjmp	.-28     	; 0xbfe <usart_putchar+0x10>
     c1a:	f8 01       	movw	r30, r16
     c1c:	d6 83       	std	Z+6, r29	; 0x06
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <usart_set_baudrate>:
     c2a:	8f 92       	push	r8
     c2c:	9f 92       	push	r9
     c2e:	af 92       	push	r10
     c30:	bf 92       	push	r11
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
     c44:	6a 01       	movw	r12, r20
     c46:	7b 01       	movw	r14, r22
     c48:	b9 01       	movw	r22, r18
     c4a:	a8 01       	movw	r20, r16
     c4c:	68 94       	set
     c4e:	12 f8       	bld	r1, 2
     c50:	76 95       	lsr	r23
     c52:	67 95       	ror	r22
     c54:	57 95       	ror	r21
     c56:	47 95       	ror	r20
     c58:	16 94       	lsr	r1
     c5a:	d1 f7       	brne	.-12     	; 0xc50 <usart_set_baudrate+0x26>
     c5c:	d9 01       	movw	r26, r18
     c5e:	c8 01       	movw	r24, r16
     c60:	07 2e       	mov	r0, r23
     c62:	73 e1       	ldi	r23, 0x13	; 19
     c64:	b6 95       	lsr	r27
     c66:	a7 95       	ror	r26
     c68:	97 95       	ror	r25
     c6a:	87 95       	ror	r24
     c6c:	7a 95       	dec	r23
     c6e:	d1 f7       	brne	.-12     	; 0xc64 <usart_set_baudrate+0x3a>
     c70:	70 2d       	mov	r23, r0
     c72:	e8 81       	ld	r30, Y
     c74:	e1 ff       	sbrs	r30, 1
     c76:	0b c0       	rjmp	.+22     	; 0xc8e <usart_set_baudrate+0x64>
     c78:	4a 01       	movw	r8, r20
     c7a:	5b 01       	movw	r10, r22
     c7c:	b6 94       	lsr	r11
     c7e:	a7 94       	ror	r10
     c80:	97 94       	ror	r9
     c82:	87 94       	ror	r8
     c84:	b6 95       	lsr	r27
     c86:	a7 95       	ror	r26
     c88:	97 95       	ror	r25
     c8a:	87 95       	ror	r24
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <usart_set_baudrate+0x68>
     c8e:	4a 01       	movw	r8, r20
     c90:	5b 01       	movw	r10, r22
     c92:	8c 14       	cp	r8, r12
     c94:	9d 04       	cpc	r9, r13
     c96:	ae 04       	cpc	r10, r14
     c98:	bf 04       	cpc	r11, r15
     c9a:	78 f1       	brcs	.+94     	; 0xcfa <usart_set_baudrate+0xd0>
     c9c:	c8 16       	cp	r12, r24
     c9e:	d9 06       	cpc	r13, r25
     ca0:	ea 06       	cpc	r14, r26
     ca2:	fb 06       	cpc	r15, r27
     ca4:	60 f1       	brcs	.+88     	; 0xcfe <usart_set_baudrate+0xd4>
     ca6:	88 81       	ld	r24, Y
     ca8:	81 ff       	sbrs	r24, 1
     caa:	10 c0       	rjmp	.+32     	; 0xccc <usart_set_baudrate+0xa2>
     cac:	cc 0c       	add	r12, r12
     cae:	dd 1c       	adc	r13, r13
     cb0:	ee 1c       	adc	r14, r14
     cb2:	ff 1c       	adc	r15, r15
     cb4:	cb 01       	movw	r24, r22
     cb6:	ba 01       	movw	r22, r20
     cb8:	a7 01       	movw	r20, r14
     cba:	96 01       	movw	r18, r12
     cbc:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <__udivmodsi4>
     cc0:	da 01       	movw	r26, r20
     cc2:	c9 01       	movw	r24, r18
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	a1 09       	sbc	r26, r1
     cc8:	b1 09       	sbc	r27, r1
     cca:	13 c0       	rjmp	.+38     	; 0xcf2 <usart_set_baudrate+0xc8>
     ccc:	c9 01       	movw	r24, r18
     cce:	b8 01       	movw	r22, r16
     cd0:	68 94       	set
     cd2:	13 f8       	bld	r1, 3
     cd4:	96 95       	lsr	r25
     cd6:	87 95       	ror	r24
     cd8:	77 95       	ror	r23
     cda:	67 95       	ror	r22
     cdc:	16 94       	lsr	r1
     cde:	d1 f7       	brne	.-12     	; 0xcd4 <usart_set_baudrate+0xaa>
     ce0:	a7 01       	movw	r20, r14
     ce2:	96 01       	movw	r18, r12
     ce4:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <__udivmodsi4>
     ce8:	da 01       	movw	r26, r20
     cea:	c9 01       	movw	r24, r18
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	a1 09       	sbc	r26, r1
     cf0:	b1 09       	sbc	r27, r1
     cf2:	9d 83       	std	Y+5, r25	; 0x05
     cf4:	8c 83       	std	Y+4, r24	; 0x04
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <usart_set_baudrate+0xd6>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <usart_set_baudrate+0xd6>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	08 95       	ret

00000d1a <usart_init_rs232>:
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
     d24:	fb 01       	movw	r30, r22
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	8f 73       	andi	r24, 0x3F	; 63
     d2a:	8a 83       	std	Y+2, r24	; 0x02
     d2c:	26 81       	ldd	r18, Z+6	; 0x06
     d2e:	35 81       	ldd	r19, Z+5	; 0x05
     d30:	84 81       	ldd	r24, Z+4	; 0x04
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	48 2f       	mov	r20, r24
     d36:	43 70       	andi	r20, 0x03	; 3
     d38:	44 0f       	add	r20, r20
     d3a:	99 7f       	andi	r25, 0xF9	; 249
     d3c:	94 2b       	or	r25, r20
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	99 81       	ldd	r25, Y+1	; 0x01
     d42:	84 70       	andi	r24, 0x04	; 4
     d44:	88 0f       	add	r24, r24
     d46:	88 0f       	add	r24, r24
     d48:	9b 7f       	andi	r25, 0xFB	; 251
     d4a:	89 2b       	or	r24, r25
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	8f 7c       	andi	r24, 0xCF	; 207
     d52:	83 2b       	or	r24, r19
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	92 2f       	mov	r25, r18
     d5a:	99 0f       	add	r25, r25
     d5c:	99 0f       	add	r25, r25
     d5e:	99 0f       	add	r25, r25
     d60:	87 7f       	andi	r24, 0xF7	; 247
     d62:	89 2b       	or	r24, r25
     d64:	8a 83       	std	Y+2, r24	; 0x02
     d66:	40 81       	ld	r20, Z
     d68:	51 81       	ldd	r21, Z+1	; 0x01
     d6a:	62 81       	ldd	r22, Z+2	; 0x02
     d6c:	73 81       	ldd	r23, Z+3	; 0x03
     d6e:	00 e0       	ldi	r16, 0x00	; 0
     d70:	12 e1       	ldi	r17, 0x12	; 18
     d72:	2a e7       	ldi	r18, 0x7A	; 122
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	ce 01       	movw	r24, r28
     d78:	58 df       	rcall	.-336    	; 0xc2a <usart_set_baudrate>
     d7a:	99 81       	ldd	r25, Y+1	; 0x01
     d7c:	98 60       	ori	r25, 0x08	; 8
     d7e:	99 83       	std	Y+1, r25	; 0x01
     d80:	99 81       	ldd	r25, Y+1	; 0x01
     d82:	90 61       	ori	r25, 0x10	; 16
     d84:	99 83       	std	Y+1, r25	; 0x01
     d86:	99 81       	ldd	r25, Y+1	; 0x01
     d88:	90 68       	ori	r25, 0x80	; 128
     d8a:	99 83       	std	Y+1, r25	; 0x01
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <__vector_36>:
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	0b b6       	in	r0, 0x3b	; 59
     da2:	0f 92       	push	r0
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	80 91 ce 00 	lds	r24, 0x00CE
     dc0:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <pnewels_get_usart>
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0b be       	out	0x3b, r0	; 59
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <appUpdateTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
static void appUpdateTimerHandler(SYS_Timer_t *timer)
{
  //APP_CommandReport();
  if(wps_send_flag == 1)
     dea:	80 91 96 22 	lds	r24, 0x2296
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	21 f4       	brne	.+8      	; 0xdfa <appUpdateTimerHandler+0x10>
  {
	status_report_flag = 1;
     df2:	80 93 fd 22 	sts	0x22FD, r24
	data_update_flag = 1;
     df6:	80 93 97 22 	sts	0x2297, r24
     dfa:	08 95       	ret

00000dfc <WDT_Init>:

/*************************************************************************//**
*****************************************************************************/
void WDT_Init(void)
{	
	cli();
     dfc:	f8 94       	cli
	wdt_reset();
     dfe:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     e00:	99 e2       	ldi	r25, 0x29	; 41
     e02:	88 e1       	ldi	r24, 0x18	; 24
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	a8 95       	wdr
     e0a:	80 93 60 00 	sts	0x0060, r24
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_8S);
	//WDTCSR = (1<<WDCE)|(1<<WDE);
	sei();
     e14:	78 94       	sei
     e16:	08 95       	ret

00000e18 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
  SYS_Init();
     e18:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <SYS_Init>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  factory_initialization();
     e1c:	0e 94 ca 20 	call	0x4194	; 0x4194 <factory_initialization>
  APP_IbLoadSettings();
     e20:	c9 da       	rcall	.-2670   	; 0x3b4 <APP_IbLoadSettings>
  APP_NwkInit();  
     e22:	fa db       	rcall	.-2060   	; 0x618 <APP_NwkInit>

/*************************************************************************//**
*****************************************************************************/
static void appStartUpdateTimer(void)
{
  appUpdateTimer.interval = APP_UPDATE_INTERVAL;
     e24:	e7 e7       	ldi	r30, 0x77	; 119
     e26:	f3 e1       	ldi	r31, 0x13	; 19
     e28:	80 e1       	ldi	r24, 0x10	; 16
     e2a:	97 e2       	ldi	r25, 0x27	; 39
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	86 83       	std	Z+6, r24	; 0x06
     e32:	97 83       	std	Z+7, r25	; 0x07
     e34:	a0 87       	std	Z+8, r26	; 0x08
     e36:	b1 87       	std	Z+9, r27	; 0x09
  appUpdateTimer.mode = SYS_TIMER_PERIODIC_MODE;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	82 87       	std	Z+10, r24	; 0x0a
  appUpdateTimer.handler = appUpdateTimerHandler;
     e3c:	85 ef       	ldi	r24, 0xF5	; 245
     e3e:	96 e0       	ldi	r25, 0x06	; 6
     e40:	94 87       	std	Z+12, r25	; 0x0c
     e42:	83 87       	std	Z+11, r24	; 0x0b
  SYS_TimerStart(&appUpdateTimer); //disabled temporary
     e44:	cf 01       	movw	r24, r30
     e46:	0e 94 08 16 	call	0x2c10	; 0x2c10 <SYS_TimerStart>
  APP_NwkInit();  
  //APP_GpioInit();
  //APP_CommandInit();
  appStartUpdateTimer();
  
  PNEWELSGpioInit();
     e4a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <PNEWELSGpioInit>
  PNEWELSAppInit();
     e4e:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <PNEWELSAppInit>
  systemFlag_check(device_flag); //check whether this is the first time install. If yes, System directly enter WPS mode
     e52:	80 91 6a 23 	lds	r24, 0x236A
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 a8 20 	call	0x4150	; 0x4150 <systemFlag_check>
*****************************************************************************/
int main(void)
{
  SYS_Init();
  appInit();
  WDT_Init(); //Enable Watchdog timer
     e5c:	cf df       	rcall	.-98     	; 0xdfc <WDT_Init>
  
  //pne_debug_Init(); //disable this to disable the device displaying the signal strength
  ANT_DIV = 0x06; //6 for ceramic, 5 for antenna
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	80 93 4d 01 	sts	0x014D, r24

  while (1)
  {
    SYS_TaskHandler();	//system service. DO NOT MODIFY or REMOVE
     e64:	0e 94 43 15 	call	0x2a86	; 0x2a86 <SYS_TaskHandler>
    APP_TaskHandler();	//application service. strongly advised NOT TO MODIFY or REMOVE
    //APP_GpioTaskHandler();
	PNEWELSTaskHandler();	//main program reside here
     e68:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <PNEWELSTaskHandler>
	//pne_debug_display();
	wdt_reset();	//reset watchdog timer. If the timer not reset after 8 seconds the system will reset.
     e6c:	a8 95       	wdr
	
  }
     e6e:	fa cf       	rjmp	.-12     	; 0xe64 <main+0x4c>

00000e70 <__vector_1>:
	/* Clear the INTn interrupt flag */
	ext_int_clear_flag(pin);

	/* Enable the interrupt */
	ext_int_enable(pin);
}
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	0b b6       	in	r0, 0x3b	; 59
     e7c:	0f 92       	push	r0
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
     e96:	e0 91 96 13 	lds	r30, 0x1396
     e9a:	f0 91 97 13 	lds	r31, 0x1397
     e9e:	30 97       	sbiw	r30, 0x00	; 0
     ea0:	09 f0       	breq	.+2      	; 0xea4 <__vector_1+0x34>
     ea2:	19 95       	eicall
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0b be       	out	0x3b, r0	; 59
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__vector_2>:
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	0b b6       	in	r0, 0x3b	; 59
     ed6:	0f 92       	push	r0
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
     ef0:	e0 91 94 13 	lds	r30, 0x1394
     ef4:	f0 91 95 13 	lds	r31, 0x1395
     ef8:	30 97       	sbiw	r30, 0x00	; 0
     efa:	09 f0       	breq	.+2      	; 0xefe <__vector_2+0x34>
     efc:	19 95       	eicall
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_3>:
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	0b b6       	in	r0, 0x3b	; 59
     f30:	0f 92       	push	r0
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	e0 91 92 13 	lds	r30, 0x1392
     f4e:	f0 91 93 13 	lds	r31, 0x1393
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	09 f0       	breq	.+2      	; 0xf58 <__vector_3+0x34>
     f56:	19 95       	eicall
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0b be       	out	0x3b, r0	; 59
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__vector_4>:
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	0b b6       	in	r0, 0x3b	; 59
     f8a:	0f 92       	push	r0
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
     fa4:	e0 91 90 13 	lds	r30, 0x1390
     fa8:	f0 91 91 13 	lds	r31, 0x1391
     fac:	30 97       	sbiw	r30, 0x00	; 0
     fae:	09 f0       	breq	.+2      	; 0xfb2 <__vector_4+0x34>
     fb0:	19 95       	eicall
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0b be       	out	0x3b, r0	; 59
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_5>:
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	0b b6       	in	r0, 0x3b	; 59
     fe4:	0f 92       	push	r0
     fe6:	2f 93       	push	r18
     fe8:	3f 93       	push	r19
     fea:	4f 93       	push	r20
     fec:	5f 93       	push	r21
     fee:	6f 93       	push	r22
     ff0:	7f 93       	push	r23
     ff2:	8f 93       	push	r24
     ff4:	9f 93       	push	r25
     ff6:	af 93       	push	r26
     ff8:	bf 93       	push	r27
     ffa:	ef 93       	push	r30
     ffc:	ff 93       	push	r31
     ffe:	e0 91 8e 13 	lds	r30, 0x138E
    1002:	f0 91 8f 13 	lds	r31, 0x138F
    1006:	30 97       	sbiw	r30, 0x00	; 0
    1008:	09 f0       	breq	.+2      	; 0x100c <__vector_5+0x34>
    100a:	19 95       	eicall
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0b be       	out	0x3b, r0	; 59
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <__vector_6>:
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	0b b6       	in	r0, 0x3b	; 59
    103e:	0f 92       	push	r0
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	e0 91 8c 13 	lds	r30, 0x138C
    105c:	f0 91 8d 13 	lds	r31, 0x138D
    1060:	30 97       	sbiw	r30, 0x00	; 0
    1062:	09 f0       	breq	.+2      	; 0x1066 <__vector_6+0x34>
    1064:	19 95       	eicall
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0b be       	out	0x3b, r0	; 59
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <__vector_7>:
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	0b b6       	in	r0, 0x3b	; 59
    1098:	0f 92       	push	r0
    109a:	2f 93       	push	r18
    109c:	3f 93       	push	r19
    109e:	4f 93       	push	r20
    10a0:	5f 93       	push	r21
    10a2:	6f 93       	push	r22
    10a4:	7f 93       	push	r23
    10a6:	8f 93       	push	r24
    10a8:	9f 93       	push	r25
    10aa:	af 93       	push	r26
    10ac:	bf 93       	push	r27
    10ae:	ef 93       	push	r30
    10b0:	ff 93       	push	r31
    10b2:	e0 91 8a 13 	lds	r30, 0x138A
    10b6:	f0 91 8b 13 	lds	r31, 0x138B
    10ba:	30 97       	sbiw	r30, 0x00	; 0
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__vector_7+0x34>
    10be:	19 95       	eicall
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0b be       	out	0x3b, r0	; 59
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_8>:
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	0b b6       	in	r0, 0x3b	; 59
    10f2:	0f 92       	push	r0
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
    110c:	e0 91 88 13 	lds	r30, 0x1388
    1110:	f0 91 89 13 	lds	r31, 0x1389
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	09 f0       	breq	.+2      	; 0x111a <__vector_8+0x34>
    1118:	19 95       	eicall
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0b be       	out	0x3b, r0	; 59
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <__vector_9>:
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	0b b6       	in	r0, 0x3b	; 59
    114c:	0f 92       	push	r0
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
    1166:	e0 91 86 13 	lds	r30, 0x1386
    116a:	f0 91 87 13 	lds	r31, 0x1387
    116e:	30 97       	sbiw	r30, 0x00	; 0
    1170:	09 f0       	breq	.+2      	; 0x1174 <__vector_9+0x34>
    1172:	19 95       	eicall
    1174:	ff 91       	pop	r31
    1176:	ef 91       	pop	r30
    1178:	bf 91       	pop	r27
    117a:	af 91       	pop	r26
    117c:	9f 91       	pop	r25
    117e:	8f 91       	pop	r24
    1180:	7f 91       	pop	r23
    1182:	6f 91       	pop	r22
    1184:	5f 91       	pop	r21
    1186:	4f 91       	pop	r20
    1188:	3f 91       	pop	r19
    118a:	2f 91       	pop	r18
    118c:	0f 90       	pop	r0
    118e:	0b be       	out	0x3b, r0	; 59
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <__vector_10>:
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	0b b6       	in	r0, 0x3b	; 59
    11a6:	0f 92       	push	r0
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	5f 93       	push	r21
    11b0:	6f 93       	push	r22
    11b2:	7f 93       	push	r23
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
    11c0:	e0 91 84 13 	lds	r30, 0x1384
    11c4:	f0 91 85 13 	lds	r31, 0x1385
    11c8:	30 97       	sbiw	r30, 0x00	; 0
    11ca:	09 f0       	breq	.+2      	; 0x11ce <__vector_10+0x34>
    11cc:	19 95       	eicall
    11ce:	ff 91       	pop	r31
    11d0:	ef 91       	pop	r30
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	0f 90       	pop	r0
    11e8:	0b be       	out	0x3b, r0	; 59
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <ext_int_pcint_clear_flag>:
    11f4:	80 31       	cpi	r24, 0x10	; 16
    11f6:	11 f4       	brne	.+4      	; 0x11fc <ext_int_pcint_clear_flag+0x8>
    11f8:	d9 9a       	sbi	0x1b, 1	; 27
    11fa:	08 95       	ret
    11fc:	d8 9a       	sbi	0x1b, 0	; 27
    11fe:	08 95       	ret

00001200 <ext_int_pcint_enable>:
    1200:	80 31       	cpi	r24, 0x10	; 16
    1202:	59 f4       	brne	.+22     	; 0x121a <ext_int_pcint_enable+0x1a>
    1204:	e8 e6       	ldi	r30, 0x68	; 104
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	80 83       	st	Z, r24
    120e:	ec e6       	ldi	r30, 0x6C	; 108
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	80 83       	st	Z, r24
    1218:	08 95       	ret
    121a:	e8 e6       	ldi	r30, 0x68	; 104
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	81 60       	ori	r24, 0x01	; 1
    1222:	80 83       	st	Z, r24
    1224:	eb e6       	ldi	r30, 0x6B	; 107
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	20 81       	ld	r18, Z
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <ext_int_pcint_enable+0x34>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	7a 95       	dec	r23
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <ext_int_pcint_enable+0x30>
    1238:	82 2b       	or	r24, r18
    123a:	80 83       	st	Z, r24
    123c:	08 95       	ret

0000123e <ext_int_pcint_disable>:
    123e:	80 31       	cpi	r24, 0x10	; 16
    1240:	31 f4       	brne	.+12     	; 0x124e <ext_int_pcint_disable+0x10>
    1242:	ec e6       	ldi	r30, 0x6C	; 108
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8e 7f       	andi	r24, 0xFE	; 254
    124a:	80 83       	st	Z, r24
    124c:	08 95       	ret
    124e:	eb e6       	ldi	r30, 0x6B	; 107
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	20 81       	ld	r18, Z
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <ext_int_pcint_disable+0x20>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	7a 95       	dec	r23
    1260:	e2 f7       	brpl	.-8      	; 0x125a <ext_int_pcint_disable+0x1c>
    1262:	80 95       	com	r24
    1264:	82 23       	and	r24, r18
    1266:	80 83       	st	Z, r24
    1268:	08 95       	ret

0000126a <ext_int_pcint_init>:

void ext_int_pcint_init(gpio_t gpio_id)
{
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	6b 01       	movw	r12, r22
    1272:	e8 2e       	mov	r14, r24
	/* Disable the interrupt */
	ext_int_pcint_disable(gpio_id);
    1274:	e4 df       	rcall	.-56     	; 0x123e <ext_int_pcint_disable>

	/* Enable IRQ pin as input */
	/* Enable the pullup for the IRQ pin */
	gpio_in(gpio_id);
    1276:	8e 2d       	mov	r24, r14
    1278:	b6 01       	movw	r22, r12
    127a:	26 d1       	rcall	.+588    	; 0x14c8 <gpio_in>
	gpio_pullup(gpio_id);
    127c:	8e 2d       	mov	r24, r14
    127e:	b6 01       	movw	r22, r12
    1280:	c5 d1       	rcall	.+906    	; 0x160c <gpio_pullup>

	/* Clear the PCINTn interrupt flag */
	ext_int_pcint_clear_flag(gpio_id);
    1282:	8e 2d       	mov	r24, r14
    1284:	b6 01       	movw	r22, r12
    1286:	b6 df       	rcall	.-148    	; 0x11f4 <ext_int_pcint_clear_flag>

	/* Enable the interrupt */
	ext_int_pcint_enable(gpio_id);
    1288:	8e 2d       	mov	r24, r14
    128a:	b6 01       	movw	r22, r12
    128c:	b9 df       	rcall	.-142    	; 0x1200 <ext_int_pcint_enable>
}
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	08 95       	ret

00001296 <ext_int_set_interrupt_callback>:

void ext_int_set_interrupt_callback(gpio_t gpio_id, ext_int_callback_t callback)
{
	interrupt_t ext_int = gpio_id.int_id;
    1296:	98 2f       	mov	r25, r24
	
	if (ext_int == EXT_INT0_PIN) {
    1298:	81 11       	cpse	r24, r1
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <ext_int_set_interrupt_callback+0x10>
		ext_int_int0_callback = callback;
    129c:	50 93 97 13 	sts	0x1397, r21
    12a0:	40 93 96 13 	sts	0x1396, r20
    12a4:	08 95       	ret
	} else
	if (ext_int == EXT_INT1_PIN) {
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	29 f4       	brne	.+10     	; 0x12b4 <ext_int_set_interrupt_callback+0x1e>
		ext_int_int1_callback = callback;
    12aa:	50 93 95 13 	sts	0x1395, r21
    12ae:	40 93 94 13 	sts	0x1394, r20
    12b2:	08 95       	ret
	} else
	if (ext_int == EXT_INT2_PIN) {
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	29 f4       	brne	.+10     	; 0x12c2 <ext_int_set_interrupt_callback+0x2c>
		ext_int_int2_callback = callback;
    12b8:	50 93 93 13 	sts	0x1393, r21
    12bc:	40 93 92 13 	sts	0x1392, r20
    12c0:	08 95       	ret
	} else
	if (ext_int == EXT_INT3_PIN) {
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	29 f4       	brne	.+10     	; 0x12d0 <ext_int_set_interrupt_callback+0x3a>
		ext_int_int3_callback = callback;
    12c6:	50 93 91 13 	sts	0x1391, r21
    12ca:	40 93 90 13 	sts	0x1390, r20
    12ce:	08 95       	ret
	} else
	if (ext_int == EXT_INT4_PIN) {
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	29 f4       	brne	.+10     	; 0x12de <ext_int_set_interrupt_callback+0x48>
		ext_int_int4_callback = callback;
    12d4:	50 93 8f 13 	sts	0x138F, r21
    12d8:	40 93 8e 13 	sts	0x138E, r20
    12dc:	08 95       	ret
	} else
	if (ext_int == EXT_INT5_PIN) {
    12de:	85 30       	cpi	r24, 0x05	; 5
    12e0:	29 f4       	brne	.+10     	; 0x12ec <ext_int_set_interrupt_callback+0x56>
		ext_int_int5_callback = callback;
    12e2:	50 93 8d 13 	sts	0x138D, r21
    12e6:	40 93 8c 13 	sts	0x138C, r20
    12ea:	08 95       	ret
	} else
	if (ext_int == EXT_INT6_PIN) {
    12ec:	86 30       	cpi	r24, 0x06	; 6
    12ee:	29 f4       	brne	.+10     	; 0x12fa <ext_int_set_interrupt_callback+0x64>
		ext_int_int6_callback = callback;
    12f0:	50 93 8b 13 	sts	0x138B, r21
    12f4:	40 93 8a 13 	sts	0x138A, r20
    12f8:	08 95       	ret
	} else
	if (ext_int == EXT_INT7_PIN) {
    12fa:	87 30       	cpi	r24, 0x07	; 7
    12fc:	29 f4       	brne	.+10     	; 0x1308 <ext_int_set_interrupt_callback+0x72>
		ext_int_int7_callback = callback;
    12fe:	50 93 89 13 	sts	0x1389, r21
    1302:	40 93 88 13 	sts	0x1388, r20
    1306:	08 95       	ret
	} else
	if (ext_int >= PC_INT0_PIN && ext_int <=PC_INT7_PIN) {
    1308:	88 50       	subi	r24, 0x08	; 8
    130a:	88 30       	cpi	r24, 0x08	; 8
    130c:	28 f4       	brcc	.+10     	; 0x1318 <ext_int_set_interrupt_callback+0x82>
		ext_int_pcint0_callback = callback;
    130e:	50 93 87 13 	sts	0x1387, r21
    1312:	40 93 86 13 	sts	0x1386, r20
    1316:	08 95       	ret
	} else
	if (ext_int == PC_INT8_PIN) {
    1318:	90 31       	cpi	r25, 0x10	; 16
    131a:	21 f4       	brne	.+8      	; 0x1324 <ext_int_set_interrupt_callback+0x8e>
		ext_int_pcint1_callback = callback;
    131c:	50 93 85 13 	sts	0x1385, r21
    1320:	40 93 84 13 	sts	0x1384, r20
    1324:	08 95       	ret

00001326 <gpio_set>:
void gpio_set(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1326:	62 30       	cpi	r22, 0x02	; 2
    1328:	09 f1       	breq	.+66     	; 0x136c <gpio_set+0x46>
    132a:	28 f4       	brcc	.+10     	; 0x1336 <gpio_set+0x10>
    132c:	66 23       	and	r22, r22
    132e:	41 f0       	breq	.+16     	; 0x1340 <gpio_set+0x1a>
    1330:	61 30       	cpi	r22, 0x01	; 1
    1332:	89 f0       	breq	.+34     	; 0x1356 <gpio_set+0x30>
    1334:	08 95       	ret
    1336:	63 30       	cpi	r22, 0x03	; 3
    1338:	21 f1       	breq	.+72     	; 0x1382 <gpio_set+0x5c>
    133a:	64 30       	cpi	r22, 0x04	; 4
    133c:	69 f1       	breq	.+90     	; 0x1398 <gpio_set+0x72>
    133e:	08 95       	ret
	{
		case port_b:
		PORTB |= (1<<pin_id);
    1340:	25 b1       	in	r18, 0x05	; 5
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <gpio_set+0x26>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	7a 95       	dec	r23
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <gpio_set+0x22>
    1350:	82 2b       	or	r24, r18
    1352:	85 b9       	out	0x05, r24	; 5
		break;
    1354:	08 95       	ret
		
		case port_d:
		PORTD |= (1<<pin_id);
    1356:	2b b1       	in	r18, 0x0b	; 11
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <gpio_set+0x3c>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	7a 95       	dec	r23
    1364:	e2 f7       	brpl	.-8      	; 0x135e <gpio_set+0x38>
    1366:	82 2b       	or	r24, r18
    1368:	8b b9       	out	0x0b, r24	; 11
		break;
    136a:	08 95       	ret
		
		case port_e:
		PORTE |= (1<<pin_id);
    136c:	2e b1       	in	r18, 0x0e	; 14
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <gpio_set+0x52>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	7a 95       	dec	r23
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <gpio_set+0x4e>
    137c:	82 2b       	or	r24, r18
    137e:	8e b9       	out	0x0e, r24	; 14
		break;
    1380:	08 95       	ret
		
		case port_f:
		PORTF |= (1<<pin_id);
    1382:	21 b3       	in	r18, 0x11	; 17
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 c0       	rjmp	.+4      	; 0x138e <gpio_set+0x68>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	7a 95       	dec	r23
    1390:	e2 f7       	brpl	.-8      	; 0x138a <gpio_set+0x64>
    1392:	82 2b       	or	r24, r18
    1394:	81 bb       	out	0x11, r24	; 17
		break;
    1396:	08 95       	ret
		
		case port_g:
		PORTG |= (1<<pin_id);
    1398:	24 b3       	in	r18, 0x14	; 20
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <gpio_set+0x7e>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	7a 95       	dec	r23
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <gpio_set+0x7a>
    13a8:	82 2b       	or	r24, r18
    13aa:	84 bb       	out	0x14, r24	; 20
    13ac:	08 95       	ret

000013ae <gpio_clr>:
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	uint8_t temp = 0;
	uint8_t temp1 = 0;
	
	switch (port_id)
    13ae:	62 30       	cpi	r22, 0x02	; 2
    13b0:	19 f1       	breq	.+70     	; 0x13f8 <gpio_clr+0x4a>
    13b2:	28 f4       	brcc	.+10     	; 0x13be <gpio_clr+0x10>
    13b4:	66 23       	and	r22, r22
    13b6:	41 f0       	breq	.+16     	; 0x13c8 <gpio_clr+0x1a>
    13b8:	61 30       	cpi	r22, 0x01	; 1
    13ba:	91 f0       	breq	.+36     	; 0x13e0 <gpio_clr+0x32>
    13bc:	08 95       	ret
    13be:	63 30       	cpi	r22, 0x03	; 3
    13c0:	39 f1       	breq	.+78     	; 0x1410 <gpio_clr+0x62>
    13c2:	64 30       	cpi	r22, 0x04	; 4
    13c4:	89 f1       	breq	.+98     	; 0x1428 <gpio_clr+0x7a>
    13c6:	08 95       	ret
	{
		case port_b:
		PORTB &= ~(1<<pin_id);
    13c8:	25 b1       	in	r18, 0x05	; 5
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <gpio_clr+0x26>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	7a 95       	dec	r23
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <gpio_clr+0x22>
    13d8:	80 95       	com	r24
    13da:	82 23       	and	r24, r18
    13dc:	85 b9       	out	0x05, r24	; 5
		break;
    13de:	08 95       	ret
		
		case port_d:
		PORTD &= ~(1<<pin_id);
    13e0:	2b b1       	in	r18, 0x0b	; 11
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <gpio_clr+0x3e>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	7a 95       	dec	r23
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <gpio_clr+0x3a>
    13f0:	80 95       	com	r24
    13f2:	82 23       	and	r24, r18
    13f4:	8b b9       	out	0x0b, r24	; 11
		break;
    13f6:	08 95       	ret
		
		case port_e:
		temp = (1<<pin_id);
		temp1 = ~(temp);
		PORTE &= temp1;
    13f8:	2e b1       	in	r18, 0x0e	; 14
		case port_d:
		PORTD &= ~(1<<pin_id);
		break;
		
		case port_e:
		temp = (1<<pin_id);
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <gpio_clr+0x56>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	7a 95       	dec	r23
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <gpio_clr+0x52>
		temp1 = ~(temp);
    1408:	80 95       	com	r24
		PORTE &= temp1;
    140a:	82 23       	and	r24, r18
    140c:	8e b9       	out	0x0e, r24	; 14
		break;
    140e:	08 95       	ret
		
		case port_f:
		PORTF &= ~(1<<pin_id);
    1410:	21 b3       	in	r18, 0x11	; 17
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <gpio_clr+0x6e>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	7a 95       	dec	r23
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <gpio_clr+0x6a>
    1420:	80 95       	com	r24
    1422:	82 23       	and	r24, r18
    1424:	81 bb       	out	0x11, r24	; 17
		break;
    1426:	08 95       	ret
		
		case port_g:
		PORTG &= ~(1<<pin_id);
    1428:	24 b3       	in	r18, 0x14	; 20
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <gpio_clr+0x86>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	7a 95       	dec	r23
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <gpio_clr+0x82>
    1438:	80 95       	com	r24
    143a:	82 23       	and	r24, r18
    143c:	84 bb       	out	0x14, r24	; 20
    143e:	08 95       	ret

00001440 <gpio_toggle>:
void gpio_toggle(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1440:	62 30       	cpi	r22, 0x02	; 2
    1442:	09 f1       	breq	.+66     	; 0x1486 <gpio_toggle+0x46>
    1444:	28 f4       	brcc	.+10     	; 0x1450 <gpio_toggle+0x10>
    1446:	66 23       	and	r22, r22
    1448:	41 f0       	breq	.+16     	; 0x145a <gpio_toggle+0x1a>
    144a:	61 30       	cpi	r22, 0x01	; 1
    144c:	89 f0       	breq	.+34     	; 0x1470 <gpio_toggle+0x30>
    144e:	08 95       	ret
    1450:	63 30       	cpi	r22, 0x03	; 3
    1452:	21 f1       	breq	.+72     	; 0x149c <gpio_toggle+0x5c>
    1454:	64 30       	cpi	r22, 0x04	; 4
    1456:	69 f1       	breq	.+90     	; 0x14b2 <gpio_toggle+0x72>
    1458:	08 95       	ret
	{
		case port_b:
		PORTB ^= (1 << pin_id);
    145a:	25 b1       	in	r18, 0x05	; 5
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <gpio_toggle+0x26>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	7a 95       	dec	r23
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <gpio_toggle+0x22>
    146a:	82 27       	eor	r24, r18
    146c:	85 b9       	out	0x05, r24	; 5
		break;
    146e:	08 95       	ret
		
		case port_d:
		PORTD ^= (1 << pin_id);
    1470:	2b b1       	in	r18, 0x0b	; 11
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <gpio_toggle+0x3c>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	7a 95       	dec	r23
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <gpio_toggle+0x38>
    1480:	82 27       	eor	r24, r18
    1482:	8b b9       	out	0x0b, r24	; 11
		break;
    1484:	08 95       	ret
		
		case port_e:
		PORTE ^= (1 << pin_id);
    1486:	2e b1       	in	r18, 0x0e	; 14
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <gpio_toggle+0x52>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	7a 95       	dec	r23
    1494:	e2 f7       	brpl	.-8      	; 0x148e <gpio_toggle+0x4e>
    1496:	82 27       	eor	r24, r18
    1498:	8e b9       	out	0x0e, r24	; 14
		break;
    149a:	08 95       	ret
		
		case port_f:
		PORTF ^= (1 << pin_id);
    149c:	21 b3       	in	r18, 0x11	; 17
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <gpio_toggle+0x68>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	7a 95       	dec	r23
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <gpio_toggle+0x64>
    14ac:	82 27       	eor	r24, r18
    14ae:	81 bb       	out	0x11, r24	; 17
		break;
    14b0:	08 95       	ret
		
		case port_g:
		PORTG ^= (1 << pin_id);
    14b2:	24 b3       	in	r18, 0x14	; 20
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <gpio_toggle+0x7e>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	7a 95       	dec	r23
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <gpio_toggle+0x7a>
    14c2:	82 27       	eor	r24, r18
    14c4:	84 bb       	out	0x14, r24	; 20
    14c6:	08 95       	ret

000014c8 <gpio_in>:
void gpio_in(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    14c8:	62 30       	cpi	r22, 0x02	; 2
    14ca:	61 f1       	breq	.+88     	; 0x1524 <gpio_in+0x5c>
    14cc:	28 f4       	brcc	.+10     	; 0x14d8 <gpio_in+0x10>
    14ce:	66 23       	and	r22, r22
    14d0:	49 f0       	breq	.+18     	; 0x14e4 <gpio_in+0x1c>
    14d2:	61 30       	cpi	r22, 0x01	; 1
    14d4:	b9 f0       	breq	.+46     	; 0x1504 <gpio_in+0x3c>
    14d6:	08 95       	ret
    14d8:	63 30       	cpi	r22, 0x03	; 3
    14da:	a1 f1       	breq	.+104    	; 0x1544 <gpio_in+0x7c>
    14dc:	64 30       	cpi	r22, 0x04	; 4
    14de:	09 f4       	brne	.+2      	; 0x14e2 <gpio_in+0x1a>
    14e0:	41 c0       	rjmp	.+130    	; 0x1564 <gpio_in+0x9c>
    14e2:	08 95       	ret
	{
		case port_b:
		DDRB &= ~(1 << pin_id);
    14e4:	24 b1       	in	r18, 0x04	; 4
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <gpio_in+0x28>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	7a 95       	dec	r23
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <gpio_in+0x24>
    14f4:	80 95       	com	r24
    14f6:	98 2f       	mov	r25, r24
    14f8:	92 23       	and	r25, r18
    14fa:	94 b9       	out	0x04, r25	; 4
		PORTB &= ~(1 << pin_id);
    14fc:	95 b1       	in	r25, 0x05	; 5
    14fe:	89 23       	and	r24, r25
    1500:	85 b9       	out	0x05, r24	; 5
		break;
    1502:	08 95       	ret
		
		case port_d:
		DDRD &= ~(1 << pin_id);
    1504:	2a b1       	in	r18, 0x0a	; 10
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <gpio_in+0x48>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	7a 95       	dec	r23
    1512:	e2 f7       	brpl	.-8      	; 0x150c <gpio_in+0x44>
    1514:	80 95       	com	r24
    1516:	98 2f       	mov	r25, r24
    1518:	92 23       	and	r25, r18
    151a:	9a b9       	out	0x0a, r25	; 10
		PORTD &= ~(1 << pin_id);
    151c:	9b b1       	in	r25, 0x0b	; 11
    151e:	89 23       	and	r24, r25
    1520:	8b b9       	out	0x0b, r24	; 11
		break;
    1522:	08 95       	ret
		
		case port_e:
		DDRE &= ~(1 << pin_id);
    1524:	2d b1       	in	r18, 0x0d	; 13
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <gpio_in+0x68>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	7a 95       	dec	r23
    1532:	e2 f7       	brpl	.-8      	; 0x152c <gpio_in+0x64>
    1534:	80 95       	com	r24
    1536:	98 2f       	mov	r25, r24
    1538:	92 23       	and	r25, r18
    153a:	9d b9       	out	0x0d, r25	; 13
		PORTE &= ~(1 << pin_id);
    153c:	9e b1       	in	r25, 0x0e	; 14
    153e:	89 23       	and	r24, r25
    1540:	8e b9       	out	0x0e, r24	; 14
		break;
    1542:	08 95       	ret
		
		case port_f:
		DDRF &= ~(1 << pin_id);
    1544:	20 b3       	in	r18, 0x10	; 16
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <gpio_in+0x88>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	7a 95       	dec	r23
    1552:	e2 f7       	brpl	.-8      	; 0x154c <gpio_in+0x84>
    1554:	80 95       	com	r24
    1556:	98 2f       	mov	r25, r24
    1558:	92 23       	and	r25, r18
    155a:	90 bb       	out	0x10, r25	; 16
		PORTF &= ~(1 << pin_id);
    155c:	91 b3       	in	r25, 0x11	; 17
    155e:	89 23       	and	r24, r25
    1560:	81 bb       	out	0x11, r24	; 17
		break;
    1562:	08 95       	ret
		
		case port_g:
		DDRG &= ~(1 << pin_id);
    1564:	23 b3       	in	r18, 0x13	; 19
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <gpio_in+0xa8>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	7a 95       	dec	r23
    1572:	e2 f7       	brpl	.-8      	; 0x156c <gpio_in+0xa4>
    1574:	80 95       	com	r24
    1576:	98 2f       	mov	r25, r24
    1578:	92 23       	and	r25, r18
    157a:	93 bb       	out	0x13, r25	; 19
		PORTG &= ~(1 << pin_id);
    157c:	94 b3       	in	r25, 0x14	; 20
    157e:	89 23       	and	r24, r25
    1580:	84 bb       	out	0x14, r24	; 20
    1582:	08 95       	ret

00001584 <gpio_out>:
void gpio_out(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1584:	62 30       	cpi	r22, 0x02	; 2
    1586:	09 f1       	breq	.+66     	; 0x15ca <gpio_out+0x46>
    1588:	28 f4       	brcc	.+10     	; 0x1594 <gpio_out+0x10>
    158a:	66 23       	and	r22, r22
    158c:	41 f0       	breq	.+16     	; 0x159e <gpio_out+0x1a>
    158e:	61 30       	cpi	r22, 0x01	; 1
    1590:	89 f0       	breq	.+34     	; 0x15b4 <gpio_out+0x30>
    1592:	08 95       	ret
    1594:	63 30       	cpi	r22, 0x03	; 3
    1596:	21 f1       	breq	.+72     	; 0x15e0 <gpio_out+0x5c>
    1598:	64 30       	cpi	r22, 0x04	; 4
    159a:	69 f1       	breq	.+90     	; 0x15f6 <gpio_out+0x72>
    159c:	08 95       	ret
	{
		case port_b:
		DDRB |= (1<<pin_id);
    159e:	24 b1       	in	r18, 0x04	; 4
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <gpio_out+0x26>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	7a 95       	dec	r23
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <gpio_out+0x22>
    15ae:	82 2b       	or	r24, r18
    15b0:	84 b9       	out	0x04, r24	; 4
		break;
    15b2:	08 95       	ret
		
		case port_d:
		DDRD |= (1<<pin_id);
    15b4:	2a b1       	in	r18, 0x0a	; 10
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <gpio_out+0x3c>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	7a 95       	dec	r23
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <gpio_out+0x38>
    15c4:	82 2b       	or	r24, r18
    15c6:	8a b9       	out	0x0a, r24	; 10
		break;
    15c8:	08 95       	ret
		
		case port_e:
		DDRE |= (1<<pin_id);
    15ca:	2d b1       	in	r18, 0x0d	; 13
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <gpio_out+0x52>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	7a 95       	dec	r23
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <gpio_out+0x4e>
    15da:	82 2b       	or	r24, r18
    15dc:	8d b9       	out	0x0d, r24	; 13
		break;
    15de:	08 95       	ret
		
		case port_f:
		DDRF |= (1<<pin_id);
    15e0:	20 b3       	in	r18, 0x10	; 16
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <gpio_out+0x68>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	7a 95       	dec	r23
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <gpio_out+0x64>
    15f0:	82 2b       	or	r24, r18
    15f2:	80 bb       	out	0x10, r24	; 16
		break;
    15f4:	08 95       	ret
		
		case port_g:
		DDRG |= (1<<pin_id);
    15f6:	23 b3       	in	r18, 0x13	; 19
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <gpio_out+0x7e>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	7a 95       	dec	r23
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <gpio_out+0x7a>
    1606:	82 2b       	or	r24, r18
    1608:	83 bb       	out	0x13, r24	; 19
    160a:	08 95       	ret

0000160c <gpio_pullup>:
void gpio_pullup(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    160c:	62 30       	cpi	r22, 0x02	; 2
    160e:	09 f1       	breq	.+66     	; 0x1652 <gpio_pullup+0x46>
    1610:	28 f4       	brcc	.+10     	; 0x161c <gpio_pullup+0x10>
    1612:	66 23       	and	r22, r22
    1614:	41 f0       	breq	.+16     	; 0x1626 <gpio_pullup+0x1a>
    1616:	61 30       	cpi	r22, 0x01	; 1
    1618:	89 f0       	breq	.+34     	; 0x163c <gpio_pullup+0x30>
    161a:	08 95       	ret
    161c:	63 30       	cpi	r22, 0x03	; 3
    161e:	21 f1       	breq	.+72     	; 0x1668 <gpio_pullup+0x5c>
    1620:	64 30       	cpi	r22, 0x04	; 4
    1622:	69 f1       	breq	.+90     	; 0x167e <gpio_pullup+0x72>
    1624:	08 95       	ret
	{
		case port_b:
		PORTB |= (1 << pin_id);
    1626:	25 b1       	in	r18, 0x05	; 5
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <gpio_pullup+0x26>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	7a 95       	dec	r23
    1634:	e2 f7       	brpl	.-8      	; 0x162e <gpio_pullup+0x22>
    1636:	82 2b       	or	r24, r18
    1638:	85 b9       	out	0x05, r24	; 5
		break;
    163a:	08 95       	ret
		
		case port_d:
		PORTD |= (1 << pin_id);
    163c:	2b b1       	in	r18, 0x0b	; 11
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <gpio_pullup+0x3c>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	7a 95       	dec	r23
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <gpio_pullup+0x38>
    164c:	82 2b       	or	r24, r18
    164e:	8b b9       	out	0x0b, r24	; 11
		break;
    1650:	08 95       	ret
		
		case port_e:
		PORTE |= (1 << pin_id);
    1652:	2e b1       	in	r18, 0x0e	; 14
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 c0       	rjmp	.+4      	; 0x165e <gpio_pullup+0x52>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	7a 95       	dec	r23
    1660:	e2 f7       	brpl	.-8      	; 0x165a <gpio_pullup+0x4e>
    1662:	82 2b       	or	r24, r18
    1664:	8e b9       	out	0x0e, r24	; 14
		break;
    1666:	08 95       	ret
		
		case port_f:
		PORTF |= (1 << pin_id);
    1668:	21 b3       	in	r18, 0x11	; 17
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <gpio_pullup+0x68>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	7a 95       	dec	r23
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <gpio_pullup+0x64>
    1678:	82 2b       	or	r24, r18
    167a:	81 bb       	out	0x11, r24	; 17
		break;
    167c:	08 95       	ret
		
		case port_g:
		PORTG |= (1 << pin_id);
    167e:	24 b3       	in	r18, 0x14	; 20
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 c0       	rjmp	.+4      	; 0x168a <gpio_pullup+0x7e>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	7a 95       	dec	r23
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <gpio_pullup+0x7a>
    168e:	82 2b       	or	r24, r18
    1690:	84 bb       	out	0x14, r24	; 20
    1692:	08 95       	ret

00001694 <gpio_read>:
uint8_t gpio_read(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1694:	62 30       	cpi	r22, 0x02	; 2
    1696:	e9 f0       	breq	.+58     	; 0x16d2 <gpio_read+0x3e>
    1698:	28 f4       	brcc	.+10     	; 0x16a4 <gpio_read+0x10>
    169a:	66 23       	and	r22, r22
    169c:	41 f0       	breq	.+16     	; 0x16ae <gpio_read+0x1a>
    169e:	61 30       	cpi	r22, 0x01	; 1
    16a0:	79 f0       	breq	.+30     	; 0x16c0 <gpio_read+0x2c>
    16a2:	32 c0       	rjmp	.+100    	; 0x1708 <gpio_read+0x74>
    16a4:	63 30       	cpi	r22, 0x03	; 3
    16a6:	f1 f0       	breq	.+60     	; 0x16e4 <gpio_read+0x50>
    16a8:	64 30       	cpi	r22, 0x04	; 4
    16aa:	29 f1       	breq	.+74     	; 0x16f6 <gpio_read+0x62>
    16ac:	2d c0       	rjmp	.+90     	; 0x1708 <gpio_read+0x74>
	{
		case port_b:
		return (PINB & (1 << pin_id)) != 0;
    16ae:	83 b1       	in	r24, 0x03	; 3
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <gpio_read+0x24>
    16b4:	95 95       	asr	r25
    16b6:	87 95       	ror	r24
    16b8:	7a 95       	dec	r23
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <gpio_read+0x20>
    16bc:	81 70       	andi	r24, 0x01	; 1
    16be:	08 95       	ret
		break;
		
		case port_d:
		return (PIND & (1 << pin_id)) != 0;
    16c0:	89 b1       	in	r24, 0x09	; 9
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <gpio_read+0x36>
    16c6:	95 95       	asr	r25
    16c8:	87 95       	ror	r24
    16ca:	7a 95       	dec	r23
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <gpio_read+0x32>
    16ce:	81 70       	andi	r24, 0x01	; 1
    16d0:	08 95       	ret
		break;
		
		case port_e:
		return (PINE & (1 << pin_id)) != 0;
    16d2:	8c b1       	in	r24, 0x0c	; 12
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <gpio_read+0x48>
    16d8:	95 95       	asr	r25
    16da:	87 95       	ror	r24
    16dc:	7a 95       	dec	r23
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <gpio_read+0x44>
    16e0:	81 70       	andi	r24, 0x01	; 1
    16e2:	08 95       	ret
		break;
		
		case port_f:
		return (PINF & (1 << pin_id)) != 0;
    16e4:	8f b1       	in	r24, 0x0f	; 15
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <gpio_read+0x5a>
    16ea:	95 95       	asr	r25
    16ec:	87 95       	ror	r24
    16ee:	7a 95       	dec	r23
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <gpio_read+0x56>
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	08 95       	ret
		break;
		
		case port_g:
		return (PING & (1 << pin_id)) != 0;
    16f6:	82 b3       	in	r24, 0x12	; 18
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <gpio_read+0x6c>
    16fc:	95 95       	asr	r25
    16fe:	87 95       	ror	r24
    1700:	7a 95       	dec	r23
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <gpio_read+0x68>
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	08 95       	ret
		
		default:
		break;
	}
	
	return 0;
    1708:	80 e0       	ldi	r24, 0x00	; 0
}
    170a:	08 95       	ret

0000170c <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    170c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	a8 95       	wdr
    1714:	80 91 60 00 	lds	r24, 0x0060
    1718:	88 61       	ori	r24, 0x18	; 24
    171a:	80 93 60 00 	sts	0x0060, r24
    171e:	10 92 60 00 	sts	0x0060, r1
    1722:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    1724:	e1 e6       	ldi	r30, 0x61	; 97
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 e8       	ldi	r24, 0x80	; 128
    172a:	80 83       	st	Z, r24
  CLKPR = 0;
    172c:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    172e:	78 94       	sei

  HAL_TimerInit();
    1730:	04 c0       	rjmp	.+8      	; 0x173a <HAL_TimerInit>
    1732:	08 95       	ret

00001734 <HAL_Delay>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Delay(uint8_t us)
{
  HAL_TimerDelay(us);
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	16 c0       	rjmp	.+44     	; 0x1764 <HAL_TimerDelay>
    1738:	08 95       	ret

0000173a <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    173a:	10 92 78 23 	sts	0x2378, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    173e:	80 e1       	ldi	r24, 0x10	; 16
    1740:	97 e2       	ldi	r25, 0x27	; 39
    1742:	90 93 a9 00 	sts	0x00A9, r25
    1746:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    174a:	e1 ea       	ldi	r30, 0xA1	; 161
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	88 e0       	ldi	r24, 0x08	; 8
    1750:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    1752:	80 81       	ld	r24, Z
    1754:	82 60       	ori	r24, 0x02	; 2
    1756:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1758:	e2 e7       	ldi	r30, 0x72	; 114
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	82 60       	ori	r24, 0x02	; 2
    1760:	80 83       	st	Z, r24
    1762:	08 95       	ret

00001764 <HAL_TimerDelay>:
*****************************************************************************/
void HAL_TimerDelay(uint16_t us)
{
  PRAGMA(diag_suppress=Pa082);

  OCR4B = TCNT4 + us;
    1764:	20 91 a4 00 	lds	r18, 0x00A4
    1768:	30 91 a5 00 	lds	r19, 0x00A5
    176c:	82 0f       	add	r24, r18
    176e:	93 1f       	adc	r25, r19
    1770:	ea ea       	ldi	r30, 0xAA	; 170
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
  if (OCR4B > OCR4A)
    1778:	20 81       	ld	r18, Z
    177a:	31 81       	ldd	r19, Z+1	; 0x01
    177c:	80 91 a8 00 	lds	r24, 0x00A8
    1780:	90 91 a9 00 	lds	r25, 0x00A9
    1784:	82 17       	cp	r24, r18
    1786:	93 07       	cpc	r25, r19
    1788:	50 f4       	brcc	.+20     	; 0x179e <HAL_TimerDelay+0x3a>
    OCR4B -= OCR4A;
    178a:	20 91 a8 00 	lds	r18, 0x00A8
    178e:	30 91 a9 00 	lds	r19, 0x00A9
    1792:	80 81       	ld	r24, Z
    1794:	91 81       	ldd	r25, Z+1	; 0x01
    1796:	82 1b       	sub	r24, r18
    1798:	93 0b       	sbc	r25, r19
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24

  TIFR4 = (1 << OCF4B);
    179e:	84 e0       	ldi	r24, 0x04	; 4
    17a0:	89 bb       	out	0x19, r24	; 25
  while (0 == (TIFR4 & (1 << OCF4B)));
    17a2:	ca 9b       	sbis	0x19, 2	; 25
    17a4:	fe cf       	rjmp	.-4      	; 0x17a2 <HAL_TimerDelay+0x3e>

  PRAGMA(diag_default=Pa082);
}
    17a6:	08 95       	ret

000017a8 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	8f 93       	push	r24
  halTimerIrqCount++;
    17b4:	80 91 78 23 	lds	r24, 0x2378
    17b8:	8f 5f       	subi	r24, 0xFF	; 255
    17ba:	80 93 78 23 	sts	0x2378, r24
}
    17be:	8f 91       	pop	r24
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    17ca:	e9 e7       	ldi	r30, 0x79	; 121
    17cc:	f3 e2       	ldi	r31, 0x23	; 35
    17ce:	14 82       	std	Z+4, r1	; 0x04
    17d0:	15 82       	std	Z+5, r1	; 0x05
    17d2:	11 82       	std	Z+1, r1	; 0x01
    17d4:	10 82       	st	Z, r1
    17d6:	17 a2       	std	Z+39, r1	; 0x27
    17d8:	16 a2       	std	Z+38, r1	; 0x26
    17da:	ef e7       	ldi	r30, 0x7F	; 127
    17dc:	f3 e2       	ldi	r31, 0x23	; 35
    17de:	8f e9       	ldi	r24, 0x9F	; 159
    17e0:	93 e2       	ldi	r25, 0x23	; 35
    17e2:	11 92       	st	Z+, r1
    17e4:	11 92       	st	Z+, r1
    17e6:	e8 17       	cp	r30, r24
    17e8:	f9 07       	cpc	r31, r25
    17ea:	d9 f7       	brne	.-10     	; 0x17e2 <NWK_Init+0x18>
    17ec:	4f d6       	rcall	.+3230   	; 0x248c <nwkTxInit>
    17ee:	65 d3       	rcall	.+1738   	; 0x1eba <nwkRxInit>
    17f0:	0d d1       	rcall	.+538    	; 0x1a0c <nwkFrameInit>
    17f2:	40 d0       	rcall	.+128    	; 0x1874 <nwkDataReqInit>
    17f4:	8f c1       	rjmp	.+798    	; 0x1b14 <nwkRouteInit>
    17f6:	08 95       	ret

000017f8 <NWK_SetAddr>:
    17f8:	90 93 7a 23 	sts	0x237A, r25
    17fc:	80 93 79 23 	sts	0x2379, r24
    1800:	0c 94 35 14 	jmp	0x286a	; 0x286a <PHY_SetShortAddr>
    1804:	08 95       	ret

00001806 <NWK_SetPanId>:
    1806:	90 93 7c 23 	sts	0x237C, r25
    180a:	80 93 7b 23 	sts	0x237B, r24
    180e:	0c 94 23 14 	jmp	0x2846	; 0x2846 <PHY_SetPanId>
    1812:	08 95       	ret

00001814 <NWK_OpenEndpoint>:
    1814:	e8 2f       	mov	r30, r24
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	e1 58       	subi	r30, 0x81	; 129
    181e:	fc 4d       	sbci	r31, 0xDC	; 220
    1820:	71 83       	std	Z+1, r23	; 0x01
    1822:	60 83       	st	Z, r22
    1824:	08 95       	ret

00001826 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    1826:	91 d3       	rcall	.+1826   	; 0x1f4a <nwkRxTaskHandler>
  nwkTxTaskHandler();
    1828:	2f d7       	rcall	.+3678   	; 0x2688 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    182a:	4d c0       	rjmp	.+154    	; 0x18c6 <nwkDataReqTaskHandler>
    182c:	08 95       	ret

0000182e <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    182e:	e0 91 98 13 	lds	r30, 0x1398
    1832:	f0 91 99 13 	lds	r31, 0x1399
    1836:	30 97       	sbiw	r30, 0x00	; 0
    1838:	d9 f0       	breq	.+54     	; 0x1870 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    183a:	22 81       	ldd	r18, Z+2	; 0x02
    183c:	33 81       	ldd	r19, Z+3	; 0x03
    183e:	28 17       	cp	r18, r24
    1840:	39 07       	cpc	r19, r25
    1842:	89 f4       	brne	.+34     	; 0x1866 <nwkDataReqTxConf+0x38>
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <nwkDataReqTxConf+0x22>
    1846:	22 81       	ldd	r18, Z+2	; 0x02
    1848:	33 81       	ldd	r19, Z+3	; 0x03
    184a:	28 17       	cp	r18, r24
    184c:	39 07       	cpc	r19, r25
    184e:	59 f4       	brne	.+22     	; 0x1866 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    1850:	dc 01       	movw	r26, r24
    1852:	ad 57       	subi	r26, 0x7D	; 125
    1854:	bf 4f       	sbci	r27, 0xFF	; 255
    1856:	2c 91       	ld	r18, X
    1858:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    185a:	13 96       	adiw	r26, 0x03	; 3
    185c:	2c 91       	ld	r18, X
    185e:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1860:	22 e0       	ldi	r18, 0x02	; 2
    1862:	24 83       	std	Z+4, r18	; 0x04
      break;
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1866:	01 90       	ld	r0, Z+
    1868:	f0 81       	ld	r31, Z
    186a:	e0 2d       	mov	r30, r0
    186c:	30 97       	sbiw	r30, 0x00	; 0
    186e:	59 f7       	brne	.-42     	; 0x1846 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    1870:	11 c1       	rjmp	.+546    	; 0x1a94 <nwkFrameFree>
    1872:	08 95       	ret

00001874 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    1874:	10 92 99 13 	sts	0x1399, r1
    1878:	10 92 98 13 	sts	0x1398, r1
    187c:	08 95       	ret

0000187e <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    187e:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    1880:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    1882:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    1884:	13 82       	std	Z+3, r1	; 0x03
    1886:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    1888:	a9 e7       	ldi	r26, 0x79	; 121
    188a:	b3 e2       	ldi	r27, 0x23	; 35
    188c:	96 96       	adiw	r26, 0x26	; 38
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	97 97       	sbiw	r26, 0x27	; 39
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	97 96       	adiw	r26, 0x27	; 39
    1898:	9c 93       	st	X, r25
    189a:	8e 93       	st	-X, r24
    189c:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    189e:	80 91 98 13 	lds	r24, 0x1398
    18a2:	90 91 99 13 	lds	r25, 0x1399
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	39 f4       	brne	.+14     	; 0x18b8 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    18aa:	11 82       	std	Z+1, r1	; 0x01
    18ac:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    18ae:	f0 93 99 13 	sts	0x1399, r31
    18b2:	e0 93 98 13 	sts	0x1398, r30
    18b6:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    18bc:	f0 93 99 13 	sts	0x1399, r31
    18c0:	e0 93 98 13 	sts	0x1398, r30
    18c4:	08 95       	ret

000018c6 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    18ce:	e0 91 98 13 	lds	r30, 0x1398
    18d2:	f0 91 99 13 	lds	r31, 0x1399
    18d6:	30 97       	sbiw	r30, 0x00	; 0
    18d8:	09 f4       	brne	.+2      	; 0x18dc <nwkDataReqTaskHandler+0x16>
    18da:	93 c0       	rjmp	.+294    	; 0x1a02 <nwkDataReqTaskHandler+0x13c>
    18dc:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	88 23       	and	r24, r24
    18e2:	21 f0       	breq	.+8      	; 0x18ec <nwkDataReqTaskHandler+0x26>
    18e4:	82 30       	cpi	r24, 0x02	; 2
    18e6:	09 f4       	brne	.+2      	; 0x18ea <nwkDataReqTaskHandler+0x24>
    18e8:	66 c0       	rjmp	.+204    	; 0x19b6 <nwkDataReqTaskHandler+0xf0>
    18ea:	85 c0       	rjmp	.+266    	; 0x19f6 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    18ec:	9a d0       	rcall	.+308    	; 0x1a22 <nwkFrameAlloc>
    18ee:	8c 01       	movw	r16, r24
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	21 f4       	brne	.+8      	; 0x18fc <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    18f8:	8f 87       	std	Y+15, r24	; 0x0f
    18fa:	83 c0       	rjmp	.+262    	; 0x1a02 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    18fc:	9b 83       	std	Y+3, r25	; 0x03
    18fe:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    1904:	f8 01       	movw	r30, r16
    1906:	e9 57       	subi	r30, 0x79	; 121
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	87 e1       	ldi	r24, 0x17	; 23
    190c:	9c e0       	ldi	r25, 0x0C	; 12
    190e:	91 83       	std	Z+1, r25	; 0x01
    1910:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    1912:	31 97       	sbiw	r30, 0x01	; 1
    1914:	89 85       	ldd	r24, Y+9	; 0x09
    1916:	82 fb       	bst	r24, 2
    1918:	88 27       	eor	r24, r24
    191a:	80 f9       	bld	r24, 0
    191c:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    191e:	99 85       	ldd	r25, Y+9	; 0x09
    1920:	d8 01       	movw	r26, r16
    1922:	1b 96       	adiw	r26, 0x0b	; 11
    1924:	8c 91       	ld	r24, X
    1926:	1b 97       	sbiw	r26, 0x0b	; 11
    1928:	90 fb       	bst	r25, 0
    192a:	80 f9       	bld	r24, 0
    192c:	1b 96       	adiw	r26, 0x0b	; 11
    192e:	8c 93       	st	X, r24
    1930:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    1932:	99 85       	ldd	r25, Y+9	; 0x09
    1934:	93 fb       	bst	r25, 3
    1936:	99 27       	eor	r25, r25
    1938:	90 f9       	bld	r25, 0
    193a:	90 fb       	bst	r25, 0
    193c:	82 f9       	bld	r24, 2
    193e:	1b 96       	adiw	r26, 0x0b	; 11
    1940:	8c 93       	st	X, r24
    1942:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1944:	e9 e7       	ldi	r30, 0x79	; 121
    1946:	f3 e2       	ldi	r31, 0x23	; 35
    1948:	84 81       	ldd	r24, Z+4	; 0x04
    194a:	8f 5f       	subi	r24, 0xFF	; 255
    194c:	84 83       	std	Z+4, r24	; 0x04
    194e:	1c 96       	adiw	r26, 0x0c	; 12
    1950:	8c 93       	st	X, r24
    1952:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	1e 96       	adiw	r26, 0x0e	; 14
    195a:	9c 93       	st	X, r25
    195c:	8e 93       	st	-X, r24
    195e:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	50 96       	adiw	r26, 0x10	; 16
    1966:	9c 93       	st	X, r25
    1968:	8e 93       	st	-X, r24
    196a:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    196c:	88 85       	ldd	r24, Y+8	; 0x08
    196e:	98 2f       	mov	r25, r24
    1970:	9f 70       	andi	r25, 0x0F	; 15
    1972:	51 96       	adiw	r26, 0x11	; 17
    1974:	8c 91       	ld	r24, X
    1976:	51 97       	sbiw	r26, 0x11	; 17
    1978:	80 7f       	andi	r24, 0xF0	; 240
    197a:	89 2b       	or	r24, r25
    197c:	51 96       	adiw	r26, 0x11	; 17
    197e:	8c 93       	st	X, r24
    1980:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	92 95       	swap	r25
    1986:	90 7f       	andi	r25, 0xF0	; 240
    1988:	8f 70       	andi	r24, 0x0F	; 15
    198a:	89 2b       	or	r24, r25
    198c:	51 96       	adiw	r26, 0x11	; 17
    198e:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    1990:	f8 01       	movw	r30, r16
    1992:	ef 57       	subi	r30, 0x7F	; 127
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	4c 85       	ldd	r20, Y+12	; 0x0c
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	6a 85       	ldd	r22, Y+10	; 0x0a
    199c:	7b 85       	ldd	r23, Y+11	; 0x0b
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <memcpy>
  frame->size += req->size;
    19a6:	f8 01       	movw	r30, r16
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    19ac:	89 0f       	add	r24, r25
    19ae:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    19b0:	c8 01       	movw	r24, r16
    19b2:	8f d5       	rcall	.+2846   	; 0x24d2 <nwkTxFrame>
    19b4:	26 c0       	rjmp	.+76     	; 0x1a02 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    19b6:	ce 17       	cp	r28, r30
    19b8:	df 07       	cpc	r29, r31
    19ba:	41 f4       	brne	.+16     	; 0x19cc <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    19bc:	88 81       	ld	r24, Y
    19be:	99 81       	ldd	r25, Y+1	; 0x01
    19c0:	90 93 99 13 	sts	0x1399, r25
    19c4:	80 93 98 13 	sts	0x1398, r24
    19c8:	0a c0       	rjmp	.+20     	; 0x19de <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    19ca:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	c8 17       	cp	r28, r24
    19d2:	d9 07       	cpc	r29, r25
    19d4:	d1 f7       	brne	.-12     	; 0x19ca <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    19d6:	88 81       	ld	r24, Y
    19d8:	99 81       	ldd	r25, Y+1	; 0x01
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    19de:	e9 e7       	ldi	r30, 0x79	; 121
    19e0:	f3 e2       	ldi	r31, 0x23	; 35
    19e2:	86 a1       	ldd	r24, Z+38	; 0x26
    19e4:	97 a1       	ldd	r25, Z+39	; 0x27
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	97 a3       	std	Z+39, r25	; 0x27
    19ea:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    19ec:	ed 85       	ldd	r30, Y+13	; 0x0d
    19ee:	fe 85       	ldd	r31, Y+14	; 0x0e
    19f0:	ce 01       	movw	r24, r28
    19f2:	19 95       	eicall
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    19f6:	09 90       	ld	r0, Y+
    19f8:	d8 81       	ld	r29, Y
    19fa:	c0 2d       	mov	r28, r0
    19fc:	20 97       	sbiw	r28, 0x00	; 0
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <nwkDataReqTaskHandler+0x13c>
    1a00:	6e cf       	rjmp	.-292    	; 0x18de <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	08 95       	ret

00001a0c <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1a0c:	ea e9       	ldi	r30, 0x9A	; 154
    1a0e:	f3 e1       	ldi	r31, 0x13	; 19
    1a10:	8e e4       	ldi	r24, 0x4E	; 78
    1a12:	9e e1       	ldi	r25, 0x1E	; 30
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1a14:	10 82       	st	Z, r1
    1a16:	e7 57       	subi	r30, 0x77	; 119
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1a1a:	e8 17       	cp	r30, r24
    1a1c:	f9 07       	cpc	r31, r25
    1a1e:	d1 f7       	brne	.-12     	; 0x1a14 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    1a20:	08 95       	ret

00001a22 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    1a22:	80 91 9a 13 	lds	r24, 0x139A
    1a26:	88 23       	and	r24, r24
    1a28:	59 f0       	breq	.+22     	; 0x1a40 <nwkFrameAlloc+0x1e>
    1a2a:	e3 e2       	ldi	r30, 0x23	; 35
    1a2c:	f4 e1       	ldi	r31, 0x14	; 20
    1a2e:	4e e4       	ldi	r20, 0x4E	; 78
    1a30:	5e e1       	ldi	r21, 0x1E	; 30
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	bc 01       	movw	r22, r24
    1a38:	20 81       	ld	r18, Z
    1a3a:	21 11       	cpse	r18, r1
    1a3c:	22 c0       	rjmp	.+68     	; 0x1a82 <nwkFrameAlloc+0x60>
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <nwkFrameAlloc+0x22>
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1a44:	49 e8       	ldi	r20, 0x89	; 137
    1a46:	46 9f       	mul	r20, r22
    1a48:	90 01       	movw	r18, r0
    1a4a:	47 9f       	mul	r20, r23
    1a4c:	30 0d       	add	r19, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	c9 01       	movw	r24, r18
    1a52:	86 56       	subi	r24, 0x66	; 102
    1a54:	9c 4e       	sbci	r25, 0xEC	; 236
    1a56:	fc 01       	movw	r30, r24
    1a58:	11 92       	st	Z+, r1
    1a5a:	4a 95       	dec	r20
    1a5c:	e9 f7       	brne	.-6      	; 0x1a58 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1a5e:	40 e1       	ldi	r20, 0x10	; 16
    1a60:	fc 01       	movw	r30, r24
    1a62:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    1a64:	ef 57       	subi	r30, 0x7F	; 127
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	24 55       	subi	r18, 0x54	; 84
    1a6a:	3c 4e       	sbci	r19, 0xEC	; 236
    1a6c:	31 83       	std	Z+1, r19	; 0x01
    1a6e:	20 83       	st	Z, r18
      nwkIb.lock++;
    1a70:	e9 e7       	ldi	r30, 0x79	; 121
    1a72:	f3 e2       	ldi	r31, 0x23	; 35
    1a74:	26 a1       	ldd	r18, Z+38	; 0x26
    1a76:	37 a1       	ldd	r19, Z+39	; 0x27
    1a78:	2f 5f       	subi	r18, 0xFF	; 255
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	37 a3       	std	Z+39, r19	; 0x27
    1a7e:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    1a80:	08 95       	ret
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	e7 57       	subi	r30, 0x77	; 119
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1a88:	e4 17       	cp	r30, r20
    1a8a:	f5 07       	cpc	r31, r21
    1a8c:	a1 f6       	brne	.-88     	; 0x1a36 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
}
    1a92:	08 95       	ret

00001a94 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    1a94:	fc 01       	movw	r30, r24
    1a96:	10 82       	st	Z, r1
  nwkIb.lock--;
    1a98:	e9 e7       	ldi	r30, 0x79	; 121
    1a9a:	f3 e2       	ldi	r31, 0x23	; 35
    1a9c:	86 a1       	ldd	r24, Z+38	; 0x26
    1a9e:	97 a1       	ldd	r25, Z+39	; 0x27
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	97 a3       	std	Z+39, r25	; 0x27
    1aa4:	86 a3       	std	Z+38, r24	; 0x26
    1aa6:	08 95       	ret

00001aa8 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	41 f0       	breq	.+16     	; 0x1abc <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    1aac:	fc 01       	movw	r30, r24
    1aae:	e7 57       	subi	r30, 0x77	; 119
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1ab2:	8e e1       	ldi	r24, 0x1E	; 30
    1ab4:	ee 34       	cpi	r30, 0x4E	; 78
    1ab6:	f8 07       	cpc	r31, r24
    1ab8:	18 f0       	brcs	.+6      	; 0x1ac0 <nwkFrameNext+0x18>
    1aba:	15 c0       	rjmp	.+42     	; 0x1ae6 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    1abc:	ea e9       	ldi	r30, 0x9A	; 154
    1abe:	f3 e1       	ldi	r31, 0x13	; 19
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 23       	and	r24, r24
    1ac4:	39 f0       	breq	.+14     	; 0x1ad4 <nwkFrameNext+0x2c>
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <nwkFrameNext+0x26>
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 23       	and	r24, r24
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <nwkFrameNext+0x2c>
      return frame;
    1ace:	8e 2f       	mov	r24, r30
    1ad0:	9f 2f       	mov	r25, r31
    1ad2:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1ad4:	e7 57       	subi	r30, 0x77	; 119
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	8e e1       	ldi	r24, 0x1E	; 30
    1ada:	ee 34       	cpi	r30, 0x4E	; 78
    1adc:	f8 07       	cpc	r31, r24
    1ade:	a0 f3       	brcs	.-24     	; 0x1ac8 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	08 95       	ret
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
}
    1aea:	08 95       	ret

00001aec <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1aec:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    1aee:	dc 01       	movw	r26, r24
    1af0:	ad 57       	subi	r26, 0x7D	; 125
    1af2:	bf 4f       	sbci	r27, 0xFF	; 255
    1af4:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1af6:	a9 e7       	ldi	r26, 0x79	; 121
    1af8:	b3 e2       	ldi	r27, 0x23	; 35
    1afa:	14 96       	adiw	r26, 0x04	; 4
    1afc:	9c 91       	ld	r25, X
    1afe:	14 97       	sbiw	r26, 0x04	; 4
    1b00:	9f 5f       	subi	r25, 0xFF	; 255
    1b02:	14 96       	adiw	r26, 0x04	; 4
    1b04:	9c 93       	st	X, r25
    1b06:	14 97       	sbiw	r26, 0x04	; 4
    1b08:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    1b0a:	8d 91       	ld	r24, X+
    1b0c:	9c 91       	ld	r25, X
    1b0e:	96 87       	std	Z+14, r25	; 0x0e
    1b10:	85 87       	std	Z+13, r24	; 0x0d
    1b12:	08 95       	ret

00001b14 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    1b14:	a3 e5       	ldi	r26, 0x53	; 83
    1b16:	be e1       	ldi	r27, 0x1E	; 30
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	4f ef       	ldi	r20, 0xFF	; 255
    1b1e:	5f ef       	ldi	r21, 0xFF	; 255
    1b20:	fd 01       	movw	r30, r26
    1b22:	34 97       	sbiw	r30, 0x04	; 4
    1b24:	51 83       	std	Z+1, r21	; 0x01
    1b26:	40 83       	st	Z, r20
    1b28:	fc 01       	movw	r30, r24
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	e8 1b       	sub	r30, r24
    1b38:	f9 0b       	sbc	r31, r25
    1b3a:	e2 5b       	subi	r30, 0xB2	; 178
    1b3c:	f1 4e       	sbci	r31, 0xE1	; 225
    1b3e:	20 81       	ld	r18, Z
    1b40:	2e 7f       	andi	r18, 0xFE	; 254
    1b42:	20 83       	st	Z, r18
    1b44:	1c 92       	st	X, r1
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	17 96       	adiw	r26, 0x07	; 7
    1b4a:	84 36       	cpi	r24, 0x64	; 100
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	41 f7       	brne	.-48     	; 0x1b20 <nwkRouteInit+0xc>
    1b50:	08 95       	ret

00001b52 <NWK_RouteFindEntry>:
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	ef e4       	ldi	r30, 0x4F	; 79
    1b5c:	fe e1       	ldi	r31, 0x1E	; 30
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	06 2f       	mov	r16, r22
    1b64:	10 e0       	ldi	r17, 0x00	; 0
    1b66:	40 81       	ld	r20, Z
    1b68:	51 81       	ldd	r21, Z+1	; 0x01
    1b6a:	48 17       	cp	r20, r24
    1b6c:	59 07       	cpc	r21, r25
    1b6e:	b1 f4       	brne	.+44     	; 0x1b9c <NWK_RouteFindEntry+0x4a>
    1b70:	d9 01       	movw	r26, r18
    1b72:	aa 0f       	add	r26, r26
    1b74:	bb 1f       	adc	r27, r27
    1b76:	aa 0f       	add	r26, r26
    1b78:	bb 1f       	adc	r27, r27
    1b7a:	aa 0f       	add	r26, r26
    1b7c:	bb 1f       	adc	r27, r27
    1b7e:	a2 1b       	sub	r26, r18
    1b80:	b3 0b       	sbc	r27, r19
    1b82:	a2 5b       	subi	r26, 0xB2	; 178
    1b84:	b1 4e       	sbci	r27, 0xE1	; 225
    1b86:	4c 91       	ld	r20, X
    1b88:	46 95       	lsr	r20
    1b8a:	41 70       	andi	r20, 0x01	; 1
    1b8c:	c4 2f       	mov	r28, r20
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	d4 2f       	mov	r29, r20
    1b92:	c0 17       	cp	r28, r16
    1b94:	d1 07       	cpc	r29, r17
    1b96:	11 f4       	brne	.+4      	; 0x1b9c <NWK_RouteFindEntry+0x4a>
    1b98:	cd 01       	movw	r24, r26
    1b9a:	08 c0       	rjmp	.+16     	; 0x1bac <NWK_RouteFindEntry+0x5a>
    1b9c:	2f 5f       	subi	r18, 0xFF	; 255
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	37 96       	adiw	r30, 0x07	; 7
    1ba2:	24 36       	cpi	r18, 0x64	; 100
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	f9 f6       	brne	.-66     	; 0x1b66 <NWK_RouteFindEntry+0x14>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	08 95       	ret

00001bb6 <NWK_RouteNewEntry>:
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	e3 e5       	ldi	r30, 0x53	; 83
    1bbc:	fe e1       	ldi	r31, 0x1E	; 30
    1bbe:	2f e0       	ldi	r18, 0x0F	; 15
    1bc0:	31 e2       	ldi	r19, 0x21	; 33
    1bc2:	c0 e0       	ldi	r28, 0x00	; 0
    1bc4:	d0 e0       	ldi	r29, 0x00	; 0
    1bc6:	df 01       	movw	r26, r30
    1bc8:	15 97       	sbiw	r26, 0x05	; 5
    1bca:	8c 91       	ld	r24, X
    1bcc:	80 fd       	sbrc	r24, 0
    1bce:	0b c0       	rjmp	.+22     	; 0x1be6 <NWK_RouteNewEntry+0x30>
    1bd0:	80 81       	ld	r24, Z
    1bd2:	88 23       	and	r24, r24
    1bd4:	69 f0       	breq	.+26     	; 0x1bf0 <NWK_RouteNewEntry+0x3a>
    1bd6:	20 97       	sbiw	r28, 0x00	; 0
    1bd8:	29 f0       	breq	.+10     	; 0x1be4 <NWK_RouteNewEntry+0x2e>
    1bda:	9d 81       	ldd	r25, Y+5	; 0x05
    1bdc:	89 17       	cp	r24, r25
    1bde:	18 f4       	brcc	.+6      	; 0x1be6 <NWK_RouteNewEntry+0x30>
    1be0:	ed 01       	movw	r28, r26
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <NWK_RouteNewEntry+0x30>
    1be4:	ed 01       	movw	r28, r26
    1be6:	37 96       	adiw	r30, 0x07	; 7
    1be8:	e2 17       	cp	r30, r18
    1bea:	f3 07       	cpc	r31, r19
    1bec:	61 f7       	brne	.-40     	; 0x1bc6 <NWK_RouteNewEntry+0x10>
    1bee:	de 01       	movw	r26, r28
    1bf0:	8c 91       	ld	r24, X
    1bf2:	8d 70       	andi	r24, 0x0D	; 13
    1bf4:	80 63       	ori	r24, 0x30	; 48
    1bf6:	8c 93       	st	X, r24
    1bf8:	80 e8       	ldi	r24, 0x80	; 128
    1bfa:	15 96       	adiw	r26, 0x05	; 5
    1bfc:	8c 93       	st	X, r24
    1bfe:	15 97       	sbiw	r26, 0x05	; 5
    1c00:	cd 01       	movw	r24, r26
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <NWK_RouteFreeEntry>:
    1c08:	fc 01       	movw	r30, r24
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 fd       	sbrc	r24, 0
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <NWK_RouteFreeEntry+0x12>
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	9f ef       	ldi	r25, 0xFF	; 255
    1c14:	92 83       	std	Z+2, r25	; 0x02
    1c16:	81 83       	std	Z+1, r24	; 0x01
    1c18:	15 82       	std	Z+5, r1	; 0x05
    1c1a:	08 95       	ret

00001c1c <NWK_RouteNextHop>:
    1c1c:	9a df       	rcall	.-204    	; 0x1b52 <NWK_RouteFindEntry>
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	21 f0       	breq	.+8      	; 0x1c2a <NWK_RouteNextHop+0xe>
    1c22:	fc 01       	movw	r30, r24
    1c24:	83 81       	ldd	r24, Z+3	; 0x03
    1c26:	94 81       	ldd	r25, Z+4	; 0x04
    1c28:	08 95       	ret
    1c2a:	8f ef       	ldi	r24, 0xFF	; 255
    1c2c:	9f ef       	ldi	r25, 0xFF	; 255
    1c2e:	08 95       	ret

00001c30 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    1c30:	90 df       	rcall	.-224    	; 0x1b52 <NWK_RouteFindEntry>
  if (entry)
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <nwkRouteRemove+0x8>
    NWK_RouteFreeEntry(entry);
    1c36:	e8 cf       	rjmp	.-48     	; 0x1c08 <NWK_RouteFreeEntry>
    1c38:	08 95       	ret

00001c3a <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1c44:	01 85       	ldd	r16, Z+9	; 0x09
    1c46:	12 85       	ldd	r17, Z+10	; 0x0a
    1c48:	11 23       	and	r17, r17
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <nwkRouteFrameReceived+0x1c>
    1c4c:	85 85       	ldd	r24, Z+13	; 0x0d
    1c4e:	96 85       	ldd	r25, Z+14	; 0x0e
    1c50:	08 17       	cp	r16, r24
    1c52:	19 07       	cpc	r17, r25
    1c54:	e1 f5       	brne	.+120    	; 0x1cce <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1c56:	85 81       	ldd	r24, Z+5	; 0x05
    1c58:	96 81       	ldd	r25, Z+6	; 0x06
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	c1 f1       	breq	.+112    	; 0x1cce <nwkRouteFrameReceived+0x94>
    1c5e:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	85 85       	ldd	r24, Z+13	; 0x0d
    1c64:	96 85       	ldd	r25, Z+14	; 0x0e
    1c66:	75 df       	rcall	.-278    	; 0x1b52 <NWK_RouteFindEntry>
    1c68:	fc 01       	movw	r30, r24

  if (entry)
    1c6a:	89 2b       	or	r24, r25
    1c6c:	a1 f0       	breq	.+40     	; 0x1c96 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c70:	98 85       	ldd	r25, Y+8	; 0x08
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	f9 f4       	brne	.+62     	; 0x1cb4 <nwkRouteFrameReceived+0x7a>
    1c76:	20 91 79 23 	lds	r18, 0x2379
    1c7a:	30 91 7a 23 	lds	r19, 0x237A
    1c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c80:	98 89       	ldd	r25, Y+16	; 0x10
    1c82:	28 17       	cp	r18, r24
    1c84:	39 07       	cpc	r19, r25
    1c86:	b1 f4       	brne	.+44     	; 0x1cb4 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
    1c88:	14 83       	std	Z+4, r17	; 0x04
    1c8a:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8f 70       	andi	r24, 0x0F	; 15
    1c90:	80 63       	ori	r24, 0x30	; 48
    1c92:	80 83       	st	Z, r24
    1c94:	0a c0       	rjmp	.+20     	; 0x1caa <nwkRouteFrameReceived+0x70>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    1c96:	8f df       	rcall	.-226    	; 0x1bb6 <NWK_RouteNewEntry>
    1c98:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
    1c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9e:	92 83       	std	Z+2, r25	; 0x02
    1ca0:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	94 83       	std	Z+4, r25	; 0x04
    1ca8:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    1caa:	cd 57       	subi	r28, 0x7D	; 125
    1cac:	df 4f       	sbci	r29, 0xFF	; 255
    1cae:	88 81       	ld	r24, Y
    1cb0:	86 83       	std	Z+6, r24	; 0x06
    1cb2:	0d c0       	rjmp	.+26     	; 0x1cce <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    1cb4:	83 81       	ldd	r24, Z+3	; 0x03
    1cb6:	94 81       	ldd	r25, Z+4	; 0x04
    1cb8:	08 17       	cp	r16, r24
    1cba:	19 07       	cpc	r17, r25
    1cbc:	b1 f3       	breq	.-20     	; 0x1caa <nwkRouteFrameReceived+0x70>
    1cbe:	de 01       	movw	r26, r28
    1cc0:	ad 57       	subi	r26, 0x7D	; 125
    1cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc4:	9c 91       	ld	r25, X
    1cc6:	86 81       	ldd	r24, Z+6	; 0x06
    1cc8:	89 17       	cp	r24, r25
    1cca:	f0 f2       	brcs	.-68     	; 0x1c88 <nwkRouteFrameReceived+0x4e>
    1ccc:	ee cf       	rjmp	.-36     	; 0x1caa <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	08 95       	ret

00001cd8 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    1cde:	87 85       	ldd	r24, Z+15	; 0x0f
    1ce0:	90 89       	ldd	r25, Z+16	; 0x10
    1ce2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce4:	2f ef       	ldi	r18, 0xFF	; 255
    1ce6:	92 07       	cpc	r25, r18
    1ce8:	d9 f1       	breq	.+118    	; 0x1d60 <nwkRouteFrameSent+0x88>
    1cea:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    1cec:	63 85       	ldd	r22, Z+11	; 0x0b
    1cee:	63 fb       	bst	r22, 3
    1cf0:	66 27       	eor	r22, r22
    1cf2:	60 f9       	bld	r22, 0
    1cf4:	2e df       	rcall	.-420    	; 0x1b52 <NWK_RouteFindEntry>
    1cf6:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    1cf8:	89 2b       	or	r24, r25
    1cfa:	91 f1       	breq	.+100    	; 0x1d60 <nwkRouteFrameSent+0x88>
    1cfc:	8c 91       	ld	r24, X
    1cfe:	80 fd       	sbrc	r24, 0
    1d00:	2f c0       	rjmp	.+94     	; 0x1d60 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    1d02:	fe 01       	movw	r30, r28
    1d04:	ed 57       	subi	r30, 0x7D	; 125
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	81 11       	cpse	r24, r1
    1d0c:	19 c0       	rjmp	.+50     	; 0x1d40 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1d0e:	8c 91       	ld	r24, X
    1d10:	8f 70       	andi	r24, 0x0F	; 15
    1d12:	80 63       	ori	r24, 0x30	; 48
    1d14:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    1d16:	15 96       	adiw	r26, 0x05	; 5
    1d18:	8c 91       	ld	r24, X
    1d1a:	15 97       	sbiw	r26, 0x05	; 5
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	15 96       	adiw	r26, 0x05	; 5
    1d20:	8c 93       	st	X, r24
    1d22:	8f 3f       	cpi	r24, 0xFF	; 255
    1d24:	e9 f4       	brne	.+58     	; 0x1d60 <nwkRouteFrameSent+0x88>
    1d26:	e3 e5       	ldi	r30, 0x53	; 83
    1d28:	fe e1       	ldi	r31, 0x1E	; 30
    1d2a:	2f e0       	ldi	r18, 0x0F	; 15
    1d2c:	31 e2       	ldi	r19, 0x21	; 33
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1d2e:	80 81       	ld	r24, Z
    1d30:	86 95       	lsr	r24
    1d32:	8f 5f       	subi	r24, 0xFF	; 255
    1d34:	80 83       	st	Z, r24
    1d36:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1d38:	e2 17       	cp	r30, r18
    1d3a:	f3 07       	cpc	r31, r19
    1d3c:	c1 f7       	brne	.-16     	; 0x1d2e <nwkRouteFrameSent+0x56>
    1d3e:	10 c0       	rjmp	.+32     	; 0x1d60 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    1d40:	9c 91       	ld	r25, X
    1d42:	89 2f       	mov	r24, r25
    1d44:	82 95       	swap	r24
    1d46:	8f 70       	andi	r24, 0x0F	; 15
    1d48:	81 5f       	subi	r24, 0xF1	; 241
    1d4a:	8f 70       	andi	r24, 0x0F	; 15
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	22 95       	swap	r18
    1d50:	20 7f       	andi	r18, 0xF0	; 240
    1d52:	9f 70       	andi	r25, 0x0F	; 15
    1d54:	92 2b       	or	r25, r18
    1d56:	9c 93       	st	X, r25
    1d58:	81 11       	cpse	r24, r1
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	54 df       	rcall	.-344    	; 0x1c08 <NWK_RouteFreeEntry>
  }
}
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	08 95       	ret

00001d66 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1d6c:	87 85       	ldd	r24, Z+15	; 0x0f
    1d6e:	90 89       	ldd	r25, Z+16	; 0x10
    1d70:	8f 3f       	cpi	r24, 0xFF	; 255
    1d72:	2f ef       	ldi	r18, 0xFF	; 255
    1d74:	92 07       	cpc	r25, r18
    1d76:	29 f4       	brne	.+10     	; 0x1d82 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f ef       	ldi	r25, 0xFF	; 255
    1d7c:	90 87       	std	Z+8, r25	; 0x08
    1d7e:	87 83       	std	Z+7, r24	; 0x07
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    1d82:	23 85       	ldd	r18, Z+11	; 0x0b
    1d84:	22 ff       	sbrs	r18, 2
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    1d88:	90 87       	std	Z+8, r25	; 0x08
    1d8a:	87 83       	std	Z+7, r24	; 0x07
    1d8c:	08 c0       	rjmp	.+16     	; 0x1d9e <nwkRoutePrepareTx+0x38>
    1d8e:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    1d90:	63 85       	ldd	r22, Z+11	; 0x0b
    1d92:	63 fb       	bst	r22, 3
    1d94:	66 27       	eor	r22, r22
    1d96:	60 f9       	bld	r22, 0
    1d98:	41 df       	rcall	.-382    	; 0x1c1c <NWK_RouteNextHop>
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	08 95       	ret

00001da4 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1da4:	af 92       	push	r10
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    1db8:	1b 85       	ldd	r17, Y+11	; 0x0b
    1dba:	13 fb       	bst	r17, 3
    1dbc:	11 27       	eor	r17, r17
    1dbe:	10 f9       	bld	r17, 0
    1dc0:	cf 84       	ldd	r12, Y+15	; 0x0f
    1dc2:	d8 88       	ldd	r13, Y+16	; 0x10
    1dc4:	61 2f       	mov	r22, r17
    1dc6:	c6 01       	movw	r24, r12
    1dc8:	29 df       	rcall	.-430    	; 0x1c1c <NWK_RouteNextHop>
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e9 57       	subi	r30, 0x79	; 121
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	11 82       	std	Z+1, r1	; 0x01
    1dd6:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1dd8:	31 97       	sbiw	r30, 0x01	; 1
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    1dde:	ce 01       	movw	r24, r28
    1de0:	78 d3       	rcall	.+1776   	; 0x24d2 <nwkTxFrame>
    1de2:	22 c0       	rjmp	.+68     	; 0x1e28 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    1de4:	ad 84       	ldd	r10, Y+13	; 0x0d
    1de6:	be 84       	ldd	r11, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    1de8:	1c de       	rcall	.-968    	; 0x1a22 <nwkFrameAlloc>
    1dea:	7c 01       	movw	r14, r24
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	d1 f0       	breq	.+52     	; 0x1e24 <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
    1df0:	7d de       	rcall	.-774    	; 0x1aec <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    1df2:	f7 01       	movw	r30, r14
    1df4:	81 81       	ldd	r24, Z+1	; 0x01
    1df6:	8a 5f       	subi	r24, 0xFA	; 250
    1df8:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    1dfa:	e9 57       	subi	r30, 0x79	; 121
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	11 82       	std	Z+1, r1	; 0x01
    1e00:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    1e02:	f7 01       	movw	r30, r14
    1e04:	b0 8a       	std	Z+16, r11	; 0x10
    1e06:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    1e08:	ef 57       	subi	r30, 0x7F	; 127
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	01 90       	ld	r0, Z+
    1e0e:	f0 81       	ld	r31, Z
    1e10:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	80 83       	st	Z, r24
  command->srcAddr = src;
    1e16:	b2 82       	std	Z+2, r11	; 0x02
    1e18:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
    1e1a:	d4 82       	std	Z+4, r13	; 0x04
    1e1c:	c3 82       	std	Z+3, r12	; 0x03
  command->multicast = multicast;
    1e1e:	15 83       	std	Z+5, r17	; 0x05

  nwkTxFrame(frame);
    1e20:	c7 01       	movw	r24, r14
    1e22:	57 d3       	rcall	.+1710   	; 0x24d2 <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    1e24:	ce 01       	movw	r24, r28
    1e26:	36 de       	rcall	.-916    	; 0x1a94 <nwkFrameFree>
  }
}
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	bf 90       	pop	r11
    1e38:	af 90       	pop	r10
    1e3a:	08 95       	ret

00001e3c <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	17 96       	adiw	r26, 0x07	; 7
    1e40:	ed 91       	ld	r30, X+
    1e42:	fc 91       	ld	r31, X
    1e44:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    1e46:	19 96       	adiw	r26, 0x09	; 9
    1e48:	8c 91       	ld	r24, X
    1e4a:	86 30       	cpi	r24, 0x06	; 6
    1e4c:	31 f4       	brne	.+12     	; 0x1e5a <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    1e4e:	65 81       	ldd	r22, Z+5	; 0x05
    1e50:	83 81       	ldd	r24, Z+3	; 0x03
    1e52:	94 81       	ldd	r25, Z+4	; 0x04
    1e54:	ed de       	rcall	.-550    	; 0x1c30 <nwkRouteRemove>

  return true;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    1e5a:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    1e5c:	08 95       	ret

00001e5e <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    1e5e:	dc 01       	movw	r26, r24
    1e60:	19 96       	adiw	r26, 0x09	; 9
    1e62:	2c 91       	ld	r18, X
    1e64:	19 97       	sbiw	r26, 0x09	; 9
    1e66:	22 23       	and	r18, r18
    1e68:	71 f0       	breq	.+28     	; 0x1e86 <nwkRxServiceDataInd+0x28>
    1e6a:	17 96       	adiw	r26, 0x07	; 7
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	18 97       	sbiw	r26, 0x08	; 8
    1e72:	20 81       	ld	r18, Z
    1e74:	22 23       	and	r18, r18
    1e76:	19 f0       	breq	.+6      	; 0x1e7e <nwkRxServiceDataInd+0x20>
    1e78:	21 30       	cpi	r18, 0x01	; 1
    1e7a:	19 f0       	breq	.+6      	; 0x1e82 <nwkRxServiceDataInd+0x24>
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <nwkRxServiceDataInd+0x2c>
    1e7e:	bd c3       	rjmp	.+1914   	; 0x25fa <nwkTxAckReceived>
    1e80:	08 95       	ret
    1e82:	dc cf       	rjmp	.-72     	; 0x1e3c <nwkRouteErrorReceived>
    1e84:	08 95       	ret
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	08 95       	ret
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	08 95       	ret

00001e8e <nwkRxDuplicateRejectionTimerHandler>:
    1e8e:	bc 01       	movw	r22, r24
    1e90:	ec e1       	ldi	r30, 0x1C	; 28
    1e92:	f1 e2       	ldi	r31, 0x21	; 33
    1e94:	2e e4       	ldi	r18, 0x4E	; 78
    1e96:	31 e2       	ldi	r19, 0x21	; 33
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	51 e0       	ldi	r21, 0x01	; 1
    1e9c:	90 81       	ld	r25, Z
    1e9e:	99 23       	and	r25, r25
    1ea0:	19 f0       	breq	.+6      	; 0x1ea8 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    1ea2:	91 50       	subi	r25, 0x01	; 1
    1ea4:	90 83       	st	Z, r25
    1ea6:	45 2f       	mov	r20, r21
    1ea8:	35 96       	adiw	r30, 0x05	; 5
    1eaa:	e2 17       	cp	r30, r18
    1eac:	f3 07       	cpc	r31, r19
    1eae:	b1 f7       	brne	.-20     	; 0x1e9c <nwkRxDuplicateRejectionTimerHandler+0xe>
    1eb0:	44 23       	and	r20, r20
    1eb2:	11 f0       	breq	.+4      	; 0x1eb8 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	ac c6       	rjmp	.+3416   	; 0x2c10 <SYS_TimerStart>
    1eb8:	08 95       	ret

00001eba <nwkRxInit>:
    1eba:	ec e1       	ldi	r30, 0x1C	; 28
    1ebc:	f1 e2       	ldi	r31, 0x21	; 33
    1ebe:	8e e4       	ldi	r24, 0x4E	; 78
    1ec0:	91 e2       	ldi	r25, 0x21	; 33
    1ec2:	10 82       	st	Z, r1
    1ec4:	35 96       	adiw	r30, 0x05	; 5
    1ec6:	e8 17       	cp	r30, r24
    1ec8:	f9 07       	cpc	r31, r25
    1eca:	d9 f7       	brne	.-10     	; 0x1ec2 <nwkRxInit+0x8>
    1ecc:	ea e0       	ldi	r30, 0x0A	; 10
    1ece:	f1 e2       	ldi	r31, 0x21	; 33
    1ed0:	84 e6       	ldi	r24, 0x64	; 100
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e0       	ldi	r26, 0x00	; 0
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	86 83       	std	Z+6, r24	; 0x06
    1eda:	97 83       	std	Z+7, r25	; 0x07
    1edc:	a0 87       	std	Z+8, r26	; 0x08
    1ede:	b1 87       	std	Z+9, r27	; 0x09
    1ee0:	12 86       	std	Z+10, r1	; 0x0a
    1ee2:	87 e4       	ldi	r24, 0x47	; 71
    1ee4:	9f e0       	ldi	r25, 0x0F	; 15
    1ee6:	94 87       	std	Z+12, r25	; 0x0c
    1ee8:	83 87       	std	Z+11, r24	; 0x0b
    1eea:	6f e2       	ldi	r22, 0x2F	; 47
    1eec:	7f e0       	ldi	r23, 0x0F	; 15
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	91 cc       	rjmp	.-1758   	; 0x1814 <NWK_OpenEndpoint>
    1ef2:	08 95       	ret

00001ef4 <PHY_DataInd>:
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	dc 01       	movw	r26, r24
    1efa:	ed 91       	ld	r30, X+
    1efc:	fc 91       	ld	r31, X
    1efe:	11 97       	sbiw	r26, 0x01	; 1
    1f00:	21 81       	ldd	r18, Z+1	; 0x01
    1f02:	28 38       	cpi	r18, 0x88	; 136
    1f04:	f9 f4       	brne	.+62     	; 0x1f44 <PHY_DataInd+0x50>
    1f06:	20 81       	ld	r18, Z
    1f08:	2f 7d       	andi	r18, 0xDF	; 223
    1f0a:	21 34       	cpi	r18, 0x41	; 65
    1f0c:	d9 f4       	brne	.+54     	; 0x1f44 <PHY_DataInd+0x50>
    1f0e:	12 96       	adiw	r26, 0x02	; 2
    1f10:	2c 91       	ld	r18, X
    1f12:	20 31       	cpi	r18, 0x10	; 16
    1f14:	b8 f0       	brcs	.+46     	; 0x1f44 <PHY_DataInd+0x50>
    1f16:	ec 01       	movw	r28, r24
    1f18:	84 dd       	rcall	.-1272   	; 0x1a22 <nwkFrameAlloc>
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	99 f0       	breq	.+38     	; 0x1f44 <PHY_DataInd+0x50>
    1f1e:	20 e2       	ldi	r18, 0x20	; 32
    1f20:	fc 01       	movw	r30, r24
    1f22:	20 83       	st	Z, r18
    1f24:	2a 81       	ldd	r18, Y+2	; 0x02
    1f26:	21 83       	std	Z+1, r18	; 0x01
    1f28:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2a:	ed 57       	subi	r30, 0x7D	; 125
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	20 83       	st	Z, r18
    1f30:	2c 81       	ldd	r18, Y+4	; 0x04
    1f32:	31 96       	adiw	r30, 0x01	; 1
    1f34:	20 83       	st	Z, r18
    1f36:	4a 81       	ldd	r20, Y+2	; 0x02
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	68 81       	ld	r22, Y
    1f3c:	79 81       	ldd	r23, Y+1	; 0x01
    1f3e:	02 96       	adiw	r24, 0x02	; 2
    1f40:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <memcpy>
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1f4a:	2f 92       	push	r2
    1f4c:	3f 92       	push	r3
    1f4e:	4f 92       	push	r4
    1f50:	5f 92       	push	r5
    1f52:	6f 92       	push	r6
    1f54:	7f 92       	push	r7
    1f56:	8f 92       	push	r8
    1f58:	9f 92       	push	r9
    1f5a:	af 92       	push	r10
    1f5c:	bf 92       	push	r11
    1f5e:	cf 92       	push	r12
    1f60:	df 92       	push	r13
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	2e 97       	sbiw	r28, 0x0e	; 14
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1f7e:	00 e0       	ldi	r16, 0x00	; 0
    1f80:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1f82:	0f 2e       	mov	r0, r31
    1f84:	f4 e2       	ldi	r31, 0x24	; 36
    1f86:	df 2e       	mov	r13, r31
    1f88:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1f8a:	0f 2e       	mov	r0, r31
    1f8c:	f9 e7       	ldi	r31, 0x79	; 121
    1f8e:	8f 2e       	mov	r8, r31
    1f90:	f3 e2       	ldi	r31, 0x23	; 35
    1f92:	9f 2e       	mov	r9, r31
    1f94:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1f96:	68 94       	set
    1f98:	cc 24       	eor	r12, r12
    1f9a:	c4 f8       	bld	r12, 4
    1f9c:	0f 2e       	mov	r0, r31
    1f9e:	fc e1       	ldi	r31, 0x1C	; 28
    1fa0:	4f 2e       	mov	r4, r31
    1fa2:	f1 e2       	ldi	r31, 0x21	; 33
    1fa4:	5f 2e       	mov	r5, r31
    1fa6:	f0 2d       	mov	r31, r0
    1fa8:	0f 2e       	mov	r0, r31
    1faa:	f8 e1       	ldi	r31, 0x18	; 24
    1fac:	6f 2e       	mov	r6, r31
    1fae:	f1 e2       	ldi	r31, 0x21	; 33
    1fb0:	7f 2e       	mov	r7, r31
    1fb2:	f0 2d       	mov	r31, r0
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	fa e4       	ldi	r31, 0x4A	; 74
    1fb8:	ef 2e       	mov	r14, r31
    1fba:	f1 e2       	ldi	r31, 0x21	; 33
    1fbc:	ff 2e       	mov	r15, r31
    1fbe:	f0 2d       	mov	r31, r0

  if (nwkIb.addr == header->nwkSrcAddr)
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1fc0:	31 2c       	mov	r3, r1
    1fc2:	21 2c       	mov	r2, r1
    1fc4:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1fc6:	dd c1       	rjmp	.+954    	; 0x2382 <nwkRxTaskHandler+0x438>
  {
    switch (frame->state)
    1fc8:	d5 01       	movw	r26, r10
    1fca:	8c 91       	ld	r24, X
    1fcc:	82 32       	cpi	r24, 0x22	; 34
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <nwkRxTaskHandler+0x88>
    1fd0:	07 c1       	rjmp	.+526    	; 0x21e0 <nwkRxTaskHandler+0x296>
    1fd2:	18 f4       	brcc	.+6      	; 0x1fda <nwkRxTaskHandler+0x90>
    1fd4:	80 32       	cpi	r24, 0x20	; 32
    1fd6:	41 f0       	breq	.+16     	; 0x1fe8 <nwkRxTaskHandler+0x9e>
    1fd8:	d4 c1       	rjmp	.+936    	; 0x2382 <nwkRxTaskHandler+0x438>
    1fda:	83 32       	cpi	r24, 0x23	; 35
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <nwkRxTaskHandler+0x96>
    1fde:	cc c1       	rjmp	.+920    	; 0x2378 <nwkRxTaskHandler+0x42e>
    1fe0:	84 32       	cpi	r24, 0x24	; 36
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <nwkRxTaskHandler+0x9c>
    1fe4:	cc c1       	rjmp	.+920    	; 0x237e <nwkRxTaskHandler+0x434>
    1fe6:	cd c1       	rjmp	.+922    	; 0x2382 <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    1fe8:	f5 01       	movw	r30, r10
    1fea:	d0 82       	st	Z, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1fec:	83 85       	ldd	r24, Z+11	; 0x0b
    1fee:	98 2f       	mov	r25, r24
    1ff0:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <nwkRxTaskHandler+0xac>
    1ff4:	c6 c1       	rjmp	.+908    	; 0x2382 <nwkRxTaskHandler+0x438>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1ff6:	25 81       	ldd	r18, Z+5	; 0x05
    1ff8:	36 81       	ldd	r19, Z+6	; 0x06
    1ffa:	2f 3f       	cpi	r18, 0xFF	; 255
    1ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffe:	91 f4       	brne	.+36     	; 0x2024 <nwkRxTaskHandler+0xda>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    2000:	d5 01       	movw	r26, r10
    2002:	1f 96       	adiw	r26, 0x0f	; 15
    2004:	8d 91       	ld	r24, X+
    2006:	9c 91       	ld	r25, X
    2008:	50 97       	sbiw	r26, 0x10	; 16
    200a:	f4 01       	movw	r30, r8
    200c:	20 81       	ld	r18, Z
    200e:	31 81       	ldd	r19, Z+1	; 0x01
    2010:	28 17       	cp	r18, r24
    2012:	39 07       	cpc	r19, r25
    2014:	19 f0       	breq	.+6      	; 0x201c <nwkRxTaskHandler+0xd2>
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	09 f0       	breq	.+2      	; 0x201c <nwkRxTaskHandler+0xd2>
    201a:	b3 c1       	rjmp	.+870    	; 0x2382 <nwkRxTaskHandler+0x438>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    201c:	e2 e2       	ldi	r30, 0x22	; 34
    201e:	d5 01       	movw	r26, r10
    2020:	ec 93       	st	X, r30
    2022:	af c1       	rjmp	.+862    	; 0x2382 <nwkRxTaskHandler+0x438>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    2024:	d5 01       	movw	r26, r10
    2026:	1f 96       	adiw	r26, 0x0f	; 15
    2028:	2d 91       	ld	r18, X+
    202a:	3c 91       	ld	r19, X
    202c:	50 97       	sbiw	r26, 0x10	; 16
    202e:	2f 3f       	cpi	r18, 0xFF	; 255
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	11 f4       	brne	.+4      	; 0x2038 <nwkRxTaskHandler+0xee>
    2034:	80 fd       	sbrc	r24, 0
    2036:	a5 c1       	rjmp	.+842    	; 0x2382 <nwkRxTaskHandler+0x438>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    2038:	f4 01       	movw	r30, r8
    203a:	20 81       	ld	r18, Z
    203c:	31 81       	ldd	r19, Z+1	; 0x01
    203e:	d5 01       	movw	r26, r10
    2040:	1d 96       	adiw	r26, 0x0d	; 13
    2042:	8d 91       	ld	r24, X+
    2044:	9c 91       	ld	r25, X
    2046:	1e 97       	sbiw	r26, 0x0e	; 14
    2048:	28 17       	cp	r18, r24
    204a:	39 07       	cpc	r19, r25
    204c:	09 f4       	brne	.+2      	; 0x2050 <nwkRxTaskHandler+0x106>
    204e:	99 c1       	rjmp	.+818    	; 0x2382 <nwkRxTaskHandler+0x438>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    2050:	c5 01       	movw	r24, r10
    2052:	f3 dd       	rcall	.-1050   	; 0x1c3a <nwkRouteFrameReceived>
    2054:	f3 01       	movw	r30, r6
    2056:	43 2d       	mov	r20, r3
    2058:	52 2d       	mov	r21, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    205a:	63 2d       	mov	r22, r3
    205c:	72 2d       	mov	r23, r2
    205e:	5e 86       	std	Y+14, r5	; 0x0e
    2060:	4d 86       	std	Y+13, r4	; 0x0d

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    2062:	ad 85       	ldd	r26, Y+13	; 0x0d
    2064:	be 85       	ldd	r27, Y+14	; 0x0e
    2066:	8c 91       	ld	r24, X
    2068:	88 23       	and	r24, r24
    206a:	09 f4       	brne	.+2      	; 0x206e <nwkRxTaskHandler+0x124>
    206c:	6c c0       	rjmp	.+216    	; 0x2146 <nwkRxTaskHandler+0x1fc>
    206e:	d5 01       	movw	r26, r10
    2070:	1d 96       	adiw	r26, 0x0d	; 13
    2072:	2d 91       	ld	r18, X+
    2074:	3c 91       	ld	r19, X
    2076:	1e 97       	sbiw	r26, 0x0e	; 14
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	28 17       	cp	r18, r24
    207e:	39 07       	cpc	r19, r25
    2080:	09 f0       	breq	.+2      	; 0x2084 <nwkRxTaskHandler+0x13a>
    2082:	62 c0       	rjmp	.+196    	; 0x2148 <nwkRxTaskHandler+0x1fe>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2084:	f5 01       	movw	r30, r10
    2086:	94 85       	ldd	r25, Z+12	; 0x0c
    2088:	fa 01       	movw	r30, r20
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	e4 0f       	add	r30, r20
    2094:	f5 1f       	adc	r31, r21
    2096:	e8 5e       	subi	r30, 0xE8	; 232
    2098:	fe 4d       	sbci	r31, 0xDE	; 222
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	89 1b       	sub	r24, r25

      if (diff < 8)
    209e:	88 30       	cpi	r24, 0x08	; 8
    20a0:	c8 f5       	brcc	.+114    	; 0x2114 <nwkRxTaskHandler+0x1ca>
      {
        if (entry->mask & (1 << diff))
    20a2:	fa 01       	movw	r30, r20
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	e4 0f       	add	r30, r20
    20ae:	f5 1f       	adc	r31, r21
    20b0:	e8 5e       	subi	r30, 0xE8	; 232
    20b2:	fe 4d       	sbci	r31, 0xDE	; 222
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	29 2f       	mov	r18, r25
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	08 2e       	mov	r0, r24
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <nwkRxTaskHandler+0x178>
    20be:	35 95       	asr	r19
    20c0:	27 95       	ror	r18
    20c2:	0a 94       	dec	r0
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <nwkRxTaskHandler+0x174>
    20c6:	20 ff       	sbrs	r18, 0
    20c8:	12 c0       	rjmp	.+36     	; 0x20ee <nwkRxTaskHandler+0x1a4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    20ca:	d4 01       	movw	r26, r8
    20cc:	2d 91       	ld	r18, X+
    20ce:	3c 91       	ld	r19, X
    20d0:	f5 01       	movw	r30, r10
    20d2:	87 81       	ldd	r24, Z+7	; 0x07
    20d4:	90 85       	ldd	r25, Z+8	; 0x08
    20d6:	28 17       	cp	r18, r24
    20d8:	39 07       	cpc	r19, r25
    20da:	09 f0       	breq	.+2      	; 0x20de <nwkRxTaskHandler+0x194>
    20dc:	52 c1       	rjmp	.+676    	; 0x2382 <nwkRxTaskHandler+0x438>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    20de:	63 85       	ldd	r22, Z+11	; 0x0b
    20e0:	63 fb       	bst	r22, 3
    20e2:	66 27       	eor	r22, r22
    20e4:	60 f9       	bld	r22, 0
    20e6:	87 85       	ldd	r24, Z+15	; 0x0f
    20e8:	90 89       	ldd	r25, Z+16	; 0x10
    20ea:	a2 dd       	rcall	.-1212   	; 0x1c30 <nwkRouteRemove>
    20ec:	4a c1       	rjmp	.+660    	; 0x2382 <nwkRxTaskHandler+0x438>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    20ee:	fa 01       	movw	r30, r20
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	e4 0f       	add	r30, r20
    20fa:	f5 1f       	adc	r31, r21
    20fc:	e8 5e       	subi	r30, 0xE8	; 232
    20fe:	fe 4d       	sbci	r31, 0xDE	; 222
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	02 c0       	rjmp	.+4      	; 0x210a <nwkRxTaskHandler+0x1c0>
    2106:	22 0f       	add	r18, r18
    2108:	33 1f       	adc	r19, r19
    210a:	8a 95       	dec	r24
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <nwkRxTaskHandler+0x1bc>
    210e:	92 2b       	or	r25, r18
    2110:	93 83       	std	Z+3, r25	; 0x03
    2112:	3e c1       	rjmp	.+636    	; 0x2390 <nwkRxTaskHandler+0x446>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    2114:	fa 01       	movw	r30, r20
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	ee 0f       	add	r30, r30
    211c:	ff 1f       	adc	r31, r31
    211e:	e4 0f       	add	r30, r20
    2120:	f5 1f       	adc	r31, r21
    2122:	e8 5e       	subi	r30, 0xE8	; 232
    2124:	fe 4d       	sbci	r31, 0xDE	; 222
    2126:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    2128:	23 81       	ldd	r18, Z+3	; 0x03
    212a:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    212c:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
    212e:	a9 01       	movw	r20, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <nwkRxTaskHandler+0x1ec>
    2132:	44 0f       	add	r20, r20
    2134:	55 1f       	adc	r21, r21
    2136:	8a 95       	dec	r24
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <nwkRxTaskHandler+0x1e8>
    213a:	ca 01       	movw	r24, r20
    213c:	81 60       	ori	r24, 0x01	; 1
    213e:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    2140:	8f e1       	ldi	r24, 0x1F	; 31
    2142:	84 83       	std	Z+4, r24	; 0x04
    2144:	25 c1       	rjmp	.+586    	; 0x2390 <nwkRxTaskHandler+0x446>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    2146:	bf 01       	movw	r22, r30
    2148:	4f 5f       	subi	r20, 0xFF	; 255
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
    214c:	8d 85       	ldd	r24, Y+13	; 0x0d
    214e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2150:	05 96       	adiw	r24, 0x05	; 5
    2152:	9e 87       	std	Y+14, r25	; 0x0e
    2154:	8d 87       	std	Y+13, r24	; 0x0d
    2156:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    2158:	ee 15       	cp	r30, r14
    215a:	ff 05       	cpc	r31, r15
    215c:	09 f0       	breq	.+2      	; 0x2160 <nwkRxTaskHandler+0x216>
    215e:	81 cf       	rjmp	.-254    	; 0x2062 <nwkRxTaskHandler+0x118>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    2160:	61 15       	cp	r22, r1
    2162:	71 05       	cpc	r23, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <nwkRxTaskHandler+0x21e>
    2166:	0d c1       	rjmp	.+538    	; 0x2382 <nwkRxTaskHandler+0x438>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    2168:	d5 01       	movw	r26, r10
    216a:	1d 96       	adiw	r26, 0x0d	; 13
    216c:	8d 91       	ld	r24, X+
    216e:	9c 91       	ld	r25, X
    2170:	1e 97       	sbiw	r26, 0x0e	; 14
    2172:	fb 01       	movw	r30, r22
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    2178:	1c 96       	adiw	r26, 0x0c	; 12
    217a:	8c 91       	ld	r24, X
    217c:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    217e:	21 e0       	ldi	r18, 0x01	; 1
    2180:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2182:	8f e1       	ldi	r24, 0x1F	; 31
    2184:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2186:	8a e0       	ldi	r24, 0x0A	; 10
    2188:	91 e2       	ldi	r25, 0x21	; 33
    218a:	42 d5       	rcall	.+2692   	; 0x2c10 <SYS_TimerStart>
    218c:	01 c1       	rjmp	.+514    	; 0x2390 <nwkRxTaskHandler+0x446>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    218e:	d4 01       	movw	r26, r8
    2190:	2d 91       	ld	r18, X+
    2192:	3c 91       	ld	r19, X
    2194:	f5 01       	movw	r30, r10
    2196:	87 85       	ldd	r24, Z+15	; 0x0f
    2198:	90 89       	ldd	r25, Z+16	; 0x10
    219a:	28 17       	cp	r18, r24
    219c:	39 07       	cpc	r19, r25
    219e:	81 f0       	breq	.+32     	; 0x21c0 <nwkRxTaskHandler+0x276>
        0 == header->nwkFcf.linkLocal)
    21a0:	43 85       	ldd	r20, Z+11	; 0x0b
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    21a2:	42 fd       	sbrc	r20, 2
    21a4:	0b c0       	rjmp	.+22     	; 0x21bc <nwkRxTaskHandler+0x272>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    21a6:	c5 01       	movw	r24, r10
    21a8:	e3 d1       	rcall	.+966    	; 0x2570 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    21aa:	d4 01       	movw	r26, r8
    21ac:	2d 91       	ld	r18, X+
    21ae:	3c 91       	ld	r19, X
    21b0:	f5 01       	movw	r30, r10
    21b2:	87 85       	ldd	r24, Z+15	; 0x0f
    21b4:	90 89       	ldd	r25, Z+16	; 0x10
    21b6:	28 17       	cp	r18, r24
    21b8:	39 07       	cpc	r19, r25
    21ba:	11 f0       	breq	.+4      	; 0x21c0 <nwkRxTaskHandler+0x276>
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	21 f4       	brne	.+8      	; 0x21c8 <nwkRxTaskHandler+0x27e>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    21c0:	e2 e2       	ldi	r30, 0x22	; 34
    21c2:	d5 01       	movw	r26, r10
    21c4:	ec 93       	st	X, r30
    21c6:	dd c0       	rjmp	.+442    	; 0x2382 <nwkRxTaskHandler+0x438>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    21c8:	d5 01       	movw	r26, r10
    21ca:	17 96       	adiw	r26, 0x07	; 7
    21cc:	8d 91       	ld	r24, X+
    21ce:	9c 91       	ld	r25, X
    21d0:	18 97       	sbiw	r26, 0x08	; 8
    21d2:	28 17       	cp	r18, r24
    21d4:	39 07       	cpc	r19, r25
    21d6:	09 f0       	breq	.+2      	; 0x21da <nwkRxTaskHandler+0x290>
    21d8:	d4 c0       	rjmp	.+424    	; 0x2382 <nwkRxTaskHandler+0x438>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    21da:	83 e2       	ldi	r24, 0x23	; 35
    21dc:	8c 93       	st	X, r24
    21de:	d1 c0       	rjmp	.+418    	; 0x2382 <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    21e0:	10 92 17 21 	sts	0x2117, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    21e4:	f5 01       	movw	r30, r10
    21e6:	21 89       	ldd	r18, Z+17	; 0x11
    21e8:	22 95       	swap	r18
    21ea:	2f 70       	andi	r18, 0x0F	; 15
    21ec:	e2 2f       	mov	r30, r18
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	ee 0f       	add	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	e1 58       	subi	r30, 0x81	; 129
    21f6:	fc 4d       	sbci	r31, 0xDC	; 220
    21f8:	01 90       	ld	r0, Z+
    21fa:	f0 81       	ld	r31, Z
    21fc:	e0 2d       	mov	r30, r0
    21fe:	30 97       	sbiw	r30, 0x00	; 0
    2200:	09 f4       	brne	.+2      	; 0x2204 <nwkRxTaskHandler+0x2ba>
    2202:	63 c0       	rjmp	.+198    	; 0x22ca <nwkRxTaskHandler+0x380>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    2204:	d5 01       	movw	r26, r10
    2206:	1d 96       	adiw	r26, 0x0d	; 13
    2208:	8d 91       	ld	r24, X+
    220a:	9c 91       	ld	r25, X
    220c:	1e 97       	sbiw	r26, 0x0e	; 14
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    2212:	1f 96       	adiw	r26, 0x0f	; 15
    2214:	4d 91       	ld	r20, X+
    2216:	5c 91       	ld	r21, X
    2218:	50 97       	sbiw	r26, 0x10	; 16
    221a:	5c 83       	std	Y+4, r21	; 0x04
    221c:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    221e:	51 96       	adiw	r26, 0x11	; 17
    2220:	3c 91       	ld	r19, X
    2222:	51 97       	sbiw	r26, 0x11	; 17
    2224:	3f 70       	andi	r19, 0x0F	; 15
    2226:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    2228:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
    222a:	af 57       	subi	r26, 0x7F	; 127
    222c:	bf 4f       	sbci	r27, 0xFF	; 255
    222e:	6d 91       	ld	r22, X+
    2230:	7c 91       	ld	r23, X
    2232:	79 87       	std	Y+9, r23	; 0x09
    2234:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    2236:	95 01       	movw	r18, r10
    2238:	2e 5f       	subi	r18, 0xFE	; 254
    223a:	3f 4f       	sbci	r19, 0xFF	; 255
    223c:	26 1b       	sub	r18, r22
    223e:	37 0b       	sbc	r19, r23
    2240:	d5 01       	movw	r26, r10
    2242:	11 96       	adiw	r26, 0x01	; 1
    2244:	3c 91       	ld	r19, X
    2246:	11 97       	sbiw	r26, 0x01	; 1
    2248:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
    224a:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
    224c:	ad 57       	subi	r26, 0x7D	; 125
    224e:	bf 4f       	sbci	r27, 0xFF	; 255
    2250:	2c 91       	ld	r18, X
    2252:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	2c 91       	ld	r18, X
    2258:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    225a:	d5 01       	movw	r26, r10
    225c:	1b 96       	adiw	r26, 0x0b	; 11
    225e:	2c 91       	ld	r18, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2260:	62 2f       	mov	r22, r18
    2262:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2264:	22 fd       	sbrc	r18, 2
    2266:	02 c0       	rjmp	.+4      	; 0x226c <nwkRxTaskHandler+0x322>
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	01 c0       	rjmp	.+2      	; 0x226e <nwkRxTaskHandler+0x324>
    226c:	30 e2       	ldi	r19, 0x20	; 32
    226e:	63 2b       	or	r22, r19
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2270:	23 fd       	sbrc	r18, 3
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <nwkRxTaskHandler+0x32e>
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	01 c0       	rjmp	.+2      	; 0x227a <nwkRxTaskHandler+0x330>
    2278:	30 e4       	ldi	r19, 0x40	; 64
    227a:	26 2f       	mov	r18, r22
    227c:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    227e:	4f 3f       	cpi	r20, 0xFF	; 255
    2280:	5f 4f       	sbci	r21, 0xFF	; 255
    2282:	11 f0       	breq	.+4      	; 0x2288 <nwkRxTaskHandler+0x33e>
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	01 c0       	rjmp	.+2      	; 0x228a <nwkRxTaskHandler+0x340>
    2288:	34 e0       	ldi	r19, 0x04	; 4
    228a:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    228c:	d5 01       	movw	r26, r10
    228e:	19 96       	adiw	r26, 0x09	; 9
    2290:	4d 91       	ld	r20, X+
    2292:	5c 91       	ld	r21, X
    2294:	1a 97       	sbiw	r26, 0x0a	; 10
    2296:	84 17       	cp	r24, r20
    2298:	95 07       	cpc	r25, r21
    229a:	11 f0       	breq	.+4      	; 0x22a0 <nwkRxTaskHandler+0x356>
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <nwkRxTaskHandler+0x358>
    22a0:	98 e0       	ldi	r25, 0x08	; 8
    22a2:	82 2f       	mov	r24, r18
    22a4:	89 2b       	or	r24, r25
    22a6:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    22a8:	d5 01       	movw	r26, r10
    22aa:	15 96       	adiw	r26, 0x05	; 5
    22ac:	2d 91       	ld	r18, X+
    22ae:	3c 91       	ld	r19, X
    22b0:	16 97       	sbiw	r26, 0x06	; 6
    22b2:	2f 3f       	cpi	r18, 0xFF	; 255
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	11 f0       	breq	.+4      	; 0x22bc <nwkRxTaskHandler+0x372>
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <nwkRxTaskHandler+0x374>
    22bc:	9c 2d       	mov	r25, r12
    22be:	89 2b       	or	r24, r25
    22c0:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    22c2:	ce 01       	movw	r24, r28
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	19 95       	eicall
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <nwkRxTaskHandler+0x382>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    22ca:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    22cc:	f5 01       	movw	r30, r10
    22ce:	93 85       	ldd	r25, Z+11	; 0x0b
    22d0:	90 ff       	sbrs	r25, 0
    ack = false;
    22d2:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    22d4:	d5 01       	movw	r26, r10
    22d6:	17 96       	adiw	r26, 0x07	; 7
    22d8:	2d 91       	ld	r18, X+
    22da:	3c 91       	ld	r19, X
    22dc:	18 97       	sbiw	r26, 0x08	; 8
    22de:	2f 3f       	cpi	r18, 0xFF	; 255
    22e0:	3f 4f       	sbci	r19, 0xFF	; 255
    22e2:	69 f4       	brne	.+26     	; 0x22fe <nwkRxTaskHandler+0x3b4>
    22e4:	f4 01       	movw	r30, r8
    22e6:	40 81       	ld	r20, Z
    22e8:	51 81       	ldd	r21, Z+1	; 0x01
    22ea:	d5 01       	movw	r26, r10
    22ec:	1f 96       	adiw	r26, 0x0f	; 15
    22ee:	2d 91       	ld	r18, X+
    22f0:	3c 91       	ld	r19, X
    22f2:	50 97       	sbiw	r26, 0x10	; 16
    22f4:	42 17       	cp	r20, r18
    22f6:	53 07       	cpc	r21, r19
    22f8:	11 f4       	brne	.+4      	; 0x22fe <nwkRxTaskHandler+0x3b4>
      nwkIb.addr == frame->header.nwkDstAddr &&
    22fa:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    22fc:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    22fe:	f5 01       	movw	r30, r10
    2300:	25 81       	ldd	r18, Z+5	; 0x05
    2302:	36 81       	ldd	r19, Z+6	; 0x06
    2304:	2f 3f       	cpi	r18, 0xFF	; 255
    2306:	3f 4f       	sbci	r19, 0xFF	; 255
    2308:	a1 f1       	breq	.+104    	; 0x2372 <nwkRxTaskHandler+0x428>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    230a:	d4 01       	movw	r26, r8
    230c:	2d 91       	ld	r18, X+
    230e:	3c 91       	ld	r19, X
    2310:	2f 3f       	cpi	r18, 0xFF	; 255
    2312:	3f 4f       	sbci	r19, 0xFF	; 255
    2314:	71 f1       	breq	.+92     	; 0x2372 <nwkRxTaskHandler+0x428>
    ack = false;

  if (ack)
    2316:	88 23       	and	r24, r24
    2318:	61 f1       	breq	.+88     	; 0x2372 <nwkRxTaskHandler+0x428>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    231a:	83 db       	rcall	.-2298   	; 0x1a22 <nwkFrameAlloc>
    231c:	8c 01       	movw	r16, r24
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	41 f1       	breq	.+80     	; 0x2372 <nwkRxTaskHandler+0x428>
    return;

  nwkFrameCommandInit(ack);
    2322:	e4 db       	rcall	.-2104   	; 0x1aec <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    2324:	f8 01       	movw	r30, r16
    2326:	81 81       	ldd	r24, Z+1	; 0x01
    2328:	8d 5f       	subi	r24, 0xFD	; 253
    232a:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    232c:	e9 57       	subi	r30, 0x79	; 121
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	11 82       	std	Z+1, r1	; 0x01
    2332:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2334:	d5 01       	movw	r26, r10
    2336:	1b 96       	adiw	r26, 0x0b	; 11
    2338:	8c 91       	ld	r24, X
    233a:	1b 97       	sbiw	r26, 0x0b	; 11
    233c:	86 95       	lsr	r24
    233e:	81 70       	andi	r24, 0x01	; 1
    2340:	f8 01       	movw	r30, r16
    2342:	93 85       	ldd	r25, Z+11	; 0x0b
    2344:	80 fb       	bst	r24, 0
    2346:	91 f9       	bld	r25, 1
    2348:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    234a:	1d 96       	adiw	r26, 0x0d	; 13
    234c:	8d 91       	ld	r24, X+
    234e:	9c 91       	ld	r25, X
    2350:	1e 97       	sbiw	r26, 0x0e	; 14
    2352:	90 8b       	std	Z+16, r25	; 0x10
    2354:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    2356:	ef 57       	subi	r30, 0x7F	; 127
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	01 90       	ld	r0, Z+
    235c:	f0 81       	ld	r31, Z
    235e:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    2360:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    2362:	80 91 17 21 	lds	r24, 0x2117
    2366:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    2368:	1c 96       	adiw	r26, 0x0c	; 12
    236a:	8c 91       	ld	r24, X
    236c:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    236e:	c8 01       	movw	r24, r16
    2370:	b0 d0       	rcall	.+352    	; 0x24d2 <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    2372:	d5 01       	movw	r26, r10
    2374:	dc 92       	st	X, r13
    2376:	05 c0       	rjmp	.+10     	; 0x2382 <nwkRxTaskHandler+0x438>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    2378:	c5 01       	movw	r24, r10
    237a:	14 dd       	rcall	.-1496   	; 0x1da4 <nwkRouteFrame>
      } break;
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <nwkRxTaskHandler+0x438>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    237e:	c5 01       	movw	r24, r10
    2380:	89 db       	rcall	.-2286   	; 0x1a94 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2382:	c5 01       	movw	r24, r10
    2384:	91 db       	rcall	.-2270   	; 0x1aa8 <nwkFrameNext>
    2386:	5c 01       	movw	r10, r24
    2388:	89 2b       	or	r24, r25
    238a:	09 f0       	breq	.+2      	; 0x238e <nwkRxTaskHandler+0x444>
    238c:	1d ce       	rjmp	.-966    	; 0x1fc8 <nwkRxTaskHandler+0x7e>
    238e:	07 c0       	rjmp	.+14     	; 0x239e <nwkRxTaskHandler+0x454>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    2390:	f5 01       	movw	r30, r10
    2392:	87 81       	ldd	r24, Z+7	; 0x07
    2394:	90 85       	ldd	r25, Z+8	; 0x08
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	09 f0       	breq	.+2      	; 0x239c <nwkRxTaskHandler+0x452>
    239a:	07 cf       	rjmp	.-498    	; 0x21aa <nwkRxTaskHandler+0x260>
    239c:	f8 ce       	rjmp	.-528    	; 0x218e <nwkRxTaskHandler+0x244>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    239e:	2e 96       	adiw	r28, 0x0e	; 14
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	ff 90       	pop	r15
    23b4:	ef 90       	pop	r14
    23b6:	df 90       	pop	r13
    23b8:	cf 90       	pop	r12
    23ba:	bf 90       	pop	r11
    23bc:	af 90       	pop	r10
    23be:	9f 90       	pop	r9
    23c0:	8f 90       	pop	r8
    23c2:	7f 90       	pop	r7
    23c4:	6f 90       	pop	r6
    23c6:	5f 90       	pop	r5
    23c8:	4f 90       	pop	r4
    23ca:	3f 90       	pop	r3
    23cc:	2f 90       	pop	r2
    23ce:	08 95       	ret

000023d0 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    23d0:	ef 92       	push	r14
    23d2:	ff 92       	push	r15
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	cf 93       	push	r28
    23da:	7c 01       	movw	r14, r24
    23dc:	10 e0       	ldi	r17, 0x00	; 0
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	01 e0       	ldi	r16, 0x01	; 1
    23e4:	c3 e1       	ldi	r28, 0x13	; 19
    23e6:	13 c0       	rjmp	.+38     	; 0x240e <nwkTxDelayTimerHandler+0x3e>
    23e8:	fc 01       	movw	r30, r24
    23ea:	20 81       	ld	r18, Z
    23ec:	21 31       	cpi	r18, 0x11	; 17
    23ee:	79 f4       	brne	.+30     	; 0x240e <nwkTxDelayTimerHandler+0x3e>
    23f0:	ec 57       	subi	r30, 0x7C	; 124
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	20 81       	ld	r18, Z
    23f6:	31 81       	ldd	r19, Z+1	; 0x01
    23f8:	21 50       	subi	r18, 0x01	; 1
    23fa:	31 09       	sbc	r19, r1
    23fc:	31 83       	std	Z+1, r19	; 0x01
    23fe:	20 83       	st	Z, r18
    2400:	23 2b       	or	r18, r19
    2402:	21 f4       	brne	.+8      	; 0x240c <nwkTxDelayTimerHandler+0x3c>
    2404:	fc 01       	movw	r30, r24
    2406:	c0 83       	st	Z, r28
    2408:	10 2f       	mov	r17, r16
    240a:	01 c0       	rjmp	.+2      	; 0x240e <nwkTxDelayTimerHandler+0x3e>
    240c:	10 2f       	mov	r17, r16
    240e:	4c db       	rcall	.-2408   	; 0x1aa8 <nwkFrameNext>
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	51 f7       	brne	.-44     	; 0x23e8 <nwkTxDelayTimerHandler+0x18>
    2414:	11 23       	and	r17, r17
    2416:	11 f0       	breq	.+4      	; 0x241c <nwkTxDelayTimerHandler+0x4c>
    2418:	c7 01       	movw	r24, r14
    241a:	fa d3       	rcall	.+2036   	; 0x2c10 <SYS_TimerStart>
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	08 95       	ret

00002428 <nwkTxAckWaitTimerHandler>:
    2428:	ef 92       	push	r14
    242a:	ff 92       	push	r15
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	7c 01       	movw	r14, r24
    2436:	10 e0       	ldi	r17, 0x00	; 0
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	01 e0       	ldi	r16, 0x01	; 1
    243e:	d7 e1       	ldi	r29, 0x17	; 23
    2440:	c0 e1       	ldi	r28, 0x10	; 16
    2442:	16 c0       	rjmp	.+44     	; 0x2470 <nwkTxAckWaitTimerHandler+0x48>
    2444:	fc 01       	movw	r30, r24
    2446:	20 81       	ld	r18, Z
    2448:	26 31       	cpi	r18, 0x16	; 22
    244a:	91 f4       	brne	.+36     	; 0x2470 <nwkTxAckWaitTimerHandler+0x48>
    244c:	ec 57       	subi	r30, 0x7C	; 124
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	20 81       	ld	r18, Z
    2452:	31 81       	ldd	r19, Z+1	; 0x01
    2454:	21 50       	subi	r18, 0x01	; 1
    2456:	31 09       	sbc	r19, r1
    2458:	31 83       	std	Z+1, r19	; 0x01
    245a:	20 83       	st	Z, r18
    245c:	23 2b       	or	r18, r19
    245e:	39 f4       	brne	.+14     	; 0x246e <nwkTxAckWaitTimerHandler+0x46>
    2460:	fc 01       	movw	r30, r24
    2462:	d0 83       	st	Z, r29
    2464:	ed 57       	subi	r30, 0x7D	; 125
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	c0 83       	st	Z, r28
    246a:	10 2f       	mov	r17, r16
    246c:	01 c0       	rjmp	.+2      	; 0x2470 <nwkTxAckWaitTimerHandler+0x48>
    246e:	10 2f       	mov	r17, r16
    2470:	1b db       	rcall	.-2506   	; 0x1aa8 <nwkFrameNext>
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	39 f7       	brne	.-50     	; 0x2444 <nwkTxAckWaitTimerHandler+0x1c>
    2476:	11 23       	and	r17, r17
    2478:	11 f0       	breq	.+4      	; 0x247e <nwkTxAckWaitTimerHandler+0x56>
    247a:	c7 01       	movw	r24, r14
    247c:	c9 d3       	rcall	.+1938   	; 0x2c10 <SYS_TimerStart>
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	08 95       	ret

0000248c <nwkTxInit>:
    248c:	10 92 65 21 	sts	0x2165, r1
    2490:	10 92 64 21 	sts	0x2164, r1
    2494:	e7 e5       	ldi	r30, 0x57	; 87
    2496:	f1 e2       	ldi	r31, 0x21	; 33
    2498:	82 e3       	ldi	r24, 0x32	; 50
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 e0       	ldi	r26, 0x00	; 0
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	86 83       	std	Z+6, r24	; 0x06
    24a2:	97 83       	std	Z+7, r25	; 0x07
    24a4:	a0 87       	std	Z+8, r26	; 0x08
    24a6:	b1 87       	std	Z+9, r27	; 0x09
    24a8:	12 86       	std	Z+10, r1	; 0x0a
    24aa:	84 e1       	ldi	r24, 0x14	; 20
    24ac:	92 e1       	ldi	r25, 0x12	; 18
    24ae:	94 87       	std	Z+12, r25	; 0x0c
    24b0:	83 87       	std	Z+11, r24	; 0x0b
    24b2:	ea e4       	ldi	r30, 0x4A	; 74
    24b4:	f1 e2       	ldi	r31, 0x21	; 33
    24b6:	8a e0       	ldi	r24, 0x0A	; 10
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	a0 e0       	ldi	r26, 0x00	; 0
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	86 83       	std	Z+6, r24	; 0x06
    24c0:	97 83       	std	Z+7, r25	; 0x07
    24c2:	a0 87       	std	Z+8, r26	; 0x08
    24c4:	b1 87       	std	Z+9, r27	; 0x09
    24c6:	12 86       	std	Z+10, r1	; 0x0a
    24c8:	88 ee       	ldi	r24, 0xE8	; 232
    24ca:	91 e1       	ldi	r25, 0x11	; 17
    24cc:	94 87       	std	Z+12, r25	; 0x0c
    24ce:	83 87       	std	Z+11, r24	; 0x0b
    24d0:	08 95       	ret

000024d2 <nwkTxFrame>:
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	ec 01       	movw	r28, r24
    24d8:	fc 01       	movw	r30, r24
    24da:	ea 57       	subi	r30, 0x7A	; 122
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 81       	ld	r24, Z
    24e0:	81 ff       	sbrs	r24, 1
    24e2:	03 c0       	rjmp	.+6      	; 0x24ea <nwkTxFrame+0x18>
    24e4:	92 e1       	ldi	r25, 0x12	; 18
    24e6:	98 83       	st	Y, r25
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <nwkTxFrame+0x1c>
    24ea:	92 e1       	ldi	r25, 0x12	; 18
    24ec:	98 83       	st	Y, r25
    24ee:	fe 01       	movw	r30, r28
    24f0:	ed 57       	subi	r30, 0x7D	; 125
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	10 82       	st	Z, r1
    24f6:	80 ff       	sbrs	r24, 0
    24f8:	05 c0       	rjmp	.+10     	; 0x2504 <nwkTxFrame+0x32>
    24fa:	2f ef       	ldi	r18, 0xFF	; 255
    24fc:	3f ef       	ldi	r19, 0xFF	; 255
    24fe:	3e 83       	std	Y+6, r19	; 0x06
    2500:	2d 83       	std	Y+5, r18	; 0x05
    2502:	06 c0       	rjmp	.+12     	; 0x2510 <nwkTxFrame+0x3e>
    2504:	20 91 7b 23 	lds	r18, 0x237B
    2508:	30 91 7c 23 	lds	r19, 0x237C
    250c:	3e 83       	std	Y+6, r19	; 0x06
    250e:	2d 83       	std	Y+5, r18	; 0x05
    2510:	85 70       	andi	r24, 0x05	; 5
    2512:	19 f4       	brne	.+6      	; 0x251a <nwkTxFrame+0x48>
    2514:	ce 01       	movw	r24, r28
    2516:	27 dc       	rcall	.-1970   	; 0x1d66 <nwkRoutePrepareTx>
    2518:	04 c0       	rjmp	.+8      	; 0x2522 <nwkTxFrame+0x50>
    251a:	8f 85       	ldd	r24, Y+15	; 0x0f
    251c:	98 89       	ldd	r25, Y+16	; 0x10
    251e:	98 87       	std	Y+8, r25	; 0x08
    2520:	8f 83       	std	Y+7, r24	; 0x07
    2522:	e9 e7       	ldi	r30, 0x79	; 121
    2524:	f3 e2       	ldi	r31, 0x23	; 35
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	9a 87       	std	Y+10, r25	; 0x0a
    252c:	89 87       	std	Y+9, r24	; 0x09
    252e:	85 81       	ldd	r24, Z+5	; 0x05
    2530:	8f 5f       	subi	r24, 0xFF	; 255
    2532:	85 83       	std	Z+5, r24	; 0x05
    2534:	8c 83       	std	Y+4, r24	; 0x04
    2536:	8f 81       	ldd	r24, Y+7	; 0x07
    2538:	98 85       	ldd	r25, Y+8	; 0x08
    253a:	01 96       	adiw	r24, 0x01	; 1
    253c:	71 f4       	brne	.+28     	; 0x255a <nwkTxFrame+0x88>
    253e:	81 e4       	ldi	r24, 0x41	; 65
    2540:	98 e8       	ldi	r25, 0x88	; 136
    2542:	9b 83       	std	Y+3, r25	; 0x03
    2544:	8a 83       	std	Y+2, r24	; 0x02
    2546:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <rand>
    254a:	cc 57       	subi	r28, 0x7C	; 124
    254c:	df 4f       	sbci	r29, 0xFF	; 255
    254e:	87 70       	andi	r24, 0x07	; 7
    2550:	99 27       	eor	r25, r25
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	99 83       	std	Y+1, r25	; 0x01
    2556:	88 83       	st	Y, r24
    2558:	08 c0       	rjmp	.+16     	; 0x256a <nwkTxFrame+0x98>
    255a:	81 e6       	ldi	r24, 0x61	; 97
    255c:	98 e8       	ldi	r25, 0x88	; 136
    255e:	9b 83       	std	Y+3, r25	; 0x03
    2560:	8a 83       	std	Y+2, r24	; 0x02
    2562:	cc 57       	subi	r28, 0x7C	; 124
    2564:	df 4f       	sbci	r29, 0xFF	; 255
    2566:	19 82       	std	Y+1, r1	; 0x01
    2568:	18 82       	st	Y, r1
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	08 95       	ret

00002570 <nwkTxBroadcastFrame>:
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	8c 01       	movw	r16, r24
    257a:	53 da       	rcall	.-2906   	; 0x1a22 <nwkFrameAlloc>
    257c:	ec 01       	movw	r28, r24
    257e:	89 2b       	or	r24, r25
    2580:	b9 f1       	breq	.+110    	; 0x25f0 <nwkTxBroadcastFrame+0x80>
    2582:	82 e1       	ldi	r24, 0x12	; 18
    2584:	88 83       	st	Y, r24
    2586:	f8 01       	movw	r30, r16
    2588:	81 81       	ldd	r24, Z+1	; 0x01
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	fe 01       	movw	r30, r28
    258e:	ed 57       	subi	r30, 0x7D	; 125
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	10 82       	st	Z, r1
    2594:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <rand>
    2598:	fe 01       	movw	r30, r28
    259a:	ec 57       	subi	r30, 0x7C	; 124
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	87 70       	andi	r24, 0x07	; 7
    25a0:	99 27       	eor	r25, r25
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	80 83       	st	Z, r24
    25a8:	33 96       	adiw	r30, 0x03	; 3
    25aa:	11 82       	std	Z+1, r1	; 0x01
    25ac:	10 82       	st	Z, r1
    25ae:	f8 01       	movw	r30, r16
    25b0:	41 81       	ldd	r20, Z+1	; 0x01
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	b8 01       	movw	r22, r16
    25b6:	6e 5f       	subi	r22, 0xFE	; 254
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	ce 01       	movw	r24, r28
    25bc:	02 96       	adiw	r24, 0x02	; 2
    25be:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <memcpy>
    25c2:	81 e4       	ldi	r24, 0x41	; 65
    25c4:	98 e8       	ldi	r25, 0x88	; 136
    25c6:	9b 83       	std	Y+3, r25	; 0x03
    25c8:	8a 83       	std	Y+2, r24	; 0x02
    25ca:	8f ef       	ldi	r24, 0xFF	; 255
    25cc:	9f ef       	ldi	r25, 0xFF	; 255
    25ce:	98 87       	std	Y+8, r25	; 0x08
    25d0:	8f 83       	std	Y+7, r24	; 0x07
    25d2:	f8 01       	movw	r30, r16
    25d4:	85 81       	ldd	r24, Z+5	; 0x05
    25d6:	96 81       	ldd	r25, Z+6	; 0x06
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	e9 e7       	ldi	r30, 0x79	; 121
    25de:	f3 e2       	ldi	r31, 0x23	; 35
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	9a 87       	std	Y+10, r25	; 0x0a
    25e6:	89 87       	std	Y+9, r24	; 0x09
    25e8:	85 81       	ldd	r24, Z+5	; 0x05
    25ea:	8f 5f       	subi	r24, 0xFF	; 255
    25ec:	85 83       	std	Z+5, r24	; 0x05
    25ee:	8c 83       	std	Y+4, r24	; 0x04
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	08 95       	ret

000025fa <nwkTxAckReceived>:
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	fc 01       	movw	r30, r24
    2600:	c7 81       	ldd	r28, Z+7	; 0x07
    2602:	d0 85       	ldd	r29, Z+8	; 0x08
    2604:	81 85       	ldd	r24, Z+9	; 0x09
    2606:	83 30       	cpi	r24, 0x03	; 3
    2608:	c1 f4       	brne	.+48     	; 0x263a <nwkTxAckReceived+0x40>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	10 c0       	rjmp	.+32     	; 0x2630 <nwkTxAckReceived+0x36>
    2610:	fc 01       	movw	r30, r24
    2612:	20 81       	ld	r18, Z
    2614:	26 31       	cpi	r18, 0x16	; 22
    2616:	61 f4       	brne	.+24     	; 0x2630 <nwkTxAckReceived+0x36>
    2618:	34 85       	ldd	r19, Z+12	; 0x0c
    261a:	29 81       	ldd	r18, Y+1	; 0x01
    261c:	32 13       	cpse	r19, r18
    261e:	08 c0       	rjmp	.+16     	; 0x2630 <nwkTxAckReceived+0x36>
    2620:	27 e1       	ldi	r18, 0x17	; 23
    2622:	20 83       	st	Z, r18
    2624:	2a 81       	ldd	r18, Y+2	; 0x02
    2626:	ea 57       	subi	r30, 0x7A	; 122
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	20 83       	st	Z, r18
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	06 c0       	rjmp	.+12     	; 0x263c <nwkTxAckReceived+0x42>
    2630:	3b da       	rcall	.-2954   	; 0x1aa8 <nwkFrameNext>
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	69 f7       	brne	.-38     	; 0x2610 <nwkTxAckReceived+0x16>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	01 c0       	rjmp	.+2      	; 0x263c <nwkTxAckReceived+0x42>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	08 95       	ret

00002642 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2642:	e0 91 64 21 	lds	r30, 0x2164
    2646:	f0 91 65 21 	lds	r31, 0x2165

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	21 f0       	breq	.+8      	; 0x2656 <PHY_DataConf+0x14>
    264e:	48 f0       	brcs	.+18     	; 0x2662 <PHY_DataConf+0x20>
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	19 f0       	breq	.+6      	; 0x265a <PHY_DataConf+0x18>
    2654:	04 c0       	rjmp	.+8      	; 0x265e <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    2656:	80 e2       	ldi	r24, 0x20	; 32
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    265a:	81 e2       	ldi	r24, 0x21	; 33
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    2662:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2664:	df 01       	movw	r26, r30
    2666:	ad 57       	subi	r26, 0x7D	; 125
    2668:	bf 4f       	sbci	r27, 0xFF	; 255
    266a:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    266c:	85 e1       	ldi	r24, 0x15	; 21
    266e:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    2670:	10 92 65 21 	sts	0x2165, r1
    2674:	10 92 64 21 	sts	0x2164, r1
  nwkIb.lock--;
    2678:	e9 e7       	ldi	r30, 0x79	; 121
    267a:	f3 e2       	ldi	r31, 0x23	; 35
    267c:	86 a1       	ldd	r24, Z+38	; 0x26
    267e:	97 a1       	ldd	r25, Z+39	; 0x27
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	97 a3       	std	Z+39, r25	; 0x27
    2684:	86 a3       	std	Z+38, r24	; 0x26
    2686:	08 95       	ret

00002688 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    2688:	9f 92       	push	r9
    268a:	af 92       	push	r10
    268c:	bf 92       	push	r11
    268e:	cf 92       	push	r12
    2690:	df 92       	push	r13
    2692:	ef 92       	push	r14
    2694:	ff 92       	push	r15
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    269e:	c0 e0       	ldi	r28, 0x00	; 0
    26a0:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    26a2:	0f 2e       	mov	r0, r31
    26a4:	f4 e1       	ldi	r31, 0x14	; 20
    26a6:	af 2e       	mov	r10, r31
    26a8:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    26aa:	09 e7       	ldi	r16, 0x79	; 121
    26ac:	13 e2       	ldi	r17, 0x23	; 35
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    26ae:	0f 2e       	mov	r0, r31
    26b0:	f7 e1       	ldi	r31, 0x17	; 23
    26b2:	df 2e       	mov	r13, r31
    26b4:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    26b6:	0f 2e       	mov	r0, r31
    26b8:	f6 e1       	ldi	r31, 0x16	; 22
    26ba:	9f 2e       	mov	r9, r31
    26bc:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    26be:	0f 2e       	mov	r0, r31
    26c0:	f5 e1       	ldi	r31, 0x15	; 21
    26c2:	ef 2e       	mov	r14, r31
    26c4:	f1 2c       	mov	r15, r1
    26c6:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    26c8:	0f 2e       	mov	r0, r31
    26ca:	f3 e1       	ldi	r31, 0x13	; 19
    26cc:	cf 2e       	mov	r12, r31
    26ce:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    26d0:	0f 2e       	mov	r0, r31
    26d2:	f1 e1       	ldi	r31, 0x11	; 17
    26d4:	bf 2e       	mov	r11, r31
    26d6:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    26d8:	60 c0       	rjmp	.+192    	; 0x279a <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    26da:	88 81       	ld	r24, Y
    26dc:	83 31       	cpi	r24, 0x13	; 19
    26de:	c1 f0       	breq	.+48     	; 0x2710 <nwkTxTaskHandler+0x88>
    26e0:	18 f4       	brcc	.+6      	; 0x26e8 <nwkTxTaskHandler+0x60>
    26e2:	82 31       	cpi	r24, 0x12	; 18
    26e4:	39 f0       	breq	.+14     	; 0x26f4 <nwkTxTaskHandler+0x6c>
    26e6:	59 c0       	rjmp	.+178    	; 0x279a <nwkTxTaskHandler+0x112>
    26e8:	85 31       	cpi	r24, 0x15	; 21
    26ea:	49 f1       	breq	.+82     	; 0x273e <nwkTxTaskHandler+0xb6>
    26ec:	87 31       	cpi	r24, 0x17	; 23
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <nwkTxTaskHandler+0x6a>
    26f0:	45 c0       	rjmp	.+138    	; 0x277c <nwkTxTaskHandler+0xf4>
    26f2:	53 c0       	rjmp	.+166    	; 0x279a <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    26f4:	fe 01       	movw	r30, r28
    26f6:	ec 57       	subi	r30, 0x7C	; 124
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	89 2b       	or	r24, r25
    2700:	29 f0       	breq	.+10     	; 0x270c <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2702:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    2704:	8a e4       	ldi	r24, 0x4A	; 74
    2706:	91 e2       	ldi	r25, 0x21	; 33
    2708:	83 d2       	rcall	.+1286   	; 0x2c10 <SYS_TimerStart>
    270a:	47 c0       	rjmp	.+142    	; 0x279a <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    270c:	c8 82       	st	Y, r12
    270e:	45 c0       	rjmp	.+138    	; 0x279a <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    2710:	80 91 64 21 	lds	r24, 0x2164
    2714:	90 91 65 21 	lds	r25, 0x2165
    2718:	89 2b       	or	r24, r25
    271a:	09 f0       	breq	.+2      	; 0x271e <nwkTxTaskHandler+0x96>
    271c:	3e c0       	rjmp	.+124    	; 0x279a <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    271e:	d0 93 65 21 	sts	0x2165, r29
    2722:	c0 93 64 21 	sts	0x2164, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    2726:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    2728:	69 81       	ldd	r22, Y+1	; 0x01
    272a:	ce 01       	movw	r24, r28
    272c:	02 96       	adiw	r24, 0x02	; 2
    272e:	af d0       	rcall	.+350    	; 0x288e <PHY_DataReq>
          nwkIb.lock++;
    2730:	f8 01       	movw	r30, r16
    2732:	86 a1       	ldd	r24, Z+38	; 0x26
    2734:	97 a1       	ldd	r25, Z+39	; 0x27
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	97 a3       	std	Z+39, r25	; 0x27
    273a:	86 a3       	std	Z+38, r24	; 0x26
    273c:	2e c0       	rjmp	.+92     	; 0x279a <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    273e:	fe 01       	movw	r30, r28
    2740:	ed 57       	subi	r30, 0x7D	; 125
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	81 11       	cpse	r24, r1
    2748:	17 c0       	rjmp	.+46     	; 0x2778 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    274a:	2d 85       	ldd	r18, Y+13	; 0x0d
    274c:	3e 85       	ldd	r19, Y+14	; 0x0e
    274e:	f8 01       	movw	r30, r16
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	28 17       	cp	r18, r24
    2756:	39 07       	cpc	r19, r25
    2758:	69 f4       	brne	.+26     	; 0x2774 <nwkTxTaskHandler+0xec>
    275a:	8b 85       	ldd	r24, Y+11	; 0x0b
    275c:	80 ff       	sbrs	r24, 0
    275e:	0a c0       	rjmp	.+20     	; 0x2774 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    2760:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    2762:	fe 01       	movw	r30, r28
    2764:	ec 57       	subi	r30, 0x7C	; 124
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	f1 82       	std	Z+1, r15	; 0x01
    276a:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    276c:	87 e5       	ldi	r24, 0x57	; 87
    276e:	91 e2       	ldi	r25, 0x21	; 33
    2770:	4f d2       	rcall	.+1182   	; 0x2c10 <SYS_TimerStart>
    2772:	13 c0       	rjmp	.+38     	; 0x279a <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    2774:	d8 82       	st	Y, r13
    2776:	11 c0       	rjmp	.+34     	; 0x279a <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    2778:	d8 82       	st	Y, r13
    277a:	0f c0       	rjmp	.+30     	; 0x279a <nwkTxTaskHandler+0x112>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    277c:	ce 01       	movw	r24, r28
    277e:	ac da       	rcall	.-2728   	; 0x1cd8 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    2780:	fe 01       	movw	r30, r28
    2782:	e9 57       	subi	r30, 0x79	; 121
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	01 90       	ld	r0, Z+
    2788:	f0 81       	ld	r31, Z
    278a:	e0 2d       	mov	r30, r0
    278c:	30 97       	sbiw	r30, 0x00	; 0
    278e:	19 f4       	brne	.+6      	; 0x2796 <nwkTxTaskHandler+0x10e>
          nwkFrameFree(frame);
    2790:	ce 01       	movw	r24, r28
    2792:	80 d9       	rcall	.-3328   	; 0x1a94 <nwkFrameFree>
    2794:	02 c0       	rjmp	.+4      	; 0x279a <nwkTxTaskHandler+0x112>
        else
          frame->tx.confirm(frame);
    2796:	ce 01       	movw	r24, r28
    2798:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    279a:	ce 01       	movw	r24, r28
    279c:	85 d9       	rcall	.-3318   	; 0x1aa8 <nwkFrameNext>
    279e:	ec 01       	movw	r28, r24
    27a0:	89 2b       	or	r24, r25
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <nwkTxTaskHandler+0x11e>
    27a4:	9a cf       	rjmp	.-204    	; 0x26da <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	1f 91       	pop	r17
    27ac:	0f 91       	pop	r16
    27ae:	ff 90       	pop	r15
    27b0:	ef 90       	pop	r14
    27b2:	df 90       	pop	r13
    27b4:	cf 90       	pop	r12
    27b6:	bf 90       	pop	r11
    27b8:	af 90       	pop	r10
    27ba:	9f 90       	pop	r9
    27bc:	08 95       	ret

000027be <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    27be:	80 91 66 21 	lds	r24, 0x2166
    27c2:	98 2f       	mov	r25, r24
    27c4:	9f 70       	andi	r25, 0x0F	; 15
    27c6:	e4 e5       	ldi	r30, 0x54	; 84
    27c8:	f1 e0       	ldi	r31, 0x01	; 1
    27ca:	80 81       	ld	r24, Z
    27cc:	80 7f       	andi	r24, 0xF0	; 240
    27ce:	89 2b       	or	r24, r25
    27d0:	80 83       	st	Z, r24
    27d2:	80 91 66 21 	lds	r24, 0x2166
    27d6:	88 23       	and	r24, r24
    27d8:	29 f0       	breq	.+10     	; 0x27e4 <phySetChannel+0x26>
    27da:	80 91 67 21 	lds	r24, 0x2167
    27de:	80 93 53 01 	sts	0x0153, r24
    27e2:	08 95       	ret
    27e4:	80 91 67 21 	lds	r24, 0x2167
    27e8:	98 2f       	mov	r25, r24
    27ea:	9f 71       	andi	r25, 0x1F	; 31
    27ec:	e8 e4       	ldi	r30, 0x48	; 72
    27ee:	f1 e0       	ldi	r31, 0x01	; 1
    27f0:	80 81       	ld	r24, Z
    27f2:	80 7e       	andi	r24, 0xE0	; 224
    27f4:	89 2b       	or	r24, r25
    27f6:	80 83       	st	Z, r24
    27f8:	08 95       	ret

000027fa <phyTrxSetState>:
    27fa:	93 e0       	ldi	r25, 0x03	; 3
    27fc:	90 93 42 01 	sts	0x0142, r25
    2800:	e1 e4       	ldi	r30, 0x41	; 65
    2802:	f1 e0       	ldi	r31, 0x01	; 1
    2804:	90 81       	ld	r25, Z
    2806:	9f 71       	andi	r25, 0x1F	; 31
    2808:	98 30       	cpi	r25, 0x08	; 8
    280a:	e1 f7       	brne	.-8      	; 0x2804 <phyTrxSetState+0xa>
    280c:	80 93 42 01 	sts	0x0142, r24
    2810:	e1 e4       	ldi	r30, 0x41	; 65
    2812:	f1 e0       	ldi	r31, 0x01	; 1
    2814:	90 81       	ld	r25, Z
    2816:	9f 71       	andi	r25, 0x1F	; 31
    2818:	98 13       	cpse	r25, r24
    281a:	fc cf       	rjmp	.-8      	; 0x2814 <phyTrxSetState+0x1a>
    281c:	08 95       	ret

0000281e <phySetRxState>:
    281e:	88 e0       	ldi	r24, 0x08	; 8
    2820:	ec df       	rcall	.-40     	; 0x27fa <phyTrxSetState>
    2822:	8f ef       	ldi	r24, 0xFF	; 255
    2824:	80 93 4f 01 	sts	0x014F, r24
    2828:	80 91 68 21 	lds	r24, 0x2168
    282c:	88 23       	and	r24, r24
    282e:	11 f0       	breq	.+4      	; 0x2834 <phySetRxState+0x16>
    2830:	86 e1       	ldi	r24, 0x16	; 22
    2832:	e3 cf       	rjmp	.-58     	; 0x27fa <phyTrxSetState>
    2834:	08 95       	ret

00002836 <PHY_SetRxState>:
    2836:	80 93 68 21 	sts	0x2168, r24
    283a:	f1 cf       	rjmp	.-30     	; 0x281e <phySetRxState>
    283c:	08 95       	ret

0000283e <PHY_SetChannel>:
    283e:	80 93 67 21 	sts	0x2167, r24
    2842:	bd cf       	rjmp	.-134    	; 0x27be <phySetChannel>
    2844:	08 95       	ret

00002846 <PHY_SetPanId>:
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	1f 92       	push	r1
    284c:	1f 92       	push	r1
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
    2856:	80 93 62 01 	sts	0x0162, r24
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	80 93 63 01 	sts	0x0163, r24
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	08 95       	ret

0000286a <PHY_SetShortAddr>:
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	1f 92       	push	r1
    2870:	1f 92       	push	r1
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	80 93 60 01 	sts	0x0160, r24
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	80 93 61 01 	sts	0x0161, r24
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	08 95       	ret

0000288e <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	8c 01       	movw	r16, r24
    2896:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2898:	89 e1       	ldi	r24, 0x19	; 25
    289a:	af df       	rcall	.-162    	; 0x27fa <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    289c:	8f ef       	ldi	r24, 0xFF	; 255
    289e:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	8c 0f       	add	r24, r28
    28a6:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    28aa:	cc 23       	and	r28, r28
    28ac:	81 f0       	breq	.+32     	; 0x28ce <PHY_DataReq+0x40>
    28ae:	f8 01       	movw	r30, r16
    28b0:	c1 50       	subi	r28, 0x01	; 1
    28b2:	2c 2f       	mov	r18, r28
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	2f 5f       	subi	r18, 0xFF	; 255
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	c8 01       	movw	r24, r16
    28bc:	82 0f       	add	r24, r18
    28be:	93 1f       	adc	r25, r19
    28c0:	a1 e8       	ldi	r26, 0x81	; 129
    28c2:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    28c4:	21 91       	ld	r18, Z+
    28c6:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    28c8:	e8 17       	cp	r30, r24
    28ca:	f9 07       	cpc	r31, r25
    28cc:	d9 f7       	brne	.-10     	; 0x28c4 <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    28ce:	83 e0       	ldi	r24, 0x03	; 3
    28d0:	80 93 e9 21 	sts	0x21E9, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	80 93 42 01 	sts	0x0142, r24
}
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <PHY_RandomReq>:

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
  uint16_t rnd = 0;

  TRX_RPC_REG = 0x00;
    28ee:	10 92 56 01 	sts	0x0156, r1

  phyTrxSetState(TRX_CMD_RX_ON);
    28f2:	86 e0       	ldi	r24, 0x06	; 6
    28f4:	82 df       	rcall	.-252    	; 0x27fa <phyTrxSetState>
    28f6:	c0 e0       	ldi	r28, 0x00	; 0
    28f8:	d0 e0       	ldi	r29, 0x00	; 0
#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
  uint16_t rnd = 0;
    28fa:	e1 2c       	mov	r14, r1
    28fc:	f1 2c       	mov	r15, r1
  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    28fe:	06 e4       	ldi	r16, 0x46	; 70
    2900:	11 e0       	ldi	r17, 0x01	; 1

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	0e 94 9a 0b 	call	0x1734	; 0x1734 <HAL_Delay>
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    2908:	f8 01       	movw	r30, r16
    290a:	20 81       	ld	r18, Z
    290c:	22 95       	swap	r18
    290e:	26 95       	lsr	r18
    2910:	27 70       	andi	r18, 0x07	; 7
    2912:	23 70       	andi	r18, 0x03	; 3
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	0c 2e       	mov	r0, r28
    2918:	02 c0       	rjmp	.+4      	; 0x291e <PHY_RandomReq+0x3c>
    291a:	22 0f       	add	r18, r18
    291c:	33 1f       	adc	r19, r19
    291e:	0a 94       	dec	r0
    2920:	e2 f7       	brpl	.-8      	; 0x291a <PHY_RandomReq+0x38>
    2922:	e2 2a       	or	r14, r18
    2924:	f3 2a       	or	r15, r19
    2926:	22 96       	adiw	r28, 0x02	; 2

  TRX_RPC_REG = 0x00;

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
    2928:	c0 31       	cpi	r28, 0x10	; 16
    292a:	d1 05       	cpc	r29, r1
    292c:	51 f7       	brne	.-44     	; 0x2902 <PHY_RandomReq+0x20>
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
  }

  phyTrxSetState(TRX_CMD_TRX_OFF);
    292e:	88 e0       	ldi	r24, 0x08	; 8
    2930:	64 df       	rcall	.-312    	; 0x27fa <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    2932:	8b ee       	ldi	r24, 0xEB	; 235
    2934:	80 93 56 01 	sts	0x0156, r24

  phySetRxState();
    2938:	72 df       	rcall	.-284    	; 0x281e <phySetRxState>

  return rnd;
}
    293a:	c7 01       	movw	r24, r14
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	08 95       	ret

0000294a <PHY_Init>:
/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  //Rest transceiver
  TRXPR_REG_s.trxrst = 1;
    294a:	e9 e3       	ldi	r30, 0x39	; 57
    294c:	f1 e0       	ldi	r31, 0x01	; 1
    294e:	80 81       	ld	r24, Z
    2950:	81 60       	ori	r24, 0x01	; 1
    2952:	80 83       	st	Z, r24

  phyRxState = false;
    2954:	10 92 68 21 	sts	0x2168, r1
  phyBand = 0;
    2958:	10 92 66 21 	sts	0x2166, r1
  phyState = PHY_STATE_IDLE;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 93 e9 21 	sts	0x21E9, r24

  //off transceiver
  phyTrxSetState(TRX_CMD_TRX_OFF);
    2962:	88 e0       	ldi	r24, 0x08	; 8
    2964:	4a df       	rcall	.-364    	; 0x27fa <phyTrxSetState>
  //transceiver power reduction mode
  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    2966:	8b ee       	ldi	r24, 0xEB	; 235
    2968:	80 93 56 01 	sts	0x0156, r24
  //If this bit is set, the next received frame will be protected and not overwritten by following frames
  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    296c:	ec e4       	ldi	r30, 0x4C	; 76
    296e:	f1 e0       	ldi	r31, 0x01	; 1
    2970:	80 81       	ld	r24, Z
    2972:	80 68       	ori	r24, 0x80	; 128
    2974:	80 83       	st	Z, r24

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
    2976:	b5 df       	rcall	.-150    	; 0x28e2 <PHY_RandomReq>
    2978:	80 93 6d 01 	sts	0x016D, r24
    297c:	08 95       	ret

0000297e <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    297e:	1f 93       	push	r17
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	00 d0       	rcall	.+0      	; 0x2986 <PHY_TaskHandler+0x8>
    2986:	1f 92       	push	r1
    2988:	1f 92       	push	r1
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    298e:	80 91 e9 21 	lds	r24, 0x21E9
    2992:	82 30       	cpi	r24, 0x02	; 2
    2994:	09 f4       	brne	.+2      	; 0x2998 <PHY_TaskHandler+0x1a>
    2996:	65 c0       	rjmp	.+202    	; 0x2a62 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2998:	80 91 4f 01 	lds	r24, 0x014F
    299c:	83 ff       	sbrs	r24, 3
    299e:	3e c0       	rjmp	.+124    	; 0x2a1c <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    29a0:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    29a4:	6a 2f       	mov	r22, r26
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	ab 01       	movw	r20, r22
    29aa:	4f 5f       	subi	r20, 0xFF	; 255
    29ac:	5f 4f       	sbci	r21, 0xFF	; 255
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    29b4:	fc 01       	movw	r30, r24
    29b6:	e0 58       	subi	r30, 0x80	; 128
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ba:	30 81       	ld	r19, Z
    29bc:	fc 01       	movw	r30, r24
    29be:	e7 59       	subi	r30, 0x97	; 151
    29c0:	fe 4d       	sbci	r31, 0xDE	; 222
    29c2:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    29c4:	2f 5f       	subi	r18, 0xFF	; 255
    29c6:	82 2f       	mov	r24, r18
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	84 17       	cp	r24, r20
    29cc:	95 07       	cpc	r25, r21
    29ce:	94 f3       	brlt	.-28     	; 0x29b4 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    29d0:	89 e6       	ldi	r24, 0x69	; 105
    29d2:	91 e2       	ldi	r25, 0x21	; 33
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    29d8:	a2 50       	subi	r26, 0x02	; 2
    29da:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    29dc:	fb 01       	movw	r30, r22
    29de:	e7 59       	subi	r30, 0x97	; 151
    29e0:	fe 4d       	sbci	r31, 0xDE	; 222
    29e2:	80 81       	ld	r24, Z
    29e4:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    29e6:	80 91 47 01 	lds	r24, 0x0147
    29ea:	8a 55       	subi	r24, 0x5A	; 90
    29ec:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	80 da       	rcall	.-2816   	; 0x1ef4 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    29f4:	e1 e4       	ldi	r30, 0x41	; 65
    29f6:	f1 e0       	ldi	r31, 0x01	; 1
    29f8:	80 81       	ld	r24, Z
    29fa:	8f 71       	andi	r24, 0x1F	; 31
    29fc:	86 31       	cpi	r24, 0x16	; 22
    29fe:	e1 f7       	brne	.-8      	; 0x29f8 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    2a00:	ef e4       	ldi	r30, 0x4F	; 79
    2a02:	f1 e0       	ldi	r31, 0x01	; 1
    2a04:	80 81       	ld	r24, Z
    2a06:	88 60       	ori	r24, 0x08	; 8
    2a08:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    2a0a:	ec e4       	ldi	r30, 0x4C	; 76
    2a0c:	f1 e0       	ldi	r31, 0x01	; 1
    2a0e:	80 81       	ld	r24, Z
    2a10:	8f 77       	andi	r24, 0x7F	; 127
    2a12:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    2a14:	80 81       	ld	r24, Z
    2a16:	80 68       	ori	r24, 0x80	; 128
    2a18:	80 83       	st	Z, r24
    2a1a:	23 c0       	rjmp	.+70     	; 0x2a62 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    2a1c:	80 91 4f 01 	lds	r24, 0x014F
    2a20:	86 ff       	sbrs	r24, 6
    2a22:	1f c0       	rjmp	.+62     	; 0x2a62 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    2a24:	80 91 41 01 	lds	r24, 0x0141
    2a28:	8f 71       	andi	r24, 0x1F	; 31
    2a2a:	89 31       	cpi	r24, 0x19	; 25
    2a2c:	a9 f4       	brne	.+42     	; 0x2a58 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    2a2e:	10 91 42 01 	lds	r17, 0x0142
    2a32:	12 95       	swap	r17
    2a34:	16 95       	lsr	r17
    2a36:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    2a38:	49 f0       	breq	.+18     	; 0x2a4c <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2a3a:	13 30       	cpi	r17, 0x03	; 3
    2a3c:	21 f0       	breq	.+8      	; 0x2a46 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    2a3e:	15 30       	cpi	r17, 0x05	; 5
    2a40:	21 f0       	breq	.+8      	; 0x2a4a <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    2a42:	13 e0       	ldi	r17, 0x03	; 3
    2a44:	03 c0       	rjmp	.+6      	; 0x2a4c <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2a46:	11 e0       	ldi	r17, 0x01	; 1
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    2a4a:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    2a4c:	e8 de       	rcall	.-560    	; 0x281e <phySetRxState>
      phyState = PHY_STATE_IDLE;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	80 93 e9 21 	sts	0x21E9, r24

      PHY_DataConf(status);
    2a54:	81 2f       	mov	r24, r17
    2a56:	f5 dd       	rcall	.-1046   	; 0x2642 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2a58:	ef e4       	ldi	r30, 0x4F	; 79
    2a5a:	f1 e0       	ldi	r31, 0x01	; 1
    2a5c:	80 81       	ld	r24, Z
    2a5e:	80 64       	ori	r24, 0x40	; 64
    2a60:	80 83       	st	Z, r24
  }
}
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	08 95       	ret

00002a74 <SYS_Init>:
/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  //prescaler defined, timer 4 defined
  HAL_Init();
    2a74:	0e 94 86 0b 	call	0x170c	; 0x170c <HAL_Init>
  //initialize application timer
  SYS_TimerInit();
    2a78:	6f d0       	rcall	.+222    	; 0x2b58 <SYS_TimerInit>
  //transceiver initialization
  PHY_Init();
    2a7a:	67 df       	rcall	.-306    	; 0x294a <PHY_Init>
  //mesh network initialization
  NWK_Init();
    2a7c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <NWK_Init>
  PHY_TX_PWR = 0x00; //For maximizing Tx power
    2a80:	10 92 45 01 	sts	0x0145, r1
    2a84:	08 95       	ret

00002a86 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    2a86:	7b df       	rcall	.-266    	; 0x297e <PHY_TaskHandler>
  NWK_TaskHandler();
    2a88:	0e 94 13 0c 	call	0x1826	; 0x1826 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2a8c:	cc c0       	rjmp	.+408    	; 0x2c26 <SYS_TimerTaskHandler>
    2a8e:	08 95       	ret

00002a90 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	cf 93       	push	r28
    2a96:	df 93       	push	r29
    2a98:	ec 01       	movw	r28, r24
  if (timers)
    2a9a:	80 91 ea 21 	lds	r24, 0x21EA
    2a9e:	90 91 eb 21 	lds	r25, 0x21EB
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <placeTimer+0x18>
    2aa6:	45 c0       	rjmp	.+138    	; 0x2b32 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    2aa8:	4e 81       	ldd	r20, Y+6	; 0x06
    2aaa:	5f 81       	ldd	r21, Y+7	; 0x07
    2aac:	68 85       	ldd	r22, Y+8	; 0x08
    2aae:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	02 81       	ldd	r16, Z+2	; 0x02
    2ab4:	13 81       	ldd	r17, Z+3	; 0x03
    2ab6:	24 81       	ldd	r18, Z+4	; 0x04
    2ab8:	35 81       	ldd	r19, Z+5	; 0x05
    2aba:	40 17       	cp	r20, r16
    2abc:	51 07       	cpc	r21, r17
    2abe:	62 07       	cpc	r22, r18
    2ac0:	73 07       	cpc	r23, r19
    2ac2:	60 f0       	brcs	.+24     	; 0x2adc <placeTimer+0x4c>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	17 c0       	rjmp	.+46     	; 0x2af6 <placeTimer+0x66>
    2ac8:	02 81       	ldd	r16, Z+2	; 0x02
    2aca:	13 81       	ldd	r17, Z+3	; 0x03
    2acc:	24 81       	ldd	r18, Z+4	; 0x04
    2ace:	35 81       	ldd	r19, Z+5	; 0x05
    2ad0:	40 17       	cp	r20, r16
    2ad2:	51 07       	cpc	r21, r17
    2ad4:	62 07       	cpc	r22, r18
    2ad6:	73 07       	cpc	r23, r19
    2ad8:	68 f4       	brcc	.+26     	; 0x2af4 <placeTimer+0x64>
    2ada:	03 c0       	rjmp	.+6      	; 0x2ae2 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2adc:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    2ade:	a0 e0       	ldi	r26, 0x00	; 0
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    2ae2:	04 1b       	sub	r16, r20
    2ae4:	15 0b       	sbc	r17, r21
    2ae6:	26 0b       	sbc	r18, r22
    2ae8:	37 0b       	sbc	r19, r23
    2aea:	02 83       	std	Z+2, r16	; 0x02
    2aec:	13 83       	std	Z+3, r17	; 0x03
    2aee:	24 83       	std	Z+4, r18	; 0x04
    2af0:	35 83       	std	Z+5, r19	; 0x05
         break;
    2af2:	0a c0       	rjmp	.+20     	; 0x2b08 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2af4:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    2af6:	40 1b       	sub	r20, r16
    2af8:	51 0b       	sbc	r21, r17
    2afa:	62 0b       	sbc	r22, r18
    2afc:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2afe:	ed 91       	ld	r30, X+
    2b00:	fc 91       	ld	r31, X
    2b02:	11 97       	sbiw	r26, 0x01	; 1
    2b04:	30 97       	sbiw	r30, 0x00	; 0
    2b06:	01 f7       	brne	.-64     	; 0x2ac8 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    2b08:	4a 83       	std	Y+2, r20	; 0x02
    2b0a:	5b 83       	std	Y+3, r21	; 0x03
    2b0c:	6c 83       	std	Y+4, r22	; 0x04
    2b0e:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    2b10:	10 97       	sbiw	r26, 0x00	; 0
    2b12:	41 f0       	breq	.+16     	; 0x2b24 <placeTimer+0x94>
    {
      timer->next = prev->next;
    2b14:	8d 91       	ld	r24, X+
    2b16:	9c 91       	ld	r25, X
    2b18:	11 97       	sbiw	r26, 0x01	; 1
    2b1a:	99 83       	std	Y+1, r25	; 0x01
    2b1c:	88 83       	st	Y, r24
      prev->next = timer;
    2b1e:	cd 93       	st	X+, r28
    2b20:	dc 93       	st	X, r29
    2b22:	15 c0       	rjmp	.+42     	; 0x2b4e <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    2b24:	99 83       	std	Y+1, r25	; 0x01
    2b26:	88 83       	st	Y, r24
      timers = timer;
    2b28:	d0 93 eb 21 	sts	0x21EB, r29
    2b2c:	c0 93 ea 21 	sts	0x21EA, r28
    2b30:	0e c0       	rjmp	.+28     	; 0x2b4e <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    2b32:	19 82       	std	Y+1, r1	; 0x01
    2b34:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    2b36:	8e 81       	ldd	r24, Y+6	; 0x06
    2b38:	9f 81       	ldd	r25, Y+7	; 0x07
    2b3a:	a8 85       	ldd	r26, Y+8	; 0x08
    2b3c:	b9 85       	ldd	r27, Y+9	; 0x09
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
    2b40:	9b 83       	std	Y+3, r25	; 0x03
    2b42:	ac 83       	std	Y+4, r26	; 0x04
    2b44:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    2b46:	d0 93 eb 21 	sts	0x21EB, r29
    2b4a:	c0 93 ea 21 	sts	0x21EA, r28
  }
}
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	08 95       	ret

00002b58 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    2b58:	10 92 eb 21 	sts	0x21EB, r1
    2b5c:	10 92 ea 21 	sts	0x21EA, r1
    2b60:	08 95       	ret

00002b62 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b66:	a0 91 ea 21 	lds	r26, 0x21EA
    2b6a:	b0 91 eb 21 	lds	r27, 0x21EB
    2b6e:	10 97       	sbiw	r26, 0x00	; 0
    2b70:	91 f1       	breq	.+100    	; 0x2bd6 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    2b72:	a8 17       	cp	r26, r24
    2b74:	b9 07       	cpc	r27, r25
    2b76:	51 f5       	brne	.+84     	; 0x2bcc <SYS_TimerStop+0x6a>
    2b78:	0a c0       	rjmp	.+20     	; 0x2b8e <SYS_TimerStop+0x2c>
    2b7a:	8e 17       	cp	r24, r30
    2b7c:	9f 07       	cpc	r25, r31
    2b7e:	29 f5       	brne	.+74     	; 0x2bca <SYS_TimerStop+0x68>
    {
      if (prev)
    2b80:	10 97       	sbiw	r26, 0x00	; 0
    2b82:	31 f0       	breq	.+12     	; 0x2b90 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    2b84:	20 81       	ld	r18, Z
    2b86:	31 81       	ldd	r19, Z+1	; 0x01
    2b88:	2d 93       	st	X+, r18
    2b8a:	3c 93       	st	X, r19
    2b8c:	07 c0       	rjmp	.+14     	; 0x2b9c <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b8e:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    2b90:	20 81       	ld	r18, Z
    2b92:	31 81       	ldd	r19, Z+1	; 0x01
    2b94:	30 93 eb 21 	sts	0x21EB, r19
    2b98:	20 93 ea 21 	sts	0x21EA, r18

      if (t->next)
    2b9c:	01 90       	ld	r0, Z+
    2b9e:	f0 81       	ld	r31, Z
    2ba0:	e0 2d       	mov	r30, r0
    2ba2:	30 97       	sbiw	r30, 0x00	; 0
    2ba4:	c1 f0       	breq	.+48     	; 0x2bd6 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    2ba6:	42 81       	ldd	r20, Z+2	; 0x02
    2ba8:	53 81       	ldd	r21, Z+3	; 0x03
    2baa:	64 81       	ldd	r22, Z+4	; 0x04
    2bac:	75 81       	ldd	r23, Z+5	; 0x05
    2bae:	ec 01       	movw	r28, r24
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb4:	ac 81       	ldd	r26, Y+4	; 0x04
    2bb6:	bd 81       	ldd	r27, Y+5	; 0x05
    2bb8:	84 0f       	add	r24, r20
    2bba:	95 1f       	adc	r25, r21
    2bbc:	a6 1f       	adc	r26, r22
    2bbe:	b7 1f       	adc	r27, r23
    2bc0:	82 83       	std	Z+2, r24	; 0x02
    2bc2:	93 83       	std	Z+3, r25	; 0x03
    2bc4:	a4 83       	std	Z+4, r26	; 0x04
    2bc6:	b5 83       	std	Z+5, r27	; 0x05
    2bc8:	06 c0       	rjmp	.+12     	; 0x2bd6 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2bca:	df 01       	movw	r26, r30
    2bcc:	ed 91       	ld	r30, X+
    2bce:	fc 91       	ld	r31, X
    2bd0:	11 97       	sbiw	r26, 0x01	; 1
    2bd2:	30 97       	sbiw	r30, 0x00	; 0
    2bd4:	91 f6       	brne	.-92     	; 0x2b7a <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	08 95       	ret

00002bdc <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2bdc:	e0 91 ea 21 	lds	r30, 0x21EA
    2be0:	f0 91 eb 21 	lds	r31, 0x21EB
    2be4:	30 97       	sbiw	r30, 0x00	; 0
    2be6:	71 f0       	breq	.+28     	; 0x2c04 <SYS_TimerStarted+0x28>
    if (t == timer)
    2be8:	e8 17       	cp	r30, r24
    2bea:	f9 07       	cpc	r31, r25
    2bec:	21 f4       	brne	.+8      	; 0x2bf6 <SYS_TimerStarted+0x1a>
    2bee:	0c c0       	rjmp	.+24     	; 0x2c08 <SYS_TimerStarted+0x2c>
    2bf0:	8e 17       	cp	r24, r30
    2bf2:	9f 07       	cpc	r25, r31
    2bf4:	59 f0       	breq	.+22     	; 0x2c0c <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2bf6:	01 90       	ld	r0, Z+
    2bf8:	f0 81       	ld	r31, Z
    2bfa:	e0 2d       	mov	r30, r0
    2bfc:	30 97       	sbiw	r30, 0x00	; 0
    2bfe:	c1 f7       	brne	.-16     	; 0x2bf0 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	08 95       	ret
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	08 95       	ret
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    2c0e:	08 95       	ret

00002c10 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    2c16:	e2 df       	rcall	.-60     	; 0x2bdc <SYS_TimerStarted>
    2c18:	81 11       	cpse	r24, r1
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <SYS_TimerStart+0x10>
    placeTimer(timer);
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	38 df       	rcall	.-400    	; 0x2a90 <placeTimer>
}
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	08 95       	ret

00002c26 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    2c32:	80 91 78 23 	lds	r24, 0x2378
    2c36:	88 23       	and	r24, r24
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <SYS_TimerTaskHandler+0x16>
    2c3a:	59 c0       	rjmp	.+178    	; 0x2cee <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    2c3c:	8f b7       	in	r24, 0x3f	; 63
    2c3e:	f8 94       	cli
    cnt = halTimerIrqCount;
    2c40:	c0 90 78 23 	lds	r12, 0x2378
    halTimerIrqCount = 0;
    2c44:	10 92 78 23 	sts	0x2378, r1
  ATOMIC_SECTION_LEAVE
    2c48:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    2c4a:	d1 2c       	mov	r13, r1
    2c4c:	e1 2c       	mov	r14, r1
    2c4e:	f1 2c       	mov	r15, r1
    2c50:	cc 0c       	add	r12, r12
    2c52:	dd 1c       	adc	r13, r13
    2c54:	ee 1c       	adc	r14, r14
    2c56:	ff 1c       	adc	r15, r15
    2c58:	d7 01       	movw	r26, r14
    2c5a:	c6 01       	movw	r24, r12
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	aa 1f       	adc	r26, r26
    2c62:	bb 1f       	adc	r27, r27
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	aa 1f       	adc	r26, r26
    2c6a:	bb 1f       	adc	r27, r27
    2c6c:	c8 0e       	add	r12, r24
    2c6e:	d9 1e       	adc	r13, r25
    2c70:	ea 1e       	adc	r14, r26
    2c72:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    2c74:	c0 91 ea 21 	lds	r28, 0x21EA
    2c78:	d0 91 eb 21 	lds	r29, 0x21EB
    2c7c:	20 97       	sbiw	r28, 0x00	; 0
    2c7e:	b9 f1       	breq	.+110    	; 0x2cee <SYS_TimerTaskHandler+0xc8>
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	ac 81       	ldd	r26, Y+4	; 0x04
    2c86:	bd 81       	ldd	r27, Y+5	; 0x05
    2c88:	c8 16       	cp	r12, r24
    2c8a:	d9 06       	cpc	r13, r25
    2c8c:	ea 06       	cpc	r14, r26
    2c8e:	fb 06       	cpc	r15, r27
    2c90:	10 f1       	brcs	.+68     	; 0x2cd6 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    2c92:	c8 1a       	sub	r12, r24
    2c94:	d9 0a       	sbc	r13, r25
    2c96:	ea 0a       	sbc	r14, r26
    2c98:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    2c9a:	88 81       	ld	r24, Y
    2c9c:	99 81       	ldd	r25, Y+1	; 0x01
    2c9e:	90 93 eb 21 	sts	0x21EB, r25
    2ca2:	80 93 ea 21 	sts	0x21EA, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    2ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca8:	81 30       	cpi	r24, 0x01	; 1
    2caa:	11 f4       	brne	.+4      	; 0x2cb0 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    2cac:	ce 01       	movw	r24, r28
    2cae:	f0 de       	rcall	.-544    	; 0x2a90 <placeTimer>
    timer->handler(timer);
    2cb0:	eb 85       	ldd	r30, Y+11	; 0x0b
    2cb2:	fc 85       	ldd	r31, Y+12	; 0x0c
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    2cb8:	c0 91 ea 21 	lds	r28, 0x21EA
    2cbc:	d0 91 eb 21 	lds	r29, 0x21EB
    2cc0:	20 97       	sbiw	r28, 0x00	; 0
    2cc2:	a9 f0       	breq	.+42     	; 0x2cee <SYS_TimerTaskHandler+0xc8>
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	ac 81       	ldd	r26, Y+4	; 0x04
    2cca:	bd 81       	ldd	r27, Y+5	; 0x05
    2ccc:	c8 16       	cp	r12, r24
    2cce:	d9 06       	cpc	r13, r25
    2cd0:	ea 06       	cpc	r14, r26
    2cd2:	fb 06       	cpc	r15, r27
    2cd4:	f0 f6       	brcc	.-68     	; 0x2c92 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cda:	ac 81       	ldd	r26, Y+4	; 0x04
    2cdc:	bd 81       	ldd	r27, Y+5	; 0x05
    2cde:	8c 19       	sub	r24, r12
    2ce0:	9d 09       	sbc	r25, r13
    2ce2:	ae 09       	sbc	r26, r14
    2ce4:	bf 09       	sbc	r27, r15
    2ce6:	8a 83       	std	Y+2, r24	; 0x02
    2ce8:	9b 83       	std	Y+3, r25	; 0x03
    2cea:	ac 83       	std	Y+4, r26	; 0x04
    2cec:	bd 83       	std	Y+5, r27	; 0x05
}
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	df 90       	pop	r13
    2cf8:	cf 90       	pop	r12
    2cfa:	08 95       	ret

00002cfc <errorTimerStatusHandler>:
	else
	{
		int_to_ascii((uint8_t)data);
		send_usart_char("\r\n");
	}
}
    2cfc:	80 91 d8 22 	lds	r24, 0x22D8
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	80 93 d8 22 	sts	0x22D8, r24
    2d06:	88 23       	and	r24, r24
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <errorTimerStatusHandler+0x14>
    2d0a:	10 92 d8 22 	sts	0x22D8, r1
    2d0e:	08 95       	ret
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	80 93 fd 22 	sts	0x22FD, r24
    2d16:	08 95       	ret

00002d18 <appLEDIntervalTimerHandler>:
    2d18:	82 e0       	ldi	r24, 0x02	; 2
    2d1a:	93 e2       	ldi	r25, 0x23	; 35
    2d1c:	79 cf       	rjmp	.-270    	; 0x2c10 <SYS_TimerStart>
    2d1e:	08 95       	ret

00002d20 <appWPSActivationTimerHandler>:
    2d20:	80 91 ba 22 	lds	r24, 0x22BA
    2d24:	81 30       	cpi	r24, 0x01	; 1
    2d26:	81 f4       	brne	.+32     	; 0x2d48 <appWPSActivationTimerHandler+0x28>
    2d28:	83 e4       	ldi	r24, 0x43	; 67
    2d2a:	93 e2       	ldi	r25, 0x23	; 35
    2d2c:	1a df       	rcall	.-460    	; 0x2b62 <SYS_TimerStop>
    2d2e:	84 e0       	ldi	r24, 0x04	; 4
    2d30:	80 93 c4 22 	sts	0x22C4, r24
    2d34:	10 92 bf 22 	sts	0x22BF, r1
    2d38:	10 92 be 22 	sts	0x22BE, r1
    2d3c:	0e 94 85 02 	call	0x50a	; 0x50a <APP_IbLoadSettings_WPS>
    2d40:	84 e5       	ldi	r24, 0x54	; 84
    2d42:	93 e2       	ldi	r25, 0x23	; 35
    2d44:	65 cf       	rjmp	.-310    	; 0x2c10 <SYS_TimerStart>
    2d46:	08 95       	ret
    2d48:	81 11       	cpse	r24, r1
    2d4a:	10 c0       	rjmp	.+32     	; 0x2d6c <appWPSActivationTimerHandler+0x4c>
    2d4c:	83 e4       	ldi	r24, 0x43	; 67
    2d4e:	93 e2       	ldi	r25, 0x23	; 35
    2d50:	08 df       	rcall	.-496    	; 0x2b62 <SYS_TimerStop>
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 c4 22 	sts	0x22C4, r24
    2d58:	0e 94 da 01 	call	0x3b4	; 0x3b4 <APP_IbLoadSettings>
    2d5c:	0e 94 0c 03 	call	0x618	; 0x618 <APP_NwkInit>
    2d60:	84 e5       	ldi	r24, 0x54	; 84
    2d62:	93 e2       	ldi	r25, 0x23	; 35
    2d64:	fe de       	rcall	.-516    	; 0x2b62 <SYS_TimerStop>
    2d66:	8b e9       	ldi	r24, 0x9B	; 155
    2d68:	92 e2       	ldi	r25, 0x22	; 34
    2d6a:	fb ce       	rjmp	.-522    	; 0x2b62 <SYS_TimerStop>
    2d6c:	08 95       	ret

00002d6e <appWPSRequestTimerHandler>:
    2d6e:	8c ee       	ldi	r24, 0xEC	; 236
    2d70:	91 e2       	ldi	r25, 0x21	; 33
    2d72:	0c 94 d2 36 	jmp	0x6da4	; 0x6da4 <request_to_RF>
    2d76:	08 95       	ret

00002d78 <errorTimerWpsHandler>:
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	80 93 96 22 	sts	0x2296, r24
    2d7e:	8f e2       	ldi	r24, 0x2F	; 47
    2d80:	92 e0       	ldi	r25, 0x02	; 2
    2d82:	0c 94 8d 27 	jmp	0x4f1a	; 0x4f1a <send_usart_char>
    2d86:	08 95       	ret

00002d88 <appLEDTimerHandler>:
    2d88:	80 91 69 22 	lds	r24, 0x2269
    2d8c:	82 30       	cpi	r24, 0x02	; 2
    2d8e:	08 f0       	brcs	.+2      	; 0x2d92 <appLEDTimerHandler+0xa>
    2d90:	6a c0       	rjmp	.+212    	; 0x2e66 <appLEDTimerHandler+0xde>
    2d92:	80 91 80 22 	lds	r24, 0x2280
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	49 f0       	breq	.+18     	; 0x2dac <appLEDTimerHandler+0x24>
    2d9a:	18 f4       	brcc	.+6      	; 0x2da2 <appLEDTimerHandler+0x1a>
    2d9c:	81 30       	cpi	r24, 0x01	; 1
    2d9e:	c9 f1       	breq	.+114    	; 0x2e12 <appLEDTimerHandler+0x8a>
    2da0:	49 c0       	rjmp	.+146    	; 0x2e34 <appLEDTimerHandler+0xac>
    2da2:	85 30       	cpi	r24, 0x05	; 5
    2da4:	a1 f0       	breq	.+40     	; 0x2dce <appLEDTimerHandler+0x46>
    2da6:	86 30       	cpi	r24, 0x06	; 6
    2da8:	19 f1       	breq	.+70     	; 0x2df0 <appLEDTimerHandler+0x68>
    2daa:	44 c0       	rjmp	.+136    	; 0x2e34 <appLEDTimerHandler+0xac>
    2dac:	60 91 d9 22 	lds	r22, 0x22D9
    2db0:	70 91 da 22 	lds	r23, 0x22DA
    2db4:	80 91 db 22 	lds	r24, 0x22DB
    2db8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    2dbc:	60 91 b7 22 	lds	r22, 0x22B7
    2dc0:	70 91 b8 22 	lds	r23, 0x22B8
    2dc4:	80 91 b9 22 	lds	r24, 0x22B9
    2dc8:	0e 94 20 0a 	call	0x1440	; 0x1440 <gpio_toggle>
    2dcc:	43 c0       	rjmp	.+134    	; 0x2e54 <appLEDTimerHandler+0xcc>
    2dce:	60 91 b7 22 	lds	r22, 0x22B7
    2dd2:	70 91 b8 22 	lds	r23, 0x22B8
    2dd6:	80 91 b9 22 	lds	r24, 0x22B9
    2dda:	0e 94 20 0a 	call	0x1440	; 0x1440 <gpio_toggle>
    2dde:	60 91 d9 22 	lds	r22, 0x22D9
    2de2:	70 91 da 22 	lds	r23, 0x22DA
    2de6:	80 91 db 22 	lds	r24, 0x22DB
    2dea:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    2dee:	32 c0       	rjmp	.+100    	; 0x2e54 <appLEDTimerHandler+0xcc>
    2df0:	60 91 b7 22 	lds	r22, 0x22B7
    2df4:	70 91 b8 22 	lds	r23, 0x22B8
    2df8:	80 91 b9 22 	lds	r24, 0x22B9
    2dfc:	0e 94 20 0a 	call	0x1440	; 0x1440 <gpio_toggle>
    2e00:	60 91 d9 22 	lds	r22, 0x22D9
    2e04:	70 91 da 22 	lds	r23, 0x22DA
    2e08:	80 91 db 22 	lds	r24, 0x22DB
    2e0c:	0e 94 20 0a 	call	0x1440	; 0x1440 <gpio_toggle>
    2e10:	21 c0       	rjmp	.+66     	; 0x2e54 <appLEDTimerHandler+0xcc>
    2e12:	60 91 b7 22 	lds	r22, 0x22B7
    2e16:	70 91 b8 22 	lds	r23, 0x22B8
    2e1a:	80 91 b9 22 	lds	r24, 0x22B9
    2e1e:	0e 94 20 0a 	call	0x1440	; 0x1440 <gpio_toggle>
    2e22:	60 91 d9 22 	lds	r22, 0x22D9
    2e26:	70 91 da 22 	lds	r23, 0x22DA
    2e2a:	80 91 db 22 	lds	r24, 0x22DB
    2e2e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    2e32:	10 c0       	rjmp	.+32     	; 0x2e54 <appLEDTimerHandler+0xcc>
    2e34:	60 91 b7 22 	lds	r22, 0x22B7
    2e38:	70 91 b8 22 	lds	r23, 0x22B8
    2e3c:	80 91 b9 22 	lds	r24, 0x22B9
    2e40:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    2e44:	60 91 d9 22 	lds	r22, 0x22D9
    2e48:	70 91 da 22 	lds	r23, 0x22DA
    2e4c:	80 91 db 22 	lds	r24, 0x22DB
    2e50:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    2e54:	80 91 69 22 	lds	r24, 0x2269
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	80 93 69 22 	sts	0x2269, r24
    2e5e:	82 e0       	ldi	r24, 0x02	; 2
    2e60:	93 e2       	ldi	r25, 0x23	; 35
    2e62:	d6 ce       	rjmp	.-596    	; 0x2c10 <SYS_TimerStart>
    2e64:	08 95       	ret
    2e66:	60 91 b7 22 	lds	r22, 0x22B7
    2e6a:	70 91 b8 22 	lds	r23, 0x22B8
    2e6e:	80 91 b9 22 	lds	r24, 0x22B9
    2e72:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    2e76:	60 91 d9 22 	lds	r22, 0x22D9
    2e7a:	70 91 da 22 	lds	r23, 0x22DA
    2e7e:	80 91 db 22 	lds	r24, 0x22DB
    2e82:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    2e86:	10 92 69 22 	sts	0x2269, r1
    2e8a:	8c ed       	ldi	r24, 0xDC	; 220
    2e8c:	92 e2       	ldi	r25, 0x22	; 34
    2e8e:	c0 ce       	rjmp	.-640    	; 0x2c10 <SYS_TimerStart>
    2e90:	08 95       	ret

00002e92 <PNEWELSGpioInit>:
    2e92:	ef 92       	push	r14
    2e94:	ff 92       	push	r15
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	ef e0       	ldi	r30, 0x0F	; 15
    2ea0:	f3 e2       	ldi	r31, 0x23	; 35
    2ea2:	10 82       	st	Z, r1
    2ea4:	0f 2e       	mov	r0, r31
    2ea6:	f3 e0       	ldi	r31, 0x03	; 3
    2ea8:	ff 2e       	mov	r15, r31
    2eaa:	f0 2d       	mov	r31, r0
    2eac:	f1 82       	std	Z+1, r15	; 0x01
    2eae:	8b e0       	ldi	r24, 0x0B	; 11
    2eb0:	82 83       	std	Z+2, r24	; 0x02
    2eb2:	60 91 0f 23 	lds	r22, 0x230F
    2eb6:	70 91 10 23 	lds	r23, 0x2310
    2eba:	80 91 11 23 	lds	r24, 0x2311
    2ebe:	4a ee       	ldi	r20, 0xEA	; 234
    2ec0:	5b e1       	ldi	r21, 0x1B	; 27
    2ec2:	0e 94 4b 09 	call	0x1296	; 0x1296 <ext_int_set_interrupt_callback>
    2ec6:	60 91 0f 23 	lds	r22, 0x230F
    2eca:	70 91 10 23 	lds	r23, 0x2310
    2ece:	80 91 11 23 	lds	r24, 0x2311
    2ed2:	0e 94 35 09 	call	0x126a	; 0x126a <ext_int_pcint_init>
    2ed6:	e8 ea       	ldi	r30, 0xA8	; 168
    2ed8:	f2 e2       	ldi	r31, 0x22	; 34
    2eda:	10 82       	st	Z, r1
    2edc:	c2 e0       	ldi	r28, 0x02	; 2
    2ede:	c1 83       	std	Z+1, r28	; 0x01
    2ee0:	8a e0       	ldi	r24, 0x0A	; 10
    2ee2:	82 83       	std	Z+2, r24	; 0x02
    2ee4:	60 91 a8 22 	lds	r22, 0x22A8
    2ee8:	70 91 a9 22 	lds	r23, 0x22A9
    2eec:	80 91 aa 22 	lds	r24, 0x22AA
    2ef0:	0e 94 35 09 	call	0x126a	; 0x126a <ext_int_pcint_init>
    2ef4:	eb ea       	ldi	r30, 0xAB	; 171
    2ef6:	f2 e2       	ldi	r31, 0x22	; 34
    2ef8:	10 82       	st	Z, r1
    2efa:	d1 e0       	ldi	r29, 0x01	; 1
    2efc:	d1 83       	std	Z+1, r29	; 0x01
    2efe:	89 e0       	ldi	r24, 0x09	; 9
    2f00:	82 83       	std	Z+2, r24	; 0x02
    2f02:	60 91 ab 22 	lds	r22, 0x22AB
    2f06:	70 91 ac 22 	lds	r23, 0x22AC
    2f0a:	80 91 ad 22 	lds	r24, 0x22AD
    2f0e:	0e 94 35 09 	call	0x126a	; 0x126a <ext_int_pcint_init>
    2f12:	e1 e5       	ldi	r30, 0x51	; 81
    2f14:	f3 e2       	ldi	r31, 0x23	; 35
    2f16:	10 82       	st	Z, r1
    2f18:	11 82       	std	Z+1, r1	; 0x01
    2f1a:	88 e0       	ldi	r24, 0x08	; 8
    2f1c:	82 83       	std	Z+2, r24	; 0x02
    2f1e:	60 91 51 23 	lds	r22, 0x2351
    2f22:	70 91 52 23 	lds	r23, 0x2352
    2f26:	80 91 53 23 	lds	r24, 0x2353
    2f2a:	0e 94 35 09 	call	0x126a	; 0x126a <ext_int_pcint_init>
    2f2e:	ee ef       	ldi	r30, 0xFE	; 254
    2f30:	f2 e2       	ldi	r31, 0x22	; 34
    2f32:	d0 83       	st	Z, r29
    2f34:	68 94       	set
    2f36:	ee 24       	eor	r14, r14
    2f38:	e2 f8       	bld	r14, 2
    2f3a:	e1 82       	std	Z+1, r14	; 0x01
    2f3c:	60 91 fe 22 	lds	r22, 0x22FE
    2f40:	70 91 ff 22 	lds	r23, 0x22FF
    2f44:	80 91 00 23 	lds	r24, 0x2300
    2f48:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <gpio_in>
    2f4c:	60 91 fe 22 	lds	r22, 0x22FE
    2f50:	70 91 ff 22 	lds	r23, 0x22FF
    2f54:	80 91 00 23 	lds	r24, 0x2300
    2f58:	0e 94 06 0b 	call	0x160c	; 0x160c <gpio_pullup>
    2f5c:	e7 eb       	ldi	r30, 0xB7	; 183
    2f5e:	f2 e2       	ldi	r31, 0x22	; 34
    2f60:	c0 83       	st	Z, r28
    2f62:	05 e0       	ldi	r16, 0x05	; 5
    2f64:	01 83       	std	Z+1, r16	; 0x01
    2f66:	60 91 b7 22 	lds	r22, 0x22B7
    2f6a:	70 91 b8 22 	lds	r23, 0x22B8
    2f6e:	80 91 b9 22 	lds	r24, 0x22B9
    2f72:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpio_out>
    2f76:	e9 ed       	ldi	r30, 0xD9	; 217
    2f78:	f2 e2       	ldi	r31, 0x22	; 34
    2f7a:	c0 83       	st	Z, r28
    2f7c:	17 e0       	ldi	r17, 0x07	; 7
    2f7e:	11 83       	std	Z+1, r17	; 0x01
    2f80:	60 91 d9 22 	lds	r22, 0x22D9
    2f84:	70 91 da 22 	lds	r23, 0x22DA
    2f88:	80 91 db 22 	lds	r24, 0x22DB
    2f8c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpio_out>
    2f90:	eb ee       	ldi	r30, 0xEB	; 235
    2f92:	f2 e2       	ldi	r31, 0x22	; 34
    2f94:	c0 83       	st	Z, r28
    2f96:	e1 82       	std	Z+1, r14	; 0x01
    2f98:	60 91 eb 22 	lds	r22, 0x22EB
    2f9c:	70 91 ec 22 	lds	r23, 0x22EC
    2fa0:	80 91 ed 22 	lds	r24, 0x22ED
    2fa4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpio_out>
    2fa8:	eb eb       	ldi	r30, 0xBB	; 187
    2faa:	f2 e2       	ldi	r31, 0x22	; 34
    2fac:	c0 83       	st	Z, r28
    2fae:	f1 82       	std	Z+1, r15	; 0x01
    2fb0:	60 91 bb 22 	lds	r22, 0x22BB
    2fb4:	70 91 bc 22 	lds	r23, 0x22BC
    2fb8:	80 91 bd 22 	lds	r24, 0x22BD
    2fbc:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpio_out>
    2fc0:	00 93 99 22 	sts	0x2299, r16
    2fc4:	60 91 98 22 	lds	r22, 0x2298
    2fc8:	70 91 99 22 	lds	r23, 0x2299
    2fcc:	80 91 9a 22 	lds	r24, 0x229A
    2fd0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpio_out>
    2fd4:	0f 2e       	mov	r0, r31
    2fd6:	f6 e0       	ldi	r31, 0x06	; 6
    2fd8:	ff 2e       	mov	r15, r31
    2fda:	f0 2d       	mov	r31, r0
    2fdc:	f0 92 6d 23 	sts	0x236D, r15
    2fe0:	60 91 6c 23 	lds	r22, 0x236C
    2fe4:	70 91 6d 23 	lds	r23, 0x236D
    2fe8:	80 91 6e 23 	lds	r24, 0x236E
    2fec:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpio_out>
    2ff0:	10 93 73 23 	sts	0x2373, r17
    2ff4:	60 91 72 23 	lds	r22, 0x2372
    2ff8:	70 91 73 23 	lds	r23, 0x2373
    2ffc:	80 91 74 23 	lds	r24, 0x2374
    3000:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpio_out>
    3004:	e6 e6       	ldi	r30, 0x66	; 102
    3006:	f3 e2       	ldi	r31, 0x23	; 35
    3008:	c0 83       	st	Z, r28
    300a:	11 82       	std	Z+1, r1	; 0x01
    300c:	60 91 66 23 	lds	r22, 0x2366
    3010:	70 91 67 23 	lds	r23, 0x2367
    3014:	80 91 68 23 	lds	r24, 0x2368
    3018:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <gpio_in>
    301c:	60 91 66 23 	lds	r22, 0x2366
    3020:	70 91 67 23 	lds	r23, 0x2367
    3024:	80 91 68 23 	lds	r24, 0x2368
    3028:	0e 94 06 0b 	call	0x160c	; 0x160c <gpio_pullup>
    302c:	e1 e6       	ldi	r30, 0x61	; 97
    302e:	f3 e2       	ldi	r31, 0x23	; 35
    3030:	c0 83       	st	Z, r28
    3032:	d1 83       	std	Z+1, r29	; 0x01
    3034:	60 91 61 23 	lds	r22, 0x2361
    3038:	70 91 62 23 	lds	r23, 0x2362
    303c:	80 91 63 23 	lds	r24, 0x2363
    3040:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <gpio_in>
    3044:	60 91 61 23 	lds	r22, 0x2361
    3048:	70 91 62 23 	lds	r23, 0x2362
    304c:	80 91 63 23 	lds	r24, 0x2363
    3050:	0e 94 06 0b 	call	0x160c	; 0x160c <gpio_pullup>
    3054:	e4 eb       	ldi	r30, 0xB4	; 180
    3056:	f2 e2       	ldi	r31, 0x22	; 34
    3058:	c0 83       	st	Z, r28
    305a:	c1 83       	std	Z+1, r28	; 0x01
    305c:	60 91 b4 22 	lds	r22, 0x22B4
    3060:	70 91 b5 22 	lds	r23, 0x22B5
    3064:	80 91 b6 22 	lds	r24, 0x22B6
    3068:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <gpio_in>
    306c:	60 91 b4 22 	lds	r22, 0x22B4
    3070:	70 91 b5 22 	lds	r23, 0x22B5
    3074:	80 91 b6 22 	lds	r24, 0x22B6
    3078:	0e 94 06 0b 	call	0x160c	; 0x160c <gpio_pullup>
    307c:	e2 e1       	ldi	r30, 0x12	; 18
    307e:	f3 e2       	ldi	r31, 0x23	; 35
    3080:	d0 83       	st	Z, r29
    3082:	01 83       	std	Z+1, r16	; 0x01
    3084:	60 91 12 23 	lds	r22, 0x2312
    3088:	70 91 13 23 	lds	r23, 0x2313
    308c:	80 91 14 23 	lds	r24, 0x2314
    3090:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <gpio_in>
    3094:	60 91 12 23 	lds	r22, 0x2312
    3098:	70 91 13 23 	lds	r23, 0x2313
    309c:	80 91 14 23 	lds	r24, 0x2314
    30a0:	0e 94 06 0b 	call	0x160c	; 0x160c <gpio_pullup>
    30a4:	ea e6       	ldi	r30, 0x6A	; 106
    30a6:	f2 e2       	ldi	r31, 0x22	; 34
    30a8:	d0 83       	st	Z, r29
    30aa:	f1 82       	std	Z+1, r15	; 0x01
    30ac:	60 91 6a 22 	lds	r22, 0x226A
    30b0:	70 91 6b 22 	lds	r23, 0x226B
    30b4:	80 91 6c 22 	lds	r24, 0x226C
    30b8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <gpio_in>
    30bc:	60 91 6a 22 	lds	r22, 0x226A
    30c0:	70 91 6b 22 	lds	r23, 0x226B
    30c4:	80 91 6c 22 	lds	r24, 0x226C
    30c8:	0e 94 06 0b 	call	0x160c	; 0x160c <gpio_pullup>
    30cc:	e1 ec       	ldi	r30, 0xC1	; 193
    30ce:	f2 e2       	ldi	r31, 0x22	; 34
    30d0:	d0 83       	st	Z, r29
    30d2:	11 83       	std	Z+1, r17	; 0x01
    30d4:	60 91 c1 22 	lds	r22, 0x22C1
    30d8:	70 91 c2 22 	lds	r23, 0x22C2
    30dc:	80 91 c3 22 	lds	r24, 0x22C3
    30e0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <gpio_in>
    30e4:	60 91 c1 22 	lds	r22, 0x22C1
    30e8:	70 91 c2 22 	lds	r23, 0x22C2
    30ec:	80 91 c3 22 	lds	r24, 0x22C3
    30f0:	0e 94 06 0b 	call	0x160c	; 0x160c <gpio_pullup>
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	08 95       	ret

00003102 <pneOperationMode>:
    3102:	0f 93       	push	r16
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	80 91 c4 22 	lds	r24, 0x22C4
    310c:	82 30       	cpi	r24, 0x02	; 2
    310e:	09 f4       	brne	.+2      	; 0x3112 <pneOperationMode+0x10>
    3110:	f1 c1       	rjmp	.+994    	; 0x34f4 <pneOperationMode+0x3f2>
    3112:	30 f4       	brcc	.+12     	; 0x3120 <pneOperationMode+0x1e>
    3114:	88 23       	and	r24, r24
    3116:	09 f4       	brne	.+2      	; 0x311a <pneOperationMode+0x18>
    3118:	6e c0       	rjmp	.+220    	; 0x31f6 <pneOperationMode+0xf4>
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	51 f0       	breq	.+20     	; 0x3132 <pneOperationMode+0x30>
    311e:	25 c3       	rjmp	.+1610   	; 0x376a <pneOperationMode+0x668>
    3120:	84 30       	cpi	r24, 0x04	; 4
    3122:	09 f4       	brne	.+2      	; 0x3126 <pneOperationMode+0x24>
    3124:	81 c2       	rjmp	.+1282   	; 0x3628 <pneOperationMode+0x526>
    3126:	08 f4       	brcc	.+2      	; 0x312a <pneOperationMode+0x28>
    3128:	36 c1       	rjmp	.+620    	; 0x3396 <pneOperationMode+0x294>
    312a:	85 30       	cpi	r24, 0x05	; 5
    312c:	09 f4       	brne	.+2      	; 0x3130 <pneOperationMode+0x2e>
    312e:	3f c2       	rjmp	.+1150   	; 0x35ae <pneOperationMode+0x4ac>
    3130:	1c c3       	rjmp	.+1592   	; 0x376a <pneOperationMode+0x668>
    3132:	10 92 ba 22 	sts	0x22BA, r1
    3136:	c1 e0       	ldi	r28, 0x01	; 1
    3138:	c0 93 96 22 	sts	0x2296, r28
    313c:	60 91 98 22 	lds	r22, 0x2298
    3140:	70 91 99 22 	lds	r23, 0x2299
    3144:	80 91 9a 22 	lds	r24, 0x229A
    3148:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    314c:	ee e6       	ldi	r30, 0x6E	; 110
    314e:	f2 e2       	ldi	r31, 0x22	; 34
    3150:	13 86       	std	Z+11, r1	; 0x0b
    3152:	c3 8b       	std	Z+19, r28	; 0x13
    3154:	85 e0       	ldi	r24, 0x05	; 5
    3156:	82 8b       	std	Z+18, r24	; 0x12
    3158:	c1 8b       	std	Z+17, r28	; 0x11
    315a:	84 ef       	ldi	r24, 0xF4	; 244
    315c:	91 e0       	ldi	r25, 0x01	; 1
    315e:	a0 e0       	ldi	r26, 0x00	; 0
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	80 93 08 23 	sts	0x2308, r24
    3166:	90 93 09 23 	sts	0x2309, r25
    316a:	a0 93 0a 23 	sts	0x230A, r26
    316e:	b0 93 0b 23 	sts	0x230B, r27
    3172:	88 ee       	ldi	r24, 0xE8	; 232
    3174:	93 e0       	ldi	r25, 0x03	; 3
    3176:	a0 e0       	ldi	r26, 0x00	; 0
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	80 93 e2 22 	sts	0x22E2, r24
    317e:	90 93 e3 22 	sts	0x22E3, r25
    3182:	a0 93 e4 22 	sts	0x22E4, r26
    3186:	b0 93 e5 22 	sts	0x22E5, r27
    318a:	80 81       	ld	r24, Z
    318c:	81 30       	cpi	r24, 0x01	; 1
    318e:	81 f4       	brne	.+32     	; 0x31b0 <pneOperationMode+0xae>
    3190:	80 91 01 23 	lds	r24, 0x2301
    3194:	81 11       	cpse	r24, r1
    3196:	0c c0       	rjmp	.+24     	; 0x31b0 <pneOperationMode+0xae>
    3198:	60 91 eb 22 	lds	r22, 0x22EB
    319c:	70 91 ec 22 	lds	r23, 0x22EC
    31a0:	80 91 ed 22 	lds	r24, 0x22ED
    31a4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    31a8:	81 11       	cpse	r24, r1
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <pneOperationMode+0xae>
    31ac:	10 92 c4 22 	sts	0x22C4, r1
    31b0:	80 91 76 22 	lds	r24, 0x2276
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	21 f0       	breq	.+8      	; 0x31c0 <pneOperationMode+0xbe>
    31b8:	80 91 71 22 	lds	r24, 0x2271
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	11 f4       	brne	.+4      	; 0x31c4 <pneOperationMode+0xc2>
    31c0:	10 92 c4 22 	sts	0x22C4, r1
    31c4:	80 91 72 22 	lds	r24, 0x2272
    31c8:	81 30       	cpi	r24, 0x01	; 1
    31ca:	19 f4       	brne	.+6      	; 0x31d2 <pneOperationMode+0xd0>
    31cc:	85 e0       	ldi	r24, 0x05	; 5
    31ce:	80 93 c4 22 	sts	0x22C4, r24
    31d2:	80 91 77 22 	lds	r24, 0x2277
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	19 f4       	brne	.+6      	; 0x31e0 <pneOperationMode+0xde>
    31da:	82 e0       	ldi	r24, 0x02	; 2
    31dc:	80 93 c4 22 	sts	0x22C4, r24
    31e0:	80 91 78 22 	lds	r24, 0x2278
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	09 f0       	breq	.+2      	; 0x31ea <pneOperationMode+0xe8>
    31e8:	c0 c2       	rjmp	.+1408   	; 0x376a <pneOperationMode+0x668>
    31ea:	83 e0       	ldi	r24, 0x03	; 3
    31ec:	80 93 c4 22 	sts	0x22C4, r24
    31f0:	10 92 ef 22 	sts	0x22EF, r1
    31f4:	ba c2       	rjmp	.+1396   	; 0x376a <pneOperationMode+0x668>
    31f6:	80 91 ef 22 	lds	r24, 0x22EF
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	31 f4       	brne	.+12     	; 0x320a <pneOperationMode+0x108>
    31fe:	80 91 ef 22 	lds	r24, 0x22EF
    3202:	8f 5f       	subi	r24, 0xFF	; 255
    3204:	80 93 ef 22 	sts	0x22EF, r24
    3208:	02 c0       	rjmp	.+4      	; 0x320e <pneOperationMode+0x10c>
    320a:	10 92 ef 22 	sts	0x22EF, r1
    320e:	10 92 ba 22 	sts	0x22BA, r1
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	80 93 96 22 	sts	0x2296, r24
    3218:	ee e6       	ldi	r30, 0x6E	; 110
    321a:	f2 e2       	ldi	r31, 0x22	; 34
    321c:	82 8b       	std	Z+18, r24	; 0x12
    321e:	8a ef       	ldi	r24, 0xFA	; 250
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	a0 e0       	ldi	r26, 0x00	; 0
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	80 93 08 23 	sts	0x2308, r24
    322a:	90 93 09 23 	sts	0x2309, r25
    322e:	a0 93 0a 23 	sts	0x230A, r26
    3232:	b0 93 0b 23 	sts	0x230B, r27
    3236:	84 ef       	ldi	r24, 0xF4	; 244
    3238:	91 e0       	ldi	r25, 0x01	; 1
    323a:	a0 e0       	ldi	r26, 0x00	; 0
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	80 93 e2 22 	sts	0x22E2, r24
    3242:	90 93 e3 22 	sts	0x22E3, r25
    3246:	a0 93 e4 22 	sts	0x22E4, r26
    324a:	b0 93 e5 22 	sts	0x22E5, r27
    324e:	80 89       	ldd	r24, Z+16	; 0x10
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	21 f0       	breq	.+8      	; 0x325c <pneOperationMode+0x15a>
    3254:	80 91 7f 22 	lds	r24, 0x227F
    3258:	81 11       	cpse	r24, r1
    325a:	14 c0       	rjmp	.+40     	; 0x3284 <pneOperationMode+0x182>
    325c:	60 91 98 22 	lds	r22, 0x2298
    3260:	70 91 99 22 	lds	r23, 0x2299
    3264:	80 91 9a 22 	lds	r24, 0x229A
    3268:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    326c:	10 92 79 22 	sts	0x2279, r1
    3270:	80 91 41 23 	lds	r24, 0x2341
    3274:	81 11       	cpse	r24, r1
    3276:	06 c0       	rjmp	.+12     	; 0x3284 <pneOperationMode+0x182>
    3278:	87 e0       	ldi	r24, 0x07	; 7
    327a:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	80 93 41 23 	sts	0x2341, r24
    3284:	80 91 7e 22 	lds	r24, 0x227E
    3288:	81 11       	cpse	r24, r1
    328a:	0f c0       	rjmp	.+30     	; 0x32aa <pneOperationMode+0x1a8>
    328c:	80 91 7f 22 	lds	r24, 0x227F
    3290:	81 30       	cpi	r24, 0x01	; 1
    3292:	59 f4       	brne	.+22     	; 0x32aa <pneOperationMode+0x1a8>
    3294:	60 91 98 22 	lds	r22, 0x2298
    3298:	70 91 99 22 	lds	r23, 0x2299
    329c:	80 91 9a 22 	lds	r24, 0x229A
    32a0:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	80 93 79 22 	sts	0x2279, r24
    32aa:	80 91 64 23 	lds	r24, 0x2364
    32ae:	81 11       	cpse	r24, r1
    32b0:	06 c0       	rjmp	.+12     	; 0x32be <pneOperationMode+0x1bc>
    32b2:	84 e0       	ldi	r24, 0x04	; 4
    32b4:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	80 93 64 23 	sts	0x2364, r24
    32be:	80 91 78 22 	lds	r24, 0x2278
    32c2:	81 30       	cpi	r24, 0x01	; 1
    32c4:	29 f4       	brne	.+10     	; 0x32d0 <pneOperationMode+0x1ce>
    32c6:	83 e0       	ldi	r24, 0x03	; 3
    32c8:	80 93 c4 22 	sts	0x22C4, r24
    32cc:	10 92 64 23 	sts	0x2364, r1
    32d0:	80 91 8d 22 	lds	r24, 0x228D
    32d4:	81 11       	cpse	r24, r1
    32d6:	16 c0       	rjmp	.+44     	; 0x3304 <pneOperationMode+0x202>
    32d8:	80 91 6e 22 	lds	r24, 0x226E
    32dc:	81 11       	cpse	r24, r1
    32de:	2a c0       	rjmp	.+84     	; 0x3334 <pneOperationMode+0x232>
    32e0:	80 91 76 22 	lds	r24, 0x2276
    32e4:	81 11       	cpse	r24, r1
    32e6:	26 c0       	rjmp	.+76     	; 0x3334 <pneOperationMode+0x232>
    32e8:	80 91 71 22 	lds	r24, 0x2271
    32ec:	81 11       	cpse	r24, r1
    32ee:	22 c0       	rjmp	.+68     	; 0x3334 <pneOperationMode+0x232>
    32f0:	85 e0       	ldi	r24, 0x05	; 5
    32f2:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    32f6:	10 92 64 23 	sts	0x2364, r1
    32fa:	10 92 41 23 	sts	0x2341, r1
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	80 93 c4 22 	sts	0x22C4, r24
    3304:	80 91 8d 22 	lds	r24, 0x228D
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	a1 f4       	brne	.+40     	; 0x3334 <pneOperationMode+0x232>
    330c:	80 91 76 22 	lds	r24, 0x2276
    3310:	81 30       	cpi	r24, 0x01	; 1
    3312:	81 f4       	brne	.+32     	; 0x3334 <pneOperationMode+0x232>
    3314:	60 91 eb 22 	lds	r22, 0x22EB
    3318:	70 91 ec 22 	lds	r23, 0x22EC
    331c:	80 91 ed 22 	lds	r24, 0x22ED
    3320:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    3324:	ee e6       	ldi	r30, 0x6E	; 110
    3326:	f2 e2       	ldi	r31, 0x22	; 34
    3328:	10 86       	std	Z+8, r1	; 0x08
    332a:	13 82       	std	Z+3, r1	; 0x03
    332c:	81 85       	ldd	r24, Z+9	; 0x09
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	69 f5       	brne	.+90     	; 0x338c <pneOperationMode+0x28a>
    3332:	04 c0       	rjmp	.+8      	; 0x333c <pneOperationMode+0x23a>
    3334:	80 91 77 22 	lds	r24, 0x2277
    3338:	81 30       	cpi	r24, 0x01	; 1
    333a:	11 f4       	brne	.+4      	; 0x3340 <pneOperationMode+0x23e>
    333c:	10 92 77 22 	sts	0x2277, r1
    3340:	80 91 71 22 	lds	r24, 0x2271
    3344:	81 30       	cpi	r24, 0x01	; 1
    3346:	11 f5       	brne	.+68     	; 0x338c <pneOperationMode+0x28a>
    3348:	80 91 72 22 	lds	r24, 0x2272
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	f1 f4       	brne	.+60     	; 0x338c <pneOperationMode+0x28a>
    3350:	80 91 d5 22 	lds	r24, 0x22D5
    3354:	90 91 d6 22 	lds	r25, 0x22D6
    3358:	01 96       	adiw	r24, 0x01	; 1
    335a:	90 93 d6 22 	sts	0x22D6, r25
    335e:	80 93 d5 22 	sts	0x22D5, r24
    3362:	89 3e       	cpi	r24, 0xE9	; 233
    3364:	9d 4f       	sbci	r25, 0xFD	; 253
    3366:	08 f4       	brcc	.+2      	; 0x336a <pneOperationMode+0x268>
    3368:	00 c2       	rjmp	.+1024   	; 0x376a <pneOperationMode+0x668>
    336a:	82 e0       	ldi	r24, 0x02	; 2
    336c:	90 e1       	ldi	r25, 0x10	; 16
    336e:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <readE2prom>
    3372:	08 2f       	mov	r16, r24
    3374:	03 60       	ori	r16, 0x03	; 3
    3376:	00 93 6d 22 	sts	0x226D, r16
    337a:	20 e1       	ldi	r18, 0x10	; 16
    337c:	42 e0       	ldi	r20, 0x02	; 2
    337e:	65 e4       	ldi	r22, 0x45	; 69
    3380:	8e ea       	ldi	r24, 0xAE	; 174
    3382:	0e 94 18 22 	call	0x4430	; 0x4430 <PNEWELSE2promWrite>
    3386:	0e 94 54 33 	call	0x66a8	; 0x66a8 <reboot_to_rf>
    338a:	ef c1       	rjmp	.+990    	; 0x376a <pneOperationMode+0x668>
    338c:	10 92 d6 22 	sts	0x22D6, r1
    3390:	10 92 d5 22 	sts	0x22D5, r1
    3394:	ea c1       	rjmp	.+980    	; 0x376a <pneOperationMode+0x668>
    3396:	ce e6       	ldi	r28, 0x6E	; 110
    3398:	d2 e2       	ldi	r29, 0x22	; 34
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	8a 8b       	std	Y+18, r24	; 0x12
    339e:	60 91 98 22 	lds	r22, 0x2298
    33a2:	70 91 99 22 	lds	r23, 0x2299
    33a6:	80 91 9a 22 	lds	r24, 0x229A
    33aa:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	8b 87       	std	Y+11, r24	; 0x0b
    33b2:	10 92 ba 22 	sts	0x22BA, r1
    33b6:	80 93 96 22 	sts	0x2296, r24
    33ba:	80 91 64 23 	lds	r24, 0x2364
    33be:	81 11       	cpse	r24, r1
    33c0:	11 c0       	rjmp	.+34     	; 0x33e4 <pneOperationMode+0x2e2>
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	80 93 64 23 	sts	0x2364, r24
    33ce:	84 e6       	ldi	r24, 0x64	; 100
    33d0:	0e 94 04 35 	call	0x6a08	; 0x6a08 <pend_to_rf>
    33d4:	60 91 eb 22 	lds	r22, 0x22EB
    33d8:	70 91 ec 22 	lds	r23, 0x22EC
    33dc:	80 91 ed 22 	lds	r24, 0x22ED
    33e0:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
    33e4:	80 91 8d 22 	lds	r24, 0x228D
    33e8:	81 30       	cpi	r24, 0x01	; 1
    33ea:	49 f5       	brne	.+82     	; 0x343e <pneOperationMode+0x33c>
    33ec:	83 e0       	ldi	r24, 0x03	; 3
    33ee:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    33f2:	62 e0       	ldi	r22, 0x02	; 2
    33f4:	81 e6       	ldi	r24, 0x61	; 97
    33f6:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <test_completed>
    33fa:	10 92 64 23 	sts	0x2364, r1
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	80 93 ef 22 	sts	0x22EF, r24
    3404:	10 92 c4 22 	sts	0x22C4, r1
    3408:	ce e6       	ldi	r28, 0x6E	; 110
    340a:	d2 e2       	ldi	r29, 0x22	; 34
    340c:	1a 86       	std	Y+10, r1	; 0x0a
    340e:	60 91 eb 22 	lds	r22, 0x22EB
    3412:	70 91 ec 22 	lds	r23, 0x22EC
    3416:	80 91 ed 22 	lds	r24, 0x22ED
    341a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    341e:	1b 86       	std	Y+11, r1	; 0x0b
    3420:	60 91 51 23 	lds	r22, 0x2351
    3424:	70 91 52 23 	lds	r23, 0x2352
    3428:	80 91 53 23 	lds	r24, 0x2353
    342c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    3430:	91 e0       	ldi	r25, 0x01	; 1
    3432:	81 11       	cpse	r24, r1
    3434:	01 c0       	rjmp	.+2      	; 0x3438 <pneOperationMode+0x336>
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	90 93 6e 22 	sts	0x226E, r25
    343c:	96 c1       	rjmp	.+812    	; 0x376a <pneOperationMode+0x668>
    343e:	80 91 7e 22 	lds	r24, 0x227E
    3442:	81 30       	cpi	r24, 0x01	; 1
    3444:	49 f5       	brne	.+82     	; 0x3498 <pneOperationMode+0x396>
    3446:	83 e0       	ldi	r24, 0x03	; 3
    3448:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    344c:	62 e0       	ldi	r22, 0x02	; 2
    344e:	8e e6       	ldi	r24, 0x6E	; 110
    3450:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <test_completed>
    3454:	10 92 64 23 	sts	0x2364, r1
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	80 93 ef 22 	sts	0x22EF, r24
    345e:	80 93 c4 22 	sts	0x22C4, r24
    3462:	ce e6       	ldi	r28, 0x6E	; 110
    3464:	d2 e2       	ldi	r29, 0x22	; 34
    3466:	1a 86       	std	Y+10, r1	; 0x0a
    3468:	60 91 eb 22 	lds	r22, 0x22EB
    346c:	70 91 ec 22 	lds	r23, 0x22EC
    3470:	80 91 ed 22 	lds	r24, 0x22ED
    3474:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    3478:	1b 86       	std	Y+11, r1	; 0x0b
    347a:	60 91 51 23 	lds	r22, 0x2351
    347e:	70 91 52 23 	lds	r23, 0x2352
    3482:	80 91 53 23 	lds	r24, 0x2353
    3486:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    348a:	91 e0       	ldi	r25, 0x01	; 1
    348c:	81 11       	cpse	r24, r1
    348e:	01 c0       	rjmp	.+2      	; 0x3492 <pneOperationMode+0x390>
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	90 93 6e 22 	sts	0x226E, r25
    3496:	69 c1       	rjmp	.+722    	; 0x376a <pneOperationMode+0x668>
    3498:	80 91 78 22 	lds	r24, 0x2278
    349c:	81 30       	cpi	r24, 0x01	; 1
    349e:	09 f4       	brne	.+2      	; 0x34a2 <pneOperationMode+0x3a0>
    34a0:	64 c1       	rjmp	.+712    	; 0x376a <pneOperationMode+0x668>
    34a2:	83 e0       	ldi	r24, 0x03	; 3
    34a4:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    34a8:	62 e0       	ldi	r22, 0x02	; 2
    34aa:	83 e7       	ldi	r24, 0x73	; 115
    34ac:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <test_completed>
    34b0:	10 92 64 23 	sts	0x2364, r1
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	80 93 ef 22 	sts	0x22EF, r24
    34ba:	80 93 c4 22 	sts	0x22C4, r24
    34be:	ce e6       	ldi	r28, 0x6E	; 110
    34c0:	d2 e2       	ldi	r29, 0x22	; 34
    34c2:	1a 86       	std	Y+10, r1	; 0x0a
    34c4:	60 91 eb 22 	lds	r22, 0x22EB
    34c8:	70 91 ec 22 	lds	r23, 0x22EC
    34cc:	80 91 ed 22 	lds	r24, 0x22ED
    34d0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
    34d4:	1b 86       	std	Y+11, r1	; 0x0b
    34d6:	60 91 51 23 	lds	r22, 0x2351
    34da:	70 91 52 23 	lds	r23, 0x2352
    34de:	80 91 53 23 	lds	r24, 0x2353
    34e2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    34e6:	91 e0       	ldi	r25, 0x01	; 1
    34e8:	81 11       	cpse	r24, r1
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <pneOperationMode+0x3ec>
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	90 93 6e 22 	sts	0x226E, r25
    34f2:	3b c1       	rjmp	.+630    	; 0x376a <pneOperationMode+0x668>
    34f4:	ee e6       	ldi	r30, 0x6E	; 110
    34f6:	f2 e2       	ldi	r31, 0x22	; 34
    34f8:	84 e0       	ldi	r24, 0x04	; 4
    34fa:	82 8b       	std	Z+18, r24	; 0x12
    34fc:	10 92 ba 22 	sts	0x22BA, r1
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	80 93 96 22 	sts	0x2296, r24
    3506:	82 e0       	ldi	r24, 0x02	; 2
    3508:	83 8b       	std	Z+19, r24	; 0x13
    350a:	80 91 64 23 	lds	r24, 0x2364
    350e:	81 11       	cpse	r24, r1
    3510:	08 c0       	rjmp	.+16     	; 0x3522 <pneOperationMode+0x420>
    3512:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	80 93 64 23 	sts	0x2364, r24
    351c:	83 e6       	ldi	r24, 0x63	; 99
    351e:	0e 94 04 35 	call	0x6a08	; 0x6a08 <pend_to_rf>
    3522:	80 91 6e 22 	lds	r24, 0x226E
    3526:	81 30       	cpi	r24, 0x01	; 1
    3528:	a9 f4       	brne	.+42     	; 0x3554 <pneOperationMode+0x452>
    352a:	80 91 01 23 	lds	r24, 0x2301
    352e:	81 11       	cpse	r24, r1
    3530:	11 c0       	rjmp	.+34     	; 0x3554 <pneOperationMode+0x452>
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    3538:	62 e0       	ldi	r22, 0x02	; 2
    353a:	81 e6       	ldi	r24, 0x61	; 97
    353c:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <test_completed>
    3540:	10 92 64 23 	sts	0x2364, r1
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	80 93 ef 22 	sts	0x22EF, r24
    354a:	80 93 c4 22 	sts	0x22C4, r24
    354e:	10 92 77 22 	sts	0x2277, r1
    3552:	0b c1       	rjmp	.+534    	; 0x376a <pneOperationMode+0x668>
    3554:	80 91 68 22 	lds	r24, 0x2268
    3558:	90 91 6f 22 	lds	r25, 0x226F
    355c:	98 17       	cp	r25, r24
    355e:	88 f0       	brcs	.+34     	; 0x3582 <pneOperationMode+0x480>
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    3566:	62 e0       	ldi	r22, 0x02	; 2
    3568:	8e e6       	ldi	r24, 0x6E	; 110
    356a:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <test_completed>
    356e:	10 92 64 23 	sts	0x2364, r1
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	80 93 ef 22 	sts	0x22EF, r24
    3578:	80 93 c4 22 	sts	0x22C4, r24
    357c:	10 92 77 22 	sts	0x2277, r1
    3580:	f4 c0       	rjmp	.+488    	; 0x376a <pneOperationMode+0x668>
    3582:	80 91 77 22 	lds	r24, 0x2277
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	09 f4       	brne	.+2      	; 0x358c <pneOperationMode+0x48a>
    358a:	ef c0       	rjmp	.+478    	; 0x376a <pneOperationMode+0x668>
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <store>
    3592:	62 e0       	ldi	r22, 0x02	; 2
    3594:	83 e7       	ldi	r24, 0x73	; 115
    3596:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <test_completed>
    359a:	10 92 64 23 	sts	0x2364, r1
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	80 93 ef 22 	sts	0x22EF, r24
    35a4:	80 93 c4 22 	sts	0x22C4, r24
    35a8:	10 92 77 22 	sts	0x2277, r1
    35ac:	de c0       	rjmp	.+444    	; 0x376a <pneOperationMode+0x668>
    35ae:	80 91 ba 22 	lds	r24, 0x22BA
    35b2:	81 11       	cpse	r24, r1
    35b4:	08 c0       	rjmp	.+16     	; 0x35c6 <pneOperationMode+0x4c4>
    35b6:	83 e4       	ldi	r24, 0x43	; 67
    35b8:	93 e2       	ldi	r25, 0x23	; 35
    35ba:	2a db       	rcall	.-2476   	; 0x2c10 <SYS_TimerStart>
    35bc:	80 91 ba 22 	lds	r24, 0x22BA
    35c0:	8f 5f       	subi	r24, 0xFF	; 255
    35c2:	80 93 ba 22 	sts	0x22BA, r24
    35c6:	80 91 d4 22 	lds	r24, 0x22D4
    35ca:	89 30       	cpi	r24, 0x09	; 9
    35cc:	80 f0       	brcs	.+32     	; 0x35ee <pneOperationMode+0x4ec>
    35ce:	60 91 a8 22 	lds	r22, 0x22A8
    35d2:	70 91 a9 22 	lds	r23, 0x22A9
    35d6:	80 91 aa 22 	lds	r24, 0x22AA
    35da:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    35de:	91 e0       	ldi	r25, 0x01	; 1
    35e0:	81 11       	cpse	r24, r1
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	90 93 72 22 	sts	0x2272, r25
    35e8:	10 92 d4 22 	sts	0x22D4, r1
    35ec:	03 c0       	rjmp	.+6      	; 0x35f4 <pneOperationMode+0x4f2>
    35ee:	8f 5f       	subi	r24, 0xFF	; 255
    35f0:	80 93 d4 22 	sts	0x22D4, r24
    35f4:	80 91 72 22 	lds	r24, 0x2272
    35f8:	81 11       	cpse	r24, r1
    35fa:	08 c0       	rjmp	.+16     	; 0x360c <pneOperationMode+0x50a>
    35fc:	83 e4       	ldi	r24, 0x43	; 67
    35fe:	93 e2       	ldi	r25, 0x23	; 35
    3600:	b0 da       	rcall	.-2720   	; 0x2b62 <SYS_TimerStop>
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	80 93 c4 22 	sts	0x22C4, r24
    3608:	10 92 ba 22 	sts	0x22BA, r1
    360c:	80 91 6e 22 	lds	r24, 0x226E
    3610:	81 30       	cpi	r24, 0x01	; 1
    3612:	09 f0       	breq	.+2      	; 0x3616 <pneOperationMode+0x514>
    3614:	aa c0       	rjmp	.+340    	; 0x376a <pneOperationMode+0x668>
    3616:	80 91 01 23 	lds	r24, 0x2301
    361a:	81 11       	cpse	r24, r1
    361c:	a6 c0       	rjmp	.+332    	; 0x376a <pneOperationMode+0x668>
    361e:	10 92 c4 22 	sts	0x22C4, r1
    3622:	10 92 ba 22 	sts	0x22BA, r1
    3626:	a1 c0       	rjmp	.+322    	; 0x376a <pneOperationMode+0x668>
    3628:	8d e7       	ldi	r24, 0x7D	; 125
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	a0 e0       	ldi	r26, 0x00	; 0
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	80 93 08 23 	sts	0x2308, r24
    3634:	90 93 09 23 	sts	0x2309, r25
    3638:	a0 93 0a 23 	sts	0x230A, r26
    363c:	b0 93 0b 23 	sts	0x230B, r27
    3640:	8a ef       	ldi	r24, 0xFA	; 250
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a0 e0       	ldi	r26, 0x00	; 0
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	80 93 e2 22 	sts	0x22E2, r24
    364c:	90 93 e3 22 	sts	0x22E3, r25
    3650:	a0 93 e4 22 	sts	0x22E4, r26
    3654:	b0 93 e5 22 	sts	0x22E5, r27
    3658:	10 92 96 22 	sts	0x2296, r1
    365c:	82 e0       	ldi	r24, 0x02	; 2
    365e:	80 93 80 22 	sts	0x2280, r24
    3662:	80 91 50 23 	lds	r24, 0x2350
    3666:	81 30       	cpi	r24, 0x01	; 1
    3668:	31 f0       	breq	.+12     	; 0x3676 <pneOperationMode+0x574>
    366a:	c0 f1       	brcs	.+112    	; 0x36dc <pneOperationMode+0x5da>
    366c:	82 30       	cpi	r24, 0x02	; 2
    366e:	51 f0       	breq	.+20     	; 0x3684 <pneOperationMode+0x582>
    3670:	83 30       	cpi	r24, 0x03	; 3
    3672:	89 f0       	breq	.+34     	; 0x3696 <pneOperationMode+0x594>
    3674:	30 c0       	rjmp	.+96     	; 0x36d6 <pneOperationMode+0x5d4>
    3676:	84 e5       	ldi	r24, 0x54	; 84
    3678:	93 e2       	ldi	r25, 0x23	; 35
    367a:	73 da       	rcall	.-2842   	; 0x2b62 <SYS_TimerStop>
    367c:	82 e0       	ldi	r24, 0x02	; 2
    367e:	80 93 50 23 	sts	0x2350, r24
    3682:	2c c0       	rjmp	.+88     	; 0x36dc <pneOperationMode+0x5da>
    3684:	60 e1       	ldi	r22, 0x10	; 16
    3686:	8c ee       	ldi	r24, 0xEC	; 236
    3688:	91 e2       	ldi	r25, 0x21	; 33
    368a:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <WPS_OK_Alert>
    368e:	83 e0       	ldi	r24, 0x03	; 3
    3690:	80 93 50 23 	sts	0x2350, r24
    3694:	23 c0       	rjmp	.+70     	; 0x36dc <pneOperationMode+0x5da>
    3696:	80 91 be 22 	lds	r24, 0x22BE
    369a:	90 91 bf 22 	lds	r25, 0x22BF
    369e:	81 35       	cpi	r24, 0x51	; 81
    36a0:	23 ec       	ldi	r18, 0xC3	; 195
    36a2:	92 07       	cpc	r25, r18
    36a4:	90 f0       	brcs	.+36     	; 0x36ca <pneOperationMode+0x5c8>
    36a6:	80 91 6a 23 	lds	r24, 0x236A
    36aa:	81 ff       	sbrs	r24, 1
    36ac:	0b c0       	rjmp	.+22     	; 0x36c4 <pneOperationMode+0x5c2>
    36ae:	80 91 6a 23 	lds	r24, 0x236A
    36b2:	8d 7f       	andi	r24, 0xFD	; 253
    36b4:	80 93 6a 23 	sts	0x236A, r24
    36b8:	60 91 6a 23 	lds	r22, 0x236A
    36bc:	82 e0       	ldi	r24, 0x02	; 2
    36be:	90 e1       	ldi	r25, 0x10	; 16
    36c0:	0e 94 16 31 	call	0x622c	; 0x622c <writeE2prom>
    36c4:	0e 94 54 33 	call	0x66a8	; 0x66a8 <reboot_to_rf>
    36c8:	09 c0       	rjmp	.+18     	; 0x36dc <pneOperationMode+0x5da>
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	90 93 bf 22 	sts	0x22BF, r25
    36d0:	80 93 be 22 	sts	0x22BE, r24
    36d4:	03 c0       	rjmp	.+6      	; 0x36dc <pneOperationMode+0x5da>
    36d6:	88 e0       	ldi	r24, 0x08	; 8
    36d8:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    36dc:	80 91 d4 22 	lds	r24, 0x22D4
    36e0:	89 30       	cpi	r24, 0x09	; 9
    36e2:	80 f0       	brcs	.+32     	; 0x3704 <pneOperationMode+0x602>
    36e4:	60 91 a8 22 	lds	r22, 0x22A8
    36e8:	70 91 a9 22 	lds	r23, 0x22A9
    36ec:	80 91 aa 22 	lds	r24, 0x22AA
    36f0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    36f4:	91 e0       	ldi	r25, 0x01	; 1
    36f6:	81 11       	cpse	r24, r1
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	90 93 72 22 	sts	0x2272, r25
    36fe:	10 92 d4 22 	sts	0x22D4, r1
    3702:	03 c0       	rjmp	.+6      	; 0x370a <pneOperationMode+0x608>
    3704:	8f 5f       	subi	r24, 0xFF	; 255
    3706:	80 93 d4 22 	sts	0x22D4, r24
    370a:	80 91 72 22 	lds	r24, 0x2272
    370e:	81 30       	cpi	r24, 0x01	; 1
    3710:	51 f4       	brne	.+20     	; 0x3726 <pneOperationMode+0x624>
    3712:	80 91 ba 22 	lds	r24, 0x22BA
    3716:	81 30       	cpi	r24, 0x01	; 1
    3718:	91 f4       	brne	.+36     	; 0x373e <pneOperationMode+0x63c>
    371a:	83 e4       	ldi	r24, 0x43	; 67
    371c:	93 e2       	ldi	r25, 0x23	; 35
    371e:	78 da       	rcall	.-2832   	; 0x2c10 <SYS_TimerStart>
    3720:	10 92 ba 22 	sts	0x22BA, r1
    3724:	0c c0       	rjmp	.+24     	; 0x373e <pneOperationMode+0x63c>
    3726:	81 11       	cpse	r24, r1
    3728:	0a c0       	rjmp	.+20     	; 0x373e <pneOperationMode+0x63c>
    372a:	80 91 ba 22 	lds	r24, 0x22BA
    372e:	81 11       	cpse	r24, r1
    3730:	03 c0       	rjmp	.+6      	; 0x3738 <pneOperationMode+0x636>
    3732:	83 e4       	ldi	r24, 0x43	; 67
    3734:	93 e2       	ldi	r25, 0x23	; 35
    3736:	15 da       	rcall	.-3030   	; 0x2b62 <SYS_TimerStop>
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	80 93 ba 22 	sts	0x22BA, r24
    373e:	80 91 6e 22 	lds	r24, 0x226E
    3742:	81 30       	cpi	r24, 0x01	; 1
    3744:	91 f4       	brne	.+36     	; 0x376a <pneOperationMode+0x668>
    3746:	80 91 01 23 	lds	r24, 0x2301
    374a:	81 11       	cpse	r24, r1
    374c:	0e c0       	rjmp	.+28     	; 0x376a <pneOperationMode+0x668>
    374e:	10 92 50 23 	sts	0x2350, r1
    3752:	10 92 c4 22 	sts	0x22C4, r1
    3756:	0e 94 da 01 	call	0x3b4	; 0x3b4 <APP_IbLoadSettings>
    375a:	0e 94 0c 03 	call	0x618	; 0x618 <APP_NwkInit>
    375e:	8b e9       	ldi	r24, 0x9B	; 155
    3760:	92 e2       	ldi	r25, 0x22	; 34
    3762:	ff d9       	rcall	.-3074   	; 0x2b62 <SYS_TimerStop>
    3764:	84 e5       	ldi	r24, 0x54	; 84
    3766:	93 e2       	ldi	r25, 0x23	; 35
    3768:	fc d9       	rcall	.-3080   	; 0x2b62 <SYS_TimerStop>
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	0f 91       	pop	r16
    3770:	08 95       	ret

00003772 <pneOutgoingData>:
    3772:	80 91 fd 22 	lds	r24, 0x22FD
    3776:	88 23       	and	r24, r24
    3778:	71 f0       	breq	.+28     	; 0x3796 <pneOutgoingData+0x24>
    377a:	80 91 ef 22 	lds	r24, 0x22EF
    377e:	88 23       	and	r24, r24
    3780:	19 f0       	breq	.+6      	; 0x3788 <pneOutgoingData+0x16>
    3782:	10 92 ef 22 	sts	0x22EF, r1
    3786:	02 c0       	rjmp	.+4      	; 0x378c <pneOutgoingData+0x1a>
    3788:	0e 94 1d 34 	call	0x683a	; 0x683a <status_send_to_rf>
    378c:	86 ec       	ldi	r24, 0xC6	; 198
    378e:	92 e2       	ldi	r25, 0x22	; 34
    3790:	3f da       	rcall	.-2946   	; 0x2c10 <SYS_TimerStart>
    3792:	10 92 fd 22 	sts	0x22FD, r1
    3796:	08 95       	ret

00003798 <manual_btn_handler>:
    3798:	80 91 78 22 	lds	r24, 0x2278
    379c:	81 11       	cpse	r24, r1
    379e:	19 c0       	rjmp	.+50     	; 0x37d2 <manual_btn_handler+0x3a>
    37a0:	80 91 76 22 	lds	r24, 0x2276
    37a4:	81 30       	cpi	r24, 0x01	; 1
    37a6:	21 f0       	breq	.+8      	; 0x37b0 <manual_btn_handler+0x18>
    37a8:	80 91 71 22 	lds	r24, 0x2271
    37ac:	81 30       	cpi	r24, 0x01	; 1
    37ae:	49 f4       	brne	.+18     	; 0x37c2 <manual_btn_handler+0x2a>
    37b0:	60 91 eb 22 	lds	r22, 0x22EB
    37b4:	70 91 ec 22 	lds	r23, 0x22EC
    37b8:	80 91 ed 22 	lds	r24, 0x22ED
    37bc:	0c 94 93 09 	jmp	0x1326	; 0x1326 <gpio_set>
    37c0:	08 95       	ret
    37c2:	60 91 eb 22 	lds	r22, 0x22EB
    37c6:	70 91 ec 22 	lds	r23, 0x22EC
    37ca:	80 91 ed 22 	lds	r24, 0x22ED
    37ce:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <gpio_clr>
    37d2:	08 95       	ret

000037d4 <manual_btn_isr>:
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	80 93 6f 23 	sts	0x236F, r24
    37da:	de cf       	rjmp	.-68     	; 0x3798 <manual_btn_handler>
    37dc:	08 95       	ret

000037de <pneGetStatus>:
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	80 91 97 22 	lds	r24, 0x2297
    37e6:	88 23       	and	r24, r24
    37e8:	09 f4       	brne	.+2      	; 0x37ec <pneGetStatus+0xe>
    37ea:	60 c0       	rjmp	.+192    	; 0x38ac <pneGetStatus+0xce>
    37ec:	0e 94 06 38 	call	0x700c	; 0x700c <pneBatteryAverage>
    37f0:	ce e6       	ldi	r28, 0x6E	; 110
    37f2:	d2 e2       	ldi	r29, 0x22	; 34
    37f4:	89 83       	std	Y+1, r24	; 0x01
    37f6:	73 d6       	rcall	.+3302   	; 0x44de <PNEWELSTemperatureRead>
    37f8:	8e 83       	std	Y+6, r24	; 0x06
    37fa:	80 ef       	ldi	r24, 0xF0	; 240
    37fc:	8f 87       	std	Y+15, r24	; 0x0f
    37fe:	10 92 97 22 	sts	0x2297, r1
    3802:	eb e7       	ldi	r30, 0x7B	; 123
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	80 81       	ld	r24, Z
    3808:	87 7f       	andi	r24, 0xF7	; 247
    380a:	80 83       	st	Z, r24
    380c:	81 e6       	ldi	r24, 0x61	; 97
    380e:	80 93 7c 00 	sts	0x007C, r24
    3812:	ea e7       	ldi	r30, 0x7A	; 122
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	80 81       	ld	r24, Z
    3818:	80 64       	ori	r24, 0x40	; 64
    381a:	80 83       	st	Z, r24
    381c:	80 81       	ld	r24, Z
    381e:	86 fd       	sbrc	r24, 6
    3820:	fd cf       	rjmp	.-6      	; 0x381c <pneGetStatus+0x3e>
    3822:	80 91 79 00 	lds	r24, 0x0079
    3826:	24 e2       	ldi	r18, 0x24	; 36
    3828:	82 9f       	mul	r24, r18
    382a:	c0 01       	movw	r24, r0
    382c:	11 24       	eor	r1, r1
    382e:	6f ef       	ldi	r22, 0xFF	; 255
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	0e 94 47 4d 	call	0x9a8e	; 0x9a8e <__divmodhi4>
    3836:	60 93 70 22 	sts	0x2270, r22
    383a:	60 91 66 23 	lds	r22, 0x2366
    383e:	70 91 67 23 	lds	r23, 0x2367
    3842:	80 91 68 23 	lds	r24, 0x2368
    3846:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    384a:	91 e0       	ldi	r25, 0x01	; 1
    384c:	81 11       	cpse	r24, r1
    384e:	01 c0       	rjmp	.+2      	; 0x3852 <pneGetStatus+0x74>
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	90 93 8d 22 	sts	0x228D, r25
    3856:	20 91 6f 22 	lds	r18, 0x226F
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	80 91 65 23 	lds	r24, 0x2365
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0a 97       	sbiw	r24, 0x0a	; 10
    3864:	28 17       	cp	r18, r24
    3866:	39 07       	cpc	r19, r25
    3868:	34 f4       	brge	.+12     	; 0x3876 <pneGetStatus+0x98>
    386a:	ee e6       	ldi	r30, 0x6E	; 110
    386c:	f2 e2       	ldi	r31, 0x22	; 34
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	80 8b       	std	Z+16, r24	; 0x10
    3872:	11 8a       	std	Z+17, r1	; 0x11
    3874:	0d c0       	rjmp	.+26     	; 0x3890 <pneGetStatus+0xb2>
    3876:	80 91 65 23 	lds	r24, 0x2365
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0a 96       	adiw	r24, 0x0a	; 10
    387e:	28 17       	cp	r18, r24
    3880:	39 07       	cpc	r19, r25
    3882:	1c f0       	brlt	.+6      	; 0x388a <pneGetStatus+0xac>
    3884:	10 92 7e 22 	sts	0x227E, r1
    3888:	03 c0       	rjmp	.+6      	; 0x3890 <pneGetStatus+0xb2>
    388a:	82 e0       	ldi	r24, 0x02	; 2
    388c:	80 93 7e 22 	sts	0x227E, r24
    3890:	80 91 74 22 	lds	r24, 0x2274
    3894:	8d 33       	cpi	r24, 0x3D	; 61
    3896:	18 f0       	brcs	.+6      	; 0x389e <pneGetStatus+0xc0>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    389e:	80 91 6f 22 	lds	r24, 0x226F
    38a2:	85 36       	cpi	r24, 0x65	; 101
    38a4:	18 f4       	brcc	.+6      	; 0x38ac <pneGetStatus+0xce>
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    38ac:	80 91 d7 22 	lds	r24, 0x22D7
    38b0:	81 30       	cpi	r24, 0x01	; 1
    38b2:	29 f0       	breq	.+10     	; 0x38be <pneGetStatus+0xe0>
    38b4:	80 91 6f 23 	lds	r24, 0x236F
    38b8:	81 30       	cpi	r24, 0x01	; 1
    38ba:	09 f0       	breq	.+2      	; 0x38be <pneGetStatus+0xe0>
    38bc:	b4 c0       	rjmp	.+360    	; 0x3a26 <pneGetStatus+0x248>
    38be:	80 91 d4 22 	lds	r24, 0x22D4
    38c2:	89 30       	cpi	r24, 0x09	; 9
    38c4:	08 f4       	brcc	.+2      	; 0x38c8 <pneGetStatus+0xea>
    38c6:	ac c0       	rjmp	.+344    	; 0x3a20 <pneGetStatus+0x242>
    38c8:	60 91 0f 23 	lds	r22, 0x230F
    38cc:	70 91 10 23 	lds	r23, 0x2310
    38d0:	80 91 11 23 	lds	r24, 0x2311
    38d4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    38d8:	91 e0       	ldi	r25, 0x01	; 1
    38da:	81 11       	cpse	r24, r1
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	90 93 71 22 	sts	0x2271, r25
    38e2:	5a df       	rcall	.-332    	; 0x3798 <manual_btn_handler>
    38e4:	60 91 a8 22 	lds	r22, 0x22A8
    38e8:	70 91 a9 22 	lds	r23, 0x22A9
    38ec:	80 91 aa 22 	lds	r24, 0x22AA
    38f0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	81 11       	cpse	r24, r1
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	90 93 72 22 	sts	0x2272, r25
    38fe:	60 91 ab 22 	lds	r22, 0x22AB
    3902:	70 91 ac 22 	lds	r23, 0x22AC
    3906:	80 91 ad 22 	lds	r24, 0x22AD
    390a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	81 11       	cpse	r24, r1
    3912:	01 c0       	rjmp	.+2      	; 0x3916 <pneGetStatus+0x138>
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	90 93 73 22 	sts	0x2273, r25
    391a:	60 91 51 23 	lds	r22, 0x2351
    391e:	70 91 52 23 	lds	r23, 0x2352
    3922:	80 91 53 23 	lds	r24, 0x2353
    3926:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    392a:	91 e0       	ldi	r25, 0x01	; 1
    392c:	81 11       	cpse	r24, r1
    392e:	01 c0       	rjmp	.+2      	; 0x3932 <pneGetStatus+0x154>
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	90 93 6e 22 	sts	0x226E, r25
    3936:	60 91 66 23 	lds	r22, 0x2366
    393a:	70 91 67 23 	lds	r23, 0x2367
    393e:	80 91 68 23 	lds	r24, 0x2368
    3942:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    3946:	91 e0       	ldi	r25, 0x01	; 1
    3948:	81 11       	cpse	r24, r1
    394a:	01 c0       	rjmp	.+2      	; 0x394e <pneGetStatus+0x170>
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	90 93 8d 22 	sts	0x228D, r25
    3952:	60 91 61 23 	lds	r22, 0x2361
    3956:	70 91 62 23 	lds	r23, 0x2362
    395a:	80 91 63 23 	lds	r24, 0x2363
    395e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    3962:	91 e0       	ldi	r25, 0x01	; 1
    3964:	81 11       	cpse	r24, r1
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	90 93 8e 22 	sts	0x228E, r25
    396c:	60 91 b4 22 	lds	r22, 0x22B4
    3970:	70 91 b5 22 	lds	r23, 0x22B5
    3974:	80 91 b6 22 	lds	r24, 0x22B6
    3978:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    397c:	91 e0       	ldi	r25, 0x01	; 1
    397e:	81 11       	cpse	r24, r1
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	90 93 8f 22 	sts	0x228F, r25
    3986:	60 91 12 23 	lds	r22, 0x2312
    398a:	70 91 13 23 	lds	r23, 0x2313
    398e:	80 91 14 23 	lds	r24, 0x2314
    3992:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    3996:	91 e0       	ldi	r25, 0x01	; 1
    3998:	81 11       	cpse	r24, r1
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	90 93 90 22 	sts	0x2290, r25
    39a0:	60 91 6a 22 	lds	r22, 0x226A
    39a4:	70 91 6b 22 	lds	r23, 0x226B
    39a8:	80 91 6c 22 	lds	r24, 0x226C
    39ac:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    39b2:	81 11       	cpse	r24, r1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	90 93 91 22 	sts	0x2291, r25
    39ba:	60 91 c1 22 	lds	r22, 0x22C1
    39be:	70 91 c2 22 	lds	r23, 0x22C2
    39c2:	80 91 c3 22 	lds	r24, 0x22C3
    39c6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    39ca:	91 e0       	ldi	r25, 0x01	; 1
    39cc:	81 11       	cpse	r24, r1
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	90 93 92 22 	sts	0x2292, r25
    39d4:	80 91 76 22 	lds	r24, 0x2276
    39d8:	81 30       	cpi	r24, 0x01	; 1
    39da:	21 f0       	breq	.+8      	; 0x39e4 <pneGetStatus+0x206>
    39dc:	80 91 71 22 	lds	r24, 0x2271
    39e0:	81 30       	cpi	r24, 0x01	; 1
    39e2:	39 f4       	brne	.+14     	; 0x39f2 <pneGetStatus+0x214>
    39e4:	80 91 6e 22 	lds	r24, 0x226E
    39e8:	81 11       	cpse	r24, r1
    39ea:	03 c0       	rjmp	.+6      	; 0x39f2 <pneGetStatus+0x214>
    39ec:	85 e0       	ldi	r24, 0x05	; 5
    39ee:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    39f2:	10 92 d7 22 	sts	0x22D7, r1
    39f6:	10 92 d4 22 	sts	0x22D4, r1
    39fa:	80 91 6e 22 	lds	r24, 0x226E
    39fe:	81 11       	cpse	r24, r1
    3a00:	06 c0       	rjmp	.+12     	; 0x3a0e <pneGetStatus+0x230>
    3a02:	80 91 8d 22 	lds	r24, 0x228D
    3a06:	81 11       	cpse	r24, r1
    3a08:	02 c0       	rjmp	.+4      	; 0x3a0e <pneGetStatus+0x230>
    3a0a:	10 92 01 23 	sts	0x2301, r1
    3a0e:	80 91 6f 23 	lds	r24, 0x236F
    3a12:	81 30       	cpi	r24, 0x01	; 1
    3a14:	41 f4       	brne	.+16     	; 0x3a26 <pneGetStatus+0x248>
    3a16:	80 93 fd 22 	sts	0x22FD, r24
    3a1a:	10 92 6f 23 	sts	0x236F, r1
    3a1e:	03 c0       	rjmp	.+6      	; 0x3a26 <pneGetStatus+0x248>
    3a20:	8f 5f       	subi	r24, 0xFF	; 255
    3a22:	80 93 d4 22 	sts	0x22D4, r24
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	08 95       	ret

00003a2c <PNEWELSTaskHandler>:
    3a2c:	d8 de       	rcall	.-592    	; 0x37de <pneGetStatus>
    3a2e:	69 db       	rcall	.-2350   	; 0x3102 <pneOperationMode>
    3a30:	a0 ce       	rjmp	.-704    	; 0x3772 <pneOutgoingData>
    3a32:	08 95       	ret

00003a34 <pneIncomingData>:
    3a34:	8f 92       	push	r8
    3a36:	9f 92       	push	r9
    3a38:	af 92       	push	r10
    3a3a:	bf 92       	push	r11
    3a3c:	ff 92       	push	r15
    3a3e:	0f 93       	push	r16
    3a40:	1f 93       	push	r17
    3a42:	cf 93       	push	r28
    3a44:	df 93       	push	r29
    3a46:	cd b7       	in	r28, 0x3d	; 61
    3a48:	de b7       	in	r29, 0x3e	; 62
    3a4a:	29 97       	sbiw	r28, 0x09	; 9
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	8c 01       	movw	r16, r24
    3a58:	f6 2e       	mov	r15, r22
    3a5a:	0e 94 88 03 	call	0x710	; 0x710 <pneVerify_received>
    3a5e:	80 93 a6 23 	sts	0x23A6, r24
    3a62:	88 23       	and	r24, r24
    3a64:	09 f4       	brne	.+2      	; 0x3a68 <pneIncomingData+0x34>
    3a66:	86 c2       	rjmp	.+1292   	; 0x3f74 <pneIncomingData+0x540>
    3a68:	48 e0       	ldi	r20, 0x08	; 8
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	61 e4       	ldi	r22, 0x41	; 65
    3a6e:	72 e0       	ldi	r23, 0x02	; 2
    3a70:	c8 01       	movw	r24, r16
    3a72:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3a76:	89 2b       	or	r24, r25
    3a78:	a1 f4       	brne	.+40     	; 0x3aa2 <pneIncomingData+0x6e>
    3a7a:	80 91 c4 22 	lds	r24, 0x22C4
    3a7e:	81 11       	cpse	r24, r1
    3a80:	0a c0       	rjmp	.+20     	; 0x3a96 <pneIncomingData+0x62>
    3a82:	80 91 76 22 	lds	r24, 0x2276
    3a86:	81 30       	cpi	r24, 0x01	; 1
    3a88:	31 f4       	brne	.+12     	; 0x3a96 <pneIncomingData+0x62>
    3a8a:	83 e0       	ldi	r24, 0x03	; 3
    3a8c:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3a90:	ff 24       	eor	r15, r15
    3a92:	f3 94       	inc	r15
    3a94:	73 c2       	rjmp	.+1254   	; 0x3f7c <pneIncomingData+0x548>
    3a96:	0e 94 43 34 	call	0x6886	; 0x6886 <emergency_on_to_rf>
    3a9a:	7e de       	rcall	.-772    	; 0x3798 <manual_btn_handler>
    3a9c:	ff 24       	eor	r15, r15
    3a9e:	f3 94       	inc	r15
    3aa0:	6d c2       	rjmp	.+1242   	; 0x3f7c <pneIncomingData+0x548>
    3aa2:	48 e0       	ldi	r20, 0x08	; 8
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	6a e4       	ldi	r22, 0x4A	; 74
    3aa8:	72 e0       	ldi	r23, 0x02	; 2
    3aaa:	c8 01       	movw	r24, r16
    3aac:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3ab0:	89 2b       	or	r24, r25
    3ab2:	a1 f4       	brne	.+40     	; 0x3adc <pneIncomingData+0xa8>
    3ab4:	80 91 c4 22 	lds	r24, 0x22C4
    3ab8:	81 30       	cpi	r24, 0x01	; 1
    3aba:	51 f4       	brne	.+20     	; 0x3ad0 <pneIncomingData+0x9c>
    3abc:	80 91 76 22 	lds	r24, 0x2276
    3ac0:	81 11       	cpse	r24, r1
    3ac2:	06 c0       	rjmp	.+12     	; 0x3ad0 <pneIncomingData+0x9c>
    3ac4:	83 e0       	ldi	r24, 0x03	; 3
    3ac6:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3aca:	ff 24       	eor	r15, r15
    3acc:	f3 94       	inc	r15
    3ace:	56 c2       	rjmp	.+1196   	; 0x3f7c <pneIncomingData+0x548>
    3ad0:	0e 94 4d 34 	call	0x689a	; 0x689a <emergency_off_to_rf>
    3ad4:	61 de       	rcall	.-830    	; 0x3798 <manual_btn_handler>
    3ad6:	ff 24       	eor	r15, r15
    3ad8:	f3 94       	inc	r15
    3ada:	50 c2       	rjmp	.+1184   	; 0x3f7c <pneIncomingData+0x548>
    3adc:	48 e0       	ldi	r20, 0x08	; 8
    3ade:	50 e0       	ldi	r21, 0x00	; 0
    3ae0:	63 e5       	ldi	r22, 0x53	; 83
    3ae2:	72 e0       	ldi	r23, 0x02	; 2
    3ae4:	c8 01       	movw	r24, r16
    3ae6:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3aea:	89 2b       	or	r24, r25
    3aec:	09 f0       	breq	.+2      	; 0x3af0 <pneIncomingData+0xbc>
    3aee:	50 c0       	rjmp	.+160    	; 0x3b90 <pneIncomingData+0x15c>
    3af0:	2f e0       	ldi	r18, 0x0F	; 15
    3af2:	2f 15       	cp	r18, r15
    3af4:	30 f0       	brcs	.+12     	; 0x3b02 <pneIncomingData+0xce>
    3af6:	84 e0       	ldi	r24, 0x04	; 4
    3af8:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3afc:	ff 24       	eor	r15, r15
    3afe:	f3 94       	inc	r15
    3b00:	3d c2       	rjmp	.+1146   	; 0x3f7c <pneIncomingData+0x548>
    3b02:	6e ef       	ldi	r22, 0xFE	; 254
    3b04:	6f 0d       	add	r22, r15
    3b06:	c8 01       	movw	r24, r16
    3b08:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <crc_verify>
    3b0c:	f8 2e       	mov	r15, r24
    3b0e:	88 23       	and	r24, r24
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <pneIncomingData+0xe0>
    3b12:	32 c2       	rjmp	.+1124   	; 0x3f78 <pneIncomingData+0x544>
    3b14:	f8 01       	movw	r30, r16
    3b16:	21 85       	ldd	r18, Z+9	; 0x09
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	20 53       	subi	r18, 0x30	; 48
    3b1c:	31 09       	sbc	r19, r1
    3b1e:	88 ee       	ldi	r24, 0xE8	; 232
    3b20:	93 e0       	ldi	r25, 0x03	; 3
    3b22:	28 9f       	mul	r18, r24
    3b24:	a0 01       	movw	r20, r0
    3b26:	29 9f       	mul	r18, r25
    3b28:	50 0d       	add	r21, r0
    3b2a:	38 9f       	mul	r19, r24
    3b2c:	50 0d       	add	r21, r0
    3b2e:	11 24       	eor	r1, r1
    3b30:	22 85       	ldd	r18, Z+10	; 0x0a
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	20 53       	subi	r18, 0x30	; 48
    3b36:	31 09       	sbc	r19, r1
    3b38:	64 e6       	ldi	r22, 0x64	; 100
    3b3a:	62 9f       	mul	r22, r18
    3b3c:	c0 01       	movw	r24, r0
    3b3e:	63 9f       	mul	r22, r19
    3b40:	90 0d       	add	r25, r0
    3b42:	11 24       	eor	r1, r1
    3b44:	84 0f       	add	r24, r20
    3b46:	95 1f       	adc	r25, r21
    3b48:	24 85       	ldd	r18, Z+12	; 0x0c
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	20 53       	subi	r18, 0x30	; 48
    3b4e:	31 09       	sbc	r19, r1
    3b50:	ac 01       	movw	r20, r24
    3b52:	42 0f       	add	r20, r18
    3b54:	53 1f       	adc	r21, r19
    3b56:	23 85       	ldd	r18, Z+11	; 0x0b
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	20 53       	subi	r18, 0x30	; 48
    3b5c:	31 09       	sbc	r19, r1
    3b5e:	c9 01       	movw	r24, r18
    3b60:	88 0f       	add	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	22 0f       	add	r18, r18
    3b66:	33 1f       	adc	r19, r19
    3b68:	22 0f       	add	r18, r18
    3b6a:	33 1f       	adc	r19, r19
    3b6c:	22 0f       	add	r18, r18
    3b6e:	33 1f       	adc	r19, r19
    3b70:	28 0f       	add	r18, r24
    3b72:	39 1f       	adc	r19, r25
    3b74:	ca 01       	movw	r24, r20
    3b76:	82 0f       	add	r24, r18
    3b78:	93 1f       	adc	r25, r19
    3b7a:	8d 3f       	cpi	r24, 0xFD	; 253
    3b7c:	ff e0       	ldi	r31, 0x0F	; 15
    3b7e:	9f 07       	cpc	r25, r31
    3b80:	20 f0       	brcs	.+8      	; 0x3b8a <pneIncomingData+0x156>
    3b82:	84 e0       	ldi	r24, 0x04	; 4
    3b84:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3b88:	f9 c1       	rjmp	.+1010   	; 0x3f7c <pneIncomingData+0x548>
    3b8a:	0e 94 56 34 	call	0x68ac	; 0x68ac <eeprom_to_rf>
    3b8e:	f6 c1       	rjmp	.+1004   	; 0x3f7c <pneIncomingData+0x548>
    3b90:	48 e0       	ldi	r20, 0x08	; 8
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	6c e5       	ldi	r22, 0x5C	; 92
    3b96:	72 e0       	ldi	r23, 0x02	; 2
    3b98:	c8 01       	movw	r24, r16
    3b9a:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3b9e:	89 2b       	or	r24, r25
    3ba0:	81 f4       	brne	.+32     	; 0x3bc2 <pneIncomingData+0x18e>
    3ba2:	80 91 c4 22 	lds	r24, 0x22C4
    3ba6:	81 11       	cpse	r24, r1
    3ba8:	06 c0       	rjmp	.+12     	; 0x3bb6 <pneIncomingData+0x182>
    3baa:	83 e0       	ldi	r24, 0x03	; 3
    3bac:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3bb0:	ff 24       	eor	r15, r15
    3bb2:	f3 94       	inc	r15
    3bb4:	e3 c1       	rjmp	.+966    	; 0x3f7c <pneIncomingData+0x548>
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	80 93 77 22 	sts	0x2277, r24
    3bbc:	ff 24       	eor	r15, r15
    3bbe:	f3 94       	inc	r15
    3bc0:	dd c1       	rjmp	.+954    	; 0x3f7c <pneIncomingData+0x548>
    3bc2:	48 e0       	ldi	r20, 0x08	; 8
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	65 e6       	ldi	r22, 0x65	; 101
    3bc8:	72 e0       	ldi	r23, 0x02	; 2
    3bca:	c8 01       	movw	r24, r16
    3bcc:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3bd0:	89 2b       	or	r24, r25
    3bd2:	79 f4       	brne	.+30     	; 0x3bf2 <pneIncomingData+0x1be>
    3bd4:	80 91 c4 22 	lds	r24, 0x22C4
    3bd8:	81 11       	cpse	r24, r1
    3bda:	06 c0       	rjmp	.+12     	; 0x3be8 <pneIncomingData+0x1b4>
    3bdc:	83 e0       	ldi	r24, 0x03	; 3
    3bde:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3be2:	ff 24       	eor	r15, r15
    3be4:	f3 94       	inc	r15
    3be6:	ca c1       	rjmp	.+916    	; 0x3f7c <pneIncomingData+0x548>
    3be8:	10 92 77 22 	sts	0x2277, r1
    3bec:	ff 24       	eor	r15, r15
    3bee:	f3 94       	inc	r15
    3bf0:	c5 c1       	rjmp	.+906    	; 0x3f7c <pneIncomingData+0x548>
    3bf2:	48 e0       	ldi	r20, 0x08	; 8
    3bf4:	50 e0       	ldi	r21, 0x00	; 0
    3bf6:	6e e6       	ldi	r22, 0x6E	; 110
    3bf8:	72 e0       	ldi	r23, 0x02	; 2
    3bfa:	c8 01       	movw	r24, r16
    3bfc:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3c00:	89 2b       	or	r24, r25
    3c02:	81 f4       	brne	.+32     	; 0x3c24 <pneIncomingData+0x1f0>
    3c04:	80 91 c4 22 	lds	r24, 0x22C4
    3c08:	81 11       	cpse	r24, r1
    3c0a:	06 c0       	rjmp	.+12     	; 0x3c18 <pneIncomingData+0x1e4>
    3c0c:	83 e0       	ldi	r24, 0x03	; 3
    3c0e:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3c12:	ff 24       	eor	r15, r15
    3c14:	f3 94       	inc	r15
    3c16:	b2 c1       	rjmp	.+868    	; 0x3f7c <pneIncomingData+0x548>
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	80 93 78 22 	sts	0x2278, r24
    3c1e:	ff 24       	eor	r15, r15
    3c20:	f3 94       	inc	r15
    3c22:	ac c1       	rjmp	.+856    	; 0x3f7c <pneIncomingData+0x548>
    3c24:	48 e0       	ldi	r20, 0x08	; 8
    3c26:	50 e0       	ldi	r21, 0x00	; 0
    3c28:	67 e7       	ldi	r22, 0x77	; 119
    3c2a:	72 e0       	ldi	r23, 0x02	; 2
    3c2c:	c8 01       	movw	r24, r16
    3c2e:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3c32:	89 2b       	or	r24, r25
    3c34:	79 f4       	brne	.+30     	; 0x3c54 <pneIncomingData+0x220>
    3c36:	80 91 c4 22 	lds	r24, 0x22C4
    3c3a:	81 11       	cpse	r24, r1
    3c3c:	06 c0       	rjmp	.+12     	; 0x3c4a <pneIncomingData+0x216>
    3c3e:	83 e0       	ldi	r24, 0x03	; 3
    3c40:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3c44:	ff 24       	eor	r15, r15
    3c46:	f3 94       	inc	r15
    3c48:	99 c1       	rjmp	.+818    	; 0x3f7c <pneIncomingData+0x548>
    3c4a:	10 92 78 22 	sts	0x2278, r1
    3c4e:	ff 24       	eor	r15, r15
    3c50:	f3 94       	inc	r15
    3c52:	94 c1       	rjmp	.+808    	; 0x3f7c <pneIncomingData+0x548>
    3c54:	48 e0       	ldi	r20, 0x08	; 8
    3c56:	50 e0       	ldi	r21, 0x00	; 0
    3c58:	60 e8       	ldi	r22, 0x80	; 128
    3c5a:	72 e0       	ldi	r23, 0x02	; 2
    3c5c:	c8 01       	movw	r24, r16
    3c5e:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3c62:	89 2b       	or	r24, r25
    3c64:	09 f0       	breq	.+2      	; 0x3c68 <pneIncomingData+0x234>
    3c66:	92 c0       	rjmp	.+292    	; 0x3d8c <pneIncomingData+0x358>
    3c68:	23 e1       	ldi	r18, 0x13	; 19
    3c6a:	2f 15       	cp	r18, r15
    3c6c:	30 f0       	brcs	.+12     	; 0x3c7a <pneIncomingData+0x246>
    3c6e:	86 e0       	ldi	r24, 0x06	; 6
    3c70:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3c74:	ff 24       	eor	r15, r15
    3c76:	f3 94       	inc	r15
    3c78:	81 c1       	rjmp	.+770    	; 0x3f7c <pneIncomingData+0x548>
    3c7a:	6e ef       	ldi	r22, 0xFE	; 254
    3c7c:	6f 0d       	add	r22, r15
    3c7e:	c8 01       	movw	r24, r16
    3c80:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <crc_verify>
    3c84:	f8 2e       	mov	r15, r24
    3c86:	88 23       	and	r24, r24
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <pneIncomingData+0x258>
    3c8a:	7a c0       	rjmp	.+244    	; 0x3d80 <pneIncomingData+0x34c>
    3c8c:	f8 01       	movw	r30, r16
    3c8e:	a1 85       	ldd	r26, Z+9	; 0x09
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	d0 97       	sbiw	r26, 0x30	; 48
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	3a ec       	ldi	r19, 0xCA	; 202
    3c98:	4a e9       	ldi	r20, 0x9A	; 154
    3c9a:	5b e3       	ldi	r21, 0x3B	; 59
    3c9c:	0e 94 99 4d 	call	0x9b32	; 0x9b32 <__mulshisi3>
    3ca0:	4b 01       	movw	r8, r22
    3ca2:	5c 01       	movw	r10, r24
    3ca4:	a2 85       	ldd	r26, Z+10	; 0x0a
    3ca6:	b0 e0       	ldi	r27, 0x00	; 0
    3ca8:	d0 97       	sbiw	r26, 0x30	; 48
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	31 ee       	ldi	r19, 0xE1	; 225
    3cae:	45 ef       	ldi	r20, 0xF5	; 245
    3cb0:	55 e0       	ldi	r21, 0x05	; 5
    3cb2:	0e 94 99 4d 	call	0x9b32	; 0x9b32 <__mulshisi3>
    3cb6:	86 0e       	add	r8, r22
    3cb8:	97 1e       	adc	r9, r23
    3cba:	a8 1e       	adc	r10, r24
    3cbc:	b9 1e       	adc	r11, r25
    3cbe:	82 89       	ldd	r24, Z+18	; 0x12
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	c0 97       	sbiw	r24, 0x30	; 48
    3cc4:	09 2e       	mov	r0, r25
    3cc6:	00 0c       	add	r0, r0
    3cc8:	aa 0b       	sbc	r26, r26
    3cca:	bb 0b       	sbc	r27, r27
    3ccc:	88 0e       	add	r8, r24
    3cce:	99 1e       	adc	r9, r25
    3cd0:	aa 1e       	adc	r10, r26
    3cd2:	bb 1e       	adc	r11, r27
    3cd4:	a3 85       	ldd	r26, Z+11	; 0x0b
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	d0 97       	sbiw	r26, 0x30	; 48
    3cda:	20 e8       	ldi	r18, 0x80	; 128
    3cdc:	36 e9       	ldi	r19, 0x96	; 150
    3cde:	48 e9       	ldi	r20, 0x98	; 152
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	0e 94 99 4d 	call	0x9b32	; 0x9b32 <__mulshisi3>
    3ce6:	86 0e       	add	r8, r22
    3ce8:	97 1e       	adc	r9, r23
    3cea:	a8 1e       	adc	r10, r24
    3cec:	b9 1e       	adc	r11, r25
    3cee:	a4 85       	ldd	r26, Z+12	; 0x0c
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	d0 97       	sbiw	r26, 0x30	; 48
    3cf4:	20 e4       	ldi	r18, 0x40	; 64
    3cf6:	32 e4       	ldi	r19, 0x42	; 66
    3cf8:	4f e0       	ldi	r20, 0x0F	; 15
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	0e 94 99 4d 	call	0x9b32	; 0x9b32 <__mulshisi3>
    3d00:	86 0e       	add	r8, r22
    3d02:	97 1e       	adc	r9, r23
    3d04:	a8 1e       	adc	r10, r24
    3d06:	b9 1e       	adc	r11, r25
    3d08:	a5 85       	ldd	r26, Z+13	; 0x0d
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	d0 97       	sbiw	r26, 0x30	; 48
    3d0e:	20 ea       	ldi	r18, 0xA0	; 160
    3d10:	36 e8       	ldi	r19, 0x86	; 134
    3d12:	41 e0       	ldi	r20, 0x01	; 1
    3d14:	50 e0       	ldi	r21, 0x00	; 0
    3d16:	0e 94 99 4d 	call	0x9b32	; 0x9b32 <__mulshisi3>
    3d1a:	86 0e       	add	r8, r22
    3d1c:	97 1e       	adc	r9, r23
    3d1e:	a8 1e       	adc	r10, r24
    3d20:	b9 1e       	adc	r11, r25
    3d22:	a6 85       	ldd	r26, Z+14	; 0x0e
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	d0 97       	sbiw	r26, 0x30	; 48
    3d28:	20 e1       	ldi	r18, 0x10	; 16
    3d2a:	37 e2       	ldi	r19, 0x27	; 39
    3d2c:	0e 94 93 4d 	call	0x9b26	; 0x9b26 <__usmulhisi3>
    3d30:	86 0e       	add	r8, r22
    3d32:	97 1e       	adc	r9, r23
    3d34:	a8 1e       	adc	r10, r24
    3d36:	b9 1e       	adc	r11, r25
    3d38:	a7 85       	ldd	r26, Z+15	; 0x0f
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	d0 97       	sbiw	r26, 0x30	; 48
    3d3e:	28 ee       	ldi	r18, 0xE8	; 232
    3d40:	33 e0       	ldi	r19, 0x03	; 3
    3d42:	0e 94 93 4d 	call	0x9b26	; 0x9b26 <__usmulhisi3>
    3d46:	86 0e       	add	r8, r22
    3d48:	97 1e       	adc	r9, r23
    3d4a:	a8 1e       	adc	r10, r24
    3d4c:	b9 1e       	adc	r11, r25
    3d4e:	a0 89       	ldd	r26, Z+16	; 0x10
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	d0 97       	sbiw	r26, 0x30	; 48
    3d54:	24 e6       	ldi	r18, 0x64	; 100
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	0e 94 93 4d 	call	0x9b26	; 0x9b26 <__usmulhisi3>
    3d5c:	86 0e       	add	r8, r22
    3d5e:	97 1e       	adc	r9, r23
    3d60:	a8 1e       	adc	r10, r24
    3d62:	b9 1e       	adc	r11, r25
    3d64:	a1 89       	ldd	r26, Z+17	; 0x11
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	d0 97       	sbiw	r26, 0x30	; 48
    3d6a:	2a e0       	ldi	r18, 0x0A	; 10
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	0e 94 93 4d 	call	0x9b26	; 0x9b26 <__usmulhisi3>
    3d72:	68 0d       	add	r22, r8
    3d74:	79 1d       	adc	r23, r9
    3d76:	8a 1d       	adc	r24, r10
    3d78:	9b 1d       	adc	r25, r11
    3d7a:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <time_to_rf>
    3d7e:	fe c0       	rjmp	.+508    	; 0x3f7c <pneIncomingData+0x548>
    3d80:	87 e0       	ldi	r24, 0x07	; 7
    3d82:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3d86:	ff 24       	eor	r15, r15
    3d88:	f3 94       	inc	r15
    3d8a:	f8 c0       	rjmp	.+496    	; 0x3f7c <pneIncomingData+0x548>
    3d8c:	48 e0       	ldi	r20, 0x08	; 8
    3d8e:	50 e0       	ldi	r21, 0x00	; 0
    3d90:	69 e8       	ldi	r22, 0x89	; 137
    3d92:	72 e0       	ldi	r23, 0x02	; 2
    3d94:	c8 01       	movw	r24, r16
    3d96:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3d9a:	89 2b       	or	r24, r25
    3d9c:	39 f4       	brne	.+14     	; 0x3dac <pneIncomingData+0x378>
    3d9e:	86 ec       	ldi	r24, 0xC6	; 198
    3da0:	92 e2       	ldi	r25, 0x22	; 34
    3da2:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <SYS_TimerStop>
    3da6:	ff 24       	eor	r15, r15
    3da8:	f3 94       	inc	r15
    3daa:	e8 c0       	rjmp	.+464    	; 0x3f7c <pneIncomingData+0x548>
    3dac:	48 e0       	ldi	r20, 0x08	; 8
    3dae:	50 e0       	ldi	r21, 0x00	; 0
    3db0:	62 e9       	ldi	r22, 0x92	; 146
    3db2:	72 e0       	ldi	r23, 0x02	; 2
    3db4:	c8 01       	movw	r24, r16
    3db6:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3dba:	89 2b       	or	r24, r25
    3dbc:	29 f4       	brne	.+10     	; 0x3dc8 <pneIncomingData+0x394>
    3dbe:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <clr_rom_to_rf>
    3dc2:	ff 24       	eor	r15, r15
    3dc4:	f3 94       	inc	r15
    3dc6:	da c0       	rjmp	.+436    	; 0x3f7c <pneIncomingData+0x548>
    3dc8:	48 e0       	ldi	r20, 0x08	; 8
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	6b e9       	ldi	r22, 0x9B	; 155
    3dce:	72 e0       	ldi	r23, 0x02	; 2
    3dd0:	c8 01       	movw	r24, r16
    3dd2:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3dd6:	89 2b       	or	r24, r25
    3dd8:	29 f4       	brne	.+10     	; 0x3de4 <pneIncomingData+0x3b0>
    3dda:	0e 94 54 33 	call	0x66a8	; 0x66a8 <reboot_to_rf>
    3dde:	ff 24       	eor	r15, r15
    3de0:	f3 94       	inc	r15
    3de2:	cc c0       	rjmp	.+408    	; 0x3f7c <pneIncomingData+0x548>
    3de4:	48 e0       	ldi	r20, 0x08	; 8
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	64 ea       	ldi	r22, 0xA4	; 164
    3dea:	72 e0       	ldi	r23, 0x02	; 2
    3dec:	c8 01       	movw	r24, r16
    3dee:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3df2:	89 2b       	or	r24, r25
    3df4:	29 f4       	brne	.+10     	; 0x3e00 <pneIncomingData+0x3cc>
    3df6:	0e 94 28 35 	call	0x6a50	; 0x6a50 <info_to_rf>
    3dfa:	ff 24       	eor	r15, r15
    3dfc:	f3 94       	inc	r15
    3dfe:	be c0       	rjmp	.+380    	; 0x3f7c <pneIncomingData+0x548>
    3e00:	48 e0       	ldi	r20, 0x08	; 8
    3e02:	50 e0       	ldi	r21, 0x00	; 0
    3e04:	6d ea       	ldi	r22, 0xAD	; 173
    3e06:	72 e0       	ldi	r23, 0x02	; 2
    3e08:	c8 01       	movw	r24, r16
    3e0a:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3e0e:	89 2b       	or	r24, r25
    3e10:	71 f5       	brne	.+92     	; 0x3e6e <pneIncomingData+0x43a>
    3e12:	f1 e1       	ldi	r31, 0x11	; 17
    3e14:	ff 15       	cp	r31, r15
    3e16:	30 f0       	brcs	.+12     	; 0x3e24 <pneIncomingData+0x3f0>
    3e18:	84 e0       	ldi	r24, 0x04	; 4
    3e1a:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3e1e:	ff 24       	eor	r15, r15
    3e20:	f3 94       	inc	r15
    3e22:	ac c0       	rjmp	.+344    	; 0x3f7c <pneIncomingData+0x548>
    3e24:	6e ef       	ldi	r22, 0xFE	; 254
    3e26:	6f 0d       	add	r22, r15
    3e28:	c8 01       	movw	r24, r16
    3e2a:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <crc_verify>
    3e2e:	f8 2e       	mov	r15, r24
    3e30:	88 23       	and	r24, r24
    3e32:	b9 f0       	breq	.+46     	; 0x3e62 <pneIncomingData+0x42e>
    3e34:	ce 01       	movw	r24, r28
    3e36:	01 96       	adiw	r24, 0x01	; 1
    3e38:	26 e0       	ldi	r18, 0x06	; 6
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	11 92       	st	Z+, r1
    3e3e:	2a 95       	dec	r18
    3e40:	e9 f7       	brne	.-6      	; 0x3e3c <pneIncomingData+0x408>
    3e42:	f8 01       	movw	r30, r16
    3e44:	21 85       	ldd	r18, Z+9	; 0x09
    3e46:	29 83       	std	Y+1, r18	; 0x01
    3e48:	22 85       	ldd	r18, Z+10	; 0x0a
    3e4a:	2a 83       	std	Y+2, r18	; 0x02
    3e4c:	23 85       	ldd	r18, Z+11	; 0x0b
    3e4e:	2b 83       	std	Y+3, r18	; 0x03
    3e50:	24 85       	ldd	r18, Z+12	; 0x0c
    3e52:	2c 83       	std	Y+4, r18	; 0x04
    3e54:	25 85       	ldd	r18, Z+13	; 0x0d
    3e56:	2d 83       	std	Y+5, r18	; 0x05
    3e58:	26 85       	ldd	r18, Z+14	; 0x0e
    3e5a:	2e 83       	std	Y+6, r18	; 0x06
    3e5c:	0e 94 4c 35 	call	0x6a98	; 0x6a98 <change_id_to_rf>
    3e60:	8d c0       	rjmp	.+282    	; 0x3f7c <pneIncomingData+0x548>
    3e62:	84 e0       	ldi	r24, 0x04	; 4
    3e64:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3e68:	ff 24       	eor	r15, r15
    3e6a:	f3 94       	inc	r15
    3e6c:	87 c0       	rjmp	.+270    	; 0x3f7c <pneIncomingData+0x548>
    3e6e:	48 e0       	ldi	r20, 0x08	; 8
    3e70:	50 e0       	ldi	r21, 0x00	; 0
    3e72:	66 eb       	ldi	r22, 0xB6	; 182
    3e74:	72 e0       	ldi	r23, 0x02	; 2
    3e76:	c8 01       	movw	r24, r16
    3e78:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3e7c:	89 2b       	or	r24, r25
    3e7e:	49 f4       	brne	.+18     	; 0x3e92 <pneIncomingData+0x45e>
    3e80:	80 e2       	ldi	r24, 0x20	; 32
    3e82:	0e 94 76 35 	call	0x6aec	; 0x6aec <last_1_log>
    3e86:	80 e2       	ldi	r24, 0x20	; 32
    3e88:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <last_2_log>
    3e8c:	ff 24       	eor	r15, r15
    3e8e:	f3 94       	inc	r15
    3e90:	75 c0       	rjmp	.+234    	; 0x3f7c <pneIncomingData+0x548>
    3e92:	48 e0       	ldi	r20, 0x08	; 8
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	6f eb       	ldi	r22, 0xBF	; 191
    3e98:	72 e0       	ldi	r23, 0x02	; 2
    3e9a:	c8 01       	movw	r24, r16
    3e9c:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3ea0:	89 2b       	or	r24, r25
    3ea2:	29 f4       	brne	.+10     	; 0x3eae <pneIncomingData+0x47a>
    3ea4:	0e 94 81 36 	call	0x6d02	; 0x6d02 <dump_log_to_rf>
    3ea8:	ff 24       	eor	r15, r15
    3eaa:	f3 94       	inc	r15
    3eac:	67 c0       	rjmp	.+206    	; 0x3f7c <pneIncomingData+0x548>
    3eae:	48 e0       	ldi	r20, 0x08	; 8
    3eb0:	50 e0       	ldi	r21, 0x00	; 0
    3eb2:	68 ec       	ldi	r22, 0xC8	; 200
    3eb4:	72 e0       	ldi	r23, 0x02	; 2
    3eb6:	c8 01       	movw	r24, r16
    3eb8:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3ebc:	89 2b       	or	r24, r25
    3ebe:	29 f4       	brne	.+10     	; 0x3eca <pneIncomingData+0x496>
    3ec0:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <stress_test>
    3ec4:	ff 24       	eor	r15, r15
    3ec6:	f3 94       	inc	r15
    3ec8:	59 c0       	rjmp	.+178    	; 0x3f7c <pneIncomingData+0x548>
    3eca:	48 e0       	ldi	r20, 0x08	; 8
    3ecc:	50 e0       	ldi	r21, 0x00	; 0
    3ece:	61 ed       	ldi	r22, 0xD1	; 209
    3ed0:	72 e0       	ldi	r23, 0x02	; 2
    3ed2:	c8 01       	movw	r24, r16
    3ed4:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <memcmp>
    3ed8:	89 2b       	or	r24, r25
    3eda:	09 f0       	breq	.+2      	; 0x3ede <pneIncomingData+0x4aa>
    3edc:	45 c0       	rjmp	.+138    	; 0x3f68 <pneIncomingData+0x534>
    3ede:	fb e1       	ldi	r31, 0x1B	; 27
    3ee0:	ff 15       	cp	r31, r15
    3ee2:	30 f0       	brcs	.+12     	; 0x3ef0 <pneIncomingData+0x4bc>
    3ee4:	88 e0       	ldi	r24, 0x08	; 8
    3ee6:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3eea:	ff 24       	eor	r15, r15
    3eec:	f3 94       	inc	r15
    3eee:	46 c0       	rjmp	.+140    	; 0x3f7c <pneIncomingData+0x548>
    3ef0:	6e ef       	ldi	r22, 0xFE	; 254
    3ef2:	6f 0d       	add	r22, r15
    3ef4:	c8 01       	movw	r24, r16
    3ef6:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <crc_verify>
    3efa:	f8 2e       	mov	r15, r24
    3efc:	88 23       	and	r24, r24
    3efe:	71 f1       	breq	.+92     	; 0x3f5c <pneIncomingData+0x528>
    3f00:	d8 01       	movw	r26, r16
    3f02:	19 96       	adiw	r26, 0x09	; 9
    3f04:	ec ee       	ldi	r30, 0xEC	; 236
    3f06:	f1 e2       	ldi	r31, 0x21	; 33
    3f08:	cf 01       	movw	r24, r30
    3f0a:	80 5f       	subi	r24, 0xF0	; 240
    3f0c:	2d 91       	ld	r18, X+
    3f0e:	91 91       	ld	r25, Z+
    3f10:	29 17       	cp	r18, r25
    3f12:	29 f0       	breq	.+10     	; 0x3f1e <pneIncomingData+0x4ea>
    3f14:	89 e0       	ldi	r24, 0x09	; 9
    3f16:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3f1a:	f1 2c       	mov	r15, r1
    3f1c:	2f c0       	rjmp	.+94     	; 0x3f7c <pneIncomingData+0x548>
    3f1e:	8e 13       	cpse	r24, r30
    3f20:	f5 cf       	rjmp	.-22     	; 0x3f0c <pneIncomingData+0x4d8>
    3f22:	ce 01       	movw	r24, r28
    3f24:	01 96       	adiw	r24, 0x01	; 1
    3f26:	29 e0       	ldi	r18, 0x09	; 9
    3f28:	fc 01       	movw	r30, r24
    3f2a:	11 92       	st	Z+, r1
    3f2c:	2a 95       	dec	r18
    3f2e:	e9 f7       	brne	.-6      	; 0x3f2a <pneIncomingData+0x4f6>
    3f30:	f8 01       	movw	r30, r16
    3f32:	23 8d       	ldd	r18, Z+27	; 0x1b
    3f34:	29 83       	std	Y+1, r18	; 0x01
    3f36:	24 8d       	ldd	r18, Z+28	; 0x1c
    3f38:	2a 83       	std	Y+2, r18	; 0x02
    3f3a:	25 8d       	ldd	r18, Z+29	; 0x1d
    3f3c:	2b 83       	std	Y+3, r18	; 0x03
    3f3e:	26 8d       	ldd	r18, Z+30	; 0x1e
    3f40:	2c 83       	std	Y+4, r18	; 0x04
    3f42:	27 8d       	ldd	r18, Z+31	; 0x1f
    3f44:	2d 83       	std	Y+5, r18	; 0x05
    3f46:	20 a1       	ldd	r18, Z+32	; 0x20
    3f48:	2e 83       	std	Y+6, r18	; 0x06
    3f4a:	0e 94 55 33 	call	0x66aa	; 0x66aa <WPS_pairing>
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	80 93 50 23 	sts	0x2350, r24
    3f54:	88 ee       	ldi	r24, 0xE8	; 232
    3f56:	93 e0       	ldi	r25, 0x03	; 3
    3f58:	7e d1       	rcall	.+764    	; 0x4256 <pne_delayms>
    3f5a:	10 c0       	rjmp	.+32     	; 0x3f7c <pneIncomingData+0x548>
    3f5c:	8a e0       	ldi	r24, 0x0A	; 10
    3f5e:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3f62:	ff 24       	eor	r15, r15
    3f64:	f3 94       	inc	r15
    3f66:	0a c0       	rjmp	.+20     	; 0x3f7c <pneIncomingData+0x548>
    3f68:	8b e0       	ldi	r24, 0x0B	; 11
    3f6a:	0e 94 81 34 	call	0x6902	; 0x6902 <error_to_rf>
    3f6e:	ff 24       	eor	r15, r15
    3f70:	f3 94       	inc	r15
    3f72:	04 c0       	rjmp	.+8      	; 0x3f7c <pneIncomingData+0x548>
    3f74:	f1 2c       	mov	r15, r1
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <pneIncomingData+0x548>
    3f78:	ff 24       	eor	r15, r15
    3f7a:	f3 94       	inc	r15
    3f7c:	8f 2d       	mov	r24, r15
    3f7e:	29 96       	adiw	r28, 0x09	; 9
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	f8 94       	cli
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	0f be       	out	0x3f, r0	; 63
    3f88:	cd bf       	out	0x3d, r28	; 61
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	1f 91       	pop	r17
    3f90:	0f 91       	pop	r16
    3f92:	ff 90       	pop	r15
    3f94:	bf 90       	pop	r11
    3f96:	af 90       	pop	r10
    3f98:	9f 90       	pop	r9
    3f9a:	8f 90       	pop	r8
    3f9c:	08 95       	ret

00003f9e <getUID>:

/*************************************************************************//**
*****************************************************************************/

void getUID()
{
    3f9e:	0f 93       	push	r16
    3fa0:	cf 93       	push	r28
    3fa2:	df 93       	push	r29
    3fa4:	1f 92       	push	r1
    3fa6:	1f 92       	push	r1
    3fa8:	cd b7       	in	r28, 0x3d	; 61
    3faa:	de b7       	in	r29, 0x3e	; 62
	uint8_t serial_addr[2] = {0x00, 0x08};
    3fac:	19 82       	std	Y+1, r1	; 0x01
    3fae:	88 e0       	ldi	r24, 0x08	; 8
    3fb0:	8a 83       	std	Y+2, r24	; 0x02
		
	pne_APP_TwiInit(0xBF);
    3fb2:	8f eb       	ldi	r24, 0xBF	; 191
    3fb4:	64 d1       	rcall	.+712    	; 0x427e <pne_APP_TwiInit>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, UID, 16);
    3fb6:	00 e1       	ldi	r16, 0x10	; 16
    3fb8:	2c ee       	ldi	r18, 0xEC	; 236
    3fba:	31 e2       	ldi	r19, 0x21	; 33
    3fbc:	4f eb       	ldi	r20, 0xBF	; 191
    3fbe:	62 e0       	ldi	r22, 0x02	; 2
    3fc0:	ce 01       	movw	r24, r28
    3fc2:	01 96       	adiw	r24, 0x01	; 1
    3fc4:	dd d1       	rcall	.+954    	; 0x4380 <pne_APP_TwiReceive>
    3fc6:	0f 90       	pop	r0
    3fc8:	0f 90       	pop	r0
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	0f 91       	pop	r16
    3fd0:	08 95       	ret

00003fd2 <PNEWELSAppInit>:
	gpio_in(INPUT_LED_DRV2);
	gpio_pullup(INPUT_LED_DRV2);
}

void PNEWELSAppInit(void)
{
    3fd2:	0f 93       	push	r16
    3fd4:	1f 93       	push	r17
    3fd6:	cf 93       	push	r28
	initialize_flag = 1;
    3fd8:	c1 e0       	ldi	r28, 0x01	; 1
    3fda:	c0 93 d7 22 	sts	0x22D7, r28
	installation_flag = 1;
    3fde:	c0 93 01 23 	sts	0x2301, r28
	data_update_flag = 1;
    3fe2:	c0 93 97 22 	sts	0x2297, r28
	status_report_flag = 1;
    3fe6:	c0 93 fd 22 	sts	0x22FD, r28
	interrupt_flag = 1;
    3fea:	c0 93 6f 23 	sts	0x236F, r28
	debouncing_delay = 0;
    3fee:	10 92 d4 22 	sts	0x22D4, r1
	LED_flag = 0;
    3ff2:	10 92 69 22 	sts	0x2269, r1
	wps_flag = 0;
    3ff6:	10 92 ba 22 	sts	0x22BA, r1
	do_once = 0;
    3ffa:	10 92 64 23 	sts	0x2364, r1
	operation_seq = off_emergency_light;
    3ffe:	c0 93 c4 22 	sts	0x22C4, r28
	current_state_emergency_light = 0;
    4002:	10 92 75 23 	sts	0x2375, r1
	memory_address_incr = 0;
    4006:	10 92 77 23 	sts	0x2377, r1
    400a:	10 92 76 23 	sts	0x2376, r1
	error_count_status = 0;
    400e:	10 92 d8 22 	sts	0x22D8, r1
	error_count_wps = 0;
    4012:	10 92 c0 22 	sts	0x22C0, r1
	wps_send_flag = 1;
    4016:	c0 93 96 22 	sts	0x2296, r28
	battery_low_once = 0;
    401a:	10 92 41 23 	sts	0x2341, r1
	WPS_STATUS = WPS_init;
    401e:	10 92 50 23 	sts	0x2350, r1
	rf_flag = 0;
    4022:	10 92 ef 22 	sts	0x22EF, r1
	countdown = 0;
    4026:	10 92 d6 22 	sts	0x22D6, r1
    402a:	10 92 d5 22 	sts	0x22D5, r1
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    402e:	87 e8       	ldi	r24, 0x87	; 135
    4030:	80 93 7a 00 	sts	0x007A, r24
	//do_once_stop_wps_timer = 0;
	
	adc_init(ADC_PRESCALER_DIV128);
	timer2_init();
    4034:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <timer2_init>
	memoryCounter_init();
    4038:	9c d2       	rcall	.+1336   	; 0x4572 <memoryCounter_init>
		.baudrate = USART_SERIAL_EXAMPLE_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    403a:	64 e0       	ldi	r22, 0x04	; 4
    403c:	72 e0       	ldi	r23, 0x02	; 2
    403e:	88 ec       	ldi	r24, 0xC8	; 200
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 8d 06 	call	0xd1a	; 0xd1a <usart_init_rs232>
	
	/*Software timer declaration*/
	appLEDTimer.interval = STANDBY_TIMER;
    4046:	e2 e0       	ldi	r30, 0x02	; 2
    4048:	f3 e2       	ldi	r31, 0x23	; 35
    404a:	84 ef       	ldi	r24, 0xF4	; 244
    404c:	91 e0       	ldi	r25, 0x01	; 1
    404e:	a0 e0       	ldi	r26, 0x00	; 0
    4050:	b0 e0       	ldi	r27, 0x00	; 0
    4052:	86 83       	std	Z+6, r24	; 0x06
    4054:	97 83       	std	Z+7, r25	; 0x07
    4056:	a0 87       	std	Z+8, r26	; 0x08
    4058:	b1 87       	std	Z+9, r27	; 0x09
	appLEDTimer.mode = SYS_TIMER_INTERVAL_MODE;
    405a:	12 86       	std	Z+10, r1	; 0x0a
	appLEDTimer.handler = appLEDTimerHandler;
    405c:	84 ec       	ldi	r24, 0xC4	; 196
    405e:	96 e1       	ldi	r25, 0x16	; 22
    4060:	94 87       	std	Z+12, r25	; 0x0c
    4062:	83 87       	std	Z+11, r24	; 0x0b
	SYS_TimerStart(&appLEDTimer);
    4064:	cf 01       	movw	r24, r30
    4066:	0e 94 08 16 	call	0x2c10	; 0x2c10 <SYS_TimerStart>
	
	appLEDIntervalTimer.interval = STANDBY_INTERVAL_TIMER;
    406a:	ec ed       	ldi	r30, 0xDC	; 220
    406c:	f2 e2       	ldi	r31, 0x22	; 34
    406e:	88 ee       	ldi	r24, 0xE8	; 232
    4070:	93 e0       	ldi	r25, 0x03	; 3
    4072:	a0 e0       	ldi	r26, 0x00	; 0
    4074:	b0 e0       	ldi	r27, 0x00	; 0
    4076:	86 83       	std	Z+6, r24	; 0x06
    4078:	97 83       	std	Z+7, r25	; 0x07
    407a:	a0 87       	std	Z+8, r26	; 0x08
    407c:	b1 87       	std	Z+9, r27	; 0x09
	appLEDIntervalTimer.mode = SYS_TIMER_INTERVAL_MODE;
    407e:	12 86       	std	Z+10, r1	; 0x0a
	appLEDIntervalTimer.handler = appLEDIntervalTimerHandler;
    4080:	8c e8       	ldi	r24, 0x8C	; 140
    4082:	96 e1       	ldi	r25, 0x16	; 22
    4084:	94 87       	std	Z+12, r25	; 0x0c
    4086:	83 87       	std	Z+11, r24	; 0x0b
	
	error_timer_status.interval = rand()%400+100;
    4088:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <rand>
    408c:	e6 ec       	ldi	r30, 0xC6	; 198
    408e:	f2 e2       	ldi	r31, 0x22	; 34
    4090:	00 e9       	ldi	r16, 0x90	; 144
    4092:	11 e0       	ldi	r17, 0x01	; 1
    4094:	b8 01       	movw	r22, r16
    4096:	0e 94 47 4d 	call	0x9a8e	; 0x9a8e <__divmodhi4>
    409a:	8c 59       	subi	r24, 0x9C	; 156
    409c:	9f 4f       	sbci	r25, 0xFF	; 255
    409e:	09 2e       	mov	r0, r25
    40a0:	00 0c       	add	r0, r0
    40a2:	aa 0b       	sbc	r26, r26
    40a4:	bb 0b       	sbc	r27, r27
    40a6:	86 83       	std	Z+6, r24	; 0x06
    40a8:	97 83       	std	Z+7, r25	; 0x07
    40aa:	a0 87       	std	Z+8, r26	; 0x08
    40ac:	b1 87       	std	Z+9, r27	; 0x09
	error_timer_status.mode = SYS_TIMER_INTERVAL_MODE;
    40ae:	12 86       	std	Z+10, r1	; 0x0a
	error_timer_status.handler = errorTimerStatusHandler;
    40b0:	8e e7       	ldi	r24, 0x7E	; 126
    40b2:	96 e1       	ldi	r25, 0x16	; 22
    40b4:	94 87       	std	Z+12, r25	; 0x0c
    40b6:	83 87       	std	Z+11, r24	; 0x0b
	
	error_timer_wps.interval = rand()%400+100;
    40b8:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <rand>
    40bc:	eb e9       	ldi	r30, 0x9B	; 155
    40be:	f2 e2       	ldi	r31, 0x22	; 34
    40c0:	b8 01       	movw	r22, r16
    40c2:	0e 94 47 4d 	call	0x9a8e	; 0x9a8e <__divmodhi4>
    40c6:	8c 59       	subi	r24, 0x9C	; 156
    40c8:	9f 4f       	sbci	r25, 0xFF	; 255
    40ca:	09 2e       	mov	r0, r25
    40cc:	00 0c       	add	r0, r0
    40ce:	aa 0b       	sbc	r26, r26
    40d0:	bb 0b       	sbc	r27, r27
    40d2:	86 83       	std	Z+6, r24	; 0x06
    40d4:	97 83       	std	Z+7, r25	; 0x07
    40d6:	a0 87       	std	Z+8, r26	; 0x08
    40d8:	b1 87       	std	Z+9, r27	; 0x09
	error_timer_wps.mode = SYS_TIMER_INTERVAL_MODE;
    40da:	12 86       	std	Z+10, r1	; 0x0a
	error_timer_wps.handler = errorTimerWpsHandler;
    40dc:	8c eb       	ldi	r24, 0xBC	; 188
    40de:	96 e1       	ldi	r25, 0x16	; 22
    40e0:	94 87       	std	Z+12, r25	; 0x0c
    40e2:	83 87       	std	Z+11, r24	; 0x0b
	/*SYS_TimerStart(&error_timer_wps);*/
	
	appWPSRequestTimer.interval = WPS_REQUEST_TIMER;
    40e4:	e4 e5       	ldi	r30, 0x54	; 84
    40e6:	f3 e2       	ldi	r31, 0x23	; 35
    40e8:	88 e8       	ldi	r24, 0x88	; 136
    40ea:	93 e1       	ldi	r25, 0x13	; 19
    40ec:	a0 e0       	ldi	r26, 0x00	; 0
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	86 83       	std	Z+6, r24	; 0x06
    40f2:	97 83       	std	Z+7, r25	; 0x07
    40f4:	a0 87       	std	Z+8, r26	; 0x08
    40f6:	b1 87       	std	Z+9, r27	; 0x09
	appWPSRequestTimer.mode = SYS_TIMER_PERIODIC_MODE;
    40f8:	c2 87       	std	Z+10, r28	; 0x0a
	appWPSRequestTimer.handler = appWPSRequestTimerHandler;
    40fa:	27 eb       	ldi	r18, 0xB7	; 183
    40fc:	36 e1       	ldi	r19, 0x16	; 22
    40fe:	34 87       	std	Z+12, r19	; 0x0c
    4100:	23 87       	std	Z+11, r18	; 0x0b
	/*SYS_TimerStart(&appWPSRequestTimer);*/
	
	appWPSActivationTimer.interval = WPS_REQUEST_TIMER;
    4102:	e3 e4       	ldi	r30, 0x43	; 67
    4104:	f3 e2       	ldi	r31, 0x23	; 35
    4106:	86 83       	std	Z+6, r24	; 0x06
    4108:	97 83       	std	Z+7, r25	; 0x07
    410a:	a0 87       	std	Z+8, r26	; 0x08
    410c:	b1 87       	std	Z+9, r27	; 0x09
	appWPSActivationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    410e:	12 86       	std	Z+10, r1	; 0x0a
	appWPSActivationTimer.handler = appWPSActivationTimerHandler;
    4110:	80 e9       	ldi	r24, 0x90	; 144
    4112:	96 e1       	ldi	r25, 0x16	; 22
    4114:	94 87       	std	Z+12, r25	; 0x0c
    4116:	83 87       	std	Z+11, r24	; 0x0b
	
	pneBatteryAverage_init(); //get average battery reading
    4118:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <pneBatteryAverage_init>
	getUID(); //retrieve UID
    411c:	40 df       	rcall	.-384    	; 0x3f9e <getUID>
	
	/*Factory Status*/
	if(gpio_read(FACTORY_BTN) ? 0 : 1)
    411e:	60 91 fe 22 	lds	r22, 0x22FE
    4122:	70 91 ff 22 	lds	r23, 0x22FF
    4126:	80 91 00 23 	lds	r24, 0x2300
    412a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    412e:	81 11       	cpse	r24, r1
    4130:	08 c0       	rjmp	.+16     	; 0x4142 <PNEWELSAppInit+0x170>
	{
		PNEWELS_Buffer.IsFactory = STATUS_FACTORY_OK;
    4132:	ee e6       	ldi	r30, 0x6E	; 110
    4134:	f2 e2       	ldi	r31, 0x22	; 34
    4136:	17 82       	std	Z+7, r1	; 0x07
		PNEWELS_Buffer.mode_Next = MODE_FACTORY;
    4138:	86 e0       	ldi	r24, 0x06	; 6
    413a:	83 8b       	std	Z+19, r24	; 0x13
		factory_mode();
    413c:	0e 94 b9 31 	call	0x6372	; 0x6372 <factory_mode>
    4140:	03 c0       	rjmp	.+6      	; 0x4148 <PNEWELSAppInit+0x176>
	}
	else
	{
		PNEWELS_Buffer.IsFactory = STATUS_FACTORY_NOK;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	80 93 75 22 	sts	0x2275, r24
	}
}
    4148:	cf 91       	pop	r28
    414a:	1f 91       	pop	r17
    414c:	0f 91       	pop	r16
    414e:	08 95       	ret

00004150 <systemFlag_check>:
	//PNEWELSE2promWrite(0xAE, 'E', 01, 41, 0xFF); //reset flag
}

void systemFlag_check()
{
	if(device_flag & (1<<AC_FLAG))
    4150:	80 91 6a 23 	lds	r24, 0x236A
    4154:	81 ff       	sbrs	r24, 1
    4156:	0e c0       	rjmp	.+28     	; 0x4174 <systemFlag_check+0x24>
	{
		operation_seq = wps_state;
    4158:	84 e0       	ldi	r24, 0x04	; 4
    415a:	80 93 c4 22 	sts	0x22C4, r24
		reboot_countdown = 0;
    415e:	10 92 bf 22 	sts	0x22BF, r1
    4162:	10 92 be 22 	sts	0x22BE, r1
		APP_IbLoadSettings_WPS(); //load temporary setting
    4166:	0e 94 85 02 	call	0x50a	; 0x50a <APP_IbLoadSettings_WPS>
		SYS_TimerStart(&appWPSRequestTimer); //start requesting data
    416a:	84 e5       	ldi	r24, 0x54	; 84
    416c:	93 e2       	ldi	r25, 0x23	; 35
    416e:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <SYS_TimerStart>
    4172:	08 95       	ret
	}
	else operation_seq = off_emergency_light;
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	80 93 c4 22 	sts	0x22C4, r24
    417a:	08 95       	ret

0000417c <write_factory_default>:
	//device_flag = (device_flag & ~(1<<AC_FLAG)); //write the flag
	//writeE2prom(FLAG,device_flag);
}

void write_factory_default(uint16_t address, uint8_t factory_default)
{
    417c:	0f 93       	push	r16
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, factory_default); //set device address default value (LSB)
    417e:	06 2f       	mov	r16, r22
    4180:	29 2f       	mov	r18, r25
    4182:	48 2f       	mov	r20, r24
    4184:	65 e4       	ldi	r22, 0x45	; 69
    4186:	8e ea       	ldi	r24, 0xAE	; 174
    4188:	53 d1       	rcall	.+678    	; 0x4430 <PNEWELSE2promWrite>
	pne_delayms(10);
    418a:	8a e0       	ldi	r24, 0x0A	; 10
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	63 d0       	rcall	.+198    	; 0x4256 <pne_delayms>
	
    4190:	0f 91       	pop	r16
    4192:	08 95       	ret

00004194 <factory_initialization>:
#include "memoryConfig.h"
#include "appIb.h"

void factory_initialization()
{
	device_flag = readE2prom(FLAG); //read flag form EEPROM
    4194:	82 e0       	ldi	r24, 0x02	; 2
    4196:	90 e1       	ldi	r25, 0x10	; 16
    4198:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <readE2prom>
    419c:	80 93 6a 23 	sts	0x236A, r24
	batt_low = readE2prom(BATTERY_LOW);
    41a0:	84 e0       	ldi	r24, 0x04	; 4
    41a2:	90 e1       	ldi	r25, 0x10	; 16
    41a4:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <readE2prom>
    41a8:	80 93 65 23 	sts	0x2365, r24
	batt_max = readE2prom(BATTERY_MAX);
    41ac:	83 e0       	ldi	r24, 0x03	; 3
    41ae:	90 e1       	ldi	r25, 0x10	; 16
    41b0:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <readE2prom>
    41b4:	80 93 68 22 	sts	0x2268, r24
	if(device_flag & (1<<FACTORY_FLAG))  //check whether this is the first time boot, or hard reset was commenced.
    41b8:	80 91 6a 23 	lds	r24, 0x236A
    41bc:	80 ff       	sbrs	r24, 0
    41be:	2e c0       	rjmp	.+92     	; 0x421c <factory_initialization+0x88>
	{
		write_factory_default(DEVICE_ADDRESS_L,ADDRESS_DEFAULT_L);
    41c0:	61 e0       	ldi	r22, 0x01	; 1
    41c2:	8c ef       	ldi	r24, 0xFC	; 252
    41c4:	9f e0       	ldi	r25, 0x0F	; 15
    41c6:	da df       	rcall	.-76     	; 0x417c <write_factory_default>
		write_factory_default(DEVICE_ADDRESS_H,ADDRESS_DEFAULT_H); //set device address default value (MSB)
    41c8:	60 e0       	ldi	r22, 0x00	; 0
    41ca:	8d ef       	ldi	r24, 0xFD	; 253
    41cc:	9f e0       	ldi	r25, 0x0F	; 15
    41ce:	d6 df       	rcall	.-84     	; 0x417c <write_factory_default>
		
		write_factory_default(DEVICE_CHANNEL_L,CHANNEL_DEFAULT_L); //set device channel default value (LSB)
    41d0:	60 e1       	ldi	r22, 0x10	; 16
    41d2:	8e ef       	ldi	r24, 0xFE	; 254
    41d4:	9f e0       	ldi	r25, 0x0F	; 15
    41d6:	d2 df       	rcall	.-92     	; 0x417c <write_factory_default>
		write_factory_default(DEVICE_CHANNEL_H,CHANNEL_DEFAULT_H); //set device channel default value (MSB)
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	8f ef       	ldi	r24, 0xFF	; 255
    41dc:	9f e0       	ldi	r25, 0x0F	; 15
    41de:	ce df       	rcall	.-100    	; 0x417c <write_factory_default>
		
		write_factory_default(DEVICE_PAN_L,PAN_DEFAULT_L); //set device PAN default value (LSB)
    41e0:	64 e3       	ldi	r22, 0x34	; 52
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	90 e1       	ldi	r25, 0x10	; 16
    41e6:	ca df       	rcall	.-108    	; 0x417c <write_factory_default>
		write_factory_default(DEVICE_PAN_H,PAN_DEFAULT_H); //set device PAN default value (MSB)
    41e8:	62 e1       	ldi	r22, 0x12	; 18
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	90 e1       	ldi	r25, 0x10	; 16
    41ee:	c6 df       	rcall	.-116    	; 0x417c <write_factory_default>
		
		write_factory_default(BATTERY_MAX,BATTERY_MAX_THRESH);
    41f0:	6f e8       	ldi	r22, 0x8F	; 143
    41f2:	83 e0       	ldi	r24, 0x03	; 3
    41f4:	90 e1       	ldi	r25, 0x10	; 16
    41f6:	c2 df       	rcall	.-124    	; 0x417c <write_factory_default>
		write_factory_default(BATTERY_LOW,BATTERY_LOW_THRESH);
    41f8:	66 e6       	ldi	r22, 0x66	; 102
    41fa:	84 e0       	ldi	r24, 0x04	; 4
    41fc:	90 e1       	ldi	r25, 0x10	; 16
    41fe:	be df       	rcall	.-132    	; 0x417c <write_factory_default>
		
		clre2prom(); //wipe all log file
    4200:	9c d1       	rcall	.+824    	; 0x453a <clre2prom>
//		write_factory_default(GROUP_ID, GROUP_DEFAULT); //set Group ID default Value
//		write_factory_default(ZONE_ID, ZONE_DEFAULT); //set Zone ID default Value
//		write_factory_default(NODE_ID, NODE_DEFAULT); //set Node ID default value
		
		device_flag = (device_flag & ~(1<<FACTORY_FLAG));
    4202:	80 91 6a 23 	lds	r24, 0x236A
    4206:	8e 7f       	andi	r24, 0xFE	; 254
    4208:	80 93 6a 23 	sts	0x236A, r24
		
		write_factory_default(FLAG, device_flag); //set Factory flag
    420c:	60 91 6a 23 	lds	r22, 0x236A
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	90 e1       	ldi	r25, 0x10	; 16
    4214:	b3 df       	rcall	.-154    	; 0x417c <write_factory_default>
		pne_delayms(10);
    4216:	8a e0       	ldi	r24, 0x0A	; 10
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	1d c0       	rjmp	.+58     	; 0x4256 <pne_delayms>
    421c:	08 95       	ret

0000421e <rf_init>:
#include <string.h>
#include "pne_appDelay.h"
#include "pne_rf_processor.h"

uint16_t rf_init(uint16_t address, uint16_t app_type)
{
    421e:	1f 93       	push	r17
    4220:	cf 93       	push	r28
    4222:	df 93       	push	r29
    4224:	d8 2f       	mov	r29, r24
    4226:	19 2f       	mov	r17, r25
	uint8_t cache[2] = {0};
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
		
	cache[0] = PNEWELSE2promRead(0xAF,'E',memory_address_low+1,memory_address_high);
    4228:	41 e0       	ldi	r20, 0x01	; 1
    422a:	48 0f       	add	r20, r24
    422c:	29 2f       	mov	r18, r25
    422e:	65 e4       	ldi	r22, 0x45	; 69
    4230:	8f ea       	ldi	r24, 0xAF	; 175
    4232:	29 d1       	rcall	.+594    	; 0x4486 <PNEWELSE2promRead>
    4234:	c8 2f       	mov	r28, r24
	cache[1] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    4236:	21 2f       	mov	r18, r17
    4238:	4d 2f       	mov	r20, r29
    423a:	65 e4       	ldi	r22, 0x45	; 69
    423c:	8f ea       	ldi	r24, 0xAF	; 175
    423e:	23 d1       	rcall	.+582    	; 0x4486 <PNEWELSE2promRead>
	app_type = cache[0];
    4240:	2c 2f       	mov	r18, r28
    4242:	30 e0       	ldi	r19, 0x00	; 0
	app_type = app_type << 8;
    4244:	32 2f       	mov	r19, r18
    4246:	22 27       	eor	r18, r18
	app_type |= cache[1];
	return app_type;
    4248:	a9 01       	movw	r20, r18
    424a:	48 2b       	or	r20, r24
    424c:	ca 01       	movw	r24, r20
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	1f 91       	pop	r17
    4254:	08 95       	ret

00004256 <pne_delayms>:

#include "pne_appDelay.h"

void pne_delayms(uint16_t milisecond)
{
	uint16_t microsecond = milisecond * 1000;
    4256:	28 ee       	ldi	r18, 0xE8	; 232
    4258:	33 e0       	ldi	r19, 0x03	; 3
    425a:	ac 01       	movw	r20, r24
    425c:	42 9f       	mul	r20, r18
    425e:	c0 01       	movw	r24, r0
    4260:	43 9f       	mul	r20, r19
    4262:	90 0d       	add	r25, r0
    4264:	52 9f       	mul	r21, r18
    4266:	90 0d       	add	r25, r0
    4268:	11 24       	eor	r1, r1
	
	for (int i=0; i<microsecond; i++)
    426a:	00 97       	sbiw	r24, 0x00	; 0
    426c:	39 f0       	breq	.+14     	; 0x427c <pne_delayms+0x26>
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	2f 5f       	subi	r18, 0xFF	; 255
    4274:	3f 4f       	sbci	r19, 0xFF	; 255
    4276:	28 17       	cp	r18, r24
    4278:	39 07       	cpc	r19, r25
    427a:	d9 f7       	brne	.-10     	; 0x4272 <pne_delayms+0x1c>
    427c:	08 95       	ret

0000427e <pne_APP_TwiInit>:
#include "memoryConfig.h"


//Functions
void pne_APP_TwiInit(uint8_t slave_bus_address)
{	
    427e:	0f 93       	push	r16
    4280:	1f 93       	push	r17
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	00 d0       	rcall	.+0      	; 0x4288 <pne_APP_TwiInit+0xa>
    4288:	00 d0       	rcall	.+0      	; 0x428a <pne_APP_TwiInit+0xc>
    428a:	cd b7       	in	r28, 0x3d	; 61
    428c:	de b7       	in	r29, 0x3e	; 62
	//TWI Declaration
	twi_master_options_t opt =
    428e:	be 01       	movw	r22, r28
    4290:	6f 5f       	subi	r22, 0xFF	; 255
    4292:	7f 4f       	sbci	r23, 0xFF	; 255
    4294:	96 e0       	ldi	r25, 0x06	; 6
    4296:	fb 01       	movw	r30, r22
    4298:	11 92       	st	Z+, r1
    429a:	9a 95       	dec	r25
    429c:	e9 f7       	brne	.-6      	; 0x4298 <pne_APP_TwiInit+0x1a>
    429e:	08 e4       	ldi	r16, 0x48	; 72
    42a0:	18 ee       	ldi	r17, 0xE8	; 232
    42a2:	21 e0       	ldi	r18, 0x01	; 1
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	09 83       	std	Y+1, r16	; 0x01
    42a8:	1a 83       	std	Y+2, r17	; 0x02
    42aa:	2b 83       	std	Y+3, r18	; 0x03
    42ac:	3c 83       	std	Y+4, r19	; 0x04
    42ae:	8e 83       	std	Y+6, r24	; 0x06
	{
		.speed = TWI_SPEED_HZ,
		.chip  = slave_bus_address,
	};
	opt .baud_reg = TWI_CLOCK_RATE(F_CPU, opt.speed);
    42b0:	88 e1       	ldi	r24, 0x18	; 24
    42b2:	8d 83       	std	Y+5, r24	; 0x05
	twi_master_init(TWI_EXAMPLE,&opt);
    42b4:	88 eb       	ldi	r24, 0xB8	; 184
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	0e 94 12 04 	call	0x824	; 0x824 <twi_master_init>
}
    42bc:	26 96       	adiw	r28, 0x06	; 6
    42be:	0f b6       	in	r0, 0x3f	; 63
    42c0:	f8 94       	cli
    42c2:	de bf       	out	0x3e, r29	; 62
    42c4:	0f be       	out	0x3f, r0	; 63
    42c6:	cd bf       	out	0x3d, r28	; 61
    42c8:	df 91       	pop	r29
    42ca:	cf 91       	pop	r28
    42cc:	1f 91       	pop	r17
    42ce:	0f 91       	pop	r16
    42d0:	08 95       	ret

000042d2 <pne_APP_TwiSend>:

AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
    42d2:	ef 92       	push	r14
    42d4:	ff 92       	push	r15
    42d6:	0f 93       	push	r16
    42d8:	1f 93       	push	r17
    42da:	cf 93       	push	r28
    42dc:	df 93       	push	r29
    42de:	cd b7       	in	r28, 0x3d	; 61
    42e0:	de b7       	in	r29, 0x3e	; 62
    42e2:	2a 97       	sbiw	r28, 0x0a	; 10
    42e4:	0f b6       	in	r0, 0x3f	; 63
    42e6:	f8 94       	cli
    42e8:	de bf       	out	0x3e, r29	; 62
    42ea:	0f be       	out	0x3f, r0	; 63
    42ec:	cd bf       	out	0x3d, r28	; 61
    42ee:	f9 01       	movw	r30, r18
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_WRITE_SUCCESS;
	
	twi_package_t temperature_packet =
    42f0:	9e 01       	movw	r18, r28
    42f2:	2f 5f       	subi	r18, 0xFF	; 255
    42f4:	3f 4f       	sbci	r19, 0xFF	; 255
    42f6:	79 01       	movw	r14, r18
    42f8:	2a e0       	ldi	r18, 0x0A	; 10
    42fa:	d7 01       	movw	r26, r14
    42fc:	1d 92       	st	X+, r1
    42fe:	2a 95       	dec	r18
    4300:	e9 f7       	brne	.-6      	; 0x42fc <pne_APP_TwiSend+0x2a>
    4302:	49 83       	std	Y+1, r20	; 0x01
	{
		.addr[0]      = slave_mem_addr[0],               /* TWI slave memory address data */
    4304:	dc 01       	movw	r26, r24
    4306:	3c 91       	ld	r19, X
AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_WRITE_SUCCESS;
	
	twi_package_t temperature_packet =
    4308:	3a 83       	std	Y+2, r19	; 0x02
    430a:	46 2f       	mov	r20, r22
    430c:	50 e0       	ldi	r21, 0x00	; 0
    430e:	5e 83       	std	Y+6, r21	; 0x06
    4310:	4d 83       	std	Y+5, r20	; 0x05
    4312:	f8 87       	std	Y+8, r31	; 0x08
    4314:	ef 83       	std	Y+7, r30	; 0x07
    4316:	10 e0       	ldi	r17, 0x00	; 0
    4318:	1a 87       	std	Y+10, r17	; 0x0a
    431a:	09 87       	std	Y+9, r16	; 0x09
		.chip         = slave_bus_address,               /* TWI slave bus address */
		.buffer       = (void *)test_pattern,            /* transfer data source buffer */
		.length       = test_pattern_length              /* transfer data size (bytes) */
	};
	
	if (slave_mem_addr_length == 1)
    431c:	61 30       	cpi	r22, 0x01	; 1
    431e:	c9 f0       	breq	.+50     	; 0x4352 <pne_APP_TwiSend+0x80>
	{
		temperature_packet.addr[0] = slave_mem_addr[0];
	}
	else if (slave_mem_addr_length == 2)
    4320:	62 30       	cpi	r22, 0x02	; 2
    4322:	29 f4       	brne	.+10     	; 0x432e <pne_APP_TwiSend+0x5c>
	{
		temperature_packet.addr[0] = slave_mem_addr[1];
    4324:	11 96       	adiw	r26, 0x01	; 1
    4326:	8c 91       	ld	r24, X
    4328:	8a 83       	std	Y+2, r24	; 0x02
		temperature_packet.addr[1] = slave_mem_addr[0];
    432a:	3b 83       	std	Y+3, r19	; 0x03
    432c:	12 c0       	rjmp	.+36     	; 0x4352 <pne_APP_TwiSend+0x80>
	}
	else if (slave_mem_addr_length == 3)
    432e:	63 30       	cpi	r22, 0x03	; 3
    4330:	81 f4       	brne	.+32     	; 0x4352 <pne_APP_TwiSend+0x80>
	{
		temperature_packet.addr[0] = slave_mem_addr[0];
		temperature_packet.addr[1] = slave_mem_addr[1];
    4332:	fc 01       	movw	r30, r24
    4334:	21 81       	ldd	r18, Z+1	; 0x01
    4336:	2b 83       	std	Y+3, r18	; 0x03
		temperature_packet.addr[2] = slave_mem_addr[2];
    4338:	82 81       	ldd	r24, Z+2	; 0x02
    433a:	8c 83       	std	Y+4, r24	; 0x04
    433c:	0a c0       	rjmp	.+20     	; 0x4352 <pne_APP_TwiSend+0x80>
	}
	
	while(twi_master_write(TWI_EXAMPLE,&temperature_packet) != TWI_SUCCESS)
	{
		pne_delayms(1);
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	89 df       	rcall	.-238    	; 0x4256 <pne_delayms>
    4344:	11 50       	subi	r17, 0x01	; 1
		count++;
		if (count == 10)
    4346:	31 f4       	brne	.+12     	; 0x4354 <pne_APP_TwiSend+0x82>
		{
			count = 0;
			status = APP_PNEWELS_TWI_WRITE_FAIL;
			fatal_error_to_rf(twi_fatal_error);
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <fatal_error_to_rf>
		pne_delayms(1);
		count++;
		if (count == 10)
		{
			count = 0;
			status = APP_PNEWELS_TWI_WRITE_FAIL;
    434e:	81 e0       	ldi	r24, 0x01	; 1
			fatal_error_to_rf(twi_fatal_error);
			break;
    4350:	0a c0       	rjmp	.+20     	; 0x4366 <pne_APP_TwiSend+0x94>
	opt .baud_reg = TWI_CLOCK_RATE(F_CPU, opt.speed);
	twi_master_init(TWI_EXAMPLE,&opt);
}

AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
    4352:	1a e0       	ldi	r17, 0x0A	; 10
		temperature_packet.addr[0] = slave_mem_addr[0];
		temperature_packet.addr[1] = slave_mem_addr[1];
		temperature_packet.addr[2] = slave_mem_addr[2];
	}
	
	while(twi_master_write(TWI_EXAMPLE,&temperature_packet) != TWI_SUCCESS)
    4354:	be 01       	movw	r22, r28
    4356:	6f 5f       	subi	r22, 0xFF	; 255
    4358:	7f 4f       	sbci	r23, 0xFF	; 255
    435a:	88 eb       	ldi	r24, 0xB8	; 184
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	0e 94 b1 03 	call	0x762	; 0x762 <twi_master_write>
    4362:	81 11       	cpse	r24, r1
    4364:	ec cf       	rjmp	.-40     	; 0x433e <pne_APP_TwiSend+0x6c>
			break;
		}
	}
	
	return status;
}
    4366:	2a 96       	adiw	r28, 0x0a	; 10
    4368:	0f b6       	in	r0, 0x3f	; 63
    436a:	f8 94       	cli
    436c:	de bf       	out	0x3e, r29	; 62
    436e:	0f be       	out	0x3f, r0	; 63
    4370:	cd bf       	out	0x3d, r28	; 61
    4372:	df 91       	pop	r29
    4374:	cf 91       	pop	r28
    4376:	1f 91       	pop	r17
    4378:	0f 91       	pop	r16
    437a:	ff 90       	pop	r15
    437c:	ef 90       	pop	r14
    437e:	08 95       	ret

00004380 <pne_APP_TwiReceive>:

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
    4380:	ef 92       	push	r14
    4382:	ff 92       	push	r15
    4384:	0f 93       	push	r16
    4386:	1f 93       	push	r17
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	2a 97       	sbiw	r28, 0x0a	; 10
    4392:	0f b6       	in	r0, 0x3f	; 63
    4394:	f8 94       	cli
    4396:	de bf       	out	0x3e, r29	; 62
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	cd bf       	out	0x3d, r28	; 61
    439c:	f9 01       	movw	r30, r18
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
	
	twi_package_t packet_received =
    439e:	9e 01       	movw	r18, r28
    43a0:	2f 5f       	subi	r18, 0xFF	; 255
    43a2:	3f 4f       	sbci	r19, 0xFF	; 255
    43a4:	79 01       	movw	r14, r18
    43a6:	2a e0       	ldi	r18, 0x0A	; 10
    43a8:	d7 01       	movw	r26, r14
    43aa:	1d 92       	st	X+, r1
    43ac:	2a 95       	dec	r18
    43ae:	e9 f7       	brne	.-6      	; 0x43aa <pne_APP_TwiReceive+0x2a>
    43b0:	49 83       	std	Y+1, r20	; 0x01
	{
		.addr[0]      = slave_mem_addr[0],               /* TWI slave memory address data */
    43b2:	dc 01       	movw	r26, r24
    43b4:	3c 91       	ld	r19, X
AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
	
	twi_package_t packet_received =
    43b6:	3a 83       	std	Y+2, r19	; 0x02
    43b8:	46 2f       	mov	r20, r22
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	5e 83       	std	Y+6, r21	; 0x06
    43be:	4d 83       	std	Y+5, r20	; 0x05
    43c0:	f8 87       	std	Y+8, r31	; 0x08
    43c2:	ef 83       	std	Y+7, r30	; 0x07
    43c4:	10 e0       	ldi	r17, 0x00	; 0
    43c6:	1a 87       	std	Y+10, r17	; 0x0a
    43c8:	09 87       	std	Y+9, r16	; 0x09
		.chip         = slave_bus_address,               /* TWI slave bus address */
		.buffer       = data_received,                   /* transfer data source buffer */
		.length       = data_received_length             /* transfer data size (bytes) */
	};
	
	if (slave_mem_addr_length == 1)
    43ca:	61 30       	cpi	r22, 0x01	; 1
    43cc:	c9 f0       	breq	.+50     	; 0x4400 <pne_APP_TwiReceive+0x80>
	{
		packet_received.addr[0] = slave_mem_addr[0];
	}
	else if (slave_mem_addr_length == 2)
    43ce:	62 30       	cpi	r22, 0x02	; 2
    43d0:	29 f4       	brne	.+10     	; 0x43dc <pne_APP_TwiReceive+0x5c>
	{
		packet_received.addr[0] = slave_mem_addr[1];
    43d2:	11 96       	adiw	r26, 0x01	; 1
    43d4:	8c 91       	ld	r24, X
    43d6:	8a 83       	std	Y+2, r24	; 0x02
		packet_received.addr[1] = slave_mem_addr[0];
    43d8:	3b 83       	std	Y+3, r19	; 0x03
    43da:	12 c0       	rjmp	.+36     	; 0x4400 <pne_APP_TwiReceive+0x80>
	}
	else if (slave_mem_addr_length == 3)
    43dc:	63 30       	cpi	r22, 0x03	; 3
    43de:	81 f4       	brne	.+32     	; 0x4400 <pne_APP_TwiReceive+0x80>
	{
		packet_received.addr[0] = slave_mem_addr[0];
		packet_received.addr[1] = slave_mem_addr[1];
    43e0:	fc 01       	movw	r30, r24
    43e2:	21 81       	ldd	r18, Z+1	; 0x01
    43e4:	2b 83       	std	Y+3, r18	; 0x03
		packet_received.addr[2] = slave_mem_addr[2];
    43e6:	82 81       	ldd	r24, Z+2	; 0x02
    43e8:	8c 83       	std	Y+4, r24	; 0x04
    43ea:	0a c0       	rjmp	.+20     	; 0x4400 <pne_APP_TwiReceive+0x80>
		
	}
	
	while(twi_master_read(TWI_EXAMPLE,&packet_received) != TWI_SUCCESS)
	{
		pne_delayms(1);
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	32 df       	rcall	.-412    	; 0x4256 <pne_delayms>
    43f2:	11 50       	subi	r17, 0x01	; 1
		count++;
		if (count == 10)
    43f4:	31 f4       	brne	.+12     	; 0x4402 <pne_APP_TwiReceive+0x82>
		{
			count = 0;
			status = APP_PNEWELS_TWI_READ_FAIL;
			fatal_error_to_rf(twi_fatal_error);
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <fatal_error_to_rf>
		pne_delayms(1);
		count++;
		if (count == 10)
		{
			count = 0;
			status = APP_PNEWELS_TWI_READ_FAIL;
    43fc:	83 e0       	ldi	r24, 0x03	; 3
			fatal_error_to_rf(twi_fatal_error);
			break;
    43fe:	0b c0       	rjmp	.+22     	; 0x4416 <pne_APP_TwiReceive+0x96>
	
	return status;
}

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
    4400:	1a e0       	ldi	r17, 0x0A	; 10
	else
	{
		
	}
	
	while(twi_master_read(TWI_EXAMPLE,&packet_received) != TWI_SUCCESS)
    4402:	be 01       	movw	r22, r28
    4404:	6f 5f       	subi	r22, 0xFF	; 255
    4406:	7f 4f       	sbci	r23, 0xFF	; 255
    4408:	88 eb       	ldi	r24, 0xB8	; 184
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <twi_master_read>
    4410:	81 11       	cpse	r24, r1
    4412:	ec cf       	rjmp	.-40     	; 0x43ec <pne_APP_TwiReceive+0x6c>
}

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
    4414:	82 e0       	ldi	r24, 0x02	; 2
			break;
		}
	}
	
	return status;
}
    4416:	2a 96       	adiw	r28, 0x0a	; 10
    4418:	0f b6       	in	r0, 0x3f	; 63
    441a:	f8 94       	cli
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	0f be       	out	0x3f, r0	; 63
    4420:	cd bf       	out	0x3d, r28	; 61
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	1f 91       	pop	r17
    4428:	0f 91       	pop	r16
    442a:	ff 90       	pop	r15
    442c:	ef 90       	pop	r14
    442e:	08 95       	ret

00004430 <PNEWELSE2promWrite>:
	

}

void PNEWELSE2promWrite(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2, uint8_t memory_data)
{
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	cf 93       	push	r28
    4438:	df 93       	push	r29
    443a:	00 d0       	rcall	.+0      	; 0x443c <PNEWELSE2promWrite+0xc>
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	18 2f       	mov	r17, r24
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
    4442:	65 34       	cpi	r22, 0x45	; 69
    4444:	19 f0       	breq	.+6      	; 0x444c <PNEWELSE2promWrite+0x1c>
	{
		e2prom_address_length = 2;
	}
	else
	{
		e2prom_address_length = 1;
    4446:	ff 24       	eor	r15, r15
    4448:	f3 94       	inc	r15
    444a:	03 c0       	rjmp	.+6      	; 0x4452 <PNEWELSE2promWrite+0x22>
void PNEWELSE2promWrite(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2, uint8_t memory_data)
{
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
	{
		e2prom_address_length = 2;
    444c:	68 94       	set
    444e:	ff 24       	eor	r15, r15
    4450:	f1 f8       	bld	r15, 1
	else
	{
		e2prom_address_length = 1;
	}
	uint8_t e2prom_write_address = address;
	uint8_t e2prom_address[2] =
    4452:	49 83       	std	Y+1, r20	; 0x01
    4454:	2a 83       	std	Y+2, r18	; 0x02
	{
		memory_loc_1,
		memory_loc_2,
	};
	uint8_t write_data[1] =
    4456:	0b 83       	std	Y+3, r16	; 0x03
	{
		memory_data,
	};
	
	pne_APP_TwiInit(e2prom_write_address);
    4458:	81 2f       	mov	r24, r17
    445a:	11 df       	rcall	.-478    	; 0x427e <pne_APP_TwiInit>
	
	pne_APP_TwiSend(e2prom_address, e2prom_address_length, e2prom_write_address, write_data, 1);
    445c:	01 e0       	ldi	r16, 0x01	; 1
    445e:	9e 01       	movw	r18, r28
    4460:	2d 5f       	subi	r18, 0xFD	; 253
    4462:	3f 4f       	sbci	r19, 0xFF	; 255
    4464:	41 2f       	mov	r20, r17
    4466:	6f 2d       	mov	r22, r15
    4468:	ce 01       	movw	r24, r28
    446a:	01 96       	adiw	r24, 0x01	; 1
    446c:	32 df       	rcall	.-412    	; 0x42d2 <pne_APP_TwiSend>
	pne_delayms(5);
    446e:	85 e0       	ldi	r24, 0x05	; 5
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	f1 de       	rcall	.-542    	; 0x4256 <pne_delayms>
}
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	ff 90       	pop	r15
    4484:	08 95       	ret

00004486 <PNEWELSE2promRead>:

uint8_t PNEWELSE2promRead(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2)
{
    4486:	ff 92       	push	r15
    4488:	0f 93       	push	r16
    448a:	1f 93       	push	r17
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	00 d0       	rcall	.+0      	; 0x4492 <PNEWELSE2promRead+0xc>
    4492:	1f 92       	push	r1
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
    4498:	18 2f       	mov	r17, r24
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
    449a:	65 34       	cpi	r22, 0x45	; 69
    449c:	19 f0       	breq	.+6      	; 0x44a4 <PNEWELSE2promRead+0x1e>
	{
		e2prom_address_length = 2;
	}
	else
	{
		e2prom_address_length = 1;
    449e:	ff 24       	eor	r15, r15
    44a0:	f3 94       	inc	r15
    44a2:	03 c0       	rjmp	.+6      	; 0x44aa <PNEWELSE2promRead+0x24>
uint8_t PNEWELSE2promRead(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2)
{
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
	{
		e2prom_address_length = 2;
    44a4:	68 94       	set
    44a6:	ff 24       	eor	r15, r15
    44a8:	f1 f8       	bld	r15, 1
	else
	{
		e2prom_address_length = 1;
	}
	uint8_t e2prom_read_address = address;
	uint8_t e2prom_address[2] =
    44aa:	49 83       	std	Y+1, r20	; 0x01
    44ac:	2a 83       	std	Y+2, r18	; 0x02
	{
		memory_loc_1,
		memory_loc_2,
	};
	uint8_t read_data[2] = {0,0};
    44ae:	1b 82       	std	Y+3, r1	; 0x03
    44b0:	1c 82       	std	Y+4, r1	; 0x04
	
	pne_APP_TwiInit(e2prom_read_address);
    44b2:	81 2f       	mov	r24, r17
    44b4:	e4 de       	rcall	.-568    	; 0x427e <pne_APP_TwiInit>
	
	pne_APP_TwiReceive(e2prom_address, e2prom_address_length, e2prom_read_address, read_data, 1);
    44b6:	01 e0       	ldi	r16, 0x01	; 1
    44b8:	9e 01       	movw	r18, r28
    44ba:	2d 5f       	subi	r18, 0xFD	; 253
    44bc:	3f 4f       	sbci	r19, 0xFF	; 255
    44be:	41 2f       	mov	r20, r17
    44c0:	6f 2d       	mov	r22, r15
    44c2:	ce 01       	movw	r24, r28
    44c4:	01 96       	adiw	r24, 0x01	; 1
    44c6:	5c df       	rcall	.-328    	; 0x4380 <pne_APP_TwiReceive>
	
	return read_data[0];
}
    44c8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	0f 90       	pop	r0
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	1f 91       	pop	r17
    44d8:	0f 91       	pop	r16
    44da:	ff 90       	pop	r15
    44dc:	08 95       	ret

000044de <PNEWELSTemperatureRead>:

uint8_t PNEWELSTemperatureRead(void)
{
    44de:	0f 93       	push	r16
    44e0:	cf 93       	push	r28
    44e2:	df 93       	push	r29
    44e4:	00 d0       	rcall	.+0      	; 0x44e6 <PNEWELSTemperatureRead+0x8>
    44e6:	1f 92       	push	r1
    44e8:	cd b7       	in	r28, 0x3d	; 61
    44ea:	de b7       	in	r29, 0x3e	; 62
	uint8_t temperature_write_address = 0x90;
	uint8_t temperature_read_address = 0x91;
	uint8_t temperature_register[2] =
    44ec:	19 82       	std	Y+1, r1	; 0x01
    44ee:	1a 82       	std	Y+2, r1	; 0x02
	{
		0x00,
		0x00,
	};
	uint8_t data_received[2] = {0, 0};
    44f0:	1b 82       	std	Y+3, r1	; 0x03
    44f2:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t data = 0;
	
	pne_APP_TwiInit(temperature_write_address);
    44f4:	80 e9       	ldi	r24, 0x90	; 144
    44f6:	c3 de       	rcall	.-634    	; 0x427e <pne_APP_TwiInit>
	
	if (pne_APP_TwiSend(temperature_register, 1, temperature_write_address, 0, 0) == APP_PNEWELS_TWI_WRITE_SUCCESS)
    44f8:	00 e0       	ldi	r16, 0x00	; 0
    44fa:	20 e0       	ldi	r18, 0x00	; 0
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	40 e9       	ldi	r20, 0x90	; 144
    4500:	61 e0       	ldi	r22, 0x01	; 1
    4502:	ce 01       	movw	r24, r28
    4504:	01 96       	adiw	r24, 0x01	; 1
    4506:	e5 de       	rcall	.-566    	; 0x42d2 <pne_APP_TwiSend>
    4508:	81 11       	cpse	r24, r1
    450a:	09 c0       	rjmp	.+18     	; 0x451e <PNEWELSTemperatureRead+0x40>
	{
		pne_APP_TwiReceive(temperature_register, 1, temperature_read_address, data_received, 2);
    450c:	02 e0       	ldi	r16, 0x02	; 2
    450e:	9e 01       	movw	r18, r28
    4510:	2d 5f       	subi	r18, 0xFD	; 253
    4512:	3f 4f       	sbci	r19, 0xFF	; 255
    4514:	41 e9       	ldi	r20, 0x91	; 145
    4516:	61 e0       	ldi	r22, 0x01	; 1
    4518:	ce 01       	movw	r24, r28
    451a:	01 96       	adiw	r24, 0x01	; 1
    451c:	31 df       	rcall	.-414    	; 0x4380 <pne_APP_TwiReceive>
	}
	
	data = (data_received[0]<<1) / 2;
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	88 0f       	add	r24, r24
    4524:	99 1f       	adc	r25, r25
    4526:	95 95       	asr	r25
    4528:	87 95       	ror	r24

	return data;
}
    452a:	0f 90       	pop	r0
    452c:	0f 90       	pop	r0
    452e:	0f 90       	pop	r0
    4530:	0f 90       	pop	r0
    4532:	df 91       	pop	r29
    4534:	cf 91       	pop	r28
    4536:	0f 91       	pop	r16
    4538:	08 95       	ret

0000453a <clre2prom>:

void clre2prom()
{
    453a:	0f 93       	push	r16
    453c:	cf 93       	push	r28
    453e:	df 93       	push	r29
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    4540:	c0 e0       	ldi	r28, 0x00	; 0
    4542:	d0 e0       	ldi	r29, 0x00	; 0
	{
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0xFF);
    4544:	0f ef       	ldi	r16, 0xFF	; 255
    4546:	2d 2f       	mov	r18, r29
    4548:	4c 2f       	mov	r20, r28
    454a:	65 e4       	ldi	r22, 0x45	; 69
    454c:	8e ea       	ldi	r24, 0xAE	; 174
    454e:	70 df       	rcall	.-288    	; 0x4430 <PNEWELSE2promWrite>
		pne_delayms(10);
    4550:	8a e0       	ldi	r24, 0x0A	; 10
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	80 de       	rcall	.-768    	; 0x4256 <pne_delayms>
		wdt_reset();
    4556:	a8 95       	wdr
void clre2prom()
{
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    4558:	21 96       	adiw	r28, 0x01	; 1
    455a:	cc 3f       	cpi	r28, 0xFC	; 252
    455c:	8f e0       	ldi	r24, 0x0F	; 15
    455e:	d8 07       	cpc	r29, r24
    4560:	89 f7       	brne	.-30     	; 0x4544 <clre2prom+0xa>
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0xFF);
		pne_delayms(10);
		wdt_reset();
	}
	
	memory_address_incr = 0;
    4562:	10 92 77 23 	sts	0x2377, r1
    4566:	10 92 76 23 	sts	0x2376, r1
}
    456a:	df 91       	pop	r29
    456c:	cf 91       	pop	r28
    456e:	0f 91       	pop	r16
    4570:	08 95       	ret

00004572 <memoryCounter_init>:

void memoryCounter_init()
{
    4572:	cf 93       	push	r28
    4574:	df 93       	push	r29
	uint8_t cache = 0;
	for (uint16_t counter = 0; counter<4092; counter = counter + 11)
    4576:	c0 e0       	ldi	r28, 0x00	; 0
    4578:	d0 e0       	ldi	r29, 0x00	; 0
	{
		cache = readE2prom(counter);
    457a:	ce 01       	movw	r24, r28
    457c:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <readE2prom>
		if(cache == 0xFF)
    4580:	8f 3f       	cpi	r24, 0xFF	; 255
    4582:	29 f4       	brne	.+10     	; 0x458e <memoryCounter_init+0x1c>
		{
			memory_address_incr = counter;
    4584:	d0 93 77 23 	sts	0x2377, r29
    4588:	c0 93 76 23 	sts	0x2376, r28
			break;
    458c:	05 c0       	rjmp	.+10     	; 0x4598 <memoryCounter_init+0x26>
}

void memoryCounter_init()
{
	uint8_t cache = 0;
	for (uint16_t counter = 0; counter<4092; counter = counter + 11)
    458e:	2b 96       	adiw	r28, 0x0b	; 11
    4590:	cc 3f       	cpi	r28, 0xFC	; 252
    4592:	8f e0       	ldi	r24, 0x0F	; 15
    4594:	d8 07       	cpc	r29, r24
    4596:	89 f7       	brne	.-30     	; 0x457a <memoryCounter_init+0x8>
		{
			memory_address_incr = counter;
			break;
		}
	}
}
    4598:	df 91       	pop	r29
    459a:	cf 91       	pop	r28
    459c:	08 95       	ret

0000459e <memoryCounter_save>:

void memoryCounter_save(uint16_t log_counter)
{
	writeE2prom(log_counter, 0xFF);
    459e:	6f ef       	ldi	r22, 0xFF	; 255
    45a0:	0c 94 16 31 	jmp	0x622c	; 0x622c <writeE2prom>
    45a4:	08 95       	ret

000045a6 <store>:
	
	return status;
}

void store(store_seq_t seq)
{
    45a6:	2f 92       	push	r2
    45a8:	3f 92       	push	r3
    45aa:	4f 92       	push	r4
    45ac:	5f 92       	push	r5
    45ae:	6f 92       	push	r6
    45b0:	7f 92       	push	r7
    45b2:	8f 92       	push	r8
    45b4:	9f 92       	push	r9
    45b6:	af 92       	push	r10
    45b8:	bf 92       	push	r11
    45ba:	cf 92       	push	r12
    45bc:	df 92       	push	r13
    45be:	ef 92       	push	r14
    45c0:	ff 92       	push	r15
    45c2:	0f 93       	push	r16
    45c4:	1f 93       	push	r17
    45c6:	cf 93       	push	r28
    45c8:	df 93       	push	r29
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    45ce:	6e 97       	sbiw	r28, 0x1e	; 30
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	f8 94       	cli
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	cd bf       	out	0x3d, r28	; 61
	uint8_t time_4_byte = 0;
	uint8_t status_byte1 = 0;
	uint8_t status_byte2 = 0;
	uint8_t status_byte3 = 0;

	if (seq == charge_start)
    45da:	81 11       	cpse	r24, r1
    45dc:	3f c0       	rjmp	.+126    	; 0x465c <store+0xb6>
	{
		if (memory_address_incr >= 4092)
    45de:	80 91 76 23 	lds	r24, 0x2376
    45e2:	90 91 77 23 	lds	r25, 0x2377
    45e6:	8c 3f       	cpi	r24, 0xFC	; 252
    45e8:	9f 40       	sbci	r25, 0x0F	; 15
    45ea:	20 f0       	brcs	.+8      	; 0x45f4 <store+0x4e>
		{
			memory_address_incr = 0;
    45ec:	10 92 77 23 	sts	0x2377, r1
    45f0:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    45f4:	40 91 76 23 	lds	r20, 0x2376
    45f8:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    45fc:	03 e4       	ldi	r16, 0x43	; 67
    45fe:	65 e4       	ldi	r22, 0x45	; 69
    4600:	8e ea       	ldi	r24, 0xAE	; 174
    4602:	16 df       	rcall	.-468    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4604:	80 91 76 23 	lds	r24, 0x2376
    4608:	90 91 77 23 	lds	r25, 0x2377
    460c:	01 96       	adiw	r24, 0x01	; 1
    460e:	90 93 77 23 	sts	0x2377, r25
    4612:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    4616:	8a e0       	ldi	r24, 0x0A	; 10
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	1d de       	rcall	.-966    	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    461c:	80 91 76 23 	lds	r24, 0x2376
    4620:	90 91 77 23 	lds	r25, 0x2377
    4624:	8c 3f       	cpi	r24, 0xFC	; 252
    4626:	9f 40       	sbci	r25, 0x0F	; 15
    4628:	20 f0       	brcs	.+8      	; 0x4632 <store+0x8c>
		{
			memory_address_incr = 0;
    462a:	10 92 77 23 	sts	0x2377, r1
    462e:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4632:	40 91 76 23 	lds	r20, 0x2376
    4636:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    463a:	03 e5       	ldi	r16, 0x53	; 83
    463c:	65 e4       	ldi	r22, 0x45	; 69
    463e:	8e ea       	ldi	r24, 0xAE	; 174
    4640:	f7 de       	rcall	.-530    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4642:	80 91 76 23 	lds	r24, 0x2376
    4646:	90 91 77 23 	lds	r25, 0x2377
    464a:	01 96       	adiw	r24, 0x01	; 1
    464c:	90 93 77 23 	sts	0x2377, r25
    4650:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    4654:	8a e0       	ldi	r24, 0x0A	; 10
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	fe dd       	rcall	.-1028   	; 0x4256 <pne_delayms>
    465a:	0c c2       	rjmp	.+1048   	; 0x4a74 <store+0x4ce>
	}
	else if (seq == charge_end)
    465c:	81 30       	cpi	r24, 0x01	; 1
    465e:	09 f0       	breq	.+2      	; 0x4662 <store+0xbc>
    4660:	3f c0       	rjmp	.+126    	; 0x46e0 <store+0x13a>
	{
		if (memory_address_incr >= 4092)
    4662:	80 91 76 23 	lds	r24, 0x2376
    4666:	90 91 77 23 	lds	r25, 0x2377
    466a:	8c 3f       	cpi	r24, 0xFC	; 252
    466c:	9f 40       	sbci	r25, 0x0F	; 15
    466e:	20 f0       	brcs	.+8      	; 0x4678 <store+0xd2>
		{
			memory_address_incr = 0;
    4670:	10 92 77 23 	sts	0x2377, r1
    4674:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4678:	40 91 76 23 	lds	r20, 0x2376
    467c:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    4680:	03 e4       	ldi	r16, 0x43	; 67
    4682:	65 e4       	ldi	r22, 0x45	; 69
    4684:	8e ea       	ldi	r24, 0xAE	; 174
    4686:	d4 de       	rcall	.-600    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4688:	80 91 76 23 	lds	r24, 0x2376
    468c:	90 91 77 23 	lds	r25, 0x2377
    4690:	01 96       	adiw	r24, 0x01	; 1
    4692:	90 93 77 23 	sts	0x2377, r25
    4696:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    469a:	8a e0       	ldi	r24, 0x0A	; 10
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	db dd       	rcall	.-1098   	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    46a0:	80 91 76 23 	lds	r24, 0x2376
    46a4:	90 91 77 23 	lds	r25, 0x2377
    46a8:	8c 3f       	cpi	r24, 0xFC	; 252
    46aa:	9f 40       	sbci	r25, 0x0F	; 15
    46ac:	20 f0       	brcs	.+8      	; 0x46b6 <store+0x110>
		{
			memory_address_incr = 0;
    46ae:	10 92 77 23 	sts	0x2377, r1
    46b2:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    46b6:	40 91 76 23 	lds	r20, 0x2376
    46ba:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    46be:	05 e4       	ldi	r16, 0x45	; 69
    46c0:	65 e4       	ldi	r22, 0x45	; 69
    46c2:	8e ea       	ldi	r24, 0xAE	; 174
    46c4:	b5 de       	rcall	.-662    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    46c6:	80 91 76 23 	lds	r24, 0x2376
    46ca:	90 91 77 23 	lds	r25, 0x2377
    46ce:	01 96       	adiw	r24, 0x01	; 1
    46d0:	90 93 77 23 	sts	0x2377, r25
    46d4:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    46d8:	8a e0       	ldi	r24, 0x0A	; 10
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	bc dd       	rcall	.-1160   	; 0x4256 <pne_delayms>
    46de:	ca c1       	rjmp	.+916    	; 0x4a74 <store+0x4ce>
	}
	else if (seq == discharge_start)
    46e0:	82 30       	cpi	r24, 0x02	; 2
    46e2:	09 f0       	breq	.+2      	; 0x46e6 <store+0x140>
    46e4:	3f c0       	rjmp	.+126    	; 0x4764 <store+0x1be>
	{
		if (memory_address_incr >= 4092)
    46e6:	80 91 76 23 	lds	r24, 0x2376
    46ea:	90 91 77 23 	lds	r25, 0x2377
    46ee:	8c 3f       	cpi	r24, 0xFC	; 252
    46f0:	9f 40       	sbci	r25, 0x0F	; 15
    46f2:	20 f0       	brcs	.+8      	; 0x46fc <store+0x156>
		{
			memory_address_incr = 0;
    46f4:	10 92 77 23 	sts	0x2377, r1
    46f8:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    46fc:	40 91 76 23 	lds	r20, 0x2376
    4700:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    4704:	04 e4       	ldi	r16, 0x44	; 68
    4706:	65 e4       	ldi	r22, 0x45	; 69
    4708:	8e ea       	ldi	r24, 0xAE	; 174
    470a:	92 de       	rcall	.-732    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    470c:	80 91 76 23 	lds	r24, 0x2376
    4710:	90 91 77 23 	lds	r25, 0x2377
    4714:	01 96       	adiw	r24, 0x01	; 1
    4716:	90 93 77 23 	sts	0x2377, r25
    471a:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    471e:	8a e0       	ldi	r24, 0x0A	; 10
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	99 dd       	rcall	.-1230   	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    4724:	80 91 76 23 	lds	r24, 0x2376
    4728:	90 91 77 23 	lds	r25, 0x2377
    472c:	8c 3f       	cpi	r24, 0xFC	; 252
    472e:	9f 40       	sbci	r25, 0x0F	; 15
    4730:	20 f0       	brcs	.+8      	; 0x473a <store+0x194>
		{
			memory_address_incr = 0;
    4732:	10 92 77 23 	sts	0x2377, r1
    4736:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    473a:	40 91 76 23 	lds	r20, 0x2376
    473e:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    4742:	03 e5       	ldi	r16, 0x53	; 83
    4744:	65 e4       	ldi	r22, 0x45	; 69
    4746:	8e ea       	ldi	r24, 0xAE	; 174
    4748:	73 de       	rcall	.-794    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    474a:	80 91 76 23 	lds	r24, 0x2376
    474e:	90 91 77 23 	lds	r25, 0x2377
    4752:	01 96       	adiw	r24, 0x01	; 1
    4754:	90 93 77 23 	sts	0x2377, r25
    4758:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    475c:	8a e0       	ldi	r24, 0x0A	; 10
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	7a dd       	rcall	.-1292   	; 0x4256 <pne_delayms>
    4762:	88 c1       	rjmp	.+784    	; 0x4a74 <store+0x4ce>
	}
	else if (seq == discharge_end)
    4764:	83 30       	cpi	r24, 0x03	; 3
    4766:	09 f0       	breq	.+2      	; 0x476a <store+0x1c4>
    4768:	3f c0       	rjmp	.+126    	; 0x47e8 <store+0x242>
	{
		if (memory_address_incr >= 4092)
    476a:	80 91 76 23 	lds	r24, 0x2376
    476e:	90 91 77 23 	lds	r25, 0x2377
    4772:	8c 3f       	cpi	r24, 0xFC	; 252
    4774:	9f 40       	sbci	r25, 0x0F	; 15
    4776:	20 f0       	brcs	.+8      	; 0x4780 <store+0x1da>
		{
			memory_address_incr = 0;
    4778:	10 92 77 23 	sts	0x2377, r1
    477c:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4780:	40 91 76 23 	lds	r20, 0x2376
    4784:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    4788:	04 e4       	ldi	r16, 0x44	; 68
    478a:	65 e4       	ldi	r22, 0x45	; 69
    478c:	8e ea       	ldi	r24, 0xAE	; 174
    478e:	50 de       	rcall	.-864    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4790:	80 91 76 23 	lds	r24, 0x2376
    4794:	90 91 77 23 	lds	r25, 0x2377
    4798:	01 96       	adiw	r24, 0x01	; 1
    479a:	90 93 77 23 	sts	0x2377, r25
    479e:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    47a2:	8a e0       	ldi	r24, 0x0A	; 10
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	57 dd       	rcall	.-1362   	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    47a8:	80 91 76 23 	lds	r24, 0x2376
    47ac:	90 91 77 23 	lds	r25, 0x2377
    47b0:	8c 3f       	cpi	r24, 0xFC	; 252
    47b2:	9f 40       	sbci	r25, 0x0F	; 15
    47b4:	20 f0       	brcs	.+8      	; 0x47be <store+0x218>
		{
			memory_address_incr = 0;
    47b6:	10 92 77 23 	sts	0x2377, r1
    47ba:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    47be:	40 91 76 23 	lds	r20, 0x2376
    47c2:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    47c6:	05 e4       	ldi	r16, 0x45	; 69
    47c8:	65 e4       	ldi	r22, 0x45	; 69
    47ca:	8e ea       	ldi	r24, 0xAE	; 174
    47cc:	31 de       	rcall	.-926    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    47ce:	80 91 76 23 	lds	r24, 0x2376
    47d2:	90 91 77 23 	lds	r25, 0x2377
    47d6:	01 96       	adiw	r24, 0x01	; 1
    47d8:	90 93 77 23 	sts	0x2377, r25
    47dc:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    47e0:	8a e0       	ldi	r24, 0x0A	; 10
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	38 dd       	rcall	.-1424   	; 0x4256 <pne_delayms>
    47e6:	46 c1       	rjmp	.+652    	; 0x4a74 <store+0x4ce>
	}
	else if (seq == emergency_start)
    47e8:	84 30       	cpi	r24, 0x04	; 4
    47ea:	09 f0       	breq	.+2      	; 0x47ee <store+0x248>
    47ec:	3f c0       	rjmp	.+126    	; 0x486c <store+0x2c6>
	{
		if (memory_address_incr >= 4092)
    47ee:	80 91 76 23 	lds	r24, 0x2376
    47f2:	90 91 77 23 	lds	r25, 0x2377
    47f6:	8c 3f       	cpi	r24, 0xFC	; 252
    47f8:	9f 40       	sbci	r25, 0x0F	; 15
    47fa:	20 f0       	brcs	.+8      	; 0x4804 <store+0x25e>
		{
			memory_address_incr = 0;
    47fc:	10 92 77 23 	sts	0x2377, r1
    4800:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4804:	40 91 76 23 	lds	r20, 0x2376
    4808:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    480c:	05 e4       	ldi	r16, 0x45	; 69
    480e:	65 e4       	ldi	r22, 0x45	; 69
    4810:	8e ea       	ldi	r24, 0xAE	; 174
    4812:	0e de       	rcall	.-996    	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4814:	80 91 76 23 	lds	r24, 0x2376
    4818:	90 91 77 23 	lds	r25, 0x2377
    481c:	01 96       	adiw	r24, 0x01	; 1
    481e:	90 93 77 23 	sts	0x2377, r25
    4822:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    4826:	8a e0       	ldi	r24, 0x0A	; 10
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	15 dd       	rcall	.-1494   	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    482c:	80 91 76 23 	lds	r24, 0x2376
    4830:	90 91 77 23 	lds	r25, 0x2377
    4834:	8c 3f       	cpi	r24, 0xFC	; 252
    4836:	9f 40       	sbci	r25, 0x0F	; 15
    4838:	20 f0       	brcs	.+8      	; 0x4842 <store+0x29c>
		{
			memory_address_incr = 0;
    483a:	10 92 77 23 	sts	0x2377, r1
    483e:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4842:	40 91 76 23 	lds	r20, 0x2376
    4846:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    484a:	03 e5       	ldi	r16, 0x53	; 83
    484c:	65 e4       	ldi	r22, 0x45	; 69
    484e:	8e ea       	ldi	r24, 0xAE	; 174
    4850:	ef dd       	rcall	.-1058   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4852:	80 91 76 23 	lds	r24, 0x2376
    4856:	90 91 77 23 	lds	r25, 0x2377
    485a:	01 96       	adiw	r24, 0x01	; 1
    485c:	90 93 77 23 	sts	0x2377, r25
    4860:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    4864:	8a e0       	ldi	r24, 0x0A	; 10
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	f6 dc       	rcall	.-1556   	; 0x4256 <pne_delayms>
    486a:	04 c1       	rjmp	.+520    	; 0x4a74 <store+0x4ce>
	}
	else if (seq == emergency_end)
    486c:	85 30       	cpi	r24, 0x05	; 5
    486e:	09 f0       	breq	.+2      	; 0x4872 <store+0x2cc>
    4870:	3f c0       	rjmp	.+126    	; 0x48f0 <store+0x34a>
	{
		if (memory_address_incr >= 4092)
    4872:	80 91 76 23 	lds	r24, 0x2376
    4876:	90 91 77 23 	lds	r25, 0x2377
    487a:	8c 3f       	cpi	r24, 0xFC	; 252
    487c:	9f 40       	sbci	r25, 0x0F	; 15
    487e:	20 f0       	brcs	.+8      	; 0x4888 <store+0x2e2>
		{
			memory_address_incr = 0;
    4880:	10 92 77 23 	sts	0x2377, r1
    4884:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4888:	40 91 76 23 	lds	r20, 0x2376
    488c:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    4890:	05 e4       	ldi	r16, 0x45	; 69
    4892:	65 e4       	ldi	r22, 0x45	; 69
    4894:	8e ea       	ldi	r24, 0xAE	; 174
    4896:	cc dd       	rcall	.-1128   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4898:	80 91 76 23 	lds	r24, 0x2376
    489c:	90 91 77 23 	lds	r25, 0x2377
    48a0:	01 96       	adiw	r24, 0x01	; 1
    48a2:	90 93 77 23 	sts	0x2377, r25
    48a6:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    48aa:	8a e0       	ldi	r24, 0x0A	; 10
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	d3 dc       	rcall	.-1626   	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    48b0:	80 91 76 23 	lds	r24, 0x2376
    48b4:	90 91 77 23 	lds	r25, 0x2377
    48b8:	8c 3f       	cpi	r24, 0xFC	; 252
    48ba:	9f 40       	sbci	r25, 0x0F	; 15
    48bc:	20 f0       	brcs	.+8      	; 0x48c6 <store+0x320>
		{
			memory_address_incr = 0;
    48be:	10 92 77 23 	sts	0x2377, r1
    48c2:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    48c6:	40 91 76 23 	lds	r20, 0x2376
    48ca:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    48ce:	05 e4       	ldi	r16, 0x45	; 69
    48d0:	65 e4       	ldi	r22, 0x45	; 69
    48d2:	8e ea       	ldi	r24, 0xAE	; 174
    48d4:	ad dd       	rcall	.-1190   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    48d6:	80 91 76 23 	lds	r24, 0x2376
    48da:	90 91 77 23 	lds	r25, 0x2377
    48de:	01 96       	adiw	r24, 0x01	; 1
    48e0:	90 93 77 23 	sts	0x2377, r25
    48e4:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    48e8:	8a e0       	ldi	r24, 0x0A	; 10
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	b4 dc       	rcall	.-1688   	; 0x4256 <pne_delayms>
    48ee:	c2 c0       	rjmp	.+388    	; 0x4a74 <store+0x4ce>
	}
	else if (seq == battery_charged)
    48f0:	86 30       	cpi	r24, 0x06	; 6
    48f2:	09 f0       	breq	.+2      	; 0x48f6 <store+0x350>
    48f4:	3f c0       	rjmp	.+126    	; 0x4974 <store+0x3ce>
	{
		if (memory_address_incr >= 4092)
    48f6:	80 91 76 23 	lds	r24, 0x2376
    48fa:	90 91 77 23 	lds	r25, 0x2377
    48fe:	8c 3f       	cpi	r24, 0xFC	; 252
    4900:	9f 40       	sbci	r25, 0x0F	; 15
    4902:	20 f0       	brcs	.+8      	; 0x490c <store+0x366>
		{
			memory_address_incr = 0;
    4904:	10 92 77 23 	sts	0x2377, r1
    4908:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    490c:	40 91 76 23 	lds	r20, 0x2376
    4910:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x42);
    4914:	02 e4       	ldi	r16, 0x42	; 66
    4916:	65 e4       	ldi	r22, 0x45	; 69
    4918:	8e ea       	ldi	r24, 0xAE	; 174
    491a:	8a dd       	rcall	.-1260   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    491c:	80 91 76 23 	lds	r24, 0x2376
    4920:	90 91 77 23 	lds	r25, 0x2377
    4924:	01 96       	adiw	r24, 0x01	; 1
    4926:	90 93 77 23 	sts	0x2377, r25
    492a:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    492e:	8a e0       	ldi	r24, 0x0A	; 10
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	91 dc       	rcall	.-1758   	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    4934:	80 91 76 23 	lds	r24, 0x2376
    4938:	90 91 77 23 	lds	r25, 0x2377
    493c:	8c 3f       	cpi	r24, 0xFC	; 252
    493e:	9f 40       	sbci	r25, 0x0F	; 15
    4940:	20 f0       	brcs	.+8      	; 0x494a <store+0x3a4>
		{
			memory_address_incr = 0;
    4942:	10 92 77 23 	sts	0x2377, r1
    4946:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    494a:	40 91 76 23 	lds	r20, 0x2376
    494e:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    4952:	03 e4       	ldi	r16, 0x43	; 67
    4954:	65 e4       	ldi	r22, 0x45	; 69
    4956:	8e ea       	ldi	r24, 0xAE	; 174
    4958:	6b dd       	rcall	.-1322   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    495a:	80 91 76 23 	lds	r24, 0x2376
    495e:	90 91 77 23 	lds	r25, 0x2377
    4962:	01 96       	adiw	r24, 0x01	; 1
    4964:	90 93 77 23 	sts	0x2377, r25
    4968:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    496c:	8a e0       	ldi	r24, 0x0A	; 10
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	72 dc       	rcall	.-1820   	; 0x4256 <pne_delayms>
    4972:	80 c0       	rjmp	.+256    	; 0x4a74 <store+0x4ce>
	}
	else if (seq == battery_discharged)
    4974:	87 30       	cpi	r24, 0x07	; 7
    4976:	09 f0       	breq	.+2      	; 0x497a <store+0x3d4>
    4978:	3f c0       	rjmp	.+126    	; 0x49f8 <store+0x452>
	{
		if (memory_address_incr >= 4092)
    497a:	80 91 76 23 	lds	r24, 0x2376
    497e:	90 91 77 23 	lds	r25, 0x2377
    4982:	8c 3f       	cpi	r24, 0xFC	; 252
    4984:	9f 40       	sbci	r25, 0x0F	; 15
    4986:	20 f0       	brcs	.+8      	; 0x4990 <store+0x3ea>
		{
			memory_address_incr = 0;
    4988:	10 92 77 23 	sts	0x2377, r1
    498c:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4990:	40 91 76 23 	lds	r20, 0x2376
    4994:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x42);
    4998:	02 e4       	ldi	r16, 0x42	; 66
    499a:	65 e4       	ldi	r22, 0x45	; 69
    499c:	8e ea       	ldi	r24, 0xAE	; 174
    499e:	48 dd       	rcall	.-1392   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    49a0:	80 91 76 23 	lds	r24, 0x2376
    49a4:	90 91 77 23 	lds	r25, 0x2377
    49a8:	01 96       	adiw	r24, 0x01	; 1
    49aa:	90 93 77 23 	sts	0x2377, r25
    49ae:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    49b2:	8a e0       	ldi	r24, 0x0A	; 10
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	4f dc       	rcall	.-1890   	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    49b8:	80 91 76 23 	lds	r24, 0x2376
    49bc:	90 91 77 23 	lds	r25, 0x2377
    49c0:	8c 3f       	cpi	r24, 0xFC	; 252
    49c2:	9f 40       	sbci	r25, 0x0F	; 15
    49c4:	20 f0       	brcs	.+8      	; 0x49ce <store+0x428>
		{
			memory_address_incr = 0;
    49c6:	10 92 77 23 	sts	0x2377, r1
    49ca:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    49ce:	40 91 76 23 	lds	r20, 0x2376
    49d2:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    49d6:	04 e4       	ldi	r16, 0x44	; 68
    49d8:	65 e4       	ldi	r22, 0x45	; 69
    49da:	8e ea       	ldi	r24, 0xAE	; 174
    49dc:	29 dd       	rcall	.-1454   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    49de:	80 91 76 23 	lds	r24, 0x2376
    49e2:	90 91 77 23 	lds	r25, 0x2377
    49e6:	01 96       	adiw	r24, 0x01	; 1
    49e8:	90 93 77 23 	sts	0x2377, r25
    49ec:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    49f0:	8a e0       	ldi	r24, 0x0A	; 10
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	30 dc       	rcall	.-1952   	; 0x4256 <pne_delayms>
    49f6:	3e c0       	rjmp	.+124    	; 0x4a74 <store+0x4ce>
	}
	else
	{
		if (memory_address_incr >= 4092)
    49f8:	80 91 76 23 	lds	r24, 0x2376
    49fc:	90 91 77 23 	lds	r25, 0x2377
    4a00:	8c 3f       	cpi	r24, 0xFC	; 252
    4a02:	9f 40       	sbci	r25, 0x0F	; 15
    4a04:	20 f0       	brcs	.+8      	; 0x4a0e <store+0x468>
		{
			memory_address_incr = 0;
    4a06:	10 92 77 23 	sts	0x2377, r1
    4a0a:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a0e:	40 91 76 23 	lds	r20, 0x2376
    4a12:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x4E);
    4a16:	0e e4       	ldi	r16, 0x4E	; 78
    4a18:	65 e4       	ldi	r22, 0x45	; 69
    4a1a:	8e ea       	ldi	r24, 0xAE	; 174
    4a1c:	09 dd       	rcall	.-1518   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4a1e:	80 91 76 23 	lds	r24, 0x2376
    4a22:	90 91 77 23 	lds	r25, 0x2377
    4a26:	01 96       	adiw	r24, 0x01	; 1
    4a28:	90 93 77 23 	sts	0x2377, r25
    4a2c:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    4a30:	8a e0       	ldi	r24, 0x0A	; 10
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	10 dc       	rcall	.-2016   	; 0x4256 <pne_delayms>
		if (memory_address_incr >= 4092)
    4a36:	80 91 76 23 	lds	r24, 0x2376
    4a3a:	90 91 77 23 	lds	r25, 0x2377
    4a3e:	8c 3f       	cpi	r24, 0xFC	; 252
    4a40:	9f 40       	sbci	r25, 0x0F	; 15
    4a42:	20 f0       	brcs	.+8      	; 0x4a4c <store+0x4a6>
		{
			memory_address_incr = 0;
    4a44:	10 92 77 23 	sts	0x2377, r1
    4a48:	10 92 76 23 	sts	0x2376, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a4c:	40 91 76 23 	lds	r20, 0x2376
    4a50:	20 91 77 23 	lds	r18, 0x2377
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x4E);
    4a54:	0e e4       	ldi	r16, 0x4E	; 78
    4a56:	65 e4       	ldi	r22, 0x45	; 69
    4a58:	8e ea       	ldi	r24, 0xAE	; 174
    4a5a:	ea dc       	rcall	.-1580   	; 0x4430 <PNEWELSE2promWrite>
		memory_address_incr++;
    4a5c:	80 91 76 23 	lds	r24, 0x2376
    4a60:	90 91 77 23 	lds	r25, 0x2377
    4a64:	01 96       	adiw	r24, 0x01	; 1
    4a66:	90 93 77 23 	sts	0x2377, r25
    4a6a:	80 93 76 23 	sts	0x2376, r24
		pne_delayms(10);
    4a6e:	8a e0       	ldi	r24, 0x0A	; 10
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	f1 db       	rcall	.-2078   	; 0x4256 <pne_delayms>
	}
	
	current_state_emergency_light = PNEWELS_Buffer.IsOutputEmergencyLED;
    4a74:	80 91 79 22 	lds	r24, 0x2279
    4a78:	80 93 75 23 	sts	0x2375, r24
	current_time = get_timestamp();
    4a7c:	0e 94 d3 37 	call	0x6fa6	; 0x6fa6 <get_timestamp>
    4a80:	6b 01       	movw	r12, r22
    4a82:	7c 01       	movw	r14, r24
	time_4_byte = ((current_time & 0xFF000000) >> 24);
    4a84:	4f 2d       	mov	r20, r15
    4a86:	55 27       	eor	r21, r21
    4a88:	66 27       	eor	r22, r22
    4a8a:	77 27       	eor	r23, r23
	time_3_byte = ((current_time & 0x00FF0000) >> 16);
    4a8c:	4e 2c       	mov	r4, r14
	time_2_byte = ((current_time & 0x0000FF00) >> 8);
    4a8e:	8d 2c       	mov	r8, r13
	time_1_byte = (current_time & 0x000000FF);
	status_byte1 = ((PNEWELS_Buffer.BUTTON_WPS & 0x01) | ((PNEWELS_Buffer.BUTTON_MANUAL & 0x01) << 1) | ((PNEWELS_Buffer.IsFactory & 0x01) << 2) | ((PNEWELS_Buffer.STATUS_VCHARGE & 0x01) << 3) | ((PNEWELS_Buffer.TEMP_ALARM & 0x01) << 4) | ((PNEWELS_Buffer.IsBatt & 0x01) << 5) | ((PNEWELS_Buffer.soft_manual & 0x01) << 6) | ((PNEWELS_Buffer.STATUS_AC & 0x01) << 7));
    4a90:	a0 91 8d 22 	lds	r26, 0x228D
    4a94:	e0 e8       	ldi	r30, 0x80	; 128
    4a96:	ae 9f       	mul	r26, r30
    4a98:	d0 01       	movw	r26, r0
    4a9a:	11 24       	eor	r1, r1
    4a9c:	80 91 72 22 	lds	r24, 0x2272
    4aa0:	81 70       	andi	r24, 0x01	; 1
    4aa2:	a8 2b       	or	r26, r24
    4aa4:	80 91 71 22 	lds	r24, 0x2271
    4aa8:	81 70       	andi	r24, 0x01	; 1
    4aaa:	89 83       	std	Y+1, r24	; 0x01
    4aac:	1a 82       	std	Y+2, r1	; 0x02
    4aae:	89 81       	ldd	r24, Y+1	; 0x01
    4ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ab2:	88 0f       	add	r24, r24
    4ab4:	99 1f       	adc	r25, r25
    4ab6:	9a 2f       	mov	r25, r26
    4ab8:	98 2b       	or	r25, r24
    4aba:	80 91 75 22 	lds	r24, 0x2275
    4abe:	80 fb       	bst	r24, 0
    4ac0:	22 24       	eor	r2, r2
    4ac2:	20 f8       	bld	r2, 0
    4ac4:	31 2c       	mov	r3, r1
    4ac6:	22 0c       	add	r2, r2
    4ac8:	33 1c       	adc	r3, r3
    4aca:	22 0c       	add	r2, r2
    4acc:	33 1c       	adc	r3, r3
    4ace:	29 2a       	or	r2, r25
    4ad0:	ae e6       	ldi	r26, 0x6E	; 110
    4ad2:	b2 e2       	ldi	r27, 0x22	; 34
    4ad4:	8c 91       	ld	r24, X
    4ad6:	81 70       	andi	r24, 0x01	; 1
    4ad8:	8b 83       	std	Y+3, r24	; 0x03
    4ada:	1c 82       	std	Y+4, r1	; 0x04
    4adc:	eb 81       	ldd	r30, Y+3	; 0x03
    4ade:	fc 81       	ldd	r31, Y+4	; 0x04
    4ae0:	ee 0f       	add	r30, r30
    4ae2:	ff 1f       	adc	r31, r31
    4ae4:	ee 0f       	add	r30, r30
    4ae6:	ff 1f       	adc	r31, r31
    4ae8:	ee 0f       	add	r30, r30
    4aea:	ff 1f       	adc	r31, r31
    4aec:	82 2d       	mov	r24, r2
    4aee:	8e 2b       	or	r24, r30
    4af0:	90 91 73 22 	lds	r25, 0x2273
    4af4:	91 70       	andi	r25, 0x01	; 1
    4af6:	9d 83       	std	Y+5, r25	; 0x05
    4af8:	1e 82       	std	Y+6, r1	; 0x06
    4afa:	2d 81       	ldd	r18, Y+5	; 0x05
    4afc:	3e 81       	ldd	r19, Y+6	; 0x06
    4afe:	22 95       	swap	r18
    4b00:	32 95       	swap	r19
    4b02:	30 7f       	andi	r19, 0xF0	; 240
    4b04:	32 27       	eor	r19, r18
    4b06:	20 7f       	andi	r18, 0xF0	; 240
    4b08:	32 27       	eor	r19, r18
    4b0a:	28 2e       	mov	r2, r24
    4b0c:	22 2a       	or	r2, r18
    4b0e:	80 91 7e 22 	lds	r24, 0x227E
    4b12:	81 70       	andi	r24, 0x01	; 1
    4b14:	8f 83       	std	Y+7, r24	; 0x07
    4b16:	18 86       	std	Y+8, r1	; 0x08
    4b18:	8f 81       	ldd	r24, Y+7	; 0x07
    4b1a:	98 85       	ldd	r25, Y+8	; 0x08
    4b1c:	88 0f       	add	r24, r24
    4b1e:	99 1f       	adc	r25, r25
    4b20:	82 95       	swap	r24
    4b22:	92 95       	swap	r25
    4b24:	90 7f       	andi	r25, 0xF0	; 240
    4b26:	98 27       	eor	r25, r24
    4b28:	80 7f       	andi	r24, 0xF0	; 240
    4b2a:	98 27       	eor	r25, r24
    4b2c:	82 29       	or	r24, r2
    4b2e:	90 91 76 22 	lds	r25, 0x2276
    4b32:	91 70       	andi	r25, 0x01	; 1
    4b34:	99 87       	std	Y+9, r25	; 0x09
    4b36:	1a 86       	std	Y+10, r1	; 0x0a
    4b38:	29 84       	ldd	r2, Y+9	; 0x09
    4b3a:	3a 84       	ldd	r3, Y+10	; 0x0a
    4b3c:	00 24       	eor	r0, r0
    4b3e:	36 94       	lsr	r3
    4b40:	27 94       	ror	r2
    4b42:	07 94       	ror	r0
    4b44:	36 94       	lsr	r3
    4b46:	27 94       	ror	r2
    4b48:	07 94       	ror	r0
    4b4a:	32 2c       	mov	r3, r2
    4b4c:	20 2c       	mov	r2, r0
    4b4e:	28 2a       	or	r2, r24
	status_byte2 = ((PNEWELS_Buffer.mode & 0x07) | ((PNEWELS_Buffer.IsOutputEmergencyLED & 0x01) << 3) | ((PNEWELS_Buffer.IsOutputDisableCharging & 0x01) << 4) | ((PNEWELS_Buffer.oled0 & 0x01) << 5) | ((PNEWELS_Buffer.oled1 & 0x01) << 6) | ((PNEWELS_Buffer.oled2 & 0x01) << 7));
    4b50:	a0 91 95 22 	lds	r26, 0x2295
    4b54:	e0 e8       	ldi	r30, 0x80	; 128
    4b56:	ae 9f       	mul	r26, r30
    4b58:	d0 01       	movw	r26, r0
    4b5a:	11 24       	eor	r1, r1
    4b5c:	80 91 80 22 	lds	r24, 0x2280
    4b60:	87 70       	andi	r24, 0x07	; 7
    4b62:	8a 2b       	or	r24, r26
    4b64:	90 91 79 22 	lds	r25, 0x2279
    4b68:	91 70       	andi	r25, 0x01	; 1
    4b6a:	9b 87       	std	Y+11, r25	; 0x0b
    4b6c:	1c 86       	std	Y+12, r1	; 0x0c
    4b6e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4b70:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b72:	ee 0f       	add	r30, r30
    4b74:	ff 1f       	adc	r31, r31
    4b76:	ee 0f       	add	r30, r30
    4b78:	ff 1f       	adc	r31, r31
    4b7a:	ee 0f       	add	r30, r30
    4b7c:	ff 1f       	adc	r31, r31
    4b7e:	8e 2b       	or	r24, r30
    4b80:	90 91 7c 22 	lds	r25, 0x227C
    4b84:	91 70       	andi	r25, 0x01	; 1
    4b86:	9d 87       	std	Y+13, r25	; 0x0d
    4b88:	1e 86       	std	Y+14, r1	; 0x0e
    4b8a:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b8c:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b8e:	22 95       	swap	r18
    4b90:	32 95       	swap	r19
    4b92:	30 7f       	andi	r19, 0xF0	; 240
    4b94:	32 27       	eor	r19, r18
    4b96:	20 7f       	andi	r18, 0xF0	; 240
    4b98:	32 27       	eor	r19, r18
    4b9a:	28 2b       	or	r18, r24
    4b9c:	80 91 93 22 	lds	r24, 0x2293
    4ba0:	81 70       	andi	r24, 0x01	; 1
    4ba2:	8f 87       	std	Y+15, r24	; 0x0f
    4ba4:	18 8a       	std	Y+16, r1	; 0x10
    4ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ba8:	98 89       	ldd	r25, Y+16	; 0x10
    4baa:	88 0f       	add	r24, r24
    4bac:	99 1f       	adc	r25, r25
    4bae:	82 95       	swap	r24
    4bb0:	92 95       	swap	r25
    4bb2:	90 7f       	andi	r25, 0xF0	; 240
    4bb4:	98 27       	eor	r25, r24
    4bb6:	80 7f       	andi	r24, 0xF0	; 240
    4bb8:	98 27       	eor	r25, r24
    4bba:	82 2b       	or	r24, r18
    4bbc:	90 91 94 22 	lds	r25, 0x2294
    4bc0:	91 70       	andi	r25, 0x01	; 1
    4bc2:	99 8b       	std	Y+17, r25	; 0x11
    4bc4:	1a 8a       	std	Y+18, r1	; 0x12
    4bc6:	29 89       	ldd	r18, Y+17	; 0x11
    4bc8:	3a 89       	ldd	r19, Y+18	; 0x12
    4bca:	00 24       	eor	r0, r0
    4bcc:	36 95       	lsr	r19
    4bce:	27 95       	ror	r18
    4bd0:	07 94       	ror	r0
    4bd2:	36 95       	lsr	r19
    4bd4:	27 95       	ror	r18
    4bd6:	07 94       	ror	r0
    4bd8:	32 2f       	mov	r19, r18
    4bda:	20 2d       	mov	r18, r0
    4bdc:	18 2f       	mov	r17, r24
    4bde:	12 2b       	or	r17, r18
	status_byte3 = ((PNEWELS_Buffer.led_ch1 & 0x01) | ((PNEWELS_Buffer.led_ch2 & 0x01) << 1) | ((PNEWELS_Buffer.led_drv0 & 0x01) << 2) | ((PNEWELS_Buffer.led_drv1 & 0x01) << 3) | ((PNEWELS_Buffer.led_drv2 & 0x01) << 4) | ((PNEWELS_Buffer.soft_charge & 0x01) << 5) | ((PNEWELS_Buffer.soft_discharge & 0x01) << 6));
    4be0:	80 91 8f 22 	lds	r24, 0x228F
    4be4:	81 70       	andi	r24, 0x01	; 1
    4be6:	8b 8b       	std	Y+19, r24	; 0x13
    4be8:	1c 8a       	std	Y+20, r1	; 0x14
    4bea:	eb 89       	ldd	r30, Y+19	; 0x13
    4bec:	fc 89       	ldd	r31, Y+20	; 0x14
    4bee:	ee 0f       	add	r30, r30
    4bf0:	ff 1f       	adc	r31, r31
    4bf2:	80 91 90 22 	lds	r24, 0x2290
    4bf6:	81 70       	andi	r24, 0x01	; 1
    4bf8:	8d 8b       	std	Y+21, r24	; 0x15
    4bfa:	1e 8a       	std	Y+22, r1	; 0x16
    4bfc:	8d 89       	ldd	r24, Y+21	; 0x15
    4bfe:	9e 89       	ldd	r25, Y+22	; 0x16
    4c00:	88 0f       	add	r24, r24
    4c02:	99 1f       	adc	r25, r25
    4c04:	88 0f       	add	r24, r24
    4c06:	99 1f       	adc	r25, r25
    4c08:	8e 2b       	or	r24, r30
    4c0a:	e0 91 8e 22 	lds	r30, 0x228E
    4c0e:	e1 70       	andi	r30, 0x01	; 1
    4c10:	8e 2b       	or	r24, r30
    4c12:	90 91 91 22 	lds	r25, 0x2291
    4c16:	91 70       	andi	r25, 0x01	; 1
    4c18:	9f 8b       	std	Y+23, r25	; 0x17
    4c1a:	18 8e       	std	Y+24, r1	; 0x18
    4c1c:	ef 89       	ldd	r30, Y+23	; 0x17
    4c1e:	f8 8d       	ldd	r31, Y+24	; 0x18
    4c20:	ee 0f       	add	r30, r30
    4c22:	ff 1f       	adc	r31, r31
    4c24:	ee 0f       	add	r30, r30
    4c26:	ff 1f       	adc	r31, r31
    4c28:	ee 0f       	add	r30, r30
    4c2a:	ff 1f       	adc	r31, r31
    4c2c:	8e 2b       	or	r24, r30
    4c2e:	90 91 92 22 	lds	r25, 0x2292
    4c32:	91 70       	andi	r25, 0x01	; 1
    4c34:	99 8f       	std	Y+25, r25	; 0x19
    4c36:	1a 8e       	std	Y+26, r1	; 0x1a
    4c38:	29 8d       	ldd	r18, Y+25	; 0x19
    4c3a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4c3c:	22 95       	swap	r18
    4c3e:	32 95       	swap	r19
    4c40:	30 7f       	andi	r19, 0xF0	; 240
    4c42:	32 27       	eor	r19, r18
    4c44:	20 7f       	andi	r18, 0xF0	; 240
    4c46:	32 27       	eor	r19, r18
    4c48:	28 2b       	or	r18, r24
    4c4a:	80 91 77 22 	lds	r24, 0x2277
    4c4e:	81 70       	andi	r24, 0x01	; 1
    4c50:	8b 8f       	std	Y+27, r24	; 0x1b
    4c52:	1c 8e       	std	Y+28, r1	; 0x1c
    4c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c58:	88 0f       	add	r24, r24
    4c5a:	99 1f       	adc	r25, r25
    4c5c:	82 95       	swap	r24
    4c5e:	92 95       	swap	r25
    4c60:	90 7f       	andi	r25, 0xF0	; 240
    4c62:	98 27       	eor	r25, r24
    4c64:	80 7f       	andi	r24, 0xF0	; 240
    4c66:	98 27       	eor	r25, r24
    4c68:	82 2b       	or	r24, r18
    4c6a:	90 91 78 22 	lds	r25, 0x2278
    4c6e:	91 70       	andi	r25, 0x01	; 1
    4c70:	9d 8f       	std	Y+29, r25	; 0x1d
    4c72:	1e 8e       	std	Y+30, r1	; 0x1e
    4c74:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4c76:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4c78:	00 24       	eor	r0, r0
    4c7a:	36 95       	lsr	r19
    4c7c:	27 95       	ror	r18
    4c7e:	07 94       	ror	r0
    4c80:	36 95       	lsr	r19
    4c82:	27 95       	ror	r18
    4c84:	07 94       	ror	r0
    4c86:	32 2f       	mov	r19, r18
    4c88:	20 2d       	mov	r18, r0
    4c8a:	38 2e       	mov	r3, r24
    4c8c:	32 2a       	or	r3, r18
		
	if (memory_address_incr >= 4092)
    4c8e:	80 91 76 23 	lds	r24, 0x2376
    4c92:	90 91 77 23 	lds	r25, 0x2377
    4c96:	8c 3f       	cpi	r24, 0xFC	; 252
    4c98:	9f 40       	sbci	r25, 0x0F	; 15
    4c9a:	20 f0       	brcs	.+8      	; 0x4ca4 <store+0x6fe>
	{
		memory_address_incr = 0;
    4c9c:	10 92 77 23 	sts	0x2377, r1
    4ca0:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4ca4:	80 91 76 23 	lds	r24, 0x2376
    4ca8:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_4_byte);
    4cac:	04 2f       	mov	r16, r20
    4cae:	48 2f       	mov	r20, r24
    4cb0:	65 e4       	ldi	r22, 0x45	; 69
    4cb2:	8e ea       	ldi	r24, 0xAE	; 174
    4cb4:	bd db       	rcall	.-2182   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4cb6:	80 91 76 23 	lds	r24, 0x2376
    4cba:	90 91 77 23 	lds	r25, 0x2377
    4cbe:	01 96       	adiw	r24, 0x01	; 1
    4cc0:	90 93 77 23 	sts	0x2377, r25
    4cc4:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4cc8:	8a e0       	ldi	r24, 0x0A	; 10
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	c4 da       	rcall	.-2680   	; 0x4256 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4cce:	80 91 76 23 	lds	r24, 0x2376
    4cd2:	90 91 77 23 	lds	r25, 0x2377
    4cd6:	8c 3f       	cpi	r24, 0xFC	; 252
    4cd8:	9f 40       	sbci	r25, 0x0F	; 15
    4cda:	20 f0       	brcs	.+8      	; 0x4ce4 <store+0x73e>
	{
		memory_address_incr = 0;
    4cdc:	10 92 77 23 	sts	0x2377, r1
    4ce0:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4ce4:	40 91 76 23 	lds	r20, 0x2376
    4ce8:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_3_byte);
    4cec:	04 2d       	mov	r16, r4
    4cee:	65 e4       	ldi	r22, 0x45	; 69
    4cf0:	8e ea       	ldi	r24, 0xAE	; 174
    4cf2:	9e db       	rcall	.-2244   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4cf4:	80 91 76 23 	lds	r24, 0x2376
    4cf8:	90 91 77 23 	lds	r25, 0x2377
    4cfc:	01 96       	adiw	r24, 0x01	; 1
    4cfe:	90 93 77 23 	sts	0x2377, r25
    4d02:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4d06:	8a e0       	ldi	r24, 0x0A	; 10
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	a5 da       	rcall	.-2742   	; 0x4256 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4d0c:	80 91 76 23 	lds	r24, 0x2376
    4d10:	90 91 77 23 	lds	r25, 0x2377
    4d14:	8c 3f       	cpi	r24, 0xFC	; 252
    4d16:	9f 40       	sbci	r25, 0x0F	; 15
    4d18:	20 f0       	brcs	.+8      	; 0x4d22 <store+0x77c>
	{
		memory_address_incr = 0;
    4d1a:	10 92 77 23 	sts	0x2377, r1
    4d1e:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4d22:	40 91 76 23 	lds	r20, 0x2376
    4d26:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_2_byte);
    4d2a:	08 2d       	mov	r16, r8
    4d2c:	65 e4       	ldi	r22, 0x45	; 69
    4d2e:	8e ea       	ldi	r24, 0xAE	; 174
    4d30:	7f db       	rcall	.-2306   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4d32:	80 91 76 23 	lds	r24, 0x2376
    4d36:	90 91 77 23 	lds	r25, 0x2377
    4d3a:	01 96       	adiw	r24, 0x01	; 1
    4d3c:	90 93 77 23 	sts	0x2377, r25
    4d40:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4d44:	8a e0       	ldi	r24, 0x0A	; 10
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	86 da       	rcall	.-2804   	; 0x4256 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4d4a:	80 91 76 23 	lds	r24, 0x2376
    4d4e:	90 91 77 23 	lds	r25, 0x2377
    4d52:	8c 3f       	cpi	r24, 0xFC	; 252
    4d54:	9f 40       	sbci	r25, 0x0F	; 15
    4d56:	20 f0       	brcs	.+8      	; 0x4d60 <store+0x7ba>
	{
		memory_address_incr = 0;
    4d58:	10 92 77 23 	sts	0x2377, r1
    4d5c:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4d60:	40 91 76 23 	lds	r20, 0x2376
    4d64:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_1_byte);
    4d68:	0c 2d       	mov	r16, r12
    4d6a:	65 e4       	ldi	r22, 0x45	; 69
    4d6c:	8e ea       	ldi	r24, 0xAE	; 174
    4d6e:	60 db       	rcall	.-2368   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4d70:	80 91 76 23 	lds	r24, 0x2376
    4d74:	90 91 77 23 	lds	r25, 0x2377
    4d78:	01 96       	adiw	r24, 0x01	; 1
    4d7a:	90 93 77 23 	sts	0x2377, r25
    4d7e:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4d82:	8a e0       	ldi	r24, 0x0A	; 10
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	67 da       	rcall	.-2866   	; 0x4256 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4d88:	80 91 76 23 	lds	r24, 0x2376
    4d8c:	90 91 77 23 	lds	r25, 0x2377
    4d90:	8c 3f       	cpi	r24, 0xFC	; 252
    4d92:	9f 40       	sbci	r25, 0x0F	; 15
    4d94:	20 f0       	brcs	.+8      	; 0x4d9e <store+0x7f8>
	{
		memory_address_incr = 0;
    4d96:	10 92 77 23 	sts	0x2377, r1
    4d9a:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4d9e:	40 91 76 23 	lds	r20, 0x2376
    4da2:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, PNEWELS_Buffer.V_BATT);
    4da6:	00 91 6f 22 	lds	r16, 0x226F
    4daa:	65 e4       	ldi	r22, 0x45	; 69
    4dac:	8e ea       	ldi	r24, 0xAE	; 174
    4dae:	40 db       	rcall	.-2432   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4db0:	80 91 76 23 	lds	r24, 0x2376
    4db4:	90 91 77 23 	lds	r25, 0x2377
    4db8:	01 96       	adiw	r24, 0x01	; 1
    4dba:	90 93 77 23 	sts	0x2377, r25
    4dbe:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4dc2:	8a e0       	ldi	r24, 0x0A	; 10
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	47 da       	rcall	.-2930   	; 0x4256 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4dc8:	80 91 76 23 	lds	r24, 0x2376
    4dcc:	90 91 77 23 	lds	r25, 0x2377
    4dd0:	8c 3f       	cpi	r24, 0xFC	; 252
    4dd2:	9f 40       	sbci	r25, 0x0F	; 15
    4dd4:	20 f0       	brcs	.+8      	; 0x4dde <store+0x838>
	{
		memory_address_incr = 0;
    4dd6:	10 92 77 23 	sts	0x2377, r1
    4dda:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4dde:	40 91 76 23 	lds	r20, 0x2376
    4de2:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, PNEWELS_Buffer.temperature);
    4de6:	00 91 74 22 	lds	r16, 0x2274
    4dea:	65 e4       	ldi	r22, 0x45	; 69
    4dec:	8e ea       	ldi	r24, 0xAE	; 174
    4dee:	20 db       	rcall	.-2496   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4df0:	80 91 76 23 	lds	r24, 0x2376
    4df4:	90 91 77 23 	lds	r25, 0x2377
    4df8:	01 96       	adiw	r24, 0x01	; 1
    4dfa:	90 93 77 23 	sts	0x2377, r25
    4dfe:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4e02:	8a e0       	ldi	r24, 0x0A	; 10
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	27 da       	rcall	.-2994   	; 0x4256 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4e08:	80 91 76 23 	lds	r24, 0x2376
    4e0c:	90 91 77 23 	lds	r25, 0x2377
    4e10:	8c 3f       	cpi	r24, 0xFC	; 252
    4e12:	9f 40       	sbci	r25, 0x0F	; 15
    4e14:	20 f0       	brcs	.+8      	; 0x4e1e <store+0x878>
	{
		memory_address_incr = 0;
    4e16:	10 92 77 23 	sts	0x2377, r1
    4e1a:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4e1e:	40 91 76 23 	lds	r20, 0x2376
    4e22:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte1);
    4e26:	02 2d       	mov	r16, r2
    4e28:	65 e4       	ldi	r22, 0x45	; 69
    4e2a:	8e ea       	ldi	r24, 0xAE	; 174
    4e2c:	01 db       	rcall	.-2558   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4e2e:	80 91 76 23 	lds	r24, 0x2376
    4e32:	90 91 77 23 	lds	r25, 0x2377
    4e36:	01 96       	adiw	r24, 0x01	; 1
    4e38:	90 93 77 23 	sts	0x2377, r25
    4e3c:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4e40:	8a e0       	ldi	r24, 0x0A	; 10
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	08 da       	rcall	.-3056   	; 0x4256 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4e46:	80 91 76 23 	lds	r24, 0x2376
    4e4a:	90 91 77 23 	lds	r25, 0x2377
    4e4e:	8c 3f       	cpi	r24, 0xFC	; 252
    4e50:	9f 40       	sbci	r25, 0x0F	; 15
    4e52:	20 f0       	brcs	.+8      	; 0x4e5c <store+0x8b6>
	{
		memory_address_incr = 0;
    4e54:	10 92 77 23 	sts	0x2377, r1
    4e58:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4e5c:	40 91 76 23 	lds	r20, 0x2376
    4e60:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte2);
    4e64:	01 2f       	mov	r16, r17
    4e66:	65 e4       	ldi	r22, 0x45	; 69
    4e68:	8e ea       	ldi	r24, 0xAE	; 174
    4e6a:	e2 da       	rcall	.-2620   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4e6c:	80 91 76 23 	lds	r24, 0x2376
    4e70:	90 91 77 23 	lds	r25, 0x2377
    4e74:	01 96       	adiw	r24, 0x01	; 1
    4e76:	90 93 77 23 	sts	0x2377, r25
    4e7a:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4e7e:	8a e0       	ldi	r24, 0x0A	; 10
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	e9 d9       	rcall	.-3118   	; 0x4256 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4e84:	80 91 76 23 	lds	r24, 0x2376
    4e88:	90 91 77 23 	lds	r25, 0x2377
    4e8c:	8c 3f       	cpi	r24, 0xFC	; 252
    4e8e:	9f 40       	sbci	r25, 0x0F	; 15
    4e90:	20 f0       	brcs	.+8      	; 0x4e9a <store+0x8f4>
	{
		memory_address_incr = 0;
    4e92:	10 92 77 23 	sts	0x2377, r1
    4e96:	10 92 76 23 	sts	0x2376, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4e9a:	40 91 76 23 	lds	r20, 0x2376
    4e9e:	20 91 77 23 	lds	r18, 0x2377
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte3);
    4ea2:	03 2d       	mov	r16, r3
    4ea4:	65 e4       	ldi	r22, 0x45	; 69
    4ea6:	8e ea       	ldi	r24, 0xAE	; 174
    4ea8:	c3 da       	rcall	.-2682   	; 0x4430 <PNEWELSE2promWrite>
	memory_address_incr++;
    4eaa:	80 91 76 23 	lds	r24, 0x2376
    4eae:	90 91 77 23 	lds	r25, 0x2377
    4eb2:	01 96       	adiw	r24, 0x01	; 1
    4eb4:	90 93 77 23 	sts	0x2377, r25
    4eb8:	80 93 76 23 	sts	0x2376, r24
	pne_delayms(10);
    4ebc:	8a e0       	ldi	r24, 0x0A	; 10
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	ca d9       	rcall	.-3180   	; 0x4256 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4ec2:	80 91 76 23 	lds	r24, 0x2376
    4ec6:	90 91 77 23 	lds	r25, 0x2377
    4eca:	8c 3f       	cpi	r24, 0xFC	; 252
    4ecc:	9f 40       	sbci	r25, 0x0F	; 15
    4ece:	20 f0       	brcs	.+8      	; 0x4ed8 <store+0x932>
	{
		memory_address_incr = 0;
    4ed0:	10 92 77 23 	sts	0x2377, r1
    4ed4:	10 92 76 23 	sts	0x2376, r1
	}
	memoryCounter_save(memory_address_incr);
    4ed8:	80 91 76 23 	lds	r24, 0x2376
    4edc:	90 91 77 23 	lds	r25, 0x2377
    4ee0:	5e db       	rcall	.-2372   	; 0x459e <memoryCounter_save>
	pne_delayms(10);
    4ee2:	8a e0       	ldi	r24, 0x0A	; 10
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	b7 d9       	rcall	.-3218   	; 0x4256 <pne_delayms>
	

}
    4ee8:	6e 96       	adiw	r28, 0x1e	; 30
    4eea:	0f b6       	in	r0, 0x3f	; 63
    4eec:	f8 94       	cli
    4eee:	de bf       	out	0x3e, r29	; 62
    4ef0:	0f be       	out	0x3f, r0	; 63
    4ef2:	cd bf       	out	0x3d, r28	; 61
    4ef4:	df 91       	pop	r29
    4ef6:	cf 91       	pop	r28
    4ef8:	1f 91       	pop	r17
    4efa:	0f 91       	pop	r16
    4efc:	ff 90       	pop	r15
    4efe:	ef 90       	pop	r14
    4f00:	df 90       	pop	r13
    4f02:	cf 90       	pop	r12
    4f04:	bf 90       	pop	r11
    4f06:	af 90       	pop	r10
    4f08:	9f 90       	pop	r9
    4f0a:	8f 90       	pop	r8
    4f0c:	7f 90       	pop	r7
    4f0e:	6f 90       	pop	r6
    4f10:	5f 90       	pop	r5
    4f12:	4f 90       	pop	r4
    4f14:	3f 90       	pop	r3
    4f16:	2f 90       	pop	r2
    4f18:	08 95       	ret

00004f1a <send_usart_char>:
	while (tx_buf[i] != 0x00)
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
		i++;
	}
}
    4f1a:	0f 93       	push	r16
    4f1c:	1f 93       	push	r17
    4f1e:	cf 93       	push	r28
    4f20:	fc 01       	movw	r30, r24
    4f22:	60 81       	ld	r22, Z
    4f24:	66 23       	and	r22, r22
    4f26:	69 f0       	breq	.+26     	; 0x4f42 <send_usart_char+0x28>
    4f28:	8c 01       	movw	r16, r24
    4f2a:	c0 e0       	ldi	r28, 0x00	; 0
    4f2c:	88 ec       	ldi	r24, 0xC8	; 200
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
    4f34:	cf 5f       	subi	r28, 0xFF	; 255
    4f36:	f8 01       	movw	r30, r16
    4f38:	ec 0f       	add	r30, r28
    4f3a:	f1 1d       	adc	r31, r1
    4f3c:	60 81       	ld	r22, Z
    4f3e:	61 11       	cpse	r22, r1
    4f40:	f5 cf       	rjmp	.-22     	; 0x4f2c <send_usart_char+0x12>
    4f42:	cf 91       	pop	r28
    4f44:	1f 91       	pop	r17
    4f46:	0f 91       	pop	r16
    4f48:	08 95       	ret

00004f4a <pnewels_get_usart>:
    4f4a:	90 91 42 23 	lds	r25, 0x2342
    4f4e:	99 23       	and	r25, r25
    4f50:	19 f0       	breq	.+6      	; 0x4f58 <pnewels_get_usart+0xe>
    4f52:	91 30       	cpi	r25, 0x01	; 1
    4f54:	b9 f0       	breq	.+46     	; 0x4f84 <pnewels_get_usart+0x3a>
    4f56:	08 95       	ret
    4f58:	e0 ef       	ldi	r30, 0xF0	; 240
    4f5a:	f2 e2       	ldi	r31, 0x22	; 34
    4f5c:	2d ef       	ldi	r18, 0xFD	; 253
    4f5e:	32 e2       	ldi	r19, 0x22	; 34
    4f60:	90 e2       	ldi	r25, 0x20	; 32
    4f62:	91 93       	st	Z+, r25
    4f64:	e2 17       	cp	r30, r18
    4f66:	f3 07       	cpc	r31, r19
    4f68:	e1 f7       	brne	.-8      	; 0x4f62 <pnewels_get_usart+0x18>
    4f6a:	8b 35       	cpi	r24, 0x5B	; 91
    4f6c:	21 f4       	brne	.+8      	; 0x4f76 <pnewels_get_usart+0x2c>
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	80 93 42 23 	sts	0x2342, r24
    4f74:	08 95       	ret
    4f76:	8d 35       	cpi	r24, 0x5D	; 93
    4f78:	19 f5       	brne	.+70     	; 0x4fc0 <pnewels_get_usart+0x76>
    4f7a:	10 92 d3 22 	sts	0x22D3, r1
    4f7e:	10 92 42 23 	sts	0x2342, r1
    4f82:	08 95       	ret
    4f84:	8d 35       	cpi	r24, 0x5D	; 93
    4f86:	41 f4       	brne	.+16     	; 0x4f98 <pnewels_get_usart+0x4e>
    4f88:	10 92 d3 22 	sts	0x22D3, r1
    4f8c:	10 92 42 23 	sts	0x2342, r1
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	80 93 af 22 	sts	0x22AF, r24
    4f96:	08 95       	ret
    4f98:	90 91 d3 22 	lds	r25, 0x22D3
    4f9c:	9d 30       	cpi	r25, 0x0D	; 13
    4f9e:	48 f4       	brcc	.+18     	; 0x4fb2 <pnewels_get_usart+0x68>
    4fa0:	e9 2f       	mov	r30, r25
    4fa2:	f0 e0       	ldi	r31, 0x00	; 0
    4fa4:	e0 51       	subi	r30, 0x10	; 16
    4fa6:	fd 4d       	sbci	r31, 0xDD	; 221
    4fa8:	80 83       	st	Z, r24
    4faa:	9f 5f       	subi	r25, 0xFF	; 255
    4fac:	90 93 d3 22 	sts	0x22D3, r25
    4fb0:	08 95       	ret
    4fb2:	10 92 d3 22 	sts	0x22D3, r1
    4fb6:	10 92 42 23 	sts	0x2342, r1
    4fba:	8a ed       	ldi	r24, 0xDA	; 218
    4fbc:	92 e0       	ldi	r25, 0x02	; 2
    4fbe:	ad cf       	rjmp	.-166    	; 0x4f1a <send_usart_char>
    4fc0:	08 95       	ret

00004fc2 <int_to_ascii>:


//---------- side function for factory mode ----------//
void int_to_ascii(uint8_t number)
{
    4fc2:	cf 93       	push	r28
    4fc4:	c8 2f       	mov	r28, r24
	uint8_t display;
	
	display = ((number>>4) & 0x0F);
    4fc6:	68 2f       	mov	r22, r24
    4fc8:	62 95       	swap	r22
    4fca:	6f 70       	andi	r22, 0x0F	; 15
	if (display > 9)
    4fcc:	6a 30       	cpi	r22, 0x0A	; 10
    4fce:	10 f0       	brcs	.+4      	; 0x4fd4 <int_to_ascii+0x12>
	{
		display = display + 0x37;
    4fd0:	69 5c       	subi	r22, 0xC9	; 201
    4fd2:	01 c0       	rjmp	.+2      	; 0x4fd6 <int_to_ascii+0x14>
	}
	else
	{
		display = display + 0x30;
    4fd4:	60 5d       	subi	r22, 0xD0	; 208
	}
	usart_putchar(USART_SERIAL_EXAMPLE, display);
    4fd6:	88 ec       	ldi	r24, 0xC8	; 200
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
	
	display = ((number) & 0x0F);
    4fde:	cf 70       	andi	r28, 0x0F	; 15
	if (display > 9)
    4fe0:	ca 30       	cpi	r28, 0x0A	; 10
    4fe2:	18 f0       	brcs	.+6      	; 0x4fea <int_to_ascii+0x28>
	{
		display = display + 0x37;
    4fe4:	67 e3       	ldi	r22, 0x37	; 55
    4fe6:	6c 0f       	add	r22, r28
    4fe8:	02 c0       	rjmp	.+4      	; 0x4fee <int_to_ascii+0x2c>
	}
	else
	{
		display = display + 0x30;
    4fea:	60 e3       	ldi	r22, 0x30	; 48
    4fec:	6c 0f       	add	r22, r28
	}
	usart_putchar(USART_SERIAL_EXAMPLE, display);
    4fee:	88 ec       	ldi	r24, 0xC8	; 200
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
}
    4ff6:	cf 91       	pop	r28
    4ff8:	08 95       	ret

00004ffa <optionSelect>:
}

uint8_t optionSelect()
{
	/*char real_command[3] = "123";*/
	flag = 0;
    4ffa:	10 92 af 22 	sts	0x22AF, r1
	
	switch(commamd[0])
    4ffe:	e0 91 f0 22 	lds	r30, 0x22F0
    5002:	8e 2f       	mov	r24, r30
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	fc 01       	movw	r30, r24
    5008:	f1 97       	sbiw	r30, 0x31	; 49
    500a:	e9 30       	cpi	r30, 0x09	; 9
    500c:	f1 05       	cpc	r31, r1
    500e:	b0 f4       	brcc	.+44     	; 0x503c <optionSelect+0x42>
    5010:	88 27       	eor	r24, r24
    5012:	ed 59       	subi	r30, 0x9D	; 157
    5014:	fe 4f       	sbci	r31, 0xFE	; 254
    5016:	8f 4f       	sbci	r24, 0xFF	; 255
    5018:	0c 94 7c 4d 	jmp	0x9af8	; 0x9af8 <__tablejump2__>
		case '1':
			return 1;
		break;
		
		case '2':
			return 2;
    501c:	82 e0       	ldi	r24, 0x02	; 2
    501e:	08 95       	ret
		break;
		
		case '3':
			return 3;
    5020:	83 e0       	ldi	r24, 0x03	; 3
    5022:	08 95       	ret
		break;
		
		case '4':
			return 4;
    5024:	84 e0       	ldi	r24, 0x04	; 4
    5026:	08 95       	ret
		break;
		
		case '5':
			return 5;
    5028:	85 e0       	ldi	r24, 0x05	; 5
    502a:	08 95       	ret
		break;
		
		case '6':
			return 6;
    502c:	86 e0       	ldi	r24, 0x06	; 6
    502e:	08 95       	ret
		break;
		
		case '7':
			return 7;
    5030:	87 e0       	ldi	r24, 0x07	; 7
    5032:	08 95       	ret
		break;
		
		case '8':
			return 8;
    5034:	88 e0       	ldi	r24, 0x08	; 8
    5036:	08 95       	ret
		break;
		
		case '9':
			return 9;
    5038:	89 e0       	ldi	r24, 0x09	; 9
    503a:	08 95       	ret
		break;
		
		default:
			send_usart_char("Invalid command\r\n");
    503c:	8a ef       	ldi	r24, 0xFA	; 250
    503e:	92 e0       	ldi	r25, 0x02	; 2
    5040:	6c df       	rcall	.-296    	; 0x4f1a <send_usart_char>
		break;
			
	}
		return idle;
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
			return 1;
    5046:	81 e0       	ldi	r24, 0x01	; 1
			send_usart_char("Invalid command\r\n");
		break;
			
	}
		return idle;
}
    5048:	08 95       	ret

0000504a <configSelect>:
}

uint8_t configSelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    504a:	10 92 af 22 	sts	0x22AF, r1
	
	switch(commamd[0])
    504e:	80 91 f0 22 	lds	r24, 0x22F0
    5052:	81 33       	cpi	r24, 0x31	; 49
    5054:	a1 f0       	breq	.+40     	; 0x507e <configSelect+0x34>
    5056:	18 f4       	brcc	.+6      	; 0x505e <configSelect+0x14>
    5058:	80 33       	cpi	r24, 0x30	; 48
    505a:	51 f0       	breq	.+20     	; 0x5070 <configSelect+0x26>
    505c:	0b c0       	rjmp	.+22     	; 0x5074 <configSelect+0x2a>
    505e:	82 33       	cpi	r24, 0x32	; 50
    5060:	19 f0       	breq	.+6      	; 0x5068 <configSelect+0x1e>
    5062:	83 33       	cpi	r24, 0x33	; 51
    5064:	19 f0       	breq	.+6      	; 0x506c <configSelect+0x22>
    5066:	06 c0       	rjmp	.+12     	; 0x5074 <configSelect+0x2a>
		case '1':
			return config_DeviceADDR;
		break;
		
		case '2':
			return config_DeviceCH;
    5068:	82 e0       	ldi	r24, 0x02	; 2
    506a:	08 95       	ret
		break;
		
		case '3':
			return config_DevicePAN;
    506c:	83 e0       	ldi	r24, 0x03	; 3
    506e:	08 95       	ret
		break;
		
		case '0':
			return config_exit;
    5070:	84 e0       	ldi	r24, 0x04	; 4
    5072:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    5074:	8a ef       	ldi	r24, 0xFA	; 250
    5076:	92 e0       	ldi	r25, 0x02	; 2
    5078:	50 df       	rcall	.-352    	; 0x4f1a <send_usart_char>
			return config_idle;
    507a:	85 e0       	ldi	r24, 0x05	; 5
    507c:	08 95       	ret
// 		case '3':
// 			return config_NodeID;
// 		break;
		
		case '1':
			return config_DeviceADDR;
    507e:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		
			
	}
}
    5080:	08 95       	ret

00005082 <send_usart_const_char>:
		}
	}
}

void send_usart_const_char(const char *tx_buf)
{
    5082:	0f 93       	push	r16
    5084:	1f 93       	push	r17
    5086:	cf 93       	push	r28
	uint8_t i =0;
	
	while (tx_buf[i] != 0x00)
    5088:	fc 01       	movw	r30, r24
    508a:	60 81       	ld	r22, Z
    508c:	66 23       	and	r22, r22
    508e:	69 f0       	breq	.+26     	; 0x50aa <send_usart_const_char+0x28>
    5090:	8c 01       	movw	r16, r24
    5092:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
    5094:	88 ec       	ldi	r24, 0xC8	; 200
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
		i++;
    509c:	cf 5f       	subi	r28, 0xFF	; 255

void send_usart_const_char(const char *tx_buf)
{
	uint8_t i =0;
	
	while (tx_buf[i] != 0x00)
    509e:	f8 01       	movw	r30, r16
    50a0:	ec 0f       	add	r30, r28
    50a2:	f1 1d       	adc	r31, r1
    50a4:	60 81       	ld	r22, Z
    50a6:	61 11       	cpse	r22, r1
    50a8:	f5 cf       	rjmp	.-22     	; 0x5094 <send_usart_const_char+0x12>
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
		i++;
	}
}
    50aa:	cf 91       	pop	r28
    50ac:	1f 91       	pop	r17
    50ae:	0f 91       	pop	r16
    50b0:	08 95       	ret

000050b2 <send_operation_info>:

void send_operation_info(const char *name, uint8_t data)
{
    50b2:	cf 93       	push	r28
    50b4:	c6 2f       	mov	r28, r22
	send_usart_const_char(name);
    50b6:	e5 df       	rcall	.-54     	; 0x5082 <send_usart_const_char>
	send_usart_char(" changed to ");
    50b8:	8c e0       	ldi	r24, 0x0C	; 12
    50ba:	93 e0       	ldi	r25, 0x03	; 3
    50bc:	2e df       	rcall	.-420    	; 0x4f1a <send_usart_char>
	int_to_ascii(data);
    50be:	8c 2f       	mov	r24, r28
    50c0:	80 df       	rcall	.-256    	; 0x4fc2 <int_to_ascii>
	/*send_usart_char("\r\n");*/
}
    50c2:	cf 91       	pop	r28
    50c4:	08 95       	ret

000050c6 <config_read_input>:
			
	}
}

void config_read_input(uint16_t address, char data_length, const char *name)
{
    50c6:	9f 92       	push	r9
    50c8:	af 92       	push	r10
    50ca:	bf 92       	push	r11
    50cc:	cf 92       	push	r12
    50ce:	df 92       	push	r13
    50d0:	ef 92       	push	r14
    50d2:	ff 92       	push	r15
    50d4:	0f 93       	push	r16
    50d6:	1f 93       	push	r17
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	f6 2e       	mov	r15, r22
    50de:	6a 01       	movw	r12, r20
	uint8_t data_short = 0;
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
    50e0:	21 e0       	ldi	r18, 0x01	; 1
    50e2:	20 93 15 23 	sts	0x2315, r18
	flag = 0;
    50e6:	10 92 af 22 	sts	0x22AF, r1
	uint8_t memory_address_low = (address & 0xFF);
    50ea:	18 2f       	mov	r17, r24
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
    50ec:	b9 2e       	mov	r11, r25
		{
			switch(data_length)
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    50ee:	c0 ef       	ldi	r28, 0xF0	; 240
    50f0:	d2 e2       	ldi	r29, 0x22	; 34
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
    50f2:	aa 24       	eor	r10, r10
    50f4:	a3 94       	inc	r10
    50f6:	a8 0e       	add	r10, r24
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
	flag = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	while(config_waiting_input == 1)
    50f8:	5b c0       	rjmp	.+182    	; 0x51b0 <config_read_input+0xea>
	{
		if(flag == 1)
    50fa:	30 91 af 22 	lds	r19, 0x22AF
    50fe:	31 30       	cpi	r19, 0x01	; 1
    5100:	e1 f7       	brne	.-8      	; 0x50fa <config_read_input+0x34>
		{
			switch(data_length)
    5102:	81 e3       	ldi	r24, 0x31	; 49
    5104:	f8 16       	cp	r15, r24
    5106:	21 f0       	breq	.+8      	; 0x5110 <config_read_input+0x4a>
    5108:	82 e3       	ldi	r24, 0x32	; 50
    510a:	f8 16       	cp	r15, r24
    510c:	f1 f0       	breq	.+60     	; 0x514a <config_read_input+0x84>
    510e:	4d c0       	rjmp	.+154    	; 0x51aa <config_read_input+0xe4>
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    5110:	88 81       	ld	r24, Y
    5112:	0e 94 14 37 	call	0x6e28	; 0x6e28 <ascii_to_hex>
    5116:	e8 2e       	mov	r14, r24
					cache[1] = ascii_to_hex(commamd[1]);
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	0e 94 14 37 	call	0x6e28	; 0x6e28 <ascii_to_hex>
		{
			switch(data_length)
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    511e:	ee 0c       	add	r14, r14
    5120:	ee 0c       	add	r14, r14
    5122:	ee 0c       	add	r14, r14
    5124:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
    5126:	e8 2a       	or	r14, r24
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, data_short);
    5128:	0e 2d       	mov	r16, r14
    512a:	2b 2d       	mov	r18, r11
    512c:	41 2f       	mov	r20, r17
    512e:	65 e4       	ldi	r22, 0x45	; 69
    5130:	8e ea       	ldi	r24, 0xAE	; 174
    5132:	7e d9       	rcall	.-3332   	; 0x4430 <PNEWELSE2promWrite>
					send_operation_info(name, data_short);
    5134:	6e 2d       	mov	r22, r14
    5136:	c6 01       	movw	r24, r12
    5138:	bc df       	rcall	.-136    	; 0x50b2 <send_operation_info>
					pne_delayms(10);
    513a:	8a e0       	ldi	r24, 0x0A	; 10
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	8b d8       	rcall	.-3818   	; 0x4256 <pne_delayms>

					config_waiting_input = 0;
    5140:	10 92 15 23 	sts	0x2315, r1
					flag = 0;
    5144:	10 92 af 22 	sts	0x22AF, r1
				}
				break;
    5148:	33 c0       	rjmp	.+102    	; 0x51b0 <config_read_input+0xea>
				
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    514a:	88 81       	ld	r24, Y
    514c:	0e 94 14 37 	call	0x6e28	; 0x6e28 <ascii_to_hex>
    5150:	e8 2e       	mov	r14, r24
					cache[1] = ascii_to_hex(commamd[1]);
    5152:	89 81       	ldd	r24, Y+1	; 0x01
    5154:	0e 94 14 37 	call	0x6e28	; 0x6e28 <ascii_to_hex>
				}
				break;
				
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    5158:	ee 0c       	add	r14, r14
    515a:	ee 0c       	add	r14, r14
    515c:	ee 0c       	add	r14, r14
    515e:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
    5160:	e8 2a       	or	r14, r24
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
    5162:	0e 2d       	mov	r16, r14
    5164:	2b 2d       	mov	r18, r11
    5166:	4a 2d       	mov	r20, r10
    5168:	65 e4       	ldi	r22, 0x45	; 69
    516a:	8e ea       	ldi	r24, 0xAE	; 174
    516c:	61 d9       	rcall	.-3390   	; 0x4430 <PNEWELSE2promWrite>
					cache[0] = ascii_to_hex(commamd[2])<<4;
    516e:	8a 81       	ldd	r24, Y+2	; 0x02
    5170:	0e 94 14 37 	call	0x6e28	; 0x6e28 <ascii_to_hex>
    5174:	98 2e       	mov	r9, r24
					cache[1] = ascii_to_hex(commamd[3]);
    5176:	8b 81       	ldd	r24, Y+3	; 0x03
    5178:	0e 94 14 37 	call	0x6e28	; 0x6e28 <ascii_to_hex>
    517c:	08 2f       	mov	r16, r24
					send_operation_info(name, data_short);
    517e:	6e 2d       	mov	r22, r14
    5180:	c6 01       	movw	r24, r12
    5182:	97 df       	rcall	.-210    	; 0x50b2 <send_operation_info>
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
					cache[0] = ascii_to_hex(commamd[2])<<4;
    5184:	e9 2c       	mov	r14, r9
    5186:	ee 0c       	add	r14, r14
    5188:	ee 0c       	add	r14, r14
    518a:	ee 0c       	add	r14, r14
    518c:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[3]);
					send_operation_info(name, data_short);
					data_short = cache[0] | cache[1];
    518e:	e0 2a       	or	r14, r16
					PNEWELSE2promWrite(0xAF, 'E', memory_address_low , memory_address_high, data_short);
    5190:	0e 2d       	mov	r16, r14
    5192:	2b 2d       	mov	r18, r11
    5194:	41 2f       	mov	r20, r17
    5196:	65 e4       	ldi	r22, 0x45	; 69
    5198:	8f ea       	ldi	r24, 0xAF	; 175
    519a:	4a d9       	rcall	.-3436   	; 0x4430 <PNEWELSE2promWrite>
					int_to_ascii(data_short);
    519c:	8e 2d       	mov	r24, r14
    519e:	11 df       	rcall	.-478    	; 0x4fc2 <int_to_ascii>
					config_waiting_input = 0;
    51a0:	10 92 15 23 	sts	0x2315, r1
					flag = 0;
    51a4:	10 92 af 22 	sts	0x22AF, r1
				}
				break;
    51a8:	03 c0       	rjmp	.+6      	; 0x51b0 <config_read_input+0xea>
				
				default:
					send_usart_char("Critical Error! Please contact manufacturer.");
    51aa:	89 e1       	ldi	r24, 0x19	; 25
    51ac:	93 e0       	ldi	r25, 0x03	; 3
    51ae:	b5 de       	rcall	.-662    	; 0x4f1a <send_usart_char>
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
	flag = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	while(config_waiting_input == 1)
    51b0:	30 91 15 23 	lds	r19, 0x2315
    51b4:	31 30       	cpi	r19, 0x01	; 1
    51b6:	09 f4       	brne	.+2      	; 0x51ba <config_read_input+0xf4>
    51b8:	a0 cf       	rjmp	.-192    	; 0x50fa <config_read_input+0x34>
		else
		{
			
		}
	}
}
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	ff 90       	pop	r15
    51c4:	ef 90       	pop	r14
    51c6:	df 90       	pop	r13
    51c8:	cf 90       	pop	r12
    51ca:	bf 90       	pop	r11
    51cc:	af 90       	pop	r10
    51ce:	9f 90       	pop	r9
    51d0:	08 95       	ret

000051d2 <pneConfiguration>:
	usart_putchar(USART_SERIAL_EXAMPLE, display);
}

void pneConfiguration()
{
	switch(config_state)
    51d2:	80 91 b0 22 	lds	r24, 0x22B0
    51d6:	82 30       	cpi	r24, 0x02	; 2
    51d8:	51 f1       	breq	.+84     	; 0x522e <pneConfiguration+0x5c>
    51da:	28 f4       	brcc	.+10     	; 0x51e6 <pneConfiguration+0x14>
    51dc:	88 23       	and	r24, r24
    51de:	59 f0       	breq	.+22     	; 0x51f6 <pneConfiguration+0x24>
    51e0:	81 30       	cpi	r24, 0x01	; 1
    51e2:	c9 f0       	breq	.+50     	; 0x5216 <pneConfiguration+0x44>
    51e4:	41 c0       	rjmp	.+130    	; 0x5268 <pneConfiguration+0x96>
    51e6:	84 30       	cpi	r24, 0x04	; 4
    51e8:	09 f4       	brne	.+2      	; 0x51ec <pneConfiguration+0x1a>
    51ea:	39 c0       	rjmp	.+114    	; 0x525e <pneConfiguration+0x8c>
    51ec:	60 f1       	brcs	.+88     	; 0x5246 <pneConfiguration+0x74>
    51ee:	85 30       	cpi	r24, 0x05	; 5
    51f0:	09 f4       	brne	.+2      	; 0x51f4 <pneConfiguration+0x22>
    51f2:	3f c0       	rjmp	.+126    	; 0x5272 <pneConfiguration+0xa0>
    51f4:	39 c0       	rjmp	.+114    	; 0x5268 <pneConfiguration+0x96>
	{
		case config_startup_message:
		{
			send_usart_char("\r\n\r\nConfiguration mode. Select an option:\r\n\r\n");
    51f6:	86 e4       	ldi	r24, 0x46	; 70
    51f8:	93 e0       	ldi	r25, 0x03	; 3
    51fa:	8f de       	rcall	.-738    	; 0x4f1a <send_usart_char>
/*			send_usart_char("1. Change Group ID\r\n");*/
			send_usart_char("1. Change Device Address\r\n2. Change Device Channel\r\n3. Change Device PAN ID\r\n");
    51fc:	84 e7       	ldi	r24, 0x74	; 116
    51fe:	93 e0       	ldi	r25, 0x03	; 3
    5200:	8c de       	rcall	.-744    	; 0x4f1a <send_usart_char>
			send_usart_char("0. Exit configuration mode\r\n");
    5202:	89 ee       	ldi	r24, 0xE9	; 233
    5204:	95 e0       	ldi	r25, 0x05	; 5
    5206:	89 de       	rcall	.-750    	; 0x4f1a <send_usart_char>
			configuration_flag = 1;
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	80 93 e9 22 	sts	0x22E9, r24
			config_state = config_idle;
    520e:	85 e0       	ldi	r24, 0x05	; 5
    5210:	80 93 b0 22 	sts	0x22B0, r24
		}
		break;
    5214:	08 95       	ret
// 		}
// 		break;
		
		case config_DeviceADDR:
		{
			send_usart_char("Enter new device address: \r\n");
    5216:	82 ec       	ldi	r24, 0xC2	; 194
    5218:	93 e0       	ldi	r25, 0x03	; 3
    521a:	7f de       	rcall	.-770    	; 0x4f1a <send_usart_char>
			config_read_input(DEVICE_ADDRESS_L, '2', deviceADDR_display);
    521c:	45 e4       	ldi	r20, 0x45	; 69
    521e:	58 e0       	ldi	r21, 0x08	; 8
    5220:	62 e3       	ldi	r22, 0x32	; 50
    5222:	8c ef       	ldi	r24, 0xFC	; 252
    5224:	9f e0       	ldi	r25, 0x0F	; 15
    5226:	4f df       	rcall	.-354    	; 0x50c6 <config_read_input>
			config_state = config_startup_message;
    5228:	10 92 b0 22 	sts	0x22B0, r1
		}
		break;
    522c:	08 95       	ret
		
		case config_DeviceCH:
		{
			send_usart_char("Enter new device channel: \r\n");
    522e:	8f ed       	ldi	r24, 0xDF	; 223
    5230:	93 e0       	ldi	r25, 0x03	; 3
    5232:	73 de       	rcall	.-794    	; 0x4f1a <send_usart_char>
			config_read_input(DEVICE_CHANNEL_L, '2', deviceCH_display);
    5234:	46 e3       	ldi	r20, 0x36	; 54
    5236:	58 e0       	ldi	r21, 0x08	; 8
    5238:	62 e3       	ldi	r22, 0x32	; 50
    523a:	8e ef       	ldi	r24, 0xFE	; 254
    523c:	9f e0       	ldi	r25, 0x0F	; 15
    523e:	43 df       	rcall	.-378    	; 0x50c6 <config_read_input>
			config_state = config_startup_message;
    5240:	10 92 b0 22 	sts	0x22B0, r1
		}
		break;
    5244:	08 95       	ret
		
		case config_DevicePAN:
		{
			send_usart_char("Enter new device PAN ID: \r\n");
    5246:	8c ef       	ldi	r24, 0xFC	; 252
    5248:	93 e0       	ldi	r25, 0x03	; 3
    524a:	67 de       	rcall	.-818    	; 0x4f1a <send_usart_char>
			config_read_input(DEVICE_PAN_L, '2', devicePAN_display);
    524c:	48 e2       	ldi	r20, 0x28	; 40
    524e:	58 e0       	ldi	r21, 0x08	; 8
    5250:	62 e3       	ldi	r22, 0x32	; 50
    5252:	80 e0       	ldi	r24, 0x00	; 0
    5254:	90 e1       	ldi	r25, 0x10	; 16
    5256:	37 df       	rcall	.-402    	; 0x50c6 <config_read_input>
			config_state = config_startup_message;
    5258:	10 92 b0 22 	sts	0x22B0, r1
		}
		break;
    525c:	08 95       	ret
		case config_idle:
		break;
		
		case config_exit:
		{
			configuration_flag = 0;
    525e:	10 92 e9 22 	sts	0x22E9, r1
			send_usart_char("Exiting config mode");
    5262:	88 e1       	ldi	r24, 0x18	; 24
    5264:	94 e0       	ldi	r25, 0x04	; 4
    5266:	59 de       	rcall	.-846    	; 0x4f1a <send_usart_char>
			option_select = option_message;
			config_state = config_startup_message;
		}
		default:
			option_select = option_message;
    5268:	89 e0       	ldi	r24, 0x09	; 9
    526a:	80 93 c5 22 	sts	0x22C5, r24
			config_state = config_startup_message;
    526e:	10 92 b0 22 	sts	0x22B0, r1
    5272:	08 95       	ret

00005274 <resetSelect>:


uint8_t resetSelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    5274:	10 92 af 22 	sts	0x22AF, r1
	
	switch(commamd[0])
    5278:	80 91 f0 22 	lds	r24, 0x22F0
    527c:	82 33       	cpi	r24, 0x32	; 50
    527e:	61 f0       	breq	.+24     	; 0x5298 <resetSelect+0x24>
    5280:	28 f4       	brcc	.+10     	; 0x528c <resetSelect+0x18>
    5282:	80 33       	cpi	r24, 0x30	; 48
    5284:	89 f0       	breq	.+34     	; 0x52a8 <resetSelect+0x34>
    5286:	81 33       	cpi	r24, 0x31	; 49
    5288:	b1 f0       	breq	.+44     	; 0x52b6 <resetSelect+0x42>
    528a:	10 c0       	rjmp	.+32     	; 0x52ac <resetSelect+0x38>
    528c:	84 33       	cpi	r24, 0x34	; 52
    528e:	41 f0       	breq	.+16     	; 0x52a0 <resetSelect+0x2c>
    5290:	28 f0       	brcs	.+10     	; 0x529c <resetSelect+0x28>
    5292:	85 33       	cpi	r24, 0x35	; 53
    5294:	39 f0       	breq	.+14     	; 0x52a4 <resetSelect+0x30>
    5296:	0a c0       	rjmp	.+20     	; 0x52ac <resetSelect+0x38>
		case '1':
		return reset_all;
		break;
		
		case '2':
		return reset_bit0;
    5298:	82 e0       	ldi	r24, 0x02	; 2
    529a:	08 95       	ret
		break;
		
		case '3':
		return reset_bit1;
    529c:	83 e0       	ldi	r24, 0x03	; 3
    529e:	08 95       	ret
		break;
		
		case '4':
		return reset_read_status;
    52a0:	84 e0       	ldi	r24, 0x04	; 4
    52a2:	08 95       	ret
		break;

		case '5':
		return reset_set_flag;
    52a4:	85 e0       	ldi	r24, 0x05	; 5
    52a6:	08 95       	ret
		break;
		
		case '0':
		return reset_exit;
    52a8:	87 e0       	ldi	r24, 0x07	; 7
    52aa:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    52ac:	8a ef       	ldi	r24, 0xFA	; 250
    52ae:	92 e0       	ldi	r25, 0x02	; 2
    52b0:	34 de       	rcall	.-920    	; 0x4f1a <send_usart_char>
			return reset_idle;
    52b2:	86 e0       	ldi	r24, 0x06	; 6
    52b4:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
		return reset_all;
    52b6:	81 e0       	ldi	r24, 0x01	; 1
			return reset_idle;
		}
		break;
				
	}
}
    52b8:	08 95       	ret

000052ba <testMode>:

void testMode()
{
    52ba:	df 92       	push	r13
    52bc:	ef 92       	push	r14
    52be:	ff 92       	push	r15
    52c0:	0f 93       	push	r16
    52c2:	1f 93       	push	r17
    52c4:	cf 93       	push	r28
    52c6:	df 93       	push	r29
	uint8_t button_status_factory6;
	uint8_t button_status_factory7;
	uint8_t button_status_factory8;
	uint8_t button_status_factory9;
	
	switch(button)
    52c8:	80 91 b1 22 	lds	r24, 0x22B1
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	8a 30       	cpi	r24, 0x0A	; 10
    52d0:	91 05       	cpc	r25, r1
    52d2:	08 f0       	brcs	.+2      	; 0x52d6 <testMode+0x1c>
    52d4:	ef c5       	rjmp	.+3038   	; 0x5eb4 <testMode+0xbfa>
    52d6:	fc 01       	movw	r30, r24
    52d8:	88 27       	eor	r24, r24
    52da:	e4 59       	subi	r30, 0x94	; 148
    52dc:	fe 4f       	sbci	r31, 0xFE	; 254
    52de:	8f 4f       	sbci	r24, 0xFF	; 255
    52e0:	0c 94 7c 4d 	jmp	0x9af8	; 0x9af8 <__tablejump2__>
	{
		case button1:
		{
			gpio_clr(STATUS_LED_1);
    52e4:	60 91 b7 22 	lds	r22, 0x22B7
    52e8:	70 91 b8 22 	lds	r23, 0x22B8
    52ec:	80 91 b9 22 	lds	r24, 0x22B9
    52f0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
			gpio_clr(STATUS_LED_2);
    52f4:	60 91 d9 22 	lds	r22, 0x22D9
    52f8:	70 91 da 22 	lds	r23, 0x22DA
    52fc:	80 91 db 22 	lds	r24, 0x22DB
    5300:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
			gpio_clr(CHARGING_DISABLE);
    5304:	60 91 eb 22 	lds	r22, 0x22EB
    5308:	70 91 ec 22 	lds	r23, 0x22EC
    530c:	80 91 ed 22 	lds	r24, 0x22ED
    5310:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
			gpio_clr(EMER_LIGHT_EN);
    5314:	60 91 bb 22 	lds	r22, 0x22BB
    5318:	70 91 bc 22 	lds	r23, 0x22BC
    531c:	80 91 bd 22 	lds	r24, 0x22BD
    5320:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
			gpio_clr(OUT_LED_CH0);
    5324:	60 91 98 22 	lds	r22, 0x2298
    5328:	70 91 99 22 	lds	r23, 0x2299
    532c:	80 91 9a 22 	lds	r24, 0x229A
    5330:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
			gpio_clr(OUT_LED_CH1);
    5334:	60 91 6c 23 	lds	r22, 0x236C
    5338:	70 91 6d 23 	lds	r23, 0x236D
    533c:	80 91 6e 23 	lds	r24, 0x236E
    5340:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
			gpio_clr(OUT_LED_CH2);
    5344:	60 91 72 23 	lds	r22, 0x2372
    5348:	70 91 73 23 	lds	r23, 0x2373
    534c:	80 91 74 23 	lds	r24, 0x2374
    5350:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
			
			send_usart_char("\r\nIO Switch ");
    5354:	8c e2       	ldi	r24, 0x2C	; 44
    5356:	94 e0       	ldi	r25, 0x04	; 4
    5358:	e0 dd       	rcall	.-1088   	; 0x4f1a <send_usart_char>
			send_usart_char("1");
    535a:	8d e5       	ldi	r24, 0x5D	; 93
    535c:	97 e0       	ldi	r25, 0x07	; 7
    535e:	dd dd       	rcall	.-1094   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
    5360:	60 91 66 23 	lds	r22, 0x2366
    5364:	70 91 67 23 	lds	r23, 0x2367
    5368:	80 91 68 23 	lds	r24, 0x2368
    536c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    5370:	88 23       	and	r24, r24
    5372:	51 f0       	breq	.+20     	; 0x5388 <testMode+0xce>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
    5374:	60 91 66 23 	lds	r22, 0x2366
    5378:	70 91 67 23 	lds	r23, 0x2367
    537c:	80 91 68 23 	lds	r24, 0x2368
    5380:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("1");
			
			button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			
			while(button_status_factory != 1)
    5384:	81 11       	cpse	r24, r1
    5386:	f6 cf       	rjmp	.-20     	; 0x5374 <testMode+0xba>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5388:	60 91 61 23 	lds	r22, 0x2361
    538c:	70 91 62 23 	lds	r23, 0x2362
    5390:	80 91 63 23 	lds	r24, 0x2363
    5394:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5398:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    539a:	60 91 b4 22 	lds	r22, 0x22B4
    539e:	70 91 b5 22 	lds	r23, 0x22B5
    53a2:	80 91 b6 22 	lds	r24, 0x22B6
    53a6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    53aa:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    53ac:	60 91 12 23 	lds	r22, 0x2312
    53b0:	70 91 13 23 	lds	r23, 0x2313
    53b4:	80 91 14 23 	lds	r24, 0x2314
    53b8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    53bc:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    53be:	60 91 6a 22 	lds	r22, 0x226A
    53c2:	70 91 6b 22 	lds	r23, 0x226B
    53c6:	80 91 6c 22 	lds	r24, 0x226C
    53ca:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    53ce:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    53d0:	60 91 c1 22 	lds	r22, 0x22C1
    53d4:	70 91 c2 22 	lds	r23, 0x22C2
    53d8:	80 91 c3 22 	lds	r24, 0x22C3
    53dc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    53e0:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    53e2:	60 91 a8 22 	lds	r22, 0x22A8
    53e6:	70 91 a9 22 	lds	r23, 0x22A9
    53ea:	80 91 aa 22 	lds	r24, 0x22AA
    53ee:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    53f2:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    53f4:	60 91 51 23 	lds	r22, 0x2351
    53f8:	70 91 52 23 	lds	r23, 0x2352
    53fc:	80 91 53 23 	lds	r24, 0x2353
    5400:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5404:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5406:	60 91 0f 23 	lds	r22, 0x230F
    540a:	70 91 10 23 	lds	r23, 0x2310
    540e:	80 91 11 23 	lds	r24, 0x2311
    5412:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5416:	21 e0       	ldi	r18, 0x01	; 1
    5418:	d1 10       	cpse	r13, r1
    541a:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    541c:	91 e0       	ldi	r25, 0x01	; 1
    541e:	e1 10       	cpse	r14, r1
    5420:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5422:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5424:	91 e0       	ldi	r25, 0x01	; 1
    5426:	f1 10       	cpse	r15, r1
    5428:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    542a:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    542c:	21 e0       	ldi	r18, 0x01	; 1
    542e:	01 11       	cpse	r16, r1
    5430:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5432:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5434:	91 e0       	ldi	r25, 0x01	; 1
    5436:	11 11       	cpse	r17, r1
    5438:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    543a:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    543c:	21 e0       	ldi	r18, 0x01	; 1
    543e:	d1 11       	cpse	r29, r1
    5440:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5442:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5444:	91 e0       	ldi	r25, 0x01	; 1
    5446:	c1 11       	cpse	r28, r1
    5448:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    544a:	92 2b       	or	r25, r18
    544c:	29 f4       	brne	.+10     	; 0x5458 <testMode+0x19e>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    544e:	91 e0       	ldi	r25, 0x01	; 1
    5450:	81 11       	cpse	r24, r1
    5452:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5454:	99 23       	and	r25, r25
    5456:	49 f0       	breq	.+18     	; 0x546a <testMode+0x1b0>
			{
				send_usart_char(" ------FAIL");
    5458:	89 e3       	ldi	r24, 0x39	; 57
    545a:	94 e0       	ldi	r25, 0x04	; 4
    545c:	5e dd       	rcall	.-1348   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    545e:	85 e4       	ldi	r24, 0x45	; 69
    5460:	94 e0       	ldi	r25, 0x04	; 4
    5462:	5b dd       	rcall	.-1354   	; 0x4f1a <send_usart_char>
				button = button1;
    5464:	10 92 b1 22 	sts	0x22B1, r1
    5468:	25 c5       	rjmp	.+2634   	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(STATUS_LED_1);
    546a:	60 91 b7 22 	lds	r22, 0x22B7
    546e:	70 91 b8 22 	lds	r23, 0x22B8
    5472:	80 91 b9 22 	lds	r24, 0x22B9
    5476:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				send_usart_char(" ------PASS");
    547a:	82 e6       	ldi	r24, 0x62	; 98
    547c:	94 e0       	ldi	r25, 0x04	; 4
    547e:	4d dd       	rcall	.-1382   	; 0x4f1a <send_usart_char>
				button = button2;
    5480:	81 e0       	ldi	r24, 0x01	; 1
    5482:	80 93 b1 22 	sts	0x22B1, r24
    5486:	16 c5       	rjmp	.+2604   	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button2:
		{
			send_usart_char("\r\nIO Switch ");
    5488:	8c e2       	ldi	r24, 0x2C	; 44
    548a:	94 e0       	ldi	r25, 0x04	; 4
    548c:	46 dd       	rcall	.-1396   	; 0x4f1a <send_usart_char>
			send_usart_char("2");
    548e:	8e e6       	ldi	r24, 0x6E	; 110
    5490:	94 e0       	ldi	r25, 0x04	; 4
    5492:	43 dd       	rcall	.-1402   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5494:	60 91 61 23 	lds	r22, 0x2361
    5498:	70 91 62 23 	lds	r23, 0x2362
    549c:	80 91 63 23 	lds	r24, 0x2363
    54a0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    54a4:	88 23       	and	r24, r24
    54a6:	51 f0       	breq	.+20     	; 0x54bc <testMode+0x202>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    54a8:	60 91 61 23 	lds	r22, 0x2361
    54ac:	70 91 62 23 	lds	r23, 0x2362
    54b0:	80 91 63 23 	lds	r24, 0x2363
    54b4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("2");
			
			button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			
			while(button_status_factory != 1)
    54b8:	81 11       	cpse	r24, r1
    54ba:	f6 cf       	rjmp	.-20     	; 0x54a8 <testMode+0x1ee>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    54bc:	60 91 66 23 	lds	r22, 0x2366
    54c0:	70 91 67 23 	lds	r23, 0x2367
    54c4:	80 91 68 23 	lds	r24, 0x2368
    54c8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    54cc:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    54ce:	60 91 b4 22 	lds	r22, 0x22B4
    54d2:	70 91 b5 22 	lds	r23, 0x22B5
    54d6:	80 91 b6 22 	lds	r24, 0x22B6
    54da:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    54de:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    54e0:	60 91 12 23 	lds	r22, 0x2312
    54e4:	70 91 13 23 	lds	r23, 0x2313
    54e8:	80 91 14 23 	lds	r24, 0x2314
    54ec:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    54f0:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    54f2:	60 91 6a 22 	lds	r22, 0x226A
    54f6:	70 91 6b 22 	lds	r23, 0x226B
    54fa:	80 91 6c 22 	lds	r24, 0x226C
    54fe:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5502:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5504:	60 91 c1 22 	lds	r22, 0x22C1
    5508:	70 91 c2 22 	lds	r23, 0x22C2
    550c:	80 91 c3 22 	lds	r24, 0x22C3
    5510:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5514:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5516:	60 91 a8 22 	lds	r22, 0x22A8
    551a:	70 91 a9 22 	lds	r23, 0x22A9
    551e:	80 91 aa 22 	lds	r24, 0x22AA
    5522:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5526:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5528:	60 91 51 23 	lds	r22, 0x2351
    552c:	70 91 52 23 	lds	r23, 0x2352
    5530:	80 91 53 23 	lds	r24, 0x2353
    5534:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5538:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    553a:	60 91 0f 23 	lds	r22, 0x230F
    553e:	70 91 10 23 	lds	r23, 0x2310
    5542:	80 91 11 23 	lds	r24, 0x2311
    5546:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    554a:	21 e0       	ldi	r18, 0x01	; 1
    554c:	d1 10       	cpse	r13, r1
    554e:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5550:	91 e0       	ldi	r25, 0x01	; 1
    5552:	e1 10       	cpse	r14, r1
    5554:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5556:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5558:	91 e0       	ldi	r25, 0x01	; 1
    555a:	f1 10       	cpse	r15, r1
    555c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    555e:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5560:	21 e0       	ldi	r18, 0x01	; 1
    5562:	01 11       	cpse	r16, r1
    5564:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5566:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5568:	91 e0       	ldi	r25, 0x01	; 1
    556a:	11 11       	cpse	r17, r1
    556c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    556e:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5570:	21 e0       	ldi	r18, 0x01	; 1
    5572:	d1 11       	cpse	r29, r1
    5574:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5576:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5578:	91 e0       	ldi	r25, 0x01	; 1
    557a:	c1 11       	cpse	r28, r1
    557c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    557e:	92 2b       	or	r25, r18
    5580:	29 f4       	brne	.+10     	; 0x558c <testMode+0x2d2>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5582:	91 e0       	ldi	r25, 0x01	; 1
    5584:	81 11       	cpse	r24, r1
    5586:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5588:	99 23       	and	r25, r25
    558a:	49 f0       	breq	.+18     	; 0x559e <testMode+0x2e4>
			{
				send_usart_char(" ------FAIL");
    558c:	89 e3       	ldi	r24, 0x39	; 57
    558e:	94 e0       	ldi	r25, 0x04	; 4
    5590:	c4 dc       	rcall	.-1656   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5592:	85 e4       	ldi	r24, 0x45	; 69
    5594:	94 e0       	ldi	r25, 0x04	; 4
    5596:	c1 dc       	rcall	.-1662   	; 0x4f1a <send_usart_char>
				button = button1;
    5598:	10 92 b1 22 	sts	0x22B1, r1
    559c:	8b c4       	rjmp	.+2326   	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(STATUS_LED_2);
    559e:	60 91 d9 22 	lds	r22, 0x22D9
    55a2:	70 91 da 22 	lds	r23, 0x22DA
    55a6:	80 91 db 22 	lds	r24, 0x22DB
    55aa:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				send_usart_char(" ------PASS");
    55ae:	82 e6       	ldi	r24, 0x62	; 98
    55b0:	94 e0       	ldi	r25, 0x04	; 4
    55b2:	b3 dc       	rcall	.-1690   	; 0x4f1a <send_usart_char>
				button = button3;
    55b4:	82 e0       	ldi	r24, 0x02	; 2
    55b6:	80 93 b1 22 	sts	0x22B1, r24
    55ba:	7c c4       	rjmp	.+2296   	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button3:
		{
			send_usart_char("\r\nIO Switch ");
    55bc:	8c e2       	ldi	r24, 0x2C	; 44
    55be:	94 e0       	ldi	r25, 0x04	; 4
    55c0:	ac dc       	rcall	.-1704   	; 0x4f1a <send_usart_char>
			send_usart_char("3");
    55c2:	8d e2       	ldi	r24, 0x2D	; 45
    55c4:	92 e0       	ldi	r25, 0x02	; 2
    55c6:	a9 dc       	rcall	.-1710   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    55c8:	60 91 b4 22 	lds	r22, 0x22B4
    55cc:	70 91 b5 22 	lds	r23, 0x22B5
    55d0:	80 91 b6 22 	lds	r24, 0x22B6
    55d4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    55d8:	88 23       	and	r24, r24
    55da:	51 f0       	breq	.+20     	; 0x55f0 <testMode+0x336>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    55dc:	60 91 b4 22 	lds	r22, 0x22B4
    55e0:	70 91 b5 22 	lds	r23, 0x22B5
    55e4:	80 91 b6 22 	lds	r24, 0x22B6
    55e8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("3");
			
			button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			
			while(button_status_factory != 1)
    55ec:	81 11       	cpse	r24, r1
    55ee:	f6 cf       	rjmp	.-20     	; 0x55dc <testMode+0x322>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    55f0:	60 91 66 23 	lds	r22, 0x2366
    55f4:	70 91 67 23 	lds	r23, 0x2367
    55f8:	80 91 68 23 	lds	r24, 0x2368
    55fc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5600:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5602:	60 91 61 23 	lds	r22, 0x2361
    5606:	70 91 62 23 	lds	r23, 0x2362
    560a:	80 91 63 23 	lds	r24, 0x2363
    560e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5612:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5614:	60 91 12 23 	lds	r22, 0x2312
    5618:	70 91 13 23 	lds	r23, 0x2313
    561c:	80 91 14 23 	lds	r24, 0x2314
    5620:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5624:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5626:	60 91 6a 22 	lds	r22, 0x226A
    562a:	70 91 6b 22 	lds	r23, 0x226B
    562e:	80 91 6c 22 	lds	r24, 0x226C
    5632:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5636:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5638:	60 91 c1 22 	lds	r22, 0x22C1
    563c:	70 91 c2 22 	lds	r23, 0x22C2
    5640:	80 91 c3 22 	lds	r24, 0x22C3
    5644:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5648:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    564a:	60 91 a8 22 	lds	r22, 0x22A8
    564e:	70 91 a9 22 	lds	r23, 0x22A9
    5652:	80 91 aa 22 	lds	r24, 0x22AA
    5656:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    565a:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    565c:	60 91 51 23 	lds	r22, 0x2351
    5660:	70 91 52 23 	lds	r23, 0x2352
    5664:	80 91 53 23 	lds	r24, 0x2353
    5668:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    566c:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    566e:	60 91 0f 23 	lds	r22, 0x230F
    5672:	70 91 10 23 	lds	r23, 0x2310
    5676:	80 91 11 23 	lds	r24, 0x2311
    567a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    567e:	21 e0       	ldi	r18, 0x01	; 1
    5680:	d1 10       	cpse	r13, r1
    5682:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5684:	91 e0       	ldi	r25, 0x01	; 1
    5686:	e1 10       	cpse	r14, r1
    5688:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    568a:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    568c:	91 e0       	ldi	r25, 0x01	; 1
    568e:	f1 10       	cpse	r15, r1
    5690:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5692:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5694:	21 e0       	ldi	r18, 0x01	; 1
    5696:	01 11       	cpse	r16, r1
    5698:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    569a:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    569c:	91 e0       	ldi	r25, 0x01	; 1
    569e:	11 11       	cpse	r17, r1
    56a0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56a2:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    56a4:	21 e0       	ldi	r18, 0x01	; 1
    56a6:	d1 11       	cpse	r29, r1
    56a8:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56aa:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    56ac:	91 e0       	ldi	r25, 0x01	; 1
    56ae:	c1 11       	cpse	r28, r1
    56b0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56b2:	92 2b       	or	r25, r18
    56b4:	29 f4       	brne	.+10     	; 0x56c0 <testMode+0x406>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    56b6:	91 e0       	ldi	r25, 0x01	; 1
    56b8:	81 11       	cpse	r24, r1
    56ba:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56bc:	99 23       	and	r25, r25
    56be:	49 f0       	breq	.+18     	; 0x56d2 <testMode+0x418>
			{
				send_usart_char(" ------FAIL");
    56c0:	89 e3       	ldi	r24, 0x39	; 57
    56c2:	94 e0       	ldi	r25, 0x04	; 4
    56c4:	2a dc       	rcall	.-1964   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    56c6:	85 e4       	ldi	r24, 0x45	; 69
    56c8:	94 e0       	ldi	r25, 0x04	; 4
    56ca:	27 dc       	rcall	.-1970   	; 0x4f1a <send_usart_char>
				button = button1;
    56cc:	10 92 b1 22 	sts	0x22B1, r1
    56d0:	f1 c3       	rjmp	.+2018   	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(CHARGING_DISABLE);
    56d2:	60 91 eb 22 	lds	r22, 0x22EB
    56d6:	70 91 ec 22 	lds	r23, 0x22EC
    56da:	80 91 ed 22 	lds	r24, 0x22ED
    56de:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				send_usart_char(" ------PASS");
    56e2:	82 e6       	ldi	r24, 0x62	; 98
    56e4:	94 e0       	ldi	r25, 0x04	; 4
    56e6:	19 dc       	rcall	.-1998   	; 0x4f1a <send_usart_char>
				button = button4;
    56e8:	83 e0       	ldi	r24, 0x03	; 3
    56ea:	80 93 b1 22 	sts	0x22B1, r24
    56ee:	e2 c3       	rjmp	.+1988   	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button4:
		{
			send_usart_char("\r\nIO Switch ");
    56f0:	8c e2       	ldi	r24, 0x2C	; 44
    56f2:	94 e0       	ldi	r25, 0x04	; 4
    56f4:	12 dc       	rcall	.-2012   	; 0x4f1a <send_usart_char>
			send_usart_char("4");
    56f6:	80 e7       	ldi	r24, 0x70	; 112
    56f8:	94 e0       	ldi	r25, 0x04	; 4
    56fa:	0f dc       	rcall	.-2018   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    56fc:	60 91 12 23 	lds	r22, 0x2312
    5700:	70 91 13 23 	lds	r23, 0x2313
    5704:	80 91 14 23 	lds	r24, 0x2314
    5708:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    570c:	88 23       	and	r24, r24
    570e:	51 f0       	breq	.+20     	; 0x5724 <testMode+0x46a>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5710:	60 91 12 23 	lds	r22, 0x2312
    5714:	70 91 13 23 	lds	r23, 0x2313
    5718:	80 91 14 23 	lds	r24, 0x2314
    571c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("4");
			
			button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			
			while(button_status_factory != 1)
    5720:	81 11       	cpse	r24, r1
    5722:	f6 cf       	rjmp	.-20     	; 0x5710 <testMode+0x456>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5724:	60 91 66 23 	lds	r22, 0x2366
    5728:	70 91 67 23 	lds	r23, 0x2367
    572c:	80 91 68 23 	lds	r24, 0x2368
    5730:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5734:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5736:	60 91 61 23 	lds	r22, 0x2361
    573a:	70 91 62 23 	lds	r23, 0x2362
    573e:	80 91 63 23 	lds	r24, 0x2363
    5742:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5746:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5748:	60 91 b4 22 	lds	r22, 0x22B4
    574c:	70 91 b5 22 	lds	r23, 0x22B5
    5750:	80 91 b6 22 	lds	r24, 0x22B6
    5754:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5758:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    575a:	60 91 6a 22 	lds	r22, 0x226A
    575e:	70 91 6b 22 	lds	r23, 0x226B
    5762:	80 91 6c 22 	lds	r24, 0x226C
    5766:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    576a:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    576c:	60 91 c1 22 	lds	r22, 0x22C1
    5770:	70 91 c2 22 	lds	r23, 0x22C2
    5774:	80 91 c3 22 	lds	r24, 0x22C3
    5778:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    577c:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    577e:	60 91 a8 22 	lds	r22, 0x22A8
    5782:	70 91 a9 22 	lds	r23, 0x22A9
    5786:	80 91 aa 22 	lds	r24, 0x22AA
    578a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    578e:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5790:	60 91 51 23 	lds	r22, 0x2351
    5794:	70 91 52 23 	lds	r23, 0x2352
    5798:	80 91 53 23 	lds	r24, 0x2353
    579c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    57a0:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    57a2:	60 91 0f 23 	lds	r22, 0x230F
    57a6:	70 91 10 23 	lds	r23, 0x2310
    57aa:	80 91 11 23 	lds	r24, 0x2311
    57ae:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    57b2:	21 e0       	ldi	r18, 0x01	; 1
    57b4:	d1 10       	cpse	r13, r1
    57b6:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    57b8:	91 e0       	ldi	r25, 0x01	; 1
    57ba:	e1 10       	cpse	r14, r1
    57bc:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57be:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    57c0:	91 e0       	ldi	r25, 0x01	; 1
    57c2:	f1 10       	cpse	r15, r1
    57c4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57c6:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    57c8:	21 e0       	ldi	r18, 0x01	; 1
    57ca:	01 11       	cpse	r16, r1
    57cc:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57ce:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    57d0:	91 e0       	ldi	r25, 0x01	; 1
    57d2:	11 11       	cpse	r17, r1
    57d4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57d6:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    57d8:	21 e0       	ldi	r18, 0x01	; 1
    57da:	d1 11       	cpse	r29, r1
    57dc:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57de:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    57e0:	91 e0       	ldi	r25, 0x01	; 1
    57e2:	c1 11       	cpse	r28, r1
    57e4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57e6:	92 2b       	or	r25, r18
    57e8:	29 f4       	brne	.+10     	; 0x57f4 <testMode+0x53a>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    57ea:	91 e0       	ldi	r25, 0x01	; 1
    57ec:	81 11       	cpse	r24, r1
    57ee:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57f0:	99 23       	and	r25, r25
    57f2:	49 f0       	breq	.+18     	; 0x5806 <testMode+0x54c>
			{
				send_usart_char(" ------FAIL");
    57f4:	89 e3       	ldi	r24, 0x39	; 57
    57f6:	94 e0       	ldi	r25, 0x04	; 4
    57f8:	90 db       	rcall	.-2272   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    57fa:	85 e4       	ldi	r24, 0x45	; 69
    57fc:	94 e0       	ldi	r25, 0x04	; 4
    57fe:	8d db       	rcall	.-2278   	; 0x4f1a <send_usart_char>
				button = button1;
    5800:	10 92 b1 22 	sts	0x22B1, r1
    5804:	57 c3       	rjmp	.+1710   	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(EMER_LIGHT_EN);
    5806:	60 91 bb 22 	lds	r22, 0x22BB
    580a:	70 91 bc 22 	lds	r23, 0x22BC
    580e:	80 91 bd 22 	lds	r24, 0x22BD
    5812:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				send_usart_char(" ------PASS");
    5816:	82 e6       	ldi	r24, 0x62	; 98
    5818:	94 e0       	ldi	r25, 0x04	; 4
    581a:	7f db       	rcall	.-2306   	; 0x4f1a <send_usart_char>
				button = button5;
    581c:	84 e0       	ldi	r24, 0x04	; 4
    581e:	80 93 b1 22 	sts	0x22B1, r24
    5822:	48 c3       	rjmp	.+1680   	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button5:
		{
			send_usart_char("\r\nIO Switch ");
    5824:	8c e2       	ldi	r24, 0x2C	; 44
    5826:	94 e0       	ldi	r25, 0x04	; 4
    5828:	78 db       	rcall	.-2320   	; 0x4f1a <send_usart_char>
			send_usart_char("5");
    582a:	82 e7       	ldi	r24, 0x72	; 114
    582c:	94 e0       	ldi	r25, 0x04	; 4
    582e:	75 db       	rcall	.-2326   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5830:	60 91 6a 22 	lds	r22, 0x226A
    5834:	70 91 6b 22 	lds	r23, 0x226B
    5838:	80 91 6c 22 	lds	r24, 0x226C
    583c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    5840:	88 23       	and	r24, r24
    5842:	51 f0       	breq	.+20     	; 0x5858 <testMode+0x59e>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5844:	60 91 6a 22 	lds	r22, 0x226A
    5848:	70 91 6b 22 	lds	r23, 0x226B
    584c:	80 91 6c 22 	lds	r24, 0x226C
    5850:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("5");
			
			button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			
			while(button_status_factory != 1)
    5854:	81 11       	cpse	r24, r1
    5856:	f6 cf       	rjmp	.-20     	; 0x5844 <testMode+0x58a>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5858:	60 91 66 23 	lds	r22, 0x2366
    585c:	70 91 67 23 	lds	r23, 0x2367
    5860:	80 91 68 23 	lds	r24, 0x2368
    5864:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5868:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    586a:	60 91 61 23 	lds	r22, 0x2361
    586e:	70 91 62 23 	lds	r23, 0x2362
    5872:	80 91 63 23 	lds	r24, 0x2363
    5876:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    587a:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    587c:	60 91 b4 22 	lds	r22, 0x22B4
    5880:	70 91 b5 22 	lds	r23, 0x22B5
    5884:	80 91 b6 22 	lds	r24, 0x22B6
    5888:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    588c:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    588e:	60 91 12 23 	lds	r22, 0x2312
    5892:	70 91 13 23 	lds	r23, 0x2313
    5896:	80 91 14 23 	lds	r24, 0x2314
    589a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    589e:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    58a0:	60 91 c1 22 	lds	r22, 0x22C1
    58a4:	70 91 c2 22 	lds	r23, 0x22C2
    58a8:	80 91 c3 22 	lds	r24, 0x22C3
    58ac:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    58b0:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    58b2:	60 91 a8 22 	lds	r22, 0x22A8
    58b6:	70 91 a9 22 	lds	r23, 0x22A9
    58ba:	80 91 aa 22 	lds	r24, 0x22AA
    58be:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    58c2:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    58c4:	60 91 51 23 	lds	r22, 0x2351
    58c8:	70 91 52 23 	lds	r23, 0x2352
    58cc:	80 91 53 23 	lds	r24, 0x2353
    58d0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    58d4:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    58d6:	60 91 0f 23 	lds	r22, 0x230F
    58da:	70 91 10 23 	lds	r23, 0x2310
    58de:	80 91 11 23 	lds	r24, 0x2311
    58e2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    58e6:	21 e0       	ldi	r18, 0x01	; 1
    58e8:	d1 10       	cpse	r13, r1
    58ea:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    58ec:	91 e0       	ldi	r25, 0x01	; 1
    58ee:	e1 10       	cpse	r14, r1
    58f0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    58f2:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    58f4:	91 e0       	ldi	r25, 0x01	; 1
    58f6:	f1 10       	cpse	r15, r1
    58f8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    58fa:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    58fc:	21 e0       	ldi	r18, 0x01	; 1
    58fe:	01 11       	cpse	r16, r1
    5900:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5902:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5904:	91 e0       	ldi	r25, 0x01	; 1
    5906:	11 11       	cpse	r17, r1
    5908:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    590a:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    590c:	21 e0       	ldi	r18, 0x01	; 1
    590e:	d1 11       	cpse	r29, r1
    5910:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5912:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5914:	91 e0       	ldi	r25, 0x01	; 1
    5916:	c1 11       	cpse	r28, r1
    5918:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    591a:	92 2b       	or	r25, r18
    591c:	29 f4       	brne	.+10     	; 0x5928 <testMode+0x66e>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    591e:	91 e0       	ldi	r25, 0x01	; 1
    5920:	81 11       	cpse	r24, r1
    5922:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5924:	99 23       	and	r25, r25
    5926:	49 f0       	breq	.+18     	; 0x593a <testMode+0x680>
			{
				send_usart_char(" ------FAIL");
    5928:	89 e3       	ldi	r24, 0x39	; 57
    592a:	94 e0       	ldi	r25, 0x04	; 4
    592c:	f6 da       	rcall	.-2580   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    592e:	85 e4       	ldi	r24, 0x45	; 69
    5930:	94 e0       	ldi	r25, 0x04	; 4
    5932:	f3 da       	rcall	.-2586   	; 0x4f1a <send_usart_char>
				button = button1;
    5934:	10 92 b1 22 	sts	0x22B1, r1
    5938:	bd c2       	rjmp	.+1402   	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH0);
    593a:	60 91 98 22 	lds	r22, 0x2298
    593e:	70 91 99 22 	lds	r23, 0x2299
    5942:	80 91 9a 22 	lds	r24, 0x229A
    5946:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				send_usart_char(" ------PASS");
    594a:	82 e6       	ldi	r24, 0x62	; 98
    594c:	94 e0       	ldi	r25, 0x04	; 4
    594e:	e5 da       	rcall	.-2614   	; 0x4f1a <send_usart_char>
				button = button6;
    5950:	85 e0       	ldi	r24, 0x05	; 5
    5952:	80 93 b1 22 	sts	0x22B1, r24
    5956:	ae c2       	rjmp	.+1372   	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button6:
		{
			send_usart_char("\r\nIO Switch ");
    5958:	8c e2       	ldi	r24, 0x2C	; 44
    595a:	94 e0       	ldi	r25, 0x04	; 4
    595c:	de da       	rcall	.-2628   	; 0x4f1a <send_usart_char>
			send_usart_char("6");
    595e:	84 e7       	ldi	r24, 0x74	; 116
    5960:	94 e0       	ldi	r25, 0x04	; 4
    5962:	db da       	rcall	.-2634   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5964:	60 91 c1 22 	lds	r22, 0x22C1
    5968:	70 91 c2 22 	lds	r23, 0x22C2
    596c:	80 91 c3 22 	lds	r24, 0x22C3
    5970:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    5974:	88 23       	and	r24, r24
    5976:	51 f0       	breq	.+20     	; 0x598c <testMode+0x6d2>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5978:	60 91 c1 22 	lds	r22, 0x22C1
    597c:	70 91 c2 22 	lds	r23, 0x22C2
    5980:	80 91 c3 22 	lds	r24, 0x22C3
    5984:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("6");
			
			button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			
			while(button_status_factory != 1)
    5988:	81 11       	cpse	r24, r1
    598a:	f6 cf       	rjmp	.-20     	; 0x5978 <testMode+0x6be>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    598c:	60 91 66 23 	lds	r22, 0x2366
    5990:	70 91 67 23 	lds	r23, 0x2367
    5994:	80 91 68 23 	lds	r24, 0x2368
    5998:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    599c:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    599e:	60 91 61 23 	lds	r22, 0x2361
    59a2:	70 91 62 23 	lds	r23, 0x2362
    59a6:	80 91 63 23 	lds	r24, 0x2363
    59aa:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    59ae:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    59b0:	60 91 b4 22 	lds	r22, 0x22B4
    59b4:	70 91 b5 22 	lds	r23, 0x22B5
    59b8:	80 91 b6 22 	lds	r24, 0x22B6
    59bc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    59c0:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    59c2:	60 91 12 23 	lds	r22, 0x2312
    59c6:	70 91 13 23 	lds	r23, 0x2313
    59ca:	80 91 14 23 	lds	r24, 0x2314
    59ce:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    59d2:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    59d4:	60 91 6a 22 	lds	r22, 0x226A
    59d8:	70 91 6b 22 	lds	r23, 0x226B
    59dc:	80 91 6c 22 	lds	r24, 0x226C
    59e0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    59e4:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    59e6:	60 91 a8 22 	lds	r22, 0x22A8
    59ea:	70 91 a9 22 	lds	r23, 0x22A9
    59ee:	80 91 aa 22 	lds	r24, 0x22AA
    59f2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    59f6:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    59f8:	60 91 51 23 	lds	r22, 0x2351
    59fc:	70 91 52 23 	lds	r23, 0x2352
    5a00:	80 91 53 23 	lds	r24, 0x2353
    5a04:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5a08:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5a0a:	60 91 0f 23 	lds	r22, 0x230F
    5a0e:	70 91 10 23 	lds	r23, 0x2310
    5a12:	80 91 11 23 	lds	r24, 0x2311
    5a16:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5a1a:	21 e0       	ldi	r18, 0x01	; 1
    5a1c:	d1 10       	cpse	r13, r1
    5a1e:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5a20:	91 e0       	ldi	r25, 0x01	; 1
    5a22:	e1 10       	cpse	r14, r1
    5a24:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a26:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5a28:	91 e0       	ldi	r25, 0x01	; 1
    5a2a:	f1 10       	cpse	r15, r1
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a2e:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5a30:	21 e0       	ldi	r18, 0x01	; 1
    5a32:	01 11       	cpse	r16, r1
    5a34:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a36:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5a38:	91 e0       	ldi	r25, 0x01	; 1
    5a3a:	11 11       	cpse	r17, r1
    5a3c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a3e:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5a40:	21 e0       	ldi	r18, 0x01	; 1
    5a42:	d1 11       	cpse	r29, r1
    5a44:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a46:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5a48:	91 e0       	ldi	r25, 0x01	; 1
    5a4a:	c1 11       	cpse	r28, r1
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a4e:	92 2b       	or	r25, r18
    5a50:	29 f4       	brne	.+10     	; 0x5a5c <testMode+0x7a2>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5a52:	91 e0       	ldi	r25, 0x01	; 1
    5a54:	81 11       	cpse	r24, r1
    5a56:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a58:	99 23       	and	r25, r25
    5a5a:	49 f0       	breq	.+18     	; 0x5a6e <testMode+0x7b4>
			{
				send_usart_char(" ------FAIL");
    5a5c:	89 e3       	ldi	r24, 0x39	; 57
    5a5e:	94 e0       	ldi	r25, 0x04	; 4
    5a60:	5c da       	rcall	.-2888   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5a62:	85 e4       	ldi	r24, 0x45	; 69
    5a64:	94 e0       	ldi	r25, 0x04	; 4
    5a66:	59 da       	rcall	.-2894   	; 0x4f1a <send_usart_char>
				button = button1;
    5a68:	10 92 b1 22 	sts	0x22B1, r1
    5a6c:	23 c2       	rjmp	.+1094   	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH1);
    5a6e:	60 91 6c 23 	lds	r22, 0x236C
    5a72:	70 91 6d 23 	lds	r23, 0x236D
    5a76:	80 91 6e 23 	lds	r24, 0x236E
    5a7a:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				send_usart_char(" ------PASS");
    5a7e:	82 e6       	ldi	r24, 0x62	; 98
    5a80:	94 e0       	ldi	r25, 0x04	; 4
    5a82:	4b da       	rcall	.-2922   	; 0x4f1a <send_usart_char>
				button = button7;
    5a84:	86 e0       	ldi	r24, 0x06	; 6
    5a86:	80 93 b1 22 	sts	0x22B1, r24
    5a8a:	14 c2       	rjmp	.+1064   	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button7:
		{
			send_usart_char("\r\nIO Switch ");
    5a8c:	8c e2       	ldi	r24, 0x2C	; 44
    5a8e:	94 e0       	ldi	r25, 0x04	; 4
    5a90:	44 da       	rcall	.-2936   	; 0x4f1a <send_usart_char>
			send_usart_char("7");
    5a92:	86 e7       	ldi	r24, 0x76	; 118
    5a94:	94 e0       	ldi	r25, 0x04	; 4
    5a96:	41 da       	rcall	.-2942   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
    5a98:	60 91 a8 22 	lds	r22, 0x22A8
    5a9c:	70 91 a9 22 	lds	r23, 0x22A9
    5aa0:	80 91 aa 22 	lds	r24, 0x22AA
    5aa4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    5aa8:	88 23       	and	r24, r24
    5aaa:	51 f0       	breq	.+20     	; 0x5ac0 <testMode+0x806>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
    5aac:	60 91 a8 22 	lds	r22, 0x22A8
    5ab0:	70 91 a9 22 	lds	r23, 0x22A9
    5ab4:	80 91 aa 22 	lds	r24, 0x22AA
    5ab8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("7");
			
			button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			
			while(button_status_factory != 1)
    5abc:	81 11       	cpse	r24, r1
    5abe:	f6 cf       	rjmp	.-20     	; 0x5aac <testMode+0x7f2>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5ac0:	60 91 66 23 	lds	r22, 0x2366
    5ac4:	70 91 67 23 	lds	r23, 0x2367
    5ac8:	80 91 68 23 	lds	r24, 0x2368
    5acc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5ad0:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5ad2:	60 91 61 23 	lds	r22, 0x2361
    5ad6:	70 91 62 23 	lds	r23, 0x2362
    5ada:	80 91 63 23 	lds	r24, 0x2363
    5ade:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5ae2:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5ae4:	60 91 b4 22 	lds	r22, 0x22B4
    5ae8:	70 91 b5 22 	lds	r23, 0x22B5
    5aec:	80 91 b6 22 	lds	r24, 0x22B6
    5af0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5af4:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5af6:	60 91 12 23 	lds	r22, 0x2312
    5afa:	70 91 13 23 	lds	r23, 0x2313
    5afe:	80 91 14 23 	lds	r24, 0x2314
    5b02:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5b06:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5b08:	60 91 6a 22 	lds	r22, 0x226A
    5b0c:	70 91 6b 22 	lds	r23, 0x226B
    5b10:	80 91 6c 22 	lds	r24, 0x226C
    5b14:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5b18:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5b1a:	60 91 c1 22 	lds	r22, 0x22C1
    5b1e:	70 91 c2 22 	lds	r23, 0x22C2
    5b22:	80 91 c3 22 	lds	r24, 0x22C3
    5b26:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5b2a:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5b2c:	60 91 51 23 	lds	r22, 0x2351
    5b30:	70 91 52 23 	lds	r23, 0x2352
    5b34:	80 91 53 23 	lds	r24, 0x2353
    5b38:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5b3c:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5b3e:	60 91 0f 23 	lds	r22, 0x230F
    5b42:	70 91 10 23 	lds	r23, 0x2310
    5b46:	80 91 11 23 	lds	r24, 0x2311
    5b4a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5b4e:	21 e0       	ldi	r18, 0x01	; 1
    5b50:	d1 10       	cpse	r13, r1
    5b52:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5b54:	91 e0       	ldi	r25, 0x01	; 1
    5b56:	e1 10       	cpse	r14, r1
    5b58:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b5a:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5b5c:	91 e0       	ldi	r25, 0x01	; 1
    5b5e:	f1 10       	cpse	r15, r1
    5b60:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b62:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5b64:	21 e0       	ldi	r18, 0x01	; 1
    5b66:	01 11       	cpse	r16, r1
    5b68:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b6a:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5b6c:	91 e0       	ldi	r25, 0x01	; 1
    5b6e:	11 11       	cpse	r17, r1
    5b70:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b72:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5b74:	21 e0       	ldi	r18, 0x01	; 1
    5b76:	d1 11       	cpse	r29, r1
    5b78:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b7a:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5b7c:	91 e0       	ldi	r25, 0x01	; 1
    5b7e:	c1 11       	cpse	r28, r1
    5b80:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b82:	92 2b       	or	r25, r18
    5b84:	29 f4       	brne	.+10     	; 0x5b90 <testMode+0x8d6>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5b86:	91 e0       	ldi	r25, 0x01	; 1
    5b88:	81 11       	cpse	r24, r1
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b8c:	99 23       	and	r25, r25
    5b8e:	49 f0       	breq	.+18     	; 0x5ba2 <testMode+0x8e8>
			{
				send_usart_char(" ------FAIL");
    5b90:	89 e3       	ldi	r24, 0x39	; 57
    5b92:	94 e0       	ldi	r25, 0x04	; 4
    5b94:	c2 d9       	rcall	.-3196   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5b96:	85 e4       	ldi	r24, 0x45	; 69
    5b98:	94 e0       	ldi	r25, 0x04	; 4
    5b9a:	bf d9       	rcall	.-3202   	; 0x4f1a <send_usart_char>
				button = button1;
    5b9c:	10 92 b1 22 	sts	0x22B1, r1
    5ba0:	89 c1       	rjmp	.+786    	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH2);
    5ba2:	60 91 72 23 	lds	r22, 0x2372
    5ba6:	70 91 73 23 	lds	r23, 0x2373
    5baa:	80 91 74 23 	lds	r24, 0x2374
    5bae:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				send_usart_char(" ------PASS");
    5bb2:	82 e6       	ldi	r24, 0x62	; 98
    5bb4:	94 e0       	ldi	r25, 0x04	; 4
    5bb6:	b1 d9       	rcall	.-3230   	; 0x4f1a <send_usart_char>
				button = button8;
    5bb8:	87 e0       	ldi	r24, 0x07	; 7
    5bba:	80 93 b1 22 	sts	0x22B1, r24
    5bbe:	7a c1       	rjmp	.+756    	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button8:
		{
			send_usart_char("\r\nIO Switch ");
    5bc0:	8c e2       	ldi	r24, 0x2C	; 44
    5bc2:	94 e0       	ldi	r25, 0x04	; 4
    5bc4:	aa d9       	rcall	.-3244   	; 0x4f1a <send_usart_char>
			send_usart_char("8");
    5bc6:	88 e7       	ldi	r24, 0x78	; 120
    5bc8:	94 e0       	ldi	r25, 0x04	; 4
    5bca:	a7 d9       	rcall	.-3250   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5bcc:	60 91 51 23 	lds	r22, 0x2351
    5bd0:	70 91 52 23 	lds	r23, 0x2352
    5bd4:	80 91 53 23 	lds	r24, 0x2353
    5bd8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    5bdc:	88 23       	and	r24, r24
    5bde:	51 f0       	breq	.+20     	; 0x5bf4 <testMode+0x93a>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5be0:	60 91 51 23 	lds	r22, 0x2351
    5be4:	70 91 52 23 	lds	r23, 0x2352
    5be8:	80 91 53 23 	lds	r24, 0x2353
    5bec:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("8");
			
			button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			while(button_status_factory != 1)
    5bf0:	81 11       	cpse	r24, r1
    5bf2:	f6 cf       	rjmp	.-20     	; 0x5be0 <testMode+0x926>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5bf4:	60 91 66 23 	lds	r22, 0x2366
    5bf8:	70 91 67 23 	lds	r23, 0x2367
    5bfc:	80 91 68 23 	lds	r24, 0x2368
    5c00:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5c04:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5c06:	60 91 61 23 	lds	r22, 0x2361
    5c0a:	70 91 62 23 	lds	r23, 0x2362
    5c0e:	80 91 63 23 	lds	r24, 0x2363
    5c12:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5c16:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5c18:	60 91 b4 22 	lds	r22, 0x22B4
    5c1c:	70 91 b5 22 	lds	r23, 0x22B5
    5c20:	80 91 b6 22 	lds	r24, 0x22B6
    5c24:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5c28:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5c2a:	60 91 12 23 	lds	r22, 0x2312
    5c2e:	70 91 13 23 	lds	r23, 0x2313
    5c32:	80 91 14 23 	lds	r24, 0x2314
    5c36:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5c3a:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5c3c:	60 91 6a 22 	lds	r22, 0x226A
    5c40:	70 91 6b 22 	lds	r23, 0x226B
    5c44:	80 91 6c 22 	lds	r24, 0x226C
    5c48:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5c4c:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5c4e:	60 91 c1 22 	lds	r22, 0x22C1
    5c52:	70 91 c2 22 	lds	r23, 0x22C2
    5c56:	80 91 c3 22 	lds	r24, 0x22C3
    5c5a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5c5e:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5c60:	60 91 a8 22 	lds	r22, 0x22A8
    5c64:	70 91 a9 22 	lds	r23, 0x22A9
    5c68:	80 91 aa 22 	lds	r24, 0x22AA
    5c6c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5c70:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5c72:	60 91 0f 23 	lds	r22, 0x230F
    5c76:	70 91 10 23 	lds	r23, 0x2310
    5c7a:	80 91 11 23 	lds	r24, 0x2311
    5c7e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5c82:	21 e0       	ldi	r18, 0x01	; 1
    5c84:	d1 10       	cpse	r13, r1
    5c86:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5c88:	91 e0       	ldi	r25, 0x01	; 1
    5c8a:	e1 10       	cpse	r14, r1
    5c8c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5c8e:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5c90:	91 e0       	ldi	r25, 0x01	; 1
    5c92:	f1 10       	cpse	r15, r1
    5c94:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5c96:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5c98:	21 e0       	ldi	r18, 0x01	; 1
    5c9a:	01 11       	cpse	r16, r1
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5c9e:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5ca0:	91 e0       	ldi	r25, 0x01	; 1
    5ca2:	11 11       	cpse	r17, r1
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5ca6:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5ca8:	21 e0       	ldi	r18, 0x01	; 1
    5caa:	d1 11       	cpse	r29, r1
    5cac:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5cae:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5cb0:	91 e0       	ldi	r25, 0x01	; 1
    5cb2:	c1 11       	cpse	r28, r1
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5cb6:	92 2b       	or	r25, r18
    5cb8:	29 f4       	brne	.+10     	; 0x5cc4 <testMode+0xa0a>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5cba:	91 e0       	ldi	r25, 0x01	; 1
    5cbc:	81 11       	cpse	r24, r1
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5cc0:	99 23       	and	r25, r25
    5cc2:	49 f0       	breq	.+18     	; 0x5cd6 <testMode+0xa1c>
			{
				send_usart_char(" ------FAIL");
    5cc4:	89 e3       	ldi	r24, 0x39	; 57
    5cc6:	94 e0       	ldi	r25, 0x04	; 4
    5cc8:	28 d9       	rcall	.-3504   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5cca:	85 e4       	ldi	r24, 0x45	; 69
    5ccc:	94 e0       	ldi	r25, 0x04	; 4
    5cce:	25 d9       	rcall	.-3510   	; 0x4f1a <send_usart_char>
				button = button1;
    5cd0:	10 92 b1 22 	sts	0x22B1, r1
    5cd4:	ef c0       	rjmp	.+478    	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_clr(OUT_LED_CH0);
    5cd6:	60 91 98 22 	lds	r22, 0x2298
    5cda:	70 91 99 22 	lds	r23, 0x2299
    5cde:	80 91 9a 22 	lds	r24, 0x229A
    5ce2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
				gpio_clr(OUT_LED_CH1);
    5ce6:	60 91 6c 23 	lds	r22, 0x236C
    5cea:	70 91 6d 23 	lds	r23, 0x236D
    5cee:	80 91 6e 23 	lds	r24, 0x236E
    5cf2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
				gpio_clr(OUT_LED_CH2);
    5cf6:	60 91 72 23 	lds	r22, 0x2372
    5cfa:	70 91 73 23 	lds	r23, 0x2373
    5cfe:	80 91 74 23 	lds	r24, 0x2374
    5d02:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
				send_usart_char(" ------PASS");
    5d06:	82 e6       	ldi	r24, 0x62	; 98
    5d08:	94 e0       	ldi	r25, 0x04	; 4
    5d0a:	07 d9       	rcall	.-3570   	; 0x4f1a <send_usart_char>
				button = button9;
    5d0c:	88 e0       	ldi	r24, 0x08	; 8
    5d0e:	80 93 b1 22 	sts	0x22B1, r24
    5d12:	d0 c0       	rjmp	.+416    	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button9:
		{
			send_usart_char("\r\nIO Switch ");
    5d14:	8c e2       	ldi	r24, 0x2C	; 44
    5d16:	94 e0       	ldi	r25, 0x04	; 4
    5d18:	00 d9       	rcall	.-3584   	; 0x4f1a <send_usart_char>
			send_usart_char("9");
    5d1a:	8a e7       	ldi	r24, 0x7A	; 122
    5d1c:	94 e0       	ldi	r25, 0x04	; 4
    5d1e:	fd d8       	rcall	.-3590   	; 0x4f1a <send_usart_char>
			
			button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
    5d20:	60 91 0f 23 	lds	r22, 0x230F
    5d24:	70 91 10 23 	lds	r23, 0x2310
    5d28:	80 91 11 23 	lds	r24, 0x2311
    5d2c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			
			while(button_status_factory != 1)
    5d30:	88 23       	and	r24, r24
    5d32:	51 f0       	breq	.+20     	; 0x5d48 <testMode+0xa8e>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
    5d34:	60 91 0f 23 	lds	r22, 0x230F
    5d38:	70 91 10 23 	lds	r23, 0x2310
    5d3c:	80 91 11 23 	lds	r24, 0x2311
    5d40:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("9");
			
			button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			while(button_status_factory != 1)
    5d44:	81 11       	cpse	r24, r1
    5d46:	f6 cf       	rjmp	.-20     	; 0x5d34 <testMode+0xa7a>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5d48:	60 91 66 23 	lds	r22, 0x2366
    5d4c:	70 91 67 23 	lds	r23, 0x2367
    5d50:	80 91 68 23 	lds	r24, 0x2368
    5d54:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5d58:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5d5a:	60 91 61 23 	lds	r22, 0x2361
    5d5e:	70 91 62 23 	lds	r23, 0x2362
    5d62:	80 91 63 23 	lds	r24, 0x2363
    5d66:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5d6a:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5d6c:	60 91 b4 22 	lds	r22, 0x22B4
    5d70:	70 91 b5 22 	lds	r23, 0x22B5
    5d74:	80 91 b6 22 	lds	r24, 0x22B6
    5d78:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5d7c:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5d7e:	60 91 12 23 	lds	r22, 0x2312
    5d82:	70 91 13 23 	lds	r23, 0x2313
    5d86:	80 91 14 23 	lds	r24, 0x2314
    5d8a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5d8e:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5d90:	60 91 6a 22 	lds	r22, 0x226A
    5d94:	70 91 6b 22 	lds	r23, 0x226B
    5d98:	80 91 6c 22 	lds	r24, 0x226C
    5d9c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5da0:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5da2:	60 91 c1 22 	lds	r22, 0x22C1
    5da6:	70 91 c2 22 	lds	r23, 0x22C2
    5daa:	80 91 c3 22 	lds	r24, 0x22C3
    5dae:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5db2:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5db4:	60 91 a8 22 	lds	r22, 0x22A8
    5db8:	70 91 a9 22 	lds	r23, 0x22A9
    5dbc:	80 91 aa 22 	lds	r24, 0x22AA
    5dc0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
    5dc4:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5dc6:	60 91 51 23 	lds	r22, 0x2351
    5dca:	70 91 52 23 	lds	r23, 0x2352
    5dce:	80 91 53 23 	lds	r24, 0x2353
    5dd2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gpio_read>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5dd6:	21 e0       	ldi	r18, 0x01	; 1
    5dd8:	d1 10       	cpse	r13, r1
    5dda:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5ddc:	91 e0       	ldi	r25, 0x01	; 1
    5dde:	e1 10       	cpse	r14, r1
    5de0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5de2:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5de4:	91 e0       	ldi	r25, 0x01	; 1
    5de6:	f1 10       	cpse	r15, r1
    5de8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5dea:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5dec:	21 e0       	ldi	r18, 0x01	; 1
    5dee:	01 11       	cpse	r16, r1
    5df0:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5df2:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5df4:	91 e0       	ldi	r25, 0x01	; 1
    5df6:	11 11       	cpse	r17, r1
    5df8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5dfa:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5dfc:	21 e0       	ldi	r18, 0x01	; 1
    5dfe:	d1 11       	cpse	r29, r1
    5e00:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e02:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5e04:	91 e0       	ldi	r25, 0x01	; 1
    5e06:	c1 11       	cpse	r28, r1
    5e08:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e0a:	92 2b       	or	r25, r18
    5e0c:	29 f4       	brne	.+10     	; 0x5e18 <testMode+0xb5e>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5e0e:	91 e0       	ldi	r25, 0x01	; 1
    5e10:	81 11       	cpse	r24, r1
    5e12:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e14:	99 23       	and	r25, r25
    5e16:	49 f0       	breq	.+18     	; 0x5e2a <testMode+0xb70>
			{
				send_usart_char(" ------FAIL");
    5e18:	89 e3       	ldi	r24, 0x39	; 57
    5e1a:	94 e0       	ldi	r25, 0x04	; 4
    5e1c:	7e d8       	rcall	.-3844   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5e1e:	85 e4       	ldi	r24, 0x45	; 69
    5e20:	94 e0       	ldi	r25, 0x04	; 4
    5e22:	7b d8       	rcall	.-3850   	; 0x4f1a <send_usart_char>
				button = button1;
    5e24:	10 92 b1 22 	sts	0x22B1, r1
    5e28:	45 c0       	rjmp	.+138    	; 0x5eb4 <testMode+0xbfa>
			}
			else
			{
				gpio_clr(STATUS_LED_1);
    5e2a:	60 91 b7 22 	lds	r22, 0x22B7
    5e2e:	70 91 b8 22 	lds	r23, 0x22B8
    5e32:	80 91 b9 22 	lds	r24, 0x22B9
    5e36:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
				gpio_clr(STATUS_LED_2);
    5e3a:	60 91 d9 22 	lds	r22, 0x22D9
    5e3e:	70 91 da 22 	lds	r23, 0x22DA
    5e42:	80 91 db 22 	lds	r24, 0x22DB
    5e46:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
				gpio_clr(CHARGING_DISABLE);
    5e4a:	60 91 eb 22 	lds	r22, 0x22EB
    5e4e:	70 91 ec 22 	lds	r23, 0x22EC
    5e52:	80 91 ed 22 	lds	r24, 0x22ED
    5e56:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
				gpio_clr(EMER_LIGHT_EN);
    5e5a:	60 91 bb 22 	lds	r22, 0x22BB
    5e5e:	70 91 bc 22 	lds	r23, 0x22BC
    5e62:	80 91 bd 22 	lds	r24, 0x22BD
    5e66:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpio_clr>
				gpio_set(OUT_LED_CH0);
    5e6a:	60 91 98 22 	lds	r22, 0x2298
    5e6e:	70 91 99 22 	lds	r23, 0x2299
    5e72:	80 91 9a 22 	lds	r24, 0x229A
    5e76:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				gpio_set(OUT_LED_CH1);
    5e7a:	60 91 6c 23 	lds	r22, 0x236C
    5e7e:	70 91 6d 23 	lds	r23, 0x236D
    5e82:	80 91 6e 23 	lds	r24, 0x236E
    5e86:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				gpio_set(OUT_LED_CH2);
    5e8a:	60 91 72 23 	lds	r22, 0x2372
    5e8e:	70 91 73 23 	lds	r23, 0x2373
    5e92:	80 91 74 23 	lds	r24, 0x2374
    5e96:	0e 94 93 09 	call	0x1326	; 0x1326 <gpio_set>
				send_usart_char(" ------PASS");
    5e9a:	82 e6       	ldi	r24, 0x62	; 98
    5e9c:	94 e0       	ldi	r25, 0x04	; 4
    5e9e:	3d d8       	rcall	.-3974   	; 0x4f1a <send_usart_char>
				send_usart_char("\r\n------ Test Finished ------\r\n------ Successful ------");
    5ea0:	8c e7       	ldi	r24, 0x7C	; 124
    5ea2:	94 e0       	ldi	r25, 0x04	; 4
    5ea4:	3a d8       	rcall	.-3980   	; 0x4f1a <send_usart_char>
				button = button10;
    5ea6:	89 e0       	ldi	r24, 0x09	; 9
    5ea8:	80 93 b1 22 	sts	0x22B1, r24
    5eac:	03 c0       	rjmp	.+6      	; 0x5eb4 <testMode+0xbfa>
		}
		break;
		
		case button10:
		{
			option_select = option_message;
    5eae:	89 e0       	ldi	r24, 0x09	; 9
    5eb0:	80 93 c5 22 	sts	0x22C5, r24
		}
		break;
	}

}
    5eb4:	df 91       	pop	r29
    5eb6:	cf 91       	pop	r28
    5eb8:	1f 91       	pop	r17
    5eba:	0f 91       	pop	r16
    5ebc:	ff 90       	pop	r15
    5ebe:	ef 90       	pop	r14
    5ec0:	df 90       	pop	r13
    5ec2:	08 95       	ret

00005ec4 <dump_eeprom>:

void dump_eeprom()
{
    5ec4:	0f 93       	push	r16
    5ec6:	1f 93       	push	r17
    5ec8:	cf 93       	push	r28
    5eca:	df 93       	push	r29
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
    5ecc:	c0 e0       	ldi	r28, 0x00	; 0
    5ece:	d0 e0       	ldi	r29, 0x00	; 0

}

void dump_eeprom()
{
	uint8_t block = 0;
    5ed0:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
	{
		if(block == 32)
		{
			send_usart_char("\r\n");
			block = 0;
    5ed2:	00 e0       	ldi	r16, 0x00	; 0
    5ed4:	06 c0       	rjmp	.+12     	; 0x5ee2 <dump_eeprom+0x1e>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
	{
		if(block == 32)
    5ed6:	10 32       	cpi	r17, 0x20	; 32
    5ed8:	21 f4       	brne	.+8      	; 0x5ee2 <dump_eeprom+0x1e>
		{
			send_usart_char("\r\n");
    5eda:	89 e4       	ldi	r24, 0x49	; 73
    5edc:	96 e0       	ldi	r25, 0x06	; 6
    5ede:	1d d8       	rcall	.-4038   	; 0x4f1a <send_usart_char>
			block = 0;
    5ee0:	10 2f       	mov	r17, r16
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		int_to_ascii(PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high));
    5ee2:	2d 2f       	mov	r18, r29
    5ee4:	4c 2f       	mov	r20, r28
    5ee6:	65 e4       	ldi	r22, 0x45	; 69
    5ee8:	8f ea       	ldi	r24, 0xAF	; 175
    5eea:	0e 94 43 22 	call	0x4486	; 0x4486 <PNEWELSE2promRead>
    5eee:	69 d8       	rcall	.-3886   	; 0x4fc2 <int_to_ascii>
		send_usart_char(" ");
    5ef0:	8b ed       	ldi	r24, 0xDB	; 219
    5ef2:	94 e0       	ldi	r25, 0x04	; 4
    5ef4:	12 d8       	rcall	.-4060   	; 0x4f1a <send_usart_char>
		pne_delayms(5);
    5ef6:	85 e0       	ldi	r24, 0x05	; 5
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	0e 94 2b 21 	call	0x4256	; 0x4256 <pne_delayms>
		block++;
    5efe:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
    5f00:	21 96       	adiw	r28, 0x01	; 1
    5f02:	c1 15       	cp	r28, r1
    5f04:	80 e2       	ldi	r24, 0x20	; 32
    5f06:	d8 07       	cpc	r29, r24
    5f08:	31 f7       	brne	.-52     	; 0x5ed6 <dump_eeprom+0x12>
		send_usart_char(" ");
		pne_delayms(5);
		block++;
		
	}
	option_select = option_message;
    5f0a:	89 e0       	ldi	r24, 0x09	; 9
    5f0c:	80 93 c5 22 	sts	0x22C5, r24
}
    5f10:	df 91       	pop	r29
    5f12:	cf 91       	pop	r28
    5f14:	1f 91       	pop	r17
    5f16:	0f 91       	pop	r16
    5f18:	08 95       	ret

00005f1a <readE2prom>:
uint8_t readE2prom(uint16_t address)
{
	uint8_t cache = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	cache = PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high);
    5f1a:	29 2f       	mov	r18, r25
    5f1c:	48 2f       	mov	r20, r24
    5f1e:	65 e4       	ldi	r22, 0x45	; 69
    5f20:	8f ea       	ldi	r24, 0xAF	; 175
    5f22:	0c 94 43 22 	jmp	0x4486	; 0x4486 <PNEWELSE2promRead>
	return cache;
}
    5f26:	08 95       	ret

00005f28 <pneDisplayInfo>:
	}
		return idle;
}

void pneDisplayInfo()
{
    5f28:	ef 92       	push	r14
    5f2a:	ff 92       	push	r15
    5f2c:	0f 93       	push	r16
    5f2e:	1f 93       	push	r17
    5f30:	cf 93       	push	r28
    5f32:	df 93       	push	r29
    5f34:	cd b7       	in	r28, 0x3d	; 61
    5f36:	de b7       	in	r29, 0x3e	; 62
    5f38:	62 97       	sbiw	r28, 0x12	; 18
    5f3a:	0f b6       	in	r0, 0x3f	; 63
    5f3c:	f8 94       	cli
    5f3e:	de bf       	out	0x3e, r29	; 62
    5f40:	0f be       	out	0x3f, r0	; 63
    5f42:	cd bf       	out	0x3d, r28	; 61
	uint8_t cache[2]={0};
		
	send_usart_char("Device information:\r\n");
    5f44:	84 eb       	ldi	r24, 0xB4	; 180
    5f46:	94 e0       	ldi	r25, 0x04	; 4
    5f48:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
	send_usart_char("\r\nPAN ID (Zone)\t: ");
    5f4c:	8a ec       	ldi	r24, 0xCA	; 202
    5f4e:	94 e0       	ldi	r25, 0x04	; 4
    5f50:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
	cache[0] = readE2prom(DEVICE_PAN_H);
    5f54:	81 e0       	ldi	r24, 0x01	; 1
    5f56:	90 e1       	ldi	r25, 0x10	; 16
    5f58:	e0 df       	rcall	.-64     	; 0x5f1a <readE2prom>
    5f5a:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_PAN_L);
    5f5c:	80 e0       	ldi	r24, 0x00	; 0
    5f5e:	90 e1       	ldi	r25, 0x10	; 16
    5f60:	dc df       	rcall	.-72     	; 0x5f1a <readE2prom>
	PNEWELS_Buffer.devicePAN = cache[0];
    5f62:	21 2f       	mov	r18, r17
    5f64:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.devicePAN = PNEWELS_Buffer.devicePAN << 8;
    5f66:	32 2f       	mov	r19, r18
    5f68:	22 27       	eor	r18, r18
	PNEWELS_Buffer.devicePAN |= cache[1];
    5f6a:	a9 01       	movw	r20, r18
    5f6c:	48 2b       	or	r20, r24
    5f6e:	ca 01       	movw	r24, r20
    5f70:	0f 2e       	mov	r0, r31
    5f72:	fe e6       	ldi	r31, 0x6E	; 110
    5f74:	ef 2e       	mov	r14, r31
    5f76:	f2 e2       	ldi	r31, 0x22	; 34
    5f78:	ff 2e       	mov	r15, r31
    5f7a:	f0 2d       	mov	r31, r0
    5f7c:	f7 01       	movw	r30, r14
    5f7e:	96 8f       	std	Z+30, r25	; 0x1e
    5f80:	85 8f       	std	Z+29, r24	; 0x1d
	int_to_ascii((uint8_t)(PNEWELS_Buffer.devicePAN>>8));
    5f82:	89 2f       	mov	r24, r25
    5f84:	1e d8       	rcall	.-4036   	; 0x4fc2 <int_to_ascii>
	int_to_ascii((uint8_t)PNEWELS_Buffer.devicePAN);
    5f86:	f7 01       	movw	r30, r14
    5f88:	85 8d       	ldd	r24, Z+29	; 0x1d
    5f8a:	1b d8       	rcall	.-4042   	; 0x4fc2 <int_to_ascii>
	
// 	send_usart_char("\r\nNode ID\t\t: ");
// 	PNEWELS_Buffer.nodeID = readE2prom(NODE_ID);
// 	int_to_ascii(PNEWELS_Buffer.nodeID);
	
	send_usart_char("\r\nDevice address\t: ");
    5f8c:	8d ed       	ldi	r24, 0xDD	; 221
    5f8e:	94 e0       	ldi	r25, 0x04	; 4
    5f90:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
	cache[0] = readE2prom(DEVICE_ADDRESS_H);
    5f94:	8d ef       	ldi	r24, 0xFD	; 253
    5f96:	9f e0       	ldi	r25, 0x0F	; 15
    5f98:	c0 df       	rcall	.-128    	; 0x5f1a <readE2prom>
    5f9a:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_ADDRESS_L);
    5f9c:	8c ef       	ldi	r24, 0xFC	; 252
    5f9e:	9f e0       	ldi	r25, 0x0F	; 15
    5fa0:	bc df       	rcall	.-136    	; 0x5f1a <readE2prom>
	PNEWELS_Buffer.deviceAddress = cache[0];
    5fa2:	21 2f       	mov	r18, r17
    5fa4:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.deviceAddress = PNEWELS_Buffer.deviceAddress << 8;
    5fa6:	32 2f       	mov	r19, r18
    5fa8:	22 27       	eor	r18, r18
	PNEWELS_Buffer.deviceAddress |= cache[1];
    5faa:	a9 01       	movw	r20, r18
    5fac:	48 2b       	or	r20, r24
    5fae:	ca 01       	movw	r24, r20
    5fb0:	f7 01       	movw	r30, r14
    5fb2:	94 8f       	std	Z+28, r25	; 0x1c
    5fb4:	83 8f       	std	Z+27, r24	; 0x1b
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress>>8));
    5fb6:	89 2f       	mov	r24, r25
    5fb8:	04 d8       	rcall	.-4088   	; 0x4fc2 <int_to_ascii>
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress));
    5fba:	f7 01       	movw	r30, r14
    5fbc:	83 8d       	ldd	r24, Z+27	; 0x1b
    5fbe:	01 d8       	rcall	.-4094   	; 0x4fc2 <int_to_ascii>
	
	send_usart_char("\r\nDevice channel\t: ");
    5fc0:	81 ef       	ldi	r24, 0xF1	; 241
    5fc2:	94 e0       	ldi	r25, 0x04	; 4
    5fc4:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
	cache[0] = readE2prom(DEVICE_CHANNEL_H);
    5fc8:	8f ef       	ldi	r24, 0xFF	; 255
    5fca:	9f e0       	ldi	r25, 0x0F	; 15
    5fcc:	a6 df       	rcall	.-180    	; 0x5f1a <readE2prom>
    5fce:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_CHANNEL_L);
    5fd0:	8e ef       	ldi	r24, 0xFE	; 254
    5fd2:	9f e0       	ldi	r25, 0x0F	; 15
    5fd4:	a2 df       	rcall	.-188    	; 0x5f1a <readE2prom>
	PNEWELS_Buffer.deviceAddress = cache[0];
    5fd6:	21 2f       	mov	r18, r17
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.deviceAddress = PNEWELS_Buffer.deviceAddress << 8;
    5fda:	32 2f       	mov	r19, r18
    5fdc:	22 27       	eor	r18, r18
	PNEWELS_Buffer.deviceAddress |= cache[1];
    5fde:	a9 01       	movw	r20, r18
    5fe0:	48 2b       	or	r20, r24
    5fe2:	ca 01       	movw	r24, r20
    5fe4:	f7 01       	movw	r30, r14
    5fe6:	94 8f       	std	Z+28, r25	; 0x1c
    5fe8:	83 8f       	std	Z+27, r24	; 0x1b
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress>>8));
    5fea:	89 2f       	mov	r24, r25
    5fec:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress));
    5ff0:	f7 01       	movw	r30, r14
    5ff2:	83 8d       	ldd	r24, Z+27	; 0x1b
    5ff4:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
	
	//Read EEPROM and display serial number
	uint8_t serial_addr[2] = {0x00, 0x08};
    5ff8:	19 82       	std	Y+1, r1	; 0x01
    5ffa:	88 e0       	ldi	r24, 0x08	; 8
    5ffc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t serial_no[16] = {0};
    5ffe:	7e 01       	movw	r14, r28
    6000:	f3 e0       	ldi	r31, 0x03	; 3
    6002:	ef 0e       	add	r14, r31
    6004:	f1 1c       	adc	r15, r1
    6006:	80 e1       	ldi	r24, 0x10	; 16
    6008:	f7 01       	movw	r30, r14
    600a:	11 92       	st	Z+, r1
    600c:	8a 95       	dec	r24
    600e:	e9 f7       	brne	.-6      	; 0x600a <pneDisplayInfo+0xe2>
								
	pne_APP_TwiInit(0xBF);
    6010:	8f eb       	ldi	r24, 0xBF	; 191
    6012:	0e 94 3f 21 	call	0x427e	; 0x427e <pne_APP_TwiInit>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, serial_no, 16);
    6016:	00 e1       	ldi	r16, 0x10	; 16
    6018:	97 01       	movw	r18, r14
    601a:	4f eb       	ldi	r20, 0xBF	; 191
    601c:	62 e0       	ldi	r22, 0x02	; 2
    601e:	ce 01       	movw	r24, r28
    6020:	01 96       	adiw	r24, 0x01	; 1
    6022:	0e 94 c0 21 	call	0x4380	; 0x4380 <pne_APP_TwiReceive>
	send_usart_char("\r\nSerial Number   : ");
    6026:	85 e0       	ldi	r24, 0x05	; 5
    6028:	95 e0       	ldi	r25, 0x05	; 5
    602a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
    602e:	87 01       	movw	r16, r14
    6030:	7e 01       	movw	r14, r28
    6032:	f2 e1       	ldi	r31, 0x12	; 18
    6034:	ef 0e       	add	r14, r31
    6036:	f1 1c       	adc	r15, r1
							
	uint8_t compare = 0;
							
	for (compare=0; compare<15; compare++)
	{
		int_to_ascii(serial_no[compare]);
    6038:	f8 01       	movw	r30, r16
    603a:	81 91       	ld	r24, Z+
    603c:	8f 01       	movw	r16, r30
    603e:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
		usart_putchar(USART_SERIAL_EXAMPLE, 0x2E);
    6042:	6e e2       	ldi	r22, 0x2E	; 46
    6044:	88 ec       	ldi	r24, 0xC8	; 200
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	0e 94 f7 05 	call	0xbee	; 0xbee <usart_putchar>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, serial_no, 16);
	send_usart_char("\r\nSerial Number   : ");
							
	uint8_t compare = 0;
							
	for (compare=0; compare<15; compare++)
    604c:	0e 15       	cp	r16, r14
    604e:	1f 05       	cpc	r17, r15
    6050:	99 f7       	brne	.-26     	; 0x6038 <pneDisplayInfo+0x110>
	{
		int_to_ascii(serial_no[compare]);
		usart_putchar(USART_SERIAL_EXAMPLE, 0x2E);
	}
							
	int_to_ascii(serial_no[15]);
    6052:	8a 89       	ldd	r24, Y+18	; 0x12
    6054:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
							
	//Read ADC
	uint8_t battery_voltage = pneBatteryAverage();
    6058:	d9 d7       	rcall	.+4018   	; 0x700c <pneBatteryAverage>
    605a:	08 2f       	mov	r16, r24
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    605c:	eb e7       	ldi	r30, 0x7B	; 123
    605e:	f0 e0       	ldi	r31, 0x00	; 0
    6060:	90 81       	ld	r25, Z
    6062:	97 7f       	andi	r25, 0xF7	; 247
    6064:	90 83       	st	Z, r25
	}

	ADMUX
		= ((uint8_t)input &
    6066:	81 e6       	ldi	r24, 0x61	; 97
    6068:	80 93 7c 00 	sts	0x007C, r24
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    606c:	ea e7       	ldi	r30, 0x7A	; 122
    606e:	f0 e0       	ldi	r31, 0x00	; 0
    6070:	90 81       	ld	r25, Z
    6072:	90 64       	ori	r25, 0x40	; 64
    6074:	90 83       	st	Z, r25

	while ((ADCSRA & (1 << ADSC))) {
    6076:	90 81       	ld	r25, Z
    6078:	96 fd       	sbrc	r25, 6
    607a:	fd cf       	rjmp	.-6      	; 0x6076 <pneDisplayInfo+0x14e>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    607c:	10 91 79 00 	lds	r17, 0x0079
	uint8_t battery_capacity = adc_read_8bit(ADC_EMER_LIGHT_INPUT, ADC_VREF);
							
	send_usart_char("\r\nBattery Voltage : ");
    6080:	8a e1       	ldi	r24, 0x1A	; 26
    6082:	95 e0       	ldi	r25, 0x05	; 5
    6084:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
	int_to_ascii(battery_voltage);
    6088:	80 2f       	mov	r24, r16
    608a:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
	send_usart_char("\r\nBattery Capacity: ");
    608e:	8f e2       	ldi	r24, 0x2F	; 47
    6090:	95 e0       	ldi	r25, 0x05	; 5
    6092:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
	int_to_ascii(battery_capacity);
    6096:	81 2f       	mov	r24, r17
    6098:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
	
	option_select = option_message;
    609c:	89 e0       	ldi	r24, 0x09	; 9
    609e:	80 93 c5 22 	sts	0x22C5, r24
}
    60a2:	62 96       	adiw	r28, 0x12	; 18
    60a4:	0f b6       	in	r0, 0x3f	; 63
    60a6:	f8 94       	cli
    60a8:	de bf       	out	0x3e, r29	; 62
    60aa:	0f be       	out	0x3f, r0	; 63
    60ac:	cd bf       	out	0x3d, r28	; 61
    60ae:	df 91       	pop	r29
    60b0:	cf 91       	pop	r28
    60b2:	1f 91       	pop	r17
    60b4:	0f 91       	pop	r16
    60b6:	ff 90       	pop	r15
    60b8:	ef 90       	pop	r14
    60ba:	08 95       	ret

000060bc <resetFlag>:
	int_to_ascii(data);
	/*send_usart_char("\r\n");*/
}

void resetFlag()
{
    60bc:	0f 93       	push	r16
	
	uint8_t memory_address_low = (FLAG & 0xFF);
	uint8_t memory_address_high = ((FLAG >> 8) & 0xFF);
	
	switch(reset_state)
    60be:	80 91 40 23 	lds	r24, 0x2340
    60c2:	90 e0       	ldi	r25, 0x00	; 0
    60c4:	88 30       	cpi	r24, 0x08	; 8
    60c6:	91 05       	cpc	r25, r1
    60c8:	08 f0       	brcs	.+2      	; 0x60cc <resetFlag+0x10>
    60ca:	73 c0       	rjmp	.+230    	; 0x61b2 <resetFlag+0xf6>
    60cc:	fc 01       	movw	r30, r24
    60ce:	88 27       	eor	r24, r24
    60d0:	ea 58       	subi	r30, 0x8A	; 138
    60d2:	fe 4f       	sbci	r31, 0xFE	; 254
    60d4:	8f 4f       	sbci	r24, 0xFF	; 255
    60d6:	0c 94 7c 4d 	jmp	0x9af8	; 0x9af8 <__tablejump2__>
	{
		case reset_startup_message:
		{
			send_usart_char("\r\n\r\nFlag reset mode. Select an option:\r\n\r\n");
    60da:	84 e4       	ldi	r24, 0x44	; 68
    60dc:	95 e0       	ldi	r25, 0x05	; 5
    60de:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			send_usart_char("1. Reset all flag\r\n2. Reset Factory flag (bit0)\r\n3. Reset AC Power flag (bit1)\r\n");
    60e2:	8f e6       	ldi	r24, 0x6F	; 111
    60e4:	95 e0       	ldi	r25, 0x05	; 5
    60e6:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			send_usart_char("4. Read system flag status\r\n5. Set flag\r\n0. Exit configuration mode\r\n");
    60ea:	80 ec       	ldi	r24, 0xC0	; 192
    60ec:	95 e0       	ldi	r25, 0x05	; 5
    60ee:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			reset_option_flag = 1;
    60f2:	81 e0       	ldi	r24, 0x01	; 1
    60f4:	80 93 b3 22 	sts	0x22B3, r24
			reset_state = reset_idle;
    60f8:	86 e0       	ldi	r24, 0x06	; 6
    60fa:	80 93 40 23 	sts	0x2340, r24
		}
		break;
    60fe:	60 c0       	rjmp	.+192    	; 0x61c0 <resetFlag+0x104>
		
		case reset_all:
		{
 			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,0xFF);
    6100:	0f ef       	ldi	r16, 0xFF	; 255
    6102:	20 e1       	ldi	r18, 0x10	; 16
    6104:	42 e0       	ldi	r20, 0x02	; 2
    6106:	65 e4       	ldi	r22, 0x45	; 69
    6108:	8e ea       	ldi	r24, 0xAE	; 174
    610a:	0e 94 18 22 	call	0x4430	; 0x4430 <PNEWELSE2promWrite>
			pne_delayms(10);
    610e:	8a e0       	ldi	r24, 0x0A	; 10
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	0e 94 2b 21 	call	0x4256	; 0x4256 <pne_delayms>
			reset_state = reset_startup_message;
    6116:	10 92 40 23 	sts	0x2340, r1
		}
		break;
    611a:	52 c0       	rjmp	.+164    	; 0x61c0 <resetFlag+0x104>
		
		case reset_bit0:
		{
			reset_cache = readE2prom(FLAG);
    611c:	82 e0       	ldi	r24, 0x02	; 2
    611e:	90 e1       	ldi	r25, 0x10	; 16
    6120:	fc de       	rcall	.-520    	; 0x5f1a <readE2prom>
			reset_cache = (reset_cache | 0x01); 
    6122:	08 2f       	mov	r16, r24
    6124:	01 60       	ori	r16, 0x01	; 1
    6126:	00 93 6d 22 	sts	0x226D, r16
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    612a:	20 e1       	ldi	r18, 0x10	; 16
    612c:	42 e0       	ldi	r20, 0x02	; 2
    612e:	65 e4       	ldi	r22, 0x45	; 69
    6130:	8e ea       	ldi	r24, 0xAE	; 174
    6132:	0e 94 18 22 	call	0x4430	; 0x4430 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    6136:	10 92 40 23 	sts	0x2340, r1
		}
		break;
    613a:	42 c0       	rjmp	.+132    	; 0x61c0 <resetFlag+0x104>
		
		case reset_bit1:
		{
			reset_cache = readE2prom(FLAG);
    613c:	82 e0       	ldi	r24, 0x02	; 2
    613e:	90 e1       	ldi	r25, 0x10	; 16
    6140:	ec de       	rcall	.-552    	; 0x5f1a <readE2prom>
			reset_cache = (reset_cache | 0x02); 
    6142:	08 2f       	mov	r16, r24
    6144:	02 60       	ori	r16, 0x02	; 2
    6146:	00 93 6d 22 	sts	0x226D, r16
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    614a:	20 e1       	ldi	r18, 0x10	; 16
    614c:	42 e0       	ldi	r20, 0x02	; 2
    614e:	65 e4       	ldi	r22, 0x45	; 69
    6150:	8e ea       	ldi	r24, 0xAE	; 174
    6152:	0e 94 18 22 	call	0x4430	; 0x4430 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    6156:	10 92 40 23 	sts	0x2340, r1
		}
		break;
    615a:	32 c0       	rjmp	.+100    	; 0x61c0 <resetFlag+0x104>
		
		case reset_read_status:
		{
			reset_cache = readE2prom(FLAG);
    615c:	82 e0       	ldi	r24, 0x02	; 2
    615e:	90 e1       	ldi	r25, 0x10	; 16
    6160:	dc de       	rcall	.-584    	; 0x5f1a <readE2prom>
    6162:	80 93 6d 22 	sts	0x226D, r24
			send_usart_char("\r\nSystem Flag: ");
    6166:	86 e0       	ldi	r24, 0x06	; 6
    6168:	96 e0       	ldi	r25, 0x06	; 6
    616a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			int_to_ascii(reset_cache);
    616e:	80 91 6d 22 	lds	r24, 0x226D
    6172:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
			send_usart_char("\r\n");
    6176:	89 e4       	ldi	r24, 0x49	; 73
    6178:	96 e0       	ldi	r25, 0x06	; 6
    617a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			reset_state = reset_startup_message;
    617e:	10 92 40 23 	sts	0x2340, r1
		}
		break;
    6182:	1e c0       	rjmp	.+60     	; 0x61c0 <resetFlag+0x104>

		case reset_set_flag:
		{
			reset_cache = 0xFC;
    6184:	8c ef       	ldi	r24, 0xFC	; 252
    6186:	80 93 6d 22 	sts	0x226D, r24
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    618a:	0c ef       	ldi	r16, 0xFC	; 252
    618c:	20 e1       	ldi	r18, 0x10	; 16
    618e:	42 e0       	ldi	r20, 0x02	; 2
    6190:	65 e4       	ldi	r22, 0x45	; 69
    6192:	8e ea       	ldi	r24, 0xAE	; 174
    6194:	0e 94 18 22 	call	0x4430	; 0x4430 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    6198:	10 92 40 23 	sts	0x2340, r1
		}
		break;
    619c:	11 c0       	rjmp	.+34     	; 0x61c0 <resetFlag+0x104>
		case reset_idle:
		break;
		
		case reset_exit:
		{
			reset_option_flag = 0;
    619e:	10 92 b3 22 	sts	0x22B3, r1
			option_select = option_message;
    61a2:	89 e0       	ldi	r24, 0x09	; 9
    61a4:	80 93 c5 22 	sts	0x22C5, r24
			config_state = config_startup_message;
    61a8:	10 92 b0 22 	sts	0x22B0, r1
			reset_state = reset_startup_message;
    61ac:	10 92 40 23 	sts	0x2340, r1
			break;
    61b0:	07 c0       	rjmp	.+14     	; 0x61c0 <resetFlag+0x104>
		}
		default:
		option_select = option_message;
    61b2:	89 e0       	ldi	r24, 0x09	; 9
    61b4:	80 93 c5 22 	sts	0x22C5, r24
		config_state = config_startup_message;
    61b8:	10 92 b0 22 	sts	0x22B0, r1
		reset_state = reset_startup_message;
    61bc:	10 92 40 23 	sts	0x2340, r1
		break;
		
	}
}
    61c0:	0f 91       	pop	r16
    61c2:	08 95       	ret

000061c4 <dump_log_file>:
	cache = PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high);
	return cache;
}

void dump_log_file()
{
    61c4:	0f 93       	push	r16
    61c6:	1f 93       	push	r17
    61c8:	cf 93       	push	r28
    61ca:	df 93       	push	r29
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    61cc:	c0 e0       	ldi	r28, 0x00	; 0
    61ce:	d0 e0       	ldi	r29, 0x00	; 0
	return cache;
}

void dump_log_file()
{
	uint8_t block = 0;
    61d0:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(block == 11)
		{
			send_usart_char("\r\n");
			block = 0;
    61d2:	00 e0       	ldi	r16, 0x00	; 0
    61d4:	07 c0       	rjmp	.+14     	; 0x61e4 <dump_log_file+0x20>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(block == 11)
    61d6:	1b 30       	cpi	r17, 0x0B	; 11
    61d8:	29 f4       	brne	.+10     	; 0x61e4 <dump_log_file+0x20>
		{
			send_usart_char("\r\n");
    61da:	89 e4       	ldi	r24, 0x49	; 73
    61dc:	96 e0       	ldi	r25, 0x06	; 6
    61de:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			block = 0;
    61e2:	10 2f       	mov	r17, r16
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		int_to_ascii(PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high));
    61e4:	2d 2f       	mov	r18, r29
    61e6:	4c 2f       	mov	r20, r28
    61e8:	65 e4       	ldi	r22, 0x45	; 69
    61ea:	8f ea       	ldi	r24, 0xAF	; 175
    61ec:	0e 94 43 22 	call	0x4486	; 0x4486 <PNEWELSE2promRead>
    61f0:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
		send_usart_char(" ");
    61f4:	8b ed       	ldi	r24, 0xDB	; 219
    61f6:	94 e0       	ldi	r25, 0x04	; 4
    61f8:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
		pne_delayms(5);
    61fc:	85 e0       	ldi	r24, 0x05	; 5
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	0e 94 2b 21 	call	0x4256	; 0x4256 <pne_delayms>
		block++;
    6204:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6206:	21 96       	adiw	r28, 0x01	; 1
    6208:	cc 3f       	cpi	r28, 0xFC	; 252
    620a:	8f e0       	ldi	r24, 0x0F	; 15
    620c:	d8 07       	cpc	r29, r24
    620e:	19 f7       	brne	.-58     	; 0x61d6 <dump_log_file+0x12>
		send_usart_char(" ");
		pne_delayms(5);
		block++;
		
	}
	option_select = option_message;
    6210:	89 e0       	ldi	r24, 0x09	; 9
    6212:	80 93 c5 22 	sts	0x22C5, r24
}
    6216:	df 91       	pop	r29
    6218:	cf 91       	pop	r28
    621a:	1f 91       	pop	r17
    621c:	0f 91       	pop	r16
    621e:	08 95       	ret

00006220 <erase_memory>:

void erase_memory()
{
	clre2prom();
    6220:	0e 94 9d 22 	call	0x453a	; 0x453a <clre2prom>
	option_select = option_message;
    6224:	89 e0       	ldi	r24, 0x09	; 9
    6226:	80 93 c5 22 	sts	0x22C5, r24
    622a:	08 95       	ret

0000622c <writeE2prom>:
}

void writeE2prom(uint16_t address, uint8_t data)
{
    622c:	0f 93       	push	r16
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, data);
    622e:	06 2f       	mov	r16, r22
    6230:	29 2f       	mov	r18, r25
    6232:	48 2f       	mov	r20, r24
    6234:	65 e4       	ldi	r22, 0x45	; 69
    6236:	8e ea       	ldi	r24, 0xAE	; 174
    6238:	0e 94 18 22 	call	0x4430	; 0x4430 <PNEWELSE2promWrite>
	pne_delayms(10);
    623c:	8a e0       	ldi	r24, 0x0A	; 10
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	0e 94 2b 21 	call	0x4256	; 0x4256 <pne_delayms>
}
    6244:	0f 91       	pop	r16
    6246:	08 95       	ret

00006248 <battery_config>:

void battery_config()
{	
	switch(battery_state)
    6248:	80 91 6b 23 	lds	r24, 0x236B
    624c:	82 30       	cpi	r24, 0x02	; 2
    624e:	79 f1       	breq	.+94     	; 0x62ae <battery_config+0x66>
    6250:	28 f4       	brcc	.+10     	; 0x625c <battery_config+0x14>
    6252:	88 23       	and	r24, r24
    6254:	59 f0       	breq	.+22     	; 0x626c <battery_config+0x24>
    6256:	81 30       	cpi	r24, 0x01	; 1
    6258:	e1 f0       	breq	.+56     	; 0x6292 <battery_config+0x4a>
    625a:	66 c0       	rjmp	.+204    	; 0x6328 <battery_config+0xe0>
    625c:	84 30       	cpi	r24, 0x04	; 4
    625e:	09 f4       	brne	.+2      	; 0x6262 <battery_config+0x1a>
    6260:	6a c0       	rjmp	.+212    	; 0x6336 <battery_config+0xee>
    6262:	98 f1       	brcs	.+102    	; 0x62ca <battery_config+0x82>
    6264:	85 30       	cpi	r24, 0x05	; 5
    6266:	09 f4       	brne	.+2      	; 0x626a <battery_config+0x22>
    6268:	55 c0       	rjmp	.+170    	; 0x6314 <battery_config+0xcc>
    626a:	5e c0       	rjmp	.+188    	; 0x6328 <battery_config+0xe0>
	{
		case battery_startup_message:
		{
			send_usart_char("\r\n\r\nBattery Configuration Mode. Select an option:\r\n\r\n");
    626c:	86 e1       	ldi	r24, 0x16	; 22
    626e:	96 e0       	ldi	r25, 0x06	; 6
    6270:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			send_usart_char("1. Set Battery Low Threshold\r\n2. Set Battery Max Threshold\r\n");
    6274:	8c e4       	ldi	r24, 0x4C	; 76
    6276:	96 e0       	ldi	r25, 0x06	; 6
    6278:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			send_usart_char("3. Display Battery Threshold\r\n0. Exit\r\n");
    627c:	89 e8       	ldi	r24, 0x89	; 137
    627e:	96 e0       	ldi	r25, 0x06	; 6
    6280:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			battery_option_flag = 1;
    6284:	81 e0       	ldi	r24, 0x01	; 1
    6286:	80 93 b2 22 	sts	0x22B2, r24
			battery_state = battery_idle;
    628a:	84 e0       	ldi	r24, 0x04	; 4
    628c:	80 93 6b 23 	sts	0x236B, r24
		}
		break;
    6290:	08 95       	ret
		
		case batteryLow:
		{
			send_usart_char("Enter battery low threshold value (00-FF): \r\n");
    6292:	81 eb       	ldi	r24, 0xB1	; 177
    6294:	96 e0       	ldi	r25, 0x06	; 6
    6296:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			config_read_input(BATTERY_LOW, '1', batteryLOW_display);
    629a:	42 e1       	ldi	r20, 0x12	; 18
    629c:	58 e0       	ldi	r21, 0x08	; 8
    629e:	61 e3       	ldi	r22, 0x31	; 49
    62a0:	84 e0       	ldi	r24, 0x04	; 4
    62a2:	90 e1       	ldi	r25, 0x10	; 16
    62a4:	0e 94 63 28 	call	0x50c6	; 0x50c6 <config_read_input>
			battery_state = battery_startup_message;
    62a8:	10 92 6b 23 	sts	0x236B, r1
		}
		break;
    62ac:	08 95       	ret
		
		case batteryMax:
		{
			send_usart_char("Enter battery max threshold value (00-FF): \r\n");
    62ae:	8f ed       	ldi	r24, 0xDF	; 223
    62b0:	96 e0       	ldi	r25, 0x06	; 6
    62b2:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			config_read_input(BATTERY_MAX, '1', batteryMAX_display);
    62b6:	4c ef       	ldi	r20, 0xFC	; 252
    62b8:	57 e0       	ldi	r21, 0x07	; 7
    62ba:	61 e3       	ldi	r22, 0x31	; 49
    62bc:	83 e0       	ldi	r24, 0x03	; 3
    62be:	90 e1       	ldi	r25, 0x10	; 16
    62c0:	0e 94 63 28 	call	0x50c6	; 0x50c6 <config_read_input>
			battery_state = battery_startup_message;
    62c4:	10 92 6b 23 	sts	0x236B, r1
		}
		break;
    62c8:	08 95       	ret
		
		case batteryStatus:
		{
			battery_cache = readE2prom(BATTERY_LOW);
    62ca:	84 e0       	ldi	r24, 0x04	; 4
    62cc:	90 e1       	ldi	r25, 0x10	; 16
    62ce:	25 de       	rcall	.-950    	; 0x5f1a <readE2prom>
    62d0:	80 93 70 23 	sts	0x2370, r24
			send_usart_char("\r\nBattery Low Threshold: ");
    62d4:	8d e0       	ldi	r24, 0x0D	; 13
    62d6:	97 e0       	ldi	r25, 0x07	; 7
    62d8:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			int_to_ascii(battery_cache);
    62dc:	80 91 70 23 	lds	r24, 0x2370
    62e0:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
			send_usart_char("\r\n");
    62e4:	89 e4       	ldi	r24, 0x49	; 73
    62e6:	96 e0       	ldi	r25, 0x06	; 6
    62e8:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			battery_cache = readE2prom(BATTERY_MAX);
    62ec:	83 e0       	ldi	r24, 0x03	; 3
    62ee:	90 e1       	ldi	r25, 0x10	; 16
    62f0:	14 de       	rcall	.-984    	; 0x5f1a <readE2prom>
    62f2:	80 93 70 23 	sts	0x2370, r24
			send_usart_char("\r\nBattery MAX Threshold: ");
    62f6:	87 e2       	ldi	r24, 0x27	; 39
    62f8:	97 e0       	ldi	r25, 0x07	; 7
    62fa:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			int_to_ascii(battery_cache);
    62fe:	80 91 70 23 	lds	r24, 0x2370
    6302:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <int_to_ascii>
			send_usart_char("\r\n");
    6306:	89 e4       	ldi	r24, 0x49	; 73
    6308:	96 e0       	ldi	r25, 0x06	; 6
    630a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			battery_state = battery_startup_message;
    630e:	10 92 6b 23 	sts	0x236B, r1
		}
		break;
    6312:	08 95       	ret
		case battery_idle:
		break;
		
		case battery_exit:
		{
			battery_option_flag = 0;
    6314:	10 92 b2 22 	sts	0x22B2, r1
			option_select = option_message;
    6318:	89 e0       	ldi	r24, 0x09	; 9
    631a:	80 93 c5 22 	sts	0x22C5, r24
			config_state = config_startup_message;
    631e:	10 92 b0 22 	sts	0x22B0, r1
			battery_state = battery_startup_message;
    6322:	10 92 6b 23 	sts	0x236B, r1
			break;
    6326:	08 95       	ret
		}
		default:
		option_select = option_message;
    6328:	89 e0       	ldi	r24, 0x09	; 9
    632a:	80 93 c5 22 	sts	0x22C5, r24
		config_state = config_startup_message;
    632e:	10 92 b0 22 	sts	0x22B0, r1
		battery_state = battery_startup_message;
    6332:	10 92 6b 23 	sts	0x236B, r1
    6336:	08 95       	ret

00006338 <batterySelect>:


uint8_t batterySelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    6338:	10 92 af 22 	sts	0x22AF, r1
	
	switch(commamd[0])
    633c:	80 91 f0 22 	lds	r24, 0x22F0
    6340:	81 33       	cpi	r24, 0x31	; 49
    6342:	a9 f0       	breq	.+42     	; 0x636e <batterySelect+0x36>
    6344:	18 f4       	brcc	.+6      	; 0x634c <batterySelect+0x14>
    6346:	80 33       	cpi	r24, 0x30	; 48
    6348:	51 f0       	breq	.+20     	; 0x635e <batterySelect+0x26>
    634a:	0b c0       	rjmp	.+22     	; 0x6362 <batterySelect+0x2a>
    634c:	82 33       	cpi	r24, 0x32	; 50
    634e:	19 f0       	breq	.+6      	; 0x6356 <batterySelect+0x1e>
    6350:	83 33       	cpi	r24, 0x33	; 51
    6352:	19 f0       	breq	.+6      	; 0x635a <batterySelect+0x22>
    6354:	06 c0       	rjmp	.+12     	; 0x6362 <batterySelect+0x2a>
		case '1':
		return batteryLow;
		break;
		
		case '2':
		return batteryMax;
    6356:	82 e0       	ldi	r24, 0x02	; 2
    6358:	08 95       	ret
		break;
		
		case '3':
		return batteryStatus;
    635a:	83 e0       	ldi	r24, 0x03	; 3
    635c:	08 95       	ret
		break;
		
		case '0':
		return battery_exit;
    635e:	85 e0       	ldi	r24, 0x05	; 5
    6360:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    6362:	8a ef       	ldi	r24, 0xFA	; 250
    6364:	92 e0       	ldi	r25, 0x02	; 2
    6366:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
			return  battery_idle;
    636a:	84 e0       	ldi	r24, 0x04	; 4
    636c:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
		return batteryLow;
    636e:	81 e0       	ldi	r24, 0x01	; 1
			return  battery_idle;
		}
		break;
		
	}
    6370:	08 95       	ret

00006372 <factory_mode>:
#include "appBattery.h"

//---------- main routine for factory mode ----------//
void factory_mode(void)
{
	configuration_flag = 0; 
    6372:	10 92 e9 22 	sts	0x22E9, r1
	reset_option_flag = 0;
    6376:	10 92 b3 22 	sts	0x22B3, r1
	config_waiting_input = 0;
    637a:	10 92 15 23 	sts	0x2315, r1
	flag = 0;
    637e:	10 92 af 22 	sts	0x22AF, r1
	count_usart = 0;
    6382:	10 92 d3 22 	sts	0x22D3, r1
	usart_state = Usart_start;
    6386:	10 92 42 23 	sts	0x2342, r1
	factory_state = factory_startup_message;
    638a:	10 92 69 23 	sts	0x2369, r1
	factory_command = groupID_command;
    638e:	10 92 ae 22 	sts	0x22AE, r1
	config_state = config_startup_message;
    6392:	10 92 b0 22 	sts	0x22B0, r1
	reset_state = reset_startup_message;
    6396:	10 92 40 23 	sts	0x2340, r1
	config_command = groupID_config;
    639a:	10 92 71 23 	sts	0x2371, r1
	button = button1;
    639e:	10 92 b1 22 	sts	0x22B1, r1
	option_select = option_message;
    63a2:	89 e0       	ldi	r24, 0x09	; 9
    63a4:	80 93 c5 22 	sts	0x22C5, r24
	battery_option_flag = 0;
    63a8:	10 92 b2 22 	sts	0x22B2, r1
	battery_state = battery_startup_message;
    63ac:	10 92 6b 23 	sts	0x236B, r1
    63b0:	e0 ef       	ldi	r30, 0xF0	; 240
    63b2:	f2 e2       	ldi	r31, 0x22	; 34
    63b4:	8d ef       	ldi	r24, 0xFD	; 253
    63b6:	92 e2       	ldi	r25, 0x22	; 34
	
	for (uint8_t i=0; i<max_command_length; i++)
	{
		commamd[i] = 0;
    63b8:	11 92       	st	Z+, r1
	button = button1;
	option_select = option_message;
	battery_option_flag = 0;
	battery_state = battery_startup_message;
	
	for (uint8_t i=0; i<max_command_length; i++)
    63ba:	e8 17       	cp	r30, r24
    63bc:	f9 07       	cpc	r31, r25
    63be:	e1 f7       	brne	.-8      	; 0x63b8 <factory_mode+0x46>
	}


	while (1)
	{
		if(flag == 1)
    63c0:	80 91 af 22 	lds	r24, 0x22AF
    63c4:	81 30       	cpi	r24, 0x01	; 1
    63c6:	f1 f4       	brne	.+60     	; 0x6404 <factory_mode+0x92>
		{
			if(configuration_flag == 1)
    63c8:	80 91 e9 22 	lds	r24, 0x22E9
    63cc:	81 30       	cpi	r24, 0x01	; 1
    63ce:	29 f4       	brne	.+10     	; 0x63da <factory_mode+0x68>
				config_state = configSelect();
    63d0:	0e 94 25 28 	call	0x504a	; 0x504a <configSelect>
    63d4:	80 93 b0 22 	sts	0x22B0, r24
    63d8:	15 c0       	rjmp	.+42     	; 0x6404 <factory_mode+0x92>
			else if(reset_option_flag == 1)
    63da:	80 91 b3 22 	lds	r24, 0x22B3
    63de:	81 30       	cpi	r24, 0x01	; 1
    63e0:	29 f4       	brne	.+10     	; 0x63ec <factory_mode+0x7a>
				reset_state = resetSelect();
    63e2:	0e 94 3a 29 	call	0x5274	; 0x5274 <resetSelect>
    63e6:	80 93 40 23 	sts	0x2340, r24
    63ea:	0c c0       	rjmp	.+24     	; 0x6404 <factory_mode+0x92>
			else if(battery_option_flag == 1)
    63ec:	80 91 b2 22 	lds	r24, 0x22B2
    63f0:	81 30       	cpi	r24, 0x01	; 1
    63f2:	21 f4       	brne	.+8      	; 0x63fc <factory_mode+0x8a>
				battery_state = batterySelect();
    63f4:	a1 df       	rcall	.-190    	; 0x6338 <batterySelect>
    63f6:	80 93 6b 23 	sts	0x236B, r24
    63fa:	04 c0       	rjmp	.+8      	; 0x6404 <factory_mode+0x92>
			else option_select = optionSelect();
    63fc:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <optionSelect>
    6400:	80 93 c5 22 	sts	0x22C5, r24
		}
		
		switch(option_select)
    6404:	e0 91 c5 22 	lds	r30, 0x22C5
    6408:	8e 2f       	mov	r24, r30
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	fc 01       	movw	r30, r24
    640e:	31 97       	sbiw	r30, 0x01	; 1
    6410:	e9 30       	cpi	r30, 0x09	; 9
    6412:	f1 05       	cpc	r31, r1
    6414:	a8 f6       	brcc	.-86     	; 0x63c0 <factory_mode+0x4e>
    6416:	88 27       	eor	r24, r24
    6418:	e2 58       	subi	r30, 0x82	; 130
    641a:	fe 4f       	sbci	r31, 0xFE	; 254
    641c:	8f 4f       	sbci	r24, 0xFF	; 255
    641e:	0c 94 7c 4d 	jmp	0x9af8	; 0x9af8 <__tablejump2__>
		{
			case config:
				pneConfiguration();
    6422:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <pneConfiguration>
			break;
    6426:	cc cf       	rjmp	.-104    	; 0x63c0 <factory_mode+0x4e>
			
			case display_info:
				pneDisplayInfo();
    6428:	7f dd       	rcall	.-1282   	; 0x5f28 <pneDisplayInfo>
			break;
    642a:	ca cf       	rjmp	.-108    	; 0x63c0 <factory_mode+0x4e>
			
			case reset_flag:
				resetFlag();
    642c:	47 de       	rcall	.-882    	; 0x60bc <resetFlag>
			break;
    642e:	c8 cf       	rjmp	.-112    	; 0x63c0 <factory_mode+0x4e>
			
			case option_message:
			{
				//Welcome Message	
				send_usart_char("\r\n\r\n\r\nPNEWELS ");
    6430:	81 e4       	ldi	r24, 0x41	; 65
    6432:	97 e0       	ldi	r25, 0x07	; 7
    6434:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
				send_usart_char(version);
    6438:	80 e5       	ldi	r24, 0x50	; 80
    643a:	97 e0       	ldi	r25, 0x07	; 7
    643c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
				send_usart_char(" ");
    6440:	8b ed       	ldi	r24, 0xDB	; 219
    6442:	94 e0       	ldi	r25, 0x04	; 4
    6444:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
				send_usart_char(version_date);
    6448:	8f e5       	ldi	r24, 0x5F	; 95
    644a:	97 e0       	ldi	r25, 0x07	; 7
    644c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
				send_usart_char("\r\n");
    6450:	89 e4       	ldi	r24, 0x49	; 73
    6452:	96 e0       	ldi	r25, 0x06	; 6
    6454:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
				send_usart_char("1. Configuration\r\n2. Display info\r\n3. Test mode\r\n4. Reset device flag\r\n");
    6458:	84 e6       	ldi	r24, 0x64	; 100
    645a:	97 e0       	ldi	r25, 0x07	; 7
    645c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
				send_usart_char("5. Dump Memory\r\n6. Dump Log Files\r\n7. Format Memory\r\n8. Battery Configuration\r\n");
    6460:	8c ea       	ldi	r24, 0xAC	; 172
    6462:	97 e0       	ldi	r25, 0x07	; 7
    6464:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <send_usart_char>
				option_select = idle;
    6468:	10 92 c5 22 	sts	0x22C5, r1
			}
			break;
    646c:	a9 cf       	rjmp	.-174    	; 0x63c0 <factory_mode+0x4e>
			
			case test_mode:
				testMode();
    646e:	0e 94 5d 29 	call	0x52ba	; 0x52ba <testMode>
			break;
    6472:	a6 cf       	rjmp	.-180    	; 0x63c0 <factory_mode+0x4e>
			
			case dump_memory:
				dump_eeprom();
    6474:	27 dd       	rcall	.-1458   	; 0x5ec4 <dump_eeprom>
			break;
    6476:	a4 cf       	rjmp	.-184    	; 0x63c0 <factory_mode+0x4e>
			
			case dump_log:
				dump_log_file();
    6478:	a5 de       	rcall	.-694    	; 0x61c4 <dump_log_file>
			break;
    647a:	a2 cf       	rjmp	.-188    	; 0x63c0 <factory_mode+0x4e>

			case wipe_memory:
				erase_memory();
    647c:	d1 de       	rcall	.-606    	; 0x6220 <erase_memory>
			break;
    647e:	a0 cf       	rjmp	.-192    	; 0x63c0 <factory_mode+0x4e>
			
			case battery_set:
				battery_config();
    6480:	e3 de       	rcall	.-570    	; 0x6248 <battery_config>
			break;	
    6482:	9e cf       	rjmp	.-196    	; 0x63c0 <factory_mode+0x4e>

00006484 <packet_data>:
void charge_to_rf()
{
	uint16_t address = memory_address_incr - 11;
	eeprom_to_rf(address);
	address = memory_address_incr - 22;
	eeprom_to_rf(address);
    6484:	2f 92       	push	r2
    6486:	3f 92       	push	r3
    6488:	4f 92       	push	r4
    648a:	5f 92       	push	r5
    648c:	6f 92       	push	r6
    648e:	7f 92       	push	r7
    6490:	8f 92       	push	r8
    6492:	9f 92       	push	r9
    6494:	af 92       	push	r10
    6496:	bf 92       	push	r11
    6498:	cf 92       	push	r12
    649a:	df 92       	push	r13
    649c:	ef 92       	push	r14
    649e:	ff 92       	push	r15
    64a0:	0f 93       	push	r16
    64a2:	1f 93       	push	r17
    64a4:	cf 93       	push	r28
    64a6:	df 93       	push	r29
    64a8:	cd b7       	in	r28, 0x3d	; 61
    64aa:	de b7       	in	r29, 0x3e	; 62
    64ac:	28 97       	sbiw	r28, 0x08	; 8
    64ae:	0f b6       	in	r0, 0x3f	; 63
    64b0:	f8 94       	cli
    64b2:	de bf       	out	0x3e, r29	; 62
    64b4:	0f be       	out	0x3f, r0	; 63
    64b6:	cd bf       	out	0x3d, r28	; 61
    64b8:	ee e6       	ldi	r30, 0x6E	; 110
    64ba:	f2 e2       	ldi	r31, 0x22	; 34
    64bc:	c7 8c       	ldd	r12, Z+31	; 0x1f
    64be:	20 e8       	ldi	r18, 0x80	; 128
    64c0:	c2 9e       	mul	r12, r18
    64c2:	60 01       	movw	r12, r0
    64c4:	11 24       	eor	r1, r1
    64c6:	d4 80       	ldd	r13, Z+4	; 0x04
    64c8:	8d 2d       	mov	r24, r13
    64ca:	81 70       	andi	r24, 0x01	; 1
    64cc:	c8 2a       	or	r12, r24
    64ce:	d3 80       	ldd	r13, Z+3	; 0x03
    64d0:	d0 fa       	bst	r13, 0
    64d2:	ee 24       	eor	r14, r14
    64d4:	e0 f8       	bld	r14, 0
    64d6:	f1 2c       	mov	r15, r1
    64d8:	ee 0c       	add	r14, r14
    64da:	ff 1c       	adc	r15, r15
    64dc:	ec 28       	or	r14, r12
    64de:	f7 80       	ldd	r15, Z+7	; 0x07
    64e0:	0f 2d       	mov	r16, r15
    64e2:	01 70       	andi	r16, 0x01	; 1
    64e4:	10 e0       	ldi	r17, 0x00	; 0
    64e6:	00 0f       	add	r16, r16
    64e8:	11 1f       	adc	r17, r17
    64ea:	00 0f       	add	r16, r16
    64ec:	11 1f       	adc	r17, r17
    64ee:	e0 2a       	or	r14, r16
    64f0:	10 81       	ld	r17, Z
    64f2:	11 70       	andi	r17, 0x01	; 1
    64f4:	1f 83       	std	Y+7, r17	; 0x07
    64f6:	18 86       	std	Y+8, r1	; 0x08
    64f8:	0f 81       	ldd	r16, Y+7	; 0x07
    64fa:	18 85       	ldd	r17, Y+8	; 0x08
    64fc:	00 0f       	add	r16, r16
    64fe:	11 1f       	adc	r17, r17
    6500:	00 0f       	add	r16, r16
    6502:	11 1f       	adc	r17, r17
    6504:	00 0f       	add	r16, r16
    6506:	11 1f       	adc	r17, r17
    6508:	e0 2a       	or	r14, r16
    650a:	15 81       	ldd	r17, Z+5	; 0x05
    650c:	a1 2f       	mov	r26, r17
    650e:	a1 70       	andi	r26, 0x01	; 1
    6510:	b0 e0       	ldi	r27, 0x00	; 0
    6512:	a2 95       	swap	r26
    6514:	b2 95       	swap	r27
    6516:	b0 7f       	andi	r27, 0xF0	; 240
    6518:	ba 27       	eor	r27, r26
    651a:	a0 7f       	andi	r26, 0xF0	; 240
    651c:	ba 27       	eor	r27, r26
    651e:	ea 2a       	or	r14, r26
    6520:	a0 89       	ldd	r26, Z+16	; 0x10
    6522:	6a 2f       	mov	r22, r26
    6524:	61 70       	andi	r22, 0x01	; 1
    6526:	70 e0       	ldi	r23, 0x00	; 0
    6528:	66 0f       	add	r22, r22
    652a:	77 1f       	adc	r23, r23
    652c:	62 95       	swap	r22
    652e:	72 95       	swap	r23
    6530:	70 7f       	andi	r23, 0xF0	; 240
    6532:	76 27       	eor	r23, r22
    6534:	60 7f       	andi	r22, 0xF0	; 240
    6536:	76 27       	eor	r23, r22
    6538:	6e 29       	or	r22, r14
    653a:	70 85       	ldd	r23, Z+8	; 0x08
    653c:	47 2f       	mov	r20, r23
    653e:	41 70       	andi	r20, 0x01	; 1
    6540:	50 e0       	ldi	r21, 0x00	; 0
    6542:	00 24       	eor	r0, r0
    6544:	56 95       	lsr	r21
    6546:	47 95       	ror	r20
    6548:	07 94       	ror	r0
    654a:	56 95       	lsr	r21
    654c:	47 95       	ror	r20
    654e:	07 94       	ror	r0
    6550:	54 2f       	mov	r21, r20
    6552:	40 2d       	mov	r20, r0
    6554:	46 2b       	or	r20, r22
    6556:	40 93 62 22 	sts	0x2262, r20
    655a:	47 a1       	ldd	r20, Z+39	; 0x27
    655c:	90 e8       	ldi	r25, 0x80	; 128
    655e:	49 9f       	mul	r20, r25
    6560:	a0 01       	movw	r20, r0
    6562:	11 24       	eor	r1, r1
    6564:	52 89       	ldd	r21, Z+18	; 0x12
    6566:	57 70       	andi	r21, 0x07	; 7
    6568:	45 2b       	or	r20, r21
    656a:	53 85       	ldd	r21, Z+11	; 0x0b
    656c:	25 2f       	mov	r18, r21
    656e:	21 70       	andi	r18, 0x01	; 1
    6570:	30 e0       	ldi	r19, 0x00	; 0
    6572:	22 0f       	add	r18, r18
    6574:	33 1f       	adc	r19, r19
    6576:	22 0f       	add	r18, r18
    6578:	33 1f       	adc	r19, r19
    657a:	22 0f       	add	r18, r18
    657c:	33 1f       	adc	r19, r19
    657e:	24 2b       	or	r18, r20
    6580:	36 85       	ldd	r19, Z+14	; 0x0e
    6582:	83 2f       	mov	r24, r19
    6584:	81 70       	andi	r24, 0x01	; 1
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	82 95       	swap	r24
    658a:	92 95       	swap	r25
    658c:	90 7f       	andi	r25, 0xF0	; 240
    658e:	98 27       	eor	r25, r24
    6590:	80 7f       	andi	r24, 0xF0	; 240
    6592:	98 27       	eor	r25, r24
    6594:	82 2b       	or	r24, r18
    6596:	95 a1       	ldd	r25, Z+37	; 0x25
    6598:	90 fb       	bst	r25, 0
    659a:	aa 24       	eor	r10, r10
    659c:	a0 f8       	bld	r10, 0
    659e:	b1 2c       	mov	r11, r1
    65a0:	aa 0c       	add	r10, r10
    65a2:	bb 1c       	adc	r11, r11
    65a4:	aa 0c       	add	r10, r10
    65a6:	bb 1c       	adc	r11, r11
    65a8:	aa 0c       	add	r10, r10
    65aa:	bb 1c       	adc	r11, r11
    65ac:	aa 0c       	add	r10, r10
    65ae:	bb 1c       	adc	r11, r11
    65b0:	aa 0c       	add	r10, r10
    65b2:	bb 1c       	adc	r11, r11
    65b4:	a8 2a       	or	r10, r24
    65b6:	86 a1       	ldd	r24, Z+38	; 0x26
    65b8:	80 fb       	bst	r24, 0
    65ba:	88 24       	eor	r8, r8
    65bc:	80 f8       	bld	r8, 0
    65be:	91 2c       	mov	r9, r1
    65c0:	00 24       	eor	r0, r0
    65c2:	96 94       	lsr	r9
    65c4:	87 94       	ror	r8
    65c6:	07 94       	ror	r0
    65c8:	96 94       	lsr	r9
    65ca:	87 94       	ror	r8
    65cc:	07 94       	ror	r0
    65ce:	98 2c       	mov	r9, r8
    65d0:	80 2c       	mov	r8, r0
    65d2:	8a 28       	or	r8, r10
    65d4:	80 92 61 22 	sts	0x2261, r8
    65d8:	81 a1       	ldd	r24, Z+33	; 0x21
    65da:	80 fb       	bst	r24, 0
    65dc:	66 24       	eor	r6, r6
    65de:	60 f8       	bld	r6, 0
    65e0:	71 2c       	mov	r7, r1
    65e2:	66 0c       	add	r6, r6
    65e4:	77 1c       	adc	r7, r7
    65e6:	82 a1       	ldd	r24, Z+34	; 0x22
    65e8:	80 fb       	bst	r24, 0
    65ea:	44 24       	eor	r4, r4
    65ec:	40 f8       	bld	r4, 0
    65ee:	51 2c       	mov	r5, r1
    65f0:	44 0c       	add	r4, r4
    65f2:	55 1c       	adc	r5, r5
    65f4:	44 0c       	add	r4, r4
    65f6:	55 1c       	adc	r5, r5
    65f8:	46 28       	or	r4, r6
    65fa:	80 a1       	ldd	r24, Z+32	; 0x20
    65fc:	81 70       	andi	r24, 0x01	; 1
    65fe:	48 2a       	or	r4, r24
    6600:	83 a1       	ldd	r24, Z+35	; 0x23
    6602:	80 fb       	bst	r24, 0
    6604:	22 24       	eor	r2, r2
    6606:	20 f8       	bld	r2, 0
    6608:	31 2c       	mov	r3, r1
    660a:	22 0c       	add	r2, r2
    660c:	33 1c       	adc	r3, r3
    660e:	22 0c       	add	r2, r2
    6610:	33 1c       	adc	r3, r3
    6612:	22 0c       	add	r2, r2
    6614:	33 1c       	adc	r3, r3
    6616:	24 28       	or	r2, r4
    6618:	84 a1       	ldd	r24, Z+36	; 0x24
    661a:	81 70       	andi	r24, 0x01	; 1
    661c:	89 83       	std	Y+1, r24	; 0x01
    661e:	1a 82       	std	Y+2, r1	; 0x02
    6620:	49 81       	ldd	r20, Y+1	; 0x01
    6622:	5a 81       	ldd	r21, Y+2	; 0x02
    6624:	42 95       	swap	r20
    6626:	52 95       	swap	r21
    6628:	50 7f       	andi	r21, 0xF0	; 240
    662a:	54 27       	eor	r21, r20
    662c:	40 7f       	andi	r20, 0xF0	; 240
    662e:	54 27       	eor	r21, r20
    6630:	82 2d       	mov	r24, r2
    6632:	84 2b       	or	r24, r20
    6634:	91 85       	ldd	r25, Z+9	; 0x09
    6636:	91 70       	andi	r25, 0x01	; 1
    6638:	9b 83       	std	Y+3, r25	; 0x03
    663a:	1c 82       	std	Y+4, r1	; 0x04
    663c:	2b 81       	ldd	r18, Y+3	; 0x03
    663e:	3c 81       	ldd	r19, Y+4	; 0x04
    6640:	22 0f       	add	r18, r18
    6642:	33 1f       	adc	r19, r19
    6644:	22 95       	swap	r18
    6646:	32 95       	swap	r19
    6648:	30 7f       	andi	r19, 0xF0	; 240
    664a:	32 27       	eor	r19, r18
    664c:	20 7f       	andi	r18, 0xF0	; 240
    664e:	32 27       	eor	r19, r18
    6650:	28 2b       	or	r18, r24
    6652:	82 85       	ldd	r24, Z+10	; 0x0a
    6654:	81 70       	andi	r24, 0x01	; 1
    6656:	8d 83       	std	Y+5, r24	; 0x05
    6658:	1e 82       	std	Y+6, r1	; 0x06
    665a:	8d 81       	ldd	r24, Y+5	; 0x05
    665c:	9e 81       	ldd	r25, Y+6	; 0x06
    665e:	00 24       	eor	r0, r0
    6660:	96 95       	lsr	r25
    6662:	87 95       	ror	r24
    6664:	07 94       	ror	r0
    6666:	96 95       	lsr	r25
    6668:	87 95       	ror	r24
    666a:	07 94       	ror	r0
    666c:	98 2f       	mov	r25, r24
    666e:	80 2d       	mov	r24, r0
    6670:	82 2b       	or	r24, r18
    6672:	80 93 60 22 	sts	0x2260, r24
    6676:	28 96       	adiw	r28, 0x08	; 8
    6678:	0f b6       	in	r0, 0x3f	; 63
    667a:	f8 94       	cli
    667c:	de bf       	out	0x3e, r29	; 62
    667e:	0f be       	out	0x3f, r0	; 63
    6680:	cd bf       	out	0x3d, r28	; 61
    6682:	df 91       	pop	r29
    6684:	cf 91       	pop	r28
    6686:	1f 91       	pop	r17
    6688:	0f 91       	pop	r16
    668a:	ff 90       	pop	r15
    668c:	ef 90       	pop	r14
    668e:	df 90       	pop	r13
    6690:	cf 90       	pop	r12
    6692:	bf 90       	pop	r11
    6694:	af 90       	pop	r10
    6696:	9f 90       	pop	r9
    6698:	8f 90       	pop	r8
    669a:	7f 90       	pop	r7
    669c:	6f 90       	pop	r6
    669e:	5f 90       	pop	r5
    66a0:	4f 90       	pop	r4
    66a2:	3f 90       	pop	r3
    66a4:	2f 90       	pop	r2
    66a6:	08 95       	ret

000066a8 <reboot_to_rf>:
    66a8:	ff cf       	rjmp	.-2      	; 0x66a8 <reboot_to_rf>

000066aa <WPS_pairing>:
    66aa:	cf 93       	push	r28
    66ac:	df 93       	push	r29
    66ae:	ec 01       	movw	r28, r24
    66b0:	68 81       	ld	r22, Y
    66b2:	8d ef       	ldi	r24, 0xFD	; 253
    66b4:	9f e0       	ldi	r25, 0x0F	; 15
    66b6:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
    66ba:	69 81       	ldd	r22, Y+1	; 0x01
    66bc:	8c ef       	ldi	r24, 0xFC	; 252
    66be:	9f e0       	ldi	r25, 0x0F	; 15
    66c0:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
    66c4:	6a 81       	ldd	r22, Y+2	; 0x02
    66c6:	8f ef       	ldi	r24, 0xFF	; 255
    66c8:	9f e0       	ldi	r25, 0x0F	; 15
    66ca:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
    66ce:	6b 81       	ldd	r22, Y+3	; 0x03
    66d0:	8e ef       	ldi	r24, 0xFE	; 254
    66d2:	9f e0       	ldi	r25, 0x0F	; 15
    66d4:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
    66d8:	6c 81       	ldd	r22, Y+4	; 0x04
    66da:	81 e0       	ldi	r24, 0x01	; 1
    66dc:	90 e1       	ldi	r25, 0x10	; 16
    66de:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
    66e2:	6d 81       	ldd	r22, Y+5	; 0x05
    66e4:	80 e0       	ldi	r24, 0x00	; 0
    66e6:	90 e1       	ldi	r25, 0x10	; 16
    66e8:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
    66ec:	df 91       	pop	r29
    66ee:	cf 91       	pop	r28
    66f0:	08 95       	ret

000066f2 <send_to_rf>:
    66f2:	af 92       	push	r10
    66f4:	bf 92       	push	r11
    66f6:	cf 92       	push	r12
    66f8:	df 92       	push	r13
    66fa:	ef 92       	push	r14
    66fc:	ff 92       	push	r15
    66fe:	0f 93       	push	r16
    6700:	1f 93       	push	r17
    6702:	cf 93       	push	r28
    6704:	df 93       	push	r29
    6706:	6c 01       	movw	r12, r24
    6708:	f6 2e       	mov	r15, r22
    670a:	5a 01       	movw	r10, r20
    670c:	0e 94 4a 03 	call	0x694	; 0x694 <APP_NwkGetBuffer>
    6710:	ec 01       	movw	r28, r24
    6712:	00 97       	sbiw	r24, 0x00	; 0
    6714:	09 f4       	brne	.+2      	; 0x6718 <send_to_rf+0x26>
    6716:	86 c0       	rjmp	.+268    	; 0x6824 <send_to_rf+0x132>
    6718:	80 58       	subi	r24, 0x80	; 128
    671a:	9f 4f       	sbci	r25, 0xFF	; 255
    671c:	dc 01       	movw	r26, r24
    671e:	1c 92       	st	X, r1
    6720:	8e 01       	movw	r16, r28
    6722:	0d 5e       	subi	r16, 0xED	; 237
    6724:	1f 4f       	sbci	r17, 0xFF	; 255
    6726:	28 e0       	ldi	r18, 0x08	; 8
    6728:	f5 01       	movw	r30, r10
    672a:	d8 01       	movw	r26, r16
    672c:	01 90       	ld	r0, Z+
    672e:	0d 92       	st	X+, r0
    6730:	2a 95       	dec	r18
    6732:	e1 f7       	brne	.-8      	; 0x672c <send_to_rf+0x3a>
    6734:	28 e0       	ldi	r18, 0x08	; 8
    6736:	fc 01       	movw	r30, r24
    6738:	20 83       	st	Z, r18
    673a:	ff 20       	and	r15, r15
    673c:	89 f1       	breq	.+98     	; 0x67a0 <send_to_rf+0xae>
    673e:	56 01       	movw	r10, r12
    6740:	6f ef       	ldi	r22, 0xFF	; 255
    6742:	6f 0d       	add	r22, r15
    6744:	70 e0       	ldi	r23, 0x00	; 0
    6746:	6f 5f       	subi	r22, 0xFF	; 255
    6748:	7f 4f       	sbci	r23, 0xFF	; 255
    674a:	6c 0d       	add	r22, r12
    674c:	7d 1d       	adc	r23, r13
    674e:	fc 01       	movw	r30, r24
    6750:	0f 2e       	mov	r0, r31
    6752:	fb e5       	ldi	r31, 0x5B	; 91
    6754:	df 2e       	mov	r13, r31
    6756:	f0 2d       	mov	r31, r0
    6758:	0f 2e       	mov	r0, r31
    675a:	fd e5       	ldi	r31, 0x5D	; 93
    675c:	ef 2e       	mov	r14, r31
    675e:	f0 2d       	mov	r31, r0
    6760:	90 81       	ld	r25, Z
    6762:	9e 01       	movw	r18, r28
    6764:	29 0f       	add	r18, r25
    6766:	31 1d       	adc	r19, r1
    6768:	d9 01       	movw	r26, r18
    676a:	53 96       	adiw	r26, 0x13	; 19
    676c:	dc 92       	st	X, r13
    676e:	22 e0       	ldi	r18, 0x02	; 2
    6770:	29 0f       	add	r18, r25
    6772:	20 83       	st	Z, r18
    6774:	d5 01       	movw	r26, r10
    6776:	3d 91       	ld	r19, X+
    6778:	5d 01       	movw	r10, r26
    677a:	81 e0       	ldi	r24, 0x01	; 1
    677c:	89 0f       	add	r24, r25
    677e:	ae 01       	movw	r20, r28
    6780:	48 0f       	add	r20, r24
    6782:	51 1d       	adc	r21, r1
    6784:	da 01       	movw	r26, r20
    6786:	53 96       	adiw	r26, 0x13	; 19
    6788:	3c 93       	st	X, r19
    678a:	9d 5f       	subi	r25, 0xFD	; 253
    678c:	90 83       	st	Z, r25
    678e:	ce 01       	movw	r24, r28
    6790:	82 0f       	add	r24, r18
    6792:	91 1d       	adc	r25, r1
    6794:	dc 01       	movw	r26, r24
    6796:	53 96       	adiw	r26, 0x13	; 19
    6798:	ec 92       	st	X, r14
    679a:	a6 16       	cp	r10, r22
    679c:	b7 06       	cpc	r11, r23
    679e:	01 f7       	brne	.-64     	; 0x6760 <send_to_rf+0x6e>
    67a0:	ad d4       	rcall	.+2394   	; 0x70fc <crcInit>
    67a2:	6e 01       	movw	r12, r28
    67a4:	b0 e8       	ldi	r27, 0x80	; 128
    67a6:	cb 0e       	add	r12, r27
    67a8:	d1 1c       	adc	r13, r1
    67aa:	f6 01       	movw	r30, r12
    67ac:	b0 80       	ld	r11, Z
    67ae:	81 e0       	ldi	r24, 0x01	; 1
    67b0:	8b 0d       	add	r24, r11
    67b2:	80 83       	st	Z, r24
    67b4:	8f 2d       	mov	r24, r15
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	7c 01       	movw	r14, r24
    67ba:	f8 e0       	ldi	r31, 0x08	; 8
    67bc:	ef 0e       	add	r14, r31
    67be:	f1 1c       	adc	r15, r1
    67c0:	88 0f       	add	r24, r24
    67c2:	99 1f       	adc	r25, r25
    67c4:	e8 0e       	add	r14, r24
    67c6:	f9 1e       	adc	r15, r25
    67c8:	b7 01       	movw	r22, r14
    67ca:	c8 01       	movw	r24, r16
    67cc:	b4 d4       	rcall	.+2408   	; 0x7136 <crcFast>
    67ce:	fe 01       	movw	r30, r28
    67d0:	eb 0d       	add	r30, r11
    67d2:	f1 1d       	adc	r31, r1
    67d4:	93 8b       	std	Z+19, r25	; 0x13
    67d6:	d6 01       	movw	r26, r12
    67d8:	bc 90       	ld	r11, X
    67da:	81 e0       	ldi	r24, 0x01	; 1
    67dc:	8b 0d       	add	r24, r11
    67de:	8c 93       	st	X, r24
    67e0:	b7 01       	movw	r22, r14
    67e2:	c8 01       	movw	r24, r16
    67e4:	a8 d4       	rcall	.+2384   	; 0x7136 <crcFast>
    67e6:	fe 01       	movw	r30, r28
    67e8:	eb 0d       	add	r30, r11
    67ea:	f1 1d       	adc	r31, r1
    67ec:	83 8b       	std	Z+19, r24	; 0x13
    67ee:	f6 01       	movw	r30, r12
    67f0:	60 81       	ld	r22, Z
    67f2:	70 e0       	ldi	r23, 0x00	; 0
    67f4:	26 e0       	ldi	r18, 0x06	; 6
    67f6:	30 e0       	ldi	r19, 0x00	; 0
    67f8:	48 e2       	ldi	r20, 0x28	; 40
    67fa:	52 e0       	ldi	r21, 0x02	; 2
    67fc:	c8 01       	movw	r24, r16
    67fe:	0e 94 18 4d 	call	0x9a30	; 0x9a30 <pnesign>
    6802:	d6 01       	movw	r26, r12
    6804:	2c 91       	ld	r18, X
    6806:	fe 01       	movw	r30, r28
    6808:	e2 0f       	add	r30, r18
    680a:	f1 1d       	adc	r31, r1
    680c:	93 8b       	std	Z+19, r25	; 0x13
    680e:	92 e0       	ldi	r25, 0x02	; 2
    6810:	92 0f       	add	r25, r18
    6812:	9c 93       	st	X, r25
    6814:	2f 5f       	subi	r18, 0xFF	; 255
    6816:	fe 01       	movw	r30, r28
    6818:	e2 0f       	add	r30, r18
    681a:	f1 1d       	adc	r31, r1
    681c:	83 8b       	std	Z+19, r24	; 0x13
    681e:	ce 01       	movw	r24, r28
    6820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <APP_NwkSendBuffer>
    6824:	df 91       	pop	r29
    6826:	cf 91       	pop	r28
    6828:	1f 91       	pop	r17
    682a:	0f 91       	pop	r16
    682c:	ff 90       	pop	r15
    682e:	ef 90       	pop	r14
    6830:	df 90       	pop	r13
    6832:	cf 90       	pop	r12
    6834:	bf 90       	pop	r11
    6836:	af 90       	pop	r10
    6838:	08 95       	ret

0000683a <status_send_to_rf>:
    683a:	cf 93       	push	r28
    683c:	df 93       	push	r29
    683e:	22 de       	rcall	.-956    	; 0x6484 <packet_data>
    6840:	cc ef       	ldi	r28, 0xFC	; 252
    6842:	d1 e2       	ldi	r29, 0x21	; 33
    6844:	80 91 62 22 	lds	r24, 0x2262
    6848:	88 83       	st	Y, r24
    684a:	80 91 61 22 	lds	r24, 0x2261
    684e:	89 83       	std	Y+1, r24	; 0x01
    6850:	80 91 60 22 	lds	r24, 0x2260
    6854:	8a 83       	std	Y+2, r24	; 0x02
    6856:	ee e6       	ldi	r30, 0x6E	; 110
    6858:	f2 e2       	ldi	r31, 0x22	; 34
    685a:	86 81       	ldd	r24, Z+6	; 0x06
    685c:	8b 83       	std	Y+3, r24	; 0x03
    685e:	81 81       	ldd	r24, Z+1	; 0x01
    6860:	8c 83       	std	Y+4, r24	; 0x04
    6862:	82 81       	ldd	r24, Z+2	; 0x02
    6864:	8d 83       	std	Y+5, r24	; 0x05
    6866:	9f d3       	rcall	.+1854   	; 0x6fa6 <get_timestamp>
    6868:	9e 83       	std	Y+6, r25	; 0x06
    686a:	9d d3       	rcall	.+1850   	; 0x6fa6 <get_timestamp>
    686c:	8f 83       	std	Y+7, r24	; 0x07
    686e:	9b d3       	rcall	.+1846   	; 0x6fa6 <get_timestamp>
    6870:	78 87       	std	Y+8, r23	; 0x08
    6872:	99 d3       	rcall	.+1842   	; 0x6fa6 <get_timestamp>
    6874:	69 87       	std	Y+9, r22	; 0x09
    6876:	44 e5       	ldi	r20, 0x54	; 84
    6878:	58 e0       	ldi	r21, 0x08	; 8
    687a:	6a e0       	ldi	r22, 0x0A	; 10
    687c:	ce 01       	movw	r24, r28
    687e:	39 df       	rcall	.-398    	; 0x66f2 <send_to_rf>
    6880:	df 91       	pop	r29
    6882:	cf 91       	pop	r28
    6884:	08 95       	ret

00006886 <emergency_on_to_rf>:
    6886:	81 e0       	ldi	r24, 0x01	; 1
    6888:	80 93 76 22 	sts	0x2276, r24
    688c:	46 e6       	ldi	r20, 0x66	; 102
    688e:	58 e0       	ldi	r21, 0x08	; 8
    6890:	60 e0       	ldi	r22, 0x00	; 0
    6892:	8c ef       	ldi	r24, 0xFC	; 252
    6894:	91 e2       	ldi	r25, 0x21	; 33
    6896:	2d cf       	rjmp	.-422    	; 0x66f2 <send_to_rf>
    6898:	08 95       	ret

0000689a <emergency_off_to_rf>:
    689a:	10 92 76 22 	sts	0x2276, r1
    689e:	46 e6       	ldi	r20, 0x66	; 102
    68a0:	58 e0       	ldi	r21, 0x08	; 8
    68a2:	60 e0       	ldi	r22, 0x00	; 0
    68a4:	8c ef       	ldi	r24, 0xFC	; 252
    68a6:	91 e2       	ldi	r25, 0x21	; 33
    68a8:	24 cf       	rjmp	.-440    	; 0x66f2 <send_to_rf>
    68aa:	08 95       	ret

000068ac <eeprom_to_rf>:
    68ac:	ef 92       	push	r14
    68ae:	ff 92       	push	r15
    68b0:	0f 93       	push	r16
    68b2:	1f 93       	push	r17
    68b4:	cf 93       	push	r28
    68b6:	df 93       	push	r29
    68b8:	ec 01       	movw	r28, r24
    68ba:	0c ef       	ldi	r16, 0xFC	; 252
    68bc:	11 e2       	ldi	r17, 0x21	; 33
    68be:	7c 01       	movw	r14, r24
    68c0:	8b e0       	ldi	r24, 0x0B	; 11
    68c2:	e8 0e       	add	r14, r24
    68c4:	f1 1c       	adc	r15, r1
    68c6:	2d 2f       	mov	r18, r29
    68c8:	4c 2f       	mov	r20, r28
    68ca:	65 e4       	ldi	r22, 0x45	; 69
    68cc:	8f ea       	ldi	r24, 0xAF	; 175
    68ce:	0e 94 43 22 	call	0x4486	; 0x4486 <PNEWELSE2promRead>
    68d2:	f8 01       	movw	r30, r16
    68d4:	81 93       	st	Z+, r24
    68d6:	8f 01       	movw	r16, r30
    68d8:	21 96       	adiw	r28, 0x01	; 1
    68da:	8a e0       	ldi	r24, 0x0A	; 10
    68dc:	90 e0       	ldi	r25, 0x00	; 0
    68de:	0e 94 2b 21 	call	0x4256	; 0x4256 <pne_delayms>
    68e2:	ce 15       	cp	r28, r14
    68e4:	df 05       	cpc	r29, r15
    68e6:	79 f7       	brne	.-34     	; 0x68c6 <eeprom_to_rf+0x1a>
    68e8:	43 e5       	ldi	r20, 0x53	; 83
    68ea:	52 e0       	ldi	r21, 0x02	; 2
    68ec:	6b e0       	ldi	r22, 0x0B	; 11
    68ee:	8c ef       	ldi	r24, 0xFC	; 252
    68f0:	91 e2       	ldi	r25, 0x21	; 33
    68f2:	ff de       	rcall	.-514    	; 0x66f2 <send_to_rf>
    68f4:	df 91       	pop	r29
    68f6:	cf 91       	pop	r28
    68f8:	1f 91       	pop	r17
    68fa:	0f 91       	pop	r16
    68fc:	ff 90       	pop	r15
    68fe:	ef 90       	pop	r14
    6900:	08 95       	ret

00006902 <error_to_rf>:
	send_to_rf(data_to_rf, 11, "[rd rom]");
}

void error_to_rf(uint8_t alert_type)
{
	switch(alert_type)
    6902:	90 e0       	ldi	r25, 0x00	; 0
    6904:	8c 30       	cpi	r24, 0x0C	; 12
    6906:	91 05       	cpc	r25, r1
    6908:	08 f0       	brcs	.+2      	; 0x690c <error_to_rf+0xa>
    690a:	7d c0       	rjmp	.+250    	; 0x6a06 <error_to_rf+0x104>
    690c:	fc 01       	movw	r30, r24
    690e:	88 27       	eor	r24, r24
    6910:	e9 57       	subi	r30, 0x79	; 121
    6912:	fe 4f       	sbci	r31, 0xFE	; 254
    6914:	8f 4f       	sbci	r24, 0xFF	; 255
    6916:	0c 94 7c 4d 	jmp	0x9af8	; 0x9af8 <__tablejump2__>
	{
		case temperature_alert:
			data_to_rf[0] = temperature_alert;
    691a:	10 92 fc 21 	sts	0x21FC, r1
			send_to_rf(data_to_rf,1,"[error!]");
    691e:	4f e6       	ldi	r20, 0x6F	; 111
    6920:	58 e0       	ldi	r21, 0x08	; 8
    6922:	61 e0       	ldi	r22, 0x01	; 1
    6924:	8c ef       	ldi	r24, 0xFC	; 252
    6926:	91 e2       	ldi	r25, 0x21	; 33
    6928:	e4 ce       	rjmp	.-568    	; 0x66f2 <send_to_rf>
			break;
    692a:	08 95       	ret
			
		case battery_dead_alert:
			data_to_rf[0] = battery_dead_alert;
    692c:	81 e0       	ldi	r24, 0x01	; 1
    692e:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6932:	4f e6       	ldi	r20, 0x6F	; 111
    6934:	58 e0       	ldi	r21, 0x08	; 8
    6936:	61 e0       	ldi	r22, 0x01	; 1
    6938:	8c ef       	ldi	r24, 0xFC	; 252
    693a:	91 e2       	ldi	r25, 0x21	; 33
    693c:	da ce       	rjmp	.-588    	; 0x66f2 <send_to_rf>
			break;
    693e:	08 95       	ret
			
		case conflicted_command:
			data_to_rf[0] = conflicted_command;
    6940:	83 e0       	ldi	r24, 0x03	; 3
    6942:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6946:	4f e6       	ldi	r20, 0x6F	; 111
    6948:	58 e0       	ldi	r21, 0x08	; 8
    694a:	61 e0       	ldi	r22, 0x01	; 1
    694c:	8c ef       	ldi	r24, 0xFC	; 252
    694e:	91 e2       	ldi	r25, 0x21	; 33
    6950:	d0 ce       	rjmp	.-608    	; 0x66f2 <send_to_rf>
			break;
    6952:	08 95       	ret
		
		case battery_wrong_alert:
			data_to_rf[0] = battery_wrong_alert;
    6954:	82 e0       	ldi	r24, 0x02	; 2
    6956:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    695a:	4f e6       	ldi	r20, 0x6F	; 111
    695c:	58 e0       	ldi	r21, 0x08	; 8
    695e:	61 e0       	ldi	r22, 0x01	; 1
    6960:	8c ef       	ldi	r24, 0xFC	; 252
    6962:	91 e2       	ldi	r25, 0x21	; 33
    6964:	c6 ce       	rjmp	.-628    	; 0x66f2 <send_to_rf>
			break;
    6966:	08 95       	ret
			
		case read_eeprom_error:
			data_to_rf[0] = read_eeprom_error;
    6968:	84 e0       	ldi	r24, 0x04	; 4
    696a:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    696e:	4f e6       	ldi	r20, 0x6F	; 111
    6970:	58 e0       	ldi	r21, 0x08	; 8
    6972:	61 e0       	ldi	r22, 0x01	; 1
    6974:	8c ef       	ldi	r24, 0xFC	; 252
    6976:	91 e2       	ldi	r25, 0x21	; 33
    6978:	bc ce       	rjmp	.-648    	; 0x66f2 <send_to_rf>
			break;
    697a:	08 95       	ret
			
		case hardware_error:
			data_to_rf[0] = hardware_error;
    697c:	85 e0       	ldi	r24, 0x05	; 5
    697e:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6982:	4f e6       	ldi	r20, 0x6F	; 111
    6984:	58 e0       	ldi	r21, 0x08	; 8
    6986:	61 e0       	ldi	r22, 0x01	; 1
    6988:	8c ef       	ldi	r24, 0xFC	; 252
    698a:	91 e2       	ldi	r25, 0x21	; 33
    698c:	b2 ce       	rjmp	.-668    	; 0x66f2 <send_to_rf>
			break;
    698e:	08 95       	ret
			
		case time_invalid_data_size:
			data_to_rf[0] = time_invalid_data_size;
    6990:	86 e0       	ldi	r24, 0x06	; 6
    6992:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6996:	4f e6       	ldi	r20, 0x6F	; 111
    6998:	58 e0       	ldi	r21, 0x08	; 8
    699a:	61 e0       	ldi	r22, 0x01	; 1
    699c:	8c ef       	ldi	r24, 0xFC	; 252
    699e:	91 e2       	ldi	r25, 0x21	; 33
    69a0:	a8 ce       	rjmp	.-688    	; 0x66f2 <send_to_rf>
			break;
    69a2:	08 95       	ret
		
		case time_crc_error:
			data_to_rf[0] = time_crc_error;
    69a4:	87 e0       	ldi	r24, 0x07	; 7
    69a6:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69aa:	4f e6       	ldi	r20, 0x6F	; 111
    69ac:	58 e0       	ldi	r21, 0x08	; 8
    69ae:	61 e0       	ldi	r22, 0x01	; 1
    69b0:	8c ef       	ldi	r24, 0xFC	; 252
    69b2:	91 e2       	ldi	r25, 0x21	; 33
    69b4:	9e ce       	rjmp	.-708    	; 0x66f2 <send_to_rf>
			break;
    69b6:	08 95       	ret
		
		case wps_invalid_data_size:
			data_to_rf[0] = wps_invalid_data_size;
    69b8:	88 e0       	ldi	r24, 0x08	; 8
    69ba:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69be:	4f e6       	ldi	r20, 0x6F	; 111
    69c0:	58 e0       	ldi	r21, 0x08	; 8
    69c2:	61 e0       	ldi	r22, 0x01	; 1
    69c4:	8c ef       	ldi	r24, 0xFC	; 252
    69c6:	91 e2       	ldi	r25, 0x21	; 33
    69c8:	94 ce       	rjmp	.-728    	; 0x66f2 <send_to_rf>
			break;
    69ca:	08 95       	ret
			
		case invalid_command_error:
			data_to_rf[0] = invalid_command_error;
    69cc:	8b e0       	ldi	r24, 0x0B	; 11
    69ce:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69d2:	4f e6       	ldi	r20, 0x6F	; 111
    69d4:	58 e0       	ldi	r21, 0x08	; 8
    69d6:	61 e0       	ldi	r22, 0x01	; 1
    69d8:	8c ef       	ldi	r24, 0xFC	; 252
    69da:	91 e2       	ldi	r25, 0x21	; 33
    69dc:	8a ce       	rjmp	.-748    	; 0x66f2 <send_to_rf>
			break;
    69de:	08 95       	ret
			
		case wps_invalid_UID:
			data_to_rf[0] = wps_invalid_UID;
    69e0:	89 e0       	ldi	r24, 0x09	; 9
    69e2:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69e6:	4f e6       	ldi	r20, 0x6F	; 111
    69e8:	58 e0       	ldi	r21, 0x08	; 8
    69ea:	61 e0       	ldi	r22, 0x01	; 1
    69ec:	8c ef       	ldi	r24, 0xFC	; 252
    69ee:	91 e2       	ldi	r25, 0x21	; 33
    69f0:	80 ce       	rjmp	.-768    	; 0x66f2 <send_to_rf>
			break;
    69f2:	08 95       	ret
			
		case wps_crc_error:
			data_to_rf[0] = wps_crc_error;
    69f4:	8a e0       	ldi	r24, 0x0A	; 10
    69f6:	80 93 fc 21 	sts	0x21FC, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69fa:	4f e6       	ldi	r20, 0x6F	; 111
    69fc:	58 e0       	ldi	r21, 0x08	; 8
    69fe:	61 e0       	ldi	r22, 0x01	; 1
    6a00:	8c ef       	ldi	r24, 0xFC	; 252
    6a02:	91 e2       	ldi	r25, 0x21	; 33
    6a04:	76 ce       	rjmp	.-788    	; 0x66f2 <send_to_rf>
    6a06:	08 95       	ret

00006a08 <pend_to_rf>:
	}
}

void pend_to_rf(char pend_type)
{
	switch(pend_type)
    6a08:	83 36       	cpi	r24, 0x63	; 99
    6a0a:	19 f0       	breq	.+6      	; 0x6a12 <pend_to_rf+0xa>
    6a0c:	84 36       	cpi	r24, 0x64	; 100
    6a0e:	41 f0       	breq	.+16     	; 0x6a20 <pend_to_rf+0x18>
    6a10:	08 95       	ret
	{
		case 'c':
			send_to_rf(data_to_rf, 0, "[chrgng]");
    6a12:	48 e7       	ldi	r20, 0x78	; 120
    6a14:	58 e0       	ldi	r21, 0x08	; 8
    6a16:	60 e0       	ldi	r22, 0x00	; 0
    6a18:	8c ef       	ldi	r24, 0xFC	; 252
    6a1a:	91 e2       	ldi	r25, 0x21	; 33
    6a1c:	6a ce       	rjmp	.-812    	; 0x66f2 <send_to_rf>
		break;
    6a1e:	08 95       	ret
		case 'd':
			send_to_rf(data_to_rf, 0, "[dschrg]");
    6a20:	41 e8       	ldi	r20, 0x81	; 129
    6a22:	58 e0       	ldi	r21, 0x08	; 8
    6a24:	60 e0       	ldi	r22, 0x00	; 0
    6a26:	8c ef       	ldi	r24, 0xFC	; 252
    6a28:	91 e2       	ldi	r25, 0x21	; 33
    6a2a:	63 ce       	rjmp	.-826    	; 0x66f2 <send_to_rf>
    6a2c:	08 95       	ret

00006a2e <time_to_rf>:
	eeprom_to_rf(address);
}

void time_to_rf(uint32_t time)
{
	set_timestamp(time);
    6a2e:	b2 d2       	rcall	.+1380   	; 0x6f94 <set_timestamp>
	send_to_rf(data_to_rf, 0, "[timech]");
    6a30:	40 e8       	ldi	r20, 0x80	; 128
    6a32:	52 e0       	ldi	r21, 0x02	; 2
    6a34:	60 e0       	ldi	r22, 0x00	; 0
    6a36:	8c ef       	ldi	r24, 0xFC	; 252
    6a38:	91 e2       	ldi	r25, 0x21	; 33
    6a3a:	5b ce       	rjmp	.-842    	; 0x66f2 <send_to_rf>
    6a3c:	08 95       	ret

00006a3e <clr_rom_to_rf>:
}

void clr_rom_to_rf()
{
	clre2prom();
    6a3e:	0e 94 9d 22 	call	0x453a	; 0x453a <clre2prom>
	send_to_rf(data_to_rf, 0, "[clrrom]");
    6a42:	42 e9       	ldi	r20, 0x92	; 146
    6a44:	52 e0       	ldi	r21, 0x02	; 2
    6a46:	60 e0       	ldi	r22, 0x00	; 0
    6a48:	8c ef       	ldi	r24, 0xFC	; 252
    6a4a:	91 e2       	ldi	r25, 0x21	; 33
    6a4c:	52 ce       	rjmp	.-860    	; 0x66f2 <send_to_rf>
    6a4e:	08 95       	ret

00006a50 <info_to_rf>:
		//after a while this will reset the system when watchdog enabled
	}
}

void info_to_rf()
{
    6a50:	cf 93       	push	r28
    6a52:	df 93       	push	r29
/*	data_to_rf[0] = readE2prom(GROUP_ID); //group*/
// 	data_to_rf[1] = readE2prom(ZONE_ID); //zone
// 	data_to_rf[2] = readE2prom(NODE_ID); //node
	data_to_rf[0] = readE2prom(DEVICE_ADDRESS_H); //address MSB
    6a54:	8d ef       	ldi	r24, 0xFD	; 253
    6a56:	9f e0       	ldi	r25, 0x0F	; 15
    6a58:	60 da       	rcall	.-2880   	; 0x5f1a <readE2prom>
    6a5a:	cc ef       	ldi	r28, 0xFC	; 252
    6a5c:	d1 e2       	ldi	r29, 0x21	; 33
    6a5e:	88 83       	st	Y, r24
	data_to_rf[1] = readE2prom(DEVICE_ADDRESS_L); //address LSB
    6a60:	8c ef       	ldi	r24, 0xFC	; 252
    6a62:	9f e0       	ldi	r25, 0x0F	; 15
    6a64:	5a da       	rcall	.-2892   	; 0x5f1a <readE2prom>
    6a66:	89 83       	std	Y+1, r24	; 0x01
	data_to_rf[2] = readE2prom(DEVICE_CHANNEL_H); //channel MSB
    6a68:	8f ef       	ldi	r24, 0xFF	; 255
    6a6a:	9f e0       	ldi	r25, 0x0F	; 15
    6a6c:	56 da       	rcall	.-2900   	; 0x5f1a <readE2prom>
    6a6e:	8a 83       	std	Y+2, r24	; 0x02
	data_to_rf[3] = readE2prom(DEVICE_CHANNEL_L); //channel LSB
    6a70:	8e ef       	ldi	r24, 0xFE	; 254
    6a72:	9f e0       	ldi	r25, 0x0F	; 15
    6a74:	52 da       	rcall	.-2908   	; 0x5f1a <readE2prom>
    6a76:	8b 83       	std	Y+3, r24	; 0x03
	data_to_rf[4] = readE2prom(DEVICE_PAN_H); //pan id MSB
    6a78:	81 e0       	ldi	r24, 0x01	; 1
    6a7a:	90 e1       	ldi	r25, 0x10	; 16
    6a7c:	4e da       	rcall	.-2916   	; 0x5f1a <readE2prom>
    6a7e:	8c 83       	std	Y+4, r24	; 0x04
	data_to_rf[5] = readE2prom(DEVICE_PAN_L); //pan id LSB
    6a80:	80 e0       	ldi	r24, 0x00	; 0
    6a82:	90 e1       	ldi	r25, 0x10	; 16
    6a84:	4a da       	rcall	.-2924   	; 0x5f1a <readE2prom>
    6a86:	8d 83       	std	Y+5, r24	; 0x05
	send_to_rf(data_to_rf, 6, "[infoid]");
    6a88:	44 ea       	ldi	r20, 0xA4	; 164
    6a8a:	52 e0       	ldi	r21, 0x02	; 2
    6a8c:	66 e0       	ldi	r22, 0x06	; 6
    6a8e:	ce 01       	movw	r24, r28
    6a90:	30 de       	rcall	.-928    	; 0x66f2 <send_to_rf>
}
    6a92:	df 91       	pop	r29
    6a94:	cf 91       	pop	r28
    6a96:	08 95       	ret

00006a98 <change_id_to_rf>:

void change_id_to_rf(uint8_t *data)
{
    6a98:	cf 93       	push	r28
    6a9a:	df 93       	push	r29
    6a9c:	ec 01       	movw	r28, r24
/*	write_factory_default(GROUP_ID,data[0]);*/
// 	write_factory_default(ZONE_ID,data[1]);
// 	write_factory_default(NODE_ID,data[2]);
	write_factory_default(DEVICE_ADDRESS_H,data[0]);
    6a9e:	68 81       	ld	r22, Y
    6aa0:	8d ef       	ldi	r24, 0xFD	; 253
    6aa2:	9f e0       	ldi	r25, 0x0F	; 15
    6aa4:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
	write_factory_default(DEVICE_ADDRESS_L,data[1]);
    6aa8:	69 81       	ldd	r22, Y+1	; 0x01
    6aaa:	8c ef       	ldi	r24, 0xFC	; 252
    6aac:	9f e0       	ldi	r25, 0x0F	; 15
    6aae:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
	write_factory_default(DEVICE_CHANNEL_H,data[2]);
    6ab2:	6a 81       	ldd	r22, Y+2	; 0x02
    6ab4:	8f ef       	ldi	r24, 0xFF	; 255
    6ab6:	9f e0       	ldi	r25, 0x0F	; 15
    6ab8:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
	write_factory_default(DEVICE_CHANNEL_L,data[3]);
    6abc:	6b 81       	ldd	r22, Y+3	; 0x03
    6abe:	8e ef       	ldi	r24, 0xFE	; 254
    6ac0:	9f e0       	ldi	r25, 0x0F	; 15
    6ac2:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
	write_factory_default(DEVICE_PAN_H,data[4]);
    6ac6:	6c 81       	ldd	r22, Y+4	; 0x04
    6ac8:	81 e0       	ldi	r24, 0x01	; 1
    6aca:	90 e1       	ldi	r25, 0x10	; 16
    6acc:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
	write_factory_default(DEVICE_PAN_L,data[5]);
    6ad0:	6d 81       	ldd	r22, Y+5	; 0x05
    6ad2:	80 e0       	ldi	r24, 0x00	; 0
    6ad4:	90 e1       	ldi	r25, 0x10	; 16
    6ad6:	0e 94 be 20 	call	0x417c	; 0x417c <write_factory_default>
	send_to_rf(data_to_rf, 0, "[chngid]");
    6ada:	4d ea       	ldi	r20, 0xAD	; 173
    6adc:	52 e0       	ldi	r21, 0x02	; 2
    6ade:	60 e0       	ldi	r22, 0x00	; 0
    6ae0:	8c ef       	ldi	r24, 0xFC	; 252
    6ae2:	91 e2       	ldi	r25, 0x21	; 33
    6ae4:	06 de       	rcall	.-1012   	; 0x66f2 <send_to_rf>
}
    6ae6:	df 91       	pop	r29
    6ae8:	cf 91       	pop	r28
    6aea:	08 95       	ret

00006aec <last_1_log>:

void last_1_log(char type)
{
    6aec:	ff 92       	push	r15
    6aee:	0f 93       	push	r16
    6af0:	1f 93       	push	r17
    6af2:	cf 93       	push	r28
    6af4:	df 93       	push	r29
    6af6:	f8 2e       	mov	r15, r24
    6af8:	0c ef       	ldi	r16, 0xFC	; 252
    6afa:	11 e2       	ldi	r17, 0x21	; 33
    6afc:	c0 e0       	ldi	r28, 0x00	; 0
    6afe:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t memory_address_low = 0;
  uint8_t memory_address_high = 0;
  for (uint8_t i=0; i<11; i++)
  {
    memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    6b00:	40 91 76 23 	lds	r20, 0x2376
    6b04:	50 91 77 23 	lds	r21, 0x2377
    6b08:	9a 01       	movw	r18, r20
    6b0a:	26 51       	subi	r18, 0x16	; 22
    6b0c:	31 09       	sbc	r19, r1
    6b0e:	2c 0f       	add	r18, r28
    6b10:	3d 1f       	adc	r19, r29
    6b12:	46 51       	subi	r20, 0x16	; 22
    memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    6b14:	4c 0f       	add	r20, r28
    data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6b16:	23 2f       	mov	r18, r19
    6b18:	65 e4       	ldi	r22, 0x45	; 69
    6b1a:	8f ea       	ldi	r24, 0xAF	; 175
    6b1c:	0e 94 43 22 	call	0x4486	; 0x4486 <PNEWELSE2promRead>
    6b20:	f8 01       	movw	r30, r16
    6b22:	81 93       	st	Z+, r24
    6b24:	8f 01       	movw	r16, r30
    6b26:	21 96       	adiw	r28, 0x01	; 1

void last_1_log(char type)
{
  uint8_t memory_address_low = 0;
  uint8_t memory_address_high = 0;
  for (uint8_t i=0; i<11; i++)
    6b28:	cb 30       	cpi	r28, 0x0B	; 11
    6b2a:	d1 05       	cpc	r29, r1
    6b2c:	49 f7       	brne	.-46     	; 0x6b00 <last_1_log+0x14>
    memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    /*pne_delayms(10);*/
  }
  switch(type)
    6b2e:	fe e6       	ldi	r31, 0x6E	; 110
    6b30:	ff 16       	cp	r15, r31
    6b32:	39 f0       	breq	.+14     	; 0x6b42 <last_1_log+0x56>
    6b34:	83 e7       	ldi	r24, 0x73	; 115
    6b36:	f8 16       	cp	r15, r24
    6b38:	91 f0       	breq	.+36     	; 0x6b5e <last_1_log+0x72>
    6b3a:	e1 e6       	ldi	r30, 0x61	; 97
    6b3c:	fe 12       	cpse	r15, r30
    6b3e:	16 c0       	rjmp	.+44     	; 0x6b6c <last_1_log+0x80>
    6b40:	07 c0       	rjmp	.+14     	; 0x6b50 <last_1_log+0x64>
  {
	  case 'n':
		send_to_rf(data_to_rf, 6, "[1stnml]"); //temporary reduce the sent data to 6 only in order to reduce bandwidth usage. Default value is 11
    6b42:	4a e8       	ldi	r20, 0x8A	; 138
    6b44:	58 e0       	ldi	r21, 0x08	; 8
    6b46:	66 e0       	ldi	r22, 0x06	; 6
    6b48:	8c ef       	ldi	r24, 0xFC	; 252
    6b4a:	91 e2       	ldi	r25, 0x21	; 33
    6b4c:	d2 dd       	rcall	.-1116   	; 0x66f2 <send_to_rf>
		break;
    6b4e:	14 c0       	rjmp	.+40     	; 0x6b78 <last_1_log+0x8c>
	  case 'a':
		send_to_rf(data_to_rf, 6, "[1staci]");
    6b50:	43 e9       	ldi	r20, 0x93	; 147
    6b52:	58 e0       	ldi	r21, 0x08	; 8
    6b54:	66 e0       	ldi	r22, 0x06	; 6
    6b56:	8c ef       	ldi	r24, 0xFC	; 252
    6b58:	91 e2       	ldi	r25, 0x21	; 33
    6b5a:	cb dd       	rcall	.-1130   	; 0x66f2 <send_to_rf>
		break;
    6b5c:	0d c0       	rjmp	.+26     	; 0x6b78 <last_1_log+0x8c>
	  case 's':
		send_to_rf(data_to_rf, 6, "[1stsft]");
    6b5e:	4c e9       	ldi	r20, 0x9C	; 156
    6b60:	58 e0       	ldi	r21, 0x08	; 8
    6b62:	66 e0       	ldi	r22, 0x06	; 6
    6b64:	8c ef       	ldi	r24, 0xFC	; 252
    6b66:	91 e2       	ldi	r25, 0x21	; 33
    6b68:	c4 dd       	rcall	.-1144   	; 0x66f2 <send_to_rf>
		break;
    6b6a:	06 c0       	rjmp	.+12     	; 0x6b78 <last_1_log+0x8c>
	  default:
		send_to_rf(data_to_rf, 11, "[1stlog]");
    6b6c:	45 ea       	ldi	r20, 0xA5	; 165
    6b6e:	58 e0       	ldi	r21, 0x08	; 8
    6b70:	6b e0       	ldi	r22, 0x0B	; 11
    6b72:	8c ef       	ldi	r24, 0xFC	; 252
    6b74:	91 e2       	ldi	r25, 0x21	; 33
    6b76:	bd dd       	rcall	.-1158   	; 0x66f2 <send_to_rf>
		break;
  }
}
    6b78:	df 91       	pop	r29
    6b7a:	cf 91       	pop	r28
    6b7c:	1f 91       	pop	r17
    6b7e:	0f 91       	pop	r16
    6b80:	ff 90       	pop	r15
    6b82:	08 95       	ret

00006b84 <last_2_log>:


void last_2_log(char type)
{
    6b84:	ff 92       	push	r15
    6b86:	0f 93       	push	r16
    6b88:	1f 93       	push	r17
    6b8a:	cf 93       	push	r28
    6b8c:	df 93       	push	r29
    6b8e:	f8 2e       	mov	r15, r24
    6b90:	0c ef       	ldi	r16, 0xFC	; 252
    6b92:	11 e2       	ldi	r17, 0x21	; 33
    6b94:	c0 e0       	ldi	r28, 0x00	; 0
    6b96:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	for (uint8_t i=0; i<11; i++)
	{
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
    6b98:	40 91 76 23 	lds	r20, 0x2376
    6b9c:	50 91 77 23 	lds	r21, 0x2377
    6ba0:	9a 01       	movw	r18, r20
    6ba2:	2b 50       	subi	r18, 0x0B	; 11
    6ba4:	31 09       	sbc	r19, r1
    6ba6:	2c 0f       	add	r18, r28
    6ba8:	3d 1f       	adc	r19, r29
    6baa:	4b 50       	subi	r20, 0x0B	; 11
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
    6bac:	4c 0f       	add	r20, r28
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6bae:	23 2f       	mov	r18, r19
    6bb0:	65 e4       	ldi	r22, 0x45	; 69
    6bb2:	8f ea       	ldi	r24, 0xAF	; 175
    6bb4:	0e 94 43 22 	call	0x4486	; 0x4486 <PNEWELSE2promRead>
    6bb8:	f8 01       	movw	r30, r16
    6bba:	81 93       	st	Z+, r24
    6bbc:	8f 01       	movw	r16, r30
    6bbe:	21 96       	adiw	r28, 0x01	; 1

void last_2_log(char type)
{
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	for (uint8_t i=0; i<11; i++)
    6bc0:	cb 30       	cpi	r28, 0x0B	; 11
    6bc2:	d1 05       	cpc	r29, r1
    6bc4:	49 f7       	brne	.-46     	; 0x6b98 <last_2_log+0x14>
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		/*pne_delayms(10);*/
	}
	switch(type)
    6bc6:	fe e6       	ldi	r31, 0x6E	; 110
    6bc8:	ff 16       	cp	r15, r31
    6bca:	39 f0       	breq	.+14     	; 0x6bda <last_2_log+0x56>
    6bcc:	83 e7       	ldi	r24, 0x73	; 115
    6bce:	f8 16       	cp	r15, r24
    6bd0:	91 f0       	breq	.+36     	; 0x6bf6 <last_2_log+0x72>
    6bd2:	e1 e6       	ldi	r30, 0x61	; 97
    6bd4:	fe 12       	cpse	r15, r30
    6bd6:	16 c0       	rjmp	.+44     	; 0x6c04 <last_2_log+0x80>
    6bd8:	07 c0       	rjmp	.+14     	; 0x6be8 <last_2_log+0x64>
	{
		case 'n':
			send_to_rf(data_to_rf, 6, "[2ndnml]");
    6bda:	4e ea       	ldi	r20, 0xAE	; 174
    6bdc:	58 e0       	ldi	r21, 0x08	; 8
    6bde:	66 e0       	ldi	r22, 0x06	; 6
    6be0:	8c ef       	ldi	r24, 0xFC	; 252
    6be2:	91 e2       	ldi	r25, 0x21	; 33
    6be4:	86 dd       	rcall	.-1268   	; 0x66f2 <send_to_rf>
			break;
    6be6:	14 c0       	rjmp	.+40     	; 0x6c10 <last_2_log+0x8c>
		case 'a':
			send_to_rf(data_to_rf, 6, "[2ndaci]");
    6be8:	47 eb       	ldi	r20, 0xB7	; 183
    6bea:	58 e0       	ldi	r21, 0x08	; 8
    6bec:	66 e0       	ldi	r22, 0x06	; 6
    6bee:	8c ef       	ldi	r24, 0xFC	; 252
    6bf0:	91 e2       	ldi	r25, 0x21	; 33
    6bf2:	7f dd       	rcall	.-1282   	; 0x66f2 <send_to_rf>
			break;
    6bf4:	0d c0       	rjmp	.+26     	; 0x6c10 <last_2_log+0x8c>
		case 's':
			send_to_rf(data_to_rf, 6, "[2ndsft]");
    6bf6:	40 ec       	ldi	r20, 0xC0	; 192
    6bf8:	58 e0       	ldi	r21, 0x08	; 8
    6bfa:	66 e0       	ldi	r22, 0x06	; 6
    6bfc:	8c ef       	ldi	r24, 0xFC	; 252
    6bfe:	91 e2       	ldi	r25, 0x21	; 33
    6c00:	78 dd       	rcall	.-1296   	; 0x66f2 <send_to_rf>
			break;
    6c02:	06 c0       	rjmp	.+12     	; 0x6c10 <last_2_log+0x8c>
		default:
			send_to_rf(data_to_rf, 11, "[2ndlog]");
    6c04:	49 ec       	ldi	r20, 0xC9	; 201
    6c06:	58 e0       	ldi	r21, 0x08	; 8
    6c08:	6b e0       	ldi	r22, 0x0B	; 11
    6c0a:	8c ef       	ldi	r24, 0xFC	; 252
    6c0c:	91 e2       	ldi	r25, 0x21	; 33
    6c0e:	71 dd       	rcall	.-1310   	; 0x66f2 <send_to_rf>
			break;
	}
}
    6c10:	df 91       	pop	r29
    6c12:	cf 91       	pop	r28
    6c14:	1f 91       	pop	r17
    6c16:	0f 91       	pop	r16
    6c18:	ff 90       	pop	r15
    6c1a:	08 95       	ret

00006c1c <test_completed>:

void test_completed(char type, uint8_t retry)
{
    6c1c:	df 92       	push	r13
    6c1e:	ef 92       	push	r14
    6c20:	ff 92       	push	r15
    6c22:	0f 93       	push	r16
    6c24:	cf 93       	push	r28
    6c26:	df 93       	push	r29
    6c28:	08 2f       	mov	r16, r24
    6c2a:	d6 2e       	mov	r13, r22
    6c2c:	0f 2e       	mov	r0, r31
    6c2e:	fc ef       	ldi	r31, 0xFC	; 252
    6c30:	ef 2e       	mov	r14, r31
    6c32:	f1 e2       	ldi	r31, 0x21	; 33
    6c34:	ff 2e       	mov	r15, r31
    6c36:	f0 2d       	mov	r31, r0
    6c38:	c0 e0       	ldi	r28, 0x00	; 0
    6c3a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t memory_address_high = 0;
	uint8_t data_counter = 0;
	uint8_t counter = 0;
	for (uint8_t i=0; i<6; i++) //For the start of the test. Only retrieve the time portion. Fork of last_2_log function
	{
		memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    6c3c:	40 91 76 23 	lds	r20, 0x2376
    6c40:	50 91 77 23 	lds	r21, 0x2377
    6c44:	ca 01       	movw	r24, r20
    6c46:	46 97       	sbiw	r24, 0x16	; 22
    6c48:	8c 0f       	add	r24, r28
    6c4a:	9d 1f       	adc	r25, r29
    6c4c:	46 51       	subi	r20, 0x16	; 22
		memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    6c4e:	4c 0f       	add	r20, r28
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6c50:	29 2f       	mov	r18, r25
    6c52:	65 e4       	ldi	r22, 0x45	; 69
    6c54:	8f ea       	ldi	r24, 0xAF	; 175
    6c56:	0e 94 43 22 	call	0x4486	; 0x4486 <PNEWELSE2promRead>
    6c5a:	f7 01       	movw	r30, r14
    6c5c:	81 93       	st	Z+, r24
    6c5e:	7f 01       	movw	r14, r30
    6c60:	21 96       	adiw	r28, 0x01	; 1
{
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	uint8_t data_counter = 0;
	uint8_t counter = 0;
	for (uint8_t i=0; i<6; i++) //For the start of the test. Only retrieve the time portion. Fork of last_2_log function
    6c62:	c6 30       	cpi	r28, 0x06	; 6
    6c64:	d1 05       	cpc	r29, r1
    6c66:	51 f7       	brne	.-44     	; 0x6c3c <test_completed+0x20>
    6c68:	0f 2e       	mov	r0, r31
    6c6a:	f2 e0       	ldi	r31, 0x02	; 2
    6c6c:	ef 2e       	mov	r14, r31
    6c6e:	f2 e2       	ldi	r31, 0x22	; 34
    6c70:	ff 2e       	mov	r15, r31
    6c72:	f0 2d       	mov	r31, r0
    6c74:	c0 e0       	ldi	r28, 0x00	; 0
    6c76:	d0 e0       	ldi	r29, 0x00	; 0
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	for (uint8_t i=0; i<6; i++) //For the end of the test. Only retrieve the time portion
	{
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
    6c78:	40 91 76 23 	lds	r20, 0x2376
    6c7c:	50 91 77 23 	lds	r21, 0x2377
    6c80:	ca 01       	movw	r24, r20
    6c82:	0b 97       	sbiw	r24, 0x0b	; 11
    6c84:	8c 0f       	add	r24, r28
    6c86:	9d 1f       	adc	r25, r29
    6c88:	4b 50       	subi	r20, 0x0B	; 11
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
    6c8a:	4c 0f       	add	r20, r28
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6c8c:	29 2f       	mov	r18, r25
    6c8e:	65 e4       	ldi	r22, 0x45	; 69
    6c90:	8f ea       	ldi	r24, 0xAF	; 175
    6c92:	0e 94 43 22 	call	0x4486	; 0x4486 <PNEWELSE2promRead>
    6c96:	f7 01       	movw	r30, r14
    6c98:	81 93       	st	Z+, r24
    6c9a:	7f 01       	movw	r14, r30
    6c9c:	21 96       	adiw	r28, 0x01	; 1
		memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	for (uint8_t i=0; i<6; i++) //For the end of the test. Only retrieve the time portion
    6c9e:	c6 30       	cpi	r28, 0x06	; 6
    6ca0:	d1 05       	cpc	r29, r1
    6ca2:	51 f7       	brne	.-44     	; 0x6c78 <test_completed+0x5c>
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	while(counter < retry)
    6ca4:	dd 20       	and	r13, r13
    6ca6:	31 f1       	breq	.+76     	; 0x6cf4 <test_completed+0xd8>
    6ca8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		switch(type)
    6caa:	0e 36       	cpi	r16, 0x6E	; 110
    6cac:	29 f0       	breq	.+10     	; 0x6cb8 <test_completed+0x9c>
    6cae:	03 37       	cpi	r16, 0x73	; 115
    6cb0:	89 f0       	breq	.+34     	; 0x6cd4 <test_completed+0xb8>
    6cb2:	01 36       	cpi	r16, 0x61	; 97
    6cb4:	b1 f4       	brne	.+44     	; 0x6ce2 <test_completed+0xc6>
    6cb6:	07 c0       	rjmp	.+14     	; 0x6cc6 <test_completed+0xaa>
		{
			case 'n':
			send_to_rf(data_to_rf, data_counter, "[tstend]");
    6cb8:	42 ed       	ldi	r20, 0xD2	; 210
    6cba:	58 e0       	ldi	r21, 0x08	; 8
    6cbc:	6c e0       	ldi	r22, 0x0C	; 12
    6cbe:	8c ef       	ldi	r24, 0xFC	; 252
    6cc0:	91 e2       	ldi	r25, 0x21	; 33
    6cc2:	17 dd       	rcall	.-1490   	; 0x66f2 <send_to_rf>
			break;
    6cc4:	14 c0       	rjmp	.+40     	; 0x6cee <test_completed+0xd2>
			case 'a':
			send_to_rf(data_to_rf, data_counter, "[tstaci]");
    6cc6:	4b ed       	ldi	r20, 0xDB	; 219
    6cc8:	58 e0       	ldi	r21, 0x08	; 8
    6cca:	6c e0       	ldi	r22, 0x0C	; 12
    6ccc:	8c ef       	ldi	r24, 0xFC	; 252
    6cce:	91 e2       	ldi	r25, 0x21	; 33
    6cd0:	10 dd       	rcall	.-1504   	; 0x66f2 <send_to_rf>
			break;
    6cd2:	0d c0       	rjmp	.+26     	; 0x6cee <test_completed+0xd2>
			case 's':
			send_to_rf(data_to_rf, data_counter, "[tststp]");
    6cd4:	44 ee       	ldi	r20, 0xE4	; 228
    6cd6:	58 e0       	ldi	r21, 0x08	; 8
    6cd8:	6c e0       	ldi	r22, 0x0C	; 12
    6cda:	8c ef       	ldi	r24, 0xFC	; 252
    6cdc:	91 e2       	ldi	r25, 0x21	; 33
    6cde:	09 dd       	rcall	.-1518   	; 0x66f2 <send_to_rf>
			break;
    6ce0:	06 c0       	rjmp	.+12     	; 0x6cee <test_completed+0xd2>
			default:
			send_to_rf(data_to_rf, data_counter, "[tstend]");
    6ce2:	42 ed       	ldi	r20, 0xD2	; 210
    6ce4:	58 e0       	ldi	r21, 0x08	; 8
    6ce6:	6c e0       	ldi	r22, 0x0C	; 12
    6ce8:	8c ef       	ldi	r24, 0xFC	; 252
    6cea:	91 e2       	ldi	r25, 0x21	; 33
    6cec:	02 dd       	rcall	.-1532   	; 0x66f2 <send_to_rf>
			break;
		}
		counter++;
    6cee:	cf 5f       	subi	r28, 0xFF	; 255
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	while(counter < retry)
    6cf0:	cd 11       	cpse	r28, r13
    6cf2:	db cf       	rjmp	.-74     	; 0x6caa <test_completed+0x8e>
	}
	
/*	send_to_rf(data_to_rf, data_counter + 1, "[tstend]");*/
// 	pne_delayms(10);
// 	send_to_rf(data_to_rf, data_counter + 1, "[tstend]");
}
    6cf4:	df 91       	pop	r29
    6cf6:	cf 91       	pop	r28
    6cf8:	0f 91       	pop	r16
    6cfa:	ff 90       	pop	r15
    6cfc:	ef 90       	pop	r14
    6cfe:	df 90       	pop	r13
    6d00:	08 95       	ret

00006d02 <dump_log_to_rf>:

/*---------This is experimental function----------------*/
void dump_log_to_rf()
{
    6d02:	0f 93       	push	r16
    6d04:	1f 93       	push	r17
    6d06:	cf 93       	push	r28
    6d08:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6d0a:	c0 e0       	ldi	r28, 0x00	; 0
    6d0c:	d0 e0       	ldi	r29, 0x00	; 0
}

/*---------This is experimental function----------------*/
void dump_log_to_rf()
{
	uint8_t i = 0;
    6d0e:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(i == 11)
		{
			send_to_rf(data_to_rf, 11, "[dumpmm]");
			i = 0;
    6d10:	00 e0       	ldi	r16, 0x00	; 0
    6d12:	09 c0       	rjmp	.+18     	; 0x6d26 <dump_log_to_rf+0x24>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(i == 11)
    6d14:	1b 30       	cpi	r17, 0x0B	; 11
    6d16:	39 f4       	brne	.+14     	; 0x6d26 <dump_log_to_rf+0x24>
		{
			send_to_rf(data_to_rf, 11, "[dumpmm]");
    6d18:	4d ee       	ldi	r20, 0xED	; 237
    6d1a:	58 e0       	ldi	r21, 0x08	; 8
    6d1c:	6b e0       	ldi	r22, 0x0B	; 11
    6d1e:	8c ef       	ldi	r24, 0xFC	; 252
    6d20:	91 e2       	ldi	r25, 0x21	; 33
    6d22:	e7 dc       	rcall	.-1586   	; 0x66f2 <send_to_rf>
			i = 0;
    6d24:	10 2f       	mov	r17, r16
			/*pne_delayms(10);*/
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6d26:	2d 2f       	mov	r18, r29
    6d28:	4c 2f       	mov	r20, r28
    6d2a:	65 e4       	ldi	r22, 0x45	; 69
    6d2c:	8f ea       	ldi	r24, 0xAF	; 175
    6d2e:	0e 94 43 22 	call	0x4486	; 0x4486 <PNEWELSE2promRead>
    6d32:	e1 2f       	mov	r30, r17
    6d34:	f0 e0       	ldi	r31, 0x00	; 0
    6d36:	e4 50       	subi	r30, 0x04	; 4
    6d38:	fe 4d       	sbci	r31, 0xDE	; 222
    6d3a:	80 83       	st	Z, r24
		pne_delayms(10);
    6d3c:	8a e0       	ldi	r24, 0x0A	; 10
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	0e 94 2b 21 	call	0x4256	; 0x4256 <pne_delayms>
		i++;
    6d44:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t i = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6d46:	21 96       	adiw	r28, 0x01	; 1
    6d48:	cc 3f       	cpi	r28, 0xFC	; 252
    6d4a:	8f e0       	ldi	r24, 0x0F	; 15
    6d4c:	d8 07       	cpc	r29, r24
    6d4e:	11 f7       	brne	.-60     	; 0x6d14 <dump_log_to_rf+0x12>
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		pne_delayms(10);
		i++;
		
	}
}
    6d50:	df 91       	pop	r29
    6d52:	cf 91       	pop	r28
    6d54:	1f 91       	pop	r17
    6d56:	0f 91       	pop	r16
    6d58:	08 95       	ret

00006d5a <stress_test>:
//---------End of Experimental function-----------------*/
/*---------This is experimental function----------------*/
void stress_test()
{
    6d5a:	ef 92       	push	r14
    6d5c:	ff 92       	push	r15
    6d5e:	1f 93       	push	r17
    6d60:	cf 93       	push	r28
    6d62:	df 93       	push	r29
	for(uint8_t u = 0; u<20; u++)
    6d64:	10 e0       	ldi	r17, 0x00	; 0
    6d66:	0f 2e       	mov	r0, r31
    6d68:	fc ef       	ldi	r31, 0xFC	; 252
    6d6a:	ef 2e       	mov	r14, r31
    6d6c:	f1 e2       	ldi	r31, 0x21	; 33
    6d6e:	ff 2e       	mov	r15, r31
    6d70:	f0 2d       	mov	r31, r0
    6d72:	cb e1       	ldi	r28, 0x1B	; 27
    6d74:	d2 e2       	ldi	r29, 0x22	; 34
    6d76:	0e c0       	rjmp	.+28     	; 0x6d94 <stress_test+0x3a>
	{
		for(uint16_t i = 0; i<31; i++)
		{
			data_to_rf[i] = 0;
    6d78:	11 92       	st	Z+, r1
/*---------This is experimental function----------------*/
void stress_test()
{
	for(uint8_t u = 0; u<20; u++)
	{
		for(uint16_t i = 0; i<31; i++)
    6d7a:	ec 17       	cp	r30, r28
    6d7c:	fd 07       	cpc	r31, r29
    6d7e:	e1 f7       	brne	.-8      	; 0x6d78 <stress_test+0x1e>
		{
			data_to_rf[i] = 0;
		}
		data_to_rf[31] = u;
    6d80:	f7 01       	movw	r30, r14
    6d82:	17 8f       	std	Z+31, r17	; 0x1f
		send_to_rf(data_to_rf,32,"[stress]");
    6d84:	48 ec       	ldi	r20, 0xC8	; 200
    6d86:	52 e0       	ldi	r21, 0x02	; 2
    6d88:	60 e2       	ldi	r22, 0x20	; 32
    6d8a:	c7 01       	movw	r24, r14
    6d8c:	b2 dc       	rcall	.-1692   	; 0x66f2 <send_to_rf>
}
//---------End of Experimental function-----------------*/
/*---------This is experimental function----------------*/
void stress_test()
{
	for(uint8_t u = 0; u<20; u++)
    6d8e:	1f 5f       	subi	r17, 0xFF	; 255
    6d90:	14 31       	cpi	r17, 0x14	; 20
    6d92:	11 f0       	breq	.+4      	; 0x6d98 <stress_test+0x3e>
    6d94:	f7 01       	movw	r30, r14
    6d96:	f0 cf       	rjmp	.-32     	; 0x6d78 <stress_test+0x1e>
			data_to_rf[i] = 0;
		}
		data_to_rf[31] = u;
		send_to_rf(data_to_rf,32,"[stress]");
	}
}
    6d98:	df 91       	pop	r29
    6d9a:	cf 91       	pop	r28
    6d9c:	1f 91       	pop	r17
    6d9e:	ff 90       	pop	r15
    6da0:	ef 90       	pop	r14
    6da2:	08 95       	ret

00006da4 <request_to_RF>:
//---------End of Experimental function-----------------*/
void request_to_RF(uint8_t *RFU_UID)
{
    6da4:	fc 01       	movw	r30, r24
    6da6:	ac ef       	ldi	r26, 0xFC	; 252
    6da8:	b1 e2       	ldi	r27, 0x21	; 33
    6daa:	9c 01       	movw	r18, r24
    6dac:	20 5f       	subi	r18, 0xF0	; 240
    6dae:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i = 0; i<max_UID_length; i++)
	{
		data_to_rf[i] = RFU_UID[i];
    6db0:	81 91       	ld	r24, Z+
    6db2:	8d 93       	st	X+, r24
	}
}
//---------End of Experimental function-----------------*/
void request_to_RF(uint8_t *RFU_UID)
{
	for(uint8_t i = 0; i<max_UID_length; i++)
    6db4:	e2 17       	cp	r30, r18
    6db6:	f3 07       	cpc	r31, r19
    6db8:	d9 f7       	brne	.-10     	; 0x6db0 <request_to_RF+0xc>
	{
		data_to_rf[i] = RFU_UID[i];
	}
	send_to_rf(data_to_rf, max_UID_length, "[requid]");
    6dba:	46 ef       	ldi	r20, 0xF6	; 246
    6dbc:	58 e0       	ldi	r21, 0x08	; 8
    6dbe:	60 e1       	ldi	r22, 0x10	; 16
    6dc0:	8c ef       	ldi	r24, 0xFC	; 252
    6dc2:	91 e2       	ldi	r25, 0x21	; 33
    6dc4:	96 cc       	rjmp	.-1748   	; 0x66f2 <send_to_rf>
    6dc6:	08 95       	ret

00006dc8 <WPS_OK_Alert>:
	/*send_to_rf(data_to_rf, 0, "[chngid]");*/
}

void WPS_OK_Alert(uint8_t *data, uint8_t size)
{
	send_to_rf(data,size,"[pairok]");
    6dc8:	4f ef       	ldi	r20, 0xFF	; 255
    6dca:	58 e0       	ldi	r21, 0x08	; 8
    6dcc:	92 cc       	rjmp	.-1756   	; 0x66f2 <send_to_rf>
    6dce:	08 95       	ret

00006dd0 <crc_verify>:
}


//crc verification routine
bool crc_verify(uint8_t *data, uint8_t size)
{
    6dd0:	df 92       	push	r13
    6dd2:	ef 92       	push	r14
    6dd4:	ff 92       	push	r15
    6dd6:	0f 93       	push	r16
    6dd8:	1f 93       	push	r17
    6dda:	cf 93       	push	r28
    6ddc:	df 93       	push	r29
    6dde:	8c 01       	movw	r16, r24
    6de0:	c6 2f       	mov	r28, r22
	uint8_t crc_upper = 0;
	uint8_t crc_lower = 0;
	crc_upper = data[size-2]; //crc_upper = (ascii_to_hex(data[size-4])*0x10 + ascii_to_hex(data[size-3]));
    6de2:	9c 01       	movw	r18, r24
    6de4:	26 0f       	add	r18, r22
    6de6:	31 1d       	adc	r19, r1
    6de8:	f9 01       	movw	r30, r18
    6dea:	32 97       	sbiw	r30, 0x02	; 2
    6dec:	e0 80       	ld	r14, Z
	crc_lower = data[size-1]; //crc_lower = (ascii_to_hex(data[size-1])*0x10 + ascii_to_hex(data[size-1]));
    6dee:	31 96       	adiw	r30, 0x01	; 1
    6df0:	d0 80       	ld	r13, Z
	uint8_t crc_upper_internal = 0;
	uint8_t crc_lower_internal = 0;
	uint8_t data_length = size-2; //uint8_t data_length = size-4;
	crcInit();
    6df2:	84 d1       	rcall	.+776    	; 0x70fc <crcInit>
	uint8_t crc_lower = 0;
	crc_upper = data[size-2]; //crc_upper = (ascii_to_hex(data[size-4])*0x10 + ascii_to_hex(data[size-3]));
	crc_lower = data[size-1]; //crc_lower = (ascii_to_hex(data[size-1])*0x10 + ascii_to_hex(data[size-1]));
	uint8_t crc_upper_internal = 0;
	uint8_t crc_lower_internal = 0;
	uint8_t data_length = size-2; //uint8_t data_length = size-4;
    6df4:	c2 50       	subi	r28, 0x02	; 2
	crcInit();
	crc_upper_internal = ((crcFast(data, (data_length)) & 0xFF00) >> 8);
    6df6:	d0 e0       	ldi	r29, 0x00	; 0
    6df8:	be 01       	movw	r22, r28
    6dfa:	c8 01       	movw	r24, r16
    6dfc:	9c d1       	rcall	.+824    	; 0x7136 <crcFast>
    6dfe:	f9 2e       	mov	r15, r25
	crc_lower_internal = (crcFast(data, (data_length)) & 0x00FF);
    6e00:	be 01       	movw	r22, r28
    6e02:	c8 01       	movw	r24, r16
    6e04:	98 d1       	rcall	.+816    	; 0x7136 <crcFast>
    6e06:	98 2f       	mov	r25, r24
	if ((crc_upper_internal == crc_upper) && (crc_lower_internal == crc_lower))
    6e08:	ef 10       	cpse	r14, r15
    6e0a:	05 c0       	rjmp	.+10     	; 0x6e16 <crc_verify+0x46>
    6e0c:	81 e0       	ldi	r24, 0x01	; 1
    6e0e:	d9 16       	cp	r13, r25
    6e10:	19 f0       	breq	.+6      	; 0x6e18 <crc_verify+0x48>
    6e12:	80 e0       	ldi	r24, 0x00	; 0
    6e14:	01 c0       	rjmp	.+2      	; 0x6e18 <crc_verify+0x48>
	{
		
		return true;
	}

	return false;	
    6e16:	80 e0       	ldi	r24, 0x00	; 0
}
    6e18:	df 91       	pop	r29
    6e1a:	cf 91       	pop	r28
    6e1c:	1f 91       	pop	r17
    6e1e:	0f 91       	pop	r16
    6e20:	ff 90       	pop	r15
    6e22:	ef 90       	pop	r14
    6e24:	df 90       	pop	r13
    6e26:	08 95       	ret

00006e28 <ascii_to_hex>:

//ascii to hex conversion routine
uint8_t ascii_to_hex(uint8_t data)
{
	uint8_t return_data = 0;
	if ((data<=0x39) && (data>=0x30))
    6e28:	90 ed       	ldi	r25, 0xD0	; 208
    6e2a:	98 0f       	add	r25, r24
    6e2c:	9a 30       	cpi	r25, 0x0A	; 10
    6e2e:	08 f0       	brcs	.+2      	; 0x6e32 <ascii_to_hex+0xa>


//ascii to hex conversion routine
uint8_t ascii_to_hex(uint8_t data)
{
	uint8_t return_data = 0;
    6e30:	90 e0       	ldi	r25, 0x00	; 0
	if ((data<=0x39) && (data>=0x30))
	{
		return_data = data - 0x30;
	}
	if ((data<=0x5A) && (data>=0x41))
    6e32:	2f eb       	ldi	r18, 0xBF	; 191
    6e34:	28 0f       	add	r18, r24
    6e36:	2a 31       	cpi	r18, 0x1A	; 26
    6e38:	10 f4       	brcc	.+4      	; 0x6e3e <ascii_to_hex+0x16>
	{
		return_data = data - 0x37;
    6e3a:	99 ec       	ldi	r25, 0xC9	; 201
    6e3c:	98 0f       	add	r25, r24
	}
	if ((data<=0x66) && (data>=0x61))
    6e3e:	2f e9       	ldi	r18, 0x9F	; 159
    6e40:	28 0f       	add	r18, r24
    6e42:	26 30       	cpi	r18, 0x06	; 6
    6e44:	10 f4       	brcc	.+4      	; 0x6e4a <ascii_to_hex+0x22>
	{
		return_data = data - 0x57;
    6e46:	99 ea       	ldi	r25, 0xA9	; 169
    6e48:	98 0f       	add	r25, r24
	}
	return return_data;
}
    6e4a:	89 2f       	mov	r24, r25
    6e4c:	08 95       	ret

00006e4e <fatal_error_to_rf>:


//fatal error routine
void fatal_error_to_rf(fatal_error_t error)
{
	if (error == adc_fatal_error)
    6e4e:	81 11       	cpse	r24, r1
    6e50:	0a c0       	rjmp	.+20     	; 0x6e66 <fatal_error_to_rf+0x18>
	{
		data_to_rf[0] = adc_fatal_error+1;
    6e52:	81 e0       	ldi	r24, 0x01	; 1
    6e54:	80 93 fc 21 	sts	0x21FC, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6e58:	48 e0       	ldi	r20, 0x08	; 8
    6e5a:	59 e0       	ldi	r21, 0x09	; 9
    6e5c:	61 e0       	ldi	r22, 0x01	; 1
    6e5e:	8c ef       	ldi	r24, 0xFC	; 252
    6e60:	91 e2       	ldi	r25, 0x21	; 33
    6e62:	47 cc       	rjmp	.-1906   	; 0x66f2 <send_to_rf>
    6e64:	08 95       	ret
	}
	else if (error == twi_fatal_error)
    6e66:	81 30       	cpi	r24, 0x01	; 1
    6e68:	51 f4       	brne	.+20     	; 0x6e7e <fatal_error_to_rf+0x30>
	{
		data_to_rf[0] = twi_fatal_error+1;
    6e6a:	82 e0       	ldi	r24, 0x02	; 2
    6e6c:	80 93 fc 21 	sts	0x21FC, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6e70:	48 e0       	ldi	r20, 0x08	; 8
    6e72:	59 e0       	ldi	r21, 0x09	; 9
    6e74:	61 e0       	ldi	r22, 0x01	; 1
    6e76:	8c ef       	ldi	r24, 0xFC	; 252
    6e78:	91 e2       	ldi	r25, 0x21	; 33
    6e7a:	3b cc       	rjmp	.-1930   	; 0x66f2 <send_to_rf>
    6e7c:	08 95       	ret
	}
	else if (error == usart_fatal_error)
    6e7e:	82 30       	cpi	r24, 0x02	; 2
    6e80:	51 f4       	brne	.+20     	; 0x6e96 <fatal_error_to_rf+0x48>
	{
		data_to_rf[0] = usart_fatal_error+1;
    6e82:	83 e0       	ldi	r24, 0x03	; 3
    6e84:	80 93 fc 21 	sts	0x21FC, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6e88:	48 e0       	ldi	r20, 0x08	; 8
    6e8a:	59 e0       	ldi	r21, 0x09	; 9
    6e8c:	61 e0       	ldi	r22, 0x01	; 1
    6e8e:	8c ef       	ldi	r24, 0xFC	; 252
    6e90:	91 e2       	ldi	r25, 0x21	; 33
    6e92:	2f cc       	rjmp	.-1954   	; 0x66f2 <send_to_rf>
    6e94:	08 95       	ret
	}
	else
	{
		data_to_rf[0] = timer2_fatal_error+1;
    6e96:	84 e0       	ldi	r24, 0x04	; 4
    6e98:	80 93 fc 21 	sts	0x21FC, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6e9c:	48 e0       	ldi	r20, 0x08	; 8
    6e9e:	59 e0       	ldi	r21, 0x09	; 9
    6ea0:	61 e0       	ldi	r22, 0x01	; 1
    6ea2:	8c ef       	ldi	r24, 0xFC	; 252
    6ea4:	91 e2       	ldi	r25, 0x21	; 33
    6ea6:	25 cc       	rjmp	.-1974   	; 0x66f2 <send_to_rf>
    6ea8:	08 95       	ret

00006eaa <__vector_23>:
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
		date_out->month++;
	}
	date_out->date = day_number;
}
    6eaa:	1f 92       	push	r1
    6eac:	0f 92       	push	r0
    6eae:	0f b6       	in	r0, 0x3f	; 63
    6eb0:	0f 92       	push	r0
    6eb2:	11 24       	eor	r1, r1
    6eb4:	8f 93       	push	r24
    6eb6:	9f 93       	push	r25
    6eb8:	af 93       	push	r26
    6eba:	bf 93       	push	r27
    6ebc:	80 91 63 22 	lds	r24, 0x2263
    6ec0:	8f 5f       	subi	r24, 0xFF	; 255
    6ec2:	80 93 63 22 	sts	0x2263, r24
    6ec6:	8e 31       	cpi	r24, 0x1E	; 30
    6ec8:	a8 f0       	brcs	.+42     	; 0x6ef4 <__vector_23+0x4a>
    6eca:	80 91 64 22 	lds	r24, 0x2264
    6ece:	90 91 65 22 	lds	r25, 0x2265
    6ed2:	a0 91 66 22 	lds	r26, 0x2266
    6ed6:	b0 91 67 22 	lds	r27, 0x2267
    6eda:	01 96       	adiw	r24, 0x01	; 1
    6edc:	a1 1d       	adc	r26, r1
    6ede:	b1 1d       	adc	r27, r1
    6ee0:	80 93 64 22 	sts	0x2264, r24
    6ee4:	90 93 65 22 	sts	0x2265, r25
    6ee8:	a0 93 66 22 	sts	0x2266, r26
    6eec:	b0 93 67 22 	sts	0x2267, r27
    6ef0:	10 92 63 22 	sts	0x2263, r1
    6ef4:	bf 91       	pop	r27
    6ef6:	af 91       	pop	r26
    6ef8:	9f 91       	pop	r25
    6efa:	8f 91       	pop	r24
    6efc:	0f 90       	pop	r0
    6efe:	0f be       	out	0x3f, r0	; 63
    6f00:	0f 90       	pop	r0
    6f02:	1f 90       	pop	r1
    6f04:	18 95       	reti

00006f06 <__vector_15>:
    6f06:	1f 92       	push	r1
    6f08:	0f 92       	push	r0
    6f0a:	0f b6       	in	r0, 0x3f	; 63
    6f0c:	0f 92       	push	r0
    6f0e:	11 24       	eor	r1, r1
    6f10:	8f 93       	push	r24
    6f12:	9f 93       	push	r25
    6f14:	af 93       	push	r26
    6f16:	bf 93       	push	r27
    6f18:	80 91 64 22 	lds	r24, 0x2264
    6f1c:	90 91 65 22 	lds	r25, 0x2265
    6f20:	a0 91 66 22 	lds	r26, 0x2266
    6f24:	b0 91 67 22 	lds	r27, 0x2267
    6f28:	01 96       	adiw	r24, 0x01	; 1
    6f2a:	a1 1d       	adc	r26, r1
    6f2c:	b1 1d       	adc	r27, r1
    6f2e:	80 93 64 22 	sts	0x2264, r24
    6f32:	90 93 65 22 	sts	0x2265, r25
    6f36:	a0 93 66 22 	sts	0x2266, r26
    6f3a:	b0 93 67 22 	sts	0x2267, r27
    6f3e:	bf 91       	pop	r27
    6f40:	af 91       	pop	r26
    6f42:	9f 91       	pop	r25
    6f44:	8f 91       	pop	r24
    6f46:	0f 90       	pop	r0
    6f48:	0f be       	out	0x3f, r0	; 63
    6f4a:	0f 90       	pop	r0
    6f4c:	1f 90       	pop	r1
    6f4e:	18 95       	reti

00006f50 <timer2_init>:
    6f50:	f8 94       	cli
    6f52:	10 92 70 00 	sts	0x0070, r1
    6f56:	e6 eb       	ldi	r30, 0xB6	; 182
    6f58:	f0 e0       	ldi	r31, 0x00	; 0
    6f5a:	80 81       	ld	r24, Z
    6f5c:	80 62       	ori	r24, 0x20	; 32
    6f5e:	80 83       	st	Z, r24
    6f60:	10 92 b2 00 	sts	0x00B2, r1
    6f64:	10 92 b0 00 	sts	0x00B0, r1
    6f68:	85 e0       	ldi	r24, 0x05	; 5
    6f6a:	80 93 b1 00 	sts	0x00B1, r24
    6f6e:	80 81       	ld	r24, Z
    6f70:	83 70       	andi	r24, 0x03	; 3
    6f72:	83 30       	cpi	r24, 0x03	; 3
    6f74:	e1 f3       	breq	.-8      	; 0x6f6e <timer2_init+0x1e>
    6f76:	10 92 b2 00 	sts	0x00B2, r1
    6f7a:	10 92 b0 00 	sts	0x00B0, r1
    6f7e:	85 e0       	ldi	r24, 0x05	; 5
    6f80:	80 93 b1 00 	sts	0x00B1, r24
    6f84:	17 ba       	out	0x17, r1	; 23
    6f86:	e0 e7       	ldi	r30, 0x70	; 112
    6f88:	f0 e0       	ldi	r31, 0x00	; 0
    6f8a:	80 81       	ld	r24, Z
    6f8c:	81 60       	ori	r24, 0x01	; 1
    6f8e:	80 83       	st	Z, r24
    6f90:	78 94       	sei
    6f92:	08 95       	ret

00006f94 <set_timestamp>:

void set_timestamp(uint32_t timestamp)
{
	timestamp_internal = timestamp;
    6f94:	60 93 64 22 	sts	0x2264, r22
    6f98:	70 93 65 22 	sts	0x2265, r23
    6f9c:	80 93 66 22 	sts	0x2266, r24
    6fa0:	90 93 67 22 	sts	0x2267, r25
    6fa4:	08 95       	ret

00006fa6 <get_timestamp>:
}

uint32_t get_timestamp(void)
{
	return timestamp_internal;
    6fa6:	60 91 64 22 	lds	r22, 0x2264
    6faa:	70 91 65 22 	lds	r23, 0x2265
    6fae:	80 91 66 22 	lds	r24, 0x2266
    6fb2:	90 91 67 22 	lds	r25, 0x2267
    6fb6:	08 95       	ret

00006fb8 <pneBatteryAverage_init>:
#include "PNE_Factory.h"



void pneBatteryAverage_init()
{
    6fb8:	0f 93       	push	r16
    6fba:	1f 93       	push	r17
    6fbc:	cf 93       	push	r28
    6fbe:	df 93       	push	r29
	battery_counter = 0;
    6fc0:	10 92 a7 23 	sts	0x23A7, r1
    6fc4:	a1 ea       	ldi	r26, 0xA1	; 161
    6fc6:	b3 e2       	ldi	r27, 0x23	; 35
    6fc8:	66 ea       	ldi	r22, 0xA6	; 166
    6fca:	73 e2       	ldi	r23, 0x23	; 35
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    6fcc:	0b e7       	ldi	r16, 0x7B	; 123
    6fce:	10 e0       	ldi	r17, 0x00	; 0
	}

	ADMUX
		= ((uint8_t)input &
    6fd0:	4c e7       	ldi	r20, 0x7C	; 124
    6fd2:	50 e0       	ldi	r21, 0x00	; 0
    6fd4:	90 e6       	ldi	r25, 0x60	; 96
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    6fd6:	ea e7       	ldi	r30, 0x7A	; 122
    6fd8:	f0 e0       	ldi	r31, 0x00	; 0
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    6fda:	29 e7       	ldi	r18, 0x79	; 121
    6fdc:	30 e0       	ldi	r19, 0x00	; 0
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    6fde:	e8 01       	movw	r28, r16
    6fe0:	88 81       	ld	r24, Y
    6fe2:	87 7f       	andi	r24, 0xF7	; 247
    6fe4:	88 83       	st	Y, r24
	}

	ADMUX
		= ((uint8_t)input &
    6fe6:	ea 01       	movw	r28, r20
    6fe8:	98 83       	st	Y, r25
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    6fea:	80 81       	ld	r24, Z
    6fec:	80 64       	ori	r24, 0x40	; 64
    6fee:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
    6ff0:	80 81       	ld	r24, Z
    6ff2:	86 fd       	sbrc	r24, 6
    6ff4:	fd cf       	rjmp	.-6      	; 0x6ff0 <pneBatteryAverage_init+0x38>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    6ff6:	e9 01       	movw	r28, r18
    6ff8:	88 81       	ld	r24, Y
	uint8_t i=0;
		
	for(i=0; i<5; i++)
	{
		battery_average[i] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);
    6ffa:	8d 93       	st	X+, r24
void pneBatteryAverage_init()
{
	battery_counter = 0;
	uint8_t i=0;
		
	for(i=0; i<5; i++)
    6ffc:	a6 17       	cp	r26, r22
    6ffe:	b7 07       	cpc	r27, r23
    7000:	71 f7       	brne	.-36     	; 0x6fde <pneBatteryAverage_init+0x26>
	{
		battery_average[i] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);
		//int_to_ascii(battery_average[i]);
	}
}
    7002:	df 91       	pop	r29
    7004:	cf 91       	pop	r28
    7006:	1f 91       	pop	r17
    7008:	0f 91       	pop	r16
    700a:	08 95       	ret

0000700c <pneBatteryAverage>:

uint8_t pneBatteryAverage()
{
	if(battery_counter > 5)
    700c:	80 91 a7 23 	lds	r24, 0x23A7
    7010:	86 30       	cpi	r24, 0x06	; 6
    7012:	10 f0       	brcs	.+4      	; 0x7018 <pneBatteryAverage+0xc>
	{
		battery_counter = 0;
    7014:	10 92 a7 23 	sts	0x23A7, r1
	}
	
	battery_average[battery_counter] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);//*18*10/255;
    7018:	a0 91 a7 23 	lds	r26, 0x23A7
    701c:	b0 e0       	ldi	r27, 0x00	; 0
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    701e:	eb e7       	ldi	r30, 0x7B	; 123
    7020:	f0 e0       	ldi	r31, 0x00	; 0
    7022:	80 81       	ld	r24, Z
    7024:	87 7f       	andi	r24, 0xF7	; 247
    7026:	80 83       	st	Z, r24
	}

	ADMUX
		= ((uint8_t)input &
    7028:	80 e6       	ldi	r24, 0x60	; 96
    702a:	80 93 7c 00 	sts	0x007C, r24
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    702e:	ea e7       	ldi	r30, 0x7A	; 122
    7030:	f0 e0       	ldi	r31, 0x00	; 0
    7032:	80 81       	ld	r24, Z
    7034:	80 64       	ori	r24, 0x40	; 64
    7036:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
    7038:	80 81       	ld	r24, Z
    703a:	86 fd       	sbrc	r24, 6
    703c:	fd cf       	rjmp	.-6      	; 0x7038 <pneBatteryAverage+0x2c>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    703e:	80 91 79 00 	lds	r24, 0x0079
    7042:	e1 ea       	ldi	r30, 0xA1	; 161
    7044:	f3 e2       	ldi	r31, 0x23	; 35
    7046:	af 55       	subi	r26, 0x5F	; 95
    7048:	bc 4d       	sbci	r27, 0xDC	; 220
    704a:	8c 93       	st	X, r24
	battery_counter++;
    704c:	80 91 a7 23 	lds	r24, 0x23A7
    7050:	8f 5f       	subi	r24, 0xFF	; 255
    7052:	80 93 a7 23 	sts	0x23A7, r24
	
	return (battery_average[0]+battery_average[1]+battery_average[2]+battery_average[3]+battery_average[4])/5;
    7056:	20 81       	ld	r18, Z
    7058:	81 81       	ldd	r24, Z+1	; 0x01
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	82 0f       	add	r24, r18
    705e:	91 1d       	adc	r25, r1
    7060:	22 81       	ldd	r18, Z+2	; 0x02
    7062:	82 0f       	add	r24, r18
    7064:	91 1d       	adc	r25, r1
    7066:	23 81       	ldd	r18, Z+3	; 0x03
    7068:	82 0f       	add	r24, r18
    706a:	91 1d       	adc	r25, r1
    706c:	24 81       	ldd	r18, Z+4	; 0x04
    706e:	82 0f       	add	r24, r18
    7070:	91 1d       	adc	r25, r1
    7072:	65 e0       	ldi	r22, 0x05	; 5
    7074:	70 e0       	ldi	r23, 0x00	; 0
    7076:	0e 94 47 4d 	call	0x9a8e	; 0x9a8e <__divmodhi4>
    707a:	86 2f       	mov	r24, r22
}
    707c:	08 95       	ret

0000707e <reflect>:
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
    707e:	8f 92       	push	r8
    7080:	9f 92       	push	r9
    7082:	af 92       	push	r10
    7084:	bf 92       	push	r11
    7086:	cf 92       	push	r12
    7088:	df 92       	push	r13
    708a:	ef 92       	push	r14
    708c:	ff 92       	push	r15
    708e:	cf 93       	push	r28
    7090:	df 93       	push	r29
    7092:	44 23       	and	r20, r20
    7094:	19 f1       	breq	.+70     	; 0x70dc <reflect+0x5e>
    7096:	e4 2f       	mov	r30, r20
    7098:	f0 e0       	ldi	r31, 0x00	; 0
    709a:	31 97       	sbiw	r30, 0x01	; 1
    709c:	20 e0       	ldi	r18, 0x00	; 0
    709e:	81 2c       	mov	r8, r1
    70a0:	91 2c       	mov	r9, r1
    70a2:	54 01       	movw	r10, r8
    70a4:	c1 e0       	ldi	r28, 0x01	; 1
    70a6:	d0 e0       	ldi	r29, 0x00	; 0
    70a8:	60 ff       	sbrs	r22, 0
    70aa:	0f c0       	rjmp	.+30     	; 0x70ca <reflect+0x4c>
    70ac:	6e 01       	movw	r12, r28
    70ae:	0e 2e       	mov	r0, r30
    70b0:	02 c0       	rjmp	.+4      	; 0x70b6 <reflect+0x38>
    70b2:	cc 0c       	add	r12, r12
    70b4:	dd 1c       	adc	r13, r13
    70b6:	0a 94       	dec	r0
    70b8:	e2 f7       	brpl	.-8      	; 0x70b2 <reflect+0x34>
    70ba:	0d 2c       	mov	r0, r13
    70bc:	00 0c       	add	r0, r0
    70be:	ee 08       	sbc	r14, r14
    70c0:	ff 08       	sbc	r15, r15
    70c2:	8c 28       	or	r8, r12
    70c4:	9d 28       	or	r9, r13
    70c6:	ae 28       	or	r10, r14
    70c8:	bf 28       	or	r11, r15
    70ca:	96 95       	lsr	r25
    70cc:	87 95       	ror	r24
    70ce:	77 95       	ror	r23
    70d0:	67 95       	ror	r22
    70d2:	2f 5f       	subi	r18, 0xFF	; 255
    70d4:	31 97       	sbiw	r30, 0x01	; 1
    70d6:	24 13       	cpse	r18, r20
    70d8:	e7 cf       	rjmp	.-50     	; 0x70a8 <reflect+0x2a>
    70da:	03 c0       	rjmp	.+6      	; 0x70e2 <reflect+0x64>
    70dc:	81 2c       	mov	r8, r1
    70de:	91 2c       	mov	r9, r1
    70e0:	54 01       	movw	r10, r8
    70e2:	c5 01       	movw	r24, r10
    70e4:	b4 01       	movw	r22, r8
    70e6:	df 91       	pop	r29
    70e8:	cf 91       	pop	r28
    70ea:	ff 90       	pop	r15
    70ec:	ef 90       	pop	r14
    70ee:	df 90       	pop	r13
    70f0:	cf 90       	pop	r12
    70f2:	bf 90       	pop	r11
    70f4:	af 90       	pop	r10
    70f6:	9f 90       	pop	r9
    70f8:	8f 90       	pop	r8
    70fa:	08 95       	ret

000070fc <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
    70fc:	e8 ea       	ldi	r30, 0xA8	; 168
    70fe:	f3 e2       	ldi	r31, 0x23	; 35


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    7100:	40 e0       	ldi	r20, 0x00	; 0
    7102:	50 e0       	ldi	r21, 0x00	; 0
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
    7104:	38 e0       	ldi	r19, 0x08	; 8
    7106:	94 2f       	mov	r25, r20
    7108:	88 27       	eor	r24, r24
    710a:	23 2f       	mov	r18, r19
        for (bit = 8; bit > 0; --bit)
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
    710c:	99 23       	and	r25, r25
    710e:	34 f4       	brge	.+12     	; 0x711c <crcInit+0x20>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
    7110:	88 0f       	add	r24, r24
    7112:	99 1f       	adc	r25, r25
    7114:	65 e0       	ldi	r22, 0x05	; 5
    7116:	86 27       	eor	r24, r22
    7118:	90 58       	subi	r25, 0x80	; 128
    711a:	02 c0       	rjmp	.+4      	; 0x7120 <crcInit+0x24>
            }
            else
            {
                remainder = (remainder << 1);
    711c:	88 0f       	add	r24, r24
    711e:	99 1f       	adc	r25, r25
    7120:	21 50       	subi	r18, 0x01	; 1
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
    7122:	a1 f7       	brne	.-24     	; 0x710c <crcInit+0x10>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    7124:	81 93       	st	Z+, r24
    7126:	91 93       	st	Z+, r25


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    7128:	4f 5f       	subi	r20, 0xFF	; 255
    712a:	5f 4f       	sbci	r21, 0xFF	; 255
    712c:	41 15       	cp	r20, r1
    712e:	81 e0       	ldi	r24, 0x01	; 1
    7130:	58 07       	cpc	r21, r24
    7132:	49 f7       	brne	.-46     	; 0x7106 <crcInit+0xa>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
    7134:	08 95       	ret

00007136 <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    7136:	ef 92       	push	r14
    7138:	ff 92       	push	r15
    713a:	0f 93       	push	r16
    713c:	1f 93       	push	r17
    713e:	cf 93       	push	r28
    7140:	df 93       	push	r29


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    7142:	16 16       	cp	r1, r22
    7144:	17 06       	cpc	r1, r23
    7146:	fc f4       	brge	.+62     	; 0x7186 <crcFast+0x50>
    7148:	7c 01       	movw	r14, r24
    714a:	8c 01       	movw	r16, r24
    714c:	06 0f       	add	r16, r22
    714e:	17 1f       	adc	r17, r23
    7150:	c0 e0       	ldi	r28, 0x00	; 0
    7152:	d0 e0       	ldi	r29, 0x00	; 0
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
    7154:	f7 01       	movw	r30, r14
    7156:	61 91       	ld	r22, Z+
    7158:	7f 01       	movw	r14, r30
    715a:	70 e0       	ldi	r23, 0x00	; 0
    715c:	80 e0       	ldi	r24, 0x00	; 0
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	48 e0       	ldi	r20, 0x08	; 8
    7162:	8d df       	rcall	.-230    	; 0x707e <reflect>
    7164:	6d 27       	eor	r22, r29
  		remainder = crcTable[data] ^ (remainder << 8);
    7166:	e6 2f       	mov	r30, r22
    7168:	f0 e0       	ldi	r31, 0x00	; 0
    716a:	ee 0f       	add	r30, r30
    716c:	ff 1f       	adc	r31, r31
    716e:	e8 55       	subi	r30, 0x58	; 88
    7170:	fc 4d       	sbci	r31, 0xDC	; 220
    7172:	80 81       	ld	r24, Z
    7174:	91 81       	ldd	r25, Z+1	; 0x01
    7176:	dc 2f       	mov	r29, r28
    7178:	cc 27       	eor	r28, r28
    717a:	c8 27       	eor	r28, r24
    717c:	d9 27       	eor	r29, r25


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    717e:	e0 16       	cp	r14, r16
    7180:	f1 06       	cpc	r15, r17
    7182:	41 f7       	brne	.-48     	; 0x7154 <crcFast+0x1e>
    7184:	02 c0       	rjmp	.+4      	; 0x718a <crcFast+0x54>
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    crc	           remainder = INITIAL_REMAINDER;
    7186:	c0 e0       	ldi	r28, 0x00	; 0
    7188:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
    718a:	be 01       	movw	r22, r28
    718c:	80 e0       	ldi	r24, 0x00	; 0
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	40 e1       	ldi	r20, 0x10	; 16
    7192:	75 df       	rcall	.-278    	; 0x707e <reflect>

}   /* crcFast() */
    7194:	cb 01       	movw	r24, r22
    7196:	df 91       	pop	r29
    7198:	cf 91       	pop	r28
    719a:	1f 91       	pop	r17
    719c:	0f 91       	pop	r16
    719e:	ff 90       	pop	r15
    71a0:	ef 90       	pop	r14
    71a2:	08 95       	ret

000071a4 <md5_process>:
 */
void md5_hmac_reset( md5_context *ctx )
{
    md5_starts( ctx );
    md5_update( ctx, ctx->ipad, 64 );
}
    71a4:	2f 92       	push	r2
    71a6:	3f 92       	push	r3
    71a8:	4f 92       	push	r4
    71aa:	5f 92       	push	r5
    71ac:	6f 92       	push	r6
    71ae:	7f 92       	push	r7
    71b0:	8f 92       	push	r8
    71b2:	9f 92       	push	r9
    71b4:	af 92       	push	r10
    71b6:	bf 92       	push	r11
    71b8:	cf 92       	push	r12
    71ba:	df 92       	push	r13
    71bc:	ef 92       	push	r14
    71be:	ff 92       	push	r15
    71c0:	0f 93       	push	r16
    71c2:	1f 93       	push	r17
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
    71c8:	cd b7       	in	r28, 0x3d	; 61
    71ca:	de b7       	in	r29, 0x3e	; 62
    71cc:	c0 55       	subi	r28, 0x50	; 80
    71ce:	d1 09       	sbc	r29, r1
    71d0:	0f b6       	in	r0, 0x3f	; 63
    71d2:	f8 94       	cli
    71d4:	de bf       	out	0x3e, r29	; 62
    71d6:	0f be       	out	0x3f, r0	; 63
    71d8:	cd bf       	out	0x3d, r28	; 61
    71da:	1c 01       	movw	r2, r24
    71dc:	fb 01       	movw	r30, r22
    71de:	21 81       	ldd	r18, Z+1	; 0x01
    71e0:	82 81       	ldd	r24, Z+2	; 0x02
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	a0 e0       	ldi	r26, 0x00	; 0
    71e6:	b0 e0       	ldi	r27, 0x00	; 0
    71e8:	dc 01       	movw	r26, r24
    71ea:	99 27       	eor	r25, r25
    71ec:	88 27       	eor	r24, r24
    71ee:	92 2b       	or	r25, r18
    71f0:	20 81       	ld	r18, Z
    71f2:	6c 01       	movw	r12, r24
    71f4:	7d 01       	movw	r14, r26
    71f6:	c2 2a       	or	r12, r18
    71f8:	23 81       	ldd	r18, Z+3	; 0x03
    71fa:	b7 01       	movw	r22, r14
    71fc:	a6 01       	movw	r20, r12
    71fe:	72 2b       	or	r23, r18
    7200:	49 87       	std	Y+9, r20	; 0x09
    7202:	5a 87       	std	Y+10, r21	; 0x0a
    7204:	6b 87       	std	Y+11, r22	; 0x0b
    7206:	7c 87       	std	Y+12, r23	; 0x0c
    7208:	85 81       	ldd	r24, Z+5	; 0x05
    720a:	86 80       	ldd	r8, Z+6	; 0x06
    720c:	91 2c       	mov	r9, r1
    720e:	a1 2c       	mov	r10, r1
    7210:	b1 2c       	mov	r11, r1
    7212:	54 01       	movw	r10, r8
    7214:	99 24       	eor	r9, r9
    7216:	88 24       	eor	r8, r8
    7218:	98 2a       	or	r9, r24
    721a:	84 81       	ldd	r24, Z+4	; 0x04
    721c:	88 2a       	or	r8, r24
    721e:	87 81       	ldd	r24, Z+7	; 0x07
    7220:	75 01       	movw	r14, r10
    7222:	64 01       	movw	r12, r8
    7224:	f8 2a       	or	r15, r24
    7226:	cd 86       	std	Y+13, r12	; 0x0d
    7228:	de 86       	std	Y+14, r13	; 0x0e
    722a:	ef 86       	std	Y+15, r14	; 0x0f
    722c:	f8 8a       	std	Y+16, r15	; 0x10
    722e:	81 85       	ldd	r24, Z+9	; 0x09
    7230:	82 84       	ldd	r8, Z+10	; 0x0a
    7232:	91 2c       	mov	r9, r1
    7234:	a1 2c       	mov	r10, r1
    7236:	b1 2c       	mov	r11, r1
    7238:	54 01       	movw	r10, r8
    723a:	99 24       	eor	r9, r9
    723c:	88 24       	eor	r8, r8
    723e:	98 2a       	or	r9, r24
    7240:	80 85       	ldd	r24, Z+8	; 0x08
    7242:	88 2a       	or	r8, r24
    7244:	83 85       	ldd	r24, Z+11	; 0x0b
    7246:	85 01       	movw	r16, r10
    7248:	74 01       	movw	r14, r8
    724a:	18 2b       	or	r17, r24
    724c:	e9 8a       	std	Y+17, r14	; 0x11
    724e:	fa 8a       	std	Y+18, r15	; 0x12
    7250:	0b 8b       	std	Y+19, r16	; 0x13
    7252:	1c 8b       	std	Y+20, r17	; 0x14
    7254:	85 85       	ldd	r24, Z+13	; 0x0d
    7256:	06 85       	ldd	r16, Z+14	; 0x0e
    7258:	10 e0       	ldi	r17, 0x00	; 0
    725a:	20 e0       	ldi	r18, 0x00	; 0
    725c:	30 e0       	ldi	r19, 0x00	; 0
    725e:	98 01       	movw	r18, r16
    7260:	11 27       	eor	r17, r17
    7262:	00 27       	eor	r16, r16
    7264:	18 2b       	or	r17, r24
    7266:	84 85       	ldd	r24, Z+12	; 0x0c
    7268:	08 2b       	or	r16, r24
    726a:	87 85       	ldd	r24, Z+15	; 0x0f
    726c:	b9 01       	movw	r22, r18
    726e:	a8 01       	movw	r20, r16
    7270:	78 2b       	or	r23, r24
    7272:	4d 8b       	std	Y+21, r20	; 0x15
    7274:	5e 8b       	std	Y+22, r21	; 0x16
    7276:	6f 8b       	std	Y+23, r22	; 0x17
    7278:	78 8f       	std	Y+24, r23	; 0x18
    727a:	81 89       	ldd	r24, Z+17	; 0x11
    727c:	82 88       	ldd	r8, Z+18	; 0x12
    727e:	91 2c       	mov	r9, r1
    7280:	a1 2c       	mov	r10, r1
    7282:	b1 2c       	mov	r11, r1
    7284:	54 01       	movw	r10, r8
    7286:	99 24       	eor	r9, r9
    7288:	88 24       	eor	r8, r8
    728a:	98 2a       	or	r9, r24
    728c:	80 89       	ldd	r24, Z+16	; 0x10
    728e:	88 2a       	or	r8, r24
    7290:	83 89       	ldd	r24, Z+19	; 0x13
    7292:	75 01       	movw	r14, r10
    7294:	64 01       	movw	r12, r8
    7296:	f8 2a       	or	r15, r24
    7298:	c9 8e       	std	Y+25, r12	; 0x19
    729a:	da 8e       	std	Y+26, r13	; 0x1a
    729c:	eb 8e       	std	Y+27, r14	; 0x1b
    729e:	fc 8e       	std	Y+28, r15	; 0x1c
    72a0:	85 89       	ldd	r24, Z+21	; 0x15
    72a2:	06 89       	ldd	r16, Z+22	; 0x16
    72a4:	10 e0       	ldi	r17, 0x00	; 0
    72a6:	20 e0       	ldi	r18, 0x00	; 0
    72a8:	30 e0       	ldi	r19, 0x00	; 0
    72aa:	98 01       	movw	r18, r16
    72ac:	11 27       	eor	r17, r17
    72ae:	00 27       	eor	r16, r16
    72b0:	18 2b       	or	r17, r24
    72b2:	84 89       	ldd	r24, Z+20	; 0x14
    72b4:	08 2b       	or	r16, r24
    72b6:	87 89       	ldd	r24, Z+23	; 0x17
    72b8:	b9 01       	movw	r22, r18
    72ba:	a8 01       	movw	r20, r16
    72bc:	78 2b       	or	r23, r24
    72be:	4d 8f       	std	Y+29, r20	; 0x1d
    72c0:	5e 8f       	std	Y+30, r21	; 0x1e
    72c2:	6f 8f       	std	Y+31, r22	; 0x1f
    72c4:	78 a3       	std	Y+32, r23	; 0x20
    72c6:	81 8d       	ldd	r24, Z+25	; 0x19
    72c8:	82 8c       	ldd	r8, Z+26	; 0x1a
    72ca:	91 2c       	mov	r9, r1
    72cc:	a1 2c       	mov	r10, r1
    72ce:	b1 2c       	mov	r11, r1
    72d0:	54 01       	movw	r10, r8
    72d2:	99 24       	eor	r9, r9
    72d4:	88 24       	eor	r8, r8
    72d6:	98 2a       	or	r9, r24
    72d8:	80 8d       	ldd	r24, Z+24	; 0x18
    72da:	88 2a       	or	r8, r24
    72dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    72de:	75 01       	movw	r14, r10
    72e0:	64 01       	movw	r12, r8
    72e2:	f8 2a       	or	r15, r24
    72e4:	c9 a2       	std	Y+33, r12	; 0x21
    72e6:	da a2       	std	Y+34, r13	; 0x22
    72e8:	eb a2       	std	Y+35, r14	; 0x23
    72ea:	fc a2       	std	Y+36, r15	; 0x24
    72ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    72ee:	06 8d       	ldd	r16, Z+30	; 0x1e
    72f0:	10 e0       	ldi	r17, 0x00	; 0
    72f2:	20 e0       	ldi	r18, 0x00	; 0
    72f4:	30 e0       	ldi	r19, 0x00	; 0
    72f6:	98 01       	movw	r18, r16
    72f8:	11 27       	eor	r17, r17
    72fa:	00 27       	eor	r16, r16
    72fc:	18 2b       	or	r17, r24
    72fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    7300:	08 2b       	or	r16, r24
    7302:	87 8d       	ldd	r24, Z+31	; 0x1f
    7304:	b9 01       	movw	r22, r18
    7306:	a8 01       	movw	r20, r16
    7308:	78 2b       	or	r23, r24
    730a:	4d a3       	std	Y+37, r20	; 0x25
    730c:	5e a3       	std	Y+38, r21	; 0x26
    730e:	6f a3       	std	Y+39, r22	; 0x27
    7310:	78 a7       	std	Y+40, r23	; 0x28
    7312:	81 a1       	ldd	r24, Z+33	; 0x21
    7314:	82 a0       	ldd	r8, Z+34	; 0x22
    7316:	91 2c       	mov	r9, r1
    7318:	a1 2c       	mov	r10, r1
    731a:	b1 2c       	mov	r11, r1
    731c:	54 01       	movw	r10, r8
    731e:	99 24       	eor	r9, r9
    7320:	88 24       	eor	r8, r8
    7322:	98 2a       	or	r9, r24
    7324:	80 a1       	ldd	r24, Z+32	; 0x20
    7326:	88 2a       	or	r8, r24
    7328:	83 a1       	ldd	r24, Z+35	; 0x23
    732a:	75 01       	movw	r14, r10
    732c:	64 01       	movw	r12, r8
    732e:	f8 2a       	or	r15, r24
    7330:	c9 a6       	std	Y+41, r12	; 0x29
    7332:	da a6       	std	Y+42, r13	; 0x2a
    7334:	eb a6       	std	Y+43, r14	; 0x2b
    7336:	fc a6       	std	Y+44, r15	; 0x2c
    7338:	85 a1       	ldd	r24, Z+37	; 0x25
    733a:	c6 a0       	ldd	r12, Z+38	; 0x26
    733c:	d1 2c       	mov	r13, r1
    733e:	e1 2c       	mov	r14, r1
    7340:	f1 2c       	mov	r15, r1
    7342:	76 01       	movw	r14, r12
    7344:	dd 24       	eor	r13, r13
    7346:	cc 24       	eor	r12, r12
    7348:	d8 2a       	or	r13, r24
    734a:	84 a1       	ldd	r24, Z+36	; 0x24
    734c:	c8 2a       	or	r12, r24
    734e:	87 a1       	ldd	r24, Z+39	; 0x27
    7350:	97 01       	movw	r18, r14
    7352:	86 01       	movw	r16, r12
    7354:	38 2b       	or	r19, r24
    7356:	0d a7       	std	Y+45, r16	; 0x2d
    7358:	1e a7       	std	Y+46, r17	; 0x2e
    735a:	2f a7       	std	Y+47, r18	; 0x2f
    735c:	38 ab       	std	Y+48, r19	; 0x30
    735e:	81 a5       	ldd	r24, Z+41	; 0x29
    7360:	02 a5       	ldd	r16, Z+42	; 0x2a
    7362:	10 e0       	ldi	r17, 0x00	; 0
    7364:	20 e0       	ldi	r18, 0x00	; 0
    7366:	30 e0       	ldi	r19, 0x00	; 0
    7368:	98 01       	movw	r18, r16
    736a:	11 27       	eor	r17, r17
    736c:	00 27       	eor	r16, r16
    736e:	18 2b       	or	r17, r24
    7370:	80 a5       	ldd	r24, Z+40	; 0x28
    7372:	08 2b       	or	r16, r24
    7374:	83 a5       	ldd	r24, Z+43	; 0x2b
    7376:	b9 01       	movw	r22, r18
    7378:	a8 01       	movw	r20, r16
    737a:	78 2b       	or	r23, r24
    737c:	49 ab       	std	Y+49, r20	; 0x31
    737e:	5a ab       	std	Y+50, r21	; 0x32
    7380:	6b ab       	std	Y+51, r22	; 0x33
    7382:	7c ab       	std	Y+52, r23	; 0x34
    7384:	85 a5       	ldd	r24, Z+45	; 0x2d
    7386:	46 a5       	ldd	r20, Z+46	; 0x2e
    7388:	50 e0       	ldi	r21, 0x00	; 0
    738a:	60 e0       	ldi	r22, 0x00	; 0
    738c:	70 e0       	ldi	r23, 0x00	; 0
    738e:	ba 01       	movw	r22, r20
    7390:	55 27       	eor	r21, r21
    7392:	44 27       	eor	r20, r20
    7394:	58 2b       	or	r21, r24
    7396:	84 a5       	ldd	r24, Z+44	; 0x2c
    7398:	48 2b       	or	r20, r24
    739a:	87 a5       	ldd	r24, Z+47	; 0x2f
    739c:	6a 01       	movw	r12, r20
    739e:	7b 01       	movw	r14, r22
    73a0:	f8 2a       	or	r15, r24
    73a2:	cd aa       	std	Y+53, r12	; 0x35
    73a4:	de aa       	std	Y+54, r13	; 0x36
    73a6:	ef aa       	std	Y+55, r14	; 0x37
    73a8:	f8 ae       	std	Y+56, r15	; 0x38
    73aa:	81 a9       	ldd	r24, Z+49	; 0x31
    73ac:	02 a9       	ldd	r16, Z+50	; 0x32
    73ae:	10 e0       	ldi	r17, 0x00	; 0
    73b0:	20 e0       	ldi	r18, 0x00	; 0
    73b2:	30 e0       	ldi	r19, 0x00	; 0
    73b4:	98 01       	movw	r18, r16
    73b6:	11 27       	eor	r17, r17
    73b8:	00 27       	eor	r16, r16
    73ba:	18 2b       	or	r17, r24
    73bc:	80 a9       	ldd	r24, Z+48	; 0x30
    73be:	08 2b       	or	r16, r24
    73c0:	83 a9       	ldd	r24, Z+51	; 0x33
    73c2:	b9 01       	movw	r22, r18
    73c4:	a8 01       	movw	r20, r16
    73c6:	78 2b       	or	r23, r24
    73c8:	49 af       	std	Y+57, r20	; 0x39
    73ca:	5a af       	std	Y+58, r21	; 0x3a
    73cc:	6b af       	std	Y+59, r22	; 0x3b
    73ce:	7c af       	std	Y+60, r23	; 0x3c
    73d0:	85 a9       	ldd	r24, Z+53	; 0x35
    73d2:	86 a8       	ldd	r8, Z+54	; 0x36
    73d4:	91 2c       	mov	r9, r1
    73d6:	a1 2c       	mov	r10, r1
    73d8:	b1 2c       	mov	r11, r1
    73da:	54 01       	movw	r10, r8
    73dc:	99 24       	eor	r9, r9
    73de:	88 24       	eor	r8, r8
    73e0:	98 2a       	or	r9, r24
    73e2:	84 a9       	ldd	r24, Z+52	; 0x34
    73e4:	88 2a       	or	r8, r24
    73e6:	87 a9       	ldd	r24, Z+55	; 0x37
    73e8:	75 01       	movw	r14, r10
    73ea:	64 01       	movw	r12, r8
    73ec:	f8 2a       	or	r15, r24
    73ee:	21 96       	adiw	r28, 0x01	; 1
    73f0:	cc ae       	std	Y+60, r12	; 0x3c
    73f2:	dd ae       	std	Y+61, r13	; 0x3d
    73f4:	ee ae       	std	Y+62, r14	; 0x3e
    73f6:	ff ae       	std	Y+63, r15	; 0x3f
    73f8:	21 97       	sbiw	r28, 0x01	; 1
    73fa:	81 ad       	ldd	r24, Z+57	; 0x39
    73fc:	02 ad       	ldd	r16, Z+58	; 0x3a
    73fe:	10 e0       	ldi	r17, 0x00	; 0
    7400:	20 e0       	ldi	r18, 0x00	; 0
    7402:	30 e0       	ldi	r19, 0x00	; 0
    7404:	98 01       	movw	r18, r16
    7406:	11 27       	eor	r17, r17
    7408:	00 27       	eor	r16, r16
    740a:	18 2b       	or	r17, r24
    740c:	80 ad       	ldd	r24, Z+56	; 0x38
    740e:	08 2b       	or	r16, r24
    7410:	83 ad       	ldd	r24, Z+59	; 0x3b
    7412:	b9 01       	movw	r22, r18
    7414:	a8 01       	movw	r20, r16
    7416:	78 2b       	or	r23, r24
    7418:	25 96       	adiw	r28, 0x05	; 5
    741a:	4c af       	std	Y+60, r20	; 0x3c
    741c:	5d af       	std	Y+61, r21	; 0x3d
    741e:	6e af       	std	Y+62, r22	; 0x3e
    7420:	7f af       	std	Y+63, r23	; 0x3f
    7422:	25 97       	sbiw	r28, 0x05	; 5
    7424:	85 ad       	ldd	r24, Z+61	; 0x3d
    7426:	46 ad       	ldd	r20, Z+62	; 0x3e
    7428:	50 e0       	ldi	r21, 0x00	; 0
    742a:	60 e0       	ldi	r22, 0x00	; 0
    742c:	70 e0       	ldi	r23, 0x00	; 0
    742e:	ba 01       	movw	r22, r20
    7430:	55 27       	eor	r21, r21
    7432:	44 27       	eor	r20, r20
    7434:	58 2b       	or	r21, r24
    7436:	84 ad       	ldd	r24, Z+60	; 0x3c
    7438:	48 2b       	or	r20, r24
    743a:	87 ad       	ldd	r24, Z+63	; 0x3f
    743c:	6a 01       	movw	r12, r20
    743e:	7b 01       	movw	r14, r22
    7440:	f8 2a       	or	r15, r24
    7442:	29 96       	adiw	r28, 0x09	; 9
    7444:	cc ae       	std	Y+60, r12	; 0x3c
    7446:	dd ae       	std	Y+61, r13	; 0x3d
    7448:	ee ae       	std	Y+62, r14	; 0x3e
    744a:	ff ae       	std	Y+63, r15	; 0x3f
    744c:	29 97       	sbiw	r28, 0x09	; 9
    744e:	d1 01       	movw	r26, r2
    7450:	18 96       	adiw	r26, 0x08	; 8
    7452:	ed 90       	ld	r14, X+
    7454:	fd 90       	ld	r15, X+
    7456:	0d 91       	ld	r16, X+
    7458:	1c 91       	ld	r17, X
    745a:	1b 97       	sbiw	r26, 0x0b	; 11
    745c:	61 96       	adiw	r28, 0x11	; 17
    745e:	ec ae       	std	Y+60, r14	; 0x3c
    7460:	fd ae       	std	Y+61, r15	; 0x3d
    7462:	0e af       	std	Y+62, r16	; 0x3e
    7464:	1f af       	std	Y+63, r17	; 0x3f
    7466:	61 97       	sbiw	r28, 0x11	; 17
    7468:	1c 96       	adiw	r26, 0x0c	; 12
    746a:	cd 90       	ld	r12, X+
    746c:	dd 90       	ld	r13, X+
    746e:	ed 90       	ld	r14, X+
    7470:	fc 90       	ld	r15, X
    7472:	1f 97       	sbiw	r26, 0x0f	; 15
    7474:	c9 82       	std	Y+1, r12	; 0x01
    7476:	da 82       	std	Y+2, r13	; 0x02
    7478:	eb 82       	std	Y+3, r14	; 0x03
    747a:	fc 82       	std	Y+4, r15	; 0x04
    747c:	50 96       	adiw	r26, 0x10	; 16
    747e:	cd 90       	ld	r12, X+
    7480:	dd 90       	ld	r13, X+
    7482:	ed 90       	ld	r14, X+
    7484:	fc 90       	ld	r15, X
    7486:	53 97       	sbiw	r26, 0x13	; 19
    7488:	cd 82       	std	Y+5, r12	; 0x05
    748a:	de 82       	std	Y+6, r13	; 0x06
    748c:	ef 82       	std	Y+7, r14	; 0x07
    748e:	f8 86       	std	Y+8, r15	; 0x08
    7490:	54 96       	adiw	r26, 0x14	; 20
    7492:	cd 90       	ld	r12, X+
    7494:	dd 90       	ld	r13, X+
    7496:	ed 90       	ld	r14, X+
    7498:	fc 90       	ld	r15, X
    749a:	57 97       	sbiw	r26, 0x17	; 23
    749c:	2d 96       	adiw	r28, 0x0d	; 13
    749e:	cc ae       	std	Y+60, r12	; 0x3c
    74a0:	dd ae       	std	Y+61, r13	; 0x3d
    74a2:	ee ae       	std	Y+62, r14	; 0x3e
    74a4:	ff ae       	std	Y+63, r15	; 0x3f
    74a6:	2d 97       	sbiw	r28, 0x0d	; 13
    74a8:	61 96       	adiw	r28, 0x11	; 17
    74aa:	4c ad       	ldd	r20, Y+60	; 0x3c
    74ac:	5d ad       	ldd	r21, Y+61	; 0x3d
    74ae:	6e ad       	ldd	r22, Y+62	; 0x3e
    74b0:	7f ad       	ldd	r23, Y+63	; 0x3f
    74b2:	61 97       	sbiw	r28, 0x11	; 17
    74b4:	48 58       	subi	r20, 0x88	; 136
    74b6:	5b 45       	sbci	r21, 0x5B	; 91
    74b8:	65 49       	sbci	r22, 0x95	; 149
    74ba:	78 42       	sbci	r23, 0x28	; 40
    74bc:	d7 01       	movw	r26, r14
    74be:	c6 01       	movw	r24, r12
    74c0:	cd 80       	ldd	r12, Y+5	; 0x05
    74c2:	de 80       	ldd	r13, Y+6	; 0x06
    74c4:	ef 80       	ldd	r14, Y+7	; 0x07
    74c6:	f8 84       	ldd	r15, Y+8	; 0x08
    74c8:	8c 25       	eor	r24, r12
    74ca:	9d 25       	eor	r25, r13
    74cc:	ae 25       	eor	r26, r14
    74ce:	bf 25       	eor	r27, r15
    74d0:	e9 80       	ldd	r14, Y+1	; 0x01
    74d2:	fa 80       	ldd	r15, Y+2	; 0x02
    74d4:	0b 81       	ldd	r16, Y+3	; 0x03
    74d6:	1c 81       	ldd	r17, Y+4	; 0x04
    74d8:	8e 21       	and	r24, r14
    74da:	9f 21       	and	r25, r15
    74dc:	a0 23       	and	r26, r16
    74de:	b1 23       	and	r27, r17
    74e0:	2d 96       	adiw	r28, 0x0d	; 13
    74e2:	0c ad       	ldd	r16, Y+60	; 0x3c
    74e4:	1d ad       	ldd	r17, Y+61	; 0x3d
    74e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    74e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    74ea:	2d 97       	sbiw	r28, 0x0d	; 13
    74ec:	80 27       	eor	r24, r16
    74ee:	91 27       	eor	r25, r17
    74f0:	a2 27       	eor	r26, r18
    74f2:	b3 27       	eor	r27, r19
    74f4:	84 0f       	add	r24, r20
    74f6:	95 1f       	adc	r25, r21
    74f8:	a6 1f       	adc	r26, r22
    74fa:	b7 1f       	adc	r27, r23
    74fc:	29 85       	ldd	r18, Y+9	; 0x09
    74fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    7500:	4b 85       	ldd	r20, Y+11	; 0x0b
    7502:	5c 85       	ldd	r21, Y+12	; 0x0c
    7504:	82 0f       	add	r24, r18
    7506:	93 1f       	adc	r25, r19
    7508:	a4 1f       	adc	r26, r20
    750a:	b5 1f       	adc	r27, r21
    750c:	8c 01       	movw	r16, r24
    750e:	9d 01       	movw	r18, r26
    7510:	00 0f       	add	r16, r16
    7512:	11 1f       	adc	r17, r17
    7514:	22 1f       	adc	r18, r18
    7516:	33 1f       	adc	r19, r19
    7518:	00 0f       	add	r16, r16
    751a:	11 1f       	adc	r17, r17
    751c:	22 1f       	adc	r18, r18
    751e:	33 1f       	adc	r19, r19
    7520:	00 0f       	add	r16, r16
    7522:	11 1f       	adc	r17, r17
    7524:	22 1f       	adc	r18, r18
    7526:	33 1f       	adc	r19, r19
    7528:	00 0f       	add	r16, r16
    752a:	11 1f       	adc	r17, r17
    752c:	22 1f       	adc	r18, r18
    752e:	33 1f       	adc	r19, r19
    7530:	00 0f       	add	r16, r16
    7532:	11 1f       	adc	r17, r17
    7534:	22 1f       	adc	r18, r18
    7536:	33 1f       	adc	r19, r19
    7538:	00 0f       	add	r16, r16
    753a:	11 1f       	adc	r17, r17
    753c:	22 1f       	adc	r18, r18
    753e:	33 1f       	adc	r19, r19
    7540:	00 0f       	add	r16, r16
    7542:	11 1f       	adc	r17, r17
    7544:	22 1f       	adc	r18, r18
    7546:	33 1f       	adc	r19, r19
    7548:	07 2e       	mov	r0, r23
    754a:	79 e1       	ldi	r23, 0x19	; 25
    754c:	b6 95       	lsr	r27
    754e:	a7 95       	ror	r26
    7550:	97 95       	ror	r25
    7552:	87 95       	ror	r24
    7554:	7a 95       	dec	r23
    7556:	d1 f7       	brne	.-12     	; 0x754c <md5_process+0x3a8>
    7558:	70 2d       	mov	r23, r0
    755a:	80 2b       	or	r24, r16
    755c:	91 2b       	or	r25, r17
    755e:	a2 2b       	or	r26, r18
    7560:	b3 2b       	or	r27, r19
    7562:	49 81       	ldd	r20, Y+1	; 0x01
    7564:	5a 81       	ldd	r21, Y+2	; 0x02
    7566:	6b 81       	ldd	r22, Y+3	; 0x03
    7568:	7c 81       	ldd	r23, Y+4	; 0x04
    756a:	84 0f       	add	r24, r20
    756c:	95 1f       	adc	r25, r21
    756e:	a6 1f       	adc	r26, r22
    7570:	b7 1f       	adc	r27, r23
    7572:	2d 96       	adiw	r28, 0x0d	; 13
    7574:	0c ad       	ldd	r16, Y+60	; 0x3c
    7576:	1d ad       	ldd	r17, Y+61	; 0x3d
    7578:	2e ad       	ldd	r18, Y+62	; 0x3e
    757a:	3f ad       	ldd	r19, Y+63	; 0x3f
    757c:	2d 97       	sbiw	r28, 0x0d	; 13
    757e:	0a 5a       	subi	r16, 0xAA	; 170
    7580:	18 44       	sbci	r17, 0x48	; 72
    7582:	28 43       	sbci	r18, 0x38	; 56
    7584:	37 41       	sbci	r19, 0x17	; 23
    7586:	4d 85       	ldd	r20, Y+13	; 0x0d
    7588:	5e 85       	ldd	r21, Y+14	; 0x0e
    758a:	6f 85       	ldd	r22, Y+15	; 0x0f
    758c:	78 89       	ldd	r23, Y+16	; 0x10
    758e:	40 0f       	add	r20, r16
    7590:	51 1f       	adc	r21, r17
    7592:	62 1f       	adc	r22, r18
    7594:	73 1f       	adc	r23, r19
    7596:	0d 81       	ldd	r16, Y+5	; 0x05
    7598:	1e 81       	ldd	r17, Y+6	; 0x06
    759a:	2f 81       	ldd	r18, Y+7	; 0x07
    759c:	38 85       	ldd	r19, Y+8	; 0x08
    759e:	c9 80       	ldd	r12, Y+1	; 0x01
    75a0:	da 80       	ldd	r13, Y+2	; 0x02
    75a2:	eb 80       	ldd	r14, Y+3	; 0x03
    75a4:	fc 80       	ldd	r15, Y+4	; 0x04
    75a6:	0c 25       	eor	r16, r12
    75a8:	1d 25       	eor	r17, r13
    75aa:	2e 25       	eor	r18, r14
    75ac:	3f 25       	eor	r19, r15
    75ae:	08 23       	and	r16, r24
    75b0:	19 23       	and	r17, r25
    75b2:	2a 23       	and	r18, r26
    75b4:	3b 23       	and	r19, r27
    75b6:	cd 80       	ldd	r12, Y+5	; 0x05
    75b8:	de 80       	ldd	r13, Y+6	; 0x06
    75ba:	ef 80       	ldd	r14, Y+7	; 0x07
    75bc:	f8 84       	ldd	r15, Y+8	; 0x08
    75be:	0c 25       	eor	r16, r12
    75c0:	1d 25       	eor	r17, r13
    75c2:	2e 25       	eor	r18, r14
    75c4:	3f 25       	eor	r19, r15
    75c6:	04 0f       	add	r16, r20
    75c8:	15 1f       	adc	r17, r21
    75ca:	26 1f       	adc	r18, r22
    75cc:	37 1f       	adc	r19, r23
    75ce:	b9 01       	movw	r22, r18
    75d0:	a8 01       	movw	r20, r16
    75d2:	03 2e       	mov	r0, r19
    75d4:	3c e0       	ldi	r19, 0x0C	; 12
    75d6:	44 0f       	add	r20, r20
    75d8:	55 1f       	adc	r21, r21
    75da:	66 1f       	adc	r22, r22
    75dc:	77 1f       	adc	r23, r23
    75de:	3a 95       	dec	r19
    75e0:	d1 f7       	brne	.-12     	; 0x75d6 <md5_process+0x432>
    75e2:	30 2d       	mov	r19, r0
    75e4:	0f 2e       	mov	r0, r31
    75e6:	f4 e1       	ldi	r31, 0x14	; 20
    75e8:	36 95       	lsr	r19
    75ea:	27 95       	ror	r18
    75ec:	17 95       	ror	r17
    75ee:	07 95       	ror	r16
    75f0:	fa 95       	dec	r31
    75f2:	d1 f7       	brne	.-12     	; 0x75e8 <md5_process+0x444>
    75f4:	f0 2d       	mov	r31, r0
    75f6:	04 2b       	or	r16, r20
    75f8:	15 2b       	or	r17, r21
    75fa:	26 2b       	or	r18, r22
    75fc:	37 2b       	or	r19, r23
    75fe:	08 0f       	add	r16, r24
    7600:	19 1f       	adc	r17, r25
    7602:	2a 1f       	adc	r18, r26
    7604:	3b 1f       	adc	r19, r27
    7606:	46 01       	movw	r8, r12
    7608:	57 01       	movw	r10, r14
    760a:	45 e2       	ldi	r20, 0x25	; 37
    760c:	84 1a       	sub	r8, r20
    760e:	4f e8       	ldi	r20, 0x8F	; 143
    7610:	94 0a       	sbc	r9, r20
    7612:	4f ed       	ldi	r20, 0xDF	; 223
    7614:	a4 0a       	sbc	r10, r20
    7616:	4b ed       	ldi	r20, 0xDB	; 219
    7618:	b4 0a       	sbc	r11, r20
    761a:	49 89       	ldd	r20, Y+17	; 0x11
    761c:	5a 89       	ldd	r21, Y+18	; 0x12
    761e:	6b 89       	ldd	r22, Y+19	; 0x13
    7620:	7c 89       	ldd	r23, Y+20	; 0x14
    7622:	48 0d       	add	r20, r8
    7624:	59 1d       	adc	r21, r9
    7626:	6a 1d       	adc	r22, r10
    7628:	7b 1d       	adc	r23, r11
    762a:	89 80       	ldd	r8, Y+1	; 0x01
    762c:	9a 80       	ldd	r9, Y+2	; 0x02
    762e:	ab 80       	ldd	r10, Y+3	; 0x03
    7630:	bc 80       	ldd	r11, Y+4	; 0x04
    7632:	88 26       	eor	r8, r24
    7634:	99 26       	eor	r9, r25
    7636:	aa 26       	eor	r10, r26
    7638:	bb 26       	eor	r11, r27
    763a:	80 22       	and	r8, r16
    763c:	91 22       	and	r9, r17
    763e:	a2 22       	and	r10, r18
    7640:	b3 22       	and	r11, r19
    7642:	c9 80       	ldd	r12, Y+1	; 0x01
    7644:	da 80       	ldd	r13, Y+2	; 0x02
    7646:	eb 80       	ldd	r14, Y+3	; 0x03
    7648:	fc 80       	ldd	r15, Y+4	; 0x04
    764a:	8c 24       	eor	r8, r12
    764c:	9d 24       	eor	r9, r13
    764e:	ae 24       	eor	r10, r14
    7650:	bf 24       	eor	r11, r15
    7652:	84 0e       	add	r8, r20
    7654:	95 1e       	adc	r9, r21
    7656:	a6 1e       	adc	r10, r22
    7658:	b7 1e       	adc	r11, r23
    765a:	b5 01       	movw	r22, r10
    765c:	a4 01       	movw	r20, r8
    765e:	03 2e       	mov	r0, r19
    7660:	3f e0       	ldi	r19, 0x0F	; 15
    7662:	76 95       	lsr	r23
    7664:	67 95       	ror	r22
    7666:	57 95       	ror	r21
    7668:	47 95       	ror	r20
    766a:	3a 95       	dec	r19
    766c:	d1 f7       	brne	.-12     	; 0x7662 <md5_process+0x4be>
    766e:	30 2d       	mov	r19, r0
    7670:	07 2e       	mov	r0, r23
    7672:	71 e1       	ldi	r23, 0x11	; 17
    7674:	88 0c       	add	r8, r8
    7676:	99 1c       	adc	r9, r9
    7678:	aa 1c       	adc	r10, r10
    767a:	bb 1c       	adc	r11, r11
    767c:	7a 95       	dec	r23
    767e:	d1 f7       	brne	.-12     	; 0x7674 <md5_process+0x4d0>
    7680:	70 2d       	mov	r23, r0
    7682:	84 2a       	or	r8, r20
    7684:	95 2a       	or	r9, r21
    7686:	a6 2a       	or	r10, r22
    7688:	b7 2a       	or	r11, r23
    768a:	80 0e       	add	r8, r16
    768c:	91 1e       	adc	r9, r17
    768e:	a2 1e       	adc	r10, r18
    7690:	b3 1e       	adc	r11, r19
    7692:	42 e1       	ldi	r20, 0x12	; 18
    7694:	c4 1a       	sub	r12, r20
    7696:	41 e3       	ldi	r20, 0x31	; 49
    7698:	d4 0a       	sbc	r13, r20
    769a:	42 e4       	ldi	r20, 0x42	; 66
    769c:	e4 0a       	sbc	r14, r20
    769e:	4e e3       	ldi	r20, 0x3E	; 62
    76a0:	f4 0a       	sbc	r15, r20
    76a2:	4d 89       	ldd	r20, Y+21	; 0x15
    76a4:	5e 89       	ldd	r21, Y+22	; 0x16
    76a6:	6f 89       	ldd	r22, Y+23	; 0x17
    76a8:	78 8d       	ldd	r23, Y+24	; 0x18
    76aa:	4c 0d       	add	r20, r12
    76ac:	5d 1d       	adc	r21, r13
    76ae:	6e 1d       	adc	r22, r14
    76b0:	7f 1d       	adc	r23, r15
    76b2:	68 01       	movw	r12, r16
    76b4:	79 01       	movw	r14, r18
    76b6:	c8 26       	eor	r12, r24
    76b8:	d9 26       	eor	r13, r25
    76ba:	ea 26       	eor	r14, r26
    76bc:	fb 26       	eor	r15, r27
    76be:	c8 20       	and	r12, r8
    76c0:	d9 20       	and	r13, r9
    76c2:	ea 20       	and	r14, r10
    76c4:	fb 20       	and	r15, r11
    76c6:	c8 26       	eor	r12, r24
    76c8:	d9 26       	eor	r13, r25
    76ca:	ea 26       	eor	r14, r26
    76cc:	fb 26       	eor	r15, r27
    76ce:	c4 0e       	add	r12, r20
    76d0:	d5 1e       	adc	r13, r21
    76d2:	e6 1e       	adc	r14, r22
    76d4:	f7 1e       	adc	r15, r23
    76d6:	b7 01       	movw	r22, r14
    76d8:	a6 01       	movw	r20, r12
    76da:	03 2e       	mov	r0, r19
    76dc:	3a e0       	ldi	r19, 0x0A	; 10
    76de:	76 95       	lsr	r23
    76e0:	67 95       	ror	r22
    76e2:	57 95       	ror	r21
    76e4:	47 95       	ror	r20
    76e6:	3a 95       	dec	r19
    76e8:	d1 f7       	brne	.-12     	; 0x76de <md5_process+0x53a>
    76ea:	30 2d       	mov	r19, r0
    76ec:	0b 2e       	mov	r0, r27
    76ee:	b6 e1       	ldi	r27, 0x16	; 22
    76f0:	cc 0c       	add	r12, r12
    76f2:	dd 1c       	adc	r13, r13
    76f4:	ee 1c       	adc	r14, r14
    76f6:	ff 1c       	adc	r15, r15
    76f8:	ba 95       	dec	r27
    76fa:	d1 f7       	brne	.-12     	; 0x76f0 <md5_process+0x54c>
    76fc:	b0 2d       	mov	r27, r0
    76fe:	c4 2a       	or	r12, r20
    7700:	d5 2a       	or	r13, r21
    7702:	e6 2a       	or	r14, r22
    7704:	f7 2a       	or	r15, r23
    7706:	c8 0c       	add	r12, r8
    7708:	d9 1c       	adc	r13, r9
    770a:	ea 1c       	adc	r14, r10
    770c:	fb 1c       	adc	r15, r11
    770e:	49 8d       	ldd	r20, Y+25	; 0x19
    7710:	5a 8d       	ldd	r21, Y+26	; 0x1a
    7712:	6b 8d       	ldd	r22, Y+27	; 0x1b
    7714:	7c 8d       	ldd	r23, Y+28	; 0x1c
    7716:	41 55       	subi	r20, 0x51	; 81
    7718:	50 4f       	sbci	r21, 0xF0	; 240
    771a:	63 48       	sbci	r22, 0x83	; 131
    771c:	7a 40       	sbci	r23, 0x0A	; 10
    771e:	84 0f       	add	r24, r20
    7720:	95 1f       	adc	r25, r21
    7722:	a6 1f       	adc	r26, r22
    7724:	b7 1f       	adc	r27, r23
    7726:	b5 01       	movw	r22, r10
    7728:	a4 01       	movw	r20, r8
    772a:	40 27       	eor	r20, r16
    772c:	51 27       	eor	r21, r17
    772e:	62 27       	eor	r22, r18
    7730:	73 27       	eor	r23, r19
    7732:	4c 21       	and	r20, r12
    7734:	5d 21       	and	r21, r13
    7736:	6e 21       	and	r22, r14
    7738:	7f 21       	and	r23, r15
    773a:	40 27       	eor	r20, r16
    773c:	51 27       	eor	r21, r17
    773e:	62 27       	eor	r22, r18
    7740:	73 27       	eor	r23, r19
    7742:	84 0f       	add	r24, r20
    7744:	95 1f       	adc	r25, r21
    7746:	a6 1f       	adc	r26, r22
    7748:	b7 1f       	adc	r27, r23
    774a:	2c 01       	movw	r4, r24
    774c:	3d 01       	movw	r6, r26
    774e:	44 0c       	add	r4, r4
    7750:	55 1c       	adc	r5, r5
    7752:	66 1c       	adc	r6, r6
    7754:	77 1c       	adc	r7, r7
    7756:	44 0c       	add	r4, r4
    7758:	55 1c       	adc	r5, r5
    775a:	66 1c       	adc	r6, r6
    775c:	77 1c       	adc	r7, r7
    775e:	44 0c       	add	r4, r4
    7760:	55 1c       	adc	r5, r5
    7762:	66 1c       	adc	r6, r6
    7764:	77 1c       	adc	r7, r7
    7766:	44 0c       	add	r4, r4
    7768:	55 1c       	adc	r5, r5
    776a:	66 1c       	adc	r6, r6
    776c:	77 1c       	adc	r7, r7
    776e:	44 0c       	add	r4, r4
    7770:	55 1c       	adc	r5, r5
    7772:	66 1c       	adc	r6, r6
    7774:	77 1c       	adc	r7, r7
    7776:	44 0c       	add	r4, r4
    7778:	55 1c       	adc	r5, r5
    777a:	66 1c       	adc	r6, r6
    777c:	77 1c       	adc	r7, r7
    777e:	44 0c       	add	r4, r4
    7780:	55 1c       	adc	r5, r5
    7782:	66 1c       	adc	r6, r6
    7784:	77 1c       	adc	r7, r7
    7786:	07 2e       	mov	r0, r23
    7788:	79 e1       	ldi	r23, 0x19	; 25
    778a:	b6 95       	lsr	r27
    778c:	a7 95       	ror	r26
    778e:	97 95       	ror	r25
    7790:	87 95       	ror	r24
    7792:	7a 95       	dec	r23
    7794:	d1 f7       	brne	.-12     	; 0x778a <md5_process+0x5e6>
    7796:	70 2d       	mov	r23, r0
    7798:	84 29       	or	r24, r4
    779a:	95 29       	or	r25, r5
    779c:	a6 29       	or	r26, r6
    779e:	b7 29       	or	r27, r7
    77a0:	8c 0d       	add	r24, r12
    77a2:	9d 1d       	adc	r25, r13
    77a4:	ae 1d       	adc	r26, r14
    77a6:	bf 1d       	adc	r27, r15
    77a8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    77aa:	5e 8d       	ldd	r21, Y+30	; 0x1e
    77ac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    77ae:	78 a1       	ldd	r23, Y+32	; 0x20
    77b0:	46 5d       	subi	r20, 0xD6	; 214
    77b2:	59 43       	sbci	r21, 0x39	; 57
    77b4:	68 47       	sbci	r22, 0x78	; 120
    77b6:	78 4b       	sbci	r23, 0xB8	; 184
    77b8:	04 0f       	add	r16, r20
    77ba:	15 1f       	adc	r17, r21
    77bc:	26 1f       	adc	r18, r22
    77be:	37 1f       	adc	r19, r23
    77c0:	b7 01       	movw	r22, r14
    77c2:	a6 01       	movw	r20, r12
    77c4:	48 25       	eor	r20, r8
    77c6:	59 25       	eor	r21, r9
    77c8:	6a 25       	eor	r22, r10
    77ca:	7b 25       	eor	r23, r11
    77cc:	48 23       	and	r20, r24
    77ce:	59 23       	and	r21, r25
    77d0:	6a 23       	and	r22, r26
    77d2:	7b 23       	and	r23, r27
    77d4:	48 25       	eor	r20, r8
    77d6:	59 25       	eor	r21, r9
    77d8:	6a 25       	eor	r22, r10
    77da:	7b 25       	eor	r23, r11
    77dc:	04 0f       	add	r16, r20
    77de:	15 1f       	adc	r17, r21
    77e0:	26 1f       	adc	r18, r22
    77e2:	37 1f       	adc	r19, r23
    77e4:	b9 01       	movw	r22, r18
    77e6:	a8 01       	movw	r20, r16
    77e8:	03 2e       	mov	r0, r19
    77ea:	3c e0       	ldi	r19, 0x0C	; 12
    77ec:	44 0f       	add	r20, r20
    77ee:	55 1f       	adc	r21, r21
    77f0:	66 1f       	adc	r22, r22
    77f2:	77 1f       	adc	r23, r23
    77f4:	3a 95       	dec	r19
    77f6:	d1 f7       	brne	.-12     	; 0x77ec <md5_process+0x648>
    77f8:	30 2d       	mov	r19, r0
    77fa:	0f 2e       	mov	r0, r31
    77fc:	f4 e1       	ldi	r31, 0x14	; 20
    77fe:	36 95       	lsr	r19
    7800:	27 95       	ror	r18
    7802:	17 95       	ror	r17
    7804:	07 95       	ror	r16
    7806:	fa 95       	dec	r31
    7808:	d1 f7       	brne	.-12     	; 0x77fe <md5_process+0x65a>
    780a:	f0 2d       	mov	r31, r0
    780c:	04 2b       	or	r16, r20
    780e:	15 2b       	or	r17, r21
    7810:	26 2b       	or	r18, r22
    7812:	37 2b       	or	r19, r23
    7814:	08 0f       	add	r16, r24
    7816:	19 1f       	adc	r17, r25
    7818:	2a 1f       	adc	r18, r26
    781a:	3b 1f       	adc	r19, r27
    781c:	49 a1       	ldd	r20, Y+33	; 0x21
    781e:	5a a1       	ldd	r21, Y+34	; 0x22
    7820:	6b a1       	ldd	r22, Y+35	; 0x23
    7822:	7c a1       	ldd	r23, Y+36	; 0x24
    7824:	4d 5e       	subi	r20, 0xED	; 237
    7826:	59 4b       	sbci	r21, 0xB9	; 185
    7828:	6f 4c       	sbci	r22, 0xCF	; 207
    782a:	77 45       	sbci	r23, 0x57	; 87
    782c:	84 0e       	add	r8, r20
    782e:	95 1e       	adc	r9, r21
    7830:	a6 1e       	adc	r10, r22
    7832:	b7 1e       	adc	r11, r23
    7834:	ac 01       	movw	r20, r24
    7836:	bd 01       	movw	r22, r26
    7838:	4c 25       	eor	r20, r12
    783a:	5d 25       	eor	r21, r13
    783c:	6e 25       	eor	r22, r14
    783e:	7f 25       	eor	r23, r15
    7840:	40 23       	and	r20, r16
    7842:	51 23       	and	r21, r17
    7844:	62 23       	and	r22, r18
    7846:	73 23       	and	r23, r19
    7848:	4c 25       	eor	r20, r12
    784a:	5d 25       	eor	r21, r13
    784c:	6e 25       	eor	r22, r14
    784e:	7f 25       	eor	r23, r15
    7850:	84 0e       	add	r8, r20
    7852:	95 1e       	adc	r9, r21
    7854:	a6 1e       	adc	r10, r22
    7856:	b7 1e       	adc	r11, r23
    7858:	b5 01       	movw	r22, r10
    785a:	a4 01       	movw	r20, r8
    785c:	03 2e       	mov	r0, r19
    785e:	3f e0       	ldi	r19, 0x0F	; 15
    7860:	76 95       	lsr	r23
    7862:	67 95       	ror	r22
    7864:	57 95       	ror	r21
    7866:	47 95       	ror	r20
    7868:	3a 95       	dec	r19
    786a:	d1 f7       	brne	.-12     	; 0x7860 <md5_process+0x6bc>
    786c:	30 2d       	mov	r19, r0
    786e:	07 2e       	mov	r0, r23
    7870:	71 e1       	ldi	r23, 0x11	; 17
    7872:	88 0c       	add	r8, r8
    7874:	99 1c       	adc	r9, r9
    7876:	aa 1c       	adc	r10, r10
    7878:	bb 1c       	adc	r11, r11
    787a:	7a 95       	dec	r23
    787c:	d1 f7       	brne	.-12     	; 0x7872 <md5_process+0x6ce>
    787e:	70 2d       	mov	r23, r0
    7880:	84 2a       	or	r8, r20
    7882:	95 2a       	or	r9, r21
    7884:	a6 2a       	or	r10, r22
    7886:	b7 2a       	or	r11, r23
    7888:	80 0e       	add	r8, r16
    788a:	91 1e       	adc	r9, r17
    788c:	a2 1e       	adc	r10, r18
    788e:	b3 1e       	adc	r11, r19
    7890:	4d a1       	ldd	r20, Y+37	; 0x25
    7892:	5e a1       	ldd	r21, Y+38	; 0x26
    7894:	6f a1       	ldd	r22, Y+39	; 0x27
    7896:	78 a5       	ldd	r23, Y+40	; 0x28
    7898:	4f 5f       	subi	r20, 0xFF	; 255
    789a:	5a 46       	sbci	r21, 0x6A	; 106
    789c:	69 4b       	sbci	r22, 0xB9	; 185
    789e:	72 40       	sbci	r23, 0x02	; 2
    78a0:	c4 0e       	add	r12, r20
    78a2:	d5 1e       	adc	r13, r21
    78a4:	e6 1e       	adc	r14, r22
    78a6:	f7 1e       	adc	r15, r23
    78a8:	b9 01       	movw	r22, r18
    78aa:	a8 01       	movw	r20, r16
    78ac:	48 27       	eor	r20, r24
    78ae:	59 27       	eor	r21, r25
    78b0:	6a 27       	eor	r22, r26
    78b2:	7b 27       	eor	r23, r27
    78b4:	48 21       	and	r20, r8
    78b6:	59 21       	and	r21, r9
    78b8:	6a 21       	and	r22, r10
    78ba:	7b 21       	and	r23, r11
    78bc:	48 27       	eor	r20, r24
    78be:	59 27       	eor	r21, r25
    78c0:	6a 27       	eor	r22, r26
    78c2:	7b 27       	eor	r23, r27
    78c4:	c4 0e       	add	r12, r20
    78c6:	d5 1e       	adc	r13, r21
    78c8:	e6 1e       	adc	r14, r22
    78ca:	f7 1e       	adc	r15, r23
    78cc:	b7 01       	movw	r22, r14
    78ce:	a6 01       	movw	r20, r12
    78d0:	03 2e       	mov	r0, r19
    78d2:	3a e0       	ldi	r19, 0x0A	; 10
    78d4:	76 95       	lsr	r23
    78d6:	67 95       	ror	r22
    78d8:	57 95       	ror	r21
    78da:	47 95       	ror	r20
    78dc:	3a 95       	dec	r19
    78de:	d1 f7       	brne	.-12     	; 0x78d4 <md5_process+0x730>
    78e0:	30 2d       	mov	r19, r0
    78e2:	0b 2e       	mov	r0, r27
    78e4:	b6 e1       	ldi	r27, 0x16	; 22
    78e6:	cc 0c       	add	r12, r12
    78e8:	dd 1c       	adc	r13, r13
    78ea:	ee 1c       	adc	r14, r14
    78ec:	ff 1c       	adc	r15, r15
    78ee:	ba 95       	dec	r27
    78f0:	d1 f7       	brne	.-12     	; 0x78e6 <md5_process+0x742>
    78f2:	b0 2d       	mov	r27, r0
    78f4:	c4 2a       	or	r12, r20
    78f6:	d5 2a       	or	r13, r21
    78f8:	e6 2a       	or	r14, r22
    78fa:	f7 2a       	or	r15, r23
    78fc:	c8 0c       	add	r12, r8
    78fe:	d9 1c       	adc	r13, r9
    7900:	ea 1c       	adc	r14, r10
    7902:	fb 1c       	adc	r15, r11
    7904:	49 a5       	ldd	r20, Y+41	; 0x29
    7906:	5a a5       	ldd	r21, Y+42	; 0x2a
    7908:	6b a5       	ldd	r22, Y+43	; 0x2b
    790a:	7c a5       	ldd	r23, Y+44	; 0x2c
    790c:	48 52       	subi	r20, 0x28	; 40
    790e:	57 46       	sbci	r21, 0x67	; 103
    7910:	6f 47       	sbci	r22, 0x7F	; 127
    7912:	76 49       	sbci	r23, 0x96	; 150
    7914:	84 0f       	add	r24, r20
    7916:	95 1f       	adc	r25, r21
    7918:	a6 1f       	adc	r26, r22
    791a:	b7 1f       	adc	r27, r23
    791c:	b5 01       	movw	r22, r10
    791e:	a4 01       	movw	r20, r8
    7920:	40 27       	eor	r20, r16
    7922:	51 27       	eor	r21, r17
    7924:	62 27       	eor	r22, r18
    7926:	73 27       	eor	r23, r19
    7928:	4c 21       	and	r20, r12
    792a:	5d 21       	and	r21, r13
    792c:	6e 21       	and	r22, r14
    792e:	7f 21       	and	r23, r15
    7930:	2a 01       	movw	r4, r20
    7932:	3b 01       	movw	r6, r22
    7934:	40 26       	eor	r4, r16
    7936:	51 26       	eor	r5, r17
    7938:	62 26       	eor	r6, r18
    793a:	73 26       	eor	r7, r19
    793c:	ac 01       	movw	r20, r24
    793e:	bd 01       	movw	r22, r26
    7940:	44 0d       	add	r20, r4
    7942:	55 1d       	adc	r21, r5
    7944:	66 1d       	adc	r22, r6
    7946:	77 1d       	adc	r23, r7
    7948:	2a 01       	movw	r4, r20
    794a:	3b 01       	movw	r6, r22
    794c:	44 0c       	add	r4, r4
    794e:	55 1c       	adc	r5, r5
    7950:	66 1c       	adc	r6, r6
    7952:	77 1c       	adc	r7, r7
    7954:	44 0c       	add	r4, r4
    7956:	55 1c       	adc	r5, r5
    7958:	66 1c       	adc	r6, r6
    795a:	77 1c       	adc	r7, r7
    795c:	44 0c       	add	r4, r4
    795e:	55 1c       	adc	r5, r5
    7960:	66 1c       	adc	r6, r6
    7962:	77 1c       	adc	r7, r7
    7964:	44 0c       	add	r4, r4
    7966:	55 1c       	adc	r5, r5
    7968:	66 1c       	adc	r6, r6
    796a:	77 1c       	adc	r7, r7
    796c:	44 0c       	add	r4, r4
    796e:	55 1c       	adc	r5, r5
    7970:	66 1c       	adc	r6, r6
    7972:	77 1c       	adc	r7, r7
    7974:	44 0c       	add	r4, r4
    7976:	55 1c       	adc	r5, r5
    7978:	66 1c       	adc	r6, r6
    797a:	77 1c       	adc	r7, r7
    797c:	44 0c       	add	r4, r4
    797e:	55 1c       	adc	r5, r5
    7980:	66 1c       	adc	r6, r6
    7982:	77 1c       	adc	r7, r7
    7984:	03 2e       	mov	r0, r19
    7986:	39 e1       	ldi	r19, 0x19	; 25
    7988:	76 95       	lsr	r23
    798a:	67 95       	ror	r22
    798c:	57 95       	ror	r21
    798e:	47 95       	ror	r20
    7990:	3a 95       	dec	r19
    7992:	d1 f7       	brne	.-12     	; 0x7988 <md5_process+0x7e4>
    7994:	30 2d       	mov	r19, r0
    7996:	44 29       	or	r20, r4
    7998:	55 29       	or	r21, r5
    799a:	66 29       	or	r22, r6
    799c:	77 29       	or	r23, r7
    799e:	4c 0d       	add	r20, r12
    79a0:	5d 1d       	adc	r21, r13
    79a2:	6e 1d       	adc	r22, r14
    79a4:	7f 1d       	adc	r23, r15
    79a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    79a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    79aa:	af a5       	ldd	r26, Y+47	; 0x2f
    79ac:	b8 a9       	ldd	r27, Y+48	; 0x30
    79ae:	81 55       	subi	r24, 0x51	; 81
    79b0:	98 40       	sbci	r25, 0x08	; 8
    79b2:	ab 4b       	sbci	r26, 0xBB	; 187
    79b4:	b4 47       	sbci	r27, 0x74	; 116
    79b6:	08 0f       	add	r16, r24
    79b8:	19 1f       	adc	r17, r25
    79ba:	2a 1f       	adc	r18, r26
    79bc:	3b 1f       	adc	r19, r27
    79be:	d7 01       	movw	r26, r14
    79c0:	c6 01       	movw	r24, r12
    79c2:	88 25       	eor	r24, r8
    79c4:	99 25       	eor	r25, r9
    79c6:	aa 25       	eor	r26, r10
    79c8:	bb 25       	eor	r27, r11
    79ca:	84 23       	and	r24, r20
    79cc:	95 23       	and	r25, r21
    79ce:	a6 23       	and	r26, r22
    79d0:	b7 23       	and	r27, r23
    79d2:	88 25       	eor	r24, r8
    79d4:	99 25       	eor	r25, r9
    79d6:	aa 25       	eor	r26, r10
    79d8:	bb 25       	eor	r27, r11
    79da:	08 0f       	add	r16, r24
    79dc:	19 1f       	adc	r17, r25
    79de:	2a 1f       	adc	r18, r26
    79e0:	3b 1f       	adc	r19, r27
    79e2:	d9 01       	movw	r26, r18
    79e4:	c8 01       	movw	r24, r16
    79e6:	07 2e       	mov	r0, r23
    79e8:	7c e0       	ldi	r23, 0x0C	; 12
    79ea:	88 0f       	add	r24, r24
    79ec:	99 1f       	adc	r25, r25
    79ee:	aa 1f       	adc	r26, r26
    79f0:	bb 1f       	adc	r27, r27
    79f2:	7a 95       	dec	r23
    79f4:	d1 f7       	brne	.-12     	; 0x79ea <md5_process+0x846>
    79f6:	70 2d       	mov	r23, r0
    79f8:	0f 2e       	mov	r0, r31
    79fa:	f4 e1       	ldi	r31, 0x14	; 20
    79fc:	36 95       	lsr	r19
    79fe:	27 95       	ror	r18
    7a00:	17 95       	ror	r17
    7a02:	07 95       	ror	r16
    7a04:	fa 95       	dec	r31
    7a06:	d1 f7       	brne	.-12     	; 0x79fc <md5_process+0x858>
    7a08:	f0 2d       	mov	r31, r0
    7a0a:	08 2b       	or	r16, r24
    7a0c:	19 2b       	or	r17, r25
    7a0e:	2a 2b       	or	r18, r26
    7a10:	3b 2b       	or	r19, r27
    7a12:	04 0f       	add	r16, r20
    7a14:	15 1f       	adc	r17, r21
    7a16:	26 1f       	adc	r18, r22
    7a18:	37 1f       	adc	r19, r23
    7a1a:	89 a9       	ldd	r24, Y+49	; 0x31
    7a1c:	9a a9       	ldd	r25, Y+50	; 0x32
    7a1e:	ab a9       	ldd	r26, Y+51	; 0x33
    7a20:	bc a9       	ldd	r27, Y+52	; 0x34
    7a22:	8f 54       	subi	r24, 0x4F	; 79
    7a24:	94 4a       	sbci	r25, 0xA4	; 164
    7a26:	a1 09       	sbc	r26, r1
    7a28:	b1 09       	sbc	r27, r1
    7a2a:	88 0e       	add	r8, r24
    7a2c:	99 1e       	adc	r9, r25
    7a2e:	aa 1e       	adc	r10, r26
    7a30:	bb 1e       	adc	r11, r27
    7a32:	db 01       	movw	r26, r22
    7a34:	ca 01       	movw	r24, r20
    7a36:	8c 25       	eor	r24, r12
    7a38:	9d 25       	eor	r25, r13
    7a3a:	ae 25       	eor	r26, r14
    7a3c:	bf 25       	eor	r27, r15
    7a3e:	80 23       	and	r24, r16
    7a40:	91 23       	and	r25, r17
    7a42:	a2 23       	and	r26, r18
    7a44:	b3 23       	and	r27, r19
    7a46:	8c 25       	eor	r24, r12
    7a48:	9d 25       	eor	r25, r13
    7a4a:	ae 25       	eor	r26, r14
    7a4c:	bf 25       	eor	r27, r15
    7a4e:	88 0e       	add	r8, r24
    7a50:	99 1e       	adc	r9, r25
    7a52:	aa 1e       	adc	r10, r26
    7a54:	bb 1e       	adc	r11, r27
    7a56:	d5 01       	movw	r26, r10
    7a58:	c4 01       	movw	r24, r8
    7a5a:	07 2e       	mov	r0, r23
    7a5c:	7f e0       	ldi	r23, 0x0F	; 15
    7a5e:	b6 95       	lsr	r27
    7a60:	a7 95       	ror	r26
    7a62:	97 95       	ror	r25
    7a64:	87 95       	ror	r24
    7a66:	7a 95       	dec	r23
    7a68:	d1 f7       	brne	.-12     	; 0x7a5e <md5_process+0x8ba>
    7a6a:	70 2d       	mov	r23, r0
    7a6c:	07 2e       	mov	r0, r23
    7a6e:	71 e1       	ldi	r23, 0x11	; 17
    7a70:	88 0c       	add	r8, r8
    7a72:	99 1c       	adc	r9, r9
    7a74:	aa 1c       	adc	r10, r10
    7a76:	bb 1c       	adc	r11, r11
    7a78:	7a 95       	dec	r23
    7a7a:	d1 f7       	brne	.-12     	; 0x7a70 <md5_process+0x8cc>
    7a7c:	70 2d       	mov	r23, r0
    7a7e:	88 2a       	or	r8, r24
    7a80:	99 2a       	or	r9, r25
    7a82:	aa 2a       	or	r10, r26
    7a84:	bb 2a       	or	r11, r27
    7a86:	80 0e       	add	r8, r16
    7a88:	91 1e       	adc	r9, r17
    7a8a:	a2 1e       	adc	r10, r18
    7a8c:	b3 1e       	adc	r11, r19
    7a8e:	8d a9       	ldd	r24, Y+53	; 0x35
    7a90:	9e a9       	ldd	r25, Y+54	; 0x36
    7a92:	af a9       	ldd	r26, Y+55	; 0x37
    7a94:	b8 ad       	ldd	r27, Y+56	; 0x38
    7a96:	82 54       	subi	r24, 0x42	; 66
    7a98:	98 42       	sbci	r25, 0x28	; 40
    7a9a:	a3 4a       	sbci	r26, 0xA3	; 163
    7a9c:	b6 47       	sbci	r27, 0x76	; 118
    7a9e:	c8 0e       	add	r12, r24
    7aa0:	d9 1e       	adc	r13, r25
    7aa2:	ea 1e       	adc	r14, r26
    7aa4:	fb 1e       	adc	r15, r27
    7aa6:	d9 01       	movw	r26, r18
    7aa8:	c8 01       	movw	r24, r16
    7aaa:	84 27       	eor	r24, r20
    7aac:	95 27       	eor	r25, r21
    7aae:	a6 27       	eor	r26, r22
    7ab0:	b7 27       	eor	r27, r23
    7ab2:	88 21       	and	r24, r8
    7ab4:	99 21       	and	r25, r9
    7ab6:	aa 21       	and	r26, r10
    7ab8:	bb 21       	and	r27, r11
    7aba:	2c 01       	movw	r4, r24
    7abc:	3d 01       	movw	r6, r26
    7abe:	44 26       	eor	r4, r20
    7ac0:	55 26       	eor	r5, r21
    7ac2:	66 26       	eor	r6, r22
    7ac4:	77 26       	eor	r7, r23
    7ac6:	d7 01       	movw	r26, r14
    7ac8:	c6 01       	movw	r24, r12
    7aca:	84 0d       	add	r24, r4
    7acc:	95 1d       	adc	r25, r5
    7ace:	a6 1d       	adc	r26, r6
    7ad0:	b7 1d       	adc	r27, r7
    7ad2:	2c 01       	movw	r4, r24
    7ad4:	3d 01       	movw	r6, r26
    7ad6:	03 2e       	mov	r0, r19
    7ad8:	3a e0       	ldi	r19, 0x0A	; 10
    7ada:	76 94       	lsr	r7
    7adc:	67 94       	ror	r6
    7ade:	57 94       	ror	r5
    7ae0:	47 94       	ror	r4
    7ae2:	3a 95       	dec	r19
    7ae4:	d1 f7       	brne	.-12     	; 0x7ada <md5_process+0x936>
    7ae6:	30 2d       	mov	r19, r0
    7ae8:	07 2e       	mov	r0, r23
    7aea:	76 e1       	ldi	r23, 0x16	; 22
    7aec:	88 0f       	add	r24, r24
    7aee:	99 1f       	adc	r25, r25
    7af0:	aa 1f       	adc	r26, r26
    7af2:	bb 1f       	adc	r27, r27
    7af4:	7a 95       	dec	r23
    7af6:	d1 f7       	brne	.-12     	; 0x7aec <md5_process+0x948>
    7af8:	70 2d       	mov	r23, r0
    7afa:	84 29       	or	r24, r4
    7afc:	95 29       	or	r25, r5
    7afe:	a6 29       	or	r26, r6
    7b00:	b7 29       	or	r27, r7
    7b02:	88 0d       	add	r24, r8
    7b04:	99 1d       	adc	r25, r9
    7b06:	aa 1d       	adc	r26, r10
    7b08:	bb 1d       	adc	r27, r11
    7b0a:	c9 ac       	ldd	r12, Y+57	; 0x39
    7b0c:	da ac       	ldd	r13, Y+58	; 0x3a
    7b0e:	eb ac       	ldd	r14, Y+59	; 0x3b
    7b10:	fc ac       	ldd	r15, Y+60	; 0x3c
    7b12:	ee ed       	ldi	r30, 0xDE	; 222
    7b14:	ce 1a       	sub	r12, r30
    7b16:	ee ee       	ldi	r30, 0xEE	; 238
    7b18:	de 0a       	sbc	r13, r30
    7b1a:	ef e6       	ldi	r30, 0x6F	; 111
    7b1c:	ee 0a       	sbc	r14, r30
    7b1e:	e4 e9       	ldi	r30, 0x94	; 148
    7b20:	fe 0a       	sbc	r15, r30
    7b22:	4c 0d       	add	r20, r12
    7b24:	5d 1d       	adc	r21, r13
    7b26:	6e 1d       	adc	r22, r14
    7b28:	7f 1d       	adc	r23, r15
    7b2a:	75 01       	movw	r14, r10
    7b2c:	64 01       	movw	r12, r8
    7b2e:	c0 26       	eor	r12, r16
    7b30:	d1 26       	eor	r13, r17
    7b32:	e2 26       	eor	r14, r18
    7b34:	f3 26       	eor	r15, r19
    7b36:	c8 22       	and	r12, r24
    7b38:	d9 22       	and	r13, r25
    7b3a:	ea 22       	and	r14, r26
    7b3c:	fb 22       	and	r15, r27
    7b3e:	c0 26       	eor	r12, r16
    7b40:	d1 26       	eor	r13, r17
    7b42:	e2 26       	eor	r14, r18
    7b44:	f3 26       	eor	r15, r19
    7b46:	4c 0d       	add	r20, r12
    7b48:	5d 1d       	adc	r21, r13
    7b4a:	6e 1d       	adc	r22, r14
    7b4c:	7f 1d       	adc	r23, r15
    7b4e:	6a 01       	movw	r12, r20
    7b50:	7b 01       	movw	r14, r22
    7b52:	cc 0c       	add	r12, r12
    7b54:	dd 1c       	adc	r13, r13
    7b56:	ee 1c       	adc	r14, r14
    7b58:	ff 1c       	adc	r15, r15
    7b5a:	cc 0c       	add	r12, r12
    7b5c:	dd 1c       	adc	r13, r13
    7b5e:	ee 1c       	adc	r14, r14
    7b60:	ff 1c       	adc	r15, r15
    7b62:	cc 0c       	add	r12, r12
    7b64:	dd 1c       	adc	r13, r13
    7b66:	ee 1c       	adc	r14, r14
    7b68:	ff 1c       	adc	r15, r15
    7b6a:	cc 0c       	add	r12, r12
    7b6c:	dd 1c       	adc	r13, r13
    7b6e:	ee 1c       	adc	r14, r14
    7b70:	ff 1c       	adc	r15, r15
    7b72:	cc 0c       	add	r12, r12
    7b74:	dd 1c       	adc	r13, r13
    7b76:	ee 1c       	adc	r14, r14
    7b78:	ff 1c       	adc	r15, r15
    7b7a:	cc 0c       	add	r12, r12
    7b7c:	dd 1c       	adc	r13, r13
    7b7e:	ee 1c       	adc	r14, r14
    7b80:	ff 1c       	adc	r15, r15
    7b82:	cc 0c       	add	r12, r12
    7b84:	dd 1c       	adc	r13, r13
    7b86:	ee 1c       	adc	r14, r14
    7b88:	ff 1c       	adc	r15, r15
    7b8a:	03 2e       	mov	r0, r19
    7b8c:	39 e1       	ldi	r19, 0x19	; 25
    7b8e:	76 95       	lsr	r23
    7b90:	67 95       	ror	r22
    7b92:	57 95       	ror	r21
    7b94:	47 95       	ror	r20
    7b96:	3a 95       	dec	r19
    7b98:	d1 f7       	brne	.-12     	; 0x7b8e <md5_process+0x9ea>
    7b9a:	30 2d       	mov	r19, r0
    7b9c:	4c 29       	or	r20, r12
    7b9e:	5d 29       	or	r21, r13
    7ba0:	6e 29       	or	r22, r14
    7ba2:	7f 29       	or	r23, r15
    7ba4:	48 0f       	add	r20, r24
    7ba6:	59 1f       	adc	r21, r25
    7ba8:	6a 1f       	adc	r22, r26
    7baa:	7b 1f       	adc	r23, r27
    7bac:	21 96       	adiw	r28, 0x01	; 1
    7bae:	cc ac       	ldd	r12, Y+60	; 0x3c
    7bb0:	dd ac       	ldd	r13, Y+61	; 0x3d
    7bb2:	ee ac       	ldd	r14, Y+62	; 0x3e
    7bb4:	ff ac       	ldd	r15, Y+63	; 0x3f
    7bb6:	21 97       	sbiw	r28, 0x01	; 1
    7bb8:	fd e6       	ldi	r31, 0x6D	; 109
    7bba:	cf 1a       	sub	r12, r31
    7bbc:	fe e8       	ldi	r31, 0x8E	; 142
    7bbe:	df 0a       	sbc	r13, r31
    7bc0:	f7 e6       	ldi	r31, 0x67	; 103
    7bc2:	ef 0a       	sbc	r14, r31
    7bc4:	f2 e0       	ldi	r31, 0x02	; 2
    7bc6:	ff 0a       	sbc	r15, r31
    7bc8:	0c 0d       	add	r16, r12
    7bca:	1d 1d       	adc	r17, r13
    7bcc:	2e 1d       	adc	r18, r14
    7bce:	3f 1d       	adc	r19, r15
    7bd0:	6c 01       	movw	r12, r24
    7bd2:	7d 01       	movw	r14, r26
    7bd4:	c8 24       	eor	r12, r8
    7bd6:	d9 24       	eor	r13, r9
    7bd8:	ea 24       	eor	r14, r10
    7bda:	fb 24       	eor	r15, r11
    7bdc:	c4 22       	and	r12, r20
    7bde:	d5 22       	and	r13, r21
    7be0:	e6 22       	and	r14, r22
    7be2:	f7 22       	and	r15, r23
    7be4:	c8 24       	eor	r12, r8
    7be6:	d9 24       	eor	r13, r9
    7be8:	ea 24       	eor	r14, r10
    7bea:	fb 24       	eor	r15, r11
    7bec:	0c 0d       	add	r16, r12
    7bee:	1d 1d       	adc	r17, r13
    7bf0:	2e 1d       	adc	r18, r14
    7bf2:	3f 1d       	adc	r19, r15
    7bf4:	68 01       	movw	r12, r16
    7bf6:	79 01       	movw	r14, r18
    7bf8:	0b 2e       	mov	r0, r27
    7bfa:	bc e0       	ldi	r27, 0x0C	; 12
    7bfc:	cc 0c       	add	r12, r12
    7bfe:	dd 1c       	adc	r13, r13
    7c00:	ee 1c       	adc	r14, r14
    7c02:	ff 1c       	adc	r15, r15
    7c04:	ba 95       	dec	r27
    7c06:	d1 f7       	brne	.-12     	; 0x7bfc <md5_process+0xa58>
    7c08:	b0 2d       	mov	r27, r0
    7c0a:	0f 2e       	mov	r0, r31
    7c0c:	f4 e1       	ldi	r31, 0x14	; 20
    7c0e:	36 95       	lsr	r19
    7c10:	27 95       	ror	r18
    7c12:	17 95       	ror	r17
    7c14:	07 95       	ror	r16
    7c16:	fa 95       	dec	r31
    7c18:	d1 f7       	brne	.-12     	; 0x7c0e <md5_process+0xa6a>
    7c1a:	f0 2d       	mov	r31, r0
    7c1c:	0c 29       	or	r16, r12
    7c1e:	1d 29       	or	r17, r13
    7c20:	2e 29       	or	r18, r14
    7c22:	3f 29       	or	r19, r15
    7c24:	04 0f       	add	r16, r20
    7c26:	15 1f       	adc	r17, r21
    7c28:	26 1f       	adc	r18, r22
    7c2a:	37 1f       	adc	r19, r23
    7c2c:	25 96       	adiw	r28, 0x05	; 5
    7c2e:	cc ac       	ldd	r12, Y+60	; 0x3c
    7c30:	dd ac       	ldd	r13, Y+61	; 0x3d
    7c32:	ee ac       	ldd	r14, Y+62	; 0x3e
    7c34:	ff ac       	ldd	r15, Y+63	; 0x3f
    7c36:	25 97       	sbiw	r28, 0x05	; 5
    7c38:	e2 e7       	ldi	r30, 0x72	; 114
    7c3a:	ce 1a       	sub	r12, r30
    7c3c:	ec eb       	ldi	r30, 0xBC	; 188
    7c3e:	de 0a       	sbc	r13, r30
    7c40:	e6 e8       	ldi	r30, 0x86	; 134
    7c42:	ee 0a       	sbc	r14, r30
    7c44:	e9 e5       	ldi	r30, 0x59	; 89
    7c46:	fe 0a       	sbc	r15, r30
    7c48:	8c 0c       	add	r8, r12
    7c4a:	9d 1c       	adc	r9, r13
    7c4c:	ae 1c       	adc	r10, r14
    7c4e:	bf 1c       	adc	r11, r15
    7c50:	6a 01       	movw	r12, r20
    7c52:	7b 01       	movw	r14, r22
    7c54:	c8 26       	eor	r12, r24
    7c56:	d9 26       	eor	r13, r25
    7c58:	ea 26       	eor	r14, r26
    7c5a:	fb 26       	eor	r15, r27
    7c5c:	c0 22       	and	r12, r16
    7c5e:	d1 22       	and	r13, r17
    7c60:	e2 22       	and	r14, r18
    7c62:	f3 22       	and	r15, r19
    7c64:	c8 26       	eor	r12, r24
    7c66:	d9 26       	eor	r13, r25
    7c68:	ea 26       	eor	r14, r26
    7c6a:	fb 26       	eor	r15, r27
    7c6c:	8c 0c       	add	r8, r12
    7c6e:	9d 1c       	adc	r9, r13
    7c70:	ae 1c       	adc	r10, r14
    7c72:	bf 1c       	adc	r11, r15
    7c74:	75 01       	movw	r14, r10
    7c76:	64 01       	movw	r12, r8
    7c78:	0b 2e       	mov	r0, r27
    7c7a:	bf e0       	ldi	r27, 0x0F	; 15
    7c7c:	f6 94       	lsr	r15
    7c7e:	e7 94       	ror	r14
    7c80:	d7 94       	ror	r13
    7c82:	c7 94       	ror	r12
    7c84:	ba 95       	dec	r27
    7c86:	d1 f7       	brne	.-12     	; 0x7c7c <md5_process+0xad8>
    7c88:	b0 2d       	mov	r27, r0
    7c8a:	07 2e       	mov	r0, r23
    7c8c:	71 e1       	ldi	r23, 0x11	; 17
    7c8e:	88 0c       	add	r8, r8
    7c90:	99 1c       	adc	r9, r9
    7c92:	aa 1c       	adc	r10, r10
    7c94:	bb 1c       	adc	r11, r11
    7c96:	7a 95       	dec	r23
    7c98:	d1 f7       	brne	.-12     	; 0x7c8e <md5_process+0xaea>
    7c9a:	70 2d       	mov	r23, r0
    7c9c:	8c 28       	or	r8, r12
    7c9e:	9d 28       	or	r9, r13
    7ca0:	ae 28       	or	r10, r14
    7ca2:	bf 28       	or	r11, r15
    7ca4:	80 0e       	add	r8, r16
    7ca6:	91 1e       	adc	r9, r17
    7ca8:	a2 1e       	adc	r10, r18
    7caa:	b3 1e       	adc	r11, r19
    7cac:	29 96       	adiw	r28, 0x09	; 9
    7cae:	cc ac       	ldd	r12, Y+60	; 0x3c
    7cb0:	dd ac       	ldd	r13, Y+61	; 0x3d
    7cb2:	ee ac       	ldd	r14, Y+62	; 0x3e
    7cb4:	ff ac       	ldd	r15, Y+63	; 0x3f
    7cb6:	29 97       	sbiw	r28, 0x09	; 9
    7cb8:	ff ed       	ldi	r31, 0xDF	; 223
    7cba:	cf 1a       	sub	r12, r31
    7cbc:	f7 ef       	ldi	r31, 0xF7	; 247
    7cbe:	df 0a       	sbc	r13, r31
    7cc0:	fb e4       	ldi	r31, 0x4B	; 75
    7cc2:	ef 0a       	sbc	r14, r31
    7cc4:	f6 eb       	ldi	r31, 0xB6	; 182
    7cc6:	ff 0a       	sbc	r15, r31
    7cc8:	8c 0d       	add	r24, r12
    7cca:	9d 1d       	adc	r25, r13
    7ccc:	ae 1d       	adc	r26, r14
    7cce:	bf 1d       	adc	r27, r15
    7cd0:	68 01       	movw	r12, r16
    7cd2:	79 01       	movw	r14, r18
    7cd4:	c4 26       	eor	r12, r20
    7cd6:	d5 26       	eor	r13, r21
    7cd8:	e6 26       	eor	r14, r22
    7cda:	f7 26       	eor	r15, r23
    7cdc:	c8 20       	and	r12, r8
    7cde:	d9 20       	and	r13, r9
    7ce0:	ea 20       	and	r14, r10
    7ce2:	fb 20       	and	r15, r11
    7ce4:	c4 26       	eor	r12, r20
    7ce6:	d5 26       	eor	r13, r21
    7ce8:	e6 26       	eor	r14, r22
    7cea:	f7 26       	eor	r15, r23
    7cec:	8c 0d       	add	r24, r12
    7cee:	9d 1d       	adc	r25, r13
    7cf0:	ae 1d       	adc	r26, r14
    7cf2:	bf 1d       	adc	r27, r15
    7cf4:	6c 01       	movw	r12, r24
    7cf6:	7d 01       	movw	r14, r26
    7cf8:	0b 2e       	mov	r0, r27
    7cfa:	ba e0       	ldi	r27, 0x0A	; 10
    7cfc:	f6 94       	lsr	r15
    7cfe:	e7 94       	ror	r14
    7d00:	d7 94       	ror	r13
    7d02:	c7 94       	ror	r12
    7d04:	ba 95       	dec	r27
    7d06:	d1 f7       	brne	.-12     	; 0x7cfc <md5_process+0xb58>
    7d08:	b0 2d       	mov	r27, r0
    7d0a:	07 2e       	mov	r0, r23
    7d0c:	76 e1       	ldi	r23, 0x16	; 22
    7d0e:	88 0f       	add	r24, r24
    7d10:	99 1f       	adc	r25, r25
    7d12:	aa 1f       	adc	r26, r26
    7d14:	bb 1f       	adc	r27, r27
    7d16:	7a 95       	dec	r23
    7d18:	d1 f7       	brne	.-12     	; 0x7d0e <md5_process+0xb6a>
    7d1a:	70 2d       	mov	r23, r0
    7d1c:	8c 29       	or	r24, r12
    7d1e:	9d 29       	or	r25, r13
    7d20:	ae 29       	or	r26, r14
    7d22:	bf 29       	or	r27, r15
    7d24:	88 0d       	add	r24, r8
    7d26:	99 1d       	adc	r25, r9
    7d28:	aa 1d       	adc	r26, r10
    7d2a:	bb 1d       	adc	r27, r11
    7d2c:	cd 84       	ldd	r12, Y+13	; 0x0d
    7d2e:	de 84       	ldd	r13, Y+14	; 0x0e
    7d30:	ef 84       	ldd	r14, Y+15	; 0x0f
    7d32:	f8 88       	ldd	r15, Y+16	; 0x10
    7d34:	ee e9       	ldi	r30, 0x9E	; 158
    7d36:	ce 1a       	sub	r12, r30
    7d38:	ea ed       	ldi	r30, 0xDA	; 218
    7d3a:	de 0a       	sbc	r13, r30
    7d3c:	e1 ee       	ldi	r30, 0xE1	; 225
    7d3e:	ee 0a       	sbc	r14, r30
    7d40:	e9 e0       	ldi	r30, 0x09	; 9
    7d42:	fe 0a       	sbc	r15, r30
    7d44:	4c 0d       	add	r20, r12
    7d46:	5d 1d       	adc	r21, r13
    7d48:	6e 1d       	adc	r22, r14
    7d4a:	7f 1d       	adc	r23, r15
    7d4c:	6c 01       	movw	r12, r24
    7d4e:	7d 01       	movw	r14, r26
    7d50:	c8 24       	eor	r12, r8
    7d52:	d9 24       	eor	r13, r9
    7d54:	ea 24       	eor	r14, r10
    7d56:	fb 24       	eor	r15, r11
    7d58:	c0 22       	and	r12, r16
    7d5a:	d1 22       	and	r13, r17
    7d5c:	e2 22       	and	r14, r18
    7d5e:	f3 22       	and	r15, r19
    7d60:	c8 24       	eor	r12, r8
    7d62:	d9 24       	eor	r13, r9
    7d64:	ea 24       	eor	r14, r10
    7d66:	fb 24       	eor	r15, r11
    7d68:	4c 0d       	add	r20, r12
    7d6a:	5d 1d       	adc	r21, r13
    7d6c:	6e 1d       	adc	r22, r14
    7d6e:	7f 1d       	adc	r23, r15
    7d70:	6a 01       	movw	r12, r20
    7d72:	7b 01       	movw	r14, r22
    7d74:	cc 0c       	add	r12, r12
    7d76:	dd 1c       	adc	r13, r13
    7d78:	ee 1c       	adc	r14, r14
    7d7a:	ff 1c       	adc	r15, r15
    7d7c:	cc 0c       	add	r12, r12
    7d7e:	dd 1c       	adc	r13, r13
    7d80:	ee 1c       	adc	r14, r14
    7d82:	ff 1c       	adc	r15, r15
    7d84:	cc 0c       	add	r12, r12
    7d86:	dd 1c       	adc	r13, r13
    7d88:	ee 1c       	adc	r14, r14
    7d8a:	ff 1c       	adc	r15, r15
    7d8c:	cc 0c       	add	r12, r12
    7d8e:	dd 1c       	adc	r13, r13
    7d90:	ee 1c       	adc	r14, r14
    7d92:	ff 1c       	adc	r15, r15
    7d94:	cc 0c       	add	r12, r12
    7d96:	dd 1c       	adc	r13, r13
    7d98:	ee 1c       	adc	r14, r14
    7d9a:	ff 1c       	adc	r15, r15
    7d9c:	03 2e       	mov	r0, r19
    7d9e:	3b e1       	ldi	r19, 0x1B	; 27
    7da0:	76 95       	lsr	r23
    7da2:	67 95       	ror	r22
    7da4:	57 95       	ror	r21
    7da6:	47 95       	ror	r20
    7da8:	3a 95       	dec	r19
    7daa:	d1 f7       	brne	.-12     	; 0x7da0 <md5_process+0xbfc>
    7dac:	30 2d       	mov	r19, r0
    7dae:	4c 29       	or	r20, r12
    7db0:	5d 29       	or	r21, r13
    7db2:	6e 29       	or	r22, r14
    7db4:	7f 29       	or	r23, r15
    7db6:	48 0f       	add	r20, r24
    7db8:	59 1f       	adc	r21, r25
    7dba:	6a 1f       	adc	r22, r26
    7dbc:	7b 1f       	adc	r23, r27
    7dbe:	c9 a0       	ldd	r12, Y+33	; 0x21
    7dc0:	da a0       	ldd	r13, Y+34	; 0x22
    7dc2:	eb a0       	ldd	r14, Y+35	; 0x23
    7dc4:	fc a0       	ldd	r15, Y+36	; 0x24
    7dc6:	f0 ec       	ldi	r31, 0xC0	; 192
    7dc8:	cf 1a       	sub	r12, r31
    7dca:	fc e4       	ldi	r31, 0x4C	; 76
    7dcc:	df 0a       	sbc	r13, r31
    7dce:	ff eb       	ldi	r31, 0xBF	; 191
    7dd0:	ef 0a       	sbc	r14, r31
    7dd2:	ff e3       	ldi	r31, 0x3F	; 63
    7dd4:	ff 0a       	sbc	r15, r31
    7dd6:	0c 0d       	add	r16, r12
    7dd8:	1d 1d       	adc	r17, r13
    7dda:	2e 1d       	adc	r18, r14
    7ddc:	3f 1d       	adc	r19, r15
    7dde:	6a 01       	movw	r12, r20
    7de0:	7b 01       	movw	r14, r22
    7de2:	c8 26       	eor	r12, r24
    7de4:	d9 26       	eor	r13, r25
    7de6:	ea 26       	eor	r14, r26
    7de8:	fb 26       	eor	r15, r27
    7dea:	c8 20       	and	r12, r8
    7dec:	d9 20       	and	r13, r9
    7dee:	ea 20       	and	r14, r10
    7df0:	fb 20       	and	r15, r11
    7df2:	c8 26       	eor	r12, r24
    7df4:	d9 26       	eor	r13, r25
    7df6:	ea 26       	eor	r14, r26
    7df8:	fb 26       	eor	r15, r27
    7dfa:	0c 0d       	add	r16, r12
    7dfc:	1d 1d       	adc	r17, r13
    7dfe:	2e 1d       	adc	r18, r14
    7e00:	3f 1d       	adc	r19, r15
    7e02:	68 01       	movw	r12, r16
    7e04:	79 01       	movw	r14, r18
    7e06:	0b 2e       	mov	r0, r27
    7e08:	b9 e0       	ldi	r27, 0x09	; 9
    7e0a:	cc 0c       	add	r12, r12
    7e0c:	dd 1c       	adc	r13, r13
    7e0e:	ee 1c       	adc	r14, r14
    7e10:	ff 1c       	adc	r15, r15
    7e12:	ba 95       	dec	r27
    7e14:	d1 f7       	brne	.-12     	; 0x7e0a <md5_process+0xc66>
    7e16:	b0 2d       	mov	r27, r0
    7e18:	0f 2e       	mov	r0, r31
    7e1a:	f7 e1       	ldi	r31, 0x17	; 23
    7e1c:	36 95       	lsr	r19
    7e1e:	27 95       	ror	r18
    7e20:	17 95       	ror	r17
    7e22:	07 95       	ror	r16
    7e24:	fa 95       	dec	r31
    7e26:	d1 f7       	brne	.-12     	; 0x7e1c <md5_process+0xc78>
    7e28:	f0 2d       	mov	r31, r0
    7e2a:	0c 29       	or	r16, r12
    7e2c:	1d 29       	or	r17, r13
    7e2e:	2e 29       	or	r18, r14
    7e30:	3f 29       	or	r19, r15
    7e32:	04 0f       	add	r16, r20
    7e34:	15 1f       	adc	r17, r21
    7e36:	26 1f       	adc	r18, r22
    7e38:	37 1f       	adc	r19, r23
    7e3a:	cd a8       	ldd	r12, Y+53	; 0x35
    7e3c:	de a8       	ldd	r13, Y+54	; 0x36
    7e3e:	ef a8       	ldd	r14, Y+55	; 0x37
    7e40:	f8 ac       	ldd	r15, Y+56	; 0x38
    7e42:	ef ea       	ldi	r30, 0xAF	; 175
    7e44:	ce 1a       	sub	r12, r30
    7e46:	e5 ea       	ldi	r30, 0xA5	; 165
    7e48:	de 0a       	sbc	r13, r30
    7e4a:	e1 ea       	ldi	r30, 0xA1	; 161
    7e4c:	ee 0a       	sbc	r14, r30
    7e4e:	e9 ed       	ldi	r30, 0xD9	; 217
    7e50:	fe 0a       	sbc	r15, r30
    7e52:	8c 0c       	add	r8, r12
    7e54:	9d 1c       	adc	r9, r13
    7e56:	ae 1c       	adc	r10, r14
    7e58:	bf 1c       	adc	r11, r15
    7e5a:	68 01       	movw	r12, r16
    7e5c:	79 01       	movw	r14, r18
    7e5e:	c4 26       	eor	r12, r20
    7e60:	d5 26       	eor	r13, r21
    7e62:	e6 26       	eor	r14, r22
    7e64:	f7 26       	eor	r15, r23
    7e66:	c8 22       	and	r12, r24
    7e68:	d9 22       	and	r13, r25
    7e6a:	ea 22       	and	r14, r26
    7e6c:	fb 22       	and	r15, r27
    7e6e:	c4 26       	eor	r12, r20
    7e70:	d5 26       	eor	r13, r21
    7e72:	e6 26       	eor	r14, r22
    7e74:	f7 26       	eor	r15, r23
    7e76:	8c 0c       	add	r8, r12
    7e78:	9d 1c       	adc	r9, r13
    7e7a:	ae 1c       	adc	r10, r14
    7e7c:	bf 1c       	adc	r11, r15
    7e7e:	75 01       	movw	r14, r10
    7e80:	64 01       	movw	r12, r8
    7e82:	0b 2e       	mov	r0, r27
    7e84:	be e0       	ldi	r27, 0x0E	; 14
    7e86:	cc 0c       	add	r12, r12
    7e88:	dd 1c       	adc	r13, r13
    7e8a:	ee 1c       	adc	r14, r14
    7e8c:	ff 1c       	adc	r15, r15
    7e8e:	ba 95       	dec	r27
    7e90:	d1 f7       	brne	.-12     	; 0x7e86 <md5_process+0xce2>
    7e92:	b0 2d       	mov	r27, r0
    7e94:	07 2e       	mov	r0, r23
    7e96:	72 e1       	ldi	r23, 0x12	; 18
    7e98:	b6 94       	lsr	r11
    7e9a:	a7 94       	ror	r10
    7e9c:	97 94       	ror	r9
    7e9e:	87 94       	ror	r8
    7ea0:	7a 95       	dec	r23
    7ea2:	d1 f7       	brne	.-12     	; 0x7e98 <md5_process+0xcf4>
    7ea4:	70 2d       	mov	r23, r0
    7ea6:	8c 28       	or	r8, r12
    7ea8:	9d 28       	or	r9, r13
    7eaa:	ae 28       	or	r10, r14
    7eac:	bf 28       	or	r11, r15
    7eae:	80 0e       	add	r8, r16
    7eb0:	91 1e       	adc	r9, r17
    7eb2:	a2 1e       	adc	r10, r18
    7eb4:	b3 1e       	adc	r11, r19
    7eb6:	c9 84       	ldd	r12, Y+9	; 0x09
    7eb8:	da 84       	ldd	r13, Y+10	; 0x0a
    7eba:	eb 84       	ldd	r14, Y+11	; 0x0b
    7ebc:	fc 84       	ldd	r15, Y+12	; 0x0c
    7ebe:	f6 e5       	ldi	r31, 0x56	; 86
    7ec0:	cf 1a       	sub	r12, r31
    7ec2:	f8 e3       	ldi	r31, 0x38	; 56
    7ec4:	df 0a       	sbc	r13, r31
    7ec6:	f9 e4       	ldi	r31, 0x49	; 73
    7ec8:	ef 0a       	sbc	r14, r31
    7eca:	f6 e1       	ldi	r31, 0x16	; 22
    7ecc:	ff 0a       	sbc	r15, r31
    7ece:	8c 0d       	add	r24, r12
    7ed0:	9d 1d       	adc	r25, r13
    7ed2:	ae 1d       	adc	r26, r14
    7ed4:	bf 1d       	adc	r27, r15
    7ed6:	75 01       	movw	r14, r10
    7ed8:	64 01       	movw	r12, r8
    7eda:	c0 26       	eor	r12, r16
    7edc:	d1 26       	eor	r13, r17
    7ede:	e2 26       	eor	r14, r18
    7ee0:	f3 26       	eor	r15, r19
    7ee2:	c4 22       	and	r12, r20
    7ee4:	d5 22       	and	r13, r21
    7ee6:	e6 22       	and	r14, r22
    7ee8:	f7 22       	and	r15, r23
    7eea:	c0 26       	eor	r12, r16
    7eec:	d1 26       	eor	r13, r17
    7eee:	e2 26       	eor	r14, r18
    7ef0:	f3 26       	eor	r15, r19
    7ef2:	8c 0d       	add	r24, r12
    7ef4:	9d 1d       	adc	r25, r13
    7ef6:	ae 1d       	adc	r26, r14
    7ef8:	bf 1d       	adc	r27, r15
    7efa:	6c 01       	movw	r12, r24
    7efc:	7d 01       	movw	r14, r26
    7efe:	0b 2e       	mov	r0, r27
    7f00:	bc e0       	ldi	r27, 0x0C	; 12
    7f02:	f6 94       	lsr	r15
    7f04:	e7 94       	ror	r14
    7f06:	d7 94       	ror	r13
    7f08:	c7 94       	ror	r12
    7f0a:	ba 95       	dec	r27
    7f0c:	d1 f7       	brne	.-12     	; 0x7f02 <md5_process+0xd5e>
    7f0e:	b0 2d       	mov	r27, r0
    7f10:	07 2e       	mov	r0, r23
    7f12:	74 e1       	ldi	r23, 0x14	; 20
    7f14:	88 0f       	add	r24, r24
    7f16:	99 1f       	adc	r25, r25
    7f18:	aa 1f       	adc	r26, r26
    7f1a:	bb 1f       	adc	r27, r27
    7f1c:	7a 95       	dec	r23
    7f1e:	d1 f7       	brne	.-12     	; 0x7f14 <md5_process+0xd70>
    7f20:	70 2d       	mov	r23, r0
    7f22:	8c 29       	or	r24, r12
    7f24:	9d 29       	or	r25, r13
    7f26:	ae 29       	or	r26, r14
    7f28:	bf 29       	or	r27, r15
    7f2a:	88 0d       	add	r24, r8
    7f2c:	99 1d       	adc	r25, r9
    7f2e:	aa 1d       	adc	r26, r10
    7f30:	bb 1d       	adc	r27, r11
    7f32:	cd 8c       	ldd	r12, Y+29	; 0x1d
    7f34:	de 8c       	ldd	r13, Y+30	; 0x1e
    7f36:	ef 8c       	ldd	r14, Y+31	; 0x1f
    7f38:	f8 a0       	ldd	r15, Y+32	; 0x20
    7f3a:	e3 ea       	ldi	r30, 0xA3	; 163
    7f3c:	ce 1a       	sub	r12, r30
    7f3e:	ef ee       	ldi	r30, 0xEF	; 239
    7f40:	de 0a       	sbc	r13, r30
    7f42:	e0 ed       	ldi	r30, 0xD0	; 208
    7f44:	ee 0a       	sbc	r14, r30
    7f46:	e9 e2       	ldi	r30, 0x29	; 41
    7f48:	fe 0a       	sbc	r15, r30
    7f4a:	4c 0d       	add	r20, r12
    7f4c:	5d 1d       	adc	r21, r13
    7f4e:	6e 1d       	adc	r22, r14
    7f50:	7f 1d       	adc	r23, r15
    7f52:	6c 01       	movw	r12, r24
    7f54:	7d 01       	movw	r14, r26
    7f56:	c8 24       	eor	r12, r8
    7f58:	d9 24       	eor	r13, r9
    7f5a:	ea 24       	eor	r14, r10
    7f5c:	fb 24       	eor	r15, r11
    7f5e:	c0 22       	and	r12, r16
    7f60:	d1 22       	and	r13, r17
    7f62:	e2 22       	and	r14, r18
    7f64:	f3 22       	and	r15, r19
    7f66:	c8 24       	eor	r12, r8
    7f68:	d9 24       	eor	r13, r9
    7f6a:	ea 24       	eor	r14, r10
    7f6c:	fb 24       	eor	r15, r11
    7f6e:	4c 0d       	add	r20, r12
    7f70:	5d 1d       	adc	r21, r13
    7f72:	6e 1d       	adc	r22, r14
    7f74:	7f 1d       	adc	r23, r15
    7f76:	6a 01       	movw	r12, r20
    7f78:	7b 01       	movw	r14, r22
    7f7a:	cc 0c       	add	r12, r12
    7f7c:	dd 1c       	adc	r13, r13
    7f7e:	ee 1c       	adc	r14, r14
    7f80:	ff 1c       	adc	r15, r15
    7f82:	cc 0c       	add	r12, r12
    7f84:	dd 1c       	adc	r13, r13
    7f86:	ee 1c       	adc	r14, r14
    7f88:	ff 1c       	adc	r15, r15
    7f8a:	cc 0c       	add	r12, r12
    7f8c:	dd 1c       	adc	r13, r13
    7f8e:	ee 1c       	adc	r14, r14
    7f90:	ff 1c       	adc	r15, r15
    7f92:	cc 0c       	add	r12, r12
    7f94:	dd 1c       	adc	r13, r13
    7f96:	ee 1c       	adc	r14, r14
    7f98:	ff 1c       	adc	r15, r15
    7f9a:	cc 0c       	add	r12, r12
    7f9c:	dd 1c       	adc	r13, r13
    7f9e:	ee 1c       	adc	r14, r14
    7fa0:	ff 1c       	adc	r15, r15
    7fa2:	03 2e       	mov	r0, r19
    7fa4:	3b e1       	ldi	r19, 0x1B	; 27
    7fa6:	76 95       	lsr	r23
    7fa8:	67 95       	ror	r22
    7faa:	57 95       	ror	r21
    7fac:	47 95       	ror	r20
    7fae:	3a 95       	dec	r19
    7fb0:	d1 f7       	brne	.-12     	; 0x7fa6 <md5_process+0xe02>
    7fb2:	30 2d       	mov	r19, r0
    7fb4:	4c 29       	or	r20, r12
    7fb6:	5d 29       	or	r21, r13
    7fb8:	6e 29       	or	r22, r14
    7fba:	7f 29       	or	r23, r15
    7fbc:	48 0f       	add	r20, r24
    7fbe:	59 1f       	adc	r21, r25
    7fc0:	6a 1f       	adc	r22, r26
    7fc2:	7b 1f       	adc	r23, r27
    7fc4:	c9 a8       	ldd	r12, Y+49	; 0x31
    7fc6:	da a8       	ldd	r13, Y+50	; 0x32
    7fc8:	eb a8       	ldd	r14, Y+51	; 0x33
    7fca:	fc a8       	ldd	r15, Y+52	; 0x34
    7fcc:	fd ea       	ldi	r31, 0xAD	; 173
    7fce:	cf 1a       	sub	r12, r31
    7fd0:	fb ee       	ldi	r31, 0xEB	; 235
    7fd2:	df 0a       	sbc	r13, r31
    7fd4:	fb eb       	ldi	r31, 0xBB	; 187
    7fd6:	ef 0a       	sbc	r14, r31
    7fd8:	fd ef       	ldi	r31, 0xFD	; 253
    7fda:	ff 0a       	sbc	r15, r31
    7fdc:	0c 0d       	add	r16, r12
    7fde:	1d 1d       	adc	r17, r13
    7fe0:	2e 1d       	adc	r18, r14
    7fe2:	3f 1d       	adc	r19, r15
    7fe4:	6a 01       	movw	r12, r20
    7fe6:	7b 01       	movw	r14, r22
    7fe8:	c8 26       	eor	r12, r24
    7fea:	d9 26       	eor	r13, r25
    7fec:	ea 26       	eor	r14, r26
    7fee:	fb 26       	eor	r15, r27
    7ff0:	c8 20       	and	r12, r8
    7ff2:	d9 20       	and	r13, r9
    7ff4:	ea 20       	and	r14, r10
    7ff6:	fb 20       	and	r15, r11
    7ff8:	c8 26       	eor	r12, r24
    7ffa:	d9 26       	eor	r13, r25
    7ffc:	ea 26       	eor	r14, r26
    7ffe:	fb 26       	eor	r15, r27
    8000:	0c 0d       	add	r16, r12
    8002:	1d 1d       	adc	r17, r13
    8004:	2e 1d       	adc	r18, r14
    8006:	3f 1d       	adc	r19, r15
    8008:	68 01       	movw	r12, r16
    800a:	79 01       	movw	r14, r18
    800c:	0b 2e       	mov	r0, r27
    800e:	b9 e0       	ldi	r27, 0x09	; 9
    8010:	cc 0c       	add	r12, r12
    8012:	dd 1c       	adc	r13, r13
    8014:	ee 1c       	adc	r14, r14
    8016:	ff 1c       	adc	r15, r15
    8018:	ba 95       	dec	r27
    801a:	d1 f7       	brne	.-12     	; 0x8010 <md5_process+0xe6c>
    801c:	b0 2d       	mov	r27, r0
    801e:	0f 2e       	mov	r0, r31
    8020:	f7 e1       	ldi	r31, 0x17	; 23
    8022:	36 95       	lsr	r19
    8024:	27 95       	ror	r18
    8026:	17 95       	ror	r17
    8028:	07 95       	ror	r16
    802a:	fa 95       	dec	r31
    802c:	d1 f7       	brne	.-12     	; 0x8022 <md5_process+0xe7e>
    802e:	f0 2d       	mov	r31, r0
    8030:	0c 29       	or	r16, r12
    8032:	1d 29       	or	r17, r13
    8034:	2e 29       	or	r18, r14
    8036:	3f 29       	or	r19, r15
    8038:	04 0f       	add	r16, r20
    803a:	15 1f       	adc	r17, r21
    803c:	26 1f       	adc	r18, r22
    803e:	37 1f       	adc	r19, r23
    8040:	29 96       	adiw	r28, 0x09	; 9
    8042:	cc ac       	ldd	r12, Y+60	; 0x3c
    8044:	dd ac       	ldd	r13, Y+61	; 0x3d
    8046:	ee ac       	ldd	r14, Y+62	; 0x3e
    8048:	ff ac       	ldd	r15, Y+63	; 0x3f
    804a:	29 97       	sbiw	r28, 0x09	; 9
    804c:	ef e7       	ldi	r30, 0x7F	; 127
    804e:	ce 1a       	sub	r12, r30
    8050:	e9 e1       	ldi	r30, 0x19	; 25
    8052:	de 0a       	sbc	r13, r30
    8054:	ee e5       	ldi	r30, 0x5E	; 94
    8056:	ee 0a       	sbc	r14, r30
    8058:	e7 e2       	ldi	r30, 0x27	; 39
    805a:	fe 0a       	sbc	r15, r30
    805c:	8c 0c       	add	r8, r12
    805e:	9d 1c       	adc	r9, r13
    8060:	ae 1c       	adc	r10, r14
    8062:	bf 1c       	adc	r11, r15
    8064:	68 01       	movw	r12, r16
    8066:	79 01       	movw	r14, r18
    8068:	c4 26       	eor	r12, r20
    806a:	d5 26       	eor	r13, r21
    806c:	e6 26       	eor	r14, r22
    806e:	f7 26       	eor	r15, r23
    8070:	c8 22       	and	r12, r24
    8072:	d9 22       	and	r13, r25
    8074:	ea 22       	and	r14, r26
    8076:	fb 22       	and	r15, r27
    8078:	c4 26       	eor	r12, r20
    807a:	d5 26       	eor	r13, r21
    807c:	e6 26       	eor	r14, r22
    807e:	f7 26       	eor	r15, r23
    8080:	8c 0c       	add	r8, r12
    8082:	9d 1c       	adc	r9, r13
    8084:	ae 1c       	adc	r10, r14
    8086:	bf 1c       	adc	r11, r15
    8088:	75 01       	movw	r14, r10
    808a:	64 01       	movw	r12, r8
    808c:	0b 2e       	mov	r0, r27
    808e:	be e0       	ldi	r27, 0x0E	; 14
    8090:	cc 0c       	add	r12, r12
    8092:	dd 1c       	adc	r13, r13
    8094:	ee 1c       	adc	r14, r14
    8096:	ff 1c       	adc	r15, r15
    8098:	ba 95       	dec	r27
    809a:	d1 f7       	brne	.-12     	; 0x8090 <md5_process+0xeec>
    809c:	b0 2d       	mov	r27, r0
    809e:	07 2e       	mov	r0, r23
    80a0:	72 e1       	ldi	r23, 0x12	; 18
    80a2:	b6 94       	lsr	r11
    80a4:	a7 94       	ror	r10
    80a6:	97 94       	ror	r9
    80a8:	87 94       	ror	r8
    80aa:	7a 95       	dec	r23
    80ac:	d1 f7       	brne	.-12     	; 0x80a2 <md5_process+0xefe>
    80ae:	70 2d       	mov	r23, r0
    80b0:	8c 28       	or	r8, r12
    80b2:	9d 28       	or	r9, r13
    80b4:	ae 28       	or	r10, r14
    80b6:	bf 28       	or	r11, r15
    80b8:	80 0e       	add	r8, r16
    80ba:	91 1e       	adc	r9, r17
    80bc:	a2 1e       	adc	r10, r18
    80be:	b3 1e       	adc	r11, r19
    80c0:	c9 8c       	ldd	r12, Y+25	; 0x19
    80c2:	da 8c       	ldd	r13, Y+26	; 0x1a
    80c4:	eb 8c       	ldd	r14, Y+27	; 0x1b
    80c6:	fc 8c       	ldd	r15, Y+28	; 0x1c
    80c8:	f8 e3       	ldi	r31, 0x38	; 56
    80ca:	cf 1a       	sub	r12, r31
    80cc:	f4 e0       	ldi	r31, 0x04	; 4
    80ce:	df 0a       	sbc	r13, r31
    80d0:	fc e2       	ldi	r31, 0x2C	; 44
    80d2:	ef 0a       	sbc	r14, r31
    80d4:	f8 e1       	ldi	r31, 0x18	; 24
    80d6:	ff 0a       	sbc	r15, r31
    80d8:	8c 0d       	add	r24, r12
    80da:	9d 1d       	adc	r25, r13
    80dc:	ae 1d       	adc	r26, r14
    80de:	bf 1d       	adc	r27, r15
    80e0:	75 01       	movw	r14, r10
    80e2:	64 01       	movw	r12, r8
    80e4:	c0 26       	eor	r12, r16
    80e6:	d1 26       	eor	r13, r17
    80e8:	e2 26       	eor	r14, r18
    80ea:	f3 26       	eor	r15, r19
    80ec:	c4 22       	and	r12, r20
    80ee:	d5 22       	and	r13, r21
    80f0:	e6 22       	and	r14, r22
    80f2:	f7 22       	and	r15, r23
    80f4:	c0 26       	eor	r12, r16
    80f6:	d1 26       	eor	r13, r17
    80f8:	e2 26       	eor	r14, r18
    80fa:	f3 26       	eor	r15, r19
    80fc:	8c 0d       	add	r24, r12
    80fe:	9d 1d       	adc	r25, r13
    8100:	ae 1d       	adc	r26, r14
    8102:	bf 1d       	adc	r27, r15
    8104:	6c 01       	movw	r12, r24
    8106:	7d 01       	movw	r14, r26
    8108:	0b 2e       	mov	r0, r27
    810a:	bc e0       	ldi	r27, 0x0C	; 12
    810c:	f6 94       	lsr	r15
    810e:	e7 94       	ror	r14
    8110:	d7 94       	ror	r13
    8112:	c7 94       	ror	r12
    8114:	ba 95       	dec	r27
    8116:	d1 f7       	brne	.-12     	; 0x810c <md5_process+0xf68>
    8118:	b0 2d       	mov	r27, r0
    811a:	07 2e       	mov	r0, r23
    811c:	74 e1       	ldi	r23, 0x14	; 20
    811e:	88 0f       	add	r24, r24
    8120:	99 1f       	adc	r25, r25
    8122:	aa 1f       	adc	r26, r26
    8124:	bb 1f       	adc	r27, r27
    8126:	7a 95       	dec	r23
    8128:	d1 f7       	brne	.-12     	; 0x811e <md5_process+0xf7a>
    812a:	70 2d       	mov	r23, r0
    812c:	8c 29       	or	r24, r12
    812e:	9d 29       	or	r25, r13
    8130:	ae 29       	or	r26, r14
    8132:	bf 29       	or	r27, r15
    8134:	88 0d       	add	r24, r8
    8136:	99 1d       	adc	r25, r9
    8138:	aa 1d       	adc	r26, r10
    813a:	bb 1d       	adc	r27, r11
    813c:	cd a4       	ldd	r12, Y+45	; 0x2d
    813e:	de a4       	ldd	r13, Y+46	; 0x2e
    8140:	ef a4       	ldd	r14, Y+47	; 0x2f
    8142:	f8 a8       	ldd	r15, Y+48	; 0x30
    8144:	ea e1       	ldi	r30, 0x1A	; 26
    8146:	ce 1a       	sub	r12, r30
    8148:	e2 e3       	ldi	r30, 0x32	; 50
    814a:	de 0a       	sbc	r13, r30
    814c:	ee e1       	ldi	r30, 0x1E	; 30
    814e:	ee 0a       	sbc	r14, r30
    8150:	ee ed       	ldi	r30, 0xDE	; 222
    8152:	fe 0a       	sbc	r15, r30
    8154:	4c 0d       	add	r20, r12
    8156:	5d 1d       	adc	r21, r13
    8158:	6e 1d       	adc	r22, r14
    815a:	7f 1d       	adc	r23, r15
    815c:	6c 01       	movw	r12, r24
    815e:	7d 01       	movw	r14, r26
    8160:	c8 24       	eor	r12, r8
    8162:	d9 24       	eor	r13, r9
    8164:	ea 24       	eor	r14, r10
    8166:	fb 24       	eor	r15, r11
    8168:	c0 22       	and	r12, r16
    816a:	d1 22       	and	r13, r17
    816c:	e2 22       	and	r14, r18
    816e:	f3 22       	and	r15, r19
    8170:	c8 24       	eor	r12, r8
    8172:	d9 24       	eor	r13, r9
    8174:	ea 24       	eor	r14, r10
    8176:	fb 24       	eor	r15, r11
    8178:	4c 0d       	add	r20, r12
    817a:	5d 1d       	adc	r21, r13
    817c:	6e 1d       	adc	r22, r14
    817e:	7f 1d       	adc	r23, r15
    8180:	6a 01       	movw	r12, r20
    8182:	7b 01       	movw	r14, r22
    8184:	cc 0c       	add	r12, r12
    8186:	dd 1c       	adc	r13, r13
    8188:	ee 1c       	adc	r14, r14
    818a:	ff 1c       	adc	r15, r15
    818c:	cc 0c       	add	r12, r12
    818e:	dd 1c       	adc	r13, r13
    8190:	ee 1c       	adc	r14, r14
    8192:	ff 1c       	adc	r15, r15
    8194:	cc 0c       	add	r12, r12
    8196:	dd 1c       	adc	r13, r13
    8198:	ee 1c       	adc	r14, r14
    819a:	ff 1c       	adc	r15, r15
    819c:	cc 0c       	add	r12, r12
    819e:	dd 1c       	adc	r13, r13
    81a0:	ee 1c       	adc	r14, r14
    81a2:	ff 1c       	adc	r15, r15
    81a4:	cc 0c       	add	r12, r12
    81a6:	dd 1c       	adc	r13, r13
    81a8:	ee 1c       	adc	r14, r14
    81aa:	ff 1c       	adc	r15, r15
    81ac:	03 2e       	mov	r0, r19
    81ae:	3b e1       	ldi	r19, 0x1B	; 27
    81b0:	76 95       	lsr	r23
    81b2:	67 95       	ror	r22
    81b4:	57 95       	ror	r21
    81b6:	47 95       	ror	r20
    81b8:	3a 95       	dec	r19
    81ba:	d1 f7       	brne	.-12     	; 0x81b0 <md5_process+0x100c>
    81bc:	30 2d       	mov	r19, r0
    81be:	4c 29       	or	r20, r12
    81c0:	5d 29       	or	r21, r13
    81c2:	6e 29       	or	r22, r14
    81c4:	7f 29       	or	r23, r15
    81c6:	48 0f       	add	r20, r24
    81c8:	59 1f       	adc	r21, r25
    81ca:	6a 1f       	adc	r22, r26
    81cc:	7b 1f       	adc	r23, r27
    81ce:	25 96       	adiw	r28, 0x05	; 5
    81d0:	cc ac       	ldd	r12, Y+60	; 0x3c
    81d2:	dd ac       	ldd	r13, Y+61	; 0x3d
    81d4:	ee ac       	ldd	r14, Y+62	; 0x3e
    81d6:	ff ac       	ldd	r15, Y+63	; 0x3f
    81d8:	25 97       	sbiw	r28, 0x05	; 5
    81da:	fa e2       	ldi	r31, 0x2A	; 42
    81dc:	cf 1a       	sub	r12, r31
    81de:	f8 ef       	ldi	r31, 0xF8	; 248
    81e0:	df 0a       	sbc	r13, r31
    81e2:	f8 ec       	ldi	r31, 0xC8	; 200
    81e4:	ef 0a       	sbc	r14, r31
    81e6:	fc e3       	ldi	r31, 0x3C	; 60
    81e8:	ff 0a       	sbc	r15, r31
    81ea:	0c 0d       	add	r16, r12
    81ec:	1d 1d       	adc	r17, r13
    81ee:	2e 1d       	adc	r18, r14
    81f0:	3f 1d       	adc	r19, r15
    81f2:	6a 01       	movw	r12, r20
    81f4:	7b 01       	movw	r14, r22
    81f6:	c8 26       	eor	r12, r24
    81f8:	d9 26       	eor	r13, r25
    81fa:	ea 26       	eor	r14, r26
    81fc:	fb 26       	eor	r15, r27
    81fe:	c8 20       	and	r12, r8
    8200:	d9 20       	and	r13, r9
    8202:	ea 20       	and	r14, r10
    8204:	fb 20       	and	r15, r11
    8206:	c8 26       	eor	r12, r24
    8208:	d9 26       	eor	r13, r25
    820a:	ea 26       	eor	r14, r26
    820c:	fb 26       	eor	r15, r27
    820e:	0c 0d       	add	r16, r12
    8210:	1d 1d       	adc	r17, r13
    8212:	2e 1d       	adc	r18, r14
    8214:	3f 1d       	adc	r19, r15
    8216:	68 01       	movw	r12, r16
    8218:	79 01       	movw	r14, r18
    821a:	0b 2e       	mov	r0, r27
    821c:	b9 e0       	ldi	r27, 0x09	; 9
    821e:	cc 0c       	add	r12, r12
    8220:	dd 1c       	adc	r13, r13
    8222:	ee 1c       	adc	r14, r14
    8224:	ff 1c       	adc	r15, r15
    8226:	ba 95       	dec	r27
    8228:	d1 f7       	brne	.-12     	; 0x821e <__stack+0x1f>
    822a:	b0 2d       	mov	r27, r0
    822c:	0f 2e       	mov	r0, r31
    822e:	f7 e1       	ldi	r31, 0x17	; 23
    8230:	36 95       	lsr	r19
    8232:	27 95       	ror	r18
    8234:	17 95       	ror	r17
    8236:	07 95       	ror	r16
    8238:	fa 95       	dec	r31
    823a:	d1 f7       	brne	.-12     	; 0x8230 <__stack+0x31>
    823c:	f0 2d       	mov	r31, r0
    823e:	0c 29       	or	r16, r12
    8240:	1d 29       	or	r17, r13
    8242:	2e 29       	or	r18, r14
    8244:	3f 29       	or	r19, r15
    8246:	04 0f       	add	r16, r20
    8248:	15 1f       	adc	r17, r21
    824a:	26 1f       	adc	r18, r22
    824c:	37 1f       	adc	r19, r23
    824e:	cd 88       	ldd	r12, Y+21	; 0x15
    8250:	de 88       	ldd	r13, Y+22	; 0x16
    8252:	ef 88       	ldd	r14, Y+23	; 0x17
    8254:	f8 8c       	ldd	r15, Y+24	; 0x18
    8256:	e9 e7       	ldi	r30, 0x79	; 121
    8258:	ce 1a       	sub	r12, r30
    825a:	e2 ef       	ldi	r30, 0xF2	; 242
    825c:	de 0a       	sbc	r13, r30
    825e:	ea e2       	ldi	r30, 0x2A	; 42
    8260:	ee 0a       	sbc	r14, r30
    8262:	eb e0       	ldi	r30, 0x0B	; 11
    8264:	fe 0a       	sbc	r15, r30
    8266:	8c 0c       	add	r8, r12
    8268:	9d 1c       	adc	r9, r13
    826a:	ae 1c       	adc	r10, r14
    826c:	bf 1c       	adc	r11, r15
    826e:	68 01       	movw	r12, r16
    8270:	79 01       	movw	r14, r18
    8272:	c4 26       	eor	r12, r20
    8274:	d5 26       	eor	r13, r21
    8276:	e6 26       	eor	r14, r22
    8278:	f7 26       	eor	r15, r23
    827a:	c8 22       	and	r12, r24
    827c:	d9 22       	and	r13, r25
    827e:	ea 22       	and	r14, r26
    8280:	fb 22       	and	r15, r27
    8282:	c4 26       	eor	r12, r20
    8284:	d5 26       	eor	r13, r21
    8286:	e6 26       	eor	r14, r22
    8288:	f7 26       	eor	r15, r23
    828a:	8c 0c       	add	r8, r12
    828c:	9d 1c       	adc	r9, r13
    828e:	ae 1c       	adc	r10, r14
    8290:	bf 1c       	adc	r11, r15
    8292:	75 01       	movw	r14, r10
    8294:	64 01       	movw	r12, r8
    8296:	0b 2e       	mov	r0, r27
    8298:	be e0       	ldi	r27, 0x0E	; 14
    829a:	cc 0c       	add	r12, r12
    829c:	dd 1c       	adc	r13, r13
    829e:	ee 1c       	adc	r14, r14
    82a0:	ff 1c       	adc	r15, r15
    82a2:	ba 95       	dec	r27
    82a4:	d1 f7       	brne	.-12     	; 0x829a <__stack+0x9b>
    82a6:	b0 2d       	mov	r27, r0
    82a8:	07 2e       	mov	r0, r23
    82aa:	72 e1       	ldi	r23, 0x12	; 18
    82ac:	b6 94       	lsr	r11
    82ae:	a7 94       	ror	r10
    82b0:	97 94       	ror	r9
    82b2:	87 94       	ror	r8
    82b4:	7a 95       	dec	r23
    82b6:	d1 f7       	brne	.-12     	; 0x82ac <__stack+0xad>
    82b8:	70 2d       	mov	r23, r0
    82ba:	8c 28       	or	r8, r12
    82bc:	9d 28       	or	r9, r13
    82be:	ae 28       	or	r10, r14
    82c0:	bf 28       	or	r11, r15
    82c2:	80 0e       	add	r8, r16
    82c4:	91 1e       	adc	r9, r17
    82c6:	a2 1e       	adc	r10, r18
    82c8:	b3 1e       	adc	r11, r19
    82ca:	c9 a4       	ldd	r12, Y+41	; 0x29
    82cc:	da a4       	ldd	r13, Y+42	; 0x2a
    82ce:	eb a4       	ldd	r14, Y+43	; 0x2b
    82d0:	fc a4       	ldd	r15, Y+44	; 0x2c
    82d2:	f3 e1       	ldi	r31, 0x13	; 19
    82d4:	cf 1a       	sub	r12, r31
    82d6:	fb ee       	ldi	r31, 0xEB	; 235
    82d8:	df 0a       	sbc	r13, r31
    82da:	f5 ea       	ldi	r31, 0xA5	; 165
    82dc:	ef 0a       	sbc	r14, r31
    82de:	fa eb       	ldi	r31, 0xBA	; 186
    82e0:	ff 0a       	sbc	r15, r31
    82e2:	8c 0d       	add	r24, r12
    82e4:	9d 1d       	adc	r25, r13
    82e6:	ae 1d       	adc	r26, r14
    82e8:	bf 1d       	adc	r27, r15
    82ea:	75 01       	movw	r14, r10
    82ec:	64 01       	movw	r12, r8
    82ee:	c0 26       	eor	r12, r16
    82f0:	d1 26       	eor	r13, r17
    82f2:	e2 26       	eor	r14, r18
    82f4:	f3 26       	eor	r15, r19
    82f6:	c4 22       	and	r12, r20
    82f8:	d5 22       	and	r13, r21
    82fa:	e6 22       	and	r14, r22
    82fc:	f7 22       	and	r15, r23
    82fe:	c0 26       	eor	r12, r16
    8300:	d1 26       	eor	r13, r17
    8302:	e2 26       	eor	r14, r18
    8304:	f3 26       	eor	r15, r19
    8306:	8c 0d       	add	r24, r12
    8308:	9d 1d       	adc	r25, r13
    830a:	ae 1d       	adc	r26, r14
    830c:	bf 1d       	adc	r27, r15
    830e:	6c 01       	movw	r12, r24
    8310:	7d 01       	movw	r14, r26
    8312:	0b 2e       	mov	r0, r27
    8314:	bc e0       	ldi	r27, 0x0C	; 12
    8316:	f6 94       	lsr	r15
    8318:	e7 94       	ror	r14
    831a:	d7 94       	ror	r13
    831c:	c7 94       	ror	r12
    831e:	ba 95       	dec	r27
    8320:	d1 f7       	brne	.-12     	; 0x8316 <__stack+0x117>
    8322:	b0 2d       	mov	r27, r0
    8324:	07 2e       	mov	r0, r23
    8326:	74 e1       	ldi	r23, 0x14	; 20
    8328:	88 0f       	add	r24, r24
    832a:	99 1f       	adc	r25, r25
    832c:	aa 1f       	adc	r26, r26
    832e:	bb 1f       	adc	r27, r27
    8330:	7a 95       	dec	r23
    8332:	d1 f7       	brne	.-12     	; 0x8328 <__stack+0x129>
    8334:	70 2d       	mov	r23, r0
    8336:	8c 29       	or	r24, r12
    8338:	9d 29       	or	r25, r13
    833a:	ae 29       	or	r26, r14
    833c:	bf 29       	or	r27, r15
    833e:	88 0d       	add	r24, r8
    8340:	99 1d       	adc	r25, r9
    8342:	aa 1d       	adc	r26, r10
    8344:	bb 1d       	adc	r27, r11
    8346:	21 96       	adiw	r28, 0x01	; 1
    8348:	cc ac       	ldd	r12, Y+60	; 0x3c
    834a:	dd ac       	ldd	r13, Y+61	; 0x3d
    834c:	ee ac       	ldd	r14, Y+62	; 0x3e
    834e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8350:	21 97       	sbiw	r28, 0x01	; 1
    8352:	eb ef       	ldi	r30, 0xFB	; 251
    8354:	ce 1a       	sub	r12, r30
    8356:	e6 e1       	ldi	r30, 0x16	; 22
    8358:	de 0a       	sbc	r13, r30
    835a:	ec e1       	ldi	r30, 0x1C	; 28
    835c:	ee 0a       	sbc	r14, r30
    835e:	e6 e5       	ldi	r30, 0x56	; 86
    8360:	fe 0a       	sbc	r15, r30
    8362:	4c 0d       	add	r20, r12
    8364:	5d 1d       	adc	r21, r13
    8366:	6e 1d       	adc	r22, r14
    8368:	7f 1d       	adc	r23, r15
    836a:	6c 01       	movw	r12, r24
    836c:	7d 01       	movw	r14, r26
    836e:	c8 24       	eor	r12, r8
    8370:	d9 24       	eor	r13, r9
    8372:	ea 24       	eor	r14, r10
    8374:	fb 24       	eor	r15, r11
    8376:	c0 22       	and	r12, r16
    8378:	d1 22       	and	r13, r17
    837a:	e2 22       	and	r14, r18
    837c:	f3 22       	and	r15, r19
    837e:	c8 24       	eor	r12, r8
    8380:	d9 24       	eor	r13, r9
    8382:	ea 24       	eor	r14, r10
    8384:	fb 24       	eor	r15, r11
    8386:	4c 0d       	add	r20, r12
    8388:	5d 1d       	adc	r21, r13
    838a:	6e 1d       	adc	r22, r14
    838c:	7f 1d       	adc	r23, r15
    838e:	6a 01       	movw	r12, r20
    8390:	7b 01       	movw	r14, r22
    8392:	cc 0c       	add	r12, r12
    8394:	dd 1c       	adc	r13, r13
    8396:	ee 1c       	adc	r14, r14
    8398:	ff 1c       	adc	r15, r15
    839a:	cc 0c       	add	r12, r12
    839c:	dd 1c       	adc	r13, r13
    839e:	ee 1c       	adc	r14, r14
    83a0:	ff 1c       	adc	r15, r15
    83a2:	cc 0c       	add	r12, r12
    83a4:	dd 1c       	adc	r13, r13
    83a6:	ee 1c       	adc	r14, r14
    83a8:	ff 1c       	adc	r15, r15
    83aa:	cc 0c       	add	r12, r12
    83ac:	dd 1c       	adc	r13, r13
    83ae:	ee 1c       	adc	r14, r14
    83b0:	ff 1c       	adc	r15, r15
    83b2:	cc 0c       	add	r12, r12
    83b4:	dd 1c       	adc	r13, r13
    83b6:	ee 1c       	adc	r14, r14
    83b8:	ff 1c       	adc	r15, r15
    83ba:	03 2e       	mov	r0, r19
    83bc:	3b e1       	ldi	r19, 0x1B	; 27
    83be:	76 95       	lsr	r23
    83c0:	67 95       	ror	r22
    83c2:	57 95       	ror	r21
    83c4:	47 95       	ror	r20
    83c6:	3a 95       	dec	r19
    83c8:	d1 f7       	brne	.-12     	; 0x83be <__stack+0x1bf>
    83ca:	30 2d       	mov	r19, r0
    83cc:	4c 29       	or	r20, r12
    83ce:	5d 29       	or	r21, r13
    83d0:	6e 29       	or	r22, r14
    83d2:	7f 29       	or	r23, r15
    83d4:	48 0f       	add	r20, r24
    83d6:	59 1f       	adc	r21, r25
    83d8:	6a 1f       	adc	r22, r26
    83da:	7b 1f       	adc	r23, r27
    83dc:	c9 88       	ldd	r12, Y+17	; 0x11
    83de:	da 88       	ldd	r13, Y+18	; 0x12
    83e0:	eb 88       	ldd	r14, Y+19	; 0x13
    83e2:	fc 88       	ldd	r15, Y+20	; 0x14
    83e4:	f8 e0       	ldi	r31, 0x08	; 8
    83e6:	cf 1a       	sub	r12, r31
    83e8:	fc e5       	ldi	r31, 0x5C	; 92
    83ea:	df 0a       	sbc	r13, r31
    83ec:	f0 e1       	ldi	r31, 0x10	; 16
    83ee:	ef 0a       	sbc	r14, r31
    83f0:	f3 e0       	ldi	r31, 0x03	; 3
    83f2:	ff 0a       	sbc	r15, r31
    83f4:	0c 0d       	add	r16, r12
    83f6:	1d 1d       	adc	r17, r13
    83f8:	2e 1d       	adc	r18, r14
    83fa:	3f 1d       	adc	r19, r15
    83fc:	6a 01       	movw	r12, r20
    83fe:	7b 01       	movw	r14, r22
    8400:	c8 26       	eor	r12, r24
    8402:	d9 26       	eor	r13, r25
    8404:	ea 26       	eor	r14, r26
    8406:	fb 26       	eor	r15, r27
    8408:	c8 20       	and	r12, r8
    840a:	d9 20       	and	r13, r9
    840c:	ea 20       	and	r14, r10
    840e:	fb 20       	and	r15, r11
    8410:	c8 26       	eor	r12, r24
    8412:	d9 26       	eor	r13, r25
    8414:	ea 26       	eor	r14, r26
    8416:	fb 26       	eor	r15, r27
    8418:	0c 0d       	add	r16, r12
    841a:	1d 1d       	adc	r17, r13
    841c:	2e 1d       	adc	r18, r14
    841e:	3f 1d       	adc	r19, r15
    8420:	68 01       	movw	r12, r16
    8422:	79 01       	movw	r14, r18
    8424:	0b 2e       	mov	r0, r27
    8426:	b9 e0       	ldi	r27, 0x09	; 9
    8428:	cc 0c       	add	r12, r12
    842a:	dd 1c       	adc	r13, r13
    842c:	ee 1c       	adc	r14, r14
    842e:	ff 1c       	adc	r15, r15
    8430:	ba 95       	dec	r27
    8432:	d1 f7       	brne	.-12     	; 0x8428 <__stack+0x229>
    8434:	b0 2d       	mov	r27, r0
    8436:	0f 2e       	mov	r0, r31
    8438:	f7 e1       	ldi	r31, 0x17	; 23
    843a:	36 95       	lsr	r19
    843c:	27 95       	ror	r18
    843e:	17 95       	ror	r17
    8440:	07 95       	ror	r16
    8442:	fa 95       	dec	r31
    8444:	d1 f7       	brne	.-12     	; 0x843a <__stack+0x23b>
    8446:	f0 2d       	mov	r31, r0
    8448:	0c 29       	or	r16, r12
    844a:	1d 29       	or	r17, r13
    844c:	2e 29       	or	r18, r14
    844e:	3f 29       	or	r19, r15
    8450:	04 0f       	add	r16, r20
    8452:	15 1f       	adc	r17, r21
    8454:	26 1f       	adc	r18, r22
    8456:	37 1f       	adc	r19, r23
    8458:	cd a0       	ldd	r12, Y+37	; 0x25
    845a:	de a0       	ldd	r13, Y+38	; 0x26
    845c:	ef a0       	ldd	r14, Y+39	; 0x27
    845e:	f8 a4       	ldd	r15, Y+40	; 0x28
    8460:	e7 e2       	ldi	r30, 0x27	; 39
    8462:	ce 1a       	sub	r12, r30
    8464:	ed ef       	ldi	r30, 0xFD	; 253
    8466:	de 0a       	sbc	r13, r30
    8468:	e0 e9       	ldi	r30, 0x90	; 144
    846a:	ee 0a       	sbc	r14, r30
    846c:	e8 e9       	ldi	r30, 0x98	; 152
    846e:	fe 0a       	sbc	r15, r30
    8470:	8c 0c       	add	r8, r12
    8472:	9d 1c       	adc	r9, r13
    8474:	ae 1c       	adc	r10, r14
    8476:	bf 1c       	adc	r11, r15
    8478:	68 01       	movw	r12, r16
    847a:	79 01       	movw	r14, r18
    847c:	c4 26       	eor	r12, r20
    847e:	d5 26       	eor	r13, r21
    8480:	e6 26       	eor	r14, r22
    8482:	f7 26       	eor	r15, r23
    8484:	c8 22       	and	r12, r24
    8486:	d9 22       	and	r13, r25
    8488:	ea 22       	and	r14, r26
    848a:	fb 22       	and	r15, r27
    848c:	c4 26       	eor	r12, r20
    848e:	d5 26       	eor	r13, r21
    8490:	e6 26       	eor	r14, r22
    8492:	f7 26       	eor	r15, r23
    8494:	8c 0c       	add	r8, r12
    8496:	9d 1c       	adc	r9, r13
    8498:	ae 1c       	adc	r10, r14
    849a:	bf 1c       	adc	r11, r15
    849c:	75 01       	movw	r14, r10
    849e:	64 01       	movw	r12, r8
    84a0:	0b 2e       	mov	r0, r27
    84a2:	be e0       	ldi	r27, 0x0E	; 14
    84a4:	cc 0c       	add	r12, r12
    84a6:	dd 1c       	adc	r13, r13
    84a8:	ee 1c       	adc	r14, r14
    84aa:	ff 1c       	adc	r15, r15
    84ac:	ba 95       	dec	r27
    84ae:	d1 f7       	brne	.-12     	; 0x84a4 <__stack+0x2a5>
    84b0:	b0 2d       	mov	r27, r0
    84b2:	07 2e       	mov	r0, r23
    84b4:	72 e1       	ldi	r23, 0x12	; 18
    84b6:	b6 94       	lsr	r11
    84b8:	a7 94       	ror	r10
    84ba:	97 94       	ror	r9
    84bc:	87 94       	ror	r8
    84be:	7a 95       	dec	r23
    84c0:	d1 f7       	brne	.-12     	; 0x84b6 <__stack+0x2b7>
    84c2:	70 2d       	mov	r23, r0
    84c4:	8c 28       	or	r8, r12
    84c6:	9d 28       	or	r9, r13
    84c8:	ae 28       	or	r10, r14
    84ca:	bf 28       	or	r11, r15
    84cc:	80 0e       	add	r8, r16
    84ce:	91 1e       	adc	r9, r17
    84d0:	a2 1e       	adc	r10, r18
    84d2:	b3 1e       	adc	r11, r19
    84d4:	75 01       	movw	r14, r10
    84d6:	64 01       	movw	r12, r8
    84d8:	c0 26       	eor	r12, r16
    84da:	d1 26       	eor	r13, r17
    84dc:	e2 26       	eor	r14, r18
    84de:	f3 26       	eor	r15, r19
    84e0:	49 ac       	ldd	r4, Y+57	; 0x39
    84e2:	5a ac       	ldd	r5, Y+58	; 0x3a
    84e4:	6b ac       	ldd	r6, Y+59	; 0x3b
    84e6:	7c ac       	ldd	r7, Y+60	; 0x3c
    84e8:	f6 e7       	ldi	r31, 0x76	; 118
    84ea:	4f 1a       	sub	r4, r31
    84ec:	f3 eb       	ldi	r31, 0xB3	; 179
    84ee:	5f 0a       	sbc	r5, r31
    84f0:	f5 ed       	ldi	r31, 0xD5	; 213
    84f2:	6f 0a       	sbc	r6, r31
    84f4:	f2 e7       	ldi	r31, 0x72	; 114
    84f6:	7f 0a       	sbc	r7, r31
    84f8:	84 0d       	add	r24, r4
    84fa:	95 1d       	adc	r25, r5
    84fc:	a6 1d       	adc	r26, r6
    84fe:	b7 1d       	adc	r27, r7
    8500:	26 01       	movw	r4, r12
    8502:	37 01       	movw	r6, r14
    8504:	44 22       	and	r4, r20
    8506:	55 22       	and	r5, r21
    8508:	66 22       	and	r6, r22
    850a:	77 22       	and	r7, r23
    850c:	40 26       	eor	r4, r16
    850e:	51 26       	eor	r5, r17
    8510:	62 26       	eor	r6, r18
    8512:	73 26       	eor	r7, r19
    8514:	84 0d       	add	r24, r4
    8516:	95 1d       	adc	r25, r5
    8518:	a6 1d       	adc	r26, r6
    851a:	b7 1d       	adc	r27, r7
    851c:	2c 01       	movw	r4, r24
    851e:	3d 01       	movw	r6, r26
    8520:	03 2e       	mov	r0, r19
    8522:	3c e0       	ldi	r19, 0x0C	; 12
    8524:	76 94       	lsr	r7
    8526:	67 94       	ror	r6
    8528:	57 94       	ror	r5
    852a:	47 94       	ror	r4
    852c:	3a 95       	dec	r19
    852e:	d1 f7       	brne	.-12     	; 0x8524 <__stack+0x325>
    8530:	30 2d       	mov	r19, r0
    8532:	07 2e       	mov	r0, r23
    8534:	74 e1       	ldi	r23, 0x14	; 20
    8536:	88 0f       	add	r24, r24
    8538:	99 1f       	adc	r25, r25
    853a:	aa 1f       	adc	r26, r26
    853c:	bb 1f       	adc	r27, r27
    853e:	7a 95       	dec	r23
    8540:	d1 f7       	brne	.-12     	; 0x8536 <__stack+0x337>
    8542:	70 2d       	mov	r23, r0
    8544:	84 29       	or	r24, r4
    8546:	95 29       	or	r25, r5
    8548:	a6 29       	or	r26, r6
    854a:	b7 29       	or	r27, r7
    854c:	88 0d       	add	r24, r8
    854e:	99 1d       	adc	r25, r9
    8550:	aa 1d       	adc	r26, r10
    8552:	bb 1d       	adc	r27, r11
    8554:	4d 8c       	ldd	r4, Y+29	; 0x1d
    8556:	5e 8c       	ldd	r5, Y+30	; 0x1e
    8558:	6f 8c       	ldd	r6, Y+31	; 0x1f
    855a:	78 a0       	ldd	r7, Y+32	; 0x20
    855c:	ee eb       	ldi	r30, 0xBE	; 190
    855e:	4e 1a       	sub	r4, r30
    8560:	e6 ec       	ldi	r30, 0xC6	; 198
    8562:	5e 0a       	sbc	r5, r30
    8564:	e5 e0       	ldi	r30, 0x05	; 5
    8566:	6e 0a       	sbc	r6, r30
    8568:	71 08       	sbc	r7, r1
    856a:	44 0d       	add	r20, r4
    856c:	55 1d       	adc	r21, r5
    856e:	66 1d       	adc	r22, r6
    8570:	77 1d       	adc	r23, r7
    8572:	c8 26       	eor	r12, r24
    8574:	d9 26       	eor	r13, r25
    8576:	ea 26       	eor	r14, r26
    8578:	fb 26       	eor	r15, r27
    857a:	4c 0d       	add	r20, r12
    857c:	5d 1d       	adc	r21, r13
    857e:	6e 1d       	adc	r22, r14
    8580:	7f 1d       	adc	r23, r15
    8582:	6a 01       	movw	r12, r20
    8584:	7b 01       	movw	r14, r22
    8586:	cc 0c       	add	r12, r12
    8588:	dd 1c       	adc	r13, r13
    858a:	ee 1c       	adc	r14, r14
    858c:	ff 1c       	adc	r15, r15
    858e:	cc 0c       	add	r12, r12
    8590:	dd 1c       	adc	r13, r13
    8592:	ee 1c       	adc	r14, r14
    8594:	ff 1c       	adc	r15, r15
    8596:	cc 0c       	add	r12, r12
    8598:	dd 1c       	adc	r13, r13
    859a:	ee 1c       	adc	r14, r14
    859c:	ff 1c       	adc	r15, r15
    859e:	cc 0c       	add	r12, r12
    85a0:	dd 1c       	adc	r13, r13
    85a2:	ee 1c       	adc	r14, r14
    85a4:	ff 1c       	adc	r15, r15
    85a6:	03 2e       	mov	r0, r19
    85a8:	3c e1       	ldi	r19, 0x1C	; 28
    85aa:	76 95       	lsr	r23
    85ac:	67 95       	ror	r22
    85ae:	57 95       	ror	r21
    85b0:	47 95       	ror	r20
    85b2:	3a 95       	dec	r19
    85b4:	d1 f7       	brne	.-12     	; 0x85aa <__stack+0x3ab>
    85b6:	30 2d       	mov	r19, r0
    85b8:	4c 29       	or	r20, r12
    85ba:	5d 29       	or	r21, r13
    85bc:	6e 29       	or	r22, r14
    85be:	7f 29       	or	r23, r15
    85c0:	48 0f       	add	r20, r24
    85c2:	59 1f       	adc	r21, r25
    85c4:	6a 1f       	adc	r22, r26
    85c6:	7b 1f       	adc	r23, r27
    85c8:	c9 a4       	ldd	r12, Y+41	; 0x29
    85ca:	da a4       	ldd	r13, Y+42	; 0x2a
    85cc:	eb a4       	ldd	r14, Y+43	; 0x2b
    85ce:	fc a4       	ldd	r15, Y+44	; 0x2c
    85d0:	ff e7       	ldi	r31, 0x7F	; 127
    85d2:	cf 1a       	sub	r12, r31
    85d4:	f9 e0       	ldi	r31, 0x09	; 9
    85d6:	df 0a       	sbc	r13, r31
    85d8:	fe e8       	ldi	r31, 0x8E	; 142
    85da:	ef 0a       	sbc	r14, r31
    85dc:	f8 e7       	ldi	r31, 0x78	; 120
    85de:	ff 0a       	sbc	r15, r31
    85e0:	0c 0d       	add	r16, r12
    85e2:	1d 1d       	adc	r17, r13
    85e4:	2e 1d       	adc	r18, r14
    85e6:	3f 1d       	adc	r19, r15
    85e8:	6c 01       	movw	r12, r24
    85ea:	7d 01       	movw	r14, r26
    85ec:	c8 24       	eor	r12, r8
    85ee:	d9 24       	eor	r13, r9
    85f0:	ea 24       	eor	r14, r10
    85f2:	fb 24       	eor	r15, r11
    85f4:	c4 26       	eor	r12, r20
    85f6:	d5 26       	eor	r13, r21
    85f8:	e6 26       	eor	r14, r22
    85fa:	f7 26       	eor	r15, r23
    85fc:	0c 0d       	add	r16, r12
    85fe:	1d 1d       	adc	r17, r13
    8600:	2e 1d       	adc	r18, r14
    8602:	3f 1d       	adc	r19, r15
    8604:	68 01       	movw	r12, r16
    8606:	79 01       	movw	r14, r18
    8608:	0b 2e       	mov	r0, r27
    860a:	bb e0       	ldi	r27, 0x0B	; 11
    860c:	cc 0c       	add	r12, r12
    860e:	dd 1c       	adc	r13, r13
    8610:	ee 1c       	adc	r14, r14
    8612:	ff 1c       	adc	r15, r15
    8614:	ba 95       	dec	r27
    8616:	d1 f7       	brne	.-12     	; 0x860c <__stack+0x40d>
    8618:	b0 2d       	mov	r27, r0
    861a:	0f 2e       	mov	r0, r31
    861c:	f5 e1       	ldi	r31, 0x15	; 21
    861e:	36 95       	lsr	r19
    8620:	27 95       	ror	r18
    8622:	17 95       	ror	r17
    8624:	07 95       	ror	r16
    8626:	fa 95       	dec	r31
    8628:	d1 f7       	brne	.-12     	; 0x861e <__stack+0x41f>
    862a:	f0 2d       	mov	r31, r0
    862c:	0c 29       	or	r16, r12
    862e:	1d 29       	or	r17, r13
    8630:	2e 29       	or	r18, r14
    8632:	3f 29       	or	r19, r15
    8634:	04 0f       	add	r16, r20
    8636:	15 1f       	adc	r17, r21
    8638:	26 1f       	adc	r18, r22
    863a:	37 1f       	adc	r19, r23
    863c:	cd a8       	ldd	r12, Y+53	; 0x35
    863e:	de a8       	ldd	r13, Y+54	; 0x36
    8640:	ef a8       	ldd	r14, Y+55	; 0x37
    8642:	f8 ac       	ldd	r15, Y+56	; 0x38
    8644:	ee ed       	ldi	r30, 0xDE	; 222
    8646:	ce 1a       	sub	r12, r30
    8648:	ee e9       	ldi	r30, 0x9E	; 158
    864a:	de 0a       	sbc	r13, r30
    864c:	e2 e6       	ldi	r30, 0x62	; 98
    864e:	ee 0a       	sbc	r14, r30
    8650:	e2 e9       	ldi	r30, 0x92	; 146
    8652:	fe 0a       	sbc	r15, r30
    8654:	8c 0c       	add	r8, r12
    8656:	9d 1c       	adc	r9, r13
    8658:	ae 1c       	adc	r10, r14
    865a:	bf 1c       	adc	r11, r15
    865c:	6a 01       	movw	r12, r20
    865e:	7b 01       	movw	r14, r22
    8660:	c8 26       	eor	r12, r24
    8662:	d9 26       	eor	r13, r25
    8664:	ea 26       	eor	r14, r26
    8666:	fb 26       	eor	r15, r27
    8668:	c0 26       	eor	r12, r16
    866a:	d1 26       	eor	r13, r17
    866c:	e2 26       	eor	r14, r18
    866e:	f3 26       	eor	r15, r19
    8670:	8c 0c       	add	r8, r12
    8672:	9d 1c       	adc	r9, r13
    8674:	ae 1c       	adc	r10, r14
    8676:	bf 1c       	adc	r11, r15
    8678:	64 01       	movw	r12, r8
    867a:	45 01       	movw	r8, r10
    867c:	56 01       	movw	r10, r12
    867e:	80 0e       	add	r8, r16
    8680:	91 1e       	adc	r9, r17
    8682:	a2 1e       	adc	r10, r18
    8684:	b3 1e       	adc	r11, r19
    8686:	25 96       	adiw	r28, 0x05	; 5
    8688:	cc ac       	ldd	r12, Y+60	; 0x3c
    868a:	dd ac       	ldd	r13, Y+61	; 0x3d
    868c:	ee ac       	ldd	r14, Y+62	; 0x3e
    868e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8690:	25 97       	sbiw	r28, 0x05	; 5
    8692:	e4 ef       	ldi	r30, 0xF4	; 244
    8694:	ce 1a       	sub	r12, r30
    8696:	e7 ec       	ldi	r30, 0xC7	; 199
    8698:	de 0a       	sbc	r13, r30
    869a:	ea e1       	ldi	r30, 0x1A	; 26
    869c:	ee 0a       	sbc	r14, r30
    869e:	e2 e0       	ldi	r30, 0x02	; 2
    86a0:	fe 0a       	sbc	r15, r30
    86a2:	8c 0d       	add	r24, r12
    86a4:	9d 1d       	adc	r25, r13
    86a6:	ae 1d       	adc	r26, r14
    86a8:	bf 1d       	adc	r27, r15
    86aa:	68 01       	movw	r12, r16
    86ac:	79 01       	movw	r14, r18
    86ae:	c4 26       	eor	r12, r20
    86b0:	d5 26       	eor	r13, r21
    86b2:	e6 26       	eor	r14, r22
    86b4:	f7 26       	eor	r15, r23
    86b6:	c8 24       	eor	r12, r8
    86b8:	d9 24       	eor	r13, r9
    86ba:	ea 24       	eor	r14, r10
    86bc:	fb 24       	eor	r15, r11
    86be:	8c 0d       	add	r24, r12
    86c0:	9d 1d       	adc	r25, r13
    86c2:	ae 1d       	adc	r26, r14
    86c4:	bf 1d       	adc	r27, r15
    86c6:	6c 01       	movw	r12, r24
    86c8:	7d 01       	movw	r14, r26
    86ca:	0b 2e       	mov	r0, r27
    86cc:	b9 e0       	ldi	r27, 0x09	; 9
    86ce:	f6 94       	lsr	r15
    86d0:	e7 94       	ror	r14
    86d2:	d7 94       	ror	r13
    86d4:	c7 94       	ror	r12
    86d6:	ba 95       	dec	r27
    86d8:	d1 f7       	brne	.-12     	; 0x86ce <__stack+0x4cf>
    86da:	b0 2d       	mov	r27, r0
    86dc:	07 2e       	mov	r0, r23
    86de:	77 e1       	ldi	r23, 0x17	; 23
    86e0:	88 0f       	add	r24, r24
    86e2:	99 1f       	adc	r25, r25
    86e4:	aa 1f       	adc	r26, r26
    86e6:	bb 1f       	adc	r27, r27
    86e8:	7a 95       	dec	r23
    86ea:	d1 f7       	brne	.-12     	; 0x86e0 <__stack+0x4e1>
    86ec:	70 2d       	mov	r23, r0
    86ee:	8c 29       	or	r24, r12
    86f0:	9d 29       	or	r25, r13
    86f2:	ae 29       	or	r26, r14
    86f4:	bf 29       	or	r27, r15
    86f6:	88 0d       	add	r24, r8
    86f8:	99 1d       	adc	r25, r9
    86fa:	aa 1d       	adc	r26, r10
    86fc:	bb 1d       	adc	r27, r11
    86fe:	4d 84       	ldd	r4, Y+13	; 0x0d
    8700:	5e 84       	ldd	r5, Y+14	; 0x0e
    8702:	6f 84       	ldd	r6, Y+15	; 0x0f
    8704:	78 88       	ldd	r7, Y+16	; 0x10
    8706:	fc eb       	ldi	r31, 0xBC	; 188
    8708:	4f 1a       	sub	r4, r31
    870a:	f5 e1       	ldi	r31, 0x15	; 21
    870c:	5f 0a       	sbc	r5, r31
    870e:	f1 e4       	ldi	r31, 0x41	; 65
    8710:	6f 0a       	sbc	r6, r31
    8712:	fb e5       	ldi	r31, 0x5B	; 91
    8714:	7f 0a       	sbc	r7, r31
    8716:	44 0d       	add	r20, r4
    8718:	55 1d       	adc	r21, r5
    871a:	66 1d       	adc	r22, r6
    871c:	77 1d       	adc	r23, r7
    871e:	24 01       	movw	r4, r8
    8720:	35 01       	movw	r6, r10
    8722:	40 26       	eor	r4, r16
    8724:	51 26       	eor	r5, r17
    8726:	62 26       	eor	r6, r18
    8728:	73 26       	eor	r7, r19
    872a:	48 26       	eor	r4, r24
    872c:	59 26       	eor	r5, r25
    872e:	6a 26       	eor	r6, r26
    8730:	7b 26       	eor	r7, r27
    8732:	44 0d       	add	r20, r4
    8734:	55 1d       	adc	r21, r5
    8736:	66 1d       	adc	r22, r6
    8738:	77 1d       	adc	r23, r7
    873a:	6a 01       	movw	r12, r20
    873c:	7b 01       	movw	r14, r22
    873e:	cc 0c       	add	r12, r12
    8740:	dd 1c       	adc	r13, r13
    8742:	ee 1c       	adc	r14, r14
    8744:	ff 1c       	adc	r15, r15
    8746:	cc 0c       	add	r12, r12
    8748:	dd 1c       	adc	r13, r13
    874a:	ee 1c       	adc	r14, r14
    874c:	ff 1c       	adc	r15, r15
    874e:	cc 0c       	add	r12, r12
    8750:	dd 1c       	adc	r13, r13
    8752:	ee 1c       	adc	r14, r14
    8754:	ff 1c       	adc	r15, r15
    8756:	cc 0c       	add	r12, r12
    8758:	dd 1c       	adc	r13, r13
    875a:	ee 1c       	adc	r14, r14
    875c:	ff 1c       	adc	r15, r15
    875e:	03 2e       	mov	r0, r19
    8760:	3c e1       	ldi	r19, 0x1C	; 28
    8762:	76 95       	lsr	r23
    8764:	67 95       	ror	r22
    8766:	57 95       	ror	r21
    8768:	47 95       	ror	r20
    876a:	3a 95       	dec	r19
    876c:	d1 f7       	brne	.-12     	; 0x8762 <__stack+0x563>
    876e:	30 2d       	mov	r19, r0
    8770:	4c 29       	or	r20, r12
    8772:	5d 29       	or	r21, r13
    8774:	6e 29       	or	r22, r14
    8776:	7f 29       	or	r23, r15
    8778:	48 0f       	add	r20, r24
    877a:	59 1f       	adc	r21, r25
    877c:	6a 1f       	adc	r22, r26
    877e:	7b 1f       	adc	r23, r27
    8780:	c9 8c       	ldd	r12, Y+25	; 0x19
    8782:	da 8c       	ldd	r13, Y+26	; 0x1a
    8784:	eb 8c       	ldd	r14, Y+27	; 0x1b
    8786:	fc 8c       	ldd	r15, Y+28	; 0x1c
    8788:	e7 e5       	ldi	r30, 0x57	; 87
    878a:	ce 1a       	sub	r12, r30
    878c:	e0 e3       	ldi	r30, 0x30	; 48
    878e:	de 0a       	sbc	r13, r30
    8790:	e1 e2       	ldi	r30, 0x21	; 33
    8792:	ee 0a       	sbc	r14, r30
    8794:	e4 eb       	ldi	r30, 0xB4	; 180
    8796:	fe 0a       	sbc	r15, r30
    8798:	0c 0d       	add	r16, r12
    879a:	1d 1d       	adc	r17, r13
    879c:	2e 1d       	adc	r18, r14
    879e:	3f 1d       	adc	r19, r15
    87a0:	6c 01       	movw	r12, r24
    87a2:	7d 01       	movw	r14, r26
    87a4:	c8 24       	eor	r12, r8
    87a6:	d9 24       	eor	r13, r9
    87a8:	ea 24       	eor	r14, r10
    87aa:	fb 24       	eor	r15, r11
    87ac:	c4 26       	eor	r12, r20
    87ae:	d5 26       	eor	r13, r21
    87b0:	e6 26       	eor	r14, r22
    87b2:	f7 26       	eor	r15, r23
    87b4:	0c 0d       	add	r16, r12
    87b6:	1d 1d       	adc	r17, r13
    87b8:	2e 1d       	adc	r18, r14
    87ba:	3f 1d       	adc	r19, r15
    87bc:	68 01       	movw	r12, r16
    87be:	79 01       	movw	r14, r18
    87c0:	0b 2e       	mov	r0, r27
    87c2:	bb e0       	ldi	r27, 0x0B	; 11
    87c4:	cc 0c       	add	r12, r12
    87c6:	dd 1c       	adc	r13, r13
    87c8:	ee 1c       	adc	r14, r14
    87ca:	ff 1c       	adc	r15, r15
    87cc:	ba 95       	dec	r27
    87ce:	d1 f7       	brne	.-12     	; 0x87c4 <__stack+0x5c5>
    87d0:	b0 2d       	mov	r27, r0
    87d2:	0f 2e       	mov	r0, r31
    87d4:	f5 e1       	ldi	r31, 0x15	; 21
    87d6:	36 95       	lsr	r19
    87d8:	27 95       	ror	r18
    87da:	17 95       	ror	r17
    87dc:	07 95       	ror	r16
    87de:	fa 95       	dec	r31
    87e0:	d1 f7       	brne	.-12     	; 0x87d6 <__stack+0x5d7>
    87e2:	f0 2d       	mov	r31, r0
    87e4:	0c 29       	or	r16, r12
    87e6:	1d 29       	or	r17, r13
    87e8:	2e 29       	or	r18, r14
    87ea:	3f 29       	or	r19, r15
    87ec:	04 0f       	add	r16, r20
    87ee:	15 1f       	adc	r17, r21
    87f0:	26 1f       	adc	r18, r22
    87f2:	37 1f       	adc	r19, r23
    87f4:	cd a0       	ldd	r12, Y+37	; 0x25
    87f6:	de a0       	ldd	r13, Y+38	; 0x26
    87f8:	ef a0       	ldd	r14, Y+39	; 0x27
    87fa:	f8 a4       	ldd	r15, Y+40	; 0x28
    87fc:	f0 ea       	ldi	r31, 0xA0	; 160
    87fe:	cf 1a       	sub	r12, r31
    8800:	f4 eb       	ldi	r31, 0xB4	; 180
    8802:	df 0a       	sbc	r13, r31
    8804:	f4 e4       	ldi	r31, 0x44	; 68
    8806:	ef 0a       	sbc	r14, r31
    8808:	f9 e0       	ldi	r31, 0x09	; 9
    880a:	ff 0a       	sbc	r15, r31
    880c:	8c 0c       	add	r8, r12
    880e:	9d 1c       	adc	r9, r13
    8810:	ae 1c       	adc	r10, r14
    8812:	bf 1c       	adc	r11, r15
    8814:	6a 01       	movw	r12, r20
    8816:	7b 01       	movw	r14, r22
    8818:	c8 26       	eor	r12, r24
    881a:	d9 26       	eor	r13, r25
    881c:	ea 26       	eor	r14, r26
    881e:	fb 26       	eor	r15, r27
    8820:	c0 26       	eor	r12, r16
    8822:	d1 26       	eor	r13, r17
    8824:	e2 26       	eor	r14, r18
    8826:	f3 26       	eor	r15, r19
    8828:	8c 0c       	add	r8, r12
    882a:	9d 1c       	adc	r9, r13
    882c:	ae 1c       	adc	r10, r14
    882e:	bf 1c       	adc	r11, r15
    8830:	64 01       	movw	r12, r8
    8832:	45 01       	movw	r8, r10
    8834:	56 01       	movw	r10, r12
    8836:	80 0e       	add	r8, r16
    8838:	91 1e       	adc	r9, r17
    883a:	a2 1e       	adc	r10, r18
    883c:	b3 1e       	adc	r11, r19
    883e:	c9 a8       	ldd	r12, Y+49	; 0x31
    8840:	da a8       	ldd	r13, Y+50	; 0x32
    8842:	eb a8       	ldd	r14, Y+51	; 0x33
    8844:	fc a8       	ldd	r15, Y+52	; 0x34
    8846:	e0 e9       	ldi	r30, 0x90	; 144
    8848:	ce 1a       	sub	r12, r30
    884a:	e3 e4       	ldi	r30, 0x43	; 67
    884c:	de 0a       	sbc	r13, r30
    884e:	e0 e4       	ldi	r30, 0x40	; 64
    8850:	ee 0a       	sbc	r14, r30
    8852:	e1 e4       	ldi	r30, 0x41	; 65
    8854:	fe 0a       	sbc	r15, r30
    8856:	8c 0d       	add	r24, r12
    8858:	9d 1d       	adc	r25, r13
    885a:	ae 1d       	adc	r26, r14
    885c:	bf 1d       	adc	r27, r15
    885e:	68 01       	movw	r12, r16
    8860:	79 01       	movw	r14, r18
    8862:	c4 26       	eor	r12, r20
    8864:	d5 26       	eor	r13, r21
    8866:	e6 26       	eor	r14, r22
    8868:	f7 26       	eor	r15, r23
    886a:	c8 24       	eor	r12, r8
    886c:	d9 24       	eor	r13, r9
    886e:	ea 24       	eor	r14, r10
    8870:	fb 24       	eor	r15, r11
    8872:	8c 0d       	add	r24, r12
    8874:	9d 1d       	adc	r25, r13
    8876:	ae 1d       	adc	r26, r14
    8878:	bf 1d       	adc	r27, r15
    887a:	6c 01       	movw	r12, r24
    887c:	7d 01       	movw	r14, r26
    887e:	0b 2e       	mov	r0, r27
    8880:	b9 e0       	ldi	r27, 0x09	; 9
    8882:	f6 94       	lsr	r15
    8884:	e7 94       	ror	r14
    8886:	d7 94       	ror	r13
    8888:	c7 94       	ror	r12
    888a:	ba 95       	dec	r27
    888c:	d1 f7       	brne	.-12     	; 0x8882 <__stack+0x683>
    888e:	b0 2d       	mov	r27, r0
    8890:	07 2e       	mov	r0, r23
    8892:	77 e1       	ldi	r23, 0x17	; 23
    8894:	88 0f       	add	r24, r24
    8896:	99 1f       	adc	r25, r25
    8898:	aa 1f       	adc	r26, r26
    889a:	bb 1f       	adc	r27, r27
    889c:	7a 95       	dec	r23
    889e:	d1 f7       	brne	.-12     	; 0x8894 <__stack+0x695>
    88a0:	70 2d       	mov	r23, r0
    88a2:	8c 29       	or	r24, r12
    88a4:	9d 29       	or	r25, r13
    88a6:	ae 29       	or	r26, r14
    88a8:	bf 29       	or	r27, r15
    88aa:	88 0d       	add	r24, r8
    88ac:	99 1d       	adc	r25, r9
    88ae:	aa 1d       	adc	r26, r10
    88b0:	bb 1d       	adc	r27, r11
    88b2:	21 96       	adiw	r28, 0x01	; 1
    88b4:	4c ac       	ldd	r4, Y+60	; 0x3c
    88b6:	5d ac       	ldd	r5, Y+61	; 0x3d
    88b8:	6e ac       	ldd	r6, Y+62	; 0x3e
    88ba:	7f ac       	ldd	r7, Y+63	; 0x3f
    88bc:	21 97       	sbiw	r28, 0x01	; 1
    88be:	fa e3       	ldi	r31, 0x3A	; 58
    88c0:	4f 1a       	sub	r4, r31
    88c2:	f1 e8       	ldi	r31, 0x81	; 129
    88c4:	5f 0a       	sbc	r5, r31
    88c6:	f4 e6       	ldi	r31, 0x64	; 100
    88c8:	6f 0a       	sbc	r6, r31
    88ca:	f7 ed       	ldi	r31, 0xD7	; 215
    88cc:	7f 0a       	sbc	r7, r31
    88ce:	44 0d       	add	r20, r4
    88d0:	55 1d       	adc	r21, r5
    88d2:	66 1d       	adc	r22, r6
    88d4:	77 1d       	adc	r23, r7
    88d6:	24 01       	movw	r4, r8
    88d8:	35 01       	movw	r6, r10
    88da:	40 26       	eor	r4, r16
    88dc:	51 26       	eor	r5, r17
    88de:	62 26       	eor	r6, r18
    88e0:	73 26       	eor	r7, r19
    88e2:	73 01       	movw	r14, r6
    88e4:	62 01       	movw	r12, r4
    88e6:	c8 26       	eor	r12, r24
    88e8:	d9 26       	eor	r13, r25
    88ea:	ea 26       	eor	r14, r26
    88ec:	fb 26       	eor	r15, r27
    88ee:	2a 01       	movw	r4, r20
    88f0:	3b 01       	movw	r6, r22
    88f2:	4c 0c       	add	r4, r12
    88f4:	5d 1c       	adc	r5, r13
    88f6:	6e 1c       	adc	r6, r14
    88f8:	7f 1c       	adc	r7, r15
    88fa:	73 01       	movw	r14, r6
    88fc:	62 01       	movw	r12, r4
    88fe:	cc 0c       	add	r12, r12
    8900:	dd 1c       	adc	r13, r13
    8902:	ee 1c       	adc	r14, r14
    8904:	ff 1c       	adc	r15, r15
    8906:	cc 0c       	add	r12, r12
    8908:	dd 1c       	adc	r13, r13
    890a:	ee 1c       	adc	r14, r14
    890c:	ff 1c       	adc	r15, r15
    890e:	cc 0c       	add	r12, r12
    8910:	dd 1c       	adc	r13, r13
    8912:	ee 1c       	adc	r14, r14
    8914:	ff 1c       	adc	r15, r15
    8916:	cc 0c       	add	r12, r12
    8918:	dd 1c       	adc	r13, r13
    891a:	ee 1c       	adc	r14, r14
    891c:	ff 1c       	adc	r15, r15
    891e:	03 2e       	mov	r0, r19
    8920:	3c e1       	ldi	r19, 0x1C	; 28
    8922:	76 94       	lsr	r7
    8924:	67 94       	ror	r6
    8926:	57 94       	ror	r5
    8928:	47 94       	ror	r4
    892a:	3a 95       	dec	r19
    892c:	d1 f7       	brne	.-12     	; 0x8922 <__stack+0x723>
    892e:	30 2d       	mov	r19, r0
    8930:	4c 28       	or	r4, r12
    8932:	5d 28       	or	r5, r13
    8934:	6e 28       	or	r6, r14
    8936:	7f 28       	or	r7, r15
    8938:	48 0e       	add	r4, r24
    893a:	59 1e       	adc	r5, r25
    893c:	6a 1e       	adc	r6, r26
    893e:	7b 1e       	adc	r7, r27
    8940:	49 85       	ldd	r20, Y+9	; 0x09
    8942:	5a 85       	ldd	r21, Y+10	; 0x0a
    8944:	6b 85       	ldd	r22, Y+11	; 0x0b
    8946:	7c 85       	ldd	r23, Y+12	; 0x0c
    8948:	46 50       	subi	r20, 0x06	; 6
    894a:	58 4d       	sbci	r21, 0xD8	; 216
    894c:	6e 45       	sbci	r22, 0x5E	; 94
    894e:	75 41       	sbci	r23, 0x15	; 21
    8950:	04 0f       	add	r16, r20
    8952:	15 1f       	adc	r17, r21
    8954:	26 1f       	adc	r18, r22
    8956:	37 1f       	adc	r19, r23
    8958:	ac 01       	movw	r20, r24
    895a:	bd 01       	movw	r22, r26
    895c:	48 25       	eor	r20, r8
    895e:	59 25       	eor	r21, r9
    8960:	6a 25       	eor	r22, r10
    8962:	7b 25       	eor	r23, r11
    8964:	6a 01       	movw	r12, r20
    8966:	7b 01       	movw	r14, r22
    8968:	c4 24       	eor	r12, r4
    896a:	d5 24       	eor	r13, r5
    896c:	e6 24       	eor	r14, r6
    896e:	f7 24       	eor	r15, r7
    8970:	b9 01       	movw	r22, r18
    8972:	a8 01       	movw	r20, r16
    8974:	4c 0d       	add	r20, r12
    8976:	5d 1d       	adc	r21, r13
    8978:	6e 1d       	adc	r22, r14
    897a:	7f 1d       	adc	r23, r15
    897c:	6a 01       	movw	r12, r20
    897e:	7b 01       	movw	r14, r22
    8980:	0b 2e       	mov	r0, r27
    8982:	bb e0       	ldi	r27, 0x0B	; 11
    8984:	cc 0c       	add	r12, r12
    8986:	dd 1c       	adc	r13, r13
    8988:	ee 1c       	adc	r14, r14
    898a:	ff 1c       	adc	r15, r15
    898c:	ba 95       	dec	r27
    898e:	d1 f7       	brne	.-12     	; 0x8984 <__stack+0x785>
    8990:	b0 2d       	mov	r27, r0
    8992:	03 2e       	mov	r0, r19
    8994:	35 e1       	ldi	r19, 0x15	; 21
    8996:	76 95       	lsr	r23
    8998:	67 95       	ror	r22
    899a:	57 95       	ror	r21
    899c:	47 95       	ror	r20
    899e:	3a 95       	dec	r19
    89a0:	d1 f7       	brne	.-12     	; 0x8996 <__stack+0x797>
    89a2:	30 2d       	mov	r19, r0
    89a4:	4c 29       	or	r20, r12
    89a6:	5d 29       	or	r21, r13
    89a8:	6e 29       	or	r22, r14
    89aa:	7f 29       	or	r23, r15
    89ac:	44 0d       	add	r20, r4
    89ae:	55 1d       	adc	r21, r5
    89b0:	66 1d       	adc	r22, r6
    89b2:	77 1d       	adc	r23, r7
    89b4:	0d 89       	ldd	r16, Y+21	; 0x15
    89b6:	1e 89       	ldd	r17, Y+22	; 0x16
    89b8:	2f 89       	ldd	r18, Y+23	; 0x17
    89ba:	38 8d       	ldd	r19, Y+24	; 0x18
    89bc:	0b 57       	subi	r16, 0x7B	; 123
    89be:	1f 4c       	sbci	r17, 0xCF	; 207
    89c0:	20 41       	sbci	r18, 0x10	; 16
    89c2:	3b 42       	sbci	r19, 0x2B	; 43
    89c4:	80 0e       	add	r8, r16
    89c6:	91 1e       	adc	r9, r17
    89c8:	a2 1e       	adc	r10, r18
    89ca:	b3 1e       	adc	r11, r19
    89cc:	93 01       	movw	r18, r6
    89ce:	82 01       	movw	r16, r4
    89d0:	08 27       	eor	r16, r24
    89d2:	19 27       	eor	r17, r25
    89d4:	2a 27       	eor	r18, r26
    89d6:	3b 27       	eor	r19, r27
    89d8:	04 27       	eor	r16, r20
    89da:	15 27       	eor	r17, r21
    89dc:	26 27       	eor	r18, r22
    89de:	37 27       	eor	r19, r23
    89e0:	80 0e       	add	r8, r16
    89e2:	91 1e       	adc	r9, r17
    89e4:	a2 1e       	adc	r10, r18
    89e6:	b3 1e       	adc	r11, r19
    89e8:	64 01       	movw	r12, r8
    89ea:	45 01       	movw	r8, r10
    89ec:	56 01       	movw	r10, r12
    89ee:	84 0e       	add	r8, r20
    89f0:	95 1e       	adc	r9, r21
    89f2:	a6 1e       	adc	r10, r22
    89f4:	b7 1e       	adc	r11, r23
    89f6:	c9 a0       	ldd	r12, Y+33	; 0x21
    89f8:	da a0       	ldd	r13, Y+34	; 0x22
    89fa:	eb a0       	ldd	r14, Y+35	; 0x23
    89fc:	fc a0       	ldd	r15, Y+36	; 0x24
    89fe:	0b ef       	ldi	r16, 0xFB	; 251
    8a00:	c0 1a       	sub	r12, r16
    8a02:	02 ee       	ldi	r16, 0xE2	; 226
    8a04:	d0 0a       	sbc	r13, r16
    8a06:	07 e7       	ldi	r16, 0x77	; 119
    8a08:	e0 0a       	sbc	r14, r16
    8a0a:	0b ef       	ldi	r16, 0xFB	; 251
    8a0c:	f0 0a       	sbc	r15, r16
    8a0e:	8c 0d       	add	r24, r12
    8a10:	9d 1d       	adc	r25, r13
    8a12:	ae 1d       	adc	r26, r14
    8a14:	bf 1d       	adc	r27, r15
    8a16:	6a 01       	movw	r12, r20
    8a18:	7b 01       	movw	r14, r22
    8a1a:	c4 24       	eor	r12, r4
    8a1c:	d5 24       	eor	r13, r5
    8a1e:	e6 24       	eor	r14, r6
    8a20:	f7 24       	eor	r15, r7
    8a22:	97 01       	movw	r18, r14
    8a24:	86 01       	movw	r16, r12
    8a26:	08 25       	eor	r16, r8
    8a28:	19 25       	eor	r17, r9
    8a2a:	2a 25       	eor	r18, r10
    8a2c:	3b 25       	eor	r19, r11
    8a2e:	6c 01       	movw	r12, r24
    8a30:	7d 01       	movw	r14, r26
    8a32:	c0 0e       	add	r12, r16
    8a34:	d1 1e       	adc	r13, r17
    8a36:	e2 1e       	adc	r14, r18
    8a38:	f3 1e       	adc	r15, r19
    8a3a:	97 01       	movw	r18, r14
    8a3c:	86 01       	movw	r16, r12
    8a3e:	0f 2e       	mov	r0, r31
    8a40:	f9 e0       	ldi	r31, 0x09	; 9
    8a42:	36 95       	lsr	r19
    8a44:	27 95       	ror	r18
    8a46:	17 95       	ror	r17
    8a48:	07 95       	ror	r16
    8a4a:	fa 95       	dec	r31
    8a4c:	d1 f7       	brne	.-12     	; 0x8a42 <__stack+0x843>
    8a4e:	f0 2d       	mov	r31, r0
    8a50:	0b 2e       	mov	r0, r27
    8a52:	b7 e1       	ldi	r27, 0x17	; 23
    8a54:	cc 0c       	add	r12, r12
    8a56:	dd 1c       	adc	r13, r13
    8a58:	ee 1c       	adc	r14, r14
    8a5a:	ff 1c       	adc	r15, r15
    8a5c:	ba 95       	dec	r27
    8a5e:	d1 f7       	brne	.-12     	; 0x8a54 <__stack+0x855>
    8a60:	b0 2d       	mov	r27, r0
    8a62:	c0 2a       	or	r12, r16
    8a64:	d1 2a       	or	r13, r17
    8a66:	e2 2a       	or	r14, r18
    8a68:	f3 2a       	or	r15, r19
    8a6a:	c8 0c       	add	r12, r8
    8a6c:	d9 1c       	adc	r13, r9
    8a6e:	ea 1c       	adc	r14, r10
    8a70:	fb 1c       	adc	r15, r11
    8a72:	8d a5       	ldd	r24, Y+45	; 0x2d
    8a74:	9e a5       	ldd	r25, Y+46	; 0x2e
    8a76:	af a5       	ldd	r26, Y+47	; 0x2f
    8a78:	b8 a9       	ldd	r27, Y+48	; 0x30
    8a7a:	87 5c       	subi	r24, 0xC7	; 199
    8a7c:	9f 42       	sbci	r25, 0x2F	; 47
    8a7e:	ab 42       	sbci	r26, 0x2B	; 43
    8a80:	b6 42       	sbci	r27, 0x26	; 38
    8a82:	48 0e       	add	r4, r24
    8a84:	59 1e       	adc	r5, r25
    8a86:	6a 1e       	adc	r6, r26
    8a88:	7b 1e       	adc	r7, r27
    8a8a:	95 01       	movw	r18, r10
    8a8c:	84 01       	movw	r16, r8
    8a8e:	04 27       	eor	r16, r20
    8a90:	15 27       	eor	r17, r21
    8a92:	26 27       	eor	r18, r22
    8a94:	37 27       	eor	r19, r23
    8a96:	0c 25       	eor	r16, r12
    8a98:	1d 25       	eor	r17, r13
    8a9a:	2e 25       	eor	r18, r14
    8a9c:	3f 25       	eor	r19, r15
    8a9e:	40 0e       	add	r4, r16
    8aa0:	51 1e       	adc	r5, r17
    8aa2:	62 1e       	adc	r6, r18
    8aa4:	73 1e       	adc	r7, r19
    8aa6:	93 01       	movw	r18, r6
    8aa8:	82 01       	movw	r16, r4
    8aaa:	00 0f       	add	r16, r16
    8aac:	11 1f       	adc	r17, r17
    8aae:	22 1f       	adc	r18, r18
    8ab0:	33 1f       	adc	r19, r19
    8ab2:	00 0f       	add	r16, r16
    8ab4:	11 1f       	adc	r17, r17
    8ab6:	22 1f       	adc	r18, r18
    8ab8:	33 1f       	adc	r19, r19
    8aba:	00 0f       	add	r16, r16
    8abc:	11 1f       	adc	r17, r17
    8abe:	22 1f       	adc	r18, r18
    8ac0:	33 1f       	adc	r19, r19
    8ac2:	00 0f       	add	r16, r16
    8ac4:	11 1f       	adc	r17, r17
    8ac6:	22 1f       	adc	r18, r18
    8ac8:	33 1f       	adc	r19, r19
    8aca:	03 2e       	mov	r0, r19
    8acc:	3c e1       	ldi	r19, 0x1C	; 28
    8ace:	76 94       	lsr	r7
    8ad0:	67 94       	ror	r6
    8ad2:	57 94       	ror	r5
    8ad4:	47 94       	ror	r4
    8ad6:	3a 95       	dec	r19
    8ad8:	d1 f7       	brne	.-12     	; 0x8ace <__stack+0x8cf>
    8ada:	30 2d       	mov	r19, r0
    8adc:	40 2a       	or	r4, r16
    8ade:	51 2a       	or	r5, r17
    8ae0:	62 2a       	or	r6, r18
    8ae2:	73 2a       	or	r7, r19
    8ae4:	4c 0c       	add	r4, r12
    8ae6:	5d 1c       	adc	r5, r13
    8ae8:	6e 1c       	adc	r6, r14
    8aea:	7f 1c       	adc	r7, r15
    8aec:	89 ad       	ldd	r24, Y+57	; 0x39
    8aee:	9a ad       	ldd	r25, Y+58	; 0x3a
    8af0:	ab ad       	ldd	r26, Y+59	; 0x3b
    8af2:	bc ad       	ldd	r27, Y+60	; 0x3c
    8af4:	8b 51       	subi	r24, 0x1B	; 27
    8af6:	96 46       	sbci	r25, 0x66	; 102
    8af8:	a4 42       	sbci	r26, 0x24	; 36
    8afa:	b9 41       	sbci	r27, 0x19	; 25
    8afc:	48 0f       	add	r20, r24
    8afe:	59 1f       	adc	r21, r25
    8b00:	6a 1f       	adc	r22, r26
    8b02:	7b 1f       	adc	r23, r27
    8b04:	d7 01       	movw	r26, r14
    8b06:	c6 01       	movw	r24, r12
    8b08:	88 25       	eor	r24, r8
    8b0a:	99 25       	eor	r25, r9
    8b0c:	aa 25       	eor	r26, r10
    8b0e:	bb 25       	eor	r27, r11
    8b10:	84 25       	eor	r24, r4
    8b12:	95 25       	eor	r25, r5
    8b14:	a6 25       	eor	r26, r6
    8b16:	b7 25       	eor	r27, r7
    8b18:	48 0f       	add	r20, r24
    8b1a:	59 1f       	adc	r21, r25
    8b1c:	6a 1f       	adc	r22, r26
    8b1e:	7b 1f       	adc	r23, r27
    8b20:	db 01       	movw	r26, r22
    8b22:	ca 01       	movw	r24, r20
    8b24:	07 2e       	mov	r0, r23
    8b26:	7b e0       	ldi	r23, 0x0B	; 11
    8b28:	88 0f       	add	r24, r24
    8b2a:	99 1f       	adc	r25, r25
    8b2c:	aa 1f       	adc	r26, r26
    8b2e:	bb 1f       	adc	r27, r27
    8b30:	7a 95       	dec	r23
    8b32:	d1 f7       	brne	.-12     	; 0x8b28 <__stack+0x929>
    8b34:	70 2d       	mov	r23, r0
    8b36:	03 2e       	mov	r0, r19
    8b38:	35 e1       	ldi	r19, 0x15	; 21
    8b3a:	76 95       	lsr	r23
    8b3c:	67 95       	ror	r22
    8b3e:	57 95       	ror	r21
    8b40:	47 95       	ror	r20
    8b42:	3a 95       	dec	r19
    8b44:	d1 f7       	brne	.-12     	; 0x8b3a <__stack+0x93b>
    8b46:	30 2d       	mov	r19, r0
    8b48:	48 2b       	or	r20, r24
    8b4a:	59 2b       	or	r21, r25
    8b4c:	6a 2b       	or	r22, r26
    8b4e:	7b 2b       	or	r23, r27
    8b50:	44 0d       	add	r20, r4
    8b52:	55 1d       	adc	r21, r5
    8b54:	66 1d       	adc	r22, r6
    8b56:	77 1d       	adc	r23, r7
    8b58:	29 96       	adiw	r28, 0x09	; 9
    8b5a:	8c ad       	ldd	r24, Y+60	; 0x3c
    8b5c:	9d ad       	ldd	r25, Y+61	; 0x3d
    8b5e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8b60:	bf ad       	ldd	r27, Y+63	; 0x3f
    8b62:	29 97       	sbiw	r28, 0x09	; 9
    8b64:	88 50       	subi	r24, 0x08	; 8
    8b66:	93 48       	sbci	r25, 0x83	; 131
    8b68:	ad 45       	sbci	r26, 0x5D	; 93
    8b6a:	b0 4e       	sbci	r27, 0xE0	; 224
    8b6c:	88 0e       	add	r8, r24
    8b6e:	99 1e       	adc	r9, r25
    8b70:	aa 1e       	adc	r10, r26
    8b72:	bb 1e       	adc	r11, r27
    8b74:	d3 01       	movw	r26, r6
    8b76:	c2 01       	movw	r24, r4
    8b78:	8c 25       	eor	r24, r12
    8b7a:	9d 25       	eor	r25, r13
    8b7c:	ae 25       	eor	r26, r14
    8b7e:	bf 25       	eor	r27, r15
    8b80:	84 27       	eor	r24, r20
    8b82:	95 27       	eor	r25, r21
    8b84:	a6 27       	eor	r26, r22
    8b86:	b7 27       	eor	r27, r23
    8b88:	88 0e       	add	r8, r24
    8b8a:	99 1e       	adc	r9, r25
    8b8c:	aa 1e       	adc	r10, r26
    8b8e:	bb 1e       	adc	r11, r27
    8b90:	94 01       	movw	r18, r8
    8b92:	45 01       	movw	r8, r10
    8b94:	59 01       	movw	r10, r18
    8b96:	84 0e       	add	r8, r20
    8b98:	95 1e       	adc	r9, r21
    8b9a:	a6 1e       	adc	r10, r22
    8b9c:	b7 1e       	adc	r11, r23
    8b9e:	89 89       	ldd	r24, Y+17	; 0x11
    8ba0:	9a 89       	ldd	r25, Y+18	; 0x12
    8ba2:	ab 89       	ldd	r26, Y+19	; 0x13
    8ba4:	bc 89       	ldd	r27, Y+20	; 0x14
    8ba6:	8b 59       	subi	r24, 0x9B	; 155
    8ba8:	99 4a       	sbci	r25, 0xA9	; 169
    8baa:	a3 45       	sbci	r26, 0x53	; 83
    8bac:	bb 43       	sbci	r27, 0x3B	; 59
    8bae:	c8 0e       	add	r12, r24
    8bb0:	d9 1e       	adc	r13, r25
    8bb2:	ea 1e       	adc	r14, r26
    8bb4:	fb 1e       	adc	r15, r27
    8bb6:	8a 01       	movw	r16, r20
    8bb8:	9b 01       	movw	r18, r22
    8bba:	04 25       	eor	r16, r4
    8bbc:	15 25       	eor	r17, r5
    8bbe:	26 25       	eor	r18, r6
    8bc0:	37 25       	eor	r19, r7
    8bc2:	08 25       	eor	r16, r8
    8bc4:	19 25       	eor	r17, r9
    8bc6:	2a 25       	eor	r18, r10
    8bc8:	3b 25       	eor	r19, r11
    8bca:	c0 0e       	add	r12, r16
    8bcc:	d1 1e       	adc	r13, r17
    8bce:	e2 1e       	adc	r14, r18
    8bd0:	f3 1e       	adc	r15, r19
    8bd2:	97 01       	movw	r18, r14
    8bd4:	86 01       	movw	r16, r12
    8bd6:	0f 2e       	mov	r0, r31
    8bd8:	f9 e0       	ldi	r31, 0x09	; 9
    8bda:	36 95       	lsr	r19
    8bdc:	27 95       	ror	r18
    8bde:	17 95       	ror	r17
    8be0:	07 95       	ror	r16
    8be2:	fa 95       	dec	r31
    8be4:	d1 f7       	brne	.-12     	; 0x8bda <__stack+0x9db>
    8be6:	f0 2d       	mov	r31, r0
    8be8:	0b 2e       	mov	r0, r27
    8bea:	b7 e1       	ldi	r27, 0x17	; 23
    8bec:	cc 0c       	add	r12, r12
    8bee:	dd 1c       	adc	r13, r13
    8bf0:	ee 1c       	adc	r14, r14
    8bf2:	ff 1c       	adc	r15, r15
    8bf4:	ba 95       	dec	r27
    8bf6:	d1 f7       	brne	.-12     	; 0x8bec <__stack+0x9ed>
    8bf8:	b0 2d       	mov	r27, r0
    8bfa:	c0 2a       	or	r12, r16
    8bfc:	d1 2a       	or	r13, r17
    8bfe:	e2 2a       	or	r14, r18
    8c00:	f3 2a       	or	r15, r19
    8c02:	c8 0c       	add	r12, r8
    8c04:	d9 1c       	adc	r13, r9
    8c06:	ea 1c       	adc	r14, r10
    8c08:	fb 1c       	adc	r15, r11
    8c0a:	89 85       	ldd	r24, Y+9	; 0x09
    8c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    8c0e:	ab 85       	ldd	r26, Y+11	; 0x0b
    8c10:	bc 85       	ldd	r27, Y+12	; 0x0c
    8c12:	8c 5b       	subi	r24, 0xBC	; 188
    8c14:	9d 4d       	sbci	r25, 0xDD	; 221
    8c16:	a6 4d       	sbci	r26, 0xD6	; 214
    8c18:	bb 40       	sbci	r27, 0x0B	; 11
    8c1a:	48 0e       	add	r4, r24
    8c1c:	59 1e       	adc	r5, r25
    8c1e:	6a 1e       	adc	r6, r26
    8c20:	7b 1e       	adc	r7, r27
    8c22:	db 01       	movw	r26, r22
    8c24:	ca 01       	movw	r24, r20
    8c26:	80 95       	com	r24
    8c28:	90 95       	com	r25
    8c2a:	a0 95       	com	r26
    8c2c:	b0 95       	com	r27
    8c2e:	8c 29       	or	r24, r12
    8c30:	9d 29       	or	r25, r13
    8c32:	ae 29       	or	r26, r14
    8c34:	bf 29       	or	r27, r15
    8c36:	8c 01       	movw	r16, r24
    8c38:	9d 01       	movw	r18, r26
    8c3a:	08 25       	eor	r16, r8
    8c3c:	19 25       	eor	r17, r9
    8c3e:	2a 25       	eor	r18, r10
    8c40:	3b 25       	eor	r19, r11
    8c42:	d3 01       	movw	r26, r6
    8c44:	c2 01       	movw	r24, r4
    8c46:	80 0f       	add	r24, r16
    8c48:	91 1f       	adc	r25, r17
    8c4a:	a2 1f       	adc	r26, r18
    8c4c:	b3 1f       	adc	r27, r19
    8c4e:	8c 01       	movw	r16, r24
    8c50:	9d 01       	movw	r18, r26
    8c52:	00 0f       	add	r16, r16
    8c54:	11 1f       	adc	r17, r17
    8c56:	22 1f       	adc	r18, r18
    8c58:	33 1f       	adc	r19, r19
    8c5a:	00 0f       	add	r16, r16
    8c5c:	11 1f       	adc	r17, r17
    8c5e:	22 1f       	adc	r18, r18
    8c60:	33 1f       	adc	r19, r19
    8c62:	00 0f       	add	r16, r16
    8c64:	11 1f       	adc	r17, r17
    8c66:	22 1f       	adc	r18, r18
    8c68:	33 1f       	adc	r19, r19
    8c6a:	00 0f       	add	r16, r16
    8c6c:	11 1f       	adc	r17, r17
    8c6e:	22 1f       	adc	r18, r18
    8c70:	33 1f       	adc	r19, r19
    8c72:	00 0f       	add	r16, r16
    8c74:	11 1f       	adc	r17, r17
    8c76:	22 1f       	adc	r18, r18
    8c78:	33 1f       	adc	r19, r19
    8c7a:	00 0f       	add	r16, r16
    8c7c:	11 1f       	adc	r17, r17
    8c7e:	22 1f       	adc	r18, r18
    8c80:	33 1f       	adc	r19, r19
    8c82:	07 2e       	mov	r0, r23
    8c84:	7a e1       	ldi	r23, 0x1A	; 26
    8c86:	b6 95       	lsr	r27
    8c88:	a7 95       	ror	r26
    8c8a:	97 95       	ror	r25
    8c8c:	87 95       	ror	r24
    8c8e:	7a 95       	dec	r23
    8c90:	d1 f7       	brne	.-12     	; 0x8c86 <__stack+0xa87>
    8c92:	70 2d       	mov	r23, r0
    8c94:	80 2b       	or	r24, r16
    8c96:	91 2b       	or	r25, r17
    8c98:	a2 2b       	or	r26, r18
    8c9a:	b3 2b       	or	r27, r19
    8c9c:	8c 0d       	add	r24, r12
    8c9e:	9d 1d       	adc	r25, r13
    8ca0:	ae 1d       	adc	r26, r14
    8ca2:	bf 1d       	adc	r27, r15
    8ca4:	0d a1       	ldd	r16, Y+37	; 0x25
    8ca6:	1e a1       	ldd	r17, Y+38	; 0x26
    8ca8:	2f a1       	ldd	r18, Y+39	; 0x27
    8caa:	38 a5       	ldd	r19, Y+40	; 0x28
    8cac:	09 56       	subi	r16, 0x69	; 105
    8cae:	11 09       	sbc	r17, r1
    8cb0:	25 4d       	sbci	r18, 0xD5	; 213
    8cb2:	3c 4b       	sbci	r19, 0xBC	; 188
    8cb4:	40 0f       	add	r20, r16
    8cb6:	51 1f       	adc	r21, r17
    8cb8:	62 1f       	adc	r22, r18
    8cba:	73 1f       	adc	r23, r19
    8cbc:	95 01       	movw	r18, r10
    8cbe:	84 01       	movw	r16, r8
    8cc0:	00 95       	com	r16
    8cc2:	10 95       	com	r17
    8cc4:	20 95       	com	r18
    8cc6:	30 95       	com	r19
    8cc8:	08 2b       	or	r16, r24
    8cca:	19 2b       	or	r17, r25
    8ccc:	2a 2b       	or	r18, r26
    8cce:	3b 2b       	or	r19, r27
    8cd0:	0c 25       	eor	r16, r12
    8cd2:	1d 25       	eor	r17, r13
    8cd4:	2e 25       	eor	r18, r14
    8cd6:	3f 25       	eor	r19, r15
    8cd8:	40 0f       	add	r20, r16
    8cda:	51 1f       	adc	r21, r17
    8cdc:	62 1f       	adc	r22, r18
    8cde:	73 1f       	adc	r23, r19
    8ce0:	8a 01       	movw	r16, r20
    8ce2:	9b 01       	movw	r18, r22
    8ce4:	0f 2e       	mov	r0, r31
    8ce6:	fa e0       	ldi	r31, 0x0A	; 10
    8ce8:	00 0f       	add	r16, r16
    8cea:	11 1f       	adc	r17, r17
    8cec:	22 1f       	adc	r18, r18
    8cee:	33 1f       	adc	r19, r19
    8cf0:	fa 95       	dec	r31
    8cf2:	d1 f7       	brne	.-12     	; 0x8ce8 <__stack+0xae9>
    8cf4:	f0 2d       	mov	r31, r0
    8cf6:	03 2e       	mov	r0, r19
    8cf8:	36 e1       	ldi	r19, 0x16	; 22
    8cfa:	76 95       	lsr	r23
    8cfc:	67 95       	ror	r22
    8cfe:	57 95       	ror	r21
    8d00:	47 95       	ror	r20
    8d02:	3a 95       	dec	r19
    8d04:	d1 f7       	brne	.-12     	; 0x8cfa <__stack+0xafb>
    8d06:	30 2d       	mov	r19, r0
    8d08:	40 2b       	or	r20, r16
    8d0a:	51 2b       	or	r21, r17
    8d0c:	62 2b       	or	r22, r18
    8d0e:	73 2b       	or	r23, r19
    8d10:	48 0f       	add	r20, r24
    8d12:	59 1f       	adc	r21, r25
    8d14:	6a 1f       	adc	r22, r26
    8d16:	7b 1f       	adc	r23, r27
    8d18:	25 96       	adiw	r28, 0x05	; 5
    8d1a:	0c ad       	ldd	r16, Y+60	; 0x3c
    8d1c:	1d ad       	ldd	r17, Y+61	; 0x3d
    8d1e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d20:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d22:	25 97       	sbiw	r28, 0x05	; 5
    8d24:	09 55       	subi	r16, 0x59	; 89
    8d26:	1c 4d       	sbci	r17, 0xDC	; 220
    8d28:	2b 46       	sbci	r18, 0x6B	; 107
    8d2a:	34 45       	sbci	r19, 0x54	; 84
    8d2c:	80 0e       	add	r8, r16
    8d2e:	91 1e       	adc	r9, r17
    8d30:	a2 1e       	adc	r10, r18
    8d32:	b3 1e       	adc	r11, r19
    8d34:	26 01       	movw	r4, r12
    8d36:	37 01       	movw	r6, r14
    8d38:	40 94       	com	r4
    8d3a:	50 94       	com	r5
    8d3c:	60 94       	com	r6
    8d3e:	70 94       	com	r7
    8d40:	44 2a       	or	r4, r20
    8d42:	55 2a       	or	r5, r21
    8d44:	66 2a       	or	r6, r22
    8d46:	77 2a       	or	r7, r23
    8d48:	48 26       	eor	r4, r24
    8d4a:	59 26       	eor	r5, r25
    8d4c:	6a 26       	eor	r6, r26
    8d4e:	7b 26       	eor	r7, r27
    8d50:	84 0c       	add	r8, r4
    8d52:	95 1c       	adc	r9, r5
    8d54:	a6 1c       	adc	r10, r6
    8d56:	b7 1c       	adc	r11, r7
    8d58:	24 01       	movw	r4, r8
    8d5a:	35 01       	movw	r6, r10
    8d5c:	03 2e       	mov	r0, r19
    8d5e:	3f e0       	ldi	r19, 0x0F	; 15
    8d60:	44 0c       	add	r4, r4
    8d62:	55 1c       	adc	r5, r5
    8d64:	66 1c       	adc	r6, r6
    8d66:	77 1c       	adc	r7, r7
    8d68:	3a 95       	dec	r19
    8d6a:	d1 f7       	brne	.-12     	; 0x8d60 <__stack+0xb61>
    8d6c:	30 2d       	mov	r19, r0
    8d6e:	07 2e       	mov	r0, r23
    8d70:	71 e1       	ldi	r23, 0x11	; 17
    8d72:	b6 94       	lsr	r11
    8d74:	a7 94       	ror	r10
    8d76:	97 94       	ror	r9
    8d78:	87 94       	ror	r8
    8d7a:	7a 95       	dec	r23
    8d7c:	d1 f7       	brne	.-12     	; 0x8d72 <__stack+0xb73>
    8d7e:	70 2d       	mov	r23, r0
    8d80:	84 28       	or	r8, r4
    8d82:	95 28       	or	r9, r5
    8d84:	a6 28       	or	r10, r6
    8d86:	b7 28       	or	r11, r7
    8d88:	84 0e       	add	r8, r20
    8d8a:	95 1e       	adc	r9, r21
    8d8c:	a6 1e       	adc	r10, r22
    8d8e:	b7 1e       	adc	r11, r23
    8d90:	0d 8d       	ldd	r16, Y+29	; 0x1d
    8d92:	1e 8d       	ldd	r17, Y+30	; 0x1e
    8d94:	2f 8d       	ldd	r18, Y+31	; 0x1f
    8d96:	38 a1       	ldd	r19, Y+32	; 0x20
    8d98:	07 5c       	subi	r16, 0xC7	; 199
    8d9a:	1f 45       	sbci	r17, 0x5F	; 95
    8d9c:	2c 46       	sbci	r18, 0x6C	; 108
    8d9e:	33 40       	sbci	r19, 0x03	; 3
    8da0:	c0 0e       	add	r12, r16
    8da2:	d1 1e       	adc	r13, r17
    8da4:	e2 1e       	adc	r14, r18
    8da6:	f3 1e       	adc	r15, r19
    8da8:	8c 01       	movw	r16, r24
    8daa:	9d 01       	movw	r18, r26
    8dac:	00 95       	com	r16
    8dae:	10 95       	com	r17
    8db0:	20 95       	com	r18
    8db2:	30 95       	com	r19
    8db4:	08 29       	or	r16, r8
    8db6:	19 29       	or	r17, r9
    8db8:	2a 29       	or	r18, r10
    8dba:	3b 29       	or	r19, r11
    8dbc:	04 27       	eor	r16, r20
    8dbe:	15 27       	eor	r17, r21
    8dc0:	26 27       	eor	r18, r22
    8dc2:	37 27       	eor	r19, r23
    8dc4:	c0 0e       	add	r12, r16
    8dc6:	d1 1e       	adc	r13, r17
    8dc8:	e2 1e       	adc	r14, r18
    8dca:	f3 1e       	adc	r15, r19
    8dcc:	97 01       	movw	r18, r14
    8dce:	86 01       	movw	r16, r12
    8dd0:	0f 2e       	mov	r0, r31
    8dd2:	fb e0       	ldi	r31, 0x0B	; 11
    8dd4:	36 95       	lsr	r19
    8dd6:	27 95       	ror	r18
    8dd8:	17 95       	ror	r17
    8dda:	07 95       	ror	r16
    8ddc:	fa 95       	dec	r31
    8dde:	d1 f7       	brne	.-12     	; 0x8dd4 <__stack+0xbd5>
    8de0:	f0 2d       	mov	r31, r0
    8de2:	0b 2e       	mov	r0, r27
    8de4:	b5 e1       	ldi	r27, 0x15	; 21
    8de6:	cc 0c       	add	r12, r12
    8de8:	dd 1c       	adc	r13, r13
    8dea:	ee 1c       	adc	r14, r14
    8dec:	ff 1c       	adc	r15, r15
    8dee:	ba 95       	dec	r27
    8df0:	d1 f7       	brne	.-12     	; 0x8de6 <__stack+0xbe7>
    8df2:	b0 2d       	mov	r27, r0
    8df4:	c0 2a       	or	r12, r16
    8df6:	d1 2a       	or	r13, r17
    8df8:	e2 2a       	or	r14, r18
    8dfa:	f3 2a       	or	r15, r19
    8dfc:	c8 0c       	add	r12, r8
    8dfe:	d9 1c       	adc	r13, r9
    8e00:	ea 1c       	adc	r14, r10
    8e02:	fb 1c       	adc	r15, r11
    8e04:	09 ad       	ldd	r16, Y+57	; 0x39
    8e06:	1a ad       	ldd	r17, Y+58	; 0x3a
    8e08:	2b ad       	ldd	r18, Y+59	; 0x3b
    8e0a:	3c ad       	ldd	r19, Y+60	; 0x3c
    8e0c:	0d 53       	subi	r16, 0x3D	; 61
    8e0e:	16 4a       	sbci	r17, 0xA6	; 166
    8e10:	24 4a       	sbci	r18, 0xA4	; 164
    8e12:	3a 49       	sbci	r19, 0x9A	; 154
    8e14:	80 0f       	add	r24, r16
    8e16:	91 1f       	adc	r25, r17
    8e18:	a2 1f       	adc	r26, r18
    8e1a:	b3 1f       	adc	r27, r19
    8e1c:	2a 01       	movw	r4, r20
    8e1e:	3b 01       	movw	r6, r22
    8e20:	40 94       	com	r4
    8e22:	50 94       	com	r5
    8e24:	60 94       	com	r6
    8e26:	70 94       	com	r7
    8e28:	4c 28       	or	r4, r12
    8e2a:	5d 28       	or	r5, r13
    8e2c:	6e 28       	or	r6, r14
    8e2e:	7f 28       	or	r7, r15
    8e30:	48 24       	eor	r4, r8
    8e32:	59 24       	eor	r5, r9
    8e34:	6a 24       	eor	r6, r10
    8e36:	7b 24       	eor	r7, r11
    8e38:	84 0d       	add	r24, r4
    8e3a:	95 1d       	adc	r25, r5
    8e3c:	a6 1d       	adc	r26, r6
    8e3e:	b7 1d       	adc	r27, r7
    8e40:	8c 01       	movw	r16, r24
    8e42:	9d 01       	movw	r18, r26
    8e44:	00 0f       	add	r16, r16
    8e46:	11 1f       	adc	r17, r17
    8e48:	22 1f       	adc	r18, r18
    8e4a:	33 1f       	adc	r19, r19
    8e4c:	00 0f       	add	r16, r16
    8e4e:	11 1f       	adc	r17, r17
    8e50:	22 1f       	adc	r18, r18
    8e52:	33 1f       	adc	r19, r19
    8e54:	00 0f       	add	r16, r16
    8e56:	11 1f       	adc	r17, r17
    8e58:	22 1f       	adc	r18, r18
    8e5a:	33 1f       	adc	r19, r19
    8e5c:	00 0f       	add	r16, r16
    8e5e:	11 1f       	adc	r17, r17
    8e60:	22 1f       	adc	r18, r18
    8e62:	33 1f       	adc	r19, r19
    8e64:	00 0f       	add	r16, r16
    8e66:	11 1f       	adc	r17, r17
    8e68:	22 1f       	adc	r18, r18
    8e6a:	33 1f       	adc	r19, r19
    8e6c:	00 0f       	add	r16, r16
    8e6e:	11 1f       	adc	r17, r17
    8e70:	22 1f       	adc	r18, r18
    8e72:	33 1f       	adc	r19, r19
    8e74:	07 2e       	mov	r0, r23
    8e76:	7a e1       	ldi	r23, 0x1A	; 26
    8e78:	b6 95       	lsr	r27
    8e7a:	a7 95       	ror	r26
    8e7c:	97 95       	ror	r25
    8e7e:	87 95       	ror	r24
    8e80:	7a 95       	dec	r23
    8e82:	d1 f7       	brne	.-12     	; 0x8e78 <__stack+0xc79>
    8e84:	70 2d       	mov	r23, r0
    8e86:	80 2b       	or	r24, r16
    8e88:	91 2b       	or	r25, r17
    8e8a:	a2 2b       	or	r26, r18
    8e8c:	b3 2b       	or	r27, r19
    8e8e:	8c 0d       	add	r24, r12
    8e90:	9d 1d       	adc	r25, r13
    8e92:	ae 1d       	adc	r26, r14
    8e94:	bf 1d       	adc	r27, r15
    8e96:	0d 89       	ldd	r16, Y+21	; 0x15
    8e98:	1e 89       	ldd	r17, Y+22	; 0x16
    8e9a:	2f 89       	ldd	r18, Y+23	; 0x17
    8e9c:	38 8d       	ldd	r19, Y+24	; 0x18
    8e9e:	0e 56       	subi	r16, 0x6E	; 110
    8ea0:	13 43       	sbci	r17, 0x33	; 51
    8ea2:	23 4f       	sbci	r18, 0xF3	; 243
    8ea4:	30 47       	sbci	r19, 0x70	; 112
    8ea6:	40 0f       	add	r20, r16
    8ea8:	51 1f       	adc	r21, r17
    8eaa:	62 1f       	adc	r22, r18
    8eac:	73 1f       	adc	r23, r19
    8eae:	95 01       	movw	r18, r10
    8eb0:	84 01       	movw	r16, r8
    8eb2:	00 95       	com	r16
    8eb4:	10 95       	com	r17
    8eb6:	20 95       	com	r18
    8eb8:	30 95       	com	r19
    8eba:	08 2b       	or	r16, r24
    8ebc:	19 2b       	or	r17, r25
    8ebe:	2a 2b       	or	r18, r26
    8ec0:	3b 2b       	or	r19, r27
    8ec2:	0c 25       	eor	r16, r12
    8ec4:	1d 25       	eor	r17, r13
    8ec6:	2e 25       	eor	r18, r14
    8ec8:	3f 25       	eor	r19, r15
    8eca:	40 0f       	add	r20, r16
    8ecc:	51 1f       	adc	r21, r17
    8ece:	62 1f       	adc	r22, r18
    8ed0:	73 1f       	adc	r23, r19
    8ed2:	8a 01       	movw	r16, r20
    8ed4:	9b 01       	movw	r18, r22
    8ed6:	0f 2e       	mov	r0, r31
    8ed8:	fa e0       	ldi	r31, 0x0A	; 10
    8eda:	00 0f       	add	r16, r16
    8edc:	11 1f       	adc	r17, r17
    8ede:	22 1f       	adc	r18, r18
    8ee0:	33 1f       	adc	r19, r19
    8ee2:	fa 95       	dec	r31
    8ee4:	d1 f7       	brne	.-12     	; 0x8eda <__stack+0xcdb>
    8ee6:	f0 2d       	mov	r31, r0
    8ee8:	03 2e       	mov	r0, r19
    8eea:	36 e1       	ldi	r19, 0x16	; 22
    8eec:	76 95       	lsr	r23
    8eee:	67 95       	ror	r22
    8ef0:	57 95       	ror	r21
    8ef2:	47 95       	ror	r20
    8ef4:	3a 95       	dec	r19
    8ef6:	d1 f7       	brne	.-12     	; 0x8eec <__stack+0xced>
    8ef8:	30 2d       	mov	r19, r0
    8efa:	40 2b       	or	r20, r16
    8efc:	51 2b       	or	r21, r17
    8efe:	62 2b       	or	r22, r18
    8f00:	73 2b       	or	r23, r19
    8f02:	48 0f       	add	r20, r24
    8f04:	59 1f       	adc	r21, r25
    8f06:	6a 1f       	adc	r22, r26
    8f08:	7b 1f       	adc	r23, r27
    8f0a:	09 a9       	ldd	r16, Y+49	; 0x31
    8f0c:	1a a9       	ldd	r17, Y+50	; 0x32
    8f0e:	2b a9       	ldd	r18, Y+51	; 0x33
    8f10:	3c a9       	ldd	r19, Y+52	; 0x34
    8f12:	03 58       	subi	r16, 0x83	; 131
    8f14:	1b 40       	sbci	r17, 0x0B	; 11
    8f16:	20 41       	sbci	r18, 0x10	; 16
    8f18:	31 09       	sbc	r19, r1
    8f1a:	80 0e       	add	r8, r16
    8f1c:	91 1e       	adc	r9, r17
    8f1e:	a2 1e       	adc	r10, r18
    8f20:	b3 1e       	adc	r11, r19
    8f22:	97 01       	movw	r18, r14
    8f24:	86 01       	movw	r16, r12
    8f26:	00 95       	com	r16
    8f28:	10 95       	com	r17
    8f2a:	20 95       	com	r18
    8f2c:	30 95       	com	r19
    8f2e:	04 2b       	or	r16, r20
    8f30:	15 2b       	or	r17, r21
    8f32:	26 2b       	or	r18, r22
    8f34:	37 2b       	or	r19, r23
    8f36:	28 01       	movw	r4, r16
    8f38:	39 01       	movw	r6, r18
    8f3a:	48 26       	eor	r4, r24
    8f3c:	59 26       	eor	r5, r25
    8f3e:	6a 26       	eor	r6, r26
    8f40:	7b 26       	eor	r7, r27
    8f42:	95 01       	movw	r18, r10
    8f44:	84 01       	movw	r16, r8
    8f46:	04 0d       	add	r16, r4
    8f48:	15 1d       	adc	r17, r5
    8f4a:	26 1d       	adc	r18, r6
    8f4c:	37 1d       	adc	r19, r7
    8f4e:	28 01       	movw	r4, r16
    8f50:	39 01       	movw	r6, r18
    8f52:	03 2e       	mov	r0, r19
    8f54:	3f e0       	ldi	r19, 0x0F	; 15
    8f56:	44 0c       	add	r4, r4
    8f58:	55 1c       	adc	r5, r5
    8f5a:	66 1c       	adc	r6, r6
    8f5c:	77 1c       	adc	r7, r7
    8f5e:	3a 95       	dec	r19
    8f60:	d1 f7       	brne	.-12     	; 0x8f56 <__stack+0xd57>
    8f62:	30 2d       	mov	r19, r0
    8f64:	0f 2e       	mov	r0, r31
    8f66:	f1 e1       	ldi	r31, 0x11	; 17
    8f68:	36 95       	lsr	r19
    8f6a:	27 95       	ror	r18
    8f6c:	17 95       	ror	r17
    8f6e:	07 95       	ror	r16
    8f70:	fa 95       	dec	r31
    8f72:	d1 f7       	brne	.-12     	; 0x8f68 <__stack+0xd69>
    8f74:	f0 2d       	mov	r31, r0
    8f76:	04 29       	or	r16, r4
    8f78:	15 29       	or	r17, r5
    8f7a:	26 29       	or	r18, r6
    8f7c:	37 29       	or	r19, r7
    8f7e:	04 0f       	add	r16, r20
    8f80:	15 1f       	adc	r17, r21
    8f82:	26 1f       	adc	r18, r22
    8f84:	37 1f       	adc	r19, r23
    8f86:	8d 84       	ldd	r8, Y+13	; 0x0d
    8f88:	9e 84       	ldd	r9, Y+14	; 0x0e
    8f8a:	af 84       	ldd	r10, Y+15	; 0x0f
    8f8c:	b8 88       	ldd	r11, Y+16	; 0x10
    8f8e:	ef e2       	ldi	r30, 0x2F	; 47
    8f90:	8e 1a       	sub	r8, r30
    8f92:	e2 ea       	ldi	r30, 0xA2	; 162
    8f94:	9e 0a       	sbc	r9, r30
    8f96:	eb e7       	ldi	r30, 0x7B	; 123
    8f98:	ae 0a       	sbc	r10, r30
    8f9a:	ea e7       	ldi	r30, 0x7A	; 122
    8f9c:	be 0a       	sbc	r11, r30
    8f9e:	c8 0c       	add	r12, r8
    8fa0:	d9 1c       	adc	r13, r9
    8fa2:	ea 1c       	adc	r14, r10
    8fa4:	fb 1c       	adc	r15, r11
    8fa6:	4c 01       	movw	r8, r24
    8fa8:	5d 01       	movw	r10, r26
    8faa:	80 94       	com	r8
    8fac:	90 94       	com	r9
    8fae:	a0 94       	com	r10
    8fb0:	b0 94       	com	r11
    8fb2:	80 2a       	or	r8, r16
    8fb4:	91 2a       	or	r9, r17
    8fb6:	a2 2a       	or	r10, r18
    8fb8:	b3 2a       	or	r11, r19
    8fba:	84 26       	eor	r8, r20
    8fbc:	95 26       	eor	r9, r21
    8fbe:	a6 26       	eor	r10, r22
    8fc0:	b7 26       	eor	r11, r23
    8fc2:	c8 0c       	add	r12, r8
    8fc4:	d9 1c       	adc	r13, r9
    8fc6:	ea 1c       	adc	r14, r10
    8fc8:	fb 1c       	adc	r15, r11
    8fca:	46 01       	movw	r8, r12
    8fcc:	57 01       	movw	r10, r14
    8fce:	07 2e       	mov	r0, r23
    8fd0:	7b e0       	ldi	r23, 0x0B	; 11
    8fd2:	b6 94       	lsr	r11
    8fd4:	a7 94       	ror	r10
    8fd6:	97 94       	ror	r9
    8fd8:	87 94       	ror	r8
    8fda:	7a 95       	dec	r23
    8fdc:	d1 f7       	brne	.-12     	; 0x8fd2 <__stack+0xdd3>
    8fde:	70 2d       	mov	r23, r0
    8fe0:	0b 2e       	mov	r0, r27
    8fe2:	b5 e1       	ldi	r27, 0x15	; 21
    8fe4:	cc 0c       	add	r12, r12
    8fe6:	dd 1c       	adc	r13, r13
    8fe8:	ee 1c       	adc	r14, r14
    8fea:	ff 1c       	adc	r15, r15
    8fec:	ba 95       	dec	r27
    8fee:	d1 f7       	brne	.-12     	; 0x8fe4 <__stack+0xde5>
    8ff0:	b0 2d       	mov	r27, r0
    8ff2:	c8 28       	or	r12, r8
    8ff4:	d9 28       	or	r13, r9
    8ff6:	ea 28       	or	r14, r10
    8ff8:	fb 28       	or	r15, r11
    8ffa:	c0 0e       	add	r12, r16
    8ffc:	d1 1e       	adc	r13, r17
    8ffe:	e2 1e       	adc	r14, r18
    9000:	f3 1e       	adc	r15, r19
    9002:	89 a4       	ldd	r8, Y+41	; 0x29
    9004:	9a a4       	ldd	r9, Y+42	; 0x2a
    9006:	ab a4       	ldd	r10, Y+43	; 0x2b
    9008:	bc a4       	ldd	r11, Y+44	; 0x2c
    900a:	f1 eb       	ldi	r31, 0xB1	; 177
    900c:	8f 1a       	sub	r8, r31
    900e:	f1 e8       	ldi	r31, 0x81	; 129
    9010:	9f 0a       	sbc	r9, r31
    9012:	f7 e5       	ldi	r31, 0x57	; 87
    9014:	af 0a       	sbc	r10, r31
    9016:	f0 e9       	ldi	r31, 0x90	; 144
    9018:	bf 0a       	sbc	r11, r31
    901a:	88 0d       	add	r24, r8
    901c:	99 1d       	adc	r25, r9
    901e:	aa 1d       	adc	r26, r10
    9020:	bb 1d       	adc	r27, r11
    9022:	2a 01       	movw	r4, r20
    9024:	3b 01       	movw	r6, r22
    9026:	40 94       	com	r4
    9028:	50 94       	com	r5
    902a:	60 94       	com	r6
    902c:	70 94       	com	r7
    902e:	4c 28       	or	r4, r12
    9030:	5d 28       	or	r5, r13
    9032:	6e 28       	or	r6, r14
    9034:	7f 28       	or	r7, r15
    9036:	40 26       	eor	r4, r16
    9038:	51 26       	eor	r5, r17
    903a:	62 26       	eor	r6, r18
    903c:	73 26       	eor	r7, r19
    903e:	84 0d       	add	r24, r4
    9040:	95 1d       	adc	r25, r5
    9042:	a6 1d       	adc	r26, r6
    9044:	b7 1d       	adc	r27, r7
    9046:	4c 01       	movw	r8, r24
    9048:	5d 01       	movw	r10, r26
    904a:	88 0c       	add	r8, r8
    904c:	99 1c       	adc	r9, r9
    904e:	aa 1c       	adc	r10, r10
    9050:	bb 1c       	adc	r11, r11
    9052:	88 0c       	add	r8, r8
    9054:	99 1c       	adc	r9, r9
    9056:	aa 1c       	adc	r10, r10
    9058:	bb 1c       	adc	r11, r11
    905a:	88 0c       	add	r8, r8
    905c:	99 1c       	adc	r9, r9
    905e:	aa 1c       	adc	r10, r10
    9060:	bb 1c       	adc	r11, r11
    9062:	88 0c       	add	r8, r8
    9064:	99 1c       	adc	r9, r9
    9066:	aa 1c       	adc	r10, r10
    9068:	bb 1c       	adc	r11, r11
    906a:	88 0c       	add	r8, r8
    906c:	99 1c       	adc	r9, r9
    906e:	aa 1c       	adc	r10, r10
    9070:	bb 1c       	adc	r11, r11
    9072:	88 0c       	add	r8, r8
    9074:	99 1c       	adc	r9, r9
    9076:	aa 1c       	adc	r10, r10
    9078:	bb 1c       	adc	r11, r11
    907a:	07 2e       	mov	r0, r23
    907c:	7a e1       	ldi	r23, 0x1A	; 26
    907e:	b6 95       	lsr	r27
    9080:	a7 95       	ror	r26
    9082:	97 95       	ror	r25
    9084:	87 95       	ror	r24
    9086:	7a 95       	dec	r23
    9088:	d1 f7       	brne	.-12     	; 0x907e <__stack+0xe7f>
    908a:	70 2d       	mov	r23, r0
    908c:	88 29       	or	r24, r8
    908e:	99 29       	or	r25, r9
    9090:	aa 29       	or	r26, r10
    9092:	bb 29       	or	r27, r11
    9094:	8c 0d       	add	r24, r12
    9096:	9d 1d       	adc	r25, r13
    9098:	ae 1d       	adc	r26, r14
    909a:	bf 1d       	adc	r27, r15
    909c:	29 96       	adiw	r28, 0x09	; 9
    909e:	8c ac       	ldd	r8, Y+60	; 0x3c
    90a0:	9d ac       	ldd	r9, Y+61	; 0x3d
    90a2:	ae ac       	ldd	r10, Y+62	; 0x3e
    90a4:	bf ac       	ldd	r11, Y+63	; 0x3f
    90a6:	29 97       	sbiw	r28, 0x09	; 9
    90a8:	e0 e2       	ldi	r30, 0x20	; 32
    90aa:	8e 1a       	sub	r8, r30
    90ac:	e9 e1       	ldi	r30, 0x19	; 25
    90ae:	9e 0a       	sbc	r9, r30
    90b0:	e3 ed       	ldi	r30, 0xD3	; 211
    90b2:	ae 0a       	sbc	r10, r30
    90b4:	e1 e0       	ldi	r30, 0x01	; 1
    90b6:	be 0a       	sbc	r11, r30
    90b8:	48 0d       	add	r20, r8
    90ba:	59 1d       	adc	r21, r9
    90bc:	6a 1d       	adc	r22, r10
    90be:	7b 1d       	adc	r23, r11
    90c0:	48 01       	movw	r8, r16
    90c2:	59 01       	movw	r10, r18
    90c4:	80 94       	com	r8
    90c6:	90 94       	com	r9
    90c8:	a0 94       	com	r10
    90ca:	b0 94       	com	r11
    90cc:	88 2a       	or	r8, r24
    90ce:	99 2a       	or	r9, r25
    90d0:	aa 2a       	or	r10, r26
    90d2:	bb 2a       	or	r11, r27
    90d4:	8c 24       	eor	r8, r12
    90d6:	9d 24       	eor	r9, r13
    90d8:	ae 24       	eor	r10, r14
    90da:	bf 24       	eor	r11, r15
    90dc:	48 0d       	add	r20, r8
    90de:	59 1d       	adc	r21, r9
    90e0:	6a 1d       	adc	r22, r10
    90e2:	7b 1d       	adc	r23, r11
    90e4:	4a 01       	movw	r8, r20
    90e6:	5b 01       	movw	r10, r22
    90e8:	07 2e       	mov	r0, r23
    90ea:	7a e0       	ldi	r23, 0x0A	; 10
    90ec:	88 0c       	add	r8, r8
    90ee:	99 1c       	adc	r9, r9
    90f0:	aa 1c       	adc	r10, r10
    90f2:	bb 1c       	adc	r11, r11
    90f4:	7a 95       	dec	r23
    90f6:	d1 f7       	brne	.-12     	; 0x90ec <__stack+0xeed>
    90f8:	70 2d       	mov	r23, r0
    90fa:	03 2e       	mov	r0, r19
    90fc:	36 e1       	ldi	r19, 0x16	; 22
    90fe:	76 95       	lsr	r23
    9100:	67 95       	ror	r22
    9102:	57 95       	ror	r21
    9104:	47 95       	ror	r20
    9106:	3a 95       	dec	r19
    9108:	d1 f7       	brne	.-12     	; 0x90fe <__stack+0xeff>
    910a:	30 2d       	mov	r19, r0
    910c:	48 29       	or	r20, r8
    910e:	59 29       	or	r21, r9
    9110:	6a 29       	or	r22, r10
    9112:	7b 29       	or	r23, r11
    9114:	48 0f       	add	r20, r24
    9116:	59 1f       	adc	r21, r25
    9118:	6a 1f       	adc	r22, r26
    911a:	7b 1f       	adc	r23, r27
    911c:	89 a0       	ldd	r8, Y+33	; 0x21
    911e:	9a a0       	ldd	r9, Y+34	; 0x22
    9120:	ab a0       	ldd	r10, Y+35	; 0x23
    9122:	bc a0       	ldd	r11, Y+36	; 0x24
    9124:	fc ee       	ldi	r31, 0xEC	; 236
    9126:	8f 1a       	sub	r8, r31
    9128:	fc eb       	ldi	r31, 0xBC	; 188
    912a:	9f 0a       	sbc	r9, r31
    912c:	fe ef       	ldi	r31, 0xFE	; 254
    912e:	af 0a       	sbc	r10, r31
    9130:	fc e5       	ldi	r31, 0x5C	; 92
    9132:	bf 0a       	sbc	r11, r31
    9134:	08 0d       	add	r16, r8
    9136:	19 1d       	adc	r17, r9
    9138:	2a 1d       	adc	r18, r10
    913a:	3b 1d       	adc	r19, r11
    913c:	46 01       	movw	r8, r12
    913e:	57 01       	movw	r10, r14
    9140:	80 94       	com	r8
    9142:	90 94       	com	r9
    9144:	a0 94       	com	r10
    9146:	b0 94       	com	r11
    9148:	84 2a       	or	r8, r20
    914a:	95 2a       	or	r9, r21
    914c:	a6 2a       	or	r10, r22
    914e:	b7 2a       	or	r11, r23
    9150:	88 26       	eor	r8, r24
    9152:	99 26       	eor	r9, r25
    9154:	aa 26       	eor	r10, r26
    9156:	bb 26       	eor	r11, r27
    9158:	08 0d       	add	r16, r8
    915a:	19 1d       	adc	r17, r9
    915c:	2a 1d       	adc	r18, r10
    915e:	3b 1d       	adc	r19, r11
    9160:	48 01       	movw	r8, r16
    9162:	59 01       	movw	r10, r18
    9164:	07 2e       	mov	r0, r23
    9166:	7f e0       	ldi	r23, 0x0F	; 15
    9168:	88 0c       	add	r8, r8
    916a:	99 1c       	adc	r9, r9
    916c:	aa 1c       	adc	r10, r10
    916e:	bb 1c       	adc	r11, r11
    9170:	7a 95       	dec	r23
    9172:	d1 f7       	brne	.-12     	; 0x9168 <__stack+0xf69>
    9174:	70 2d       	mov	r23, r0
    9176:	0f 2e       	mov	r0, r31
    9178:	f1 e1       	ldi	r31, 0x11	; 17
    917a:	36 95       	lsr	r19
    917c:	27 95       	ror	r18
    917e:	17 95       	ror	r17
    9180:	07 95       	ror	r16
    9182:	fa 95       	dec	r31
    9184:	d1 f7       	brne	.-12     	; 0x917a <__stack+0xf7b>
    9186:	f0 2d       	mov	r31, r0
    9188:	08 29       	or	r16, r8
    918a:	19 29       	or	r17, r9
    918c:	2a 29       	or	r18, r10
    918e:	3b 29       	or	r19, r11
    9190:	04 0f       	add	r16, r20
    9192:	15 1f       	adc	r17, r21
    9194:	26 1f       	adc	r18, r22
    9196:	37 1f       	adc	r19, r23
    9198:	21 96       	adiw	r28, 0x01	; 1
    919a:	8c ac       	ldd	r8, Y+60	; 0x3c
    919c:	9d ac       	ldd	r9, Y+61	; 0x3d
    919e:	ae ac       	ldd	r10, Y+62	; 0x3e
    91a0:	bf ac       	ldd	r11, Y+63	; 0x3f
    91a2:	21 97       	sbiw	r28, 0x01	; 1
    91a4:	ef e5       	ldi	r30, 0x5F	; 95
    91a6:	8e 1a       	sub	r8, r30
    91a8:	ee ee       	ldi	r30, 0xEE	; 238
    91aa:	9e 0a       	sbc	r9, r30
    91ac:	e7 ef       	ldi	r30, 0xF7	; 247
    91ae:	ae 0a       	sbc	r10, r30
    91b0:	e1 eb       	ldi	r30, 0xB1	; 177
    91b2:	be 0a       	sbc	r11, r30
    91b4:	c8 0c       	add	r12, r8
    91b6:	d9 1c       	adc	r13, r9
    91b8:	ea 1c       	adc	r14, r10
    91ba:	fb 1c       	adc	r15, r11
    91bc:	4c 01       	movw	r8, r24
    91be:	5d 01       	movw	r10, r26
    91c0:	80 94       	com	r8
    91c2:	90 94       	com	r9
    91c4:	a0 94       	com	r10
    91c6:	b0 94       	com	r11
    91c8:	80 2a       	or	r8, r16
    91ca:	91 2a       	or	r9, r17
    91cc:	a2 2a       	or	r10, r18
    91ce:	b3 2a       	or	r11, r19
    91d0:	84 26       	eor	r8, r20
    91d2:	95 26       	eor	r9, r21
    91d4:	a6 26       	eor	r10, r22
    91d6:	b7 26       	eor	r11, r23
    91d8:	c8 0c       	add	r12, r8
    91da:	d9 1c       	adc	r13, r9
    91dc:	ea 1c       	adc	r14, r10
    91de:	fb 1c       	adc	r15, r11
    91e0:	46 01       	movw	r8, r12
    91e2:	57 01       	movw	r10, r14
    91e4:	07 2e       	mov	r0, r23
    91e6:	7b e0       	ldi	r23, 0x0B	; 11
    91e8:	b6 94       	lsr	r11
    91ea:	a7 94       	ror	r10
    91ec:	97 94       	ror	r9
    91ee:	87 94       	ror	r8
    91f0:	7a 95       	dec	r23
    91f2:	d1 f7       	brne	.-12     	; 0x91e8 <__stack+0xfe9>
    91f4:	70 2d       	mov	r23, r0
    91f6:	0b 2e       	mov	r0, r27
    91f8:	b5 e1       	ldi	r27, 0x15	; 21
    91fa:	cc 0c       	add	r12, r12
    91fc:	dd 1c       	adc	r13, r13
    91fe:	ee 1c       	adc	r14, r14
    9200:	ff 1c       	adc	r15, r15
    9202:	ba 95       	dec	r27
    9204:	d1 f7       	brne	.-12     	; 0x91fa <__stack+0xffb>
    9206:	b0 2d       	mov	r27, r0
    9208:	c8 28       	or	r12, r8
    920a:	d9 28       	or	r13, r9
    920c:	ea 28       	or	r14, r10
    920e:	fb 28       	or	r15, r11
    9210:	c0 0e       	add	r12, r16
    9212:	d1 1e       	adc	r13, r17
    9214:	e2 1e       	adc	r14, r18
    9216:	f3 1e       	adc	r15, r19
    9218:	89 8c       	ldd	r8, Y+25	; 0x19
    921a:	9a 8c       	ldd	r9, Y+26	; 0x1a
    921c:	ab 8c       	ldd	r10, Y+27	; 0x1b
    921e:	bc 8c       	ldd	r11, Y+28	; 0x1c
    9220:	fe e7       	ldi	r31, 0x7E	; 126
    9222:	8f 1a       	sub	r8, r31
    9224:	f1 e8       	ldi	r31, 0x81	; 129
    9226:	9f 0a       	sbc	r9, r31
    9228:	fc ea       	ldi	r31, 0xAC	; 172
    922a:	af 0a       	sbc	r10, r31
    922c:	f8 e0       	ldi	r31, 0x08	; 8
    922e:	bf 0a       	sbc	r11, r31
    9230:	88 0d       	add	r24, r8
    9232:	99 1d       	adc	r25, r9
    9234:	aa 1d       	adc	r26, r10
    9236:	bb 1d       	adc	r27, r11
    9238:	2a 01       	movw	r4, r20
    923a:	3b 01       	movw	r6, r22
    923c:	40 94       	com	r4
    923e:	50 94       	com	r5
    9240:	60 94       	com	r6
    9242:	70 94       	com	r7
    9244:	4c 28       	or	r4, r12
    9246:	5d 28       	or	r5, r13
    9248:	6e 28       	or	r6, r14
    924a:	7f 28       	or	r7, r15
    924c:	40 26       	eor	r4, r16
    924e:	51 26       	eor	r5, r17
    9250:	62 26       	eor	r6, r18
    9252:	73 26       	eor	r7, r19
    9254:	84 0d       	add	r24, r4
    9256:	95 1d       	adc	r25, r5
    9258:	a6 1d       	adc	r26, r6
    925a:	b7 1d       	adc	r27, r7
    925c:	4c 01       	movw	r8, r24
    925e:	5d 01       	movw	r10, r26
    9260:	88 0c       	add	r8, r8
    9262:	99 1c       	adc	r9, r9
    9264:	aa 1c       	adc	r10, r10
    9266:	bb 1c       	adc	r11, r11
    9268:	88 0c       	add	r8, r8
    926a:	99 1c       	adc	r9, r9
    926c:	aa 1c       	adc	r10, r10
    926e:	bb 1c       	adc	r11, r11
    9270:	88 0c       	add	r8, r8
    9272:	99 1c       	adc	r9, r9
    9274:	aa 1c       	adc	r10, r10
    9276:	bb 1c       	adc	r11, r11
    9278:	88 0c       	add	r8, r8
    927a:	99 1c       	adc	r9, r9
    927c:	aa 1c       	adc	r10, r10
    927e:	bb 1c       	adc	r11, r11
    9280:	88 0c       	add	r8, r8
    9282:	99 1c       	adc	r9, r9
    9284:	aa 1c       	adc	r10, r10
    9286:	bb 1c       	adc	r11, r11
    9288:	88 0c       	add	r8, r8
    928a:	99 1c       	adc	r9, r9
    928c:	aa 1c       	adc	r10, r10
    928e:	bb 1c       	adc	r11, r11
    9290:	07 2e       	mov	r0, r23
    9292:	7a e1       	ldi	r23, 0x1A	; 26
    9294:	b6 95       	lsr	r27
    9296:	a7 95       	ror	r26
    9298:	97 95       	ror	r25
    929a:	87 95       	ror	r24
    929c:	7a 95       	dec	r23
    929e:	d1 f7       	brne	.-12     	; 0x9294 <__stack+0x1095>
    92a0:	70 2d       	mov	r23, r0
    92a2:	88 29       	or	r24, r8
    92a4:	99 29       	or	r25, r9
    92a6:	aa 29       	or	r26, r10
    92a8:	bb 29       	or	r27, r11
    92aa:	8c 0d       	add	r24, r12
    92ac:	9d 1d       	adc	r25, r13
    92ae:	ae 1d       	adc	r26, r14
    92b0:	bf 1d       	adc	r27, r15
    92b2:	8d a8       	ldd	r8, Y+53	; 0x35
    92b4:	9e a8       	ldd	r9, Y+54	; 0x36
    92b6:	af a8       	ldd	r10, Y+55	; 0x37
    92b8:	b8 ac       	ldd	r11, Y+56	; 0x38
    92ba:	eb ec       	ldi	r30, 0xCB	; 203
    92bc:	8e 1a       	sub	r8, r30
    92be:	ed e0       	ldi	r30, 0x0D	; 13
    92c0:	9e 0a       	sbc	r9, r30
    92c2:	e5 ec       	ldi	r30, 0xC5	; 197
    92c4:	ae 0a       	sbc	r10, r30
    92c6:	e2 e4       	ldi	r30, 0x42	; 66
    92c8:	be 0a       	sbc	r11, r30
    92ca:	48 0d       	add	r20, r8
    92cc:	59 1d       	adc	r21, r9
    92ce:	6a 1d       	adc	r22, r10
    92d0:	7b 1d       	adc	r23, r11
    92d2:	48 01       	movw	r8, r16
    92d4:	59 01       	movw	r10, r18
    92d6:	80 94       	com	r8
    92d8:	90 94       	com	r9
    92da:	a0 94       	com	r10
    92dc:	b0 94       	com	r11
    92de:	88 2a       	or	r8, r24
    92e0:	99 2a       	or	r9, r25
    92e2:	aa 2a       	or	r10, r26
    92e4:	bb 2a       	or	r11, r27
    92e6:	8c 24       	eor	r8, r12
    92e8:	9d 24       	eor	r9, r13
    92ea:	ae 24       	eor	r10, r14
    92ec:	bf 24       	eor	r11, r15
    92ee:	48 0d       	add	r20, r8
    92f0:	59 1d       	adc	r21, r9
    92f2:	6a 1d       	adc	r22, r10
    92f4:	7b 1d       	adc	r23, r11
    92f6:	4a 01       	movw	r8, r20
    92f8:	5b 01       	movw	r10, r22
    92fa:	07 2e       	mov	r0, r23
    92fc:	7a e0       	ldi	r23, 0x0A	; 10
    92fe:	88 0c       	add	r8, r8
    9300:	99 1c       	adc	r9, r9
    9302:	aa 1c       	adc	r10, r10
    9304:	bb 1c       	adc	r11, r11
    9306:	7a 95       	dec	r23
    9308:	d1 f7       	brne	.-12     	; 0x92fe <__stack+0x10ff>
    930a:	70 2d       	mov	r23, r0
    930c:	03 2e       	mov	r0, r19
    930e:	36 e1       	ldi	r19, 0x16	; 22
    9310:	76 95       	lsr	r23
    9312:	67 95       	ror	r22
    9314:	57 95       	ror	r21
    9316:	47 95       	ror	r20
    9318:	3a 95       	dec	r19
    931a:	d1 f7       	brne	.-12     	; 0x9310 <__stack+0x1111>
    931c:	30 2d       	mov	r19, r0
    931e:	48 29       	or	r20, r8
    9320:	59 29       	or	r21, r9
    9322:	6a 29       	or	r22, r10
    9324:	7b 29       	or	r23, r11
    9326:	48 0f       	add	r20, r24
    9328:	59 1f       	adc	r21, r25
    932a:	6a 1f       	adc	r22, r26
    932c:	7b 1f       	adc	r23, r27
    932e:	89 88       	ldd	r8, Y+17	; 0x11
    9330:	9a 88       	ldd	r9, Y+18	; 0x12
    9332:	ab 88       	ldd	r10, Y+19	; 0x13
    9334:	bc 88       	ldd	r11, Y+20	; 0x14
    9336:	f5 e4       	ldi	r31, 0x45	; 69
    9338:	8f 1a       	sub	r8, r31
    933a:	fd e2       	ldi	r31, 0x2D	; 45
    933c:	9f 0a       	sbc	r9, r31
    933e:	f8 e2       	ldi	r31, 0x28	; 40
    9340:	af 0a       	sbc	r10, r31
    9342:	f5 ed       	ldi	r31, 0xD5	; 213
    9344:	bf 0a       	sbc	r11, r31
    9346:	08 0d       	add	r16, r8
    9348:	19 1d       	adc	r17, r9
    934a:	2a 1d       	adc	r18, r10
    934c:	3b 1d       	adc	r19, r11
    934e:	46 01       	movw	r8, r12
    9350:	57 01       	movw	r10, r14
    9352:	80 94       	com	r8
    9354:	90 94       	com	r9
    9356:	a0 94       	com	r10
    9358:	b0 94       	com	r11
    935a:	84 2a       	or	r8, r20
    935c:	95 2a       	or	r9, r21
    935e:	a6 2a       	or	r10, r22
    9360:	b7 2a       	or	r11, r23
    9362:	88 26       	eor	r8, r24
    9364:	99 26       	eor	r9, r25
    9366:	aa 26       	eor	r10, r26
    9368:	bb 26       	eor	r11, r27
    936a:	08 0d       	add	r16, r8
    936c:	19 1d       	adc	r17, r9
    936e:	2a 1d       	adc	r18, r10
    9370:	3b 1d       	adc	r19, r11
    9372:	48 01       	movw	r8, r16
    9374:	59 01       	movw	r10, r18
    9376:	07 2e       	mov	r0, r23
    9378:	7f e0       	ldi	r23, 0x0F	; 15
    937a:	88 0c       	add	r8, r8
    937c:	99 1c       	adc	r9, r9
    937e:	aa 1c       	adc	r10, r10
    9380:	bb 1c       	adc	r11, r11
    9382:	7a 95       	dec	r23
    9384:	d1 f7       	brne	.-12     	; 0x937a <__stack+0x117b>
    9386:	70 2d       	mov	r23, r0
    9388:	0f 2e       	mov	r0, r31
    938a:	f1 e1       	ldi	r31, 0x11	; 17
    938c:	36 95       	lsr	r19
    938e:	27 95       	ror	r18
    9390:	17 95       	ror	r17
    9392:	07 95       	ror	r16
    9394:	fa 95       	dec	r31
    9396:	d1 f7       	brne	.-12     	; 0x938c <__stack+0x118d>
    9398:	f0 2d       	mov	r31, r0
    939a:	08 29       	or	r16, r8
    939c:	19 29       	or	r17, r9
    939e:	2a 29       	or	r18, r10
    93a0:	3b 29       	or	r19, r11
    93a2:	04 0f       	add	r16, r20
    93a4:	15 1f       	adc	r17, r21
    93a6:	26 1f       	adc	r18, r22
    93a8:	37 1f       	adc	r19, r23
    93aa:	8d a4       	ldd	r8, Y+45	; 0x2d
    93ac:	9e a4       	ldd	r9, Y+46	; 0x2e
    93ae:	af a4       	ldd	r10, Y+47	; 0x2f
    93b0:	b8 a8       	ldd	r11, Y+48	; 0x30
    93b2:	ef e6       	ldi	r30, 0x6F	; 111
    93b4:	8e 1a       	sub	r8, r30
    93b6:	ec e2       	ldi	r30, 0x2C	; 44
    93b8:	9e 0a       	sbc	r9, r30
    93ba:	e9 e7       	ldi	r30, 0x79	; 121
    93bc:	ae 0a       	sbc	r10, r30
    93be:	e4 e1       	ldi	r30, 0x14	; 20
    93c0:	be 0a       	sbc	r11, r30
    93c2:	c8 0c       	add	r12, r8
    93c4:	d9 1c       	adc	r13, r9
    93c6:	ea 1c       	adc	r14, r10
    93c8:	fb 1c       	adc	r15, r11
    93ca:	61 96       	adiw	r28, 0x11	; 17
    93cc:	8c ac       	ldd	r8, Y+60	; 0x3c
    93ce:	9d ac       	ldd	r9, Y+61	; 0x3d
    93d0:	ae ac       	ldd	r10, Y+62	; 0x3e
    93d2:	bf ac       	ldd	r11, Y+63	; 0x3f
    93d4:	61 97       	sbiw	r28, 0x11	; 17
    93d6:	88 0e       	add	r8, r24
    93d8:	99 1e       	adc	r9, r25
    93da:	aa 1e       	adc	r10, r26
    93dc:	bb 1e       	adc	r11, r27
    93de:	f1 01       	movw	r30, r2
    93e0:	80 86       	std	Z+8, r8	; 0x08
    93e2:	91 86       	std	Z+9, r9	; 0x09
    93e4:	a2 86       	std	Z+10, r10	; 0x0a
    93e6:	b3 86       	std	Z+11, r11	; 0x0b
    93e8:	89 80       	ldd	r8, Y+1	; 0x01
    93ea:	9a 80       	ldd	r9, Y+2	; 0x02
    93ec:	ab 80       	ldd	r10, Y+3	; 0x03
    93ee:	bc 80       	ldd	r11, Y+4	; 0x04
    93f0:	80 0e       	add	r8, r16
    93f2:	91 1e       	adc	r9, r17
    93f4:	a2 1e       	adc	r10, r18
    93f6:	b3 1e       	adc	r11, r19
    93f8:	80 95       	com	r24
    93fa:	90 95       	com	r25
    93fc:	a0 95       	com	r26
    93fe:	b0 95       	com	r27
    9400:	80 2b       	or	r24, r16
    9402:	91 2b       	or	r25, r17
    9404:	a2 2b       	or	r26, r18
    9406:	b3 2b       	or	r27, r19
    9408:	84 27       	eor	r24, r20
    940a:	95 27       	eor	r25, r21
    940c:	a6 27       	eor	r26, r22
    940e:	b7 27       	eor	r27, r23
    9410:	c8 0e       	add	r12, r24
    9412:	d9 1e       	adc	r13, r25
    9414:	ea 1e       	adc	r14, r26
    9416:	fb 1e       	adc	r15, r27
    9418:	26 01       	movw	r4, r12
    941a:	37 01       	movw	r6, r14
    941c:	03 2e       	mov	r0, r19
    941e:	3b e0       	ldi	r19, 0x0B	; 11
    9420:	76 94       	lsr	r7
    9422:	67 94       	ror	r6
    9424:	57 94       	ror	r5
    9426:	47 94       	ror	r4
    9428:	3a 95       	dec	r19
    942a:	d1 f7       	brne	.-12     	; 0x9420 <__stack+0x1221>
    942c:	30 2d       	mov	r19, r0
    942e:	0b 2e       	mov	r0, r27
    9430:	b5 e1       	ldi	r27, 0x15	; 21
    9432:	cc 0c       	add	r12, r12
    9434:	dd 1c       	adc	r13, r13
    9436:	ee 1c       	adc	r14, r14
    9438:	ff 1c       	adc	r15, r15
    943a:	ba 95       	dec	r27
    943c:	d1 f7       	brne	.-12     	; 0x9432 <__stack+0x1233>
    943e:	b0 2d       	mov	r27, r0
    9440:	c4 28       	or	r12, r4
    9442:	d5 28       	or	r13, r5
    9444:	e6 28       	or	r14, r6
    9446:	f7 28       	or	r15, r7
    9448:	8c 0c       	add	r8, r12
    944a:	9d 1c       	adc	r9, r13
    944c:	ae 1c       	adc	r10, r14
    944e:	bf 1c       	adc	r11, r15
    9450:	84 86       	std	Z+12, r8	; 0x0c
    9452:	95 86       	std	Z+13, r9	; 0x0d
    9454:	a6 86       	std	Z+14, r10	; 0x0e
    9456:	b7 86       	std	Z+15, r11	; 0x0f
    9458:	cd 80       	ldd	r12, Y+5	; 0x05
    945a:	de 80       	ldd	r13, Y+6	; 0x06
    945c:	ef 80       	ldd	r14, Y+7	; 0x07
    945e:	f8 84       	ldd	r15, Y+8	; 0x08
    9460:	0c 0d       	add	r16, r12
    9462:	1d 1d       	adc	r17, r13
    9464:	2e 1d       	adc	r18, r14
    9466:	3f 1d       	adc	r19, r15
    9468:	00 8b       	std	Z+16, r16	; 0x10
    946a:	11 8b       	std	Z+17, r17	; 0x11
    946c:	22 8b       	std	Z+18, r18	; 0x12
    946e:	33 8b       	std	Z+19, r19	; 0x13
    9470:	2d 96       	adiw	r28, 0x0d	; 13
    9472:	cc ac       	ldd	r12, Y+60	; 0x3c
    9474:	dd ac       	ldd	r13, Y+61	; 0x3d
    9476:	ee ac       	ldd	r14, Y+62	; 0x3e
    9478:	ff ac       	ldd	r15, Y+63	; 0x3f
    947a:	2d 97       	sbiw	r28, 0x0d	; 13
    947c:	4c 0d       	add	r20, r12
    947e:	5d 1d       	adc	r21, r13
    9480:	6e 1d       	adc	r22, r14
    9482:	7f 1d       	adc	r23, r15
    9484:	44 8b       	std	Z+20, r20	; 0x14
    9486:	55 8b       	std	Z+21, r21	; 0x15
    9488:	66 8b       	std	Z+22, r22	; 0x16
    948a:	77 8b       	std	Z+23, r23	; 0x17
    948c:	c0 5b       	subi	r28, 0xB0	; 176
    948e:	df 4f       	sbci	r29, 0xFF	; 255
    9490:	0f b6       	in	r0, 0x3f	; 63
    9492:	f8 94       	cli
    9494:	de bf       	out	0x3e, r29	; 62
    9496:	0f be       	out	0x3f, r0	; 63
    9498:	cd bf       	out	0x3d, r28	; 61
    949a:	df 91       	pop	r29
    949c:	cf 91       	pop	r28
    949e:	1f 91       	pop	r17
    94a0:	0f 91       	pop	r16
    94a2:	ff 90       	pop	r15
    94a4:	ef 90       	pop	r14
    94a6:	df 90       	pop	r13
    94a8:	cf 90       	pop	r12
    94aa:	bf 90       	pop	r11
    94ac:	af 90       	pop	r10
    94ae:	9f 90       	pop	r9
    94b0:	8f 90       	pop	r8
    94b2:	7f 90       	pop	r7
    94b4:	6f 90       	pop	r6
    94b6:	5f 90       	pop	r5
    94b8:	4f 90       	pop	r4
    94ba:	3f 90       	pop	r3
    94bc:	2f 90       	pop	r2
    94be:	08 95       	ret

000094c0 <md5_starts>:
    94c0:	fc 01       	movw	r30, r24
    94c2:	10 82       	st	Z, r1
    94c4:	11 82       	std	Z+1, r1	; 0x01
    94c6:	12 82       	std	Z+2, r1	; 0x02
    94c8:	13 82       	std	Z+3, r1	; 0x03
    94ca:	14 82       	std	Z+4, r1	; 0x04
    94cc:	15 82       	std	Z+5, r1	; 0x05
    94ce:	16 82       	std	Z+6, r1	; 0x06
    94d0:	17 82       	std	Z+7, r1	; 0x07
    94d2:	81 e0       	ldi	r24, 0x01	; 1
    94d4:	93 e2       	ldi	r25, 0x23	; 35
    94d6:	a5 e4       	ldi	r26, 0x45	; 69
    94d8:	b7 e6       	ldi	r27, 0x67	; 103
    94da:	80 87       	std	Z+8, r24	; 0x08
    94dc:	91 87       	std	Z+9, r25	; 0x09
    94de:	a2 87       	std	Z+10, r26	; 0x0a
    94e0:	b3 87       	std	Z+11, r27	; 0x0b
    94e2:	89 e8       	ldi	r24, 0x89	; 137
    94e4:	9b ea       	ldi	r25, 0xAB	; 171
    94e6:	ad ec       	ldi	r26, 0xCD	; 205
    94e8:	bf ee       	ldi	r27, 0xEF	; 239
    94ea:	84 87       	std	Z+12, r24	; 0x0c
    94ec:	95 87       	std	Z+13, r25	; 0x0d
    94ee:	a6 87       	std	Z+14, r26	; 0x0e
    94f0:	b7 87       	std	Z+15, r27	; 0x0f
    94f2:	8e ef       	ldi	r24, 0xFE	; 254
    94f4:	9c ed       	ldi	r25, 0xDC	; 220
    94f6:	aa eb       	ldi	r26, 0xBA	; 186
    94f8:	b8 e9       	ldi	r27, 0x98	; 152
    94fa:	80 8b       	std	Z+16, r24	; 0x10
    94fc:	91 8b       	std	Z+17, r25	; 0x11
    94fe:	a2 8b       	std	Z+18, r26	; 0x12
    9500:	b3 8b       	std	Z+19, r27	; 0x13
    9502:	86 e7       	ldi	r24, 0x76	; 118
    9504:	94 e5       	ldi	r25, 0x54	; 84
    9506:	a2 e3       	ldi	r26, 0x32	; 50
    9508:	b0 e1       	ldi	r27, 0x10	; 16
    950a:	84 8b       	std	Z+20, r24	; 0x14
    950c:	95 8b       	std	Z+21, r25	; 0x15
    950e:	a6 8b       	std	Z+22, r26	; 0x16
    9510:	b7 8b       	std	Z+23, r27	; 0x17
    9512:	08 95       	ret

00009514 <md5_update>:
    9514:	8f 92       	push	r8
    9516:	9f 92       	push	r9
    9518:	af 92       	push	r10
    951a:	bf 92       	push	r11
    951c:	cf 92       	push	r12
    951e:	df 92       	push	r13
    9520:	ef 92       	push	r14
    9522:	ff 92       	push	r15
    9524:	0f 93       	push	r16
    9526:	1f 93       	push	r17
    9528:	cf 93       	push	r28
    952a:	df 93       	push	r29
    952c:	7c 01       	movw	r14, r24
    952e:	8b 01       	movw	r16, r22
    9530:	ea 01       	movw	r28, r20
    9532:	1c 16       	cp	r1, r28
    9534:	1d 06       	cpc	r1, r29
    9536:	0c f0       	brlt	.+2      	; 0x953a <md5_update+0x26>
    9538:	6b c0       	rjmp	.+214    	; 0x9610 <md5_update+0xfc>
    953a:	fc 01       	movw	r30, r24
    953c:	80 81       	ld	r24, Z
    953e:	91 81       	ldd	r25, Z+1	; 0x01
    9540:	a2 81       	ldd	r26, Z+2	; 0x02
    9542:	b3 81       	ldd	r27, Z+3	; 0x03
    9544:	4c 01       	movw	r8, r24
    9546:	5d 01       	movw	r10, r26
    9548:	ff e3       	ldi	r31, 0x3F	; 63
    954a:	8f 22       	and	r8, r31
    954c:	99 24       	eor	r9, r9
    954e:	aa 24       	eor	r10, r10
    9550:	bb 24       	eor	r11, r11
    9552:	05 2e       	mov	r0, r21
    9554:	00 0c       	add	r0, r0
    9556:	66 0b       	sbc	r22, r22
    9558:	77 0b       	sbc	r23, r23
    955a:	84 0f       	add	r24, r20
    955c:	95 1f       	adc	r25, r21
    955e:	a6 1f       	adc	r26, r22
    9560:	b7 1f       	adc	r27, r23
    9562:	f7 01       	movw	r30, r14
    9564:	80 83       	st	Z, r24
    9566:	91 83       	std	Z+1, r25	; 0x01
    9568:	a2 83       	std	Z+2, r26	; 0x02
    956a:	b3 83       	std	Z+3, r27	; 0x03
    956c:	84 17       	cp	r24, r20
    956e:	95 07       	cpc	r25, r21
    9570:	a6 07       	cpc	r26, r22
    9572:	b7 07       	cpc	r27, r23
    9574:	58 f4       	brcc	.+22     	; 0x958c <md5_update+0x78>
    9576:	84 81       	ldd	r24, Z+4	; 0x04
    9578:	95 81       	ldd	r25, Z+5	; 0x05
    957a:	a6 81       	ldd	r26, Z+6	; 0x06
    957c:	b7 81       	ldd	r27, Z+7	; 0x07
    957e:	01 96       	adiw	r24, 0x01	; 1
    9580:	a1 1d       	adc	r26, r1
    9582:	b1 1d       	adc	r27, r1
    9584:	84 83       	std	Z+4, r24	; 0x04
    9586:	95 83       	std	Z+5, r25	; 0x05
    9588:	a6 83       	std	Z+6, r26	; 0x06
    958a:	b7 83       	std	Z+7, r27	; 0x07
    958c:	81 14       	cp	r8, r1
    958e:	91 04       	cpc	r9, r1
    9590:	a1 04       	cpc	r10, r1
    9592:	b1 04       	cpc	r11, r1
    9594:	c9 f1       	breq	.+114    	; 0x9608 <md5_update+0xf4>
    9596:	80 e4       	ldi	r24, 0x40	; 64
    9598:	90 e0       	ldi	r25, 0x00	; 0
    959a:	6c 01       	movw	r12, r24
    959c:	c8 18       	sub	r12, r8
    959e:	d9 08       	sbc	r13, r9
    95a0:	cc 15       	cp	r28, r12
    95a2:	dd 05       	cpc	r29, r13
    95a4:	8c f1       	brlt	.+98     	; 0x9608 <md5_update+0xf4>
    95a6:	c4 01       	movw	r24, r8
    95a8:	48 96       	adiw	r24, 0x18	; 24
    95aa:	a6 01       	movw	r20, r12
    95ac:	b8 01       	movw	r22, r16
    95ae:	8e 0d       	add	r24, r14
    95b0:	9f 1d       	adc	r25, r15
    95b2:	45 d3       	rcall	.+1674   	; 0x9c3e <memcpy>
    95b4:	b7 01       	movw	r22, r14
    95b6:	68 5e       	subi	r22, 0xE8	; 232
    95b8:	7f 4f       	sbci	r23, 0xFF	; 255
    95ba:	c7 01       	movw	r24, r14
    95bc:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <md5_process>
    95c0:	0c 0d       	add	r16, r12
    95c2:	1d 1d       	adc	r17, r13
    95c4:	cc 19       	sub	r28, r12
    95c6:	dd 09       	sbc	r29, r13
    95c8:	c0 34       	cpi	r28, 0x40	; 64
    95ca:	d1 05       	cpc	r29, r1
    95cc:	7c f0       	brlt	.+30     	; 0x95ec <md5_update+0xd8>
    95ce:	81 2c       	mov	r8, r1
    95d0:	91 2c       	mov	r9, r1
    95d2:	54 01       	movw	r10, r8
    95d4:	b8 01       	movw	r22, r16
    95d6:	c7 01       	movw	r24, r14
    95d8:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <md5_process>
    95dc:	00 5c       	subi	r16, 0xC0	; 192
    95de:	1f 4f       	sbci	r17, 0xFF	; 255
    95e0:	c0 54       	subi	r28, 0x40	; 64
    95e2:	d1 09       	sbc	r29, r1
    95e4:	c0 34       	cpi	r28, 0x40	; 64
    95e6:	d1 05       	cpc	r29, r1
    95e8:	ac f7       	brge	.-22     	; 0x95d4 <md5_update+0xc0>
    95ea:	03 c0       	rjmp	.+6      	; 0x95f2 <md5_update+0xde>
    95ec:	81 2c       	mov	r8, r1
    95ee:	91 2c       	mov	r9, r1
    95f0:	54 01       	movw	r10, r8
    95f2:	1c 16       	cp	r1, r28
    95f4:	1d 06       	cpc	r1, r29
    95f6:	64 f4       	brge	.+24     	; 0x9610 <md5_update+0xfc>
    95f8:	c4 01       	movw	r24, r8
    95fa:	48 96       	adiw	r24, 0x18	; 24
    95fc:	ae 01       	movw	r20, r28
    95fe:	b8 01       	movw	r22, r16
    9600:	8e 0d       	add	r24, r14
    9602:	9f 1d       	adc	r25, r15
    9604:	1c d3       	rcall	.+1592   	; 0x9c3e <memcpy>
    9606:	04 c0       	rjmp	.+8      	; 0x9610 <md5_update+0xfc>
    9608:	c0 34       	cpi	r28, 0x40	; 64
    960a:	d1 05       	cpc	r29, r1
    960c:	1c f7       	brge	.-58     	; 0x95d4 <md5_update+0xc0>
    960e:	f4 cf       	rjmp	.-24     	; 0x95f8 <md5_update+0xe4>
    9610:	df 91       	pop	r29
    9612:	cf 91       	pop	r28
    9614:	1f 91       	pop	r17
    9616:	0f 91       	pop	r16
    9618:	ff 90       	pop	r15
    961a:	ef 90       	pop	r14
    961c:	df 90       	pop	r13
    961e:	cf 90       	pop	r12
    9620:	bf 90       	pop	r11
    9622:	af 90       	pop	r10
    9624:	9f 90       	pop	r9
    9626:	8f 90       	pop	r8
    9628:	08 95       	ret

0000962a <md5_finish>:
    962a:	8f 92       	push	r8
    962c:	9f 92       	push	r9
    962e:	af 92       	push	r10
    9630:	bf 92       	push	r11
    9632:	ef 92       	push	r14
    9634:	ff 92       	push	r15
    9636:	0f 93       	push	r16
    9638:	1f 93       	push	r17
    963a:	cf 93       	push	r28
    963c:	df 93       	push	r29
    963e:	cd b7       	in	r28, 0x3d	; 61
    9640:	de b7       	in	r29, 0x3e	; 62
    9642:	28 97       	sbiw	r28, 0x08	; 8
    9644:	0f b6       	in	r0, 0x3f	; 63
    9646:	f8 94       	cli
    9648:	de bf       	out	0x3e, r29	; 62
    964a:	0f be       	out	0x3f, r0	; 63
    964c:	cd bf       	out	0x3d, r28	; 61
    964e:	8c 01       	movw	r16, r24
    9650:	7b 01       	movw	r14, r22
    9652:	fc 01       	movw	r30, r24
    9654:	80 81       	ld	r24, Z
    9656:	91 81       	ldd	r25, Z+1	; 0x01
    9658:	a2 81       	ldd	r26, Z+2	; 0x02
    965a:	b3 81       	ldd	r27, Z+3	; 0x03
    965c:	44 81       	ldd	r20, Z+4	; 0x04
    965e:	55 81       	ldd	r21, Z+5	; 0x05
    9660:	66 81       	ldd	r22, Z+6	; 0x06
    9662:	77 81       	ldd	r23, Z+7	; 0x07
    9664:	44 0f       	add	r20, r20
    9666:	55 1f       	adc	r21, r21
    9668:	66 1f       	adc	r22, r22
    966a:	77 1f       	adc	r23, r23
    966c:	44 0f       	add	r20, r20
    966e:	55 1f       	adc	r21, r21
    9670:	66 1f       	adc	r22, r22
    9672:	77 1f       	adc	r23, r23
    9674:	44 0f       	add	r20, r20
    9676:	55 1f       	adc	r21, r21
    9678:	66 1f       	adc	r22, r22
    967a:	77 1f       	adc	r23, r23
    967c:	4c 01       	movw	r8, r24
    967e:	5d 01       	movw	r10, r26
    9680:	07 2e       	mov	r0, r23
    9682:	7d e1       	ldi	r23, 0x1D	; 29
    9684:	b6 94       	lsr	r11
    9686:	a7 94       	ror	r10
    9688:	97 94       	ror	r9
    968a:	87 94       	ror	r8
    968c:	7a 95       	dec	r23
    968e:	d1 f7       	brne	.-12     	; 0x9684 <md5_finish+0x5a>
    9690:	70 2d       	mov	r23, r0
    9692:	48 29       	or	r20, r8
    9694:	59 29       	or	r21, r9
    9696:	6a 29       	or	r22, r10
    9698:	7b 29       	or	r23, r11
    969a:	4c 01       	movw	r8, r24
    969c:	5d 01       	movw	r10, r26
    969e:	88 0c       	add	r8, r8
    96a0:	99 1c       	adc	r9, r9
    96a2:	aa 1c       	adc	r10, r10
    96a4:	bb 1c       	adc	r11, r11
    96a6:	88 0c       	add	r8, r8
    96a8:	99 1c       	adc	r9, r9
    96aa:	aa 1c       	adc	r10, r10
    96ac:	bb 1c       	adc	r11, r11
    96ae:	88 0c       	add	r8, r8
    96b0:	99 1c       	adc	r9, r9
    96b2:	aa 1c       	adc	r10, r10
    96b4:	bb 1c       	adc	r11, r11
    96b6:	89 82       	std	Y+1, r8	; 0x01
    96b8:	9a 82       	std	Y+2, r9	; 0x02
    96ba:	ab 82       	std	Y+3, r10	; 0x03
    96bc:	bc 82       	std	Y+4, r11	; 0x04
    96be:	4d 83       	std	Y+5, r20	; 0x05
    96c0:	5e 83       	std	Y+6, r21	; 0x06
    96c2:	6f 83       	std	Y+7, r22	; 0x07
    96c4:	78 87       	std	Y+8, r23	; 0x08
    96c6:	8f 73       	andi	r24, 0x3F	; 63
    96c8:	99 27       	eor	r25, r25
    96ca:	aa 27       	eor	r26, r26
    96cc:	bb 27       	eor	r27, r27
    96ce:	88 33       	cpi	r24, 0x38	; 56
    96d0:	91 05       	cpc	r25, r1
    96d2:	a1 05       	cpc	r26, r1
    96d4:	b1 05       	cpc	r27, r1
    96d6:	48 f4       	brcc	.+18     	; 0x96ea <md5_finish+0xc0>
    96d8:	48 e3       	ldi	r20, 0x38	; 56
    96da:	50 e0       	ldi	r21, 0x00	; 0
    96dc:	60 e0       	ldi	r22, 0x00	; 0
    96de:	70 e0       	ldi	r23, 0x00	; 0
    96e0:	48 1b       	sub	r20, r24
    96e2:	59 0b       	sbc	r21, r25
    96e4:	6a 0b       	sbc	r22, r26
    96e6:	7b 0b       	sbc	r23, r27
    96e8:	08 c0       	rjmp	.+16     	; 0x96fa <md5_finish+0xd0>
    96ea:	48 e7       	ldi	r20, 0x78	; 120
    96ec:	50 e0       	ldi	r21, 0x00	; 0
    96ee:	60 e0       	ldi	r22, 0x00	; 0
    96f0:	70 e0       	ldi	r23, 0x00	; 0
    96f2:	48 1b       	sub	r20, r24
    96f4:	59 0b       	sbc	r21, r25
    96f6:	6a 0b       	sbc	r22, r26
    96f8:	7b 0b       	sbc	r23, r27
    96fa:	61 e1       	ldi	r22, 0x11	; 17
    96fc:	79 e0       	ldi	r23, 0x09	; 9
    96fe:	c8 01       	movw	r24, r16
    9700:	09 df       	rcall	.-494    	; 0x9514 <md5_update>
    9702:	48 e0       	ldi	r20, 0x08	; 8
    9704:	50 e0       	ldi	r21, 0x00	; 0
    9706:	be 01       	movw	r22, r28
    9708:	6f 5f       	subi	r22, 0xFF	; 255
    970a:	7f 4f       	sbci	r23, 0xFF	; 255
    970c:	c8 01       	movw	r24, r16
    970e:	02 df       	rcall	.-508    	; 0x9514 <md5_update>
    9710:	f8 01       	movw	r30, r16
    9712:	80 85       	ldd	r24, Z+8	; 0x08
    9714:	f7 01       	movw	r30, r14
    9716:	80 83       	st	Z, r24
    9718:	f8 01       	movw	r30, r16
    971a:	81 85       	ldd	r24, Z+9	; 0x09
    971c:	f7 01       	movw	r30, r14
    971e:	81 83       	std	Z+1, r24	; 0x01
    9720:	f8 01       	movw	r30, r16
    9722:	82 85       	ldd	r24, Z+10	; 0x0a
    9724:	f7 01       	movw	r30, r14
    9726:	82 83       	std	Z+2, r24	; 0x02
    9728:	f8 01       	movw	r30, r16
    972a:	83 85       	ldd	r24, Z+11	; 0x0b
    972c:	f7 01       	movw	r30, r14
    972e:	83 83       	std	Z+3, r24	; 0x03
    9730:	f8 01       	movw	r30, r16
    9732:	84 85       	ldd	r24, Z+12	; 0x0c
    9734:	f7 01       	movw	r30, r14
    9736:	84 83       	std	Z+4, r24	; 0x04
    9738:	f8 01       	movw	r30, r16
    973a:	85 85       	ldd	r24, Z+13	; 0x0d
    973c:	f7 01       	movw	r30, r14
    973e:	85 83       	std	Z+5, r24	; 0x05
    9740:	f8 01       	movw	r30, r16
    9742:	86 85       	ldd	r24, Z+14	; 0x0e
    9744:	f7 01       	movw	r30, r14
    9746:	86 83       	std	Z+6, r24	; 0x06
    9748:	f8 01       	movw	r30, r16
    974a:	87 85       	ldd	r24, Z+15	; 0x0f
    974c:	f7 01       	movw	r30, r14
    974e:	87 83       	std	Z+7, r24	; 0x07
    9750:	f8 01       	movw	r30, r16
    9752:	80 89       	ldd	r24, Z+16	; 0x10
    9754:	f7 01       	movw	r30, r14
    9756:	80 87       	std	Z+8, r24	; 0x08
    9758:	f8 01       	movw	r30, r16
    975a:	81 89       	ldd	r24, Z+17	; 0x11
    975c:	f7 01       	movw	r30, r14
    975e:	81 87       	std	Z+9, r24	; 0x09
    9760:	f8 01       	movw	r30, r16
    9762:	82 89       	ldd	r24, Z+18	; 0x12
    9764:	f7 01       	movw	r30, r14
    9766:	82 87       	std	Z+10, r24	; 0x0a
    9768:	f8 01       	movw	r30, r16
    976a:	83 89       	ldd	r24, Z+19	; 0x13
    976c:	f7 01       	movw	r30, r14
    976e:	83 87       	std	Z+11, r24	; 0x0b
    9770:	f8 01       	movw	r30, r16
    9772:	84 89       	ldd	r24, Z+20	; 0x14
    9774:	f7 01       	movw	r30, r14
    9776:	84 87       	std	Z+12, r24	; 0x0c
    9778:	f8 01       	movw	r30, r16
    977a:	85 89       	ldd	r24, Z+21	; 0x15
    977c:	f7 01       	movw	r30, r14
    977e:	85 87       	std	Z+13, r24	; 0x0d
    9780:	f8 01       	movw	r30, r16
    9782:	86 89       	ldd	r24, Z+22	; 0x16
    9784:	f7 01       	movw	r30, r14
    9786:	86 87       	std	Z+14, r24	; 0x0e
    9788:	f8 01       	movw	r30, r16
    978a:	87 89       	ldd	r24, Z+23	; 0x17
    978c:	f7 01       	movw	r30, r14
    978e:	87 87       	std	Z+15, r24	; 0x0f
    9790:	28 96       	adiw	r28, 0x08	; 8
    9792:	0f b6       	in	r0, 0x3f	; 63
    9794:	f8 94       	cli
    9796:	de bf       	out	0x3e, r29	; 62
    9798:	0f be       	out	0x3f, r0	; 63
    979a:	cd bf       	out	0x3d, r28	; 61
    979c:	df 91       	pop	r29
    979e:	cf 91       	pop	r28
    97a0:	1f 91       	pop	r17
    97a2:	0f 91       	pop	r16
    97a4:	ff 90       	pop	r15
    97a6:	ef 90       	pop	r14
    97a8:	bf 90       	pop	r11
    97aa:	af 90       	pop	r10
    97ac:	9f 90       	pop	r9
    97ae:	8f 90       	pop	r8
    97b0:	08 95       	ret

000097b2 <md5>:
    97b2:	af 92       	push	r10
    97b4:	bf 92       	push	r11
    97b6:	cf 92       	push	r12
    97b8:	df 92       	push	r13
    97ba:	ef 92       	push	r14
    97bc:	ff 92       	push	r15
    97be:	0f 93       	push	r16
    97c0:	1f 93       	push	r17
    97c2:	cf 93       	push	r28
    97c4:	df 93       	push	r29
    97c6:	cd b7       	in	r28, 0x3d	; 61
    97c8:	de b7       	in	r29, 0x3e	; 62
    97ca:	c8 5d       	subi	r28, 0xD8	; 216
    97cc:	d1 09       	sbc	r29, r1
    97ce:	0f b6       	in	r0, 0x3f	; 63
    97d0:	f8 94       	cli
    97d2:	de bf       	out	0x3e, r29	; 62
    97d4:	0f be       	out	0x3f, r0	; 63
    97d6:	cd bf       	out	0x3d, r28	; 61
    97d8:	6c 01       	movw	r12, r24
    97da:	5b 01       	movw	r10, r22
    97dc:	7a 01       	movw	r14, r20
    97de:	8e 01       	movw	r16, r28
    97e0:	0f 5f       	subi	r16, 0xFF	; 255
    97e2:	1f 4f       	sbci	r17, 0xFF	; 255
    97e4:	c8 01       	movw	r24, r16
    97e6:	6c de       	rcall	.-808    	; 0x94c0 <md5_starts>
    97e8:	a5 01       	movw	r20, r10
    97ea:	b6 01       	movw	r22, r12
    97ec:	c8 01       	movw	r24, r16
    97ee:	92 de       	rcall	.-732    	; 0x9514 <md5_update>
    97f0:	b7 01       	movw	r22, r14
    97f2:	c8 01       	movw	r24, r16
    97f4:	1a df       	rcall	.-460    	; 0x962a <md5_finish>
    97f6:	88 ed       	ldi	r24, 0xD8	; 216
    97f8:	f8 01       	movw	r30, r16
    97fa:	11 92       	st	Z+, r1
    97fc:	8a 95       	dec	r24
    97fe:	e9 f7       	brne	.-6      	; 0x97fa <md5+0x48>
    9800:	c8 52       	subi	r28, 0x28	; 40
    9802:	df 4f       	sbci	r29, 0xFF	; 255
    9804:	0f b6       	in	r0, 0x3f	; 63
    9806:	f8 94       	cli
    9808:	de bf       	out	0x3e, r29	; 62
    980a:	0f be       	out	0x3f, r0	; 63
    980c:	cd bf       	out	0x3d, r28	; 61
    980e:	df 91       	pop	r29
    9810:	cf 91       	pop	r28
    9812:	1f 91       	pop	r17
    9814:	0f 91       	pop	r16
    9816:	ff 90       	pop	r15
    9818:	ef 90       	pop	r14
    981a:	df 90       	pop	r13
    981c:	cf 90       	pop	r12
    981e:	bf 90       	pop	r11
    9820:	af 90       	pop	r10
    9822:	08 95       	ret

00009824 <md5_hmac_starts>:
    9824:	8f 92       	push	r8
    9826:	9f 92       	push	r9
    9828:	af 92       	push	r10
    982a:	bf 92       	push	r11
    982c:	cf 92       	push	r12
    982e:	df 92       	push	r13
    9830:	ef 92       	push	r14
    9832:	ff 92       	push	r15
    9834:	0f 93       	push	r16
    9836:	1f 93       	push	r17
    9838:	cf 93       	push	r28
    983a:	df 93       	push	r29
    983c:	cd b7       	in	r28, 0x3d	; 61
    983e:	de b7       	in	r29, 0x3e	; 62
    9840:	60 97       	sbiw	r28, 0x10	; 16
    9842:	0f b6       	in	r0, 0x3f	; 63
    9844:	f8 94       	cli
    9846:	de bf       	out	0x3e, r29	; 62
    9848:	0f be       	out	0x3f, r0	; 63
    984a:	cd bf       	out	0x3d, r28	; 61
    984c:	8c 01       	movw	r16, r24
    984e:	a6 2e       	mov	r10, r22
    9850:	b7 2e       	mov	r11, r23
    9852:	6a 01       	movw	r12, r20
    9854:	41 34       	cpi	r20, 0x41	; 65
    9856:	51 05       	cpc	r21, r1
    9858:	0c f1       	brlt	.+66     	; 0x989c <md5_hmac_starts+0x78>
    985a:	de 01       	movw	r26, r28
    985c:	11 96       	adiw	r26, 0x01	; 1
    985e:	4d 01       	movw	r8, r26
    9860:	ad 01       	movw	r20, r26
    9862:	b6 01       	movw	r22, r12
    9864:	8a 2d       	mov	r24, r10
    9866:	9b 2d       	mov	r25, r11
    9868:	a4 df       	rcall	.-184    	; 0x97b2 <md5>
    986a:	78 01       	movw	r14, r16
    986c:	b8 e5       	ldi	r27, 0x58	; 88
    986e:	eb 0e       	add	r14, r27
    9870:	f1 1c       	adc	r15, r1
    9872:	40 e4       	ldi	r20, 0x40	; 64
    9874:	50 e0       	ldi	r21, 0x00	; 0
    9876:	66 e3       	ldi	r22, 0x36	; 54
    9878:	70 e0       	ldi	r23, 0x00	; 0
    987a:	c7 01       	movw	r24, r14
    987c:	e9 d1       	rcall	.+978    	; 0x9c50 <memset>
    987e:	40 e4       	ldi	r20, 0x40	; 64
    9880:	50 e0       	ldi	r21, 0x00	; 0
    9882:	6c e5       	ldi	r22, 0x5C	; 92
    9884:	70 e0       	ldi	r23, 0x00	; 0
    9886:	c8 01       	movw	r24, r16
    9888:	88 56       	subi	r24, 0x68	; 104
    988a:	9f 4f       	sbci	r25, 0xFF	; 255
    988c:	e1 d1       	rcall	.+962    	; 0x9c50 <memset>
    988e:	68 94       	set
    9890:	cc 24       	eor	r12, r12
    9892:	c4 f8       	bld	r12, 4
    9894:	d1 2c       	mov	r13, r1
    9896:	a8 2c       	mov	r10, r8
    9898:	b9 2c       	mov	r11, r9
    989a:	15 c0       	rjmp	.+42     	; 0x98c6 <md5_hmac_starts+0xa2>
    989c:	78 01       	movw	r14, r16
    989e:	e8 e5       	ldi	r30, 0x58	; 88
    98a0:	ee 0e       	add	r14, r30
    98a2:	f1 1c       	adc	r15, r1
    98a4:	40 e4       	ldi	r20, 0x40	; 64
    98a6:	50 e0       	ldi	r21, 0x00	; 0
    98a8:	66 e3       	ldi	r22, 0x36	; 54
    98aa:	70 e0       	ldi	r23, 0x00	; 0
    98ac:	c7 01       	movw	r24, r14
    98ae:	d0 d1       	rcall	.+928    	; 0x9c50 <memset>
    98b0:	40 e4       	ldi	r20, 0x40	; 64
    98b2:	50 e0       	ldi	r21, 0x00	; 0
    98b4:	6c e5       	ldi	r22, 0x5C	; 92
    98b6:	70 e0       	ldi	r23, 0x00	; 0
    98b8:	c8 01       	movw	r24, r16
    98ba:	88 56       	subi	r24, 0x68	; 104
    98bc:	9f 4f       	sbci	r25, 0xFF	; 255
    98be:	c8 d1       	rcall	.+912    	; 0x9c50 <memset>
    98c0:	1c 14       	cp	r1, r12
    98c2:	1d 04       	cpc	r1, r13
    98c4:	f4 f4       	brge	.+60     	; 0x9902 <md5_hmac_starts+0xde>
    98c6:	a8 01       	movw	r20, r16
    98c8:	48 5a       	subi	r20, 0xA8	; 168
    98ca:	5f 4f       	sbci	r21, 0xFF	; 255
    98cc:	8a 2c       	mov	r8, r10
    98ce:	9b 2c       	mov	r9, r11
    98d0:	d8 01       	movw	r26, r16
    98d2:	a8 56       	subi	r26, 0x68	; 104
    98d4:	bf 4f       	sbci	r27, 0xFF	; 255
    98d6:	20 e0       	ldi	r18, 0x00	; 0
    98d8:	30 e0       	ldi	r19, 0x00	; 0
    98da:	b4 01       	movw	r22, r8
    98dc:	fa 01       	movw	r30, r20
    98de:	80 81       	ld	r24, Z
    98e0:	f4 01       	movw	r30, r8
    98e2:	91 91       	ld	r25, Z+
    98e4:	4f 01       	movw	r8, r30
    98e6:	98 27       	eor	r25, r24
    98e8:	fa 01       	movw	r30, r20
    98ea:	91 93       	st	Z+, r25
    98ec:	af 01       	movw	r20, r30
    98ee:	8c 91       	ld	r24, X
    98f0:	fb 01       	movw	r30, r22
    98f2:	90 81       	ld	r25, Z
    98f4:	98 27       	eor	r25, r24
    98f6:	9d 93       	st	X+, r25
    98f8:	2f 5f       	subi	r18, 0xFF	; 255
    98fa:	3f 4f       	sbci	r19, 0xFF	; 255
    98fc:	2c 15       	cp	r18, r12
    98fe:	3d 05       	cpc	r19, r13
    9900:	64 f3       	brlt	.-40     	; 0x98da <md5_hmac_starts+0xb6>
    9902:	c8 01       	movw	r24, r16
    9904:	dd dd       	rcall	.-1094   	; 0x94c0 <md5_starts>
    9906:	40 e4       	ldi	r20, 0x40	; 64
    9908:	50 e0       	ldi	r21, 0x00	; 0
    990a:	b7 01       	movw	r22, r14
    990c:	c8 01       	movw	r24, r16
    990e:	02 de       	rcall	.-1020   	; 0x9514 <md5_update>
    9910:	fe 01       	movw	r30, r28
    9912:	31 96       	adiw	r30, 0x01	; 1
    9914:	80 e1       	ldi	r24, 0x10	; 16
    9916:	df 01       	movw	r26, r30
    9918:	1d 92       	st	X+, r1
    991a:	8a 95       	dec	r24
    991c:	e9 f7       	brne	.-6      	; 0x9918 <md5_hmac_starts+0xf4>
    991e:	60 96       	adiw	r28, 0x10	; 16
    9920:	0f b6       	in	r0, 0x3f	; 63
    9922:	f8 94       	cli
    9924:	de bf       	out	0x3e, r29	; 62
    9926:	0f be       	out	0x3f, r0	; 63
    9928:	cd bf       	out	0x3d, r28	; 61
    992a:	df 91       	pop	r29
    992c:	cf 91       	pop	r28
    992e:	1f 91       	pop	r17
    9930:	0f 91       	pop	r16
    9932:	ff 90       	pop	r15
    9934:	ef 90       	pop	r14
    9936:	df 90       	pop	r13
    9938:	cf 90       	pop	r12
    993a:	bf 90       	pop	r11
    993c:	af 90       	pop	r10
    993e:	9f 90       	pop	r9
    9940:	8f 90       	pop	r8
    9942:	08 95       	ret

00009944 <md5_hmac_finish>:
    9944:	cf 92       	push	r12
    9946:	df 92       	push	r13
    9948:	ef 92       	push	r14
    994a:	ff 92       	push	r15
    994c:	0f 93       	push	r16
    994e:	1f 93       	push	r17
    9950:	cf 93       	push	r28
    9952:	df 93       	push	r29
    9954:	cd b7       	in	r28, 0x3d	; 61
    9956:	de b7       	in	r29, 0x3e	; 62
    9958:	60 97       	sbiw	r28, 0x10	; 16
    995a:	0f b6       	in	r0, 0x3f	; 63
    995c:	f8 94       	cli
    995e:	de bf       	out	0x3e, r29	; 62
    9960:	0f be       	out	0x3f, r0	; 63
    9962:	cd bf       	out	0x3d, r28	; 61
    9964:	8c 01       	movw	r16, r24
    9966:	6b 01       	movw	r12, r22
    9968:	ce 01       	movw	r24, r28
    996a:	01 96       	adiw	r24, 0x01	; 1
    996c:	7c 01       	movw	r14, r24
    996e:	bc 01       	movw	r22, r24
    9970:	c8 01       	movw	r24, r16
    9972:	5b de       	rcall	.-842    	; 0x962a <md5_finish>
    9974:	c8 01       	movw	r24, r16
    9976:	a4 dd       	rcall	.-1208   	; 0x94c0 <md5_starts>
    9978:	b8 01       	movw	r22, r16
    997a:	68 56       	subi	r22, 0x68	; 104
    997c:	7f 4f       	sbci	r23, 0xFF	; 255
    997e:	40 e4       	ldi	r20, 0x40	; 64
    9980:	50 e0       	ldi	r21, 0x00	; 0
    9982:	c8 01       	movw	r24, r16
    9984:	c7 dd       	rcall	.-1138   	; 0x9514 <md5_update>
    9986:	40 e1       	ldi	r20, 0x10	; 16
    9988:	50 e0       	ldi	r21, 0x00	; 0
    998a:	b7 01       	movw	r22, r14
    998c:	c8 01       	movw	r24, r16
    998e:	c2 dd       	rcall	.-1148   	; 0x9514 <md5_update>
    9990:	b6 01       	movw	r22, r12
    9992:	c8 01       	movw	r24, r16
    9994:	4a de       	rcall	.-876    	; 0x962a <md5_finish>
    9996:	80 e1       	ldi	r24, 0x10	; 16
    9998:	f7 01       	movw	r30, r14
    999a:	11 92       	st	Z+, r1
    999c:	8a 95       	dec	r24
    999e:	e9 f7       	brne	.-6      	; 0x999a <md5_hmac_finish+0x56>
    99a0:	60 96       	adiw	r28, 0x10	; 16
    99a2:	0f b6       	in	r0, 0x3f	; 63
    99a4:	f8 94       	cli
    99a6:	de bf       	out	0x3e, r29	; 62
    99a8:	0f be       	out	0x3f, r0	; 63
    99aa:	cd bf       	out	0x3d, r28	; 61
    99ac:	df 91       	pop	r29
    99ae:	cf 91       	pop	r28
    99b0:	1f 91       	pop	r17
    99b2:	0f 91       	pop	r16
    99b4:	ff 90       	pop	r15
    99b6:	ef 90       	pop	r14
    99b8:	df 90       	pop	r13
    99ba:	cf 90       	pop	r12
    99bc:	08 95       	ret

000099be <md5_hmac>:
 * output = HMAC-MD5( hmac key, input buffer )
 */
void md5_hmac( const unsigned char *key, int keylen,
               const unsigned char *input, int ilen,
               unsigned char output[16] )
{
    99be:	af 92       	push	r10
    99c0:	bf 92       	push	r11
    99c2:	cf 92       	push	r12
    99c4:	df 92       	push	r13
    99c6:	ef 92       	push	r14
    99c8:	ff 92       	push	r15
    99ca:	0f 93       	push	r16
    99cc:	1f 93       	push	r17
    99ce:	cf 93       	push	r28
    99d0:	df 93       	push	r29
    99d2:	cd b7       	in	r28, 0x3d	; 61
    99d4:	de b7       	in	r29, 0x3e	; 62
    99d6:	c8 5d       	subi	r28, 0xD8	; 216
    99d8:	d1 09       	sbc	r29, r1
    99da:	0f b6       	in	r0, 0x3f	; 63
    99dc:	f8 94       	cli
    99de:	de bf       	out	0x3e, r29	; 62
    99e0:	0f be       	out	0x3f, r0	; 63
    99e2:	cd bf       	out	0x3d, r28	; 61
    99e4:	6a 01       	movw	r12, r20
    99e6:	59 01       	movw	r10, r18
    md5_context ctx;

    md5_hmac_starts( &ctx, key, keylen );
    99e8:	ab 01       	movw	r20, r22
    99ea:	bc 01       	movw	r22, r24
    99ec:	ce 01       	movw	r24, r28
    99ee:	01 96       	adiw	r24, 0x01	; 1
    99f0:	7c 01       	movw	r14, r24
    99f2:	18 df       	rcall	.-464    	; 0x9824 <md5_hmac_starts>
/*
 * MD5 HMAC process buffer
 */
void md5_hmac_update( md5_context *ctx, const unsigned char *input, int ilen )
{
    md5_update( ctx, input, ilen );
    99f4:	a5 01       	movw	r20, r10
    99f6:	b6 01       	movw	r22, r12
    99f8:	c7 01       	movw	r24, r14
    99fa:	8c dd       	rcall	.-1256   	; 0x9514 <md5_update>
{
    md5_context ctx;

    md5_hmac_starts( &ctx, key, keylen );
    md5_hmac_update( &ctx, input, ilen );
    md5_hmac_finish( &ctx, output );
    99fc:	b8 01       	movw	r22, r16
    99fe:	c7 01       	movw	r24, r14
    9a00:	a1 df       	rcall	.-190    	; 0x9944 <md5_hmac_finish>

    memset( &ctx, 0, sizeof( md5_context ) );
    9a02:	88 ed       	ldi	r24, 0xD8	; 216
    9a04:	f7 01       	movw	r30, r14
    9a06:	11 92       	st	Z+, r1
    9a08:	8a 95       	dec	r24
    9a0a:	e9 f7       	brne	.-6      	; 0x9a06 <md5_hmac+0x48>
}
    9a0c:	c8 52       	subi	r28, 0x28	; 40
    9a0e:	df 4f       	sbci	r29, 0xFF	; 255
    9a10:	0f b6       	in	r0, 0x3f	; 63
    9a12:	f8 94       	cli
    9a14:	de bf       	out	0x3e, r29	; 62
    9a16:	0f be       	out	0x3f, r0	; 63
    9a18:	cd bf       	out	0x3d, r28	; 61
    9a1a:	df 91       	pop	r29
    9a1c:	cf 91       	pop	r28
    9a1e:	1f 91       	pop	r17
    9a20:	0f 91       	pop	r16
    9a22:	ff 90       	pop	r15
    9a24:	ef 90       	pop	r14
    9a26:	df 90       	pop	r13
    9a28:	cf 90       	pop	r12
    9a2a:	bf 90       	pop	r11
    9a2c:	af 90       	pop	r10
    9a2e:	08 95       	ret

00009a30 <pnesign>:

uint16_t pnesign(const unsigned char* data, uint16_t dataLen, const unsigned char* key, uint16_t keyLen)
{
    9a30:	0f 93       	push	r16
    9a32:	1f 93       	push	r17
    9a34:	cf 93       	push	r28
    9a36:	df 93       	push	r29
    9a38:	cd b7       	in	r28, 0x3d	; 61
    9a3a:	de b7       	in	r29, 0x3e	; 62
    9a3c:	60 97       	sbiw	r28, 0x10	; 16
    9a3e:	0f b6       	in	r0, 0x3f	; 63
    9a40:	f8 94       	cli
    9a42:	de bf       	out	0x3e, r29	; 62
    9a44:	0f be       	out	0x3f, r0	; 63
    9a46:	cd bf       	out	0x3d, r28	; 61
    9a48:	fc 01       	movw	r30, r24
    9a4a:	db 01       	movw	r26, r22
    9a4c:	ca 01       	movw	r24, r20
    9a4e:	b9 01       	movw	r22, r18
// 	}
	//int_to_ascii(keyLen);

	
		
	md5_hmac(key, keyLen, data, dataLen, tmpbuf);//md5_hmac(key, 6, data1, 80, tmpbuf);
    9a50:	8e 01       	movw	r16, r28
    9a52:	0f 5f       	subi	r16, 0xFF	; 255
    9a54:	1f 4f       	sbci	r17, 0xFF	; 255
    9a56:	9d 01       	movw	r18, r26
    9a58:	af 01       	movw	r20, r30
    9a5a:	b1 df       	rcall	.-158    	; 0x99be <md5_hmac>
// 	{
// 		int_to_ascii(tmpbuf[i]);
// 	}
// 	send_usart_char("\r\n");
	
	sign = ((uint16_t*)tmpbuf)[0] ^ ((uint16_t*)tmpbuf)[1] ^ ((uint16_t*)tmpbuf)[2] ^ ((uint16_t*)tmpbuf)[3];
    9a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    9a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    9a60:	89 81       	ldd	r24, Y+1	; 0x01
    9a62:	9a 81       	ldd	r25, Y+2	; 0x02
    9a64:	82 27       	eor	r24, r18
    9a66:	93 27       	eor	r25, r19
    9a68:	2d 81       	ldd	r18, Y+5	; 0x05
    9a6a:	3e 81       	ldd	r19, Y+6	; 0x06
    9a6c:	82 27       	eor	r24, r18
    9a6e:	93 27       	eor	r25, r19
    9a70:	2f 81       	ldd	r18, Y+7	; 0x07
    9a72:	38 85       	ldd	r19, Y+8	; 0x08
	return sign;
}
    9a74:	82 27       	eor	r24, r18
    9a76:	93 27       	eor	r25, r19
    9a78:	60 96       	adiw	r28, 0x10	; 16
    9a7a:	0f b6       	in	r0, 0x3f	; 63
    9a7c:	f8 94       	cli
    9a7e:	de bf       	out	0x3e, r29	; 62
    9a80:	0f be       	out	0x3f, r0	; 63
    9a82:	cd bf       	out	0x3d, r28	; 61
    9a84:	df 91       	pop	r29
    9a86:	cf 91       	pop	r28
    9a88:	1f 91       	pop	r17
    9a8a:	0f 91       	pop	r16
    9a8c:	08 95       	ret

00009a8e <__divmodhi4>:
    9a8e:	97 fb       	bst	r25, 7
    9a90:	07 2e       	mov	r0, r23
    9a92:	16 f4       	brtc	.+4      	; 0x9a98 <__divmodhi4+0xa>
    9a94:	00 94       	com	r0
    9a96:	06 d0       	rcall	.+12     	; 0x9aa4 <__divmodhi4_neg1>
    9a98:	77 fd       	sbrc	r23, 7
    9a9a:	08 d0       	rcall	.+16     	; 0x9aac <__divmodhi4_neg2>
    9a9c:	50 d0       	rcall	.+160    	; 0x9b3e <__udivmodhi4>
    9a9e:	07 fc       	sbrc	r0, 7
    9aa0:	05 d0       	rcall	.+10     	; 0x9aac <__divmodhi4_neg2>
    9aa2:	3e f4       	brtc	.+14     	; 0x9ab2 <__divmodhi4_exit>

00009aa4 <__divmodhi4_neg1>:
    9aa4:	90 95       	com	r25
    9aa6:	81 95       	neg	r24
    9aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    9aaa:	08 95       	ret

00009aac <__divmodhi4_neg2>:
    9aac:	70 95       	com	r23
    9aae:	61 95       	neg	r22
    9ab0:	7f 4f       	sbci	r23, 0xFF	; 255

00009ab2 <__divmodhi4_exit>:
    9ab2:	08 95       	ret

00009ab4 <__udivmodsi4>:
    9ab4:	a1 e2       	ldi	r26, 0x21	; 33
    9ab6:	1a 2e       	mov	r1, r26
    9ab8:	aa 1b       	sub	r26, r26
    9aba:	bb 1b       	sub	r27, r27
    9abc:	fd 01       	movw	r30, r26
    9abe:	0d c0       	rjmp	.+26     	; 0x9ada <__udivmodsi4_ep>

00009ac0 <__udivmodsi4_loop>:
    9ac0:	aa 1f       	adc	r26, r26
    9ac2:	bb 1f       	adc	r27, r27
    9ac4:	ee 1f       	adc	r30, r30
    9ac6:	ff 1f       	adc	r31, r31
    9ac8:	a2 17       	cp	r26, r18
    9aca:	b3 07       	cpc	r27, r19
    9acc:	e4 07       	cpc	r30, r20
    9ace:	f5 07       	cpc	r31, r21
    9ad0:	20 f0       	brcs	.+8      	; 0x9ada <__udivmodsi4_ep>
    9ad2:	a2 1b       	sub	r26, r18
    9ad4:	b3 0b       	sbc	r27, r19
    9ad6:	e4 0b       	sbc	r30, r20
    9ad8:	f5 0b       	sbc	r31, r21

00009ada <__udivmodsi4_ep>:
    9ada:	66 1f       	adc	r22, r22
    9adc:	77 1f       	adc	r23, r23
    9ade:	88 1f       	adc	r24, r24
    9ae0:	99 1f       	adc	r25, r25
    9ae2:	1a 94       	dec	r1
    9ae4:	69 f7       	brne	.-38     	; 0x9ac0 <__udivmodsi4_loop>
    9ae6:	60 95       	com	r22
    9ae8:	70 95       	com	r23
    9aea:	80 95       	com	r24
    9aec:	90 95       	com	r25
    9aee:	9b 01       	movw	r18, r22
    9af0:	ac 01       	movw	r20, r24
    9af2:	bd 01       	movw	r22, r26
    9af4:	cf 01       	movw	r24, r30
    9af6:	08 95       	ret

00009af8 <__tablejump2__>:
    9af8:	ee 0f       	add	r30, r30
    9afa:	ff 1f       	adc	r31, r31
    9afc:	88 1f       	adc	r24, r24
    9afe:	8b bf       	out	0x3b, r24	; 59
    9b00:	07 90       	elpm	r0, Z+
    9b02:	f6 91       	elpm	r31, Z
    9b04:	e0 2d       	mov	r30, r0
    9b06:	19 94       	eijmp

00009b08 <__umulhisi3>:
    9b08:	a2 9f       	mul	r26, r18
    9b0a:	b0 01       	movw	r22, r0
    9b0c:	b3 9f       	mul	r27, r19
    9b0e:	c0 01       	movw	r24, r0
    9b10:	a3 9f       	mul	r26, r19
    9b12:	70 0d       	add	r23, r0
    9b14:	81 1d       	adc	r24, r1
    9b16:	11 24       	eor	r1, r1
    9b18:	91 1d       	adc	r25, r1
    9b1a:	b2 9f       	mul	r27, r18
    9b1c:	70 0d       	add	r23, r0
    9b1e:	81 1d       	adc	r24, r1
    9b20:	11 24       	eor	r1, r1
    9b22:	91 1d       	adc	r25, r1
    9b24:	08 95       	ret

00009b26 <__usmulhisi3>:
    9b26:	f0 df       	rcall	.-32     	; 0x9b08 <__umulhisi3>

00009b28 <__usmulhisi3_tail>:
    9b28:	b7 ff       	sbrs	r27, 7
    9b2a:	08 95       	ret
    9b2c:	82 1b       	sub	r24, r18
    9b2e:	93 0b       	sbc	r25, r19
    9b30:	08 95       	ret

00009b32 <__mulshisi3>:
    9b32:	b7 ff       	sbrs	r27, 7
    9b34:	18 c0       	rjmp	.+48     	; 0x9b66 <__muluhisi3>

00009b36 <__mulohisi3>:
    9b36:	17 d0       	rcall	.+46     	; 0x9b66 <__muluhisi3>
    9b38:	82 1b       	sub	r24, r18
    9b3a:	93 0b       	sbc	r25, r19
    9b3c:	08 95       	ret

00009b3e <__udivmodhi4>:
    9b3e:	aa 1b       	sub	r26, r26
    9b40:	bb 1b       	sub	r27, r27
    9b42:	51 e1       	ldi	r21, 0x11	; 17
    9b44:	07 c0       	rjmp	.+14     	; 0x9b54 <__udivmodhi4_ep>

00009b46 <__udivmodhi4_loop>:
    9b46:	aa 1f       	adc	r26, r26
    9b48:	bb 1f       	adc	r27, r27
    9b4a:	a6 17       	cp	r26, r22
    9b4c:	b7 07       	cpc	r27, r23
    9b4e:	10 f0       	brcs	.+4      	; 0x9b54 <__udivmodhi4_ep>
    9b50:	a6 1b       	sub	r26, r22
    9b52:	b7 0b       	sbc	r27, r23

00009b54 <__udivmodhi4_ep>:
    9b54:	88 1f       	adc	r24, r24
    9b56:	99 1f       	adc	r25, r25
    9b58:	5a 95       	dec	r21
    9b5a:	a9 f7       	brne	.-22     	; 0x9b46 <__udivmodhi4_loop>
    9b5c:	80 95       	com	r24
    9b5e:	90 95       	com	r25
    9b60:	bc 01       	movw	r22, r24
    9b62:	cd 01       	movw	r24, r26
    9b64:	08 95       	ret

00009b66 <__muluhisi3>:
    9b66:	d0 df       	rcall	.-96     	; 0x9b08 <__umulhisi3>
    9b68:	a5 9f       	mul	r26, r21
    9b6a:	90 0d       	add	r25, r0
    9b6c:	b4 9f       	mul	r27, r20
    9b6e:	90 0d       	add	r25, r0
    9b70:	a4 9f       	mul	r26, r20
    9b72:	80 0d       	add	r24, r0
    9b74:	91 1d       	adc	r25, r1
    9b76:	11 24       	eor	r1, r1
    9b78:	08 95       	ret

00009b7a <do_rand>:
    9b7a:	8f 92       	push	r8
    9b7c:	9f 92       	push	r9
    9b7e:	af 92       	push	r10
    9b80:	bf 92       	push	r11
    9b82:	cf 92       	push	r12
    9b84:	df 92       	push	r13
    9b86:	ef 92       	push	r14
    9b88:	ff 92       	push	r15
    9b8a:	cf 93       	push	r28
    9b8c:	df 93       	push	r29
    9b8e:	ec 01       	movw	r28, r24
    9b90:	68 81       	ld	r22, Y
    9b92:	79 81       	ldd	r23, Y+1	; 0x01
    9b94:	8a 81       	ldd	r24, Y+2	; 0x02
    9b96:	9b 81       	ldd	r25, Y+3	; 0x03
    9b98:	61 15       	cp	r22, r1
    9b9a:	71 05       	cpc	r23, r1
    9b9c:	81 05       	cpc	r24, r1
    9b9e:	91 05       	cpc	r25, r1
    9ba0:	21 f4       	brne	.+8      	; 0x9baa <do_rand+0x30>
    9ba2:	64 e2       	ldi	r22, 0x24	; 36
    9ba4:	79 ed       	ldi	r23, 0xD9	; 217
    9ba6:	8b e5       	ldi	r24, 0x5B	; 91
    9ba8:	97 e0       	ldi	r25, 0x07	; 7
    9baa:	2d e1       	ldi	r18, 0x1D	; 29
    9bac:	33 ef       	ldi	r19, 0xF3	; 243
    9bae:	41 e0       	ldi	r20, 0x01	; 1
    9bb0:	50 e0       	ldi	r21, 0x00	; 0
    9bb2:	55 d0       	rcall	.+170    	; 0x9c5e <__divmodsi4>
    9bb4:	49 01       	movw	r8, r18
    9bb6:	5a 01       	movw	r10, r20
    9bb8:	9b 01       	movw	r18, r22
    9bba:	ac 01       	movw	r20, r24
    9bbc:	a7 ea       	ldi	r26, 0xA7	; 167
    9bbe:	b1 e4       	ldi	r27, 0x41	; 65
    9bc0:	d2 df       	rcall	.-92     	; 0x9b66 <__muluhisi3>
    9bc2:	6b 01       	movw	r12, r22
    9bc4:	7c 01       	movw	r14, r24
    9bc6:	ac ee       	ldi	r26, 0xEC	; 236
    9bc8:	b4 ef       	ldi	r27, 0xF4	; 244
    9bca:	a5 01       	movw	r20, r10
    9bcc:	94 01       	movw	r18, r8
    9bce:	b3 df       	rcall	.-154    	; 0x9b36 <__mulohisi3>
    9bd0:	dc 01       	movw	r26, r24
    9bd2:	cb 01       	movw	r24, r22
    9bd4:	8c 0d       	add	r24, r12
    9bd6:	9d 1d       	adc	r25, r13
    9bd8:	ae 1d       	adc	r26, r14
    9bda:	bf 1d       	adc	r27, r15
    9bdc:	b7 ff       	sbrs	r27, 7
    9bde:	03 c0       	rjmp	.+6      	; 0x9be6 <do_rand+0x6c>
    9be0:	01 97       	sbiw	r24, 0x01	; 1
    9be2:	a1 09       	sbc	r26, r1
    9be4:	b0 48       	sbci	r27, 0x80	; 128
    9be6:	88 83       	st	Y, r24
    9be8:	99 83       	std	Y+1, r25	; 0x01
    9bea:	aa 83       	std	Y+2, r26	; 0x02
    9bec:	bb 83       	std	Y+3, r27	; 0x03
    9bee:	9f 77       	andi	r25, 0x7F	; 127
    9bf0:	df 91       	pop	r29
    9bf2:	cf 91       	pop	r28
    9bf4:	ff 90       	pop	r15
    9bf6:	ef 90       	pop	r14
    9bf8:	df 90       	pop	r13
    9bfa:	cf 90       	pop	r12
    9bfc:	bf 90       	pop	r11
    9bfe:	af 90       	pop	r10
    9c00:	9f 90       	pop	r9
    9c02:	8f 90       	pop	r8
    9c04:	08 95       	ret

00009c06 <rand_r>:
    9c06:	b9 cf       	rjmp	.-142    	; 0x9b7a <do_rand>

00009c08 <rand>:
    9c08:	80 e0       	ldi	r24, 0x00	; 0
    9c0a:	92 e0       	ldi	r25, 0x02	; 2
    9c0c:	b6 cf       	rjmp	.-148    	; 0x9b7a <do_rand>

00009c0e <srand>:
    9c0e:	a0 e0       	ldi	r26, 0x00	; 0
    9c10:	b0 e0       	ldi	r27, 0x00	; 0
    9c12:	80 93 00 02 	sts	0x0200, r24
    9c16:	90 93 01 02 	sts	0x0201, r25
    9c1a:	a0 93 02 02 	sts	0x0202, r26
    9c1e:	b0 93 03 02 	sts	0x0203, r27
    9c22:	08 95       	ret

00009c24 <memcmp>:
    9c24:	fb 01       	movw	r30, r22
    9c26:	dc 01       	movw	r26, r24
    9c28:	04 c0       	rjmp	.+8      	; 0x9c32 <memcmp+0xe>
    9c2a:	8d 91       	ld	r24, X+
    9c2c:	01 90       	ld	r0, Z+
    9c2e:	80 19       	sub	r24, r0
    9c30:	21 f4       	brne	.+8      	; 0x9c3a <memcmp+0x16>
    9c32:	41 50       	subi	r20, 0x01	; 1
    9c34:	50 40       	sbci	r21, 0x00	; 0
    9c36:	c8 f7       	brcc	.-14     	; 0x9c2a <memcmp+0x6>
    9c38:	88 1b       	sub	r24, r24
    9c3a:	99 0b       	sbc	r25, r25
    9c3c:	08 95       	ret

00009c3e <memcpy>:
    9c3e:	fb 01       	movw	r30, r22
    9c40:	dc 01       	movw	r26, r24
    9c42:	02 c0       	rjmp	.+4      	; 0x9c48 <memcpy+0xa>
    9c44:	01 90       	ld	r0, Z+
    9c46:	0d 92       	st	X+, r0
    9c48:	41 50       	subi	r20, 0x01	; 1
    9c4a:	50 40       	sbci	r21, 0x00	; 0
    9c4c:	d8 f7       	brcc	.-10     	; 0x9c44 <memcpy+0x6>
    9c4e:	08 95       	ret

00009c50 <memset>:
    9c50:	dc 01       	movw	r26, r24
    9c52:	01 c0       	rjmp	.+2      	; 0x9c56 <memset+0x6>
    9c54:	6d 93       	st	X+, r22
    9c56:	41 50       	subi	r20, 0x01	; 1
    9c58:	50 40       	sbci	r21, 0x00	; 0
    9c5a:	e0 f7       	brcc	.-8      	; 0x9c54 <memset+0x4>
    9c5c:	08 95       	ret

00009c5e <__divmodsi4>:
    9c5e:	05 2e       	mov	r0, r21
    9c60:	97 fb       	bst	r25, 7
    9c62:	16 f4       	brtc	.+4      	; 0x9c68 <__divmodsi4+0xa>
    9c64:	00 94       	com	r0
    9c66:	0f d0       	rcall	.+30     	; 0x9c86 <__negsi2>
    9c68:	57 fd       	sbrc	r21, 7
    9c6a:	05 d0       	rcall	.+10     	; 0x9c76 <__divmodsi4_neg2>
    9c6c:	23 df       	rcall	.-442    	; 0x9ab4 <__udivmodsi4>
    9c6e:	07 fc       	sbrc	r0, 7
    9c70:	02 d0       	rcall	.+4      	; 0x9c76 <__divmodsi4_neg2>
    9c72:	46 f4       	brtc	.+16     	; 0x9c84 <__divmodsi4_exit>
    9c74:	08 c0       	rjmp	.+16     	; 0x9c86 <__negsi2>

00009c76 <__divmodsi4_neg2>:
    9c76:	50 95       	com	r21
    9c78:	40 95       	com	r20
    9c7a:	30 95       	com	r19
    9c7c:	21 95       	neg	r18
    9c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    9c80:	4f 4f       	sbci	r20, 0xFF	; 255
    9c82:	5f 4f       	sbci	r21, 0xFF	; 255

00009c84 <__divmodsi4_exit>:
    9c84:	08 95       	ret

00009c86 <__negsi2>:
    9c86:	90 95       	com	r25
    9c88:	80 95       	com	r24
    9c8a:	70 95       	com	r23
    9c8c:	61 95       	neg	r22
    9c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    9c90:	8f 4f       	sbci	r24, 0xFF	; 255
    9c92:	9f 4f       	sbci	r25, 0xFF	; 255
    9c94:	08 95       	ret

00009c96 <_exit>:
    9c96:	f8 94       	cli

00009c98 <__stop_program>:
    9c98:	ff cf       	rjmp	.-2      	; 0x9c98 <__stop_program>
