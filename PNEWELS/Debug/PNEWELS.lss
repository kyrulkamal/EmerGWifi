
PNEWELS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000744  00800200  00009c84  00009d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009c84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001c56  00800944  00800944  0000a45c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000a45c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000a4bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a78  00000000  00000000  0000a500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015b66  00000000  00000000  0000af78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cd6  00000000  00000000  00020ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000083c3  00000000  00000000  000247b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002054  00000000  00000000  0002cb78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041ea  00000000  00000000  0002ebcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a632  00000000  00000000  00032db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a08  00000000  00000000  0003d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	91 c1       	rjmp	.+802    	; 0x324 <__ctors_end>
       2:	00 00       	nop
       4:	34 c7       	rjmp	.+3688   	; 0xe6e <__vector_1>
       6:	00 00       	nop
       8:	5f c7       	rjmp	.+3774   	; 0xec8 <__vector_2>
       a:	00 00       	nop
       c:	8a c7       	rjmp	.+3860   	; 0xf22 <__vector_3>
       e:	00 00       	nop
      10:	b5 c7       	rjmp	.+3946   	; 0xf7c <__vector_4>
      12:	00 00       	nop
      14:	e0 c7       	rjmp	.+4032   	; 0xfd6 <__vector_5>
      16:	00 00       	nop
      18:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_6>
      1c:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_7>
      20:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_8>
      24:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_9>
      28:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_10>
      2c:	9b c1       	rjmp	.+822    	; 0x364 <__bad_interrupt>
      2e:	00 00       	nop
      30:	99 c1       	rjmp	.+818    	; 0x364 <__bad_interrupt>
      32:	00 00       	nop
      34:	97 c1       	rjmp	.+814    	; 0x364 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c1       	rjmp	.+810    	; 0x364 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 78 37 	jmp	0x6ef0	; 0x6ef0 <__vector_15>
      40:	91 c1       	rjmp	.+802    	; 0x364 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c1       	rjmp	.+798    	; 0x364 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c1       	rjmp	.+794    	; 0x364 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c1       	rjmp	.+790    	; 0x364 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c1       	rjmp	.+786    	; 0x364 <__bad_interrupt>
      52:	00 00       	nop
      54:	87 c1       	rjmp	.+782    	; 0x364 <__bad_interrupt>
      56:	00 00       	nop
      58:	85 c1       	rjmp	.+778    	; 0x364 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 4a 37 	jmp	0x6e94	; 0x6e94 <__vector_23>
      60:	81 c1       	rjmp	.+770    	; 0x364 <__bad_interrupt>
      62:	00 00       	nop
      64:	7f c1       	rjmp	.+766    	; 0x364 <__bad_interrupt>
      66:	00 00       	nop
      68:	7d c1       	rjmp	.+762    	; 0x364 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7b c1       	rjmp	.+758    	; 0x364 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c1       	rjmp	.+754    	; 0x364 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c1       	rjmp	.+750    	; 0x364 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c1       	rjmp	.+746    	; 0x364 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c1       	rjmp	.+742    	; 0x364 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c1       	rjmp	.+738    	; 0x364 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c1       	rjmp	.+734    	; 0x364 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c1       	rjmp	.+730    	; 0x364 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c1       	rjmp	.+726    	; 0x364 <__bad_interrupt>
      8e:	00 00       	nop
      90:	81 c6       	rjmp	.+3330   	; 0xd94 <__vector_36>
      92:	00 00       	nop
      94:	67 c1       	rjmp	.+718    	; 0x364 <__bad_interrupt>
      96:	00 00       	nop
      98:	65 c1       	rjmp	.+714    	; 0x364 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c3       	rjmp	.+1962   	; 0x848 <__vector_39>
      9e:	00 00       	nop
      a0:	61 c1       	rjmp	.+706    	; 0x364 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c1       	rjmp	.+702    	; 0x364 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_42>
      ac:	5b c1       	rjmp	.+694    	; 0x364 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	59 c1       	rjmp	.+690    	; 0x364 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	57 c1       	rjmp	.+686    	; 0x364 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	55 c1       	rjmp	.+682    	; 0x364 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c1       	rjmp	.+678    	; 0x364 <__bad_interrupt>
      be:	00 00       	nop
      c0:	51 c1       	rjmp	.+674    	; 0x364 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4f c1       	rjmp	.+670    	; 0x364 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4d c1       	rjmp	.+666    	; 0x364 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4b c1       	rjmp	.+662    	; 0x364 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	49 c1       	rjmp	.+658    	; 0x364 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	47 c1       	rjmp	.+654    	; 0x364 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	45 c1       	rjmp	.+650    	; 0x364 <__bad_interrupt>
      da:	00 00       	nop
      dc:	43 c1       	rjmp	.+646    	; 0x364 <__bad_interrupt>
      de:	00 00       	nop
      e0:	41 c1       	rjmp	.+642    	; 0x364 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3f c1       	rjmp	.+638    	; 0x364 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	3d c1       	rjmp	.+634    	; 0x364 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	3b c1       	rjmp	.+630    	; 0x364 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	39 c1       	rjmp	.+626    	; 0x364 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	37 c1       	rjmp	.+622    	; 0x364 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	35 c1       	rjmp	.+618    	; 0x364 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	33 c1       	rjmp	.+614    	; 0x364 <__bad_interrupt>
      fe:	00 00       	nop
     100:	31 c1       	rjmp	.+610    	; 0x364 <__bad_interrupt>
     102:	00 00       	nop
     104:	2f c1       	rjmp	.+606    	; 0x364 <__bad_interrupt>
     106:	00 00       	nop
     108:	2d c1       	rjmp	.+602    	; 0x364 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	2b c1       	rjmp	.+598    	; 0x364 <__bad_interrupt>
     10e:	00 00       	nop
     110:	29 c1       	rjmp	.+594    	; 0x364 <__bad_interrupt>
     112:	00 00       	nop
     114:	27 c1       	rjmp	.+590    	; 0x364 <__bad_interrupt>
     116:	00 00       	nop
     118:	25 c1       	rjmp	.+586    	; 0x364 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	23 c1       	rjmp	.+582    	; 0x364 <__bad_interrupt>
     11e:	00 00       	nop
     120:	21 c1       	rjmp	.+578    	; 0x364 <__bad_interrupt>
     122:	00 00       	nop
     124:	1f c1       	rjmp	.+574    	; 0x364 <__bad_interrupt>
     126:	00 00       	nop
     128:	1d c1       	rjmp	.+570    	; 0x364 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	1b c1       	rjmp	.+566    	; 0x364 <__bad_interrupt>
     12e:	00 00       	nop
     130:	19 c1       	rjmp	.+562    	; 0x364 <__bad_interrupt>
     132:	00 00       	nop
     134:	cf 04       	cpc	r12, r15
     136:	cb 05       	cpc	r28, r11
     138:	cb 05       	cpc	r28, r11
     13a:	cb 05       	cpc	r28, r11
     13c:	cb 05       	cpc	r28, r11
     13e:	cb 05       	cpc	r28, r11
     140:	cb 05       	cpc	r28, r11
     142:	cb 05       	cpc	r28, r11
     144:	46 04       	cpc	r4, r6
     146:	cb 05       	cpc	r28, r11
     148:	cb 05       	cpc	r28, r11
     14a:	cb 05       	cpc	r28, r11
     14c:	cb 05       	cpc	r28, r11
     14e:	cb 05       	cpc	r28, r11
     150:	cb 05       	cpc	r28, r11
     152:	cb 05       	cpc	r28, r11
     154:	46 04       	cpc	r4, r6
     156:	cb 05       	cpc	r28, r11
     158:	cb 05       	cpc	r28, r11
     15a:	cb 05       	cpc	r28, r11
     15c:	cb 05       	cpc	r28, r11
     15e:	cb 05       	cpc	r28, r11
     160:	cb 05       	cpc	r28, r11
     162:	cb 05       	cpc	r28, r11
     164:	6b 04       	cpc	r6, r11
     166:	cb 05       	cpc	r28, r11
     168:	cb 05       	cpc	r28, r11
     16a:	cb 05       	cpc	r28, r11
     16c:	cb 05       	cpc	r28, r11
     16e:	cb 05       	cpc	r28, r11
     170:	cb 05       	cpc	r28, r11
     172:	cb 05       	cpc	r28, r11
     174:	cf 04       	cpc	r12, r15
     176:	cb 05       	cpc	r28, r11
     178:	cb 05       	cpc	r28, r11
     17a:	cb 05       	cpc	r28, r11
     17c:	cb 05       	cpc	r28, r11
     17e:	cb 05       	cpc	r28, r11
     180:	cb 05       	cpc	r28, r11
     182:	cb 05       	cpc	r28, r11
     184:	6b 04       	cpc	r6, r11
     186:	cb 05       	cpc	r28, r11
     188:	cb 05       	cpc	r28, r11
     18a:	cb 05       	cpc	r28, r11
     18c:	cb 05       	cpc	r28, r11
     18e:	cb 05       	cpc	r28, r11
     190:	cb 05       	cpc	r28, r11
     192:	cb 05       	cpc	r28, r11
     194:	cf 04       	cpc	r12, r15
     196:	cb 05       	cpc	r28, r11
     198:	cb 05       	cpc	r28, r11
     19a:	cb 05       	cpc	r28, r11
     19c:	cb 05       	cpc	r28, r11
     19e:	cb 05       	cpc	r28, r11
     1a0:	cb 05       	cpc	r28, r11
     1a2:	cb 05       	cpc	r28, r11
     1a4:	5c 05       	cpc	r21, r12
     1a6:	cb 05       	cpc	r28, r11
     1a8:	cb 05       	cpc	r28, r11
     1aa:	cb 05       	cpc	r28, r11
     1ac:	cb 05       	cpc	r28, r11
     1ae:	cb 05       	cpc	r28, r11
     1b0:	cb 05       	cpc	r28, r11
     1b2:	cb 05       	cpc	r28, r11
     1b4:	d4 04       	cpc	r13, r4
     1b6:	cb 05       	cpc	r28, r11
     1b8:	cb 05       	cpc	r28, r11
     1ba:	cb 05       	cpc	r28, r11
     1bc:	cb 05       	cpc	r28, r11
     1be:	cb 05       	cpc	r28, r11
     1c0:	cb 05       	cpc	r28, r11
     1c2:	cb 05       	cpc	r28, r11
     1c4:	cf 04       	cpc	r12, r15
     1c6:	cb 05       	cpc	r28, r11
     1c8:	cb 05       	cpc	r28, r11
     1ca:	cb 05       	cpc	r28, r11
     1cc:	cb 05       	cpc	r28, r11
     1ce:	cb 05       	cpc	r28, r11
     1d0:	cb 05       	cpc	r28, r11
     1d2:	cb 05       	cpc	r28, r11
     1d4:	fd 04       	cpc	r15, r13
     1d6:	cb 05       	cpc	r28, r11
     1d8:	cb 05       	cpc	r28, r11
     1da:	cb 05       	cpc	r28, r11
     1dc:	cb 05       	cpc	r28, r11
     1de:	cb 05       	cpc	r28, r11
     1e0:	cb 05       	cpc	r28, r11
     1e2:	cb 05       	cpc	r28, r11
     1e4:	35 05       	cpc	r19, r5
     1e6:	cb 05       	cpc	r28, r11
     1e8:	cb 05       	cpc	r28, r11
     1ea:	cb 05       	cpc	r28, r11
     1ec:	cb 05       	cpc	r28, r11
     1ee:	cb 05       	cpc	r28, r11
     1f0:	cb 05       	cpc	r28, r11
     1f2:	cb 05       	cpc	r28, r11
     1f4:	90 05       	cpc	r25, r0
     1f6:	cb 05       	cpc	r28, r11
     1f8:	cb 05       	cpc	r28, r11
     1fa:	cb 05       	cpc	r28, r11
     1fc:	cb 05       	cpc	r28, r11
     1fe:	cb 05       	cpc	r28, r11
     200:	cb 05       	cpc	r28, r11
     202:	cb 05       	cpc	r28, r11
     204:	90 05       	cpc	r25, r0
     206:	cb 05       	cpc	r28, r11
     208:	cb 05       	cpc	r28, r11
     20a:	cb 05       	cpc	r28, r11
     20c:	cb 05       	cpc	r28, r11
     20e:	cb 05       	cpc	r28, r11
     210:	cb 05       	cpc	r28, r11
     212:	cb 05       	cpc	r28, r11
     214:	90 05       	cpc	r25, r0
     216:	cb 05       	cpc	r28, r11
     218:	cb 05       	cpc	r28, r11
     21a:	cb 05       	cpc	r28, r11
     21c:	cb 05       	cpc	r28, r11
     21e:	cb 05       	cpc	r28, r11
     220:	cb 05       	cpc	r28, r11
     222:	cb 05       	cpc	r28, r11
     224:	90 05       	cpc	r25, r0
     226:	cb 05       	cpc	r28, r11
     228:	cb 05       	cpc	r28, r11
     22a:	cb 05       	cpc	r28, r11
     22c:	cb 05       	cpc	r28, r11
     22e:	cb 05       	cpc	r28, r11
     230:	cb 05       	cpc	r28, r11
     232:	cb 05       	cpc	r28, r11
     234:	9a 05       	cpc	r25, r10
     236:	cb 05       	cpc	r28, r11
     238:	cb 05       	cpc	r28, r11
     23a:	cb 05       	cpc	r28, r11
     23c:	cb 05       	cpc	r28, r11
     23e:	cb 05       	cpc	r28, r11
     240:	cb 05       	cpc	r28, r11
     242:	cb 05       	cpc	r28, r11
     244:	bf 05       	cpc	r27, r15
     246:	cb 05       	cpc	r28, r11
     248:	cb 05       	cpc	r28, r11
     24a:	cb 05       	cpc	r28, r11
     24c:	cb 05       	cpc	r28, r11
     24e:	cb 05       	cpc	r28, r11
     250:	cb 05       	cpc	r28, r11
     252:	cb 05       	cpc	r28, r11
     254:	9a 05       	cpc	r25, r10
     256:	cb 05       	cpc	r28, r11
     258:	cb 05       	cpc	r28, r11
     25a:	cb 05       	cpc	r28, r11
     25c:	cb 05       	cpc	r28, r11
     25e:	cb 05       	cpc	r28, r11
     260:	cb 05       	cpc	r28, r11
     262:	cb 05       	cpc	r28, r11
     264:	bf 05       	cpc	r27, r15
     266:	cb 05       	cpc	r28, r11
     268:	cb 05       	cpc	r28, r11
     26a:	cb 05       	cpc	r28, r11
     26c:	cb 05       	cpc	r28, r11
     26e:	cb 05       	cpc	r28, r11
     270:	cb 05       	cpc	r28, r11
     272:	cb 05       	cpc	r28, r11
     274:	b3 05       	cpc	r27, r3
     276:	cb 05       	cpc	r28, r11
     278:	cb 05       	cpc	r28, r11
     27a:	cb 05       	cpc	r28, r11
     27c:	cb 05       	cpc	r28, r11
     27e:	cb 05       	cpc	r28, r11
     280:	cb 05       	cpc	r28, r11
     282:	cb 05       	cpc	r28, r11
     284:	65 05       	cpc	r22, r5
     286:	cb 05       	cpc	r28, r11
     288:	cb 05       	cpc	r28, r11
     28a:	cb 05       	cpc	r28, r11
     28c:	cb 05       	cpc	r28, r11
     28e:	cb 05       	cpc	r28, r11
     290:	cb 05       	cpc	r28, r11
     292:	cb 05       	cpc	r28, r11
     294:	65 05       	cpc	r22, r5
     296:	cb 05       	cpc	r28, r11
     298:	cb 05       	cpc	r28, r11
     29a:	cb 05       	cpc	r28, r11
     29c:	cb 05       	cpc	r28, r11
     29e:	cb 05       	cpc	r28, r11
     2a0:	cb 05       	cpc	r28, r11
     2a2:	cb 05       	cpc	r28, r11
     2a4:	69 05       	cpc	r22, r9
     2a6:	cb 05       	cpc	r28, r11
     2a8:	cb 05       	cpc	r28, r11
     2aa:	cb 05       	cpc	r28, r11
     2ac:	cb 05       	cpc	r28, r11
     2ae:	cb 05       	cpc	r28, r11
     2b0:	cb 05       	cpc	r28, r11
     2b2:	cb 05       	cpc	r28, r11
     2b4:	84 05       	cpc	r24, r4
     2b6:	cb 05       	cpc	r28, r11
     2b8:	cb 05       	cpc	r28, r11
     2ba:	cb 05       	cpc	r28, r11
     2bc:	cb 05       	cpc	r28, r11
     2be:	cb 05       	cpc	r28, r11
     2c0:	cb 05       	cpc	r28, r11
     2c2:	cb 05       	cpc	r28, r11
     2c4:	bf 05       	cpc	r27, r15
     2c6:	28 28       	or	r2, r8
     2c8:	13 28       	or	r1, r3
     2ca:	15 28       	or	r1, r5
     2cc:	17 28       	or	r1, r7
     2ce:	19 28       	or	r1, r9
     2d0:	1b 28       	or	r1, r11
     2d2:	1d 28       	or	r1, r13
     2d4:	1f 28       	or	r1, r15
     2d6:	21 28       	or	r2, r1
     2d8:	74 29       	or	r23, r4
     2da:	46 2a       	or	r4, r22
     2dc:	e0 2a       	or	r14, r16
     2de:	7a 2b       	or	r23, r26
     2e0:	14 2c       	mov	r1, r4
     2e2:	ae 2c       	mov	r10, r14
     2e4:	48 2d       	mov	r20, r8
     2e6:	e2 2d       	mov	r30, r2
     2e8:	8c 2e       	mov	r8, r28
     2ea:	59 2f       	mov	r21, r25
     2ec:	6f 30       	cpi	r22, 0x0F	; 15
     2ee:	82 30       	cpi	r24, 0x02	; 2
     2f0:	90 30       	cpi	r25, 0x00	; 0
     2f2:	a0 30       	cpi	r26, 0x00	; 0
     2f4:	b0 30       	cpi	r27, 0x00	; 0
     2f6:	d5 30       	cpi	r29, 0x05	; 5
     2f8:	c4 30       	cpi	r28, 0x04	; 4
     2fa:	06 32       	cpi	r16, 0x26	; 38
     2fc:	09 32       	cpi	r16, 0x29	; 41
     2fe:	2c 32       	cpi	r18, 0x2C	; 44
     300:	0b 32       	cpi	r16, 0x2B	; 43
     302:	2f 32       	cpi	r18, 0x2F	; 47
     304:	31 32       	cpi	r19, 0x21	; 33
     306:	33 32       	cpi	r19, 0x23	; 35
     308:	35 32       	cpi	r19, 0x25	; 37
     30a:	0d 32       	cpi	r16, 0x2D	; 45
     30c:	82 34       	cpi	r24, 0x42	; 66
     30e:	8b 34       	cpi	r24, 0x4B	; 75
     310:	9f 34       	cpi	r25, 0x4F	; 79
     312:	95 34       	cpi	r25, 0x45	; 69
     314:	a9 34       	cpi	r26, 0x49	; 73
     316:	b3 34       	cpi	r27, 0x43	; 67
     318:	bd 34       	cpi	r27, 0x4D	; 77
     31a:	c7 34       	cpi	r28, 0x47	; 71
     31c:	d1 34       	cpi	r29, 0x41	; 65
     31e:	e5 34       	cpi	r30, 0x45	; 69
     320:	ef 34       	cpi	r30, 0x4F	; 79
     322:	db 34       	cpi	r29, 0x4B	; 75

00000324 <__ctors_end>:
     324:	11 24       	eor	r1, r1
     326:	1f be       	out	0x3f, r1	; 63
     328:	cf ef       	ldi	r28, 0xFF	; 255
     32a:	d1 e8       	ldi	r29, 0x81	; 129
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	00 e0       	ldi	r16, 0x00	; 0
     332:	0c bf       	out	0x3c, r16	; 60

00000334 <__do_copy_data>:
     334:	19 e0       	ldi	r17, 0x09	; 9
     336:	a0 e0       	ldi	r26, 0x00	; 0
     338:	b2 e0       	ldi	r27, 0x02	; 2
     33a:	e4 e8       	ldi	r30, 0x84	; 132
     33c:	fc e9       	ldi	r31, 0x9C	; 156
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	0b bf       	out	0x3b, r16	; 59
     342:	02 c0       	rjmp	.+4      	; 0x348 <__do_copy_data+0x14>
     344:	07 90       	elpm	r0, Z+
     346:	0d 92       	st	X+, r0
     348:	a4 34       	cpi	r26, 0x44	; 68
     34a:	b1 07       	cpc	r27, r17
     34c:	d9 f7       	brne	.-10     	; 0x344 <__do_copy_data+0x10>

0000034e <__do_clear_bss>:
     34e:	25 e2       	ldi	r18, 0x25	; 37
     350:	a4 e4       	ldi	r26, 0x44	; 68
     352:	b9 e0       	ldi	r27, 0x09	; 9
     354:	01 c0       	rjmp	.+2      	; 0x358 <.do_clear_bss_start>

00000356 <.do_clear_bss_loop>:
     356:	1d 92       	st	X+, r1

00000358 <.do_clear_bss_start>:
     358:	aa 39       	cpi	r26, 0x9A	; 154
     35a:	b2 07       	cpc	r27, r18
     35c:	e1 f7       	brne	.-8      	; 0x356 <.do_clear_bss_loop>
     35e:	5b d5       	rcall	.+2742   	; 0xe16 <main>
     360:	0c 94 40 4e 	jmp	0x9c80	; 0x9c80 <_exit>

00000364 <__bad_interrupt>:
     364:	4d ce       	rjmp	.-870    	; 0x0 <__vectors>

00000366 <APP_EepromReadByte>:
  for (uint16_t i = 0; i < size; i++)
  {
    if (APP_EepromReadByte(address + i) != data[i])
      APP_EepromWriteByte(address + i, data[i]);
  }
}
     366:	f9 99       	sbic	0x1f, 1	; 31
     368:	fe cf       	rjmp	.-4      	; 0x366 <APP_EepromReadByte>
     36a:	92 bd       	out	0x22, r25	; 34
     36c:	81 bd       	out	0x21, r24	; 33
     36e:	f8 9a       	sbi	0x1f, 0	; 31
     370:	80 b5       	in	r24, 0x20	; 32
     372:	08 95       	ret

00000374 <APP_EepromRead>:

/*****************************************************************************
*****************************************************************************/
void APP_EepromRead(uint16_t address, uint8_t *data, uint16_t size)
{
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
  for (uint16_t i = 0; i < size; i++)
     380:	41 15       	cp	r20, r1
     382:	51 05       	cpc	r21, r1
     384:	79 f0       	breq	.+30     	; 0x3a4 <APP_EepromRead+0x30>
     386:	8b 01       	movw	r16, r22
     388:	04 0f       	add	r16, r20
     38a:	15 1f       	adc	r17, r21
     38c:	eb 01       	movw	r28, r22
     38e:	7c 01       	movw	r14, r24
     390:	e6 1a       	sub	r14, r22
     392:	f7 0a       	sbc	r15, r23
  {
    data[i] = APP_EepromReadByte(address + i);
     394:	c7 01       	movw	r24, r14
     396:	8c 0f       	add	r24, r28
     398:	9d 1f       	adc	r25, r29
     39a:	e5 df       	rcall	.-54     	; 0x366 <APP_EepromReadByte>
     39c:	89 93       	st	Y+, r24

/*****************************************************************************
*****************************************************************************/
void APP_EepromRead(uint16_t address, uint8_t *data, uint16_t size)
{
  for (uint16_t i = 0; i < size; i++)
     39e:	c0 17       	cp	r28, r16
     3a0:	d1 07       	cpc	r29, r17
     3a2:	c1 f7       	brne	.-16     	; 0x394 <APP_EepromRead+0x20>
  {
    data[i] = APP_EepromReadByte(address + i);
  }
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	08 95       	ret

000003b2 <APP_IbLoadSettings>:
}

/*****************************************************************************
*****************************************************************************/
void APP_IbLoadSettings(void)
{
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	61 97       	sbiw	r28, 0x11	; 17
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
  APP_EepromRead(APP_IB_EEPROM_OFFSET, (uint8_t *)&appIb, sizeof(appIb));
     3ce:	4a e2       	ldi	r20, 0x2A	; 42
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	68 e0       	ldi	r22, 0x08	; 8
     3d4:	73 e2       	ldi	r23, 0x23	; 35
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	cc df       	rcall	.-104    	; 0x374 <APP_EepromRead>

  if (APP_EEPROM_MAGIC != appIb.magic)
     3dc:	80 91 2e 23 	lds	r24, 0x232E
     3e0:	90 91 2f 23 	lds	r25, 0x232F
     3e4:	a0 91 30 23 	lds	r26, 0x2330
     3e8:	b0 91 31 23 	lds	r27, 0x2331
     3ec:	81 34       	cpi	r24, 0x41	; 65
     3ee:	9c 46       	sbci	r25, 0x6C	; 108
     3f0:	a5 46       	sbci	r26, 0x65	; 101
     3f2:	b8 47       	sbci	r27, 0x78	; 120
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <APP_IbLoadSettings+0x46>
     3f6:	7b c0       	rjmp	.+246    	; 0x4ee <APP_IbLoadSettings+0x13c>
  {
    char hex[] = "0123456789abcdef";
     3f8:	81 e1       	ldi	r24, 0x11	; 17
     3fa:	e7 e1       	ldi	r30, 0x17	; 23
     3fc:	f2 e0       	ldi	r31, 0x02	; 2
     3fe:	de 01       	movw	r26, r28
     400:	11 96       	adiw	r26, 0x01	; 1
     402:	01 90       	ld	r0, Z+
     404:	0d 92       	st	X+, r0
     406:	8a 95       	dec	r24
     408:	e1 f7       	brne	.-8      	; 0x402 <APP_IbLoadSettings+0x50>

/*-------------Initialize RF parameter----------------*/
    appIb.addr = rf_init(DEVICE_ADDRESS_L,PNEWELS_Buffer.deviceAddress);
     40a:	0f 2e       	mov	r0, r31
     40c:	f0 e6       	ldi	r31, 0x60	; 96
     40e:	ef 2e       	mov	r14, r31
     410:	f2 e2       	ldi	r31, 0x22	; 34
     412:	ff 2e       	mov	r15, r31
     414:	f0 2d       	mov	r31, r0
     416:	f7 01       	movw	r30, r14
     418:	63 8d       	ldd	r22, Z+27	; 0x1b
     41a:	74 8d       	ldd	r23, Z+28	; 0x1c
     41c:	8c ef       	ldi	r24, 0xFC	; 252
     41e:	9f e0       	ldi	r25, 0x0F	; 15
     420:	0e 94 14 21 	call	0x4228	; 0x4228 <rf_init>
     424:	08 e0       	ldi	r16, 0x08	; 8
     426:	13 e2       	ldi	r17, 0x23	; 35
     428:	f8 01       	movw	r30, r16
     42a:	91 83       	std	Z+1, r25	; 0x01
     42c:	80 83       	st	Z, r24
    appIb.panId = rf_init(DEVICE_PAN_L,PNEWELS_Buffer.devicePAN);
     42e:	f7 01       	movw	r30, r14
     430:	65 8d       	ldd	r22, Z+29	; 0x1d
     432:	76 8d       	ldd	r23, Z+30	; 0x1e
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e1       	ldi	r25, 0x10	; 16
     438:	0e 94 14 21 	call	0x4228	; 0x4228 <rf_init>
     43c:	f8 01       	movw	r30, r16
     43e:	95 83       	std	Z+5, r25	; 0x05
     440:	84 83       	std	Z+4, r24	; 0x04
    appIb.channel = rf_init(DEVICE_CHANNEL_L,PNEWELS_Buffer.deviceChannel);
     442:	f7 01       	movw	r30, r14
     444:	61 8d       	ldd	r22, Z+25	; 0x19
     446:	72 8d       	ldd	r23, Z+26	; 0x1a
     448:	8e ef       	ldi	r24, 0xFE	; 254
     44a:	9f e0       	ldi	r25, 0x0F	; 15
     44c:	0e 94 14 21 	call	0x4228	; 0x4228 <rf_init>
     450:	f8 01       	movw	r30, r16
     452:	93 83       	std	Z+3, r25	; 0x03
     454:	82 83       	std	Z+2, r24	; 0x02
//------------------------------------------------------
/*-------------Initialize Device parameter----------------*/
	/*PNEWELS_Buffer.groupID = readE2prom(GROUP_ID);*/

    memset(appIb.name, ' ', sizeof(appIb.name));
     456:	40 e2       	ldi	r20, 0x20	; 32
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	60 e2       	ldi	r22, 0x20	; 32
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	8e e0       	ldi	r24, 0x0E	; 14
     460:	93 e2       	ldi	r25, 0x23	; 35
     462:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <memset>
    memcpy(appIb.name, "Device_xxxx", strlen("Device_xxxx"));
     466:	8b e0       	ldi	r24, 0x0B	; 11
     468:	eb e0       	ldi	r30, 0x0B	; 11
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	ae e0       	ldi	r26, 0x0E	; 14
     46e:	b3 e2       	ldi	r27, 0x23	; 35
     470:	01 90       	ld	r0, Z+
     472:	0d 92       	st	X+, r0
     474:	8a 95       	dec	r24
     476:	e1 f7       	brne	.-8      	; 0x470 <APP_IbLoadSettings+0xbe>
    appIb.name[7] = hex[(appIb.addr >> 12) & 0x0f];
     478:	f8 01       	movw	r30, r16
     47a:	80 81       	ld	r24, Z
     47c:	91 81       	ldd	r25, Z+1	; 0x01
     47e:	fc 01       	movw	r30, r24
     480:	ef 2f       	mov	r30, r31
     482:	ff 27       	eor	r31, r31
     484:	e2 95       	swap	r30
     486:	ef 70       	andi	r30, 0x0F	; 15
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	2c 0f       	add	r18, r28
     48e:	3d 1f       	adc	r19, r29
     490:	e2 0f       	add	r30, r18
     492:	f3 1f       	adc	r31, r19
     494:	20 81       	ld	r18, Z
     496:	f8 01       	movw	r30, r16
     498:	25 87       	std	Z+13, r18	; 0x0d
    appIb.name[8] = hex[(appIb.addr >> 8) & 0x0f];
     49a:	e9 2f       	mov	r30, r25
     49c:	ff 27       	eor	r31, r31
     49e:	ef 70       	andi	r30, 0x0F	; 15
     4a0:	ff 27       	eor	r31, r31
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	2c 0f       	add	r18, r28
     4a8:	3d 1f       	adc	r19, r29
     4aa:	e2 0f       	add	r30, r18
     4ac:	f3 1f       	adc	r31, r19
     4ae:	20 81       	ld	r18, Z
     4b0:	f8 01       	movw	r30, r16
     4b2:	26 87       	std	Z+14, r18	; 0x0e
    appIb.name[9] = hex[(appIb.addr >> 4) & 0x0f];
     4b4:	fc 01       	movw	r30, r24
     4b6:	f2 95       	swap	r31
     4b8:	e2 95       	swap	r30
     4ba:	ef 70       	andi	r30, 0x0F	; 15
     4bc:	ef 27       	eor	r30, r31
     4be:	ff 70       	andi	r31, 0x0F	; 15
     4c0:	ef 27       	eor	r30, r31
     4c2:	ef 70       	andi	r30, 0x0F	; 15
     4c4:	ff 27       	eor	r31, r31
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	2c 0f       	add	r18, r28
     4cc:	3d 1f       	adc	r19, r29
     4ce:	e2 0f       	add	r30, r18
     4d0:	f3 1f       	adc	r31, r19
     4d2:	20 81       	ld	r18, Z
     4d4:	f8 01       	movw	r30, r16
     4d6:	27 87       	std	Z+15, r18	; 0x0f
    appIb.name[10] = hex[appIb.addr & 0x0f];
     4d8:	8f 70       	andi	r24, 0x0F	; 15
     4da:	99 27       	eor	r25, r25
     4dc:	e1 e0       	ldi	r30, 0x01	; 1
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	ec 0f       	add	r30, r28
     4e2:	fd 1f       	adc	r31, r29
     4e4:	e8 0f       	add	r30, r24
     4e6:	f9 1f       	adc	r31, r25
     4e8:	80 81       	ld	r24, Z
     4ea:	f8 01       	movw	r30, r16
     4ec:	80 8b       	std	Z+16, r24	; 0x10
  }
}
     4ee:	61 96       	adiw	r28, 0x11	; 17
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	08 95       	ret

00000508 <APP_IbLoadSettings_WPS>:

void APP_IbLoadSettings_WPS(void)
{
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
	APP_EepromRead(APP_IB_EEPROM_OFFSET, (uint8_t *)&appIb, sizeof(appIb));
     50c:	4a e2       	ldi	r20, 0x2A	; 42
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	68 e0       	ldi	r22, 0x08	; 8
     512:	73 e2       	ldi	r23, 0x23	; 35
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	2d df       	rcall	.-422    	; 0x374 <APP_EepromRead>

	if (APP_EEPROM_MAGIC != appIb.magic)
     51a:	80 91 2e 23 	lds	r24, 0x232E
     51e:	90 91 2f 23 	lds	r25, 0x232F
     522:	a0 91 30 23 	lds	r26, 0x2330
     526:	b0 91 31 23 	lds	r27, 0x2331
     52a:	81 34       	cpi	r24, 0x41	; 65
     52c:	9c 46       	sbci	r25, 0x6C	; 108
     52e:	a5 46       	sbci	r26, 0x65	; 101
     530:	b8 47       	sbci	r27, 0x78	; 120
     532:	11 f1       	breq	.+68     	; 0x578 <APP_IbLoadSettings_WPS+0x70>
	{
		char hex[] = "0123456789abcdef";

		/*-------------Initialize RF parameter----------------*/
		appIb.addr = WPS_ADDRESS;
     534:	c8 e0       	ldi	r28, 0x08	; 8
     536:	d3 e2       	ldi	r29, 0x23	; 35
     538:	8f ef       	ldi	r24, 0xFF	; 255
     53a:	9f ef       	ldi	r25, 0xFF	; 255
     53c:	99 83       	std	Y+1, r25	; 0x01
     53e:	88 83       	st	Y, r24
		appIb.panId = WPS_PANID;
     540:	9d 83       	std	Y+5, r25	; 0x05
     542:	8c 83       	std	Y+4, r24	; 0x04
		appIb.channel = WPS_CHANNEL;
     544:	8f e0       	ldi	r24, 0x0F	; 15
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9b 83       	std	Y+3, r25	; 0x03
     54a:	8a 83       	std	Y+2, r24	; 0x02
		//------------------------------------------------------

		memset(appIb.name, ' ', sizeof(appIb.name));
     54c:	40 e2       	ldi	r20, 0x20	; 32
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	60 e2       	ldi	r22, 0x20	; 32
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	8e e0       	ldi	r24, 0x0E	; 14
     556:	93 e2       	ldi	r25, 0x23	; 35
     558:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <memset>
		memcpy(appIb.name, "Device_xxxx", strlen("Device_xxxx"));
     55c:	8b e0       	ldi	r24, 0x0B	; 11
     55e:	eb e0       	ldi	r30, 0x0B	; 11
     560:	f2 e0       	ldi	r31, 0x02	; 2
     562:	ae e0       	ldi	r26, 0x0E	; 14
     564:	b3 e2       	ldi	r27, 0x23	; 35
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	8a 95       	dec	r24
     56c:	e1 f7       	brne	.-8      	; 0x566 <APP_IbLoadSettings_WPS+0x5e>
		appIb.name[7] = hex[(appIb.addr >> 12) & 0x0f];
     56e:	86 e6       	ldi	r24, 0x66	; 102
     570:	8d 87       	std	Y+13, r24	; 0x0d
		appIb.name[8] = hex[(appIb.addr >> 8) & 0x0f];
     572:	8e 87       	std	Y+14, r24	; 0x0e
		appIb.name[9] = hex[(appIb.addr >> 4) & 0x0f];
     574:	8f 87       	std	Y+15, r24	; 0x0f
		appIb.name[10] = hex[appIb.addr & 0x0f];
     576:	88 8b       	std	Y+16, r24	; 0x10
	}
	APP_NwkInit(); //execute new setting
     578:	4e d0       	rcall	.+156    	; 0x616 <APP_NwkInit>
}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <appNwkDataConf>:
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
    if (req == &appNwkBuffer[idx].req)
     580:	29 e0       	ldi	r18, 0x09	; 9
     582:	86 34       	cpi	r24, 0x46	; 70
     584:	92 07       	cpc	r25, r18
     586:	69 f0       	breq	.+26     	; 0x5a2 <appNwkDataConf+0x22>
     588:	47 ec       	ldi	r20, 0xC7	; 199
     58a:	59 e0       	ldi	r21, 0x09	; 9
     58c:	bc 01       	movw	r22, r24
*****************************************************************************/
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
     58e:	21 e0       	ldi	r18, 0x01	; 1
    if (req == &appNwkBuffer[idx].req)
     590:	46 17       	cp	r20, r22
     592:	57 07       	cpc	r21, r23
     594:	39 f0       	breq	.+14     	; 0x5a4 <appNwkDataConf+0x24>
*****************************************************************************/
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
     596:	2f 5f       	subi	r18, 0xFF	; 255
     598:	4f 57       	subi	r20, 0x7F	; 127
     59a:	5f 4f       	sbci	r21, 0xFF	; 255
     59c:	24 31       	cpi	r18, 0x14	; 20
     59e:	c1 f7       	brne	.-16     	; 0x590 <appNwkDataConf+0x10>
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <appNwkDataConf+0x24>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
    if (req == &appNwkBuffer[idx].req)
      break;

  if (NWK_SUCCESS_STATUS == req->status)
     5a4:	fc 01       	movw	r30, r24
     5a6:	37 85       	ldd	r19, Z+15	; 0x0f
     5a8:	31 11       	cpse	r19, r1
     5aa:	0e c0       	rjmp	.+28     	; 0x5c8 <appNwkDataConf+0x48>
  {
    appNwkBuffer[idx].busy = false;
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	f6 95       	lsr	r31
     5b2:	fe 2f       	mov	r31, r30
     5b4:	ee 27       	eor	r30, r30
     5b6:	f7 95       	ror	r31
     5b8:	e7 95       	ror	r30
     5ba:	2e 0f       	add	r18, r30
     5bc:	3f 1f       	adc	r19, r31
     5be:	f9 01       	movw	r30, r18
     5c0:	ec 5b       	subi	r30, 0xBC	; 188
     5c2:	f6 4f       	sbci	r31, 0xF6	; 246
     5c4:	10 82       	st	Z, r1
     5c6:	08 95       	ret
  }
  else
  {
    if (--appNwkBuffer[idx].retries)
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	f9 01       	movw	r30, r18
     5cc:	f6 95       	lsr	r31
     5ce:	fe 2f       	mov	r31, r30
     5d0:	ee 27       	eor	r30, r30
     5d2:	f7 95       	ror	r31
     5d4:	e7 95       	ror	r30
     5d6:	e2 0f       	add	r30, r18
     5d8:	f3 1f       	adc	r31, r19
     5da:	ec 5b       	subi	r30, 0xBC	; 188
     5dc:	f6 4f       	sbci	r31, 0xF6	; 246
     5de:	41 81       	ldd	r20, Z+1	; 0x01
     5e0:	41 50       	subi	r20, 0x01	; 1
     5e2:	41 83       	std	Z+1, r20	; 0x01
     5e4:	44 23       	and	r20, r20
     5e6:	19 f0       	breq	.+6      	; 0x5ee <appNwkDataConf+0x6e>
      NWK_DataReq(req);
     5e8:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <NWK_DataReq>
     5ec:	08 95       	ret
    else
      appNwkBuffer[idx].busy = false;
     5ee:	f9 01       	movw	r30, r18
     5f0:	f6 95       	lsr	r31
     5f2:	fe 2f       	mov	r31, r30
     5f4:	ee 27       	eor	r30, r30
     5f6:	f7 95       	ror	r31
     5f8:	e7 95       	ror	r30
     5fa:	2e 0f       	add	r18, r30
     5fc:	3f 1f       	adc	r19, r31
     5fe:	f9 01       	movw	r30, r18
     600:	ec 5b       	subi	r30, 0xBC	; 188
     602:	f6 4f       	sbci	r31, 0xF6	; 246
     604:	10 82       	st	Z, r1
     606:	08 95       	ret

00000608 <appNwkDataInd>:
/*************************************************************************//**
*****************************************************************************/
static bool appNwkDataInd(NWK_DataInd_t *ind)
{
  //return APP_CommandReceived(ind->data, ind->size);
  return pneIncomingData(ind->data, ind->size);
     608:	fc 01       	movw	r30, r24
     60a:	61 85       	ldd	r22, Z+9	; 0x09
     60c:	87 81       	ldd	r24, Z+7	; 0x07
     60e:	90 85       	ldd	r25, Z+8	; 0x08
     610:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <pneIncomingData>
}
     614:	08 95       	ret

00000616 <APP_NwkInit>:
}

/*************************************************************************//**
*****************************************************************************/
void APP_NwkInit(void)
{
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
  NWK_SetAddr(appIb.addr);
     61a:	c8 e0       	ldi	r28, 0x08	; 8
     61c:	d3 e2       	ldi	r29, 0x23	; 35
     61e:	88 81       	ld	r24, Y
     620:	99 81       	ldd	r25, Y+1	; 0x01
     622:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <NWK_SetAddr>
  NWK_SetPanId(appIb.panId);
     626:	8c 81       	ldd	r24, Y+4	; 0x04
     628:	9d 81       	ldd	r25, Y+5	; 0x05
     62a:	0e 94 02 0c 	call	0x1804	; 0x1804 <NWK_SetPanId>
  PHY_SetChannel(appIb.channel);
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	0e 94 1e 14 	call	0x283c	; 0x283c <PHY_SetChannel>
  PHY_SetRxState(true);
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 1a 14 	call	0x2834	; 0x2834 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);
     63a:	64 e0       	ldi	r22, 0x04	; 4
     63c:	73 e0       	ldi	r23, 0x03	; 3
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 09 0c 	call	0x1812	; 0x1812 <NWK_OpenEndpoint>
     644:	a4 e4       	ldi	r26, 0x44	; 68
     646:	b9 e0       	ldi	r27, 0x09	; 9
     648:	ef e4       	ldi	r30, 0x4F	; 79
     64a:	f9 e0       	ldi	r31, 0x09	; 9
     64c:	63 e6       	ldi	r22, 0x63	; 99
     64e:	73 e1       	ldi	r23, 0x13	; 19

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    appNwkBuffer[i].busy = false;
    appNwkBuffer[i].req.dstAddr = 0;
    appNwkBuffer[i].req.dstEndpoint = APP_ENDPOINT;
     650:	81 e0       	ldi	r24, 0x01	; 1
    appNwkBuffer[i].req.srcEndpoint = APP_ENDPOINT;
    appNwkBuffer[i].req.options = NWK_OPT_ACK_REQUEST;
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
    appNwkBuffer[i].req.confirm = appNwkDataConf;
     652:	40 ec       	ldi	r20, 0xC0	; 192
     654:	52 e0       	ldi	r21, 0x02	; 2

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    appNwkBuffer[i].busy = false;
     656:	1c 92       	st	X, r1
    appNwkBuffer[i].req.dstAddr = 0;
     658:	18 96       	adiw	r26, 0x08	; 8
     65a:	1c 92       	st	X, r1
     65c:	1e 92       	st	-X, r1
     65e:	17 97       	sbiw	r26, 0x07	; 7
     660:	ef 01       	movw	r28, r30
     662:	22 97       	sbiw	r28, 0x02	; 2
    appNwkBuffer[i].req.dstEndpoint = APP_ENDPOINT;
     664:	88 83       	st	Y, r24
     666:	21 96       	adiw	r28, 0x01	; 1
    appNwkBuffer[i].req.srcEndpoint = APP_ENDPOINT;
     668:	88 83       	st	Y, r24
    appNwkBuffer[i].req.options = NWK_OPT_ACK_REQUEST;
     66a:	80 83       	st	Z, r24
     66c:	9f 01       	movw	r18, r30
     66e:	28 5f       	subi	r18, 0xF8	; 248
     670:	3f 4f       	sbci	r19, 0xFF	; 255
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
     672:	32 83       	std	Z+2, r19	; 0x02
     674:	21 83       	std	Z+1, r18	; 0x01
    appNwkBuffer[i].req.confirm = appNwkDataConf;
     676:	55 83       	std	Z+5, r21	; 0x05
     678:	44 83       	std	Z+4, r20	; 0x04
     67a:	af 57       	subi	r26, 0x7F	; 127
     67c:	bf 4f       	sbci	r27, 0xFF	; 255
     67e:	ef 57       	subi	r30, 0x7F	; 127
     680:	ff 4f       	sbci	r31, 0xFF	; 255
  PHY_SetChannel(appIb.channel);
  PHY_SetRxState(true);

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
     682:	e6 17       	cp	r30, r22
     684:	f7 07       	cpc	r31, r23
     686:	39 f7       	brne	.-50     	; 0x656 <APP_NwkInit+0x40>
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
    appNwkBuffer[i].req.confirm = appNwkDataConf;
  }

  //APP_CommandReport();
  pneOutgoingData();
     688:	0e 94 b8 1b 	call	0x3770	; 0x3770 <pneOutgoingData>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <APP_NwkGetBuffer>:
*****************************************************************************/
AppNwkBuffer_t *APP_NwkGetBuffer(void)
{
  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    if (false == appNwkBuffer[i].busy)
     692:	80 91 44 09 	lds	r24, 0x0944
     696:	88 23       	and	r24, r24
     698:	59 f0       	breq	.+22     	; 0x6b0 <APP_NwkGetBuffer+0x1e>
     69a:	e5 ec       	ldi	r30, 0xC5	; 197
     69c:	f9 e0       	ldi	r31, 0x09	; 9
     69e:	68 e5       	ldi	r22, 0x58	; 88
     6a0:	73 e1       	ldi	r23, 0x13	; 19
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	ac 01       	movw	r20, r24
     6a8:	20 81       	ld	r18, Z
     6aa:	21 11       	cpse	r18, r1
     6ac:	18 c0       	rjmp	.+48     	; 0x6de <APP_NwkGetBuffer+0x4c>
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <APP_NwkGetBuffer+0x22>
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
    {
      appNwkBuffer[i].busy = true;
     6b4:	fa 01       	movw	r30, r20
     6b6:	f6 95       	lsr	r31
     6b8:	fe 2f       	mov	r31, r30
     6ba:	ee 27       	eor	r30, r30
     6bc:	f7 95       	ror	r31
     6be:	e7 95       	ror	r30
     6c0:	4e 0f       	add	r20, r30
     6c2:	5f 1f       	adc	r21, r31
     6c4:	fa 01       	movw	r30, r20
     6c6:	ec 5b       	subi	r30, 0xBC	; 188
     6c8:	f6 4f       	sbci	r31, 0xF6	; 246
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 83       	st	Z, r24
      appNwkBuffer[i].size = 0;
     6ce:	df 01       	movw	r26, r30
     6d0:	a0 58       	subi	r26, 0x80	; 128
     6d2:	bf 4f       	sbci	r27, 0xFF	; 255
     6d4:	1c 92       	st	X, r1
      appNwkBuffer[i].retries = APP_NWK_RETRIES;
     6d6:	81 83       	std	Z+1, r24	; 0x01
      return &appNwkBuffer[i];
     6d8:	8e 2f       	mov	r24, r30
     6da:	9f 2f       	mov	r25, r31
     6dc:	08 95       	ret
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	ef 57       	subi	r30, 0x7F	; 127
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255

/*************************************************************************//**
*****************************************************************************/
AppNwkBuffer_t *APP_NwkGetBuffer(void)
{
  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
     6e4:	e6 17       	cp	r30, r22
     6e6:	f7 07       	cpc	r31, r23
     6e8:	f1 f6       	brne	.-68     	; 0x6a6 <APP_NwkGetBuffer+0x14>
      appNwkBuffer[i].retries = APP_NWK_RETRIES;
      return &appNwkBuffer[i];
    }
  }

  return NULL;
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
}
     6ee:	08 95       	ret

000006f0 <APP_NwkSendBuffer>:

/*************************************************************************//**
*****************************************************************************/
void APP_NwkSendBuffer(AppNwkBuffer_t *buf)
{
  if (buf->size)
     6f0:	fc 01       	movw	r30, r24
     6f2:	e0 58       	subi	r30, 0x80	; 128
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	20 81       	ld	r18, Z
     6f8:	22 23       	and	r18, r18
     6fa:	31 f0       	breq	.+12     	; 0x708 <APP_NwkSendBuffer+0x18>
  {
    buf->req.size = buf->size;
     6fc:	fc 01       	movw	r30, r24
     6fe:	26 87       	std	Z+14, r18	; 0x0e
    NWK_DataReq(&buf->req);
     700:	02 96       	adiw	r24, 0x02	; 2
     702:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <NWK_DataReq>
     706:	08 95       	ret
  }
  else
  {
    buf->busy = false;
     708:	fc 01       	movw	r30, r24
     70a:	10 82       	st	Z, r1
     70c:	08 95       	ret

0000070e <pneVerify_received>:
#include "PNE_Factory.h"
#include "crc.h"
#include "pneConfig.h"

uint8_t pneVerify_received(uint8_t *data, uint8_t size)
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
	uint16_t signature_d = (((uint16_t)data[size-2]) << 8) | ((uint16_t)data[size-1]);
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	9c 01       	movw	r18, r24
     716:	26 0f       	add	r18, r22
     718:	37 1f       	adc	r19, r23
     71a:	f9 01       	movw	r30, r18
     71c:	32 97       	sbiw	r30, 0x02	; 2
     71e:	c0 81       	ld	r28, Z
     720:	d0 e0       	ldi	r29, 0x00	; 0
     722:	dc 2f       	mov	r29, r28
     724:	cc 27       	eor	r28, r28
     726:	31 96       	adiw	r30, 0x01	; 1
     728:	20 81       	ld	r18, Z
     72a:	c2 2b       	or	r28, r18
// 	int_to_ascii((uint8_t)(signature_d >> 8));
// 	int_to_ascii((uint8_t)(signature_d));
// 	send_usart_char("\r\n");
	/*int_to_ascii(data[9]);*/
	uint16_t signature = pnesign(((char*)(data)), ((uint16_t)(size - 2)), SIGNATURE_KEY, strlen(SIGNATURE_KEY)); //need some rework
     72c:	62 50       	subi	r22, 0x02	; 2
     72e:	71 09       	sbc	r23, r1
     730:	26 e0       	ldi	r18, 0x06	; 6
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	48 e2       	ldi	r20, 0x28	; 40
     736:	52 e0       	ldi	r21, 0x02	; 2
     738:	0e 94 0d 4d 	call	0x9a1a	; 0x9a1a <pnesign>
// 	int_to_ascii((uint8_t)(signature >> 8));
// 	int_to_ascii((uint8_t)(signature));
// 	send_usart_char("\r\n");
	if (signature == signature_d )
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	c8 17       	cp	r28, r24
     740:	d9 07       	cpc	r29, r25
     742:	09 f0       	breq	.+2      	; 0x746 <pneVerify_received+0x38>
     744:	20 e0       	ldi	r18, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}
     746:	82 2f       	mov	r24, r18
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <twi_master_bus_reset>:
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 67 13 	sts	0x1367, r24
     754:	10 92 59 13 	sts	0x1359, r1
     758:	80 e9       	ldi	r24, 0x90	; 144
     75a:	80 93 bc 00 	sts	0x00BC, r24
     75e:	08 95       	ret

00000760 <twi_master_write>:
     760:	61 15       	cp	r22, r1
     762:	71 05       	cpc	r23, r1
     764:	29 f1       	breq	.+74     	; 0x7b0 <twi_master_write+0x50>
     766:	80 91 59 13 	lds	r24, 0x1359
     76a:	81 11       	cpse	r24, r1
     76c:	23 c0       	rjmp	.+70     	; 0x7b4 <twi_master_write+0x54>
     76e:	e1 e6       	ldi	r30, 0x61	; 97
     770:	f3 e1       	ldi	r31, 0x13	; 19
     772:	71 83       	std	Z+1, r23	; 0x01
     774:	60 83       	st	Z, r22
     776:	13 82       	std	Z+3, r1	; 0x03
     778:	12 82       	std	Z+2, r1	; 0x02
     77a:	15 82       	std	Z+5, r1	; 0x05
     77c:	14 82       	std	Z+4, r1	; 0x04
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	80 93 59 13 	sts	0x1359, r24
     784:	fb 01       	movw	r30, r22
     786:	84 81       	ldd	r24, Z+4	; 0x04
     788:	95 81       	ldd	r25, Z+5	; 0x05
     78a:	89 2b       	or	r24, r25
     78c:	21 f4       	brne	.+8      	; 0x796 <twi_master_write+0x36>
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	80 93 67 13 	sts	0x1367, r24
     794:	03 c0       	rjmp	.+6      	; 0x79c <twi_master_write+0x3c>
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	80 93 67 13 	sts	0x1367, r24
     79c:	85 ea       	ldi	r24, 0xA5	; 165
     79e:	80 93 bc 00 	sts	0x00BC, r24
     7a2:	80 91 59 13 	lds	r24, 0x1359
     7a6:	81 11       	cpse	r24, r1
     7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <twi_master_write+0x42>
     7aa:	80 91 68 13 	lds	r24, 0x1368
     7ae:	08 95       	ret
     7b0:	88 ef       	ldi	r24, 0xF8	; 248
     7b2:	08 95       	ret
     7b4:	80 e8       	ldi	r24, 0x80	; 128
     7b6:	08 95       	ret

000007b8 <twi_master_read>:
     7b8:	70 93 62 13 	sts	0x1362, r23
     7bc:	60 93 61 13 	sts	0x1361, r22
     7c0:	61 15       	cp	r22, r1
     7c2:	71 05       	cpc	r23, r1
     7c4:	41 f1       	breq	.+80     	; 0x816 <twi_master_read+0x5e>
     7c6:	fb 01       	movw	r30, r22
     7c8:	80 85       	ldd	r24, Z+8	; 0x08
     7ca:	91 85       	ldd	r25, Z+9	; 0x09
     7cc:	89 2b       	or	r24, r25
     7ce:	29 f1       	breq	.+74     	; 0x81a <twi_master_read+0x62>
     7d0:	80 91 59 13 	lds	r24, 0x1359
     7d4:	81 11       	cpse	r24, r1
     7d6:	23 c0       	rjmp	.+70     	; 0x81e <twi_master_read+0x66>
     7d8:	e1 e6       	ldi	r30, 0x61	; 97
     7da:	f3 e1       	ldi	r31, 0x13	; 19
     7dc:	13 82       	std	Z+3, r1	; 0x03
     7de:	12 82       	std	Z+2, r1	; 0x02
     7e0:	15 82       	std	Z+5, r1	; 0x05
     7e2:	14 82       	std	Z+4, r1	; 0x04
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 59 13 	sts	0x1359, r24
     7ea:	fb 01       	movw	r30, r22
     7ec:	84 81       	ldd	r24, Z+4	; 0x04
     7ee:	95 81       	ldd	r25, Z+5	; 0x05
     7f0:	89 2b       	or	r24, r25
     7f2:	21 f4       	brne	.+8      	; 0x7fc <twi_master_read+0x44>
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	80 93 67 13 	sts	0x1367, r24
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <twi_master_read+0x4a>
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	80 93 67 13 	sts	0x1367, r24
     802:	85 ea       	ldi	r24, 0xA5	; 165
     804:	80 93 bc 00 	sts	0x00BC, r24
     808:	80 91 59 13 	lds	r24, 0x1359
     80c:	81 11       	cpse	r24, r1
     80e:	fc cf       	rjmp	.-8      	; 0x808 <twi_master_read+0x50>
     810:	80 91 68 13 	lds	r24, 0x1368
     814:	08 95       	ret
     816:	88 ef       	ldi	r24, 0xF8	; 248
     818:	08 95       	ret
     81a:	88 ef       	ldi	r24, 0xF8	; 248
     81c:	08 95       	ret
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	08 95       	ret

00000822 <twi_master_init>:
     822:	f8 94       	cli
     824:	ec eb       	ldi	r30, 0xBC	; 188
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	10 82       	st	Z, r1
     82a:	10 92 b9 00 	sts	0x00B9, r1
     82e:	db 01       	movw	r26, r22
     830:	14 96       	adiw	r26, 0x04	; 4
     832:	8c 91       	ld	r24, X
     834:	80 93 b8 00 	sts	0x00B8, r24
     838:	80 81       	ld	r24, Z
     83a:	81 60       	ori	r24, 0x01	; 1
     83c:	80 83       	st	Z, r24
     83e:	78 94       	sei
     840:	10 92 58 13 	sts	0x1358, r1
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	08 95       	ret

00000848 <__vector_39>:
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	0b b6       	in	r0, 0x3b	; 59
     854:	0f 92       	push	r0
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
     86e:	80 91 b9 00 	lds	r24, 0x00B9
     872:	88 7f       	andi	r24, 0xF8	; 248
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	89 3c       	cpi	r24, 0xC9	; 201
     878:	91 05       	cpc	r25, r1
     87a:	08 f0       	brcs	.+2      	; 0x87e <__vector_39+0x36>
     87c:	8c c1       	rjmp	.+792    	; 0xb96 <__vector_39+0x34e>
     87e:	fc 01       	movw	r30, r24
     880:	88 27       	eor	r24, r24
     882:	e6 56       	subi	r30, 0x66	; 102
     884:	ff 4f       	sbci	r31, 0xFF	; 255
     886:	8f 4f       	sbci	r24, 0xFF	; 255
     888:	0c 94 71 4d 	jmp	0x9ae2	; 0x9ae2 <__tablejump2__>
     88c:	80 91 67 13 	lds	r24, 0x1367
     890:	9e ef       	ldi	r25, 0xFE	; 254
     892:	98 0f       	add	r25, r24
     894:	93 30       	cpi	r25, 0x03	; 3
     896:	60 f4       	brcc	.+24     	; 0x8b0 <__vector_39+0x68>
     898:	e0 91 61 13 	lds	r30, 0x1361
     89c:	f0 91 62 13 	lds	r31, 0x1362
     8a0:	80 81       	ld	r24, Z
     8a2:	8e 7f       	andi	r24, 0xFE	; 254
     8a4:	80 93 bb 00 	sts	0x00BB, r24
     8a8:	85 e8       	ldi	r24, 0x85	; 133
     8aa:	80 93 bc 00 	sts	0x00BC, r24
     8ae:	8b c1       	rjmp	.+790    	; 0xbc6 <__vector_39+0x37e>
     8b0:	85 30       	cpi	r24, 0x05	; 5
     8b2:	61 f4       	brne	.+24     	; 0x8cc <__vector_39+0x84>
     8b4:	e0 91 61 13 	lds	r30, 0x1361
     8b8:	f0 91 62 13 	lds	r31, 0x1362
     8bc:	80 81       	ld	r24, Z
     8be:	81 60       	ori	r24, 0x01	; 1
     8c0:	80 93 bb 00 	sts	0x00BB, r24
     8c4:	85 e8       	ldi	r24, 0x85	; 133
     8c6:	80 93 bc 00 	sts	0x00BC, r24
     8ca:	7d c1       	rjmp	.+762    	; 0xbc6 <__vector_39+0x37e>
     8cc:	40 df       	rcall	.-384    	; 0x74e <twi_master_bus_reset>
     8ce:	8b ef       	ldi	r24, 0xFB	; 251
     8d0:	80 93 68 13 	sts	0x1368, r24
     8d4:	78 c1       	rjmp	.+752    	; 0xbc6 <__vector_39+0x37e>
     8d6:	80 91 67 13 	lds	r24, 0x1367
     8da:	84 30       	cpi	r24, 0x04	; 4
     8dc:	51 f5       	brne	.+84     	; 0x932 <__vector_39+0xea>
     8de:	e1 e6       	ldi	r30, 0x61	; 97
     8e0:	f3 e1       	ldi	r31, 0x13	; 19
     8e2:	84 81       	ldd	r24, Z+4	; 0x04
     8e4:	95 81       	ldd	r25, Z+5	; 0x05
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
     8ec:	20 85       	ldd	r18, Z+8	; 0x08
     8ee:	31 85       	ldd	r19, Z+9	; 0x09
     8f0:	82 17       	cp	r24, r18
     8f2:	93 07       	cpc	r25, r19
     8f4:	98 f4       	brcc	.+38     	; 0x91c <__vector_39+0xd4>
     8f6:	26 81       	ldd	r18, Z+6	; 0x06
     8f8:	37 81       	ldd	r19, Z+7	; 0x07
     8fa:	ac 01       	movw	r20, r24
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	50 93 66 13 	sts	0x1366, r21
     904:	40 93 65 13 	sts	0x1365, r20
     908:	f9 01       	movw	r30, r18
     90a:	e8 0f       	add	r30, r24
     90c:	f9 1f       	adc	r31, r25
     90e:	80 81       	ld	r24, Z
     910:	80 93 bb 00 	sts	0x00BB, r24
     914:	85 e8       	ldi	r24, 0x85	; 133
     916:	80 93 bc 00 	sts	0x00BC, r24
     91a:	55 c1       	rjmp	.+682    	; 0xbc6 <__vector_39+0x37e>
     91c:	84 e9       	ldi	r24, 0x94	; 148
     91e:	80 93 bc 00 	sts	0x00BC, r24
     922:	e1 e6       	ldi	r30, 0x61	; 97
     924:	f3 e1       	ldi	r31, 0x13	; 19
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	86 83       	std	Z+6, r24	; 0x06
     92a:	17 82       	std	Z+7, r1	; 0x07
     92c:	10 92 59 13 	sts	0x1359, r1
     930:	4a c1       	rjmp	.+660    	; 0xbc6 <__vector_39+0x37e>
     932:	9e ef       	ldi	r25, 0xFE	; 254
     934:	98 0f       	add	r25, r24
     936:	92 30       	cpi	r25, 0x02	; 2
     938:	38 f5       	brcc	.+78     	; 0x988 <__vector_39+0x140>
     93a:	e1 e6       	ldi	r30, 0x61	; 97
     93c:	f3 e1       	ldi	r31, 0x13	; 19
     93e:	82 81       	ldd	r24, Z+2	; 0x02
     940:	93 81       	ldd	r25, Z+3	; 0x03
     942:	a0 81       	ld	r26, Z
     944:	b1 81       	ldd	r27, Z+1	; 0x01
     946:	a8 0f       	add	r26, r24
     948:	b9 1f       	adc	r27, r25
     94a:	11 96       	adiw	r26, 0x01	; 1
     94c:	2c 91       	ld	r18, X
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	93 83       	std	Z+3, r25	; 0x03
     952:	82 83       	std	Z+2, r24	; 0x02
     954:	20 93 bb 00 	sts	0x00BB, r18
     958:	25 e8       	ldi	r18, 0x85	; 133
     95a:	20 93 bc 00 	sts	0x00BC, r18
     95e:	01 90       	ld	r0, Z+
     960:	f0 81       	ld	r31, Z
     962:	e0 2d       	mov	r30, r0
     964:	24 81       	ldd	r18, Z+4	; 0x04
     966:	35 81       	ldd	r19, Z+5	; 0x05
     968:	28 17       	cp	r18, r24
     96a:	39 07       	cpc	r19, r25
     96c:	09 f0       	breq	.+2      	; 0x970 <__vector_39+0x128>
     96e:	2b c1       	rjmp	.+598    	; 0xbc6 <__vector_39+0x37e>
     970:	80 91 67 13 	lds	r24, 0x1367
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	21 f4       	brne	.+8      	; 0x980 <__vector_39+0x138>
     978:	84 e0       	ldi	r24, 0x04	; 4
     97a:	80 93 67 13 	sts	0x1367, r24
     97e:	23 c1       	rjmp	.+582    	; 0xbc6 <__vector_39+0x37e>
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	80 93 67 13 	sts	0x1367, r24
     986:	1f c1       	rjmp	.+574    	; 0xbc6 <__vector_39+0x37e>
     988:	85 30       	cpi	r24, 0x05	; 5
     98a:	21 f4       	brne	.+8      	; 0x994 <__vector_39+0x14c>
     98c:	85 ea       	ldi	r24, 0xA5	; 165
     98e:	80 93 bc 00 	sts	0x00BC, r24
     992:	19 c1       	rjmp	.+562    	; 0xbc6 <__vector_39+0x37e>
     994:	dc de       	rcall	.-584    	; 0x74e <twi_master_bus_reset>
     996:	8b ef       	ldi	r24, 0xFB	; 251
     998:	80 93 68 13 	sts	0x1368, r24
     99c:	14 c1       	rjmp	.+552    	; 0xbc6 <__vector_39+0x37e>
     99e:	d7 de       	rcall	.-594    	; 0x74e <twi_master_bus_reset>
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	80 93 68 13 	sts	0x1368, r24
     9a6:	0f c1       	rjmp	.+542    	; 0xbc6 <__vector_39+0x37e>
     9a8:	80 91 67 13 	lds	r24, 0x1367
     9ac:	85 30       	cpi	r24, 0x05	; 5
     9ae:	01 f5       	brne	.+64     	; 0x9f0 <__vector_39+0x1a8>
     9b0:	e1 e6       	ldi	r30, 0x61	; 97
     9b2:	f3 e1       	ldi	r31, 0x13	; 19
     9b4:	a0 81       	ld	r26, Z
     9b6:	b1 81       	ldd	r27, Z+1	; 0x01
     9b8:	18 96       	adiw	r26, 0x08	; 8
     9ba:	8d 91       	ld	r24, X+
     9bc:	9c 91       	ld	r25, X
     9be:	19 97       	sbiw	r26, 0x09	; 9
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	24 81       	ldd	r18, Z+4	; 0x04
     9c4:	35 81       	ldd	r19, Z+5	; 0x05
     9c6:	28 17       	cp	r18, r24
     9c8:	39 07       	cpc	r19, r25
     9ca:	49 f4       	brne	.+18     	; 0x9de <__vector_39+0x196>
     9cc:	ec eb       	ldi	r30, 0xBC	; 188
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	8f 7b       	andi	r24, 0xBF	; 191
     9d4:	80 83       	st	Z, r24
     9d6:	80 81       	ld	r24, Z
     9d8:	85 68       	ori	r24, 0x85	; 133
     9da:	80 83       	st	Z, r24
     9dc:	f4 c0       	rjmp	.+488    	; 0xbc6 <__vector_39+0x37e>
     9de:	ec eb       	ldi	r30, 0xBC	; 188
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	80 64       	ori	r24, 0x40	; 64
     9e6:	80 83       	st	Z, r24
     9e8:	80 81       	ld	r24, Z
     9ea:	85 68       	ori	r24, 0x85	; 133
     9ec:	80 83       	st	Z, r24
     9ee:	eb c0       	rjmp	.+470    	; 0xbc6 <__vector_39+0x37e>
     9f0:	ae de       	rcall	.-676    	; 0x74e <twi_master_bus_reset>
     9f2:	8b ef       	ldi	r24, 0xFB	; 251
     9f4:	80 93 68 13 	sts	0x1368, r24
     9f8:	e6 c0       	rjmp	.+460    	; 0xbc6 <__vector_39+0x37e>
     9fa:	20 91 bb 00 	lds	r18, 0x00BB
     9fe:	80 91 67 13 	lds	r24, 0x1367
     a02:	85 30       	cpi	r24, 0x05	; 5
     a04:	69 f5       	brne	.+90     	; 0xa60 <__vector_39+0x218>
     a06:	e1 e6       	ldi	r30, 0x61	; 97
     a08:	f3 e1       	ldi	r31, 0x13	; 19
     a0a:	a0 81       	ld	r26, Z
     a0c:	b1 81       	ldd	r27, Z+1	; 0x01
     a0e:	16 96       	adiw	r26, 0x06	; 6
     a10:	6d 91       	ld	r22, X+
     a12:	7c 91       	ld	r23, X
     a14:	17 97       	sbiw	r26, 0x07	; 7
     a16:	84 81       	ldd	r24, Z+4	; 0x04
     a18:	95 81       	ldd	r25, Z+5	; 0x05
     a1a:	ac 01       	movw	r20, r24
     a1c:	4f 5f       	subi	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	55 83       	std	Z+5, r21	; 0x05
     a22:	44 83       	std	Z+4, r20	; 0x04
     a24:	fb 01       	movw	r30, r22
     a26:	e8 0f       	add	r30, r24
     a28:	f9 1f       	adc	r31, r25
     a2a:	20 83       	st	Z, r18
     a2c:	18 96       	adiw	r26, 0x08	; 8
     a2e:	8d 91       	ld	r24, X+
     a30:	9c 91       	ld	r25, X
     a32:	19 97       	sbiw	r26, 0x09	; 9
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	48 17       	cp	r20, r24
     a38:	59 07       	cpc	r21, r25
     a3a:	48 f4       	brcc	.+18     	; 0xa4e <__vector_39+0x206>
     a3c:	ec eb       	ldi	r30, 0xBC	; 188
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	80 64       	ori	r24, 0x40	; 64
     a44:	80 83       	st	Z, r24
     a46:	80 81       	ld	r24, Z
     a48:	85 68       	ori	r24, 0x85	; 133
     a4a:	80 83       	st	Z, r24
     a4c:	bc c0       	rjmp	.+376    	; 0xbc6 <__vector_39+0x37e>
     a4e:	ec eb       	ldi	r30, 0xBC	; 188
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	8f 7b       	andi	r24, 0xBF	; 191
     a56:	80 83       	st	Z, r24
     a58:	80 81       	ld	r24, Z
     a5a:	85 68       	ori	r24, 0x85	; 133
     a5c:	80 83       	st	Z, r24
     a5e:	b3 c0       	rjmp	.+358    	; 0xbc6 <__vector_39+0x37e>
     a60:	76 de       	rcall	.-788    	; 0x74e <twi_master_bus_reset>
     a62:	8b ef       	ldi	r24, 0xFB	; 251
     a64:	80 93 68 13 	sts	0x1368, r24
     a68:	ae c0       	rjmp	.+348    	; 0xbc6 <__vector_39+0x37e>
     a6a:	20 91 bb 00 	lds	r18, 0x00BB
     a6e:	80 91 67 13 	lds	r24, 0x1367
     a72:	85 30       	cpi	r24, 0x05	; 5
     a74:	e1 f4       	brne	.+56     	; 0xaae <__vector_39+0x266>
     a76:	e1 e6       	ldi	r30, 0x61	; 97
     a78:	f3 e1       	ldi	r31, 0x13	; 19
     a7a:	a0 81       	ld	r26, Z
     a7c:	b1 81       	ldd	r27, Z+1	; 0x01
     a7e:	16 96       	adiw	r26, 0x06	; 6
     a80:	4d 91       	ld	r20, X+
     a82:	5c 91       	ld	r21, X
     a84:	17 97       	sbiw	r26, 0x07	; 7
     a86:	84 81       	ldd	r24, Z+4	; 0x04
     a88:	95 81       	ldd	r25, Z+5	; 0x05
     a8a:	bc 01       	movw	r22, r24
     a8c:	6f 5f       	subi	r22, 0xFF	; 255
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	75 83       	std	Z+5, r23	; 0x05
     a92:	64 83       	std	Z+4, r22	; 0x04
     a94:	da 01       	movw	r26, r20
     a96:	a8 0f       	add	r26, r24
     a98:	b9 1f       	adc	r27, r25
     a9a:	2c 93       	st	X, r18
     a9c:	84 e9       	ldi	r24, 0x94	; 148
     a9e:	80 93 bc 00 	sts	0x00BC, r24
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	86 83       	std	Z+6, r24	; 0x06
     aa6:	17 82       	std	Z+7, r1	; 0x07
     aa8:	10 92 59 13 	sts	0x1359, r1
     aac:	8c c0       	rjmp	.+280    	; 0xbc6 <__vector_39+0x37e>
     aae:	4f de       	rcall	.-866    	; 0x74e <twi_master_bus_reset>
     ab0:	8b ef       	ldi	r24, 0xFB	; 251
     ab2:	80 93 68 13 	sts	0x1368, r24
     ab6:	87 c0       	rjmp	.+270    	; 0xbc6 <__vector_39+0x37e>
     ab8:	e1 e6       	ldi	r30, 0x61	; 97
     aba:	f3 e1       	ldi	r31, 0x13	; 19
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	86 83       	std	Z+6, r24	; 0x06
     ac0:	86 ef       	ldi	r24, 0xF6	; 246
     ac2:	87 83       	std	Z+7, r24	; 0x07
     ac4:	10 92 59 13 	sts	0x1359, r1
     ac8:	7e c0       	rjmp	.+252    	; 0xbc6 <__vector_39+0x37e>
     aca:	10 92 5d 13 	sts	0x135D, r1
     ace:	10 92 5c 13 	sts	0x135C, r1
     ad2:	ea e5       	ldi	r30, 0x5A	; 90
     ad4:	f3 e1       	ldi	r31, 0x13	; 19
     ad6:	a0 81       	ld	r26, Z
     ad8:	b1 81       	ldd	r27, Z+1	; 0x01
     ada:	12 96       	adiw	r26, 0x02	; 2
     adc:	2d 91       	ld	r18, X+
     ade:	3c 91       	ld	r19, X
     ae0:	13 97       	sbiw	r26, 0x03	; 3
     ae2:	82 81       	ldd	r24, Z+2	; 0x02
     ae4:	93 81       	ldd	r25, Z+3	; 0x03
     ae6:	ac 01       	movw	r20, r24
     ae8:	4f 5f       	subi	r20, 0xFF	; 255
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	53 83       	std	Z+3, r21	; 0x03
     aee:	42 83       	std	Z+2, r20	; 0x02
     af0:	d9 01       	movw	r26, r18
     af2:	a8 0f       	add	r26, r24
     af4:	b9 1f       	adc	r27, r25
     af6:	8c 91       	ld	r24, X
     af8:	80 93 bb 00 	sts	0x00BB, r24
     afc:	85 ec       	ldi	r24, 0xC5	; 197
     afe:	80 93 bc 00 	sts	0x00BC, r24
     b02:	88 e0       	ldi	r24, 0x08	; 8
     b04:	84 83       	std	Z+4, r24	; 0x04
     b06:	5f c0       	rjmp	.+190    	; 0xbc6 <__vector_39+0x37e>
     b08:	ea e5       	ldi	r30, 0x5A	; 90
     b0a:	f3 e1       	ldi	r31, 0x13	; 19
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	84 83       	std	Z+4, r24	; 0x04
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	96 83       	std	Z+6, r25	; 0x06
     b16:	85 83       	std	Z+5, r24	; 0x05
     b18:	85 ec       	ldi	r24, 0xC5	; 197
     b1a:	80 93 bc 00 	sts	0x00BC, r24
     b1e:	53 c0       	rjmp	.+166    	; 0xbc6 <__vector_39+0x37e>
     b20:	ea e5       	ldi	r30, 0x5A	; 90
     b22:	f3 e1       	ldi	r31, 0x13	; 19
     b24:	13 82       	std	Z+3, r1	; 0x03
     b26:	12 82       	std	Z+2, r1	; 0x02
     b28:	85 ec       	ldi	r24, 0xC5	; 197
     b2a:	80 93 bc 00 	sts	0x00BC, r24
     b2e:	88 e0       	ldi	r24, 0x08	; 8
     b30:	84 83       	std	Z+4, r24	; 0x04
     b32:	49 c0       	rjmp	.+146    	; 0xbc6 <__vector_39+0x37e>
     b34:	20 91 bb 00 	lds	r18, 0x00BB
     b38:	ea e5       	ldi	r30, 0x5A	; 90
     b3a:	f3 e1       	ldi	r31, 0x13	; 19
     b3c:	a0 81       	ld	r26, Z
     b3e:	b1 81       	ldd	r27, Z+1	; 0x01
     b40:	4d 91       	ld	r20, X+
     b42:	5c 91       	ld	r21, X
     b44:	82 81       	ldd	r24, Z+2	; 0x02
     b46:	93 81       	ldd	r25, Z+3	; 0x03
     b48:	bc 01       	movw	r22, r24
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	73 83       	std	Z+3, r23	; 0x03
     b50:	62 83       	std	Z+2, r22	; 0x02
     b52:	da 01       	movw	r26, r20
     b54:	a8 0f       	add	r26, r24
     b56:	b9 1f       	adc	r27, r25
     b58:	2c 93       	st	X, r18
     b5a:	85 ec       	ldi	r24, 0xC5	; 197
     b5c:	80 93 bc 00 	sts	0x00BC, r24
     b60:	88 e0       	ldi	r24, 0x08	; 8
     b62:	84 83       	std	Z+4, r24	; 0x04
     b64:	30 c0       	rjmp	.+96     	; 0xbc6 <__vector_39+0x37e>
     b66:	ea e5       	ldi	r30, 0x5A	; 90
     b68:	f3 e1       	ldi	r31, 0x13	; 19
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	84 83       	std	Z+4, r24	; 0x04
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	96 83       	std	Z+6, r25	; 0x06
     b74:	85 83       	std	Z+5, r24	; 0x05
     b76:	85 ec       	ldi	r24, 0xC5	; 197
     b78:	80 93 bc 00 	sts	0x00BC, r24
     b7c:	24 c0       	rjmp	.+72     	; 0xbc6 <__vector_39+0x37e>
     b7e:	ea e5       	ldi	r30, 0x5A	; 90
     b80:	f3 e1       	ldi	r31, 0x13	; 19
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	84 83       	std	Z+4, r24	; 0x04
     b86:	80 e9       	ldi	r24, 0x90	; 144
     b88:	80 93 bc 00 	sts	0x00BC, r24
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	9f ef       	ldi	r25, 0xFF	; 255
     b90:	96 83       	std	Z+6, r25	; 0x06
     b92:	85 83       	std	Z+5, r24	; 0x05
     b94:	18 c0       	rjmp	.+48     	; 0xbc6 <__vector_39+0x37e>
     b96:	80 91 58 13 	lds	r24, 0x1358
     b9a:	81 11       	cpse	r24, r1
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <__vector_39+0x368>
     b9e:	e1 e6       	ldi	r30, 0x61	; 97
     ba0:	f3 e1       	ldi	r31, 0x13	; 19
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	86 83       	std	Z+6, r24	; 0x06
     ba6:	8b ef       	ldi	r24, 0xFB	; 251
     ba8:	87 83       	std	Z+7, r24	; 0x07
     baa:	10 92 59 13 	sts	0x1359, r1
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <__vector_39+0x37e>
     bb0:	ea e5       	ldi	r30, 0x5A	; 90
     bb2:	f3 e1       	ldi	r31, 0x13	; 19
     bb4:	8e ef       	ldi	r24, 0xFE	; 254
     bb6:	9f ef       	ldi	r25, 0xFF	; 255
     bb8:	96 83       	std	Z+6, r25	; 0x06
     bba:	85 83       	std	Z+5, r24	; 0x05
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	84 83       	std	Z+4, r24	; 0x04
     bc0:	85 ec       	ldi	r24, 0xC5	; 197
     bc2:	80 93 bc 00 	sts	0x00BC, r24
     bc6:	ff 91       	pop	r31
     bc8:	ef 91       	pop	r30
     bca:	bf 91       	pop	r27
     bcc:	af 91       	pop	r26
     bce:	9f 91       	pop	r25
     bd0:	8f 91       	pop	r24
     bd2:	7f 91       	pop	r23
     bd4:	6f 91       	pop	r22
     bd6:	5f 91       	pop	r21
     bd8:	4f 91       	pop	r20
     bda:	3f 91       	pop	r19
     bdc:	2f 91       	pop	r18
     bde:	0f 90       	pop	r0
     be0:	0b be       	out	0x3b, r0	; 59
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	0f 90       	pop	r0
     be8:	1f 90       	pop	r1
     bea:	18 95       	reti

00000bec <usart_putchar>:
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	8c 01       	movw	r16, r24
     bf6:	d6 2f       	mov	r29, r22
     bf8:	ca e0       	ldi	r28, 0x0A	; 10
     bfa:	0a c0       	rjmp	.+20     	; 0xc10 <usart_putchar+0x24>
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 30 21 	call	0x4260	; 0x4260 <pne_delayms>
     c04:	c1 50       	subi	r28, 0x01	; 1
     c06:	21 f4       	brne	.+8      	; 0xc10 <usart_putchar+0x24>
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <fatal_error_to_rf>
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <usart_putchar+0x2c>
     c10:	f8 01       	movw	r30, r16
     c12:	90 81       	ld	r25, Z
     c14:	95 ff       	sbrs	r25, 5
     c16:	f2 cf       	rjmp	.-28     	; 0xbfc <usart_putchar+0x10>
     c18:	f8 01       	movw	r30, r16
     c1a:	d6 83       	std	Z+6, r29	; 0x06
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <usart_set_baudrate>:
     c28:	8f 92       	push	r8
     c2a:	9f 92       	push	r9
     c2c:	af 92       	push	r10
     c2e:	bf 92       	push	r11
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
     c42:	6a 01       	movw	r12, r20
     c44:	7b 01       	movw	r14, r22
     c46:	b9 01       	movw	r22, r18
     c48:	a8 01       	movw	r20, r16
     c4a:	68 94       	set
     c4c:	12 f8       	bld	r1, 2
     c4e:	76 95       	lsr	r23
     c50:	67 95       	ror	r22
     c52:	57 95       	ror	r21
     c54:	47 95       	ror	r20
     c56:	16 94       	lsr	r1
     c58:	d1 f7       	brne	.-12     	; 0xc4e <usart_set_baudrate+0x26>
     c5a:	d9 01       	movw	r26, r18
     c5c:	c8 01       	movw	r24, r16
     c5e:	07 2e       	mov	r0, r23
     c60:	73 e1       	ldi	r23, 0x13	; 19
     c62:	b6 95       	lsr	r27
     c64:	a7 95       	ror	r26
     c66:	97 95       	ror	r25
     c68:	87 95       	ror	r24
     c6a:	7a 95       	dec	r23
     c6c:	d1 f7       	brne	.-12     	; 0xc62 <usart_set_baudrate+0x3a>
     c6e:	70 2d       	mov	r23, r0
     c70:	e8 81       	ld	r30, Y
     c72:	e1 ff       	sbrs	r30, 1
     c74:	0b c0       	rjmp	.+22     	; 0xc8c <usart_set_baudrate+0x64>
     c76:	4a 01       	movw	r8, r20
     c78:	5b 01       	movw	r10, r22
     c7a:	b6 94       	lsr	r11
     c7c:	a7 94       	ror	r10
     c7e:	97 94       	ror	r9
     c80:	87 94       	ror	r8
     c82:	b6 95       	lsr	r27
     c84:	a7 95       	ror	r26
     c86:	97 95       	ror	r25
     c88:	87 95       	ror	r24
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <usart_set_baudrate+0x68>
     c8c:	4a 01       	movw	r8, r20
     c8e:	5b 01       	movw	r10, r22
     c90:	8c 14       	cp	r8, r12
     c92:	9d 04       	cpc	r9, r13
     c94:	ae 04       	cpc	r10, r14
     c96:	bf 04       	cpc	r11, r15
     c98:	78 f1       	brcs	.+94     	; 0xcf8 <usart_set_baudrate+0xd0>
     c9a:	c8 16       	cp	r12, r24
     c9c:	d9 06       	cpc	r13, r25
     c9e:	ea 06       	cpc	r14, r26
     ca0:	fb 06       	cpc	r15, r27
     ca2:	60 f1       	brcs	.+88     	; 0xcfc <usart_set_baudrate+0xd4>
     ca4:	88 81       	ld	r24, Y
     ca6:	81 ff       	sbrs	r24, 1
     ca8:	10 c0       	rjmp	.+32     	; 0xcca <usart_set_baudrate+0xa2>
     caa:	cc 0c       	add	r12, r12
     cac:	dd 1c       	adc	r13, r13
     cae:	ee 1c       	adc	r14, r14
     cb0:	ff 1c       	adc	r15, r15
     cb2:	cb 01       	movw	r24, r22
     cb4:	ba 01       	movw	r22, r20
     cb6:	a7 01       	movw	r20, r14
     cb8:	96 01       	movw	r18, r12
     cba:	0e 94 4f 4d 	call	0x9a9e	; 0x9a9e <__udivmodsi4>
     cbe:	da 01       	movw	r26, r20
     cc0:	c9 01       	movw	r24, r18
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	a1 09       	sbc	r26, r1
     cc6:	b1 09       	sbc	r27, r1
     cc8:	13 c0       	rjmp	.+38     	; 0xcf0 <usart_set_baudrate+0xc8>
     cca:	c9 01       	movw	r24, r18
     ccc:	b8 01       	movw	r22, r16
     cce:	68 94       	set
     cd0:	13 f8       	bld	r1, 3
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	77 95       	ror	r23
     cd8:	67 95       	ror	r22
     cda:	16 94       	lsr	r1
     cdc:	d1 f7       	brne	.-12     	; 0xcd2 <usart_set_baudrate+0xaa>
     cde:	a7 01       	movw	r20, r14
     ce0:	96 01       	movw	r18, r12
     ce2:	0e 94 4f 4d 	call	0x9a9e	; 0x9a9e <__udivmodsi4>
     ce6:	da 01       	movw	r26, r20
     ce8:	c9 01       	movw	r24, r18
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	a1 09       	sbc	r26, r1
     cee:	b1 09       	sbc	r27, r1
     cf0:	9d 83       	std	Y+5, r25	; 0x05
     cf2:	8c 83       	std	Y+4, r24	; 0x04
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <usart_set_baudrate+0xd6>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <usart_set_baudrate+0xd6>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	9f 90       	pop	r9
     d14:	8f 90       	pop	r8
     d16:	08 95       	ret

00000d18 <usart_init_rs232>:
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	ec 01       	movw	r28, r24
     d22:	fb 01       	movw	r30, r22
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	8f 73       	andi	r24, 0x3F	; 63
     d28:	8a 83       	std	Y+2, r24	; 0x02
     d2a:	26 81       	ldd	r18, Z+6	; 0x06
     d2c:	35 81       	ldd	r19, Z+5	; 0x05
     d2e:	84 81       	ldd	r24, Z+4	; 0x04
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	48 2f       	mov	r20, r24
     d34:	43 70       	andi	r20, 0x03	; 3
     d36:	44 0f       	add	r20, r20
     d38:	99 7f       	andi	r25, 0xF9	; 249
     d3a:	94 2b       	or	r25, r20
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	99 81       	ldd	r25, Y+1	; 0x01
     d40:	84 70       	andi	r24, 0x04	; 4
     d42:	88 0f       	add	r24, r24
     d44:	88 0f       	add	r24, r24
     d46:	9b 7f       	andi	r25, 0xFB	; 251
     d48:	89 2b       	or	r24, r25
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	8f 7c       	andi	r24, 0xCF	; 207
     d50:	83 2b       	or	r24, r19
     d52:	8a 83       	std	Y+2, r24	; 0x02
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	92 2f       	mov	r25, r18
     d58:	99 0f       	add	r25, r25
     d5a:	99 0f       	add	r25, r25
     d5c:	99 0f       	add	r25, r25
     d5e:	87 7f       	andi	r24, 0xF7	; 247
     d60:	89 2b       	or	r24, r25
     d62:	8a 83       	std	Y+2, r24	; 0x02
     d64:	40 81       	ld	r20, Z
     d66:	51 81       	ldd	r21, Z+1	; 0x01
     d68:	62 81       	ldd	r22, Z+2	; 0x02
     d6a:	73 81       	ldd	r23, Z+3	; 0x03
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	12 e1       	ldi	r17, 0x12	; 18
     d70:	2a e7       	ldi	r18, 0x7A	; 122
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	ce 01       	movw	r24, r28
     d76:	58 df       	rcall	.-336    	; 0xc28 <usart_set_baudrate>
     d78:	99 81       	ldd	r25, Y+1	; 0x01
     d7a:	98 60       	ori	r25, 0x08	; 8
     d7c:	99 83       	std	Y+1, r25	; 0x01
     d7e:	99 81       	ldd	r25, Y+1	; 0x01
     d80:	90 61       	ori	r25, 0x10	; 16
     d82:	99 83       	std	Y+1, r25	; 0x01
     d84:	99 81       	ldd	r25, Y+1	; 0x01
     d86:	90 68       	ori	r25, 0x80	; 128
     d88:	99 83       	std	Y+1, r25	; 0x01
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <__vector_36>:
     d94:	1f 92       	push	r1
     d96:	0f 92       	push	r0
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	0b b6       	in	r0, 0x3b	; 59
     da0:	0f 92       	push	r0
     da2:	2f 93       	push	r18
     da4:	3f 93       	push	r19
     da6:	4f 93       	push	r20
     da8:	5f 93       	push	r21
     daa:	6f 93       	push	r22
     dac:	7f 93       	push	r23
     dae:	8f 93       	push	r24
     db0:	9f 93       	push	r25
     db2:	af 93       	push	r26
     db4:	bf 93       	push	r27
     db6:	ef 93       	push	r30
     db8:	ff 93       	push	r31
     dba:	80 91 ce 00 	lds	r24, 0x00CE
     dbe:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <pnewels_get_usart>
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0b be       	out	0x3b, r0	; 59
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <appUpdateTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
static void appUpdateTimerHandler(SYS_Timer_t *timer)
{
  //APP_CommandReport();
  if(wps_send_flag == 1)
     de8:	80 91 88 22 	lds	r24, 0x2288
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	21 f4       	brne	.+8      	; 0xdf8 <appUpdateTimerHandler+0x10>
  {
	status_report_flag = 1;
     df0:	80 93 ef 22 	sts	0x22EF, r24
	data_update_flag = 1;
     df4:	80 93 89 22 	sts	0x2289, r24
     df8:	08 95       	ret

00000dfa <WDT_Init>:

/*************************************************************************//**
*****************************************************************************/
void WDT_Init(void)
{	
	cli();
     dfa:	f8 94       	cli
	wdt_reset();
     dfc:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     dfe:	99 e2       	ldi	r25, 0x29	; 41
     e00:	88 e1       	ldi	r24, 0x18	; 24
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	a8 95       	wdr
     e08:	80 93 60 00 	sts	0x0060, r24
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_8S);
	//WDTCSR = (1<<WDCE)|(1<<WDE);
	sei();
     e12:	78 94       	sei
     e14:	08 95       	ret

00000e16 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
  SYS_Init();
     e16:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SYS_Init>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  factory_initialization();
     e1a:	0e 94 cf 20 	call	0x419e	; 0x419e <factory_initialization>
  APP_IbLoadSettings();
     e1e:	c9 da       	rcall	.-2670   	; 0x3b2 <APP_IbLoadSettings>
  APP_NwkInit();  
     e20:	fa db       	rcall	.-2060   	; 0x616 <APP_NwkInit>

/*************************************************************************//**
*****************************************************************************/
static void appStartUpdateTimer(void)
{
  appUpdateTimer.interval = APP_UPDATE_INTERVAL;
     e22:	e9 e6       	ldi	r30, 0x69	; 105
     e24:	f3 e1       	ldi	r31, 0x13	; 19
     e26:	88 e8       	ldi	r24, 0x88	; 136
     e28:	93 e1       	ldi	r25, 0x13	; 19
     e2a:	a0 e0       	ldi	r26, 0x00	; 0
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	86 83       	std	Z+6, r24	; 0x06
     e30:	97 83       	std	Z+7, r25	; 0x07
     e32:	a0 87       	std	Z+8, r26	; 0x08
     e34:	b1 87       	std	Z+9, r27	; 0x09
  appUpdateTimer.mode = SYS_TIMER_PERIODIC_MODE;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	82 87       	std	Z+10, r24	; 0x0a
  appUpdateTimer.handler = appUpdateTimerHandler;
     e3a:	84 ef       	ldi	r24, 0xF4	; 244
     e3c:	96 e0       	ldi	r25, 0x06	; 6
     e3e:	94 87       	std	Z+12, r25	; 0x0c
     e40:	83 87       	std	Z+11, r24	; 0x0b
  SYS_TimerStart(&appUpdateTimer); //disabled temporary
     e42:	cf 01       	movw	r24, r30
     e44:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <SYS_TimerStart>
  APP_NwkInit();  
  //APP_GpioInit();
  //APP_CommandInit();
  appStartUpdateTimer();
  
  PNEWELSGpioInit();
     e48:	0e 94 48 17 	call	0x2e90	; 0x2e90 <PNEWELSGpioInit>
  PNEWELSAppInit();
     e4c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <PNEWELSAppInit>
  systemFlag_check(device_flag); //check whether this is the first time install. If yes, System directly enter WPS mode
     e50:	80 91 5c 23 	lds	r24, 0x235C
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 ad 20 	call	0x415a	; 0x415a <systemFlag_check>
*****************************************************************************/
int main(void)
{
  SYS_Init();
  appInit();
  WDT_Init(); //Enable Watchdog timer
     e5a:	cf df       	rcall	.-98     	; 0xdfa <WDT_Init>
  
//   pne_debug_Init(); //disable this to disable the device displaying the signal strength
  ANT_DIV = 0x05; //6 for ceramic, 5 for antenna
     e5c:	85 e0       	ldi	r24, 0x05	; 5
     e5e:	80 93 4d 01 	sts	0x014D, r24

  while (1)
  {
    SYS_TaskHandler();
     e62:	0e 94 42 15 	call	0x2a84	; 0x2a84 <SYS_TaskHandler>
    APP_TaskHandler();
    //APP_GpioTaskHandler();
	PNEWELSTaskHandler();
     e66:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <PNEWELSTaskHandler>
// 	pne_debug_display();
	wdt_reset();
     e6a:	a8 95       	wdr
	
  }
     e6c:	fa cf       	rjmp	.-12     	; 0xe62 <main+0x4c>

00000e6e <__vector_1>:
	/* Clear the INTn interrupt flag */
	ext_int_clear_flag(pin);

	/* Enable the interrupt */
	ext_int_enable(pin);
}
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	0b b6       	in	r0, 0x3b	; 59
     e7a:	0f 92       	push	r0
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	e0 91 88 13 	lds	r30, 0x1388
     e98:	f0 91 89 13 	lds	r31, 0x1389
     e9c:	30 97       	sbiw	r30, 0x00	; 0
     e9e:	09 f0       	breq	.+2      	; 0xea2 <__vector_1+0x34>
     ea0:	19 95       	eicall
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	0f 90       	pop	r0
     ebc:	0b be       	out	0x3b, r0	; 59
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <__vector_2>:
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	0b b6       	in	r0, 0x3b	; 59
     ed4:	0f 92       	push	r0
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
     eee:	e0 91 86 13 	lds	r30, 0x1386
     ef2:	f0 91 87 13 	lds	r31, 0x1387
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	09 f0       	breq	.+2      	; 0xefc <__vector_2+0x34>
     efa:	19 95       	eicall
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0b be       	out	0x3b, r0	; 59
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	0f 90       	pop	r0
     f1e:	1f 90       	pop	r1
     f20:	18 95       	reti

00000f22 <__vector_3>:
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	0b b6       	in	r0, 0x3b	; 59
     f2e:	0f 92       	push	r0
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
     f48:	e0 91 84 13 	lds	r30, 0x1384
     f4c:	f0 91 85 13 	lds	r31, 0x1385
     f50:	30 97       	sbiw	r30, 0x00	; 0
     f52:	09 f0       	breq	.+2      	; 0xf56 <__vector_3+0x34>
     f54:	19 95       	eicall
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0b be       	out	0x3b, r0	; 59
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <__vector_4>:
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	0b b6       	in	r0, 0x3b	; 59
     f88:	0f 92       	push	r0
     f8a:	2f 93       	push	r18
     f8c:	3f 93       	push	r19
     f8e:	4f 93       	push	r20
     f90:	5f 93       	push	r21
     f92:	6f 93       	push	r22
     f94:	7f 93       	push	r23
     f96:	8f 93       	push	r24
     f98:	9f 93       	push	r25
     f9a:	af 93       	push	r26
     f9c:	bf 93       	push	r27
     f9e:	ef 93       	push	r30
     fa0:	ff 93       	push	r31
     fa2:	e0 91 82 13 	lds	r30, 0x1382
     fa6:	f0 91 83 13 	lds	r31, 0x1383
     faa:	30 97       	sbiw	r30, 0x00	; 0
     fac:	09 f0       	breq	.+2      	; 0xfb0 <__vector_4+0x34>
     fae:	19 95       	eicall
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_5>:
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	0b b6       	in	r0, 0x3b	; 59
     fe2:	0f 92       	push	r0
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
     ffc:	e0 91 80 13 	lds	r30, 0x1380
    1000:	f0 91 81 13 	lds	r31, 0x1381
    1004:	30 97       	sbiw	r30, 0x00	; 0
    1006:	09 f0       	breq	.+2      	; 0x100a <__vector_5+0x34>
    1008:	19 95       	eicall
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0b be       	out	0x3b, r0	; 59
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_6>:
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	0b b6       	in	r0, 0x3b	; 59
    103c:	0f 92       	push	r0
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    1056:	e0 91 7e 13 	lds	r30, 0x137E
    105a:	f0 91 7f 13 	lds	r31, 0x137F
    105e:	30 97       	sbiw	r30, 0x00	; 0
    1060:	09 f0       	breq	.+2      	; 0x1064 <__vector_6+0x34>
    1062:	19 95       	eicall
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	0f 90       	pop	r0
    107e:	0b be       	out	0x3b, r0	; 59
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_7>:
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	0b b6       	in	r0, 0x3b	; 59
    1096:	0f 92       	push	r0
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	e0 91 7c 13 	lds	r30, 0x137C
    10b4:	f0 91 7d 13 	lds	r31, 0x137D
    10b8:	30 97       	sbiw	r30, 0x00	; 0
    10ba:	09 f0       	breq	.+2      	; 0x10be <__vector_7+0x34>
    10bc:	19 95       	eicall
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0b be       	out	0x3b, r0	; 59
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_8>:
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	0b b6       	in	r0, 0x3b	; 59
    10f0:	0f 92       	push	r0
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
    110a:	e0 91 7a 13 	lds	r30, 0x137A
    110e:	f0 91 7b 13 	lds	r31, 0x137B
    1112:	30 97       	sbiw	r30, 0x00	; 0
    1114:	09 f0       	breq	.+2      	; 0x1118 <__vector_8+0x34>
    1116:	19 95       	eicall
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0b be       	out	0x3b, r0	; 59
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <__vector_9>:
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	0b b6       	in	r0, 0x3b	; 59
    114a:	0f 92       	push	r0
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	5f 93       	push	r21
    1154:	6f 93       	push	r22
    1156:	7f 93       	push	r23
    1158:	8f 93       	push	r24
    115a:	9f 93       	push	r25
    115c:	af 93       	push	r26
    115e:	bf 93       	push	r27
    1160:	ef 93       	push	r30
    1162:	ff 93       	push	r31
    1164:	e0 91 78 13 	lds	r30, 0x1378
    1168:	f0 91 79 13 	lds	r31, 0x1379
    116c:	30 97       	sbiw	r30, 0x00	; 0
    116e:	09 f0       	breq	.+2      	; 0x1172 <__vector_9+0x34>
    1170:	19 95       	eicall
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	bf 91       	pop	r27
    1178:	af 91       	pop	r26
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	7f 91       	pop	r23
    1180:	6f 91       	pop	r22
    1182:	5f 91       	pop	r21
    1184:	4f 91       	pop	r20
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0b be       	out	0x3b, r0	; 59
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_10>:
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	0b b6       	in	r0, 0x3b	; 59
    11a4:	0f 92       	push	r0
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	e0 91 76 13 	lds	r30, 0x1376
    11c2:	f0 91 77 13 	lds	r31, 0x1377
    11c6:	30 97       	sbiw	r30, 0x00	; 0
    11c8:	09 f0       	breq	.+2      	; 0x11cc <__vector_10+0x34>
    11ca:	19 95       	eicall
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0b be       	out	0x3b, r0	; 59
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <ext_int_pcint_clear_flag>:
    11f2:	80 31       	cpi	r24, 0x10	; 16
    11f4:	11 f4       	brne	.+4      	; 0x11fa <ext_int_pcint_clear_flag+0x8>
    11f6:	d9 9a       	sbi	0x1b, 1	; 27
    11f8:	08 95       	ret
    11fa:	d8 9a       	sbi	0x1b, 0	; 27
    11fc:	08 95       	ret

000011fe <ext_int_pcint_enable>:
    11fe:	80 31       	cpi	r24, 0x10	; 16
    1200:	59 f4       	brne	.+22     	; 0x1218 <ext_int_pcint_enable+0x1a>
    1202:	e8 e6       	ldi	r30, 0x68	; 104
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	82 60       	ori	r24, 0x02	; 2
    120a:	80 83       	st	Z, r24
    120c:	ec e6       	ldi	r30, 0x6C	; 108
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	81 60       	ori	r24, 0x01	; 1
    1214:	80 83       	st	Z, r24
    1216:	08 95       	ret
    1218:	e8 e6       	ldi	r30, 0x68	; 104
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	81 60       	ori	r24, 0x01	; 1
    1220:	80 83       	st	Z, r24
    1222:	eb e6       	ldi	r30, 0x6B	; 107
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	20 81       	ld	r18, Z
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <ext_int_pcint_enable+0x34>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	7a 95       	dec	r23
    1234:	e2 f7       	brpl	.-8      	; 0x122e <ext_int_pcint_enable+0x30>
    1236:	82 2b       	or	r24, r18
    1238:	80 83       	st	Z, r24
    123a:	08 95       	ret

0000123c <ext_int_pcint_disable>:
    123c:	80 31       	cpi	r24, 0x10	; 16
    123e:	31 f4       	brne	.+12     	; 0x124c <ext_int_pcint_disable+0x10>
    1240:	ec e6       	ldi	r30, 0x6C	; 108
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8e 7f       	andi	r24, 0xFE	; 254
    1248:	80 83       	st	Z, r24
    124a:	08 95       	ret
    124c:	eb e6       	ldi	r30, 0x6B	; 107
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	20 81       	ld	r18, Z
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <ext_int_pcint_disable+0x20>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	7a 95       	dec	r23
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <ext_int_pcint_disable+0x1c>
    1260:	80 95       	com	r24
    1262:	82 23       	and	r24, r18
    1264:	80 83       	st	Z, r24
    1266:	08 95       	ret

00001268 <ext_int_pcint_init>:

void ext_int_pcint_init(gpio_t gpio_id)
{
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	6b 01       	movw	r12, r22
    1270:	e8 2e       	mov	r14, r24
	/* Disable the interrupt */
	ext_int_pcint_disable(gpio_id);
    1272:	e4 df       	rcall	.-56     	; 0x123c <ext_int_pcint_disable>

	/* Enable IRQ pin as input */
	/* Enable the pullup for the IRQ pin */
	gpio_in(gpio_id);
    1274:	8e 2d       	mov	r24, r14
    1276:	b6 01       	movw	r22, r12
    1278:	26 d1       	rcall	.+588    	; 0x14c6 <gpio_in>
	gpio_pullup(gpio_id);
    127a:	8e 2d       	mov	r24, r14
    127c:	b6 01       	movw	r22, r12
    127e:	c5 d1       	rcall	.+906    	; 0x160a <gpio_pullup>

	/* Clear the PCINTn interrupt flag */
	ext_int_pcint_clear_flag(gpio_id);
    1280:	8e 2d       	mov	r24, r14
    1282:	b6 01       	movw	r22, r12
    1284:	b6 df       	rcall	.-148    	; 0x11f2 <ext_int_pcint_clear_flag>

	/* Enable the interrupt */
	ext_int_pcint_enable(gpio_id);
    1286:	8e 2d       	mov	r24, r14
    1288:	b6 01       	movw	r22, r12
    128a:	b9 df       	rcall	.-142    	; 0x11fe <ext_int_pcint_enable>
}
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	08 95       	ret

00001294 <ext_int_set_interrupt_callback>:

void ext_int_set_interrupt_callback(gpio_t gpio_id, ext_int_callback_t callback)
{
	interrupt_t ext_int = gpio_id.int_id;
    1294:	98 2f       	mov	r25, r24
	
	if (ext_int == EXT_INT0_PIN) {
    1296:	81 11       	cpse	r24, r1
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <ext_int_set_interrupt_callback+0x10>
		ext_int_int0_callback = callback;
    129a:	50 93 89 13 	sts	0x1389, r21
    129e:	40 93 88 13 	sts	0x1388, r20
    12a2:	08 95       	ret
	} else
	if (ext_int == EXT_INT1_PIN) {
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	29 f4       	brne	.+10     	; 0x12b2 <ext_int_set_interrupt_callback+0x1e>
		ext_int_int1_callback = callback;
    12a8:	50 93 87 13 	sts	0x1387, r21
    12ac:	40 93 86 13 	sts	0x1386, r20
    12b0:	08 95       	ret
	} else
	if (ext_int == EXT_INT2_PIN) {
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	29 f4       	brne	.+10     	; 0x12c0 <ext_int_set_interrupt_callback+0x2c>
		ext_int_int2_callback = callback;
    12b6:	50 93 85 13 	sts	0x1385, r21
    12ba:	40 93 84 13 	sts	0x1384, r20
    12be:	08 95       	ret
	} else
	if (ext_int == EXT_INT3_PIN) {
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	29 f4       	brne	.+10     	; 0x12ce <ext_int_set_interrupt_callback+0x3a>
		ext_int_int3_callback = callback;
    12c4:	50 93 83 13 	sts	0x1383, r21
    12c8:	40 93 82 13 	sts	0x1382, r20
    12cc:	08 95       	ret
	} else
	if (ext_int == EXT_INT4_PIN) {
    12ce:	84 30       	cpi	r24, 0x04	; 4
    12d0:	29 f4       	brne	.+10     	; 0x12dc <ext_int_set_interrupt_callback+0x48>
		ext_int_int4_callback = callback;
    12d2:	50 93 81 13 	sts	0x1381, r21
    12d6:	40 93 80 13 	sts	0x1380, r20
    12da:	08 95       	ret
	} else
	if (ext_int == EXT_INT5_PIN) {
    12dc:	85 30       	cpi	r24, 0x05	; 5
    12de:	29 f4       	brne	.+10     	; 0x12ea <ext_int_set_interrupt_callback+0x56>
		ext_int_int5_callback = callback;
    12e0:	50 93 7f 13 	sts	0x137F, r21
    12e4:	40 93 7e 13 	sts	0x137E, r20
    12e8:	08 95       	ret
	} else
	if (ext_int == EXT_INT6_PIN) {
    12ea:	86 30       	cpi	r24, 0x06	; 6
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <ext_int_set_interrupt_callback+0x64>
		ext_int_int6_callback = callback;
    12ee:	50 93 7d 13 	sts	0x137D, r21
    12f2:	40 93 7c 13 	sts	0x137C, r20
    12f6:	08 95       	ret
	} else
	if (ext_int == EXT_INT7_PIN) {
    12f8:	87 30       	cpi	r24, 0x07	; 7
    12fa:	29 f4       	brne	.+10     	; 0x1306 <ext_int_set_interrupt_callback+0x72>
		ext_int_int7_callback = callback;
    12fc:	50 93 7b 13 	sts	0x137B, r21
    1300:	40 93 7a 13 	sts	0x137A, r20
    1304:	08 95       	ret
	} else
	if (ext_int >= PC_INT0_PIN && ext_int <=PC_INT7_PIN) {
    1306:	88 50       	subi	r24, 0x08	; 8
    1308:	88 30       	cpi	r24, 0x08	; 8
    130a:	28 f4       	brcc	.+10     	; 0x1316 <ext_int_set_interrupt_callback+0x82>
		ext_int_pcint0_callback = callback;
    130c:	50 93 79 13 	sts	0x1379, r21
    1310:	40 93 78 13 	sts	0x1378, r20
    1314:	08 95       	ret
	} else
	if (ext_int == PC_INT8_PIN) {
    1316:	90 31       	cpi	r25, 0x10	; 16
    1318:	21 f4       	brne	.+8      	; 0x1322 <ext_int_set_interrupt_callback+0x8e>
		ext_int_pcint1_callback = callback;
    131a:	50 93 77 13 	sts	0x1377, r21
    131e:	40 93 76 13 	sts	0x1376, r20
    1322:	08 95       	ret

00001324 <gpio_set>:
void gpio_set(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1324:	62 30       	cpi	r22, 0x02	; 2
    1326:	09 f1       	breq	.+66     	; 0x136a <gpio_set+0x46>
    1328:	28 f4       	brcc	.+10     	; 0x1334 <gpio_set+0x10>
    132a:	66 23       	and	r22, r22
    132c:	41 f0       	breq	.+16     	; 0x133e <gpio_set+0x1a>
    132e:	61 30       	cpi	r22, 0x01	; 1
    1330:	89 f0       	breq	.+34     	; 0x1354 <gpio_set+0x30>
    1332:	08 95       	ret
    1334:	63 30       	cpi	r22, 0x03	; 3
    1336:	21 f1       	breq	.+72     	; 0x1380 <gpio_set+0x5c>
    1338:	64 30       	cpi	r22, 0x04	; 4
    133a:	69 f1       	breq	.+90     	; 0x1396 <gpio_set+0x72>
    133c:	08 95       	ret
	{
		case port_b:
		PORTB |= (1<<pin_id);
    133e:	25 b1       	in	r18, 0x05	; 5
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 c0       	rjmp	.+4      	; 0x134a <gpio_set+0x26>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	7a 95       	dec	r23
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <gpio_set+0x22>
    134e:	82 2b       	or	r24, r18
    1350:	85 b9       	out	0x05, r24	; 5
		break;
    1352:	08 95       	ret
		
		case port_d:
		PORTD |= (1<<pin_id);
    1354:	2b b1       	in	r18, 0x0b	; 11
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <gpio_set+0x3c>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	7a 95       	dec	r23
    1362:	e2 f7       	brpl	.-8      	; 0x135c <gpio_set+0x38>
    1364:	82 2b       	or	r24, r18
    1366:	8b b9       	out	0x0b, r24	; 11
		break;
    1368:	08 95       	ret
		
		case port_e:
		PORTE |= (1<<pin_id);
    136a:	2e b1       	in	r18, 0x0e	; 14
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <gpio_set+0x52>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	7a 95       	dec	r23
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <gpio_set+0x4e>
    137a:	82 2b       	or	r24, r18
    137c:	8e b9       	out	0x0e, r24	; 14
		break;
    137e:	08 95       	ret
		
		case port_f:
		PORTF |= (1<<pin_id);
    1380:	21 b3       	in	r18, 0x11	; 17
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <gpio_set+0x68>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	7a 95       	dec	r23
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <gpio_set+0x64>
    1390:	82 2b       	or	r24, r18
    1392:	81 bb       	out	0x11, r24	; 17
		break;
    1394:	08 95       	ret
		
		case port_g:
		PORTG |= (1<<pin_id);
    1396:	24 b3       	in	r18, 0x14	; 20
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <gpio_set+0x7e>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	7a 95       	dec	r23
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <gpio_set+0x7a>
    13a6:	82 2b       	or	r24, r18
    13a8:	84 bb       	out	0x14, r24	; 20
    13aa:	08 95       	ret

000013ac <gpio_clr>:
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	uint8_t temp = 0;
	uint8_t temp1 = 0;
	
	switch (port_id)
    13ac:	62 30       	cpi	r22, 0x02	; 2
    13ae:	19 f1       	breq	.+70     	; 0x13f6 <gpio_clr+0x4a>
    13b0:	28 f4       	brcc	.+10     	; 0x13bc <gpio_clr+0x10>
    13b2:	66 23       	and	r22, r22
    13b4:	41 f0       	breq	.+16     	; 0x13c6 <gpio_clr+0x1a>
    13b6:	61 30       	cpi	r22, 0x01	; 1
    13b8:	91 f0       	breq	.+36     	; 0x13de <gpio_clr+0x32>
    13ba:	08 95       	ret
    13bc:	63 30       	cpi	r22, 0x03	; 3
    13be:	39 f1       	breq	.+78     	; 0x140e <gpio_clr+0x62>
    13c0:	64 30       	cpi	r22, 0x04	; 4
    13c2:	89 f1       	breq	.+98     	; 0x1426 <gpio_clr+0x7a>
    13c4:	08 95       	ret
	{
		case port_b:
		PORTB &= ~(1<<pin_id);
    13c6:	25 b1       	in	r18, 0x05	; 5
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <gpio_clr+0x26>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	7a 95       	dec	r23
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <gpio_clr+0x22>
    13d6:	80 95       	com	r24
    13d8:	82 23       	and	r24, r18
    13da:	85 b9       	out	0x05, r24	; 5
		break;
    13dc:	08 95       	ret
		
		case port_d:
		PORTD &= ~(1<<pin_id);
    13de:	2b b1       	in	r18, 0x0b	; 11
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <gpio_clr+0x3e>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	7a 95       	dec	r23
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <gpio_clr+0x3a>
    13ee:	80 95       	com	r24
    13f0:	82 23       	and	r24, r18
    13f2:	8b b9       	out	0x0b, r24	; 11
		break;
    13f4:	08 95       	ret
		
		case port_e:
		temp = (1<<pin_id);
		temp1 = ~(temp);
		PORTE &= temp1;
    13f6:	2e b1       	in	r18, 0x0e	; 14
		case port_d:
		PORTD &= ~(1<<pin_id);
		break;
		
		case port_e:
		temp = (1<<pin_id);
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <gpio_clr+0x56>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	7a 95       	dec	r23
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <gpio_clr+0x52>
		temp1 = ~(temp);
    1406:	80 95       	com	r24
		PORTE &= temp1;
    1408:	82 23       	and	r24, r18
    140a:	8e b9       	out	0x0e, r24	; 14
		break;
    140c:	08 95       	ret
		
		case port_f:
		PORTF &= ~(1<<pin_id);
    140e:	21 b3       	in	r18, 0x11	; 17
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <gpio_clr+0x6e>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	7a 95       	dec	r23
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <gpio_clr+0x6a>
    141e:	80 95       	com	r24
    1420:	82 23       	and	r24, r18
    1422:	81 bb       	out	0x11, r24	; 17
		break;
    1424:	08 95       	ret
		
		case port_g:
		PORTG &= ~(1<<pin_id);
    1426:	24 b3       	in	r18, 0x14	; 20
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <gpio_clr+0x86>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	7a 95       	dec	r23
    1434:	e2 f7       	brpl	.-8      	; 0x142e <gpio_clr+0x82>
    1436:	80 95       	com	r24
    1438:	82 23       	and	r24, r18
    143a:	84 bb       	out	0x14, r24	; 20
    143c:	08 95       	ret

0000143e <gpio_toggle>:
void gpio_toggle(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    143e:	62 30       	cpi	r22, 0x02	; 2
    1440:	09 f1       	breq	.+66     	; 0x1484 <gpio_toggle+0x46>
    1442:	28 f4       	brcc	.+10     	; 0x144e <gpio_toggle+0x10>
    1444:	66 23       	and	r22, r22
    1446:	41 f0       	breq	.+16     	; 0x1458 <gpio_toggle+0x1a>
    1448:	61 30       	cpi	r22, 0x01	; 1
    144a:	89 f0       	breq	.+34     	; 0x146e <gpio_toggle+0x30>
    144c:	08 95       	ret
    144e:	63 30       	cpi	r22, 0x03	; 3
    1450:	21 f1       	breq	.+72     	; 0x149a <gpio_toggle+0x5c>
    1452:	64 30       	cpi	r22, 0x04	; 4
    1454:	69 f1       	breq	.+90     	; 0x14b0 <gpio_toggle+0x72>
    1456:	08 95       	ret
	{
		case port_b:
		PORTB ^= (1 << pin_id);
    1458:	25 b1       	in	r18, 0x05	; 5
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <gpio_toggle+0x26>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	7a 95       	dec	r23
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <gpio_toggle+0x22>
    1468:	82 27       	eor	r24, r18
    146a:	85 b9       	out	0x05, r24	; 5
		break;
    146c:	08 95       	ret
		
		case port_d:
		PORTD ^= (1 << pin_id);
    146e:	2b b1       	in	r18, 0x0b	; 11
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <gpio_toggle+0x3c>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	7a 95       	dec	r23
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <gpio_toggle+0x38>
    147e:	82 27       	eor	r24, r18
    1480:	8b b9       	out	0x0b, r24	; 11
		break;
    1482:	08 95       	ret
		
		case port_e:
		PORTE ^= (1 << pin_id);
    1484:	2e b1       	in	r18, 0x0e	; 14
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <gpio_toggle+0x52>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	7a 95       	dec	r23
    1492:	e2 f7       	brpl	.-8      	; 0x148c <gpio_toggle+0x4e>
    1494:	82 27       	eor	r24, r18
    1496:	8e b9       	out	0x0e, r24	; 14
		break;
    1498:	08 95       	ret
		
		case port_f:
		PORTF ^= (1 << pin_id);
    149a:	21 b3       	in	r18, 0x11	; 17
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <gpio_toggle+0x68>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	7a 95       	dec	r23
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <gpio_toggle+0x64>
    14aa:	82 27       	eor	r24, r18
    14ac:	81 bb       	out	0x11, r24	; 17
		break;
    14ae:	08 95       	ret
		
		case port_g:
		PORTG ^= (1 << pin_id);
    14b0:	24 b3       	in	r18, 0x14	; 20
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <gpio_toggle+0x7e>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	7a 95       	dec	r23
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <gpio_toggle+0x7a>
    14c0:	82 27       	eor	r24, r18
    14c2:	84 bb       	out	0x14, r24	; 20
    14c4:	08 95       	ret

000014c6 <gpio_in>:
void gpio_in(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    14c6:	62 30       	cpi	r22, 0x02	; 2
    14c8:	61 f1       	breq	.+88     	; 0x1522 <gpio_in+0x5c>
    14ca:	28 f4       	brcc	.+10     	; 0x14d6 <gpio_in+0x10>
    14cc:	66 23       	and	r22, r22
    14ce:	49 f0       	breq	.+18     	; 0x14e2 <gpio_in+0x1c>
    14d0:	61 30       	cpi	r22, 0x01	; 1
    14d2:	b9 f0       	breq	.+46     	; 0x1502 <gpio_in+0x3c>
    14d4:	08 95       	ret
    14d6:	63 30       	cpi	r22, 0x03	; 3
    14d8:	a1 f1       	breq	.+104    	; 0x1542 <gpio_in+0x7c>
    14da:	64 30       	cpi	r22, 0x04	; 4
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <gpio_in+0x1a>
    14de:	41 c0       	rjmp	.+130    	; 0x1562 <gpio_in+0x9c>
    14e0:	08 95       	ret
	{
		case port_b:
		DDRB &= ~(1 << pin_id);
    14e2:	24 b1       	in	r18, 0x04	; 4
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <gpio_in+0x28>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	7a 95       	dec	r23
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <gpio_in+0x24>
    14f2:	80 95       	com	r24
    14f4:	98 2f       	mov	r25, r24
    14f6:	92 23       	and	r25, r18
    14f8:	94 b9       	out	0x04, r25	; 4
		PORTB &= ~(1 << pin_id);
    14fa:	95 b1       	in	r25, 0x05	; 5
    14fc:	89 23       	and	r24, r25
    14fe:	85 b9       	out	0x05, r24	; 5
		break;
    1500:	08 95       	ret
		
		case port_d:
		DDRD &= ~(1 << pin_id);
    1502:	2a b1       	in	r18, 0x0a	; 10
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 c0       	rjmp	.+4      	; 0x150e <gpio_in+0x48>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	7a 95       	dec	r23
    1510:	e2 f7       	brpl	.-8      	; 0x150a <gpio_in+0x44>
    1512:	80 95       	com	r24
    1514:	98 2f       	mov	r25, r24
    1516:	92 23       	and	r25, r18
    1518:	9a b9       	out	0x0a, r25	; 10
		PORTD &= ~(1 << pin_id);
    151a:	9b b1       	in	r25, 0x0b	; 11
    151c:	89 23       	and	r24, r25
    151e:	8b b9       	out	0x0b, r24	; 11
		break;
    1520:	08 95       	ret
		
		case port_e:
		DDRE &= ~(1 << pin_id);
    1522:	2d b1       	in	r18, 0x0d	; 13
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <gpio_in+0x68>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	7a 95       	dec	r23
    1530:	e2 f7       	brpl	.-8      	; 0x152a <gpio_in+0x64>
    1532:	80 95       	com	r24
    1534:	98 2f       	mov	r25, r24
    1536:	92 23       	and	r25, r18
    1538:	9d b9       	out	0x0d, r25	; 13
		PORTE &= ~(1 << pin_id);
    153a:	9e b1       	in	r25, 0x0e	; 14
    153c:	89 23       	and	r24, r25
    153e:	8e b9       	out	0x0e, r24	; 14
		break;
    1540:	08 95       	ret
		
		case port_f:
		DDRF &= ~(1 << pin_id);
    1542:	20 b3       	in	r18, 0x10	; 16
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <gpio_in+0x88>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	7a 95       	dec	r23
    1550:	e2 f7       	brpl	.-8      	; 0x154a <gpio_in+0x84>
    1552:	80 95       	com	r24
    1554:	98 2f       	mov	r25, r24
    1556:	92 23       	and	r25, r18
    1558:	90 bb       	out	0x10, r25	; 16
		PORTF &= ~(1 << pin_id);
    155a:	91 b3       	in	r25, 0x11	; 17
    155c:	89 23       	and	r24, r25
    155e:	81 bb       	out	0x11, r24	; 17
		break;
    1560:	08 95       	ret
		
		case port_g:
		DDRG &= ~(1 << pin_id);
    1562:	23 b3       	in	r18, 0x13	; 19
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <gpio_in+0xa8>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	7a 95       	dec	r23
    1570:	e2 f7       	brpl	.-8      	; 0x156a <gpio_in+0xa4>
    1572:	80 95       	com	r24
    1574:	98 2f       	mov	r25, r24
    1576:	92 23       	and	r25, r18
    1578:	93 bb       	out	0x13, r25	; 19
		PORTG &= ~(1 << pin_id);
    157a:	94 b3       	in	r25, 0x14	; 20
    157c:	89 23       	and	r24, r25
    157e:	84 bb       	out	0x14, r24	; 20
    1580:	08 95       	ret

00001582 <gpio_out>:
void gpio_out(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1582:	62 30       	cpi	r22, 0x02	; 2
    1584:	09 f1       	breq	.+66     	; 0x15c8 <gpio_out+0x46>
    1586:	28 f4       	brcc	.+10     	; 0x1592 <gpio_out+0x10>
    1588:	66 23       	and	r22, r22
    158a:	41 f0       	breq	.+16     	; 0x159c <gpio_out+0x1a>
    158c:	61 30       	cpi	r22, 0x01	; 1
    158e:	89 f0       	breq	.+34     	; 0x15b2 <gpio_out+0x30>
    1590:	08 95       	ret
    1592:	63 30       	cpi	r22, 0x03	; 3
    1594:	21 f1       	breq	.+72     	; 0x15de <gpio_out+0x5c>
    1596:	64 30       	cpi	r22, 0x04	; 4
    1598:	69 f1       	breq	.+90     	; 0x15f4 <gpio_out+0x72>
    159a:	08 95       	ret
	{
		case port_b:
		DDRB |= (1<<pin_id);
    159c:	24 b1       	in	r18, 0x04	; 4
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <gpio_out+0x26>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	7a 95       	dec	r23
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <gpio_out+0x22>
    15ac:	82 2b       	or	r24, r18
    15ae:	84 b9       	out	0x04, r24	; 4
		break;
    15b0:	08 95       	ret
		
		case port_d:
		DDRD |= (1<<pin_id);
    15b2:	2a b1       	in	r18, 0x0a	; 10
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <gpio_out+0x3c>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	7a 95       	dec	r23
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <gpio_out+0x38>
    15c2:	82 2b       	or	r24, r18
    15c4:	8a b9       	out	0x0a, r24	; 10
		break;
    15c6:	08 95       	ret
		
		case port_e:
		DDRE |= (1<<pin_id);
    15c8:	2d b1       	in	r18, 0x0d	; 13
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <gpio_out+0x52>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	7a 95       	dec	r23
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <gpio_out+0x4e>
    15d8:	82 2b       	or	r24, r18
    15da:	8d b9       	out	0x0d, r24	; 13
		break;
    15dc:	08 95       	ret
		
		case port_f:
		DDRF |= (1<<pin_id);
    15de:	20 b3       	in	r18, 0x10	; 16
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <gpio_out+0x68>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	7a 95       	dec	r23
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <gpio_out+0x64>
    15ee:	82 2b       	or	r24, r18
    15f0:	80 bb       	out	0x10, r24	; 16
		break;
    15f2:	08 95       	ret
		
		case port_g:
		DDRG |= (1<<pin_id);
    15f4:	23 b3       	in	r18, 0x13	; 19
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <gpio_out+0x7e>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	7a 95       	dec	r23
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <gpio_out+0x7a>
    1604:	82 2b       	or	r24, r18
    1606:	83 bb       	out	0x13, r24	; 19
    1608:	08 95       	ret

0000160a <gpio_pullup>:
void gpio_pullup(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    160a:	62 30       	cpi	r22, 0x02	; 2
    160c:	09 f1       	breq	.+66     	; 0x1650 <gpio_pullup+0x46>
    160e:	28 f4       	brcc	.+10     	; 0x161a <gpio_pullup+0x10>
    1610:	66 23       	and	r22, r22
    1612:	41 f0       	breq	.+16     	; 0x1624 <gpio_pullup+0x1a>
    1614:	61 30       	cpi	r22, 0x01	; 1
    1616:	89 f0       	breq	.+34     	; 0x163a <gpio_pullup+0x30>
    1618:	08 95       	ret
    161a:	63 30       	cpi	r22, 0x03	; 3
    161c:	21 f1       	breq	.+72     	; 0x1666 <gpio_pullup+0x5c>
    161e:	64 30       	cpi	r22, 0x04	; 4
    1620:	69 f1       	breq	.+90     	; 0x167c <gpio_pullup+0x72>
    1622:	08 95       	ret
	{
		case port_b:
		PORTB |= (1 << pin_id);
    1624:	25 b1       	in	r18, 0x05	; 5
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <gpio_pullup+0x26>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	7a 95       	dec	r23
    1632:	e2 f7       	brpl	.-8      	; 0x162c <gpio_pullup+0x22>
    1634:	82 2b       	or	r24, r18
    1636:	85 b9       	out	0x05, r24	; 5
		break;
    1638:	08 95       	ret
		
		case port_d:
		PORTD |= (1 << pin_id);
    163a:	2b b1       	in	r18, 0x0b	; 11
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <gpio_pullup+0x3c>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	7a 95       	dec	r23
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <gpio_pullup+0x38>
    164a:	82 2b       	or	r24, r18
    164c:	8b b9       	out	0x0b, r24	; 11
		break;
    164e:	08 95       	ret
		
		case port_e:
		PORTE |= (1 << pin_id);
    1650:	2e b1       	in	r18, 0x0e	; 14
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 c0       	rjmp	.+4      	; 0x165c <gpio_pullup+0x52>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	7a 95       	dec	r23
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <gpio_pullup+0x4e>
    1660:	82 2b       	or	r24, r18
    1662:	8e b9       	out	0x0e, r24	; 14
		break;
    1664:	08 95       	ret
		
		case port_f:
		PORTF |= (1 << pin_id);
    1666:	21 b3       	in	r18, 0x11	; 17
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <gpio_pullup+0x68>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	7a 95       	dec	r23
    1674:	e2 f7       	brpl	.-8      	; 0x166e <gpio_pullup+0x64>
    1676:	82 2b       	or	r24, r18
    1678:	81 bb       	out	0x11, r24	; 17
		break;
    167a:	08 95       	ret
		
		case port_g:
		PORTG |= (1 << pin_id);
    167c:	24 b3       	in	r18, 0x14	; 20
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <gpio_pullup+0x7e>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	7a 95       	dec	r23
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <gpio_pullup+0x7a>
    168c:	82 2b       	or	r24, r18
    168e:	84 bb       	out	0x14, r24	; 20
    1690:	08 95       	ret

00001692 <gpio_read>:
uint8_t gpio_read(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1692:	62 30       	cpi	r22, 0x02	; 2
    1694:	e9 f0       	breq	.+58     	; 0x16d0 <gpio_read+0x3e>
    1696:	28 f4       	brcc	.+10     	; 0x16a2 <gpio_read+0x10>
    1698:	66 23       	and	r22, r22
    169a:	41 f0       	breq	.+16     	; 0x16ac <gpio_read+0x1a>
    169c:	61 30       	cpi	r22, 0x01	; 1
    169e:	79 f0       	breq	.+30     	; 0x16be <gpio_read+0x2c>
    16a0:	32 c0       	rjmp	.+100    	; 0x1706 <gpio_read+0x74>
    16a2:	63 30       	cpi	r22, 0x03	; 3
    16a4:	f1 f0       	breq	.+60     	; 0x16e2 <gpio_read+0x50>
    16a6:	64 30       	cpi	r22, 0x04	; 4
    16a8:	29 f1       	breq	.+74     	; 0x16f4 <gpio_read+0x62>
    16aa:	2d c0       	rjmp	.+90     	; 0x1706 <gpio_read+0x74>
	{
		case port_b:
		return (PINB & (1 << pin_id)) != 0;
    16ac:	83 b1       	in	r24, 0x03	; 3
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <gpio_read+0x24>
    16b2:	95 95       	asr	r25
    16b4:	87 95       	ror	r24
    16b6:	7a 95       	dec	r23
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <gpio_read+0x20>
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	08 95       	ret
		break;
		
		case port_d:
		return (PIND & (1 << pin_id)) != 0;
    16be:	89 b1       	in	r24, 0x09	; 9
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <gpio_read+0x36>
    16c4:	95 95       	asr	r25
    16c6:	87 95       	ror	r24
    16c8:	7a 95       	dec	r23
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <gpio_read+0x32>
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	08 95       	ret
		break;
		
		case port_e:
		return (PINE & (1 << pin_id)) != 0;
    16d0:	8c b1       	in	r24, 0x0c	; 12
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <gpio_read+0x48>
    16d6:	95 95       	asr	r25
    16d8:	87 95       	ror	r24
    16da:	7a 95       	dec	r23
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <gpio_read+0x44>
    16de:	81 70       	andi	r24, 0x01	; 1
    16e0:	08 95       	ret
		break;
		
		case port_f:
		return (PINF & (1 << pin_id)) != 0;
    16e2:	8f b1       	in	r24, 0x0f	; 15
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <gpio_read+0x5a>
    16e8:	95 95       	asr	r25
    16ea:	87 95       	ror	r24
    16ec:	7a 95       	dec	r23
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <gpio_read+0x56>
    16f0:	81 70       	andi	r24, 0x01	; 1
    16f2:	08 95       	ret
		break;
		
		case port_g:
		return (PING & (1 << pin_id)) != 0;
    16f4:	82 b3       	in	r24, 0x12	; 18
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <gpio_read+0x6c>
    16fa:	95 95       	asr	r25
    16fc:	87 95       	ror	r24
    16fe:	7a 95       	dec	r23
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <gpio_read+0x68>
    1702:	81 70       	andi	r24, 0x01	; 1
    1704:	08 95       	ret
		
		default:
		break;
	}
	
	return 0;
    1706:	80 e0       	ldi	r24, 0x00	; 0
}
    1708:	08 95       	ret

0000170a <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    170a:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	a8 95       	wdr
    1712:	80 91 60 00 	lds	r24, 0x0060
    1716:	88 61       	ori	r24, 0x18	; 24
    1718:	80 93 60 00 	sts	0x0060, r24
    171c:	10 92 60 00 	sts	0x0060, r1
    1720:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    1722:	e1 e6       	ldi	r30, 0x61	; 97
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 e8       	ldi	r24, 0x80	; 128
    1728:	80 83       	st	Z, r24
  CLKPR = 0;
    172a:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    172c:	78 94       	sei

  HAL_TimerInit();
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <HAL_TimerInit>
    1730:	08 95       	ret

00001732 <HAL_Delay>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Delay(uint8_t us)
{
  HAL_TimerDelay(us);
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	16 c0       	rjmp	.+44     	; 0x1762 <HAL_TimerDelay>
    1736:	08 95       	ret

00001738 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    1738:	10 92 6a 23 	sts	0x236A, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    173c:	80 e1       	ldi	r24, 0x10	; 16
    173e:	97 e2       	ldi	r25, 0x27	; 39
    1740:	90 93 a9 00 	sts	0x00A9, r25
    1744:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    1748:	e1 ea       	ldi	r30, 0xA1	; 161
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	88 e0       	ldi	r24, 0x08	; 8
    174e:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    1750:	80 81       	ld	r24, Z
    1752:	82 60       	ori	r24, 0x02	; 2
    1754:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1756:	e2 e7       	ldi	r30, 0x72	; 114
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	82 60       	ori	r24, 0x02	; 2
    175e:	80 83       	st	Z, r24
    1760:	08 95       	ret

00001762 <HAL_TimerDelay>:
*****************************************************************************/
void HAL_TimerDelay(uint16_t us)
{
  PRAGMA(diag_suppress=Pa082);

  OCR4B = TCNT4 + us;
    1762:	20 91 a4 00 	lds	r18, 0x00A4
    1766:	30 91 a5 00 	lds	r19, 0x00A5
    176a:	82 0f       	add	r24, r18
    176c:	93 1f       	adc	r25, r19
    176e:	ea ea       	ldi	r30, 0xAA	; 170
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	80 83       	st	Z, r24
  if (OCR4B > OCR4A)
    1776:	20 81       	ld	r18, Z
    1778:	31 81       	ldd	r19, Z+1	; 0x01
    177a:	80 91 a8 00 	lds	r24, 0x00A8
    177e:	90 91 a9 00 	lds	r25, 0x00A9
    1782:	82 17       	cp	r24, r18
    1784:	93 07       	cpc	r25, r19
    1786:	50 f4       	brcc	.+20     	; 0x179c <HAL_TimerDelay+0x3a>
    OCR4B -= OCR4A;
    1788:	20 91 a8 00 	lds	r18, 0x00A8
    178c:	30 91 a9 00 	lds	r19, 0x00A9
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	82 1b       	sub	r24, r18
    1796:	93 0b       	sbc	r25, r19
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24

  TIFR4 = (1 << OCF4B);
    179c:	84 e0       	ldi	r24, 0x04	; 4
    179e:	89 bb       	out	0x19, r24	; 25
  while (0 == (TIFR4 & (1 << OCF4B)));
    17a0:	ca 9b       	sbis	0x19, 2	; 25
    17a2:	fe cf       	rjmp	.-4      	; 0x17a0 <HAL_TimerDelay+0x3e>

  PRAGMA(diag_default=Pa082);
}
    17a4:	08 95       	ret

000017a6 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	8f 93       	push	r24
  halTimerIrqCount++;
    17b2:	80 91 6a 23 	lds	r24, 0x236A
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	80 93 6a 23 	sts	0x236A, r24
}
    17bc:	8f 91       	pop	r24
    17be:	0f 90       	pop	r0
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	0f 90       	pop	r0
    17c4:	1f 90       	pop	r1
    17c6:	18 95       	reti

000017c8 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    17c8:	eb e6       	ldi	r30, 0x6B	; 107
    17ca:	f3 e2       	ldi	r31, 0x23	; 35
    17cc:	14 82       	std	Z+4, r1	; 0x04
    17ce:	15 82       	std	Z+5, r1	; 0x05
    17d0:	11 82       	std	Z+1, r1	; 0x01
    17d2:	10 82       	st	Z, r1
    17d4:	17 a2       	std	Z+39, r1	; 0x27
    17d6:	16 a2       	std	Z+38, r1	; 0x26
    17d8:	e1 e7       	ldi	r30, 0x71	; 113
    17da:	f3 e2       	ldi	r31, 0x23	; 35
    17dc:	81 e9       	ldi	r24, 0x91	; 145
    17de:	93 e2       	ldi	r25, 0x23	; 35
    17e0:	11 92       	st	Z+, r1
    17e2:	11 92       	st	Z+, r1
    17e4:	e8 17       	cp	r30, r24
    17e6:	f9 07       	cpc	r31, r25
    17e8:	d9 f7       	brne	.-10     	; 0x17e0 <NWK_Init+0x18>
    17ea:	4f d6       	rcall	.+3230   	; 0x248a <nwkTxInit>
    17ec:	65 d3       	rcall	.+1738   	; 0x1eb8 <nwkRxInit>
    17ee:	0d d1       	rcall	.+538    	; 0x1a0a <nwkFrameInit>
    17f0:	40 d0       	rcall	.+128    	; 0x1872 <nwkDataReqInit>
    17f2:	8f c1       	rjmp	.+798    	; 0x1b12 <nwkRouteInit>
    17f4:	08 95       	ret

000017f6 <NWK_SetAddr>:
    17f6:	90 93 6c 23 	sts	0x236C, r25
    17fa:	80 93 6b 23 	sts	0x236B, r24
    17fe:	0c 94 34 14 	jmp	0x2868	; 0x2868 <PHY_SetShortAddr>
    1802:	08 95       	ret

00001804 <NWK_SetPanId>:
    1804:	90 93 6e 23 	sts	0x236E, r25
    1808:	80 93 6d 23 	sts	0x236D, r24
    180c:	0c 94 22 14 	jmp	0x2844	; 0x2844 <PHY_SetPanId>
    1810:	08 95       	ret

00001812 <NWK_OpenEndpoint>:
    1812:	e8 2f       	mov	r30, r24
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ef 58       	subi	r30, 0x8F	; 143
    181c:	fc 4d       	sbci	r31, 0xDC	; 220
    181e:	71 83       	std	Z+1, r23	; 0x01
    1820:	60 83       	st	Z, r22
    1822:	08 95       	ret

00001824 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    1824:	91 d3       	rcall	.+1826   	; 0x1f48 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    1826:	2f d7       	rcall	.+3678   	; 0x2686 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    1828:	4d c0       	rjmp	.+154    	; 0x18c4 <nwkDataReqTaskHandler>
    182a:	08 95       	ret

0000182c <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    182c:	e0 91 8a 13 	lds	r30, 0x138A
    1830:	f0 91 8b 13 	lds	r31, 0x138B
    1834:	30 97       	sbiw	r30, 0x00	; 0
    1836:	d9 f0       	breq	.+54     	; 0x186e <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    1838:	22 81       	ldd	r18, Z+2	; 0x02
    183a:	33 81       	ldd	r19, Z+3	; 0x03
    183c:	28 17       	cp	r18, r24
    183e:	39 07       	cpc	r19, r25
    1840:	89 f4       	brne	.+34     	; 0x1864 <nwkDataReqTxConf+0x38>
    1842:	05 c0       	rjmp	.+10     	; 0x184e <nwkDataReqTxConf+0x22>
    1844:	22 81       	ldd	r18, Z+2	; 0x02
    1846:	33 81       	ldd	r19, Z+3	; 0x03
    1848:	28 17       	cp	r18, r24
    184a:	39 07       	cpc	r19, r25
    184c:	59 f4       	brne	.+22     	; 0x1864 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    184e:	dc 01       	movw	r26, r24
    1850:	ad 57       	subi	r26, 0x7D	; 125
    1852:	bf 4f       	sbci	r27, 0xFF	; 255
    1854:	2c 91       	ld	r18, X
    1856:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	2c 91       	ld	r18, X
    185c:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    185e:	22 e0       	ldi	r18, 0x02	; 2
    1860:	24 83       	std	Z+4, r18	; 0x04
      break;
    1862:	05 c0       	rjmp	.+10     	; 0x186e <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1864:	01 90       	ld	r0, Z+
    1866:	f0 81       	ld	r31, Z
    1868:	e0 2d       	mov	r30, r0
    186a:	30 97       	sbiw	r30, 0x00	; 0
    186c:	59 f7       	brne	.-42     	; 0x1844 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    186e:	11 c1       	rjmp	.+546    	; 0x1a92 <nwkFrameFree>
    1870:	08 95       	ret

00001872 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    1872:	10 92 8b 13 	sts	0x138B, r1
    1876:	10 92 8a 13 	sts	0x138A, r1
    187a:	08 95       	ret

0000187c <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    187c:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    187e:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    1880:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    1882:	13 82       	std	Z+3, r1	; 0x03
    1884:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    1886:	ab e6       	ldi	r26, 0x6B	; 107
    1888:	b3 e2       	ldi	r27, 0x23	; 35
    188a:	96 96       	adiw	r26, 0x26	; 38
    188c:	8d 91       	ld	r24, X+
    188e:	9c 91       	ld	r25, X
    1890:	97 97       	sbiw	r26, 0x27	; 39
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	97 96       	adiw	r26, 0x27	; 39
    1896:	9c 93       	st	X, r25
    1898:	8e 93       	st	-X, r24
    189a:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    189c:	80 91 8a 13 	lds	r24, 0x138A
    18a0:	90 91 8b 13 	lds	r25, 0x138B
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	39 f4       	brne	.+14     	; 0x18b6 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    18a8:	11 82       	std	Z+1, r1	; 0x01
    18aa:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    18ac:	f0 93 8b 13 	sts	0x138B, r31
    18b0:	e0 93 8a 13 	sts	0x138A, r30
    18b4:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    18ba:	f0 93 8b 13 	sts	0x138B, r31
    18be:	e0 93 8a 13 	sts	0x138A, r30
    18c2:	08 95       	ret

000018c4 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    18cc:	e0 91 8a 13 	lds	r30, 0x138A
    18d0:	f0 91 8b 13 	lds	r31, 0x138B
    18d4:	30 97       	sbiw	r30, 0x00	; 0
    18d6:	09 f4       	brne	.+2      	; 0x18da <nwkDataReqTaskHandler+0x16>
    18d8:	93 c0       	rjmp	.+294    	; 0x1a00 <nwkDataReqTaskHandler+0x13c>
    18da:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	88 23       	and	r24, r24
    18e0:	21 f0       	breq	.+8      	; 0x18ea <nwkDataReqTaskHandler+0x26>
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <nwkDataReqTaskHandler+0x24>
    18e6:	66 c0       	rjmp	.+204    	; 0x19b4 <nwkDataReqTaskHandler+0xf0>
    18e8:	85 c0       	rjmp	.+266    	; 0x19f4 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    18ea:	9a d0       	rcall	.+308    	; 0x1a20 <nwkFrameAlloc>
    18ec:	8c 01       	movw	r16, r24
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	21 f4       	brne	.+8      	; 0x18fa <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    18f6:	8f 87       	std	Y+15, r24	; 0x0f
    18f8:	83 c0       	rjmp	.+262    	; 0x1a00 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    18fa:	9b 83       	std	Y+3, r25	; 0x03
    18fc:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    1902:	f8 01       	movw	r30, r16
    1904:	e9 57       	subi	r30, 0x79	; 121
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	86 e1       	ldi	r24, 0x16	; 22
    190a:	9c e0       	ldi	r25, 0x0C	; 12
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    1910:	31 97       	sbiw	r30, 0x01	; 1
    1912:	89 85       	ldd	r24, Y+9	; 0x09
    1914:	82 fb       	bst	r24, 2
    1916:	88 27       	eor	r24, r24
    1918:	80 f9       	bld	r24, 0
    191a:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    191c:	99 85       	ldd	r25, Y+9	; 0x09
    191e:	d8 01       	movw	r26, r16
    1920:	1b 96       	adiw	r26, 0x0b	; 11
    1922:	8c 91       	ld	r24, X
    1924:	1b 97       	sbiw	r26, 0x0b	; 11
    1926:	90 fb       	bst	r25, 0
    1928:	80 f9       	bld	r24, 0
    192a:	1b 96       	adiw	r26, 0x0b	; 11
    192c:	8c 93       	st	X, r24
    192e:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    1930:	99 85       	ldd	r25, Y+9	; 0x09
    1932:	93 fb       	bst	r25, 3
    1934:	99 27       	eor	r25, r25
    1936:	90 f9       	bld	r25, 0
    1938:	90 fb       	bst	r25, 0
    193a:	82 f9       	bld	r24, 2
    193c:	1b 96       	adiw	r26, 0x0b	; 11
    193e:	8c 93       	st	X, r24
    1940:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1942:	eb e6       	ldi	r30, 0x6B	; 107
    1944:	f3 e2       	ldi	r31, 0x23	; 35
    1946:	84 81       	ldd	r24, Z+4	; 0x04
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	84 83       	std	Z+4, r24	; 0x04
    194c:	1c 96       	adiw	r26, 0x0c	; 12
    194e:	8c 93       	st	X, r24
    1950:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	1e 96       	adiw	r26, 0x0e	; 14
    1958:	9c 93       	st	X, r25
    195a:	8e 93       	st	-X, r24
    195c:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	50 96       	adiw	r26, 0x10	; 16
    1964:	9c 93       	st	X, r25
    1966:	8e 93       	st	-X, r24
    1968:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    196a:	88 85       	ldd	r24, Y+8	; 0x08
    196c:	98 2f       	mov	r25, r24
    196e:	9f 70       	andi	r25, 0x0F	; 15
    1970:	51 96       	adiw	r26, 0x11	; 17
    1972:	8c 91       	ld	r24, X
    1974:	51 97       	sbiw	r26, 0x11	; 17
    1976:	80 7f       	andi	r24, 0xF0	; 240
    1978:	89 2b       	or	r24, r25
    197a:	51 96       	adiw	r26, 0x11	; 17
    197c:	8c 93       	st	X, r24
    197e:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    1980:	9f 81       	ldd	r25, Y+7	; 0x07
    1982:	92 95       	swap	r25
    1984:	90 7f       	andi	r25, 0xF0	; 240
    1986:	8f 70       	andi	r24, 0x0F	; 15
    1988:	89 2b       	or	r24, r25
    198a:	51 96       	adiw	r26, 0x11	; 17
    198c:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    198e:	f8 01       	movw	r30, r16
    1990:	ef 57       	subi	r30, 0x7F	; 127
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	4c 85       	ldd	r20, Y+12	; 0x0c
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	6a 85       	ldd	r22, Y+10	; 0x0a
    199a:	7b 85       	ldd	r23, Y+11	; 0x0b
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	0e 94 14 4e 	call	0x9c28	; 0x9c28 <memcpy>
  frame->size += req->size;
    19a4:	f8 01       	movw	r30, r16
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    19aa:	89 0f       	add	r24, r25
    19ac:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    19ae:	c8 01       	movw	r24, r16
    19b0:	8f d5       	rcall	.+2846   	; 0x24d0 <nwkTxFrame>
    19b2:	26 c0       	rjmp	.+76     	; 0x1a00 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    19b4:	ce 17       	cp	r28, r30
    19b6:	df 07       	cpc	r29, r31
    19b8:	41 f4       	brne	.+16     	; 0x19ca <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    19ba:	88 81       	ld	r24, Y
    19bc:	99 81       	ldd	r25, Y+1	; 0x01
    19be:	90 93 8b 13 	sts	0x138B, r25
    19c2:	80 93 8a 13 	sts	0x138A, r24
    19c6:	0a c0       	rjmp	.+20     	; 0x19dc <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    19c8:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	c8 17       	cp	r28, r24
    19d0:	d9 07       	cpc	r29, r25
    19d2:	d1 f7       	brne	.-12     	; 0x19c8 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    19d4:	88 81       	ld	r24, Y
    19d6:	99 81       	ldd	r25, Y+1	; 0x01
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    19dc:	eb e6       	ldi	r30, 0x6B	; 107
    19de:	f3 e2       	ldi	r31, 0x23	; 35
    19e0:	86 a1       	ldd	r24, Z+38	; 0x26
    19e2:	97 a1       	ldd	r25, Z+39	; 0x27
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	97 a3       	std	Z+39, r25	; 0x27
    19e8:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    19ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    19ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    19ee:	ce 01       	movw	r24, r28
    19f0:	19 95       	eicall
    19f2:	06 c0       	rjmp	.+12     	; 0x1a00 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    19f4:	09 90       	ld	r0, Y+
    19f6:	d8 81       	ld	r29, Y
    19f8:	c0 2d       	mov	r28, r0
    19fa:	20 97       	sbiw	r28, 0x00	; 0
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <nwkDataReqTaskHandler+0x13c>
    19fe:	6e cf       	rjmp	.-292    	; 0x18dc <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	08 95       	ret

00001a0a <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1a0a:	ec e8       	ldi	r30, 0x8C	; 140
    1a0c:	f3 e1       	ldi	r31, 0x13	; 19
    1a0e:	80 e4       	ldi	r24, 0x40	; 64
    1a10:	9e e1       	ldi	r25, 0x1E	; 30
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1a12:	10 82       	st	Z, r1
    1a14:	e7 57       	subi	r30, 0x77	; 119
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1a18:	e8 17       	cp	r30, r24
    1a1a:	f9 07       	cpc	r31, r25
    1a1c:	d1 f7       	brne	.-12     	; 0x1a12 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    1a1e:	08 95       	ret

00001a20 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    1a20:	80 91 8c 13 	lds	r24, 0x138C
    1a24:	88 23       	and	r24, r24
    1a26:	59 f0       	breq	.+22     	; 0x1a3e <nwkFrameAlloc+0x1e>
    1a28:	e5 e1       	ldi	r30, 0x15	; 21
    1a2a:	f4 e1       	ldi	r31, 0x14	; 20
    1a2c:	40 e4       	ldi	r20, 0x40	; 64
    1a2e:	5e e1       	ldi	r21, 0x1E	; 30
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	bc 01       	movw	r22, r24
    1a36:	20 81       	ld	r18, Z
    1a38:	21 11       	cpse	r18, r1
    1a3a:	22 c0       	rjmp	.+68     	; 0x1a80 <nwkFrameAlloc+0x60>
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <nwkFrameAlloc+0x22>
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1a42:	49 e8       	ldi	r20, 0x89	; 137
    1a44:	46 9f       	mul	r20, r22
    1a46:	90 01       	movw	r18, r0
    1a48:	47 9f       	mul	r20, r23
    1a4a:	30 0d       	add	r19, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	c9 01       	movw	r24, r18
    1a50:	84 57       	subi	r24, 0x74	; 116
    1a52:	9c 4e       	sbci	r25, 0xEC	; 236
    1a54:	fc 01       	movw	r30, r24
    1a56:	11 92       	st	Z+, r1
    1a58:	4a 95       	dec	r20
    1a5a:	e9 f7       	brne	.-6      	; 0x1a56 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1a5c:	40 e1       	ldi	r20, 0x10	; 16
    1a5e:	fc 01       	movw	r30, r24
    1a60:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    1a62:	ef 57       	subi	r30, 0x7F	; 127
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	22 56       	subi	r18, 0x62	; 98
    1a68:	3c 4e       	sbci	r19, 0xEC	; 236
    1a6a:	31 83       	std	Z+1, r19	; 0x01
    1a6c:	20 83       	st	Z, r18
      nwkIb.lock++;
    1a6e:	eb e6       	ldi	r30, 0x6B	; 107
    1a70:	f3 e2       	ldi	r31, 0x23	; 35
    1a72:	26 a1       	ldd	r18, Z+38	; 0x26
    1a74:	37 a1       	ldd	r19, Z+39	; 0x27
    1a76:	2f 5f       	subi	r18, 0xFF	; 255
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	37 a3       	std	Z+39, r19	; 0x27
    1a7c:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    1a7e:	08 95       	ret
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	e7 57       	subi	r30, 0x77	; 119
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1a86:	e4 17       	cp	r30, r20
    1a88:	f5 07       	cpc	r31, r21
    1a8a:	a1 f6       	brne	.-88     	; 0x1a34 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
}
    1a90:	08 95       	ret

00001a92 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    1a92:	fc 01       	movw	r30, r24
    1a94:	10 82       	st	Z, r1
  nwkIb.lock--;
    1a96:	eb e6       	ldi	r30, 0x6B	; 107
    1a98:	f3 e2       	ldi	r31, 0x23	; 35
    1a9a:	86 a1       	ldd	r24, Z+38	; 0x26
    1a9c:	97 a1       	ldd	r25, Z+39	; 0x27
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	97 a3       	std	Z+39, r25	; 0x27
    1aa2:	86 a3       	std	Z+38, r24	; 0x26
    1aa4:	08 95       	ret

00001aa6 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	41 f0       	breq	.+16     	; 0x1aba <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    1aaa:	fc 01       	movw	r30, r24
    1aac:	e7 57       	subi	r30, 0x77	; 119
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1ab0:	8e e1       	ldi	r24, 0x1E	; 30
    1ab2:	e0 34       	cpi	r30, 0x40	; 64
    1ab4:	f8 07       	cpc	r31, r24
    1ab6:	18 f0       	brcs	.+6      	; 0x1abe <nwkFrameNext+0x18>
    1ab8:	15 c0       	rjmp	.+42     	; 0x1ae4 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    1aba:	ec e8       	ldi	r30, 0x8C	; 140
    1abc:	f3 e1       	ldi	r31, 0x13	; 19
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 23       	and	r24, r24
    1ac2:	39 f0       	breq	.+14     	; 0x1ad2 <nwkFrameNext+0x2c>
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <nwkFrameNext+0x26>
    1ac6:	80 81       	ld	r24, Z
    1ac8:	88 23       	and	r24, r24
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <nwkFrameNext+0x2c>
      return frame;
    1acc:	8e 2f       	mov	r24, r30
    1ace:	9f 2f       	mov	r25, r31
    1ad0:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1ad2:	e7 57       	subi	r30, 0x77	; 119
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8e e1       	ldi	r24, 0x1E	; 30
    1ad8:	e0 34       	cpi	r30, 0x40	; 64
    1ada:	f8 07       	cpc	r31, r24
    1adc:	a0 f3       	brcs	.-24     	; 0x1ac6 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	08 95       	ret
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
}
    1ae8:	08 95       	ret

00001aea <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1aea:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    1aec:	dc 01       	movw	r26, r24
    1aee:	ad 57       	subi	r26, 0x7D	; 125
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1af4:	ab e6       	ldi	r26, 0x6B	; 107
    1af6:	b3 e2       	ldi	r27, 0x23	; 35
    1af8:	14 96       	adiw	r26, 0x04	; 4
    1afa:	9c 91       	ld	r25, X
    1afc:	14 97       	sbiw	r26, 0x04	; 4
    1afe:	9f 5f       	subi	r25, 0xFF	; 255
    1b00:	14 96       	adiw	r26, 0x04	; 4
    1b02:	9c 93       	st	X, r25
    1b04:	14 97       	sbiw	r26, 0x04	; 4
    1b06:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    1b08:	8d 91       	ld	r24, X+
    1b0a:	9c 91       	ld	r25, X
    1b0c:	96 87       	std	Z+14, r25	; 0x0e
    1b0e:	85 87       	std	Z+13, r24	; 0x0d
    1b10:	08 95       	ret

00001b12 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    1b12:	a5 e4       	ldi	r26, 0x45	; 69
    1b14:	be e1       	ldi	r27, 0x1E	; 30
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	4f ef       	ldi	r20, 0xFF	; 255
    1b1c:	5f ef       	ldi	r21, 0xFF	; 255
    1b1e:	fd 01       	movw	r30, r26
    1b20:	34 97       	sbiw	r30, 0x04	; 4
    1b22:	51 83       	std	Z+1, r21	; 0x01
    1b24:	40 83       	st	Z, r20
    1b26:	fc 01       	movw	r30, r24
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	ee 0f       	add	r30, r30
    1b2e:	ff 1f       	adc	r31, r31
    1b30:	ee 0f       	add	r30, r30
    1b32:	ff 1f       	adc	r31, r31
    1b34:	e8 1b       	sub	r30, r24
    1b36:	f9 0b       	sbc	r31, r25
    1b38:	e0 5c       	subi	r30, 0xC0	; 192
    1b3a:	f1 4e       	sbci	r31, 0xE1	; 225
    1b3c:	20 81       	ld	r18, Z
    1b3e:	2e 7f       	andi	r18, 0xFE	; 254
    1b40:	20 83       	st	Z, r18
    1b42:	1c 92       	st	X, r1
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	17 96       	adiw	r26, 0x07	; 7
    1b48:	84 36       	cpi	r24, 0x64	; 100
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	41 f7       	brne	.-48     	; 0x1b1e <nwkRouteInit+0xc>
    1b4e:	08 95       	ret

00001b50 <NWK_RouteFindEntry>:
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	e1 e4       	ldi	r30, 0x41	; 65
    1b5a:	fe e1       	ldi	r31, 0x1E	; 30
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	06 2f       	mov	r16, r22
    1b62:	10 e0       	ldi	r17, 0x00	; 0
    1b64:	40 81       	ld	r20, Z
    1b66:	51 81       	ldd	r21, Z+1	; 0x01
    1b68:	48 17       	cp	r20, r24
    1b6a:	59 07       	cpc	r21, r25
    1b6c:	b1 f4       	brne	.+44     	; 0x1b9a <NWK_RouteFindEntry+0x4a>
    1b6e:	d9 01       	movw	r26, r18
    1b70:	aa 0f       	add	r26, r26
    1b72:	bb 1f       	adc	r27, r27
    1b74:	aa 0f       	add	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	aa 0f       	add	r26, r26
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	a2 1b       	sub	r26, r18
    1b7e:	b3 0b       	sbc	r27, r19
    1b80:	a0 5c       	subi	r26, 0xC0	; 192
    1b82:	b1 4e       	sbci	r27, 0xE1	; 225
    1b84:	4c 91       	ld	r20, X
    1b86:	46 95       	lsr	r20
    1b88:	41 70       	andi	r20, 0x01	; 1
    1b8a:	c4 2f       	mov	r28, r20
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	d4 2f       	mov	r29, r20
    1b90:	c0 17       	cp	r28, r16
    1b92:	d1 07       	cpc	r29, r17
    1b94:	11 f4       	brne	.+4      	; 0x1b9a <NWK_RouteFindEntry+0x4a>
    1b96:	cd 01       	movw	r24, r26
    1b98:	08 c0       	rjmp	.+16     	; 0x1baa <NWK_RouteFindEntry+0x5a>
    1b9a:	2f 5f       	subi	r18, 0xFF	; 255
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	37 96       	adiw	r30, 0x07	; 7
    1ba0:	24 36       	cpi	r18, 0x64	; 100
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	f9 f6       	brne	.-66     	; 0x1b64 <NWK_RouteFindEntry+0x14>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	08 95       	ret

00001bb4 <NWK_RouteNewEntry>:
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	e5 e4       	ldi	r30, 0x45	; 69
    1bba:	fe e1       	ldi	r31, 0x1E	; 30
    1bbc:	21 e0       	ldi	r18, 0x01	; 1
    1bbe:	31 e2       	ldi	r19, 0x21	; 33
    1bc0:	c0 e0       	ldi	r28, 0x00	; 0
    1bc2:	d0 e0       	ldi	r29, 0x00	; 0
    1bc4:	df 01       	movw	r26, r30
    1bc6:	15 97       	sbiw	r26, 0x05	; 5
    1bc8:	8c 91       	ld	r24, X
    1bca:	80 fd       	sbrc	r24, 0
    1bcc:	0b c0       	rjmp	.+22     	; 0x1be4 <NWK_RouteNewEntry+0x30>
    1bce:	80 81       	ld	r24, Z
    1bd0:	88 23       	and	r24, r24
    1bd2:	69 f0       	breq	.+26     	; 0x1bee <NWK_RouteNewEntry+0x3a>
    1bd4:	20 97       	sbiw	r28, 0x00	; 0
    1bd6:	29 f0       	breq	.+10     	; 0x1be2 <NWK_RouteNewEntry+0x2e>
    1bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bda:	89 17       	cp	r24, r25
    1bdc:	18 f4       	brcc	.+6      	; 0x1be4 <NWK_RouteNewEntry+0x30>
    1bde:	ed 01       	movw	r28, r26
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <NWK_RouteNewEntry+0x30>
    1be2:	ed 01       	movw	r28, r26
    1be4:	37 96       	adiw	r30, 0x07	; 7
    1be6:	e2 17       	cp	r30, r18
    1be8:	f3 07       	cpc	r31, r19
    1bea:	61 f7       	brne	.-40     	; 0x1bc4 <NWK_RouteNewEntry+0x10>
    1bec:	de 01       	movw	r26, r28
    1bee:	8c 91       	ld	r24, X
    1bf0:	8d 70       	andi	r24, 0x0D	; 13
    1bf2:	80 63       	ori	r24, 0x30	; 48
    1bf4:	8c 93       	st	X, r24
    1bf6:	80 e8       	ldi	r24, 0x80	; 128
    1bf8:	15 96       	adiw	r26, 0x05	; 5
    1bfa:	8c 93       	st	X, r24
    1bfc:	15 97       	sbiw	r26, 0x05	; 5
    1bfe:	cd 01       	movw	r24, r26
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <NWK_RouteFreeEntry>:
    1c06:	fc 01       	movw	r30, r24
    1c08:	80 81       	ld	r24, Z
    1c0a:	80 fd       	sbrc	r24, 0
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <NWK_RouteFreeEntry+0x12>
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	9f ef       	ldi	r25, 0xFF	; 255
    1c12:	92 83       	std	Z+2, r25	; 0x02
    1c14:	81 83       	std	Z+1, r24	; 0x01
    1c16:	15 82       	std	Z+5, r1	; 0x05
    1c18:	08 95       	ret

00001c1a <NWK_RouteNextHop>:
    1c1a:	9a df       	rcall	.-204    	; 0x1b50 <NWK_RouteFindEntry>
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	21 f0       	breq	.+8      	; 0x1c28 <NWK_RouteNextHop+0xe>
    1c20:	fc 01       	movw	r30, r24
    1c22:	83 81       	ldd	r24, Z+3	; 0x03
    1c24:	94 81       	ldd	r25, Z+4	; 0x04
    1c26:	08 95       	ret
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	9f ef       	ldi	r25, 0xFF	; 255
    1c2c:	08 95       	ret

00001c2e <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    1c2e:	90 df       	rcall	.-224    	; 0x1b50 <NWK_RouteFindEntry>
  if (entry)
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <nwkRouteRemove+0x8>
    NWK_RouteFreeEntry(entry);
    1c34:	e8 cf       	rjmp	.-48     	; 0x1c06 <NWK_RouteFreeEntry>
    1c36:	08 95       	ret

00001c38 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1c42:	01 85       	ldd	r16, Z+9	; 0x09
    1c44:	12 85       	ldd	r17, Z+10	; 0x0a
    1c46:	11 23       	and	r17, r17
    1c48:	2c f4       	brge	.+10     	; 0x1c54 <nwkRouteFrameReceived+0x1c>
    1c4a:	85 85       	ldd	r24, Z+13	; 0x0d
    1c4c:	96 85       	ldd	r25, Z+14	; 0x0e
    1c4e:	08 17       	cp	r16, r24
    1c50:	19 07       	cpc	r17, r25
    1c52:	e1 f5       	brne	.+120    	; 0x1ccc <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1c54:	85 81       	ldd	r24, Z+5	; 0x05
    1c56:	96 81       	ldd	r25, Z+6	; 0x06
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	c1 f1       	breq	.+112    	; 0x1ccc <nwkRouteFrameReceived+0x94>
    1c5c:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	85 85       	ldd	r24, Z+13	; 0x0d
    1c62:	96 85       	ldd	r25, Z+14	; 0x0e
    1c64:	75 df       	rcall	.-278    	; 0x1b50 <NWK_RouteFindEntry>
    1c66:	fc 01       	movw	r30, r24

  if (entry)
    1c68:	89 2b       	or	r24, r25
    1c6a:	a1 f0       	breq	.+40     	; 0x1c94 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6e:	98 85       	ldd	r25, Y+8	; 0x08
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	f9 f4       	brne	.+62     	; 0x1cb2 <nwkRouteFrameReceived+0x7a>
    1c74:	20 91 6b 23 	lds	r18, 0x236B
    1c78:	30 91 6c 23 	lds	r19, 0x236C
    1c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7e:	98 89       	ldd	r25, Y+16	; 0x10
    1c80:	28 17       	cp	r18, r24
    1c82:	39 07       	cpc	r19, r25
    1c84:	b1 f4       	brne	.+44     	; 0x1cb2 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
    1c86:	14 83       	std	Z+4, r17	; 0x04
    1c88:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1c8a:	80 81       	ld	r24, Z
    1c8c:	8f 70       	andi	r24, 0x0F	; 15
    1c8e:	80 63       	ori	r24, 0x30	; 48
    1c90:	80 83       	st	Z, r24
    1c92:	0a c0       	rjmp	.+20     	; 0x1ca8 <nwkRouteFrameReceived+0x70>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    1c94:	8f df       	rcall	.-226    	; 0x1bb4 <NWK_RouteNewEntry>
    1c96:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	92 83       	std	Z+2, r25	; 0x02
    1c9e:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	94 83       	std	Z+4, r25	; 0x04
    1ca6:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    1ca8:	cd 57       	subi	r28, 0x7D	; 125
    1caa:	df 4f       	sbci	r29, 0xFF	; 255
    1cac:	88 81       	ld	r24, Y
    1cae:	86 83       	std	Z+6, r24	; 0x06
    1cb0:	0d c0       	rjmp	.+26     	; 0x1ccc <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    1cb2:	83 81       	ldd	r24, Z+3	; 0x03
    1cb4:	94 81       	ldd	r25, Z+4	; 0x04
    1cb6:	08 17       	cp	r16, r24
    1cb8:	19 07       	cpc	r17, r25
    1cba:	b1 f3       	breq	.-20     	; 0x1ca8 <nwkRouteFrameReceived+0x70>
    1cbc:	de 01       	movw	r26, r28
    1cbe:	ad 57       	subi	r26, 0x7D	; 125
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	9c 91       	ld	r25, X
    1cc4:	86 81       	ldd	r24, Z+6	; 0x06
    1cc6:	89 17       	cp	r24, r25
    1cc8:	f0 f2       	brcs	.-68     	; 0x1c86 <nwkRouteFrameReceived+0x4e>
    1cca:	ee cf       	rjmp	.-36     	; 0x1ca8 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	08 95       	ret

00001cd6 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    1cdc:	87 85       	ldd	r24, Z+15	; 0x0f
    1cde:	90 89       	ldd	r25, Z+16	; 0x10
    1ce0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce2:	2f ef       	ldi	r18, 0xFF	; 255
    1ce4:	92 07       	cpc	r25, r18
    1ce6:	d9 f1       	breq	.+118    	; 0x1d5e <nwkRouteFrameSent+0x88>
    1ce8:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    1cea:	63 85       	ldd	r22, Z+11	; 0x0b
    1cec:	63 fb       	bst	r22, 3
    1cee:	66 27       	eor	r22, r22
    1cf0:	60 f9       	bld	r22, 0
    1cf2:	2e df       	rcall	.-420    	; 0x1b50 <NWK_RouteFindEntry>
    1cf4:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    1cf6:	89 2b       	or	r24, r25
    1cf8:	91 f1       	breq	.+100    	; 0x1d5e <nwkRouteFrameSent+0x88>
    1cfa:	8c 91       	ld	r24, X
    1cfc:	80 fd       	sbrc	r24, 0
    1cfe:	2f c0       	rjmp	.+94     	; 0x1d5e <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    1d00:	fe 01       	movw	r30, r28
    1d02:	ed 57       	subi	r30, 0x7D	; 125
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	80 81       	ld	r24, Z
    1d08:	81 11       	cpse	r24, r1
    1d0a:	19 c0       	rjmp	.+50     	; 0x1d3e <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1d0c:	8c 91       	ld	r24, X
    1d0e:	8f 70       	andi	r24, 0x0F	; 15
    1d10:	80 63       	ori	r24, 0x30	; 48
    1d12:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    1d14:	15 96       	adiw	r26, 0x05	; 5
    1d16:	8c 91       	ld	r24, X
    1d18:	15 97       	sbiw	r26, 0x05	; 5
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
    1d1c:	15 96       	adiw	r26, 0x05	; 5
    1d1e:	8c 93       	st	X, r24
    1d20:	8f 3f       	cpi	r24, 0xFF	; 255
    1d22:	e9 f4       	brne	.+58     	; 0x1d5e <nwkRouteFrameSent+0x88>
    1d24:	e5 e4       	ldi	r30, 0x45	; 69
    1d26:	fe e1       	ldi	r31, 0x1E	; 30
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	31 e2       	ldi	r19, 0x21	; 33
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1d2c:	80 81       	ld	r24, Z
    1d2e:	86 95       	lsr	r24
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	80 83       	st	Z, r24
    1d34:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1d36:	e2 17       	cp	r30, r18
    1d38:	f3 07       	cpc	r31, r19
    1d3a:	c1 f7       	brne	.-16     	; 0x1d2c <nwkRouteFrameSent+0x56>
    1d3c:	10 c0       	rjmp	.+32     	; 0x1d5e <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    1d3e:	9c 91       	ld	r25, X
    1d40:	89 2f       	mov	r24, r25
    1d42:	82 95       	swap	r24
    1d44:	8f 70       	andi	r24, 0x0F	; 15
    1d46:	81 5f       	subi	r24, 0xF1	; 241
    1d48:	8f 70       	andi	r24, 0x0F	; 15
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	22 95       	swap	r18
    1d4e:	20 7f       	andi	r18, 0xF0	; 240
    1d50:	9f 70       	andi	r25, 0x0F	; 15
    1d52:	92 2b       	or	r25, r18
    1d54:	9c 93       	st	X, r25
    1d56:	81 11       	cpse	r24, r1
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	54 df       	rcall	.-344    	; 0x1c06 <NWK_RouteFreeEntry>
  }
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1d6a:	87 85       	ldd	r24, Z+15	; 0x0f
    1d6c:	90 89       	ldd	r25, Z+16	; 0x10
    1d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d70:	2f ef       	ldi	r18, 0xFF	; 255
    1d72:	92 07       	cpc	r25, r18
    1d74:	29 f4       	brne	.+10     	; 0x1d80 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	90 87       	std	Z+8, r25	; 0x08
    1d7c:	87 83       	std	Z+7, r24	; 0x07
    1d7e:	0e c0       	rjmp	.+28     	; 0x1d9c <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    1d80:	23 85       	ldd	r18, Z+11	; 0x0b
    1d82:	22 ff       	sbrs	r18, 2
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    1d86:	90 87       	std	Z+8, r25	; 0x08
    1d88:	87 83       	std	Z+7, r24	; 0x07
    1d8a:	08 c0       	rjmp	.+16     	; 0x1d9c <nwkRoutePrepareTx+0x38>
    1d8c:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    1d8e:	63 85       	ldd	r22, Z+11	; 0x0b
    1d90:	63 fb       	bst	r22, 3
    1d92:	66 27       	eor	r22, r22
    1d94:	60 f9       	bld	r22, 0
    1d96:	41 df       	rcall	.-382    	; 0x1c1a <NWK_RouteNextHop>
    1d98:	98 87       	std	Y+8, r25	; 0x08
    1d9a:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	08 95       	ret

00001da2 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1da2:	af 92       	push	r10
    1da4:	bf 92       	push	r11
    1da6:	cf 92       	push	r12
    1da8:	df 92       	push	r13
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    1db6:	1b 85       	ldd	r17, Y+11	; 0x0b
    1db8:	13 fb       	bst	r17, 3
    1dba:	11 27       	eor	r17, r17
    1dbc:	10 f9       	bld	r17, 0
    1dbe:	cf 84       	ldd	r12, Y+15	; 0x0f
    1dc0:	d8 88       	ldd	r13, Y+16	; 0x10
    1dc2:	61 2f       	mov	r22, r17
    1dc4:	c6 01       	movw	r24, r12
    1dc6:	29 df       	rcall	.-430    	; 0x1c1a <NWK_RouteNextHop>
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	59 f0       	breq	.+22     	; 0x1de2 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e9 57       	subi	r30, 0x79	; 121
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	11 82       	std	Z+1, r1	; 0x01
    1dd4:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1dd6:	31 97       	sbiw	r30, 0x01	; 1
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
    1dda:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    1ddc:	ce 01       	movw	r24, r28
    1dde:	78 d3       	rcall	.+1776   	; 0x24d0 <nwkTxFrame>
    1de0:	22 c0       	rjmp	.+68     	; 0x1e26 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    1de2:	ad 84       	ldd	r10, Y+13	; 0x0d
    1de4:	be 84       	ldd	r11, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    1de6:	1c de       	rcall	.-968    	; 0x1a20 <nwkFrameAlloc>
    1de8:	7c 01       	movw	r14, r24
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	d1 f0       	breq	.+52     	; 0x1e22 <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
    1dee:	7d de       	rcall	.-774    	; 0x1aea <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    1df0:	f7 01       	movw	r30, r14
    1df2:	81 81       	ldd	r24, Z+1	; 0x01
    1df4:	8a 5f       	subi	r24, 0xFA	; 250
    1df6:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    1df8:	e9 57       	subi	r30, 0x79	; 121
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	11 82       	std	Z+1, r1	; 0x01
    1dfe:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    1e00:	f7 01       	movw	r30, r14
    1e02:	b0 8a       	std	Z+16, r11	; 0x10
    1e04:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    1e06:	ef 57       	subi	r30, 0x7F	; 127
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	f0 81       	ld	r31, Z
    1e0e:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 83       	st	Z, r24
  command->srcAddr = src;
    1e14:	b2 82       	std	Z+2, r11	; 0x02
    1e16:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
    1e18:	d4 82       	std	Z+4, r13	; 0x04
    1e1a:	c3 82       	std	Z+3, r12	; 0x03
  command->multicast = multicast;
    1e1c:	15 83       	std	Z+5, r17	; 0x05

  nwkTxFrame(frame);
    1e1e:	c7 01       	movw	r24, r14
    1e20:	57 d3       	rcall	.+1710   	; 0x24d0 <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    1e22:	ce 01       	movw	r24, r28
    1e24:	36 de       	rcall	.-916    	; 0x1a92 <nwkFrameFree>
  }
}
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	bf 90       	pop	r11
    1e36:	af 90       	pop	r10
    1e38:	08 95       	ret

00001e3a <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	17 96       	adiw	r26, 0x07	; 7
    1e3e:	ed 91       	ld	r30, X+
    1e40:	fc 91       	ld	r31, X
    1e42:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    1e44:	19 96       	adiw	r26, 0x09	; 9
    1e46:	8c 91       	ld	r24, X
    1e48:	86 30       	cpi	r24, 0x06	; 6
    1e4a:	31 f4       	brne	.+12     	; 0x1e58 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    1e4c:	65 81       	ldd	r22, Z+5	; 0x05
    1e4e:	83 81       	ldd	r24, Z+3	; 0x03
    1e50:	94 81       	ldd	r25, Z+4	; 0x04
    1e52:	ed de       	rcall	.-550    	; 0x1c2e <nwkRouteRemove>

  return true;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    1e58:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    1e5a:	08 95       	ret

00001e5c <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	19 96       	adiw	r26, 0x09	; 9
    1e60:	2c 91       	ld	r18, X
    1e62:	19 97       	sbiw	r26, 0x09	; 9
    1e64:	22 23       	and	r18, r18
    1e66:	71 f0       	breq	.+28     	; 0x1e84 <nwkRxServiceDataInd+0x28>
    1e68:	17 96       	adiw	r26, 0x07	; 7
    1e6a:	ed 91       	ld	r30, X+
    1e6c:	fc 91       	ld	r31, X
    1e6e:	18 97       	sbiw	r26, 0x08	; 8
    1e70:	20 81       	ld	r18, Z
    1e72:	22 23       	and	r18, r18
    1e74:	19 f0       	breq	.+6      	; 0x1e7c <nwkRxServiceDataInd+0x20>
    1e76:	21 30       	cpi	r18, 0x01	; 1
    1e78:	19 f0       	breq	.+6      	; 0x1e80 <nwkRxServiceDataInd+0x24>
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <nwkRxServiceDataInd+0x2c>
    1e7c:	bd c3       	rjmp	.+1914   	; 0x25f8 <nwkTxAckReceived>
    1e7e:	08 95       	ret
    1e80:	dc cf       	rjmp	.-72     	; 0x1e3a <nwkRouteErrorReceived>
    1e82:	08 95       	ret
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	08 95       	ret
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	08 95       	ret

00001e8c <nwkRxDuplicateRejectionTimerHandler>:
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	ee e0       	ldi	r30, 0x0E	; 14
    1e90:	f1 e2       	ldi	r31, 0x21	; 33
    1e92:	20 e4       	ldi	r18, 0x40	; 64
    1e94:	31 e2       	ldi	r19, 0x21	; 33
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	51 e0       	ldi	r21, 0x01	; 1
    1e9a:	90 81       	ld	r25, Z
    1e9c:	99 23       	and	r25, r25
    1e9e:	19 f0       	breq	.+6      	; 0x1ea6 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    1ea0:	91 50       	subi	r25, 0x01	; 1
    1ea2:	90 83       	st	Z, r25
    1ea4:	45 2f       	mov	r20, r21
    1ea6:	35 96       	adiw	r30, 0x05	; 5
    1ea8:	e2 17       	cp	r30, r18
    1eaa:	f3 07       	cpc	r31, r19
    1eac:	b1 f7       	brne	.-20     	; 0x1e9a <nwkRxDuplicateRejectionTimerHandler+0xe>
    1eae:	44 23       	and	r20, r20
    1eb0:	11 f0       	breq	.+4      	; 0x1eb6 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	ac c6       	rjmp	.+3416   	; 0x2c0e <SYS_TimerStart>
    1eb6:	08 95       	ret

00001eb8 <nwkRxInit>:
    1eb8:	ee e0       	ldi	r30, 0x0E	; 14
    1eba:	f1 e2       	ldi	r31, 0x21	; 33
    1ebc:	80 e4       	ldi	r24, 0x40	; 64
    1ebe:	91 e2       	ldi	r25, 0x21	; 33
    1ec0:	10 82       	st	Z, r1
    1ec2:	35 96       	adiw	r30, 0x05	; 5
    1ec4:	e8 17       	cp	r30, r24
    1ec6:	f9 07       	cpc	r31, r25
    1ec8:	d9 f7       	brne	.-10     	; 0x1ec0 <nwkRxInit+0x8>
    1eca:	ec ef       	ldi	r30, 0xFC	; 252
    1ecc:	f0 e2       	ldi	r31, 0x20	; 32
    1ece:	84 e6       	ldi	r24, 0x64	; 100
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a0 e0       	ldi	r26, 0x00	; 0
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	86 83       	std	Z+6, r24	; 0x06
    1ed8:	97 83       	std	Z+7, r25	; 0x07
    1eda:	a0 87       	std	Z+8, r26	; 0x08
    1edc:	b1 87       	std	Z+9, r27	; 0x09
    1ede:	12 86       	std	Z+10, r1	; 0x0a
    1ee0:	86 e4       	ldi	r24, 0x46	; 70
    1ee2:	9f e0       	ldi	r25, 0x0F	; 15
    1ee4:	94 87       	std	Z+12, r25	; 0x0c
    1ee6:	83 87       	std	Z+11, r24	; 0x0b
    1ee8:	6e e2       	ldi	r22, 0x2E	; 46
    1eea:	7f e0       	ldi	r23, 0x0F	; 15
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	91 cc       	rjmp	.-1758   	; 0x1812 <NWK_OpenEndpoint>
    1ef0:	08 95       	ret

00001ef2 <PHY_DataInd>:
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	ed 91       	ld	r30, X+
    1efa:	fc 91       	ld	r31, X
    1efc:	11 97       	sbiw	r26, 0x01	; 1
    1efe:	21 81       	ldd	r18, Z+1	; 0x01
    1f00:	28 38       	cpi	r18, 0x88	; 136
    1f02:	f9 f4       	brne	.+62     	; 0x1f42 <PHY_DataInd+0x50>
    1f04:	20 81       	ld	r18, Z
    1f06:	2f 7d       	andi	r18, 0xDF	; 223
    1f08:	21 34       	cpi	r18, 0x41	; 65
    1f0a:	d9 f4       	brne	.+54     	; 0x1f42 <PHY_DataInd+0x50>
    1f0c:	12 96       	adiw	r26, 0x02	; 2
    1f0e:	2c 91       	ld	r18, X
    1f10:	20 31       	cpi	r18, 0x10	; 16
    1f12:	b8 f0       	brcs	.+46     	; 0x1f42 <PHY_DataInd+0x50>
    1f14:	ec 01       	movw	r28, r24
    1f16:	84 dd       	rcall	.-1272   	; 0x1a20 <nwkFrameAlloc>
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	99 f0       	breq	.+38     	; 0x1f42 <PHY_DataInd+0x50>
    1f1c:	20 e2       	ldi	r18, 0x20	; 32
    1f1e:	fc 01       	movw	r30, r24
    1f20:	20 83       	st	Z, r18
    1f22:	2a 81       	ldd	r18, Y+2	; 0x02
    1f24:	21 83       	std	Z+1, r18	; 0x01
    1f26:	2b 81       	ldd	r18, Y+3	; 0x03
    1f28:	ed 57       	subi	r30, 0x7D	; 125
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	20 83       	st	Z, r18
    1f2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f30:	31 96       	adiw	r30, 0x01	; 1
    1f32:	20 83       	st	Z, r18
    1f34:	4a 81       	ldd	r20, Y+2	; 0x02
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	68 81       	ld	r22, Y
    1f3a:	79 81       	ldd	r23, Y+1	; 0x01
    1f3c:	02 96       	adiw	r24, 0x02	; 2
    1f3e:	0e 94 14 4e 	call	0x9c28	; 0x9c28 <memcpy>
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1f48:	2f 92       	push	r2
    1f4a:	3f 92       	push	r3
    1f4c:	4f 92       	push	r4
    1f4e:	5f 92       	push	r5
    1f50:	6f 92       	push	r6
    1f52:	7f 92       	push	r7
    1f54:	8f 92       	push	r8
    1f56:	9f 92       	push	r9
    1f58:	af 92       	push	r10
    1f5a:	bf 92       	push	r11
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	2e 97       	sbiw	r28, 0x0e	; 14
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1f7c:	00 e0       	ldi	r16, 0x00	; 0
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1f80:	0f 2e       	mov	r0, r31
    1f82:	f4 e2       	ldi	r31, 0x24	; 36
    1f84:	df 2e       	mov	r13, r31
    1f86:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1f88:	0f 2e       	mov	r0, r31
    1f8a:	fb e6       	ldi	r31, 0x6B	; 107
    1f8c:	8f 2e       	mov	r8, r31
    1f8e:	f3 e2       	ldi	r31, 0x23	; 35
    1f90:	9f 2e       	mov	r9, r31
    1f92:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1f94:	68 94       	set
    1f96:	cc 24       	eor	r12, r12
    1f98:	c4 f8       	bld	r12, 4
    1f9a:	0f 2e       	mov	r0, r31
    1f9c:	fe e0       	ldi	r31, 0x0E	; 14
    1f9e:	4f 2e       	mov	r4, r31
    1fa0:	f1 e2       	ldi	r31, 0x21	; 33
    1fa2:	5f 2e       	mov	r5, r31
    1fa4:	f0 2d       	mov	r31, r0
    1fa6:	0f 2e       	mov	r0, r31
    1fa8:	fa e0       	ldi	r31, 0x0A	; 10
    1faa:	6f 2e       	mov	r6, r31
    1fac:	f1 e2       	ldi	r31, 0x21	; 33
    1fae:	7f 2e       	mov	r7, r31
    1fb0:	f0 2d       	mov	r31, r0
    1fb2:	0f 2e       	mov	r0, r31
    1fb4:	fc e3       	ldi	r31, 0x3C	; 60
    1fb6:	ef 2e       	mov	r14, r31
    1fb8:	f1 e2       	ldi	r31, 0x21	; 33
    1fba:	ff 2e       	mov	r15, r31
    1fbc:	f0 2d       	mov	r31, r0

  if (nwkIb.addr == header->nwkSrcAddr)
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1fbe:	31 2c       	mov	r3, r1
    1fc0:	21 2c       	mov	r2, r1
    1fc2:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1fc4:	dd c1       	rjmp	.+954    	; 0x2380 <nwkRxTaskHandler+0x438>
  {
    switch (frame->state)
    1fc6:	d5 01       	movw	r26, r10
    1fc8:	8c 91       	ld	r24, X
    1fca:	82 32       	cpi	r24, 0x22	; 34
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <nwkRxTaskHandler+0x88>
    1fce:	07 c1       	rjmp	.+526    	; 0x21de <nwkRxTaskHandler+0x296>
    1fd0:	18 f4       	brcc	.+6      	; 0x1fd8 <nwkRxTaskHandler+0x90>
    1fd2:	80 32       	cpi	r24, 0x20	; 32
    1fd4:	41 f0       	breq	.+16     	; 0x1fe6 <nwkRxTaskHandler+0x9e>
    1fd6:	d4 c1       	rjmp	.+936    	; 0x2380 <nwkRxTaskHandler+0x438>
    1fd8:	83 32       	cpi	r24, 0x23	; 35
    1fda:	09 f4       	brne	.+2      	; 0x1fde <nwkRxTaskHandler+0x96>
    1fdc:	cc c1       	rjmp	.+920    	; 0x2376 <nwkRxTaskHandler+0x42e>
    1fde:	84 32       	cpi	r24, 0x24	; 36
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <nwkRxTaskHandler+0x9c>
    1fe2:	cc c1       	rjmp	.+920    	; 0x237c <nwkRxTaskHandler+0x434>
    1fe4:	cd c1       	rjmp	.+922    	; 0x2380 <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    1fe6:	f5 01       	movw	r30, r10
    1fe8:	d0 82       	st	Z, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1fea:	83 85       	ldd	r24, Z+11	; 0x0b
    1fec:	98 2f       	mov	r25, r24
    1fee:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <nwkRxTaskHandler+0xac>
    1ff2:	c6 c1       	rjmp	.+908    	; 0x2380 <nwkRxTaskHandler+0x438>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1ff4:	25 81       	ldd	r18, Z+5	; 0x05
    1ff6:	36 81       	ldd	r19, Z+6	; 0x06
    1ff8:	2f 3f       	cpi	r18, 0xFF	; 255
    1ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffc:	91 f4       	brne	.+36     	; 0x2022 <nwkRxTaskHandler+0xda>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1ffe:	d5 01       	movw	r26, r10
    2000:	1f 96       	adiw	r26, 0x0f	; 15
    2002:	8d 91       	ld	r24, X+
    2004:	9c 91       	ld	r25, X
    2006:	50 97       	sbiw	r26, 0x10	; 16
    2008:	f4 01       	movw	r30, r8
    200a:	20 81       	ld	r18, Z
    200c:	31 81       	ldd	r19, Z+1	; 0x01
    200e:	28 17       	cp	r18, r24
    2010:	39 07       	cpc	r19, r25
    2012:	19 f0       	breq	.+6      	; 0x201a <nwkRxTaskHandler+0xd2>
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	09 f0       	breq	.+2      	; 0x201a <nwkRxTaskHandler+0xd2>
    2018:	b3 c1       	rjmp	.+870    	; 0x2380 <nwkRxTaskHandler+0x438>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    201a:	e2 e2       	ldi	r30, 0x22	; 34
    201c:	d5 01       	movw	r26, r10
    201e:	ec 93       	st	X, r30
    2020:	af c1       	rjmp	.+862    	; 0x2380 <nwkRxTaskHandler+0x438>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    2022:	d5 01       	movw	r26, r10
    2024:	1f 96       	adiw	r26, 0x0f	; 15
    2026:	2d 91       	ld	r18, X+
    2028:	3c 91       	ld	r19, X
    202a:	50 97       	sbiw	r26, 0x10	; 16
    202c:	2f 3f       	cpi	r18, 0xFF	; 255
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	11 f4       	brne	.+4      	; 0x2036 <nwkRxTaskHandler+0xee>
    2032:	80 fd       	sbrc	r24, 0
    2034:	a5 c1       	rjmp	.+842    	; 0x2380 <nwkRxTaskHandler+0x438>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    2036:	f4 01       	movw	r30, r8
    2038:	20 81       	ld	r18, Z
    203a:	31 81       	ldd	r19, Z+1	; 0x01
    203c:	d5 01       	movw	r26, r10
    203e:	1d 96       	adiw	r26, 0x0d	; 13
    2040:	8d 91       	ld	r24, X+
    2042:	9c 91       	ld	r25, X
    2044:	1e 97       	sbiw	r26, 0x0e	; 14
    2046:	28 17       	cp	r18, r24
    2048:	39 07       	cpc	r19, r25
    204a:	09 f4       	brne	.+2      	; 0x204e <nwkRxTaskHandler+0x106>
    204c:	99 c1       	rjmp	.+818    	; 0x2380 <nwkRxTaskHandler+0x438>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    204e:	c5 01       	movw	r24, r10
    2050:	f3 dd       	rcall	.-1050   	; 0x1c38 <nwkRouteFrameReceived>
    2052:	f3 01       	movw	r30, r6
    2054:	43 2d       	mov	r20, r3
    2056:	52 2d       	mov	r21, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2058:	63 2d       	mov	r22, r3
    205a:	72 2d       	mov	r23, r2
    205c:	5e 86       	std	Y+14, r5	; 0x0e
    205e:	4d 86       	std	Y+13, r4	; 0x0d

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    2060:	ad 85       	ldd	r26, Y+13	; 0x0d
    2062:	be 85       	ldd	r27, Y+14	; 0x0e
    2064:	8c 91       	ld	r24, X
    2066:	88 23       	and	r24, r24
    2068:	09 f4       	brne	.+2      	; 0x206c <nwkRxTaskHandler+0x124>
    206a:	6c c0       	rjmp	.+216    	; 0x2144 <nwkRxTaskHandler+0x1fc>
    206c:	d5 01       	movw	r26, r10
    206e:	1d 96       	adiw	r26, 0x0d	; 13
    2070:	2d 91       	ld	r18, X+
    2072:	3c 91       	ld	r19, X
    2074:	1e 97       	sbiw	r26, 0x0e	; 14
    2076:	80 81       	ld	r24, Z
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	28 17       	cp	r18, r24
    207c:	39 07       	cpc	r19, r25
    207e:	09 f0       	breq	.+2      	; 0x2082 <nwkRxTaskHandler+0x13a>
    2080:	62 c0       	rjmp	.+196    	; 0x2146 <nwkRxTaskHandler+0x1fe>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2082:	f5 01       	movw	r30, r10
    2084:	94 85       	ldd	r25, Z+12	; 0x0c
    2086:	fa 01       	movw	r30, r20
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	ee 0f       	add	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	e4 0f       	add	r30, r20
    2092:	f5 1f       	adc	r31, r21
    2094:	e6 5f       	subi	r30, 0xF6	; 246
    2096:	fe 4d       	sbci	r31, 0xDE	; 222
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	89 1b       	sub	r24, r25

      if (diff < 8)
    209c:	88 30       	cpi	r24, 0x08	; 8
    209e:	c8 f5       	brcc	.+114    	; 0x2112 <nwkRxTaskHandler+0x1ca>
      {
        if (entry->mask & (1 << diff))
    20a0:	fa 01       	movw	r30, r20
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e4 0f       	add	r30, r20
    20ac:	f5 1f       	adc	r31, r21
    20ae:	e6 5f       	subi	r30, 0xF6	; 246
    20b0:	fe 4d       	sbci	r31, 0xDE	; 222
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	29 2f       	mov	r18, r25
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	08 2e       	mov	r0, r24
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <nwkRxTaskHandler+0x178>
    20bc:	35 95       	asr	r19
    20be:	27 95       	ror	r18
    20c0:	0a 94       	dec	r0
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <nwkRxTaskHandler+0x174>
    20c4:	20 ff       	sbrs	r18, 0
    20c6:	12 c0       	rjmp	.+36     	; 0x20ec <nwkRxTaskHandler+0x1a4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    20c8:	d4 01       	movw	r26, r8
    20ca:	2d 91       	ld	r18, X+
    20cc:	3c 91       	ld	r19, X
    20ce:	f5 01       	movw	r30, r10
    20d0:	87 81       	ldd	r24, Z+7	; 0x07
    20d2:	90 85       	ldd	r25, Z+8	; 0x08
    20d4:	28 17       	cp	r18, r24
    20d6:	39 07       	cpc	r19, r25
    20d8:	09 f0       	breq	.+2      	; 0x20dc <nwkRxTaskHandler+0x194>
    20da:	52 c1       	rjmp	.+676    	; 0x2380 <nwkRxTaskHandler+0x438>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    20dc:	63 85       	ldd	r22, Z+11	; 0x0b
    20de:	63 fb       	bst	r22, 3
    20e0:	66 27       	eor	r22, r22
    20e2:	60 f9       	bld	r22, 0
    20e4:	87 85       	ldd	r24, Z+15	; 0x0f
    20e6:	90 89       	ldd	r25, Z+16	; 0x10
    20e8:	a2 dd       	rcall	.-1212   	; 0x1c2e <nwkRouteRemove>
    20ea:	4a c1       	rjmp	.+660    	; 0x2380 <nwkRxTaskHandler+0x438>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    20ec:	fa 01       	movw	r30, r20
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	ee 0f       	add	r30, r30
    20f4:	ff 1f       	adc	r31, r31
    20f6:	e4 0f       	add	r30, r20
    20f8:	f5 1f       	adc	r31, r21
    20fa:	e6 5f       	subi	r30, 0xF6	; 246
    20fc:	fe 4d       	sbci	r31, 0xDE	; 222
    20fe:	21 e0       	ldi	r18, 0x01	; 1
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <nwkRxTaskHandler+0x1c0>
    2104:	22 0f       	add	r18, r18
    2106:	33 1f       	adc	r19, r19
    2108:	8a 95       	dec	r24
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <nwkRxTaskHandler+0x1bc>
    210c:	92 2b       	or	r25, r18
    210e:	93 83       	std	Z+3, r25	; 0x03
    2110:	3e c1       	rjmp	.+636    	; 0x238e <nwkRxTaskHandler+0x446>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    2112:	fa 01       	movw	r30, r20
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	e4 0f       	add	r30, r20
    211e:	f5 1f       	adc	r31, r21
    2120:	e6 5f       	subi	r30, 0xF6	; 246
    2122:	fe 4d       	sbci	r31, 0xDE	; 222
    2124:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    2126:	23 81       	ldd	r18, Z+3	; 0x03
    2128:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    212a:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
    212c:	a9 01       	movw	r20, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <nwkRxTaskHandler+0x1ec>
    2130:	44 0f       	add	r20, r20
    2132:	55 1f       	adc	r21, r21
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <nwkRxTaskHandler+0x1e8>
    2138:	ca 01       	movw	r24, r20
    213a:	81 60       	ori	r24, 0x01	; 1
    213c:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    213e:	8f e1       	ldi	r24, 0x1F	; 31
    2140:	84 83       	std	Z+4, r24	; 0x04
    2142:	25 c1       	rjmp	.+586    	; 0x238e <nwkRxTaskHandler+0x446>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    2144:	bf 01       	movw	r22, r30
    2146:	4f 5f       	subi	r20, 0xFF	; 255
    2148:	5f 4f       	sbci	r21, 0xFF	; 255
    214a:	8d 85       	ldd	r24, Y+13	; 0x0d
    214c:	9e 85       	ldd	r25, Y+14	; 0x0e
    214e:	05 96       	adiw	r24, 0x05	; 5
    2150:	9e 87       	std	Y+14, r25	; 0x0e
    2152:	8d 87       	std	Y+13, r24	; 0x0d
    2154:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    2156:	ee 15       	cp	r30, r14
    2158:	ff 05       	cpc	r31, r15
    215a:	09 f0       	breq	.+2      	; 0x215e <nwkRxTaskHandler+0x216>
    215c:	81 cf       	rjmp	.-254    	; 0x2060 <nwkRxTaskHandler+0x118>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    215e:	61 15       	cp	r22, r1
    2160:	71 05       	cpc	r23, r1
    2162:	09 f4       	brne	.+2      	; 0x2166 <nwkRxTaskHandler+0x21e>
    2164:	0d c1       	rjmp	.+538    	; 0x2380 <nwkRxTaskHandler+0x438>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    2166:	d5 01       	movw	r26, r10
    2168:	1d 96       	adiw	r26, 0x0d	; 13
    216a:	8d 91       	ld	r24, X+
    216c:	9c 91       	ld	r25, X
    216e:	1e 97       	sbiw	r26, 0x0e	; 14
    2170:	fb 01       	movw	r30, r22
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    2176:	1c 96       	adiw	r26, 0x0c	; 12
    2178:	8c 91       	ld	r24, X
    217a:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    217c:	21 e0       	ldi	r18, 0x01	; 1
    217e:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2180:	8f e1       	ldi	r24, 0x1F	; 31
    2182:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2184:	8c ef       	ldi	r24, 0xFC	; 252
    2186:	90 e2       	ldi	r25, 0x20	; 32
    2188:	42 d5       	rcall	.+2692   	; 0x2c0e <SYS_TimerStart>
    218a:	01 c1       	rjmp	.+514    	; 0x238e <nwkRxTaskHandler+0x446>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    218c:	d4 01       	movw	r26, r8
    218e:	2d 91       	ld	r18, X+
    2190:	3c 91       	ld	r19, X
    2192:	f5 01       	movw	r30, r10
    2194:	87 85       	ldd	r24, Z+15	; 0x0f
    2196:	90 89       	ldd	r25, Z+16	; 0x10
    2198:	28 17       	cp	r18, r24
    219a:	39 07       	cpc	r19, r25
    219c:	81 f0       	breq	.+32     	; 0x21be <nwkRxTaskHandler+0x276>
        0 == header->nwkFcf.linkLocal)
    219e:	43 85       	ldd	r20, Z+11	; 0x0b
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    21a0:	42 fd       	sbrc	r20, 2
    21a2:	0b c0       	rjmp	.+22     	; 0x21ba <nwkRxTaskHandler+0x272>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    21a4:	c5 01       	movw	r24, r10
    21a6:	e3 d1       	rcall	.+966    	; 0x256e <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    21a8:	d4 01       	movw	r26, r8
    21aa:	2d 91       	ld	r18, X+
    21ac:	3c 91       	ld	r19, X
    21ae:	f5 01       	movw	r30, r10
    21b0:	87 85       	ldd	r24, Z+15	; 0x0f
    21b2:	90 89       	ldd	r25, Z+16	; 0x10
    21b4:	28 17       	cp	r18, r24
    21b6:	39 07       	cpc	r19, r25
    21b8:	11 f0       	breq	.+4      	; 0x21be <nwkRxTaskHandler+0x276>
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	21 f4       	brne	.+8      	; 0x21c6 <nwkRxTaskHandler+0x27e>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    21be:	e2 e2       	ldi	r30, 0x22	; 34
    21c0:	d5 01       	movw	r26, r10
    21c2:	ec 93       	st	X, r30
    21c4:	dd c0       	rjmp	.+442    	; 0x2380 <nwkRxTaskHandler+0x438>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    21c6:	d5 01       	movw	r26, r10
    21c8:	17 96       	adiw	r26, 0x07	; 7
    21ca:	8d 91       	ld	r24, X+
    21cc:	9c 91       	ld	r25, X
    21ce:	18 97       	sbiw	r26, 0x08	; 8
    21d0:	28 17       	cp	r18, r24
    21d2:	39 07       	cpc	r19, r25
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <nwkRxTaskHandler+0x290>
    21d6:	d4 c0       	rjmp	.+424    	; 0x2380 <nwkRxTaskHandler+0x438>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    21d8:	83 e2       	ldi	r24, 0x23	; 35
    21da:	8c 93       	st	X, r24
    21dc:	d1 c0       	rjmp	.+418    	; 0x2380 <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    21de:	10 92 09 21 	sts	0x2109, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    21e2:	f5 01       	movw	r30, r10
    21e4:	21 89       	ldd	r18, Z+17	; 0x11
    21e6:	22 95       	swap	r18
    21e8:	2f 70       	andi	r18, 0x0F	; 15
    21ea:	e2 2f       	mov	r30, r18
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	ef 58       	subi	r30, 0x8F	; 143
    21f4:	fc 4d       	sbci	r31, 0xDC	; 220
    21f6:	01 90       	ld	r0, Z+
    21f8:	f0 81       	ld	r31, Z
    21fa:	e0 2d       	mov	r30, r0
    21fc:	30 97       	sbiw	r30, 0x00	; 0
    21fe:	09 f4       	brne	.+2      	; 0x2202 <nwkRxTaskHandler+0x2ba>
    2200:	63 c0       	rjmp	.+198    	; 0x22c8 <nwkRxTaskHandler+0x380>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    2202:	d5 01       	movw	r26, r10
    2204:	1d 96       	adiw	r26, 0x0d	; 13
    2206:	8d 91       	ld	r24, X+
    2208:	9c 91       	ld	r25, X
    220a:	1e 97       	sbiw	r26, 0x0e	; 14
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    2210:	1f 96       	adiw	r26, 0x0f	; 15
    2212:	4d 91       	ld	r20, X+
    2214:	5c 91       	ld	r21, X
    2216:	50 97       	sbiw	r26, 0x10	; 16
    2218:	5c 83       	std	Y+4, r21	; 0x04
    221a:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    221c:	51 96       	adiw	r26, 0x11	; 17
    221e:	3c 91       	ld	r19, X
    2220:	51 97       	sbiw	r26, 0x11	; 17
    2222:	3f 70       	andi	r19, 0x0F	; 15
    2224:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    2226:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
    2228:	af 57       	subi	r26, 0x7F	; 127
    222a:	bf 4f       	sbci	r27, 0xFF	; 255
    222c:	6d 91       	ld	r22, X+
    222e:	7c 91       	ld	r23, X
    2230:	79 87       	std	Y+9, r23	; 0x09
    2232:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    2234:	95 01       	movw	r18, r10
    2236:	2e 5f       	subi	r18, 0xFE	; 254
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	26 1b       	sub	r18, r22
    223c:	37 0b       	sbc	r19, r23
    223e:	d5 01       	movw	r26, r10
    2240:	11 96       	adiw	r26, 0x01	; 1
    2242:	3c 91       	ld	r19, X
    2244:	11 97       	sbiw	r26, 0x01	; 1
    2246:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
    2248:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
    224a:	ad 57       	subi	r26, 0x7D	; 125
    224c:	bf 4f       	sbci	r27, 0xFF	; 255
    224e:	2c 91       	ld	r18, X
    2250:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
    2252:	11 96       	adiw	r26, 0x01	; 1
    2254:	2c 91       	ld	r18, X
    2256:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2258:	d5 01       	movw	r26, r10
    225a:	1b 96       	adiw	r26, 0x0b	; 11
    225c:	2c 91       	ld	r18, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    225e:	62 2f       	mov	r22, r18
    2260:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2262:	22 fd       	sbrc	r18, 2
    2264:	02 c0       	rjmp	.+4      	; 0x226a <nwkRxTaskHandler+0x322>
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	01 c0       	rjmp	.+2      	; 0x226c <nwkRxTaskHandler+0x324>
    226a:	30 e2       	ldi	r19, 0x20	; 32
    226c:	63 2b       	or	r22, r19
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    226e:	23 fd       	sbrc	r18, 3
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <nwkRxTaskHandler+0x32e>
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <nwkRxTaskHandler+0x330>
    2276:	30 e4       	ldi	r19, 0x40	; 64
    2278:	26 2f       	mov	r18, r22
    227a:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    227c:	4f 3f       	cpi	r20, 0xFF	; 255
    227e:	5f 4f       	sbci	r21, 0xFF	; 255
    2280:	11 f0       	breq	.+4      	; 0x2286 <nwkRxTaskHandler+0x33e>
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <nwkRxTaskHandler+0x340>
    2286:	34 e0       	ldi	r19, 0x04	; 4
    2288:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    228a:	d5 01       	movw	r26, r10
    228c:	19 96       	adiw	r26, 0x09	; 9
    228e:	4d 91       	ld	r20, X+
    2290:	5c 91       	ld	r21, X
    2292:	1a 97       	sbiw	r26, 0x0a	; 10
    2294:	84 17       	cp	r24, r20
    2296:	95 07       	cpc	r25, r21
    2298:	11 f0       	breq	.+4      	; 0x229e <nwkRxTaskHandler+0x356>
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <nwkRxTaskHandler+0x358>
    229e:	98 e0       	ldi	r25, 0x08	; 8
    22a0:	82 2f       	mov	r24, r18
    22a2:	89 2b       	or	r24, r25
    22a4:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    22a6:	d5 01       	movw	r26, r10
    22a8:	15 96       	adiw	r26, 0x05	; 5
    22aa:	2d 91       	ld	r18, X+
    22ac:	3c 91       	ld	r19, X
    22ae:	16 97       	sbiw	r26, 0x06	; 6
    22b0:	2f 3f       	cpi	r18, 0xFF	; 255
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	11 f0       	breq	.+4      	; 0x22ba <nwkRxTaskHandler+0x372>
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <nwkRxTaskHandler+0x374>
    22ba:	9c 2d       	mov	r25, r12
    22bc:	89 2b       	or	r24, r25
    22be:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	19 95       	eicall
    22c6:	01 c0       	rjmp	.+2      	; 0x22ca <nwkRxTaskHandler+0x382>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    22c8:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    22ca:	f5 01       	movw	r30, r10
    22cc:	93 85       	ldd	r25, Z+11	; 0x0b
    22ce:	90 ff       	sbrs	r25, 0
    ack = false;
    22d0:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    22d2:	d5 01       	movw	r26, r10
    22d4:	17 96       	adiw	r26, 0x07	; 7
    22d6:	2d 91       	ld	r18, X+
    22d8:	3c 91       	ld	r19, X
    22da:	18 97       	sbiw	r26, 0x08	; 8
    22dc:	2f 3f       	cpi	r18, 0xFF	; 255
    22de:	3f 4f       	sbci	r19, 0xFF	; 255
    22e0:	69 f4       	brne	.+26     	; 0x22fc <nwkRxTaskHandler+0x3b4>
    22e2:	f4 01       	movw	r30, r8
    22e4:	40 81       	ld	r20, Z
    22e6:	51 81       	ldd	r21, Z+1	; 0x01
    22e8:	d5 01       	movw	r26, r10
    22ea:	1f 96       	adiw	r26, 0x0f	; 15
    22ec:	2d 91       	ld	r18, X+
    22ee:	3c 91       	ld	r19, X
    22f0:	50 97       	sbiw	r26, 0x10	; 16
    22f2:	42 17       	cp	r20, r18
    22f4:	53 07       	cpc	r21, r19
    22f6:	11 f4       	brne	.+4      	; 0x22fc <nwkRxTaskHandler+0x3b4>
      nwkIb.addr == frame->header.nwkDstAddr &&
    22f8:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    22fa:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    22fc:	f5 01       	movw	r30, r10
    22fe:	25 81       	ldd	r18, Z+5	; 0x05
    2300:	36 81       	ldd	r19, Z+6	; 0x06
    2302:	2f 3f       	cpi	r18, 0xFF	; 255
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	a1 f1       	breq	.+104    	; 0x2370 <nwkRxTaskHandler+0x428>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    2308:	d4 01       	movw	r26, r8
    230a:	2d 91       	ld	r18, X+
    230c:	3c 91       	ld	r19, X
    230e:	2f 3f       	cpi	r18, 0xFF	; 255
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
    2312:	71 f1       	breq	.+92     	; 0x2370 <nwkRxTaskHandler+0x428>
    ack = false;

  if (ack)
    2314:	88 23       	and	r24, r24
    2316:	61 f1       	breq	.+88     	; 0x2370 <nwkRxTaskHandler+0x428>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    2318:	83 db       	rcall	.-2298   	; 0x1a20 <nwkFrameAlloc>
    231a:	8c 01       	movw	r16, r24
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	41 f1       	breq	.+80     	; 0x2370 <nwkRxTaskHandler+0x428>
    return;

  nwkFrameCommandInit(ack);
    2320:	e4 db       	rcall	.-2104   	; 0x1aea <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    2322:	f8 01       	movw	r30, r16
    2324:	81 81       	ldd	r24, Z+1	; 0x01
    2326:	8d 5f       	subi	r24, 0xFD	; 253
    2328:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    232a:	e9 57       	subi	r30, 0x79	; 121
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	11 82       	std	Z+1, r1	; 0x01
    2330:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2332:	d5 01       	movw	r26, r10
    2334:	1b 96       	adiw	r26, 0x0b	; 11
    2336:	8c 91       	ld	r24, X
    2338:	1b 97       	sbiw	r26, 0x0b	; 11
    233a:	86 95       	lsr	r24
    233c:	81 70       	andi	r24, 0x01	; 1
    233e:	f8 01       	movw	r30, r16
    2340:	93 85       	ldd	r25, Z+11	; 0x0b
    2342:	80 fb       	bst	r24, 0
    2344:	91 f9       	bld	r25, 1
    2346:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2348:	1d 96       	adiw	r26, 0x0d	; 13
    234a:	8d 91       	ld	r24, X+
    234c:	9c 91       	ld	r25, X
    234e:	1e 97       	sbiw	r26, 0x0e	; 14
    2350:	90 8b       	std	Z+16, r25	; 0x10
    2352:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    2354:	ef 57       	subi	r30, 0x7F	; 127
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	01 90       	ld	r0, Z+
    235a:	f0 81       	ld	r31, Z
    235c:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    235e:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    2360:	80 91 09 21 	lds	r24, 0x2109
    2364:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    2366:	1c 96       	adiw	r26, 0x0c	; 12
    2368:	8c 91       	ld	r24, X
    236a:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    236c:	c8 01       	movw	r24, r16
    236e:	b0 d0       	rcall	.+352    	; 0x24d0 <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    2370:	d5 01       	movw	r26, r10
    2372:	dc 92       	st	X, r13
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <nwkRxTaskHandler+0x438>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    2376:	c5 01       	movw	r24, r10
    2378:	14 dd       	rcall	.-1496   	; 0x1da2 <nwkRouteFrame>
      } break;
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <nwkRxTaskHandler+0x438>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    237c:	c5 01       	movw	r24, r10
    237e:	89 db       	rcall	.-2286   	; 0x1a92 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2380:	c5 01       	movw	r24, r10
    2382:	91 db       	rcall	.-2270   	; 0x1aa6 <nwkFrameNext>
    2384:	5c 01       	movw	r10, r24
    2386:	89 2b       	or	r24, r25
    2388:	09 f0       	breq	.+2      	; 0x238c <nwkRxTaskHandler+0x444>
    238a:	1d ce       	rjmp	.-966    	; 0x1fc6 <nwkRxTaskHandler+0x7e>
    238c:	07 c0       	rjmp	.+14     	; 0x239c <nwkRxTaskHandler+0x454>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    238e:	f5 01       	movw	r30, r10
    2390:	87 81       	ldd	r24, Z+7	; 0x07
    2392:	90 85       	ldd	r25, Z+8	; 0x08
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	09 f0       	breq	.+2      	; 0x239a <nwkRxTaskHandler+0x452>
    2398:	07 cf       	rjmp	.-498    	; 0x21a8 <nwkRxTaskHandler+0x260>
    239a:	f8 ce       	rjmp	.-528    	; 0x218c <nwkRxTaskHandler+0x244>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    239c:	2e 96       	adiw	r28, 0x0e	; 14
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	df 90       	pop	r13
    23b6:	cf 90       	pop	r12
    23b8:	bf 90       	pop	r11
    23ba:	af 90       	pop	r10
    23bc:	9f 90       	pop	r9
    23be:	8f 90       	pop	r8
    23c0:	7f 90       	pop	r7
    23c2:	6f 90       	pop	r6
    23c4:	5f 90       	pop	r5
    23c6:	4f 90       	pop	r4
    23c8:	3f 90       	pop	r3
    23ca:	2f 90       	pop	r2
    23cc:	08 95       	ret

000023ce <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    23ce:	ef 92       	push	r14
    23d0:	ff 92       	push	r15
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	7c 01       	movw	r14, r24
    23da:	10 e0       	ldi	r17, 0x00	; 0
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	01 e0       	ldi	r16, 0x01	; 1
    23e2:	c3 e1       	ldi	r28, 0x13	; 19
    23e4:	13 c0       	rjmp	.+38     	; 0x240c <nwkTxDelayTimerHandler+0x3e>
    23e6:	fc 01       	movw	r30, r24
    23e8:	20 81       	ld	r18, Z
    23ea:	21 31       	cpi	r18, 0x11	; 17
    23ec:	79 f4       	brne	.+30     	; 0x240c <nwkTxDelayTimerHandler+0x3e>
    23ee:	ec 57       	subi	r30, 0x7C	; 124
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	20 81       	ld	r18, Z
    23f4:	31 81       	ldd	r19, Z+1	; 0x01
    23f6:	21 50       	subi	r18, 0x01	; 1
    23f8:	31 09       	sbc	r19, r1
    23fa:	31 83       	std	Z+1, r19	; 0x01
    23fc:	20 83       	st	Z, r18
    23fe:	23 2b       	or	r18, r19
    2400:	21 f4       	brne	.+8      	; 0x240a <nwkTxDelayTimerHandler+0x3c>
    2402:	fc 01       	movw	r30, r24
    2404:	c0 83       	st	Z, r28
    2406:	10 2f       	mov	r17, r16
    2408:	01 c0       	rjmp	.+2      	; 0x240c <nwkTxDelayTimerHandler+0x3e>
    240a:	10 2f       	mov	r17, r16
    240c:	4c db       	rcall	.-2408   	; 0x1aa6 <nwkFrameNext>
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	51 f7       	brne	.-44     	; 0x23e6 <nwkTxDelayTimerHandler+0x18>
    2412:	11 23       	and	r17, r17
    2414:	11 f0       	breq	.+4      	; 0x241a <nwkTxDelayTimerHandler+0x4c>
    2416:	c7 01       	movw	r24, r14
    2418:	fa d3       	rcall	.+2036   	; 0x2c0e <SYS_TimerStart>
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	ff 90       	pop	r15
    2422:	ef 90       	pop	r14
    2424:	08 95       	ret

00002426 <nwkTxAckWaitTimerHandler>:
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	7c 01       	movw	r14, r24
    2434:	10 e0       	ldi	r17, 0x00	; 0
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	01 e0       	ldi	r16, 0x01	; 1
    243c:	d7 e1       	ldi	r29, 0x17	; 23
    243e:	c0 e1       	ldi	r28, 0x10	; 16
    2440:	16 c0       	rjmp	.+44     	; 0x246e <nwkTxAckWaitTimerHandler+0x48>
    2442:	fc 01       	movw	r30, r24
    2444:	20 81       	ld	r18, Z
    2446:	26 31       	cpi	r18, 0x16	; 22
    2448:	91 f4       	brne	.+36     	; 0x246e <nwkTxAckWaitTimerHandler+0x48>
    244a:	ec 57       	subi	r30, 0x7C	; 124
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	20 81       	ld	r18, Z
    2450:	31 81       	ldd	r19, Z+1	; 0x01
    2452:	21 50       	subi	r18, 0x01	; 1
    2454:	31 09       	sbc	r19, r1
    2456:	31 83       	std	Z+1, r19	; 0x01
    2458:	20 83       	st	Z, r18
    245a:	23 2b       	or	r18, r19
    245c:	39 f4       	brne	.+14     	; 0x246c <nwkTxAckWaitTimerHandler+0x46>
    245e:	fc 01       	movw	r30, r24
    2460:	d0 83       	st	Z, r29
    2462:	ed 57       	subi	r30, 0x7D	; 125
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	c0 83       	st	Z, r28
    2468:	10 2f       	mov	r17, r16
    246a:	01 c0       	rjmp	.+2      	; 0x246e <nwkTxAckWaitTimerHandler+0x48>
    246c:	10 2f       	mov	r17, r16
    246e:	1b db       	rcall	.-2506   	; 0x1aa6 <nwkFrameNext>
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	39 f7       	brne	.-50     	; 0x2442 <nwkTxAckWaitTimerHandler+0x1c>
    2474:	11 23       	and	r17, r17
    2476:	11 f0       	breq	.+4      	; 0x247c <nwkTxAckWaitTimerHandler+0x56>
    2478:	c7 01       	movw	r24, r14
    247a:	c9 d3       	rcall	.+1938   	; 0x2c0e <SYS_TimerStart>
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	08 95       	ret

0000248a <nwkTxInit>:
    248a:	10 92 57 21 	sts	0x2157, r1
    248e:	10 92 56 21 	sts	0x2156, r1
    2492:	e9 e4       	ldi	r30, 0x49	; 73
    2494:	f1 e2       	ldi	r31, 0x21	; 33
    2496:	82 e3       	ldi	r24, 0x32	; 50
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e0       	ldi	r26, 0x00	; 0
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	86 83       	std	Z+6, r24	; 0x06
    24a0:	97 83       	std	Z+7, r25	; 0x07
    24a2:	a0 87       	std	Z+8, r26	; 0x08
    24a4:	b1 87       	std	Z+9, r27	; 0x09
    24a6:	12 86       	std	Z+10, r1	; 0x0a
    24a8:	83 e1       	ldi	r24, 0x13	; 19
    24aa:	92 e1       	ldi	r25, 0x12	; 18
    24ac:	94 87       	std	Z+12, r25	; 0x0c
    24ae:	83 87       	std	Z+11, r24	; 0x0b
    24b0:	ec e3       	ldi	r30, 0x3C	; 60
    24b2:	f1 e2       	ldi	r31, 0x21	; 33
    24b4:	8a e0       	ldi	r24, 0x0A	; 10
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a0 e0       	ldi	r26, 0x00	; 0
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	86 83       	std	Z+6, r24	; 0x06
    24be:	97 83       	std	Z+7, r25	; 0x07
    24c0:	a0 87       	std	Z+8, r26	; 0x08
    24c2:	b1 87       	std	Z+9, r27	; 0x09
    24c4:	12 86       	std	Z+10, r1	; 0x0a
    24c6:	87 ee       	ldi	r24, 0xE7	; 231
    24c8:	91 e1       	ldi	r25, 0x11	; 17
    24ca:	94 87       	std	Z+12, r25	; 0x0c
    24cc:	83 87       	std	Z+11, r24	; 0x0b
    24ce:	08 95       	ret

000024d0 <nwkTxFrame>:
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	ec 01       	movw	r28, r24
    24d6:	fc 01       	movw	r30, r24
    24d8:	ea 57       	subi	r30, 0x7A	; 122
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	81 ff       	sbrs	r24, 1
    24e0:	03 c0       	rjmp	.+6      	; 0x24e8 <nwkTxFrame+0x18>
    24e2:	92 e1       	ldi	r25, 0x12	; 18
    24e4:	98 83       	st	Y, r25
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <nwkTxFrame+0x1c>
    24e8:	92 e1       	ldi	r25, 0x12	; 18
    24ea:	98 83       	st	Y, r25
    24ec:	fe 01       	movw	r30, r28
    24ee:	ed 57       	subi	r30, 0x7D	; 125
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	10 82       	st	Z, r1
    24f4:	80 ff       	sbrs	r24, 0
    24f6:	05 c0       	rjmp	.+10     	; 0x2502 <nwkTxFrame+0x32>
    24f8:	2f ef       	ldi	r18, 0xFF	; 255
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	3e 83       	std	Y+6, r19	; 0x06
    24fe:	2d 83       	std	Y+5, r18	; 0x05
    2500:	06 c0       	rjmp	.+12     	; 0x250e <nwkTxFrame+0x3e>
    2502:	20 91 6d 23 	lds	r18, 0x236D
    2506:	30 91 6e 23 	lds	r19, 0x236E
    250a:	3e 83       	std	Y+6, r19	; 0x06
    250c:	2d 83       	std	Y+5, r18	; 0x05
    250e:	85 70       	andi	r24, 0x05	; 5
    2510:	19 f4       	brne	.+6      	; 0x2518 <nwkTxFrame+0x48>
    2512:	ce 01       	movw	r24, r28
    2514:	27 dc       	rcall	.-1970   	; 0x1d64 <nwkRoutePrepareTx>
    2516:	04 c0       	rjmp	.+8      	; 0x2520 <nwkTxFrame+0x50>
    2518:	8f 85       	ldd	r24, Y+15	; 0x0f
    251a:	98 89       	ldd	r25, Y+16	; 0x10
    251c:	98 87       	std	Y+8, r25	; 0x08
    251e:	8f 83       	std	Y+7, r24	; 0x07
    2520:	eb e6       	ldi	r30, 0x6B	; 107
    2522:	f3 e2       	ldi	r31, 0x23	; 35
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	9a 87       	std	Y+10, r25	; 0x0a
    252a:	89 87       	std	Y+9, r24	; 0x09
    252c:	85 81       	ldd	r24, Z+5	; 0x05
    252e:	8f 5f       	subi	r24, 0xFF	; 255
    2530:	85 83       	std	Z+5, r24	; 0x05
    2532:	8c 83       	std	Y+4, r24	; 0x04
    2534:	8f 81       	ldd	r24, Y+7	; 0x07
    2536:	98 85       	ldd	r25, Y+8	; 0x08
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	71 f4       	brne	.+28     	; 0x2558 <nwkTxFrame+0x88>
    253c:	81 e4       	ldi	r24, 0x41	; 65
    253e:	98 e8       	ldi	r25, 0x88	; 136
    2540:	9b 83       	std	Y+3, r25	; 0x03
    2542:	8a 83       	std	Y+2, r24	; 0x02
    2544:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <rand>
    2548:	cc 57       	subi	r28, 0x7C	; 124
    254a:	df 4f       	sbci	r29, 0xFF	; 255
    254c:	87 70       	andi	r24, 0x07	; 7
    254e:	99 27       	eor	r25, r25
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	99 83       	std	Y+1, r25	; 0x01
    2554:	88 83       	st	Y, r24
    2556:	08 c0       	rjmp	.+16     	; 0x2568 <nwkTxFrame+0x98>
    2558:	81 e6       	ldi	r24, 0x61	; 97
    255a:	98 e8       	ldi	r25, 0x88	; 136
    255c:	9b 83       	std	Y+3, r25	; 0x03
    255e:	8a 83       	std	Y+2, r24	; 0x02
    2560:	cc 57       	subi	r28, 0x7C	; 124
    2562:	df 4f       	sbci	r29, 0xFF	; 255
    2564:	19 82       	std	Y+1, r1	; 0x01
    2566:	18 82       	st	Y, r1
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	08 95       	ret

0000256e <nwkTxBroadcastFrame>:
    256e:	0f 93       	push	r16
    2570:	1f 93       	push	r17
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	8c 01       	movw	r16, r24
    2578:	53 da       	rcall	.-2906   	; 0x1a20 <nwkFrameAlloc>
    257a:	ec 01       	movw	r28, r24
    257c:	89 2b       	or	r24, r25
    257e:	b9 f1       	breq	.+110    	; 0x25ee <nwkTxBroadcastFrame+0x80>
    2580:	82 e1       	ldi	r24, 0x12	; 18
    2582:	88 83       	st	Y, r24
    2584:	f8 01       	movw	r30, r16
    2586:	81 81       	ldd	r24, Z+1	; 0x01
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	fe 01       	movw	r30, r28
    258c:	ed 57       	subi	r30, 0x7D	; 125
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	10 82       	st	Z, r1
    2592:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <rand>
    2596:	fe 01       	movw	r30, r28
    2598:	ec 57       	subi	r30, 0x7C	; 124
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	87 70       	andi	r24, 0x07	; 7
    259e:	99 27       	eor	r25, r25
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	33 96       	adiw	r30, 0x03	; 3
    25a8:	11 82       	std	Z+1, r1	; 0x01
    25aa:	10 82       	st	Z, r1
    25ac:	f8 01       	movw	r30, r16
    25ae:	41 81       	ldd	r20, Z+1	; 0x01
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	b8 01       	movw	r22, r16
    25b4:	6e 5f       	subi	r22, 0xFE	; 254
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	ce 01       	movw	r24, r28
    25ba:	02 96       	adiw	r24, 0x02	; 2
    25bc:	0e 94 14 4e 	call	0x9c28	; 0x9c28 <memcpy>
    25c0:	81 e4       	ldi	r24, 0x41	; 65
    25c2:	98 e8       	ldi	r25, 0x88	; 136
    25c4:	9b 83       	std	Y+3, r25	; 0x03
    25c6:	8a 83       	std	Y+2, r24	; 0x02
    25c8:	8f ef       	ldi	r24, 0xFF	; 255
    25ca:	9f ef       	ldi	r25, 0xFF	; 255
    25cc:	98 87       	std	Y+8, r25	; 0x08
    25ce:	8f 83       	std	Y+7, r24	; 0x07
    25d0:	f8 01       	movw	r30, r16
    25d2:	85 81       	ldd	r24, Z+5	; 0x05
    25d4:	96 81       	ldd	r25, Z+6	; 0x06
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	eb e6       	ldi	r30, 0x6B	; 107
    25dc:	f3 e2       	ldi	r31, 0x23	; 35
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	9a 87       	std	Y+10, r25	; 0x0a
    25e4:	89 87       	std	Y+9, r24	; 0x09
    25e6:	85 81       	ldd	r24, Z+5	; 0x05
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	85 83       	std	Z+5, r24	; 0x05
    25ec:	8c 83       	std	Y+4, r24	; 0x04
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	08 95       	ret

000025f8 <nwkTxAckReceived>:
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	fc 01       	movw	r30, r24
    25fe:	c7 81       	ldd	r28, Z+7	; 0x07
    2600:	d0 85       	ldd	r29, Z+8	; 0x08
    2602:	81 85       	ldd	r24, Z+9	; 0x09
    2604:	83 30       	cpi	r24, 0x03	; 3
    2606:	c1 f4       	brne	.+48     	; 0x2638 <nwkTxAckReceived+0x40>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	10 c0       	rjmp	.+32     	; 0x262e <nwkTxAckReceived+0x36>
    260e:	fc 01       	movw	r30, r24
    2610:	20 81       	ld	r18, Z
    2612:	26 31       	cpi	r18, 0x16	; 22
    2614:	61 f4       	brne	.+24     	; 0x262e <nwkTxAckReceived+0x36>
    2616:	34 85       	ldd	r19, Z+12	; 0x0c
    2618:	29 81       	ldd	r18, Y+1	; 0x01
    261a:	32 13       	cpse	r19, r18
    261c:	08 c0       	rjmp	.+16     	; 0x262e <nwkTxAckReceived+0x36>
    261e:	27 e1       	ldi	r18, 0x17	; 23
    2620:	20 83       	st	Z, r18
    2622:	2a 81       	ldd	r18, Y+2	; 0x02
    2624:	ea 57       	subi	r30, 0x7A	; 122
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	20 83       	st	Z, r18
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	06 c0       	rjmp	.+12     	; 0x263a <nwkTxAckReceived+0x42>
    262e:	3b da       	rcall	.-2954   	; 0x1aa6 <nwkFrameNext>
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	69 f7       	brne	.-38     	; 0x260e <nwkTxAckReceived+0x16>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	01 c0       	rjmp	.+2      	; 0x263a <nwkTxAckReceived+0x42>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2640:	e0 91 56 21 	lds	r30, 0x2156
    2644:	f0 91 57 21 	lds	r31, 0x2157

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	21 f0       	breq	.+8      	; 0x2654 <PHY_DataConf+0x14>
    264c:	48 f0       	brcs	.+18     	; 0x2660 <PHY_DataConf+0x20>
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	19 f0       	breq	.+6      	; 0x2658 <PHY_DataConf+0x18>
    2652:	04 c0       	rjmp	.+8      	; 0x265c <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    2654:	80 e2       	ldi	r24, 0x20	; 32
    2656:	05 c0       	rjmp	.+10     	; 0x2662 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    2658:	81 e2       	ldi	r24, 0x21	; 33
    265a:	03 c0       	rjmp	.+6      	; 0x2662 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    2660:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2662:	df 01       	movw	r26, r30
    2664:	ad 57       	subi	r26, 0x7D	; 125
    2666:	bf 4f       	sbci	r27, 0xFF	; 255
    2668:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    266a:	85 e1       	ldi	r24, 0x15	; 21
    266c:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    266e:	10 92 57 21 	sts	0x2157, r1
    2672:	10 92 56 21 	sts	0x2156, r1
  nwkIb.lock--;
    2676:	eb e6       	ldi	r30, 0x6B	; 107
    2678:	f3 e2       	ldi	r31, 0x23	; 35
    267a:	86 a1       	ldd	r24, Z+38	; 0x26
    267c:	97 a1       	ldd	r25, Z+39	; 0x27
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	97 a3       	std	Z+39, r25	; 0x27
    2682:	86 a3       	std	Z+38, r24	; 0x26
    2684:	08 95       	ret

00002686 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    2686:	9f 92       	push	r9
    2688:	af 92       	push	r10
    268a:	bf 92       	push	r11
    268c:	cf 92       	push	r12
    268e:	df 92       	push	r13
    2690:	ef 92       	push	r14
    2692:	ff 92       	push	r15
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    269c:	c0 e0       	ldi	r28, 0x00	; 0
    269e:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    26a0:	0f 2e       	mov	r0, r31
    26a2:	f4 e1       	ldi	r31, 0x14	; 20
    26a4:	af 2e       	mov	r10, r31
    26a6:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    26a8:	0b e6       	ldi	r16, 0x6B	; 107
    26aa:	13 e2       	ldi	r17, 0x23	; 35
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    26ac:	0f 2e       	mov	r0, r31
    26ae:	f7 e1       	ldi	r31, 0x17	; 23
    26b0:	df 2e       	mov	r13, r31
    26b2:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    26b4:	0f 2e       	mov	r0, r31
    26b6:	f6 e1       	ldi	r31, 0x16	; 22
    26b8:	9f 2e       	mov	r9, r31
    26ba:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    26bc:	0f 2e       	mov	r0, r31
    26be:	f5 e1       	ldi	r31, 0x15	; 21
    26c0:	ef 2e       	mov	r14, r31
    26c2:	f1 2c       	mov	r15, r1
    26c4:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    26c6:	0f 2e       	mov	r0, r31
    26c8:	f3 e1       	ldi	r31, 0x13	; 19
    26ca:	cf 2e       	mov	r12, r31
    26cc:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    26ce:	0f 2e       	mov	r0, r31
    26d0:	f1 e1       	ldi	r31, 0x11	; 17
    26d2:	bf 2e       	mov	r11, r31
    26d4:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    26d6:	60 c0       	rjmp	.+192    	; 0x2798 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    26d8:	88 81       	ld	r24, Y
    26da:	83 31       	cpi	r24, 0x13	; 19
    26dc:	c1 f0       	breq	.+48     	; 0x270e <nwkTxTaskHandler+0x88>
    26de:	18 f4       	brcc	.+6      	; 0x26e6 <nwkTxTaskHandler+0x60>
    26e0:	82 31       	cpi	r24, 0x12	; 18
    26e2:	39 f0       	breq	.+14     	; 0x26f2 <nwkTxTaskHandler+0x6c>
    26e4:	59 c0       	rjmp	.+178    	; 0x2798 <nwkTxTaskHandler+0x112>
    26e6:	85 31       	cpi	r24, 0x15	; 21
    26e8:	49 f1       	breq	.+82     	; 0x273c <nwkTxTaskHandler+0xb6>
    26ea:	87 31       	cpi	r24, 0x17	; 23
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <nwkTxTaskHandler+0x6a>
    26ee:	45 c0       	rjmp	.+138    	; 0x277a <nwkTxTaskHandler+0xf4>
    26f0:	53 c0       	rjmp	.+166    	; 0x2798 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    26f2:	fe 01       	movw	r30, r28
    26f4:	ec 57       	subi	r30, 0x7C	; 124
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	89 2b       	or	r24, r25
    26fe:	29 f0       	breq	.+10     	; 0x270a <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2700:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    2702:	8c e3       	ldi	r24, 0x3C	; 60
    2704:	91 e2       	ldi	r25, 0x21	; 33
    2706:	83 d2       	rcall	.+1286   	; 0x2c0e <SYS_TimerStart>
    2708:	47 c0       	rjmp	.+142    	; 0x2798 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    270a:	c8 82       	st	Y, r12
    270c:	45 c0       	rjmp	.+138    	; 0x2798 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    270e:	80 91 56 21 	lds	r24, 0x2156
    2712:	90 91 57 21 	lds	r25, 0x2157
    2716:	89 2b       	or	r24, r25
    2718:	09 f0       	breq	.+2      	; 0x271c <nwkTxTaskHandler+0x96>
    271a:	3e c0       	rjmp	.+124    	; 0x2798 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    271c:	d0 93 57 21 	sts	0x2157, r29
    2720:	c0 93 56 21 	sts	0x2156, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    2724:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    2726:	69 81       	ldd	r22, Y+1	; 0x01
    2728:	ce 01       	movw	r24, r28
    272a:	02 96       	adiw	r24, 0x02	; 2
    272c:	af d0       	rcall	.+350    	; 0x288c <PHY_DataReq>
          nwkIb.lock++;
    272e:	f8 01       	movw	r30, r16
    2730:	86 a1       	ldd	r24, Z+38	; 0x26
    2732:	97 a1       	ldd	r25, Z+39	; 0x27
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	97 a3       	std	Z+39, r25	; 0x27
    2738:	86 a3       	std	Z+38, r24	; 0x26
    273a:	2e c0       	rjmp	.+92     	; 0x2798 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    273c:	fe 01       	movw	r30, r28
    273e:	ed 57       	subi	r30, 0x7D	; 125
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	81 11       	cpse	r24, r1
    2746:	17 c0       	rjmp	.+46     	; 0x2776 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    2748:	2d 85       	ldd	r18, Y+13	; 0x0d
    274a:	3e 85       	ldd	r19, Y+14	; 0x0e
    274c:	f8 01       	movw	r30, r16
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	28 17       	cp	r18, r24
    2754:	39 07       	cpc	r19, r25
    2756:	69 f4       	brne	.+26     	; 0x2772 <nwkTxTaskHandler+0xec>
    2758:	8b 85       	ldd	r24, Y+11	; 0x0b
    275a:	80 ff       	sbrs	r24, 0
    275c:	0a c0       	rjmp	.+20     	; 0x2772 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    275e:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    2760:	fe 01       	movw	r30, r28
    2762:	ec 57       	subi	r30, 0x7C	; 124
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	f1 82       	std	Z+1, r15	; 0x01
    2768:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    276a:	89 e4       	ldi	r24, 0x49	; 73
    276c:	91 e2       	ldi	r25, 0x21	; 33
    276e:	4f d2       	rcall	.+1182   	; 0x2c0e <SYS_TimerStart>
    2770:	13 c0       	rjmp	.+38     	; 0x2798 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    2772:	d8 82       	st	Y, r13
    2774:	11 c0       	rjmp	.+34     	; 0x2798 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    2776:	d8 82       	st	Y, r13
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <nwkTxTaskHandler+0x112>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    277a:	ce 01       	movw	r24, r28
    277c:	ac da       	rcall	.-2728   	; 0x1cd6 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    277e:	fe 01       	movw	r30, r28
    2780:	e9 57       	subi	r30, 0x79	; 121
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	01 90       	ld	r0, Z+
    2786:	f0 81       	ld	r31, Z
    2788:	e0 2d       	mov	r30, r0
    278a:	30 97       	sbiw	r30, 0x00	; 0
    278c:	19 f4       	brne	.+6      	; 0x2794 <nwkTxTaskHandler+0x10e>
          nwkFrameFree(frame);
    278e:	ce 01       	movw	r24, r28
    2790:	80 d9       	rcall	.-3328   	; 0x1a92 <nwkFrameFree>
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <nwkTxTaskHandler+0x112>
        else
          frame->tx.confirm(frame);
    2794:	ce 01       	movw	r24, r28
    2796:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2798:	ce 01       	movw	r24, r28
    279a:	85 d9       	rcall	.-3318   	; 0x1aa6 <nwkFrameNext>
    279c:	ec 01       	movw	r28, r24
    279e:	89 2b       	or	r24, r25
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <nwkTxTaskHandler+0x11e>
    27a2:	9a cf       	rjmp	.-204    	; 0x26d8 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	df 90       	pop	r13
    27b2:	cf 90       	pop	r12
    27b4:	bf 90       	pop	r11
    27b6:	af 90       	pop	r10
    27b8:	9f 90       	pop	r9
    27ba:	08 95       	ret

000027bc <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    27bc:	80 91 58 21 	lds	r24, 0x2158
    27c0:	98 2f       	mov	r25, r24
    27c2:	9f 70       	andi	r25, 0x0F	; 15
    27c4:	e4 e5       	ldi	r30, 0x54	; 84
    27c6:	f1 e0       	ldi	r31, 0x01	; 1
    27c8:	80 81       	ld	r24, Z
    27ca:	80 7f       	andi	r24, 0xF0	; 240
    27cc:	89 2b       	or	r24, r25
    27ce:	80 83       	st	Z, r24
    27d0:	80 91 58 21 	lds	r24, 0x2158
    27d4:	88 23       	and	r24, r24
    27d6:	29 f0       	breq	.+10     	; 0x27e2 <phySetChannel+0x26>
    27d8:	80 91 59 21 	lds	r24, 0x2159
    27dc:	80 93 53 01 	sts	0x0153, r24
    27e0:	08 95       	ret
    27e2:	80 91 59 21 	lds	r24, 0x2159
    27e6:	98 2f       	mov	r25, r24
    27e8:	9f 71       	andi	r25, 0x1F	; 31
    27ea:	e8 e4       	ldi	r30, 0x48	; 72
    27ec:	f1 e0       	ldi	r31, 0x01	; 1
    27ee:	80 81       	ld	r24, Z
    27f0:	80 7e       	andi	r24, 0xE0	; 224
    27f2:	89 2b       	or	r24, r25
    27f4:	80 83       	st	Z, r24
    27f6:	08 95       	ret

000027f8 <phyTrxSetState>:
    27f8:	93 e0       	ldi	r25, 0x03	; 3
    27fa:	90 93 42 01 	sts	0x0142, r25
    27fe:	e1 e4       	ldi	r30, 0x41	; 65
    2800:	f1 e0       	ldi	r31, 0x01	; 1
    2802:	90 81       	ld	r25, Z
    2804:	9f 71       	andi	r25, 0x1F	; 31
    2806:	98 30       	cpi	r25, 0x08	; 8
    2808:	e1 f7       	brne	.-8      	; 0x2802 <phyTrxSetState+0xa>
    280a:	80 93 42 01 	sts	0x0142, r24
    280e:	e1 e4       	ldi	r30, 0x41	; 65
    2810:	f1 e0       	ldi	r31, 0x01	; 1
    2812:	90 81       	ld	r25, Z
    2814:	9f 71       	andi	r25, 0x1F	; 31
    2816:	98 13       	cpse	r25, r24
    2818:	fc cf       	rjmp	.-8      	; 0x2812 <phyTrxSetState+0x1a>
    281a:	08 95       	ret

0000281c <phySetRxState>:
    281c:	88 e0       	ldi	r24, 0x08	; 8
    281e:	ec df       	rcall	.-40     	; 0x27f8 <phyTrxSetState>
    2820:	8f ef       	ldi	r24, 0xFF	; 255
    2822:	80 93 4f 01 	sts	0x014F, r24
    2826:	80 91 5a 21 	lds	r24, 0x215A
    282a:	88 23       	and	r24, r24
    282c:	11 f0       	breq	.+4      	; 0x2832 <phySetRxState+0x16>
    282e:	86 e1       	ldi	r24, 0x16	; 22
    2830:	e3 cf       	rjmp	.-58     	; 0x27f8 <phyTrxSetState>
    2832:	08 95       	ret

00002834 <PHY_SetRxState>:
    2834:	80 93 5a 21 	sts	0x215A, r24
    2838:	f1 cf       	rjmp	.-30     	; 0x281c <phySetRxState>
    283a:	08 95       	ret

0000283c <PHY_SetChannel>:
    283c:	80 93 59 21 	sts	0x2159, r24
    2840:	bd cf       	rjmp	.-134    	; 0x27bc <phySetChannel>
    2842:	08 95       	ret

00002844 <PHY_SetPanId>:
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	1f 92       	push	r1
    284a:	1f 92       	push	r1
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	80 93 62 01 	sts	0x0162, r24
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	80 93 63 01 	sts	0x0163, r24
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	08 95       	ret

00002868 <PHY_SetShortAddr>:
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	1f 92       	push	r1
    286e:	1f 92       	push	r1
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	9a 83       	std	Y+2, r25	; 0x02
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	80 93 60 01 	sts	0x0160, r24
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	80 93 61 01 	sts	0x0161, r24
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	08 95       	ret

0000288c <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	cf 93       	push	r28
    2892:	8c 01       	movw	r16, r24
    2894:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2896:	89 e1       	ldi	r24, 0x19	; 25
    2898:	af df       	rcall	.-162    	; 0x27f8 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	8c 0f       	add	r24, r28
    28a4:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    28a8:	cc 23       	and	r28, r28
    28aa:	81 f0       	breq	.+32     	; 0x28cc <PHY_DataReq+0x40>
    28ac:	f8 01       	movw	r30, r16
    28ae:	c1 50       	subi	r28, 0x01	; 1
    28b0:	2c 2f       	mov	r18, r28
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	2f 5f       	subi	r18, 0xFF	; 255
    28b6:	3f 4f       	sbci	r19, 0xFF	; 255
    28b8:	c8 01       	movw	r24, r16
    28ba:	82 0f       	add	r24, r18
    28bc:	93 1f       	adc	r25, r19
    28be:	a1 e8       	ldi	r26, 0x81	; 129
    28c0:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    28c2:	21 91       	ld	r18, Z+
    28c4:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    28c6:	e8 17       	cp	r30, r24
    28c8:	f9 07       	cpc	r31, r25
    28ca:	d9 f7       	brne	.-10     	; 0x28c2 <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    28cc:	83 e0       	ldi	r24, 0x03	; 3
    28ce:	80 93 db 21 	sts	0x21DB, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    28d2:	82 e0       	ldi	r24, 0x02	; 2
    28d4:	80 93 42 01 	sts	0x0142, r24
}
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	08 95       	ret

000028e0 <PHY_RandomReq>:

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
  uint16_t rnd = 0;

  TRX_RPC_REG = 0x00;
    28ec:	10 92 56 01 	sts	0x0156, r1

  phyTrxSetState(TRX_CMD_RX_ON);
    28f0:	86 e0       	ldi	r24, 0x06	; 6
    28f2:	82 df       	rcall	.-252    	; 0x27f8 <phyTrxSetState>
    28f4:	c0 e0       	ldi	r28, 0x00	; 0
    28f6:	d0 e0       	ldi	r29, 0x00	; 0
#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
  uint16_t rnd = 0;
    28f8:	e1 2c       	mov	r14, r1
    28fa:	f1 2c       	mov	r15, r1
  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    28fc:	06 e4       	ldi	r16, 0x46	; 70
    28fe:	11 e0       	ldi	r17, 0x01	; 1

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	0e 94 99 0b 	call	0x1732	; 0x1732 <HAL_Delay>
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    2906:	f8 01       	movw	r30, r16
    2908:	20 81       	ld	r18, Z
    290a:	22 95       	swap	r18
    290c:	26 95       	lsr	r18
    290e:	27 70       	andi	r18, 0x07	; 7
    2910:	23 70       	andi	r18, 0x03	; 3
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	0c 2e       	mov	r0, r28
    2916:	02 c0       	rjmp	.+4      	; 0x291c <PHY_RandomReq+0x3c>
    2918:	22 0f       	add	r18, r18
    291a:	33 1f       	adc	r19, r19
    291c:	0a 94       	dec	r0
    291e:	e2 f7       	brpl	.-8      	; 0x2918 <PHY_RandomReq+0x38>
    2920:	e2 2a       	or	r14, r18
    2922:	f3 2a       	or	r15, r19
    2924:	22 96       	adiw	r28, 0x02	; 2

  TRX_RPC_REG = 0x00;

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
    2926:	c0 31       	cpi	r28, 0x10	; 16
    2928:	d1 05       	cpc	r29, r1
    292a:	51 f7       	brne	.-44     	; 0x2900 <PHY_RandomReq+0x20>
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
  }

  phyTrxSetState(TRX_CMD_TRX_OFF);
    292c:	88 e0       	ldi	r24, 0x08	; 8
    292e:	64 df       	rcall	.-312    	; 0x27f8 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    2930:	8b ee       	ldi	r24, 0xEB	; 235
    2932:	80 93 56 01 	sts	0x0156, r24

  phySetRxState();
    2936:	72 df       	rcall	.-284    	; 0x281c <phySetRxState>

  return rnd;
}
    2938:	c7 01       	movw	r24, r14
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	08 95       	ret

00002948 <PHY_Init>:
/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  //Rest transceiver
  TRXPR_REG_s.trxrst = 1;
    2948:	e9 e3       	ldi	r30, 0x39	; 57
    294a:	f1 e0       	ldi	r31, 0x01	; 1
    294c:	80 81       	ld	r24, Z
    294e:	81 60       	ori	r24, 0x01	; 1
    2950:	80 83       	st	Z, r24

  phyRxState = false;
    2952:	10 92 5a 21 	sts	0x215A, r1
  phyBand = 0;
    2956:	10 92 58 21 	sts	0x2158, r1
  phyState = PHY_STATE_IDLE;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	80 93 db 21 	sts	0x21DB, r24

  //off transceiver
  phyTrxSetState(TRX_CMD_TRX_OFF);
    2960:	88 e0       	ldi	r24, 0x08	; 8
    2962:	4a df       	rcall	.-364    	; 0x27f8 <phyTrxSetState>
  //transceiver power reduction mode
  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    2964:	8b ee       	ldi	r24, 0xEB	; 235
    2966:	80 93 56 01 	sts	0x0156, r24
  //If this bit is set, the next received frame will be protected and not overwritten by following frames
  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    296a:	ec e4       	ldi	r30, 0x4C	; 76
    296c:	f1 e0       	ldi	r31, 0x01	; 1
    296e:	80 81       	ld	r24, Z
    2970:	80 68       	ori	r24, 0x80	; 128
    2972:	80 83       	st	Z, r24

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
    2974:	b5 df       	rcall	.-150    	; 0x28e0 <PHY_RandomReq>
    2976:	80 93 6d 01 	sts	0x016D, r24
    297a:	08 95       	ret

0000297c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	00 d0       	rcall	.+0      	; 0x2984 <PHY_TaskHandler+0x8>
    2984:	1f 92       	push	r1
    2986:	1f 92       	push	r1
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    298c:	80 91 db 21 	lds	r24, 0x21DB
    2990:	82 30       	cpi	r24, 0x02	; 2
    2992:	09 f4       	brne	.+2      	; 0x2996 <PHY_TaskHandler+0x1a>
    2994:	65 c0       	rjmp	.+202    	; 0x2a60 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2996:	80 91 4f 01 	lds	r24, 0x014F
    299a:	83 ff       	sbrs	r24, 3
    299c:	3e c0       	rjmp	.+124    	; 0x2a1a <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    299e:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    29a2:	6a 2f       	mov	r22, r26
    29a4:	70 e0       	ldi	r23, 0x00	; 0
    29a6:	ab 01       	movw	r20, r22
    29a8:	4f 5f       	subi	r20, 0xFF	; 255
    29aa:	5f 4f       	sbci	r21, 0xFF	; 255
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    29b2:	fc 01       	movw	r30, r24
    29b4:	e0 58       	subi	r30, 0x80	; 128
    29b6:	fe 4f       	sbci	r31, 0xFE	; 254
    29b8:	30 81       	ld	r19, Z
    29ba:	fc 01       	movw	r30, r24
    29bc:	e5 5a       	subi	r30, 0xA5	; 165
    29be:	fe 4d       	sbci	r31, 0xDE	; 222
    29c0:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    29c2:	2f 5f       	subi	r18, 0xFF	; 255
    29c4:	82 2f       	mov	r24, r18
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	84 17       	cp	r24, r20
    29ca:	95 07       	cpc	r25, r21
    29cc:	94 f3       	brlt	.-28     	; 0x29b2 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    29ce:	8b e5       	ldi	r24, 0x5B	; 91
    29d0:	91 e2       	ldi	r25, 0x21	; 33
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    29d6:	a2 50       	subi	r26, 0x02	; 2
    29d8:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    29da:	fb 01       	movw	r30, r22
    29dc:	e5 5a       	subi	r30, 0xA5	; 165
    29de:	fe 4d       	sbci	r31, 0xDE	; 222
    29e0:	80 81       	ld	r24, Z
    29e2:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    29e4:	80 91 47 01 	lds	r24, 0x0147
    29e8:	8a 55       	subi	r24, 0x5A	; 90
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    29ec:	ce 01       	movw	r24, r28
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	80 da       	rcall	.-2816   	; 0x1ef2 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    29f2:	e1 e4       	ldi	r30, 0x41	; 65
    29f4:	f1 e0       	ldi	r31, 0x01	; 1
    29f6:	80 81       	ld	r24, Z
    29f8:	8f 71       	andi	r24, 0x1F	; 31
    29fa:	86 31       	cpi	r24, 0x16	; 22
    29fc:	e1 f7       	brne	.-8      	; 0x29f6 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    29fe:	ef e4       	ldi	r30, 0x4F	; 79
    2a00:	f1 e0       	ldi	r31, 0x01	; 1
    2a02:	80 81       	ld	r24, Z
    2a04:	88 60       	ori	r24, 0x08	; 8
    2a06:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    2a08:	ec e4       	ldi	r30, 0x4C	; 76
    2a0a:	f1 e0       	ldi	r31, 0x01	; 1
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8f 77       	andi	r24, 0x7F	; 127
    2a10:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    2a12:	80 81       	ld	r24, Z
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	80 83       	st	Z, r24
    2a18:	23 c0       	rjmp	.+70     	; 0x2a60 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    2a1a:	80 91 4f 01 	lds	r24, 0x014F
    2a1e:	86 ff       	sbrs	r24, 6
    2a20:	1f c0       	rjmp	.+62     	; 0x2a60 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    2a22:	80 91 41 01 	lds	r24, 0x0141
    2a26:	8f 71       	andi	r24, 0x1F	; 31
    2a28:	89 31       	cpi	r24, 0x19	; 25
    2a2a:	a9 f4       	brne	.+42     	; 0x2a56 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    2a2c:	10 91 42 01 	lds	r17, 0x0142
    2a30:	12 95       	swap	r17
    2a32:	16 95       	lsr	r17
    2a34:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    2a36:	49 f0       	breq	.+18     	; 0x2a4a <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2a38:	13 30       	cpi	r17, 0x03	; 3
    2a3a:	21 f0       	breq	.+8      	; 0x2a44 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    2a3c:	15 30       	cpi	r17, 0x05	; 5
    2a3e:	21 f0       	breq	.+8      	; 0x2a48 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    2a40:	13 e0       	ldi	r17, 0x03	; 3
    2a42:	03 c0       	rjmp	.+6      	; 0x2a4a <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2a44:	11 e0       	ldi	r17, 0x01	; 1
    2a46:	01 c0       	rjmp	.+2      	; 0x2a4a <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    2a48:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    2a4a:	e8 de       	rcall	.-560    	; 0x281c <phySetRxState>
      phyState = PHY_STATE_IDLE;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	80 93 db 21 	sts	0x21DB, r24

      PHY_DataConf(status);
    2a52:	81 2f       	mov	r24, r17
    2a54:	f5 dd       	rcall	.-1046   	; 0x2640 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2a56:	ef e4       	ldi	r30, 0x4F	; 79
    2a58:	f1 e0       	ldi	r31, 0x01	; 1
    2a5a:	80 81       	ld	r24, Z
    2a5c:	80 64       	ori	r24, 0x40	; 64
    2a5e:	80 83       	st	Z, r24
  }
}
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	08 95       	ret

00002a72 <SYS_Init>:
/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  //prescaler defined, timer 4 defined
  HAL_Init();
    2a72:	0e 94 85 0b 	call	0x170a	; 0x170a <HAL_Init>
  //initialize application timer
  SYS_TimerInit();
    2a76:	6f d0       	rcall	.+222    	; 0x2b56 <SYS_TimerInit>
  //transceiver initialization
  PHY_Init();
    2a78:	67 df       	rcall	.-306    	; 0x2948 <PHY_Init>
  //mesh network initialization
  NWK_Init();
    2a7a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <NWK_Init>
  PHY_TX_PWR = 0x00; //For maximizing Tx power
    2a7e:	10 92 45 01 	sts	0x0145, r1
    2a82:	08 95       	ret

00002a84 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    2a84:	7b df       	rcall	.-266    	; 0x297c <PHY_TaskHandler>
  NWK_TaskHandler();
    2a86:	0e 94 12 0c 	call	0x1824	; 0x1824 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2a8a:	cc c0       	rjmp	.+408    	; 0x2c24 <SYS_TimerTaskHandler>
    2a8c:	08 95       	ret

00002a8e <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	ec 01       	movw	r28, r24
  if (timers)
    2a98:	80 91 dc 21 	lds	r24, 0x21DC
    2a9c:	90 91 dd 21 	lds	r25, 0x21DD
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <placeTimer+0x18>
    2aa4:	45 c0       	rjmp	.+138    	; 0x2b30 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    2aa6:	4e 81       	ldd	r20, Y+6	; 0x06
    2aa8:	5f 81       	ldd	r21, Y+7	; 0x07
    2aaa:	68 85       	ldd	r22, Y+8	; 0x08
    2aac:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    2aae:	fc 01       	movw	r30, r24
    2ab0:	02 81       	ldd	r16, Z+2	; 0x02
    2ab2:	13 81       	ldd	r17, Z+3	; 0x03
    2ab4:	24 81       	ldd	r18, Z+4	; 0x04
    2ab6:	35 81       	ldd	r19, Z+5	; 0x05
    2ab8:	40 17       	cp	r20, r16
    2aba:	51 07       	cpc	r21, r17
    2abc:	62 07       	cpc	r22, r18
    2abe:	73 07       	cpc	r23, r19
    2ac0:	60 f0       	brcs	.+24     	; 0x2ada <placeTimer+0x4c>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	17 c0       	rjmp	.+46     	; 0x2af4 <placeTimer+0x66>
    2ac6:	02 81       	ldd	r16, Z+2	; 0x02
    2ac8:	13 81       	ldd	r17, Z+3	; 0x03
    2aca:	24 81       	ldd	r18, Z+4	; 0x04
    2acc:	35 81       	ldd	r19, Z+5	; 0x05
    2ace:	40 17       	cp	r20, r16
    2ad0:	51 07       	cpc	r21, r17
    2ad2:	62 07       	cpc	r22, r18
    2ad4:	73 07       	cpc	r23, r19
    2ad6:	68 f4       	brcc	.+26     	; 0x2af2 <placeTimer+0x64>
    2ad8:	03 c0       	rjmp	.+6      	; 0x2ae0 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2ada:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    2ae0:	04 1b       	sub	r16, r20
    2ae2:	15 0b       	sbc	r17, r21
    2ae4:	26 0b       	sbc	r18, r22
    2ae6:	37 0b       	sbc	r19, r23
    2ae8:	02 83       	std	Z+2, r16	; 0x02
    2aea:	13 83       	std	Z+3, r17	; 0x03
    2aec:	24 83       	std	Z+4, r18	; 0x04
    2aee:	35 83       	std	Z+5, r19	; 0x05
         break;
    2af0:	0a c0       	rjmp	.+20     	; 0x2b06 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2af2:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    2af4:	40 1b       	sub	r20, r16
    2af6:	51 0b       	sbc	r21, r17
    2af8:	62 0b       	sbc	r22, r18
    2afa:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2afc:	ed 91       	ld	r30, X+
    2afe:	fc 91       	ld	r31, X
    2b00:	11 97       	sbiw	r26, 0x01	; 1
    2b02:	30 97       	sbiw	r30, 0x00	; 0
    2b04:	01 f7       	brne	.-64     	; 0x2ac6 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    2b06:	4a 83       	std	Y+2, r20	; 0x02
    2b08:	5b 83       	std	Y+3, r21	; 0x03
    2b0a:	6c 83       	std	Y+4, r22	; 0x04
    2b0c:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    2b0e:	10 97       	sbiw	r26, 0x00	; 0
    2b10:	41 f0       	breq	.+16     	; 0x2b22 <placeTimer+0x94>
    {
      timer->next = prev->next;
    2b12:	8d 91       	ld	r24, X+
    2b14:	9c 91       	ld	r25, X
    2b16:	11 97       	sbiw	r26, 0x01	; 1
    2b18:	99 83       	std	Y+1, r25	; 0x01
    2b1a:	88 83       	st	Y, r24
      prev->next = timer;
    2b1c:	cd 93       	st	X+, r28
    2b1e:	dc 93       	st	X, r29
    2b20:	15 c0       	rjmp	.+42     	; 0x2b4c <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    2b22:	99 83       	std	Y+1, r25	; 0x01
    2b24:	88 83       	st	Y, r24
      timers = timer;
    2b26:	d0 93 dd 21 	sts	0x21DD, r29
    2b2a:	c0 93 dc 21 	sts	0x21DC, r28
    2b2e:	0e c0       	rjmp	.+28     	; 0x2b4c <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    2b34:	8e 81       	ldd	r24, Y+6	; 0x06
    2b36:	9f 81       	ldd	r25, Y+7	; 0x07
    2b38:	a8 85       	ldd	r26, Y+8	; 0x08
    2b3a:	b9 85       	ldd	r27, Y+9	; 0x09
    2b3c:	8a 83       	std	Y+2, r24	; 0x02
    2b3e:	9b 83       	std	Y+3, r25	; 0x03
    2b40:	ac 83       	std	Y+4, r26	; 0x04
    2b42:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    2b44:	d0 93 dd 21 	sts	0x21DD, r29
    2b48:	c0 93 dc 21 	sts	0x21DC, r28
  }
}
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	08 95       	ret

00002b56 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    2b56:	10 92 dd 21 	sts	0x21DD, r1
    2b5a:	10 92 dc 21 	sts	0x21DC, r1
    2b5e:	08 95       	ret

00002b60 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b64:	a0 91 dc 21 	lds	r26, 0x21DC
    2b68:	b0 91 dd 21 	lds	r27, 0x21DD
    2b6c:	10 97       	sbiw	r26, 0x00	; 0
    2b6e:	91 f1       	breq	.+100    	; 0x2bd4 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    2b70:	a8 17       	cp	r26, r24
    2b72:	b9 07       	cpc	r27, r25
    2b74:	51 f5       	brne	.+84     	; 0x2bca <SYS_TimerStop+0x6a>
    2b76:	0a c0       	rjmp	.+20     	; 0x2b8c <SYS_TimerStop+0x2c>
    2b78:	8e 17       	cp	r24, r30
    2b7a:	9f 07       	cpc	r25, r31
    2b7c:	29 f5       	brne	.+74     	; 0x2bc8 <SYS_TimerStop+0x68>
    {
      if (prev)
    2b7e:	10 97       	sbiw	r26, 0x00	; 0
    2b80:	31 f0       	breq	.+12     	; 0x2b8e <SYS_TimerStop+0x2e>
        prev->next = t->next;
    2b82:	20 81       	ld	r18, Z
    2b84:	31 81       	ldd	r19, Z+1	; 0x01
    2b86:	2d 93       	st	X+, r18
    2b88:	3c 93       	st	X, r19
    2b8a:	07 c0       	rjmp	.+14     	; 0x2b9a <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b8c:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    2b8e:	20 81       	ld	r18, Z
    2b90:	31 81       	ldd	r19, Z+1	; 0x01
    2b92:	30 93 dd 21 	sts	0x21DD, r19
    2b96:	20 93 dc 21 	sts	0x21DC, r18

      if (t->next)
    2b9a:	01 90       	ld	r0, Z+
    2b9c:	f0 81       	ld	r31, Z
    2b9e:	e0 2d       	mov	r30, r0
    2ba0:	30 97       	sbiw	r30, 0x00	; 0
    2ba2:	c1 f0       	breq	.+48     	; 0x2bd4 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    2ba4:	42 81       	ldd	r20, Z+2	; 0x02
    2ba6:	53 81       	ldd	r21, Z+3	; 0x03
    2ba8:	64 81       	ldd	r22, Z+4	; 0x04
    2baa:	75 81       	ldd	r23, Z+5	; 0x05
    2bac:	ec 01       	movw	r28, r24
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb2:	ac 81       	ldd	r26, Y+4	; 0x04
    2bb4:	bd 81       	ldd	r27, Y+5	; 0x05
    2bb6:	84 0f       	add	r24, r20
    2bb8:	95 1f       	adc	r25, r21
    2bba:	a6 1f       	adc	r26, r22
    2bbc:	b7 1f       	adc	r27, r23
    2bbe:	82 83       	std	Z+2, r24	; 0x02
    2bc0:	93 83       	std	Z+3, r25	; 0x03
    2bc2:	a4 83       	std	Z+4, r26	; 0x04
    2bc4:	b5 83       	std	Z+5, r27	; 0x05
    2bc6:	06 c0       	rjmp	.+12     	; 0x2bd4 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2bc8:	df 01       	movw	r26, r30
    2bca:	ed 91       	ld	r30, X+
    2bcc:	fc 91       	ld	r31, X
    2bce:	11 97       	sbiw	r26, 0x01	; 1
    2bd0:	30 97       	sbiw	r30, 0x00	; 0
    2bd2:	91 f6       	brne	.-92     	; 0x2b78 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	08 95       	ret

00002bda <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2bda:	e0 91 dc 21 	lds	r30, 0x21DC
    2bde:	f0 91 dd 21 	lds	r31, 0x21DD
    2be2:	30 97       	sbiw	r30, 0x00	; 0
    2be4:	71 f0       	breq	.+28     	; 0x2c02 <SYS_TimerStarted+0x28>
    if (t == timer)
    2be6:	e8 17       	cp	r30, r24
    2be8:	f9 07       	cpc	r31, r25
    2bea:	21 f4       	brne	.+8      	; 0x2bf4 <SYS_TimerStarted+0x1a>
    2bec:	0c c0       	rjmp	.+24     	; 0x2c06 <SYS_TimerStarted+0x2c>
    2bee:	8e 17       	cp	r24, r30
    2bf0:	9f 07       	cpc	r25, r31
    2bf2:	59 f0       	breq	.+22     	; 0x2c0a <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2bf4:	01 90       	ld	r0, Z+
    2bf6:	f0 81       	ld	r31, Z
    2bf8:	e0 2d       	mov	r30, r0
    2bfa:	30 97       	sbiw	r30, 0x00	; 0
    2bfc:	c1 f7       	brne	.-16     	; 0x2bee <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	08 95       	ret
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	08 95       	ret
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    2c0c:	08 95       	ret

00002c0e <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    2c14:	e2 df       	rcall	.-60     	; 0x2bda <SYS_TimerStarted>
    2c16:	81 11       	cpse	r24, r1
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <SYS_TimerStart+0x10>
    placeTimer(timer);
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	38 df       	rcall	.-400    	; 0x2a8e <placeTimer>
}
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	08 95       	ret

00002c24 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2c24:	cf 92       	push	r12
    2c26:	df 92       	push	r13
    2c28:	ef 92       	push	r14
    2c2a:	ff 92       	push	r15
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    2c30:	80 91 6a 23 	lds	r24, 0x236A
    2c34:	88 23       	and	r24, r24
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <SYS_TimerTaskHandler+0x16>
    2c38:	59 c0       	rjmp	.+178    	; 0x2cec <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    2c3a:	8f b7       	in	r24, 0x3f	; 63
    2c3c:	f8 94       	cli
    cnt = halTimerIrqCount;
    2c3e:	c0 90 6a 23 	lds	r12, 0x236A
    halTimerIrqCount = 0;
    2c42:	10 92 6a 23 	sts	0x236A, r1
  ATOMIC_SECTION_LEAVE
    2c46:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    2c48:	d1 2c       	mov	r13, r1
    2c4a:	e1 2c       	mov	r14, r1
    2c4c:	f1 2c       	mov	r15, r1
    2c4e:	cc 0c       	add	r12, r12
    2c50:	dd 1c       	adc	r13, r13
    2c52:	ee 1c       	adc	r14, r14
    2c54:	ff 1c       	adc	r15, r15
    2c56:	d7 01       	movw	r26, r14
    2c58:	c6 01       	movw	r24, r12
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	aa 1f       	adc	r26, r26
    2c60:	bb 1f       	adc	r27, r27
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	aa 1f       	adc	r26, r26
    2c68:	bb 1f       	adc	r27, r27
    2c6a:	c8 0e       	add	r12, r24
    2c6c:	d9 1e       	adc	r13, r25
    2c6e:	ea 1e       	adc	r14, r26
    2c70:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    2c72:	c0 91 dc 21 	lds	r28, 0x21DC
    2c76:	d0 91 dd 21 	lds	r29, 0x21DD
    2c7a:	20 97       	sbiw	r28, 0x00	; 0
    2c7c:	b9 f1       	breq	.+110    	; 0x2cec <SYS_TimerTaskHandler+0xc8>
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	9b 81       	ldd	r25, Y+3	; 0x03
    2c82:	ac 81       	ldd	r26, Y+4	; 0x04
    2c84:	bd 81       	ldd	r27, Y+5	; 0x05
    2c86:	c8 16       	cp	r12, r24
    2c88:	d9 06       	cpc	r13, r25
    2c8a:	ea 06       	cpc	r14, r26
    2c8c:	fb 06       	cpc	r15, r27
    2c8e:	10 f1       	brcs	.+68     	; 0x2cd4 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    2c90:	c8 1a       	sub	r12, r24
    2c92:	d9 0a       	sbc	r13, r25
    2c94:	ea 0a       	sbc	r14, r26
    2c96:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    2c98:	88 81       	ld	r24, Y
    2c9a:	99 81       	ldd	r25, Y+1	; 0x01
    2c9c:	90 93 dd 21 	sts	0x21DD, r25
    2ca0:	80 93 dc 21 	sts	0x21DC, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    2ca4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	11 f4       	brne	.+4      	; 0x2cae <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    2caa:	ce 01       	movw	r24, r28
    2cac:	f0 de       	rcall	.-544    	; 0x2a8e <placeTimer>
    timer->handler(timer);
    2cae:	eb 85       	ldd	r30, Y+11	; 0x0b
    2cb0:	fc 85       	ldd	r31, Y+12	; 0x0c
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    2cb6:	c0 91 dc 21 	lds	r28, 0x21DC
    2cba:	d0 91 dd 21 	lds	r29, 0x21DD
    2cbe:	20 97       	sbiw	r28, 0x00	; 0
    2cc0:	a9 f0       	breq	.+42     	; 0x2cec <SYS_TimerTaskHandler+0xc8>
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	ac 81       	ldd	r26, Y+4	; 0x04
    2cc8:	bd 81       	ldd	r27, Y+5	; 0x05
    2cca:	c8 16       	cp	r12, r24
    2ccc:	d9 06       	cpc	r13, r25
    2cce:	ea 06       	cpc	r14, r26
    2cd0:	fb 06       	cpc	r15, r27
    2cd2:	f0 f6       	brcc	.-68     	; 0x2c90 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd8:	ac 81       	ldd	r26, Y+4	; 0x04
    2cda:	bd 81       	ldd	r27, Y+5	; 0x05
    2cdc:	8c 19       	sub	r24, r12
    2cde:	9d 09       	sbc	r25, r13
    2ce0:	ae 09       	sbc	r26, r14
    2ce2:	bf 09       	sbc	r27, r15
    2ce4:	8a 83       	std	Y+2, r24	; 0x02
    2ce6:	9b 83       	std	Y+3, r25	; 0x03
    2ce8:	ac 83       	std	Y+4, r26	; 0x04
    2cea:	bd 83       	std	Y+5, r27	; 0x05
}
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
    2cf8:	08 95       	ret

00002cfa <errorTimerStatusHandler>:
	else
	{
		int_to_ascii((uint8_t)data);
		send_usart_char("\r\n");
	}
}
    2cfa:	80 91 ca 22 	lds	r24, 0x22CA
    2cfe:	8f 5f       	subi	r24, 0xFF	; 255
    2d00:	80 93 ca 22 	sts	0x22CA, r24
    2d04:	88 23       	and	r24, r24
    2d06:	19 f0       	breq	.+6      	; 0x2d0e <errorTimerStatusHandler+0x14>
    2d08:	10 92 ca 22 	sts	0x22CA, r1
    2d0c:	08 95       	ret
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	80 93 ef 22 	sts	0x22EF, r24
    2d14:	08 95       	ret

00002d16 <appLEDIntervalTimerHandler>:
    2d16:	84 ef       	ldi	r24, 0xF4	; 244
    2d18:	92 e2       	ldi	r25, 0x22	; 34
    2d1a:	79 cf       	rjmp	.-270    	; 0x2c0e <SYS_TimerStart>
    2d1c:	08 95       	ret

00002d1e <appWPSActivationTimerHandler>:
    2d1e:	80 91 ac 22 	lds	r24, 0x22AC
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	81 f4       	brne	.+32     	; 0x2d46 <appWPSActivationTimerHandler+0x28>
    2d26:	85 e3       	ldi	r24, 0x35	; 53
    2d28:	93 e2       	ldi	r25, 0x23	; 35
    2d2a:	1a df       	rcall	.-460    	; 0x2b60 <SYS_TimerStop>
    2d2c:	84 e0       	ldi	r24, 0x04	; 4
    2d2e:	80 93 b6 22 	sts	0x22B6, r24
    2d32:	10 92 b1 22 	sts	0x22B1, r1
    2d36:	10 92 b0 22 	sts	0x22B0, r1
    2d3a:	0e 94 84 02 	call	0x508	; 0x508 <APP_IbLoadSettings_WPS>
    2d3e:	86 e4       	ldi	r24, 0x46	; 70
    2d40:	93 e2       	ldi	r25, 0x23	; 35
    2d42:	65 cf       	rjmp	.-310    	; 0x2c0e <SYS_TimerStart>
    2d44:	08 95       	ret
    2d46:	81 11       	cpse	r24, r1
    2d48:	10 c0       	rjmp	.+32     	; 0x2d6a <appWPSActivationTimerHandler+0x4c>
    2d4a:	85 e3       	ldi	r24, 0x35	; 53
    2d4c:	93 e2       	ldi	r25, 0x23	; 35
    2d4e:	08 df       	rcall	.-496    	; 0x2b60 <SYS_TimerStop>
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	80 93 b6 22 	sts	0x22B6, r24
    2d56:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <APP_IbLoadSettings>
    2d5a:	0e 94 0b 03 	call	0x616	; 0x616 <APP_NwkInit>
    2d5e:	86 e4       	ldi	r24, 0x46	; 70
    2d60:	93 e2       	ldi	r25, 0x23	; 35
    2d62:	fe de       	rcall	.-516    	; 0x2b60 <SYS_TimerStop>
    2d64:	8d e8       	ldi	r24, 0x8D	; 141
    2d66:	92 e2       	ldi	r25, 0x22	; 34
    2d68:	fb ce       	rjmp	.-522    	; 0x2b60 <SYS_TimerStop>
    2d6a:	08 95       	ret

00002d6c <appWPSRequestTimerHandler>:
    2d6c:	8e ed       	ldi	r24, 0xDE	; 222
    2d6e:	91 e2       	ldi	r25, 0x21	; 33
    2d70:	0c 94 c7 36 	jmp	0x6d8e	; 0x6d8e <request_to_RF>
    2d74:	08 95       	ret

00002d76 <errorTimerWpsHandler>:
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	80 93 88 22 	sts	0x2288, r24
    2d7c:	8f e2       	ldi	r24, 0x2F	; 47
    2d7e:	92 e0       	ldi	r25, 0x02	; 2
    2d80:	0c 94 92 27 	jmp	0x4f24	; 0x4f24 <send_usart_char>
    2d84:	08 95       	ret

00002d86 <appLEDTimerHandler>:
    2d86:	80 91 5b 22 	lds	r24, 0x225B
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	08 f0       	brcs	.+2      	; 0x2d90 <appLEDTimerHandler+0xa>
    2d8e:	6a c0       	rjmp	.+212    	; 0x2e64 <appLEDTimerHandler+0xde>
    2d90:	80 91 72 22 	lds	r24, 0x2272
    2d94:	82 30       	cpi	r24, 0x02	; 2
    2d96:	49 f0       	breq	.+18     	; 0x2daa <appLEDTimerHandler+0x24>
    2d98:	18 f4       	brcc	.+6      	; 0x2da0 <appLEDTimerHandler+0x1a>
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	c9 f1       	breq	.+114    	; 0x2e10 <appLEDTimerHandler+0x8a>
    2d9e:	49 c0       	rjmp	.+146    	; 0x2e32 <appLEDTimerHandler+0xac>
    2da0:	85 30       	cpi	r24, 0x05	; 5
    2da2:	a1 f0       	breq	.+40     	; 0x2dcc <appLEDTimerHandler+0x46>
    2da4:	86 30       	cpi	r24, 0x06	; 6
    2da6:	19 f1       	breq	.+70     	; 0x2dee <appLEDTimerHandler+0x68>
    2da8:	44 c0       	rjmp	.+136    	; 0x2e32 <appLEDTimerHandler+0xac>
    2daa:	60 91 cb 22 	lds	r22, 0x22CB
    2dae:	70 91 cc 22 	lds	r23, 0x22CC
    2db2:	80 91 cd 22 	lds	r24, 0x22CD
    2db6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2dba:	60 91 a9 22 	lds	r22, 0x22A9
    2dbe:	70 91 aa 22 	lds	r23, 0x22AA
    2dc2:	80 91 ab 22 	lds	r24, 0x22AB
    2dc6:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2dca:	43 c0       	rjmp	.+134    	; 0x2e52 <appLEDTimerHandler+0xcc>
    2dcc:	60 91 a9 22 	lds	r22, 0x22A9
    2dd0:	70 91 aa 22 	lds	r23, 0x22AA
    2dd4:	80 91 ab 22 	lds	r24, 0x22AB
    2dd8:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2ddc:	60 91 cb 22 	lds	r22, 0x22CB
    2de0:	70 91 cc 22 	lds	r23, 0x22CC
    2de4:	80 91 cd 22 	lds	r24, 0x22CD
    2de8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2dec:	32 c0       	rjmp	.+100    	; 0x2e52 <appLEDTimerHandler+0xcc>
    2dee:	60 91 a9 22 	lds	r22, 0x22A9
    2df2:	70 91 aa 22 	lds	r23, 0x22AA
    2df6:	80 91 ab 22 	lds	r24, 0x22AB
    2dfa:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2dfe:	60 91 cb 22 	lds	r22, 0x22CB
    2e02:	70 91 cc 22 	lds	r23, 0x22CC
    2e06:	80 91 cd 22 	lds	r24, 0x22CD
    2e0a:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2e0e:	21 c0       	rjmp	.+66     	; 0x2e52 <appLEDTimerHandler+0xcc>
    2e10:	60 91 a9 22 	lds	r22, 0x22A9
    2e14:	70 91 aa 22 	lds	r23, 0x22AA
    2e18:	80 91 ab 22 	lds	r24, 0x22AB
    2e1c:	0e 94 1f 0a 	call	0x143e	; 0x143e <gpio_toggle>
    2e20:	60 91 cb 22 	lds	r22, 0x22CB
    2e24:	70 91 cc 22 	lds	r23, 0x22CC
    2e28:	80 91 cd 22 	lds	r24, 0x22CD
    2e2c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2e30:	10 c0       	rjmp	.+32     	; 0x2e52 <appLEDTimerHandler+0xcc>
    2e32:	60 91 a9 22 	lds	r22, 0x22A9
    2e36:	70 91 aa 22 	lds	r23, 0x22AA
    2e3a:	80 91 ab 22 	lds	r24, 0x22AB
    2e3e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2e42:	60 91 cb 22 	lds	r22, 0x22CB
    2e46:	70 91 cc 22 	lds	r23, 0x22CC
    2e4a:	80 91 cd 22 	lds	r24, 0x22CD
    2e4e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2e52:	80 91 5b 22 	lds	r24, 0x225B
    2e56:	8f 5f       	subi	r24, 0xFF	; 255
    2e58:	80 93 5b 22 	sts	0x225B, r24
    2e5c:	84 ef       	ldi	r24, 0xF4	; 244
    2e5e:	92 e2       	ldi	r25, 0x22	; 34
    2e60:	d6 ce       	rjmp	.-596    	; 0x2c0e <SYS_TimerStart>
    2e62:	08 95       	ret
    2e64:	60 91 a9 22 	lds	r22, 0x22A9
    2e68:	70 91 aa 22 	lds	r23, 0x22AA
    2e6c:	80 91 ab 22 	lds	r24, 0x22AB
    2e70:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2e74:	60 91 cb 22 	lds	r22, 0x22CB
    2e78:	70 91 cc 22 	lds	r23, 0x22CC
    2e7c:	80 91 cd 22 	lds	r24, 0x22CD
    2e80:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    2e84:	10 92 5b 22 	sts	0x225B, r1
    2e88:	8e ec       	ldi	r24, 0xCE	; 206
    2e8a:	92 e2       	ldi	r25, 0x22	; 34
    2e8c:	c0 ce       	rjmp	.-640    	; 0x2c0e <SYS_TimerStart>
    2e8e:	08 95       	ret

00002e90 <PNEWELSGpioInit>:
    2e90:	ef 92       	push	r14
    2e92:	ff 92       	push	r15
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	e1 e0       	ldi	r30, 0x01	; 1
    2e9e:	f3 e2       	ldi	r31, 0x23	; 35
    2ea0:	10 82       	st	Z, r1
    2ea2:	0f 2e       	mov	r0, r31
    2ea4:	f3 e0       	ldi	r31, 0x03	; 3
    2ea6:	ff 2e       	mov	r15, r31
    2ea8:	f0 2d       	mov	r31, r0
    2eaa:	f1 82       	std	Z+1, r15	; 0x01
    2eac:	8b e0       	ldi	r24, 0x0B	; 11
    2eae:	82 83       	std	Z+2, r24	; 0x02
    2eb0:	60 91 01 23 	lds	r22, 0x2301
    2eb4:	70 91 02 23 	lds	r23, 0x2302
    2eb8:	80 91 03 23 	lds	r24, 0x2303
    2ebc:	49 ee       	ldi	r20, 0xE9	; 233
    2ebe:	5b e1       	ldi	r21, 0x1B	; 27
    2ec0:	0e 94 4a 09 	call	0x1294	; 0x1294 <ext_int_set_interrupt_callback>
    2ec4:	60 91 01 23 	lds	r22, 0x2301
    2ec8:	70 91 02 23 	lds	r23, 0x2302
    2ecc:	80 91 03 23 	lds	r24, 0x2303
    2ed0:	0e 94 34 09 	call	0x1268	; 0x1268 <ext_int_pcint_init>
    2ed4:	ea e9       	ldi	r30, 0x9A	; 154
    2ed6:	f2 e2       	ldi	r31, 0x22	; 34
    2ed8:	10 82       	st	Z, r1
    2eda:	c2 e0       	ldi	r28, 0x02	; 2
    2edc:	c1 83       	std	Z+1, r28	; 0x01
    2ede:	8a e0       	ldi	r24, 0x0A	; 10
    2ee0:	82 83       	std	Z+2, r24	; 0x02
    2ee2:	60 91 9a 22 	lds	r22, 0x229A
    2ee6:	70 91 9b 22 	lds	r23, 0x229B
    2eea:	80 91 9c 22 	lds	r24, 0x229C
    2eee:	0e 94 34 09 	call	0x1268	; 0x1268 <ext_int_pcint_init>
    2ef2:	ed e9       	ldi	r30, 0x9D	; 157
    2ef4:	f2 e2       	ldi	r31, 0x22	; 34
    2ef6:	10 82       	st	Z, r1
    2ef8:	d1 e0       	ldi	r29, 0x01	; 1
    2efa:	d1 83       	std	Z+1, r29	; 0x01
    2efc:	89 e0       	ldi	r24, 0x09	; 9
    2efe:	82 83       	std	Z+2, r24	; 0x02
    2f00:	60 91 9d 22 	lds	r22, 0x229D
    2f04:	70 91 9e 22 	lds	r23, 0x229E
    2f08:	80 91 9f 22 	lds	r24, 0x229F
    2f0c:	0e 94 34 09 	call	0x1268	; 0x1268 <ext_int_pcint_init>
    2f10:	e3 e4       	ldi	r30, 0x43	; 67
    2f12:	f3 e2       	ldi	r31, 0x23	; 35
    2f14:	10 82       	st	Z, r1
    2f16:	11 82       	std	Z+1, r1	; 0x01
    2f18:	88 e0       	ldi	r24, 0x08	; 8
    2f1a:	82 83       	std	Z+2, r24	; 0x02
    2f1c:	60 91 43 23 	lds	r22, 0x2343
    2f20:	70 91 44 23 	lds	r23, 0x2344
    2f24:	80 91 45 23 	lds	r24, 0x2345
    2f28:	0e 94 34 09 	call	0x1268	; 0x1268 <ext_int_pcint_init>
    2f2c:	e0 ef       	ldi	r30, 0xF0	; 240
    2f2e:	f2 e2       	ldi	r31, 0x22	; 34
    2f30:	d0 83       	st	Z, r29
    2f32:	68 94       	set
    2f34:	ee 24       	eor	r14, r14
    2f36:	e2 f8       	bld	r14, 2
    2f38:	e1 82       	std	Z+1, r14	; 0x01
    2f3a:	60 91 f0 22 	lds	r22, 0x22F0
    2f3e:	70 91 f1 22 	lds	r23, 0x22F1
    2f42:	80 91 f2 22 	lds	r24, 0x22F2
    2f46:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    2f4a:	60 91 f0 22 	lds	r22, 0x22F0
    2f4e:	70 91 f1 22 	lds	r23, 0x22F1
    2f52:	80 91 f2 22 	lds	r24, 0x22F2
    2f56:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    2f5a:	e9 ea       	ldi	r30, 0xA9	; 169
    2f5c:	f2 e2       	ldi	r31, 0x22	; 34
    2f5e:	c0 83       	st	Z, r28
    2f60:	05 e0       	ldi	r16, 0x05	; 5
    2f62:	01 83       	std	Z+1, r16	; 0x01
    2f64:	60 91 a9 22 	lds	r22, 0x22A9
    2f68:	70 91 aa 22 	lds	r23, 0x22AA
    2f6c:	80 91 ab 22 	lds	r24, 0x22AB
    2f70:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2f74:	eb ec       	ldi	r30, 0xCB	; 203
    2f76:	f2 e2       	ldi	r31, 0x22	; 34
    2f78:	c0 83       	st	Z, r28
    2f7a:	17 e0       	ldi	r17, 0x07	; 7
    2f7c:	11 83       	std	Z+1, r17	; 0x01
    2f7e:	60 91 cb 22 	lds	r22, 0x22CB
    2f82:	70 91 cc 22 	lds	r23, 0x22CC
    2f86:	80 91 cd 22 	lds	r24, 0x22CD
    2f8a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2f8e:	ed ed       	ldi	r30, 0xDD	; 221
    2f90:	f2 e2       	ldi	r31, 0x22	; 34
    2f92:	c0 83       	st	Z, r28
    2f94:	e1 82       	std	Z+1, r14	; 0x01
    2f96:	60 91 dd 22 	lds	r22, 0x22DD
    2f9a:	70 91 de 22 	lds	r23, 0x22DE
    2f9e:	80 91 df 22 	lds	r24, 0x22DF
    2fa2:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2fa6:	ed ea       	ldi	r30, 0xAD	; 173
    2fa8:	f2 e2       	ldi	r31, 0x22	; 34
    2faa:	c0 83       	st	Z, r28
    2fac:	f1 82       	std	Z+1, r15	; 0x01
    2fae:	60 91 ad 22 	lds	r22, 0x22AD
    2fb2:	70 91 ae 22 	lds	r23, 0x22AE
    2fb6:	80 91 af 22 	lds	r24, 0x22AF
    2fba:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2fbe:	00 93 8b 22 	sts	0x228B, r16
    2fc2:	60 91 8a 22 	lds	r22, 0x228A
    2fc6:	70 91 8b 22 	lds	r23, 0x228B
    2fca:	80 91 8c 22 	lds	r24, 0x228C
    2fce:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2fd2:	0f 2e       	mov	r0, r31
    2fd4:	f6 e0       	ldi	r31, 0x06	; 6
    2fd6:	ff 2e       	mov	r15, r31
    2fd8:	f0 2d       	mov	r31, r0
    2fda:	f0 92 5f 23 	sts	0x235F, r15
    2fde:	60 91 5e 23 	lds	r22, 0x235E
    2fe2:	70 91 5f 23 	lds	r23, 0x235F
    2fe6:	80 91 60 23 	lds	r24, 0x2360
    2fea:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    2fee:	10 93 65 23 	sts	0x2365, r17
    2ff2:	60 91 64 23 	lds	r22, 0x2364
    2ff6:	70 91 65 23 	lds	r23, 0x2365
    2ffa:	80 91 66 23 	lds	r24, 0x2366
    2ffe:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpio_out>
    3002:	e8 e5       	ldi	r30, 0x58	; 88
    3004:	f3 e2       	ldi	r31, 0x23	; 35
    3006:	c0 83       	st	Z, r28
    3008:	11 82       	std	Z+1, r1	; 0x01
    300a:	60 91 58 23 	lds	r22, 0x2358
    300e:	70 91 59 23 	lds	r23, 0x2359
    3012:	80 91 5a 23 	lds	r24, 0x235A
    3016:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    301a:	60 91 58 23 	lds	r22, 0x2358
    301e:	70 91 59 23 	lds	r23, 0x2359
    3022:	80 91 5a 23 	lds	r24, 0x235A
    3026:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    302a:	e3 e5       	ldi	r30, 0x53	; 83
    302c:	f3 e2       	ldi	r31, 0x23	; 35
    302e:	c0 83       	st	Z, r28
    3030:	d1 83       	std	Z+1, r29	; 0x01
    3032:	60 91 53 23 	lds	r22, 0x2353
    3036:	70 91 54 23 	lds	r23, 0x2354
    303a:	80 91 55 23 	lds	r24, 0x2355
    303e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    3042:	60 91 53 23 	lds	r22, 0x2353
    3046:	70 91 54 23 	lds	r23, 0x2354
    304a:	80 91 55 23 	lds	r24, 0x2355
    304e:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    3052:	e6 ea       	ldi	r30, 0xA6	; 166
    3054:	f2 e2       	ldi	r31, 0x22	; 34
    3056:	c0 83       	st	Z, r28
    3058:	c1 83       	std	Z+1, r28	; 0x01
    305a:	60 91 a6 22 	lds	r22, 0x22A6
    305e:	70 91 a7 22 	lds	r23, 0x22A7
    3062:	80 91 a8 22 	lds	r24, 0x22A8
    3066:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    306a:	60 91 a6 22 	lds	r22, 0x22A6
    306e:	70 91 a7 22 	lds	r23, 0x22A7
    3072:	80 91 a8 22 	lds	r24, 0x22A8
    3076:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    307a:	e4 e0       	ldi	r30, 0x04	; 4
    307c:	f3 e2       	ldi	r31, 0x23	; 35
    307e:	d0 83       	st	Z, r29
    3080:	01 83       	std	Z+1, r16	; 0x01
    3082:	60 91 04 23 	lds	r22, 0x2304
    3086:	70 91 05 23 	lds	r23, 0x2305
    308a:	80 91 06 23 	lds	r24, 0x2306
    308e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    3092:	60 91 04 23 	lds	r22, 0x2304
    3096:	70 91 05 23 	lds	r23, 0x2305
    309a:	80 91 06 23 	lds	r24, 0x2306
    309e:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    30a2:	ec e5       	ldi	r30, 0x5C	; 92
    30a4:	f2 e2       	ldi	r31, 0x22	; 34
    30a6:	d0 83       	st	Z, r29
    30a8:	f1 82       	std	Z+1, r15	; 0x01
    30aa:	60 91 5c 22 	lds	r22, 0x225C
    30ae:	70 91 5d 22 	lds	r23, 0x225D
    30b2:	80 91 5e 22 	lds	r24, 0x225E
    30b6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    30ba:	60 91 5c 22 	lds	r22, 0x225C
    30be:	70 91 5d 22 	lds	r23, 0x225D
    30c2:	80 91 5e 22 	lds	r24, 0x225E
    30c6:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    30ca:	e3 eb       	ldi	r30, 0xB3	; 179
    30cc:	f2 e2       	ldi	r31, 0x22	; 34
    30ce:	d0 83       	st	Z, r29
    30d0:	11 83       	std	Z+1, r17	; 0x01
    30d2:	60 91 b3 22 	lds	r22, 0x22B3
    30d6:	70 91 b4 22 	lds	r23, 0x22B4
    30da:	80 91 b5 22 	lds	r24, 0x22B5
    30de:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <gpio_in>
    30e2:	60 91 b3 22 	lds	r22, 0x22B3
    30e6:	70 91 b4 22 	lds	r23, 0x22B4
    30ea:	80 91 b5 22 	lds	r24, 0x22B5
    30ee:	0e 94 05 0b 	call	0x160a	; 0x160a <gpio_pullup>
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	ff 90       	pop	r15
    30fc:	ef 90       	pop	r14
    30fe:	08 95       	ret

00003100 <pneOperationMode>:
    3100:	0f 93       	push	r16
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	80 91 b6 22 	lds	r24, 0x22B6
    310a:	82 30       	cpi	r24, 0x02	; 2
    310c:	09 f4       	brne	.+2      	; 0x3110 <pneOperationMode+0x10>
    310e:	f1 c1       	rjmp	.+994    	; 0x34f2 <pneOperationMode+0x3f2>
    3110:	30 f4       	brcc	.+12     	; 0x311e <pneOperationMode+0x1e>
    3112:	88 23       	and	r24, r24
    3114:	09 f4       	brne	.+2      	; 0x3118 <pneOperationMode+0x18>
    3116:	6e c0       	rjmp	.+220    	; 0x31f4 <pneOperationMode+0xf4>
    3118:	81 30       	cpi	r24, 0x01	; 1
    311a:	51 f0       	breq	.+20     	; 0x3130 <pneOperationMode+0x30>
    311c:	25 c3       	rjmp	.+1610   	; 0x3768 <pneOperationMode+0x668>
    311e:	84 30       	cpi	r24, 0x04	; 4
    3120:	09 f4       	brne	.+2      	; 0x3124 <pneOperationMode+0x24>
    3122:	81 c2       	rjmp	.+1282   	; 0x3626 <pneOperationMode+0x526>
    3124:	08 f4       	brcc	.+2      	; 0x3128 <pneOperationMode+0x28>
    3126:	36 c1       	rjmp	.+620    	; 0x3394 <pneOperationMode+0x294>
    3128:	85 30       	cpi	r24, 0x05	; 5
    312a:	09 f4       	brne	.+2      	; 0x312e <pneOperationMode+0x2e>
    312c:	3f c2       	rjmp	.+1150   	; 0x35ac <pneOperationMode+0x4ac>
    312e:	1c c3       	rjmp	.+1592   	; 0x3768 <pneOperationMode+0x668>
    3130:	10 92 ac 22 	sts	0x22AC, r1
    3134:	c1 e0       	ldi	r28, 0x01	; 1
    3136:	c0 93 88 22 	sts	0x2288, r28
    313a:	60 91 8a 22 	lds	r22, 0x228A
    313e:	70 91 8b 22 	lds	r23, 0x228B
    3142:	80 91 8c 22 	lds	r24, 0x228C
    3146:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    314a:	e0 e6       	ldi	r30, 0x60	; 96
    314c:	f2 e2       	ldi	r31, 0x22	; 34
    314e:	13 86       	std	Z+11, r1	; 0x0b
    3150:	c3 8b       	std	Z+19, r28	; 0x13
    3152:	85 e0       	ldi	r24, 0x05	; 5
    3154:	82 8b       	std	Z+18, r24	; 0x12
    3156:	c1 8b       	std	Z+17, r28	; 0x11
    3158:	84 ef       	ldi	r24, 0xF4	; 244
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	a0 e0       	ldi	r26, 0x00	; 0
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	80 93 fa 22 	sts	0x22FA, r24
    3164:	90 93 fb 22 	sts	0x22FB, r25
    3168:	a0 93 fc 22 	sts	0x22FC, r26
    316c:	b0 93 fd 22 	sts	0x22FD, r27
    3170:	88 ee       	ldi	r24, 0xE8	; 232
    3172:	93 e0       	ldi	r25, 0x03	; 3
    3174:	a0 e0       	ldi	r26, 0x00	; 0
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	80 93 d4 22 	sts	0x22D4, r24
    317c:	90 93 d5 22 	sts	0x22D5, r25
    3180:	a0 93 d6 22 	sts	0x22D6, r26
    3184:	b0 93 d7 22 	sts	0x22D7, r27
    3188:	80 81       	ld	r24, Z
    318a:	81 30       	cpi	r24, 0x01	; 1
    318c:	81 f4       	brne	.+32     	; 0x31ae <pneOperationMode+0xae>
    318e:	80 91 f3 22 	lds	r24, 0x22F3
    3192:	81 11       	cpse	r24, r1
    3194:	0c c0       	rjmp	.+24     	; 0x31ae <pneOperationMode+0xae>
    3196:	60 91 dd 22 	lds	r22, 0x22DD
    319a:	70 91 de 22 	lds	r23, 0x22DE
    319e:	80 91 df 22 	lds	r24, 0x22DF
    31a2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    31a6:	81 11       	cpse	r24, r1
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <pneOperationMode+0xae>
    31aa:	10 92 b6 22 	sts	0x22B6, r1
    31ae:	80 91 68 22 	lds	r24, 0x2268
    31b2:	81 30       	cpi	r24, 0x01	; 1
    31b4:	21 f0       	breq	.+8      	; 0x31be <pneOperationMode+0xbe>
    31b6:	80 91 63 22 	lds	r24, 0x2263
    31ba:	81 30       	cpi	r24, 0x01	; 1
    31bc:	11 f4       	brne	.+4      	; 0x31c2 <pneOperationMode+0xc2>
    31be:	10 92 b6 22 	sts	0x22B6, r1
    31c2:	80 91 64 22 	lds	r24, 0x2264
    31c6:	81 30       	cpi	r24, 0x01	; 1
    31c8:	19 f4       	brne	.+6      	; 0x31d0 <pneOperationMode+0xd0>
    31ca:	85 e0       	ldi	r24, 0x05	; 5
    31cc:	80 93 b6 22 	sts	0x22B6, r24
    31d0:	80 91 69 22 	lds	r24, 0x2269
    31d4:	81 30       	cpi	r24, 0x01	; 1
    31d6:	19 f4       	brne	.+6      	; 0x31de <pneOperationMode+0xde>
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	80 93 b6 22 	sts	0x22B6, r24
    31de:	80 91 6a 22 	lds	r24, 0x226A
    31e2:	81 30       	cpi	r24, 0x01	; 1
    31e4:	09 f0       	breq	.+2      	; 0x31e8 <pneOperationMode+0xe8>
    31e6:	c0 c2       	rjmp	.+1408   	; 0x3768 <pneOperationMode+0x668>
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	80 93 b6 22 	sts	0x22B6, r24
    31ee:	10 92 e1 22 	sts	0x22E1, r1
    31f2:	ba c2       	rjmp	.+1396   	; 0x3768 <pneOperationMode+0x668>
    31f4:	80 91 e1 22 	lds	r24, 0x22E1
    31f8:	81 30       	cpi	r24, 0x01	; 1
    31fa:	31 f4       	brne	.+12     	; 0x3208 <pneOperationMode+0x108>
    31fc:	80 91 e1 22 	lds	r24, 0x22E1
    3200:	8f 5f       	subi	r24, 0xFF	; 255
    3202:	80 93 e1 22 	sts	0x22E1, r24
    3206:	02 c0       	rjmp	.+4      	; 0x320c <pneOperationMode+0x10c>
    3208:	10 92 e1 22 	sts	0x22E1, r1
    320c:	10 92 ac 22 	sts	0x22AC, r1
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	80 93 88 22 	sts	0x2288, r24
    3216:	e0 e6       	ldi	r30, 0x60	; 96
    3218:	f2 e2       	ldi	r31, 0x22	; 34
    321a:	82 8b       	std	Z+18, r24	; 0x12
    321c:	8a ef       	ldi	r24, 0xFA	; 250
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	a0 e0       	ldi	r26, 0x00	; 0
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	80 93 fa 22 	sts	0x22FA, r24
    3228:	90 93 fb 22 	sts	0x22FB, r25
    322c:	a0 93 fc 22 	sts	0x22FC, r26
    3230:	b0 93 fd 22 	sts	0x22FD, r27
    3234:	84 ef       	ldi	r24, 0xF4	; 244
    3236:	91 e0       	ldi	r25, 0x01	; 1
    3238:	a0 e0       	ldi	r26, 0x00	; 0
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	80 93 d4 22 	sts	0x22D4, r24
    3240:	90 93 d5 22 	sts	0x22D5, r25
    3244:	a0 93 d6 22 	sts	0x22D6, r26
    3248:	b0 93 d7 22 	sts	0x22D7, r27
    324c:	80 89       	ldd	r24, Z+16	; 0x10
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	21 f0       	breq	.+8      	; 0x325a <pneOperationMode+0x15a>
    3252:	80 91 71 22 	lds	r24, 0x2271
    3256:	81 11       	cpse	r24, r1
    3258:	14 c0       	rjmp	.+40     	; 0x3282 <pneOperationMode+0x182>
    325a:	60 91 8a 22 	lds	r22, 0x228A
    325e:	70 91 8b 22 	lds	r23, 0x228B
    3262:	80 91 8c 22 	lds	r24, 0x228C
    3266:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    326a:	10 92 6b 22 	sts	0x226B, r1
    326e:	80 91 33 23 	lds	r24, 0x2333
    3272:	81 11       	cpse	r24, r1
    3274:	06 c0       	rjmp	.+12     	; 0x3282 <pneOperationMode+0x182>
    3276:	87 e0       	ldi	r24, 0x07	; 7
    3278:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	80 93 33 23 	sts	0x2333, r24
    3282:	80 91 70 22 	lds	r24, 0x2270
    3286:	81 11       	cpse	r24, r1
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <pneOperationMode+0x1a8>
    328a:	80 91 71 22 	lds	r24, 0x2271
    328e:	81 30       	cpi	r24, 0x01	; 1
    3290:	59 f4       	brne	.+22     	; 0x32a8 <pneOperationMode+0x1a8>
    3292:	60 91 8a 22 	lds	r22, 0x228A
    3296:	70 91 8b 22 	lds	r23, 0x228B
    329a:	80 91 8c 22 	lds	r24, 0x228C
    329e:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	80 93 6b 22 	sts	0x226B, r24
    32a8:	80 91 56 23 	lds	r24, 0x2356
    32ac:	81 11       	cpse	r24, r1
    32ae:	06 c0       	rjmp	.+12     	; 0x32bc <pneOperationMode+0x1bc>
    32b0:	84 e0       	ldi	r24, 0x04	; 4
    32b2:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	80 93 56 23 	sts	0x2356, r24
    32bc:	80 91 6a 22 	lds	r24, 0x226A
    32c0:	81 30       	cpi	r24, 0x01	; 1
    32c2:	29 f4       	brne	.+10     	; 0x32ce <pneOperationMode+0x1ce>
    32c4:	83 e0       	ldi	r24, 0x03	; 3
    32c6:	80 93 b6 22 	sts	0x22B6, r24
    32ca:	10 92 56 23 	sts	0x2356, r1
    32ce:	80 91 7f 22 	lds	r24, 0x227F
    32d2:	81 11       	cpse	r24, r1
    32d4:	16 c0       	rjmp	.+44     	; 0x3302 <pneOperationMode+0x202>
    32d6:	80 91 60 22 	lds	r24, 0x2260
    32da:	81 11       	cpse	r24, r1
    32dc:	2a c0       	rjmp	.+84     	; 0x3332 <pneOperationMode+0x232>
    32de:	80 91 68 22 	lds	r24, 0x2268
    32e2:	81 11       	cpse	r24, r1
    32e4:	26 c0       	rjmp	.+76     	; 0x3332 <pneOperationMode+0x232>
    32e6:	80 91 63 22 	lds	r24, 0x2263
    32ea:	81 11       	cpse	r24, r1
    32ec:	22 c0       	rjmp	.+68     	; 0x3332 <pneOperationMode+0x232>
    32ee:	85 e0       	ldi	r24, 0x05	; 5
    32f0:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    32f4:	10 92 56 23 	sts	0x2356, r1
    32f8:	10 92 33 23 	sts	0x2333, r1
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	80 93 b6 22 	sts	0x22B6, r24
    3302:	80 91 7f 22 	lds	r24, 0x227F
    3306:	81 30       	cpi	r24, 0x01	; 1
    3308:	a1 f4       	brne	.+40     	; 0x3332 <pneOperationMode+0x232>
    330a:	80 91 68 22 	lds	r24, 0x2268
    330e:	81 30       	cpi	r24, 0x01	; 1
    3310:	81 f4       	brne	.+32     	; 0x3332 <pneOperationMode+0x232>
    3312:	60 91 dd 22 	lds	r22, 0x22DD
    3316:	70 91 de 22 	lds	r23, 0x22DE
    331a:	80 91 df 22 	lds	r24, 0x22DF
    331e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    3322:	e0 e6       	ldi	r30, 0x60	; 96
    3324:	f2 e2       	ldi	r31, 0x22	; 34
    3326:	10 86       	std	Z+8, r1	; 0x08
    3328:	13 82       	std	Z+3, r1	; 0x03
    332a:	81 85       	ldd	r24, Z+9	; 0x09
    332c:	81 30       	cpi	r24, 0x01	; 1
    332e:	69 f5       	brne	.+90     	; 0x338a <pneOperationMode+0x28a>
    3330:	04 c0       	rjmp	.+8      	; 0x333a <pneOperationMode+0x23a>
    3332:	80 91 69 22 	lds	r24, 0x2269
    3336:	81 30       	cpi	r24, 0x01	; 1
    3338:	11 f4       	brne	.+4      	; 0x333e <pneOperationMode+0x23e>
    333a:	10 92 69 22 	sts	0x2269, r1
    333e:	80 91 63 22 	lds	r24, 0x2263
    3342:	81 30       	cpi	r24, 0x01	; 1
    3344:	11 f5       	brne	.+68     	; 0x338a <pneOperationMode+0x28a>
    3346:	80 91 64 22 	lds	r24, 0x2264
    334a:	81 30       	cpi	r24, 0x01	; 1
    334c:	f1 f4       	brne	.+60     	; 0x338a <pneOperationMode+0x28a>
    334e:	80 91 c7 22 	lds	r24, 0x22C7
    3352:	90 91 c8 22 	lds	r25, 0x22C8
    3356:	01 96       	adiw	r24, 0x01	; 1
    3358:	90 93 c8 22 	sts	0x22C8, r25
    335c:	80 93 c7 22 	sts	0x22C7, r24
    3360:	89 3e       	cpi	r24, 0xE9	; 233
    3362:	9d 4f       	sbci	r25, 0xFD	; 253
    3364:	08 f4       	brcc	.+2      	; 0x3368 <pneOperationMode+0x268>
    3366:	00 c2       	rjmp	.+1024   	; 0x3768 <pneOperationMode+0x668>
    3368:	82 e0       	ldi	r24, 0x02	; 2
    336a:	90 e1       	ldi	r25, 0x10	; 16
    336c:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <readE2prom>
    3370:	08 2f       	mov	r16, r24
    3372:	03 60       	ori	r16, 0x03	; 3
    3374:	00 93 5f 22 	sts	0x225F, r16
    3378:	20 e1       	ldi	r18, 0x10	; 16
    337a:	42 e0       	ldi	r20, 0x02	; 2
    337c:	65 e4       	ldi	r22, 0x45	; 69
    337e:	8e ea       	ldi	r24, 0xAE	; 174
    3380:	0e 94 1d 22 	call	0x443a	; 0x443a <PNEWELSE2promWrite>
    3384:	0e 94 49 33 	call	0x6692	; 0x6692 <reboot_to_rf>
    3388:	ef c1       	rjmp	.+990    	; 0x3768 <pneOperationMode+0x668>
    338a:	10 92 c8 22 	sts	0x22C8, r1
    338e:	10 92 c7 22 	sts	0x22C7, r1
    3392:	ea c1       	rjmp	.+980    	; 0x3768 <pneOperationMode+0x668>
    3394:	c0 e6       	ldi	r28, 0x60	; 96
    3396:	d2 e2       	ldi	r29, 0x22	; 34
    3398:	83 e0       	ldi	r24, 0x03	; 3
    339a:	8a 8b       	std	Y+18, r24	; 0x12
    339c:	60 91 8a 22 	lds	r22, 0x228A
    33a0:	70 91 8b 22 	lds	r23, 0x228B
    33a4:	80 91 8c 22 	lds	r24, 0x228C
    33a8:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	8b 87       	std	Y+11, r24	; 0x0b
    33b0:	10 92 ac 22 	sts	0x22AC, r1
    33b4:	80 93 88 22 	sts	0x2288, r24
    33b8:	80 91 56 23 	lds	r24, 0x2356
    33bc:	81 11       	cpse	r24, r1
    33be:	11 c0       	rjmp	.+34     	; 0x33e2 <pneOperationMode+0x2e2>
    33c0:	82 e0       	ldi	r24, 0x02	; 2
    33c2:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	80 93 56 23 	sts	0x2356, r24
    33cc:	84 e6       	ldi	r24, 0x64	; 100
    33ce:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <pend_to_rf>
    33d2:	60 91 dd 22 	lds	r22, 0x22DD
    33d6:	70 91 de 22 	lds	r23, 0x22DE
    33da:	80 91 df 22 	lds	r24, 0x22DF
    33de:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
    33e2:	80 91 7f 22 	lds	r24, 0x227F
    33e6:	81 30       	cpi	r24, 0x01	; 1
    33e8:	49 f5       	brne	.+82     	; 0x343c <pneOperationMode+0x33c>
    33ea:	83 e0       	ldi	r24, 0x03	; 3
    33ec:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    33f0:	62 e0       	ldi	r22, 0x02	; 2
    33f2:	81 e6       	ldi	r24, 0x61	; 97
    33f4:	0e 94 03 36 	call	0x6c06	; 0x6c06 <test_completed>
    33f8:	10 92 56 23 	sts	0x2356, r1
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	80 93 e1 22 	sts	0x22E1, r24
    3402:	10 92 b6 22 	sts	0x22B6, r1
    3406:	c0 e6       	ldi	r28, 0x60	; 96
    3408:	d2 e2       	ldi	r29, 0x22	; 34
    340a:	1a 86       	std	Y+10, r1	; 0x0a
    340c:	60 91 dd 22 	lds	r22, 0x22DD
    3410:	70 91 de 22 	lds	r23, 0x22DE
    3414:	80 91 df 22 	lds	r24, 0x22DF
    3418:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    341c:	1b 86       	std	Y+11, r1	; 0x0b
    341e:	60 91 43 23 	lds	r22, 0x2343
    3422:	70 91 44 23 	lds	r23, 0x2344
    3426:	80 91 45 23 	lds	r24, 0x2345
    342a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    342e:	91 e0       	ldi	r25, 0x01	; 1
    3430:	81 11       	cpse	r24, r1
    3432:	01 c0       	rjmp	.+2      	; 0x3436 <pneOperationMode+0x336>
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	90 93 60 22 	sts	0x2260, r25
    343a:	96 c1       	rjmp	.+812    	; 0x3768 <pneOperationMode+0x668>
    343c:	80 91 70 22 	lds	r24, 0x2270
    3440:	81 30       	cpi	r24, 0x01	; 1
    3442:	49 f5       	brne	.+82     	; 0x3496 <pneOperationMode+0x396>
    3444:	83 e0       	ldi	r24, 0x03	; 3
    3446:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    344a:	62 e0       	ldi	r22, 0x02	; 2
    344c:	8e e6       	ldi	r24, 0x6E	; 110
    344e:	0e 94 03 36 	call	0x6c06	; 0x6c06 <test_completed>
    3452:	10 92 56 23 	sts	0x2356, r1
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	80 93 e1 22 	sts	0x22E1, r24
    345c:	80 93 b6 22 	sts	0x22B6, r24
    3460:	c0 e6       	ldi	r28, 0x60	; 96
    3462:	d2 e2       	ldi	r29, 0x22	; 34
    3464:	1a 86       	std	Y+10, r1	; 0x0a
    3466:	60 91 dd 22 	lds	r22, 0x22DD
    346a:	70 91 de 22 	lds	r23, 0x22DE
    346e:	80 91 df 22 	lds	r24, 0x22DF
    3472:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    3476:	1b 86       	std	Y+11, r1	; 0x0b
    3478:	60 91 43 23 	lds	r22, 0x2343
    347c:	70 91 44 23 	lds	r23, 0x2344
    3480:	80 91 45 23 	lds	r24, 0x2345
    3484:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3488:	91 e0       	ldi	r25, 0x01	; 1
    348a:	81 11       	cpse	r24, r1
    348c:	01 c0       	rjmp	.+2      	; 0x3490 <pneOperationMode+0x390>
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	90 93 60 22 	sts	0x2260, r25
    3494:	69 c1       	rjmp	.+722    	; 0x3768 <pneOperationMode+0x668>
    3496:	80 91 6a 22 	lds	r24, 0x226A
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	09 f4       	brne	.+2      	; 0x34a0 <pneOperationMode+0x3a0>
    349e:	64 c1       	rjmp	.+712    	; 0x3768 <pneOperationMode+0x668>
    34a0:	83 e0       	ldi	r24, 0x03	; 3
    34a2:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    34a6:	62 e0       	ldi	r22, 0x02	; 2
    34a8:	83 e7       	ldi	r24, 0x73	; 115
    34aa:	0e 94 03 36 	call	0x6c06	; 0x6c06 <test_completed>
    34ae:	10 92 56 23 	sts	0x2356, r1
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	80 93 e1 22 	sts	0x22E1, r24
    34b8:	80 93 b6 22 	sts	0x22B6, r24
    34bc:	c0 e6       	ldi	r28, 0x60	; 96
    34be:	d2 e2       	ldi	r29, 0x22	; 34
    34c0:	1a 86       	std	Y+10, r1	; 0x0a
    34c2:	60 91 dd 22 	lds	r22, 0x22DD
    34c6:	70 91 de 22 	lds	r23, 0x22DE
    34ca:	80 91 df 22 	lds	r24, 0x22DF
    34ce:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
    34d2:	1b 86       	std	Y+11, r1	; 0x0b
    34d4:	60 91 43 23 	lds	r22, 0x2343
    34d8:	70 91 44 23 	lds	r23, 0x2344
    34dc:	80 91 45 23 	lds	r24, 0x2345
    34e0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	81 11       	cpse	r24, r1
    34e8:	01 c0       	rjmp	.+2      	; 0x34ec <pneOperationMode+0x3ec>
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	90 93 60 22 	sts	0x2260, r25
    34f0:	3b c1       	rjmp	.+630    	; 0x3768 <pneOperationMode+0x668>
    34f2:	e0 e6       	ldi	r30, 0x60	; 96
    34f4:	f2 e2       	ldi	r31, 0x22	; 34
    34f6:	84 e0       	ldi	r24, 0x04	; 4
    34f8:	82 8b       	std	Z+18, r24	; 0x12
    34fa:	10 92 ac 22 	sts	0x22AC, r1
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	80 93 88 22 	sts	0x2288, r24
    3504:	82 e0       	ldi	r24, 0x02	; 2
    3506:	83 8b       	std	Z+19, r24	; 0x13
    3508:	80 91 56 23 	lds	r24, 0x2356
    350c:	81 11       	cpse	r24, r1
    350e:	08 c0       	rjmp	.+16     	; 0x3520 <pneOperationMode+0x420>
    3510:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	80 93 56 23 	sts	0x2356, r24
    351a:	83 e6       	ldi	r24, 0x63	; 99
    351c:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <pend_to_rf>
    3520:	80 91 60 22 	lds	r24, 0x2260
    3524:	81 30       	cpi	r24, 0x01	; 1
    3526:	a9 f4       	brne	.+42     	; 0x3552 <pneOperationMode+0x452>
    3528:	80 91 f3 22 	lds	r24, 0x22F3
    352c:	81 11       	cpse	r24, r1
    352e:	11 c0       	rjmp	.+34     	; 0x3552 <pneOperationMode+0x452>
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    3536:	62 e0       	ldi	r22, 0x02	; 2
    3538:	81 e6       	ldi	r24, 0x61	; 97
    353a:	0e 94 03 36 	call	0x6c06	; 0x6c06 <test_completed>
    353e:	10 92 56 23 	sts	0x2356, r1
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	80 93 e1 22 	sts	0x22E1, r24
    3548:	80 93 b6 22 	sts	0x22B6, r24
    354c:	10 92 69 22 	sts	0x2269, r1
    3550:	0b c1       	rjmp	.+534    	; 0x3768 <pneOperationMode+0x668>
    3552:	80 91 5a 22 	lds	r24, 0x225A
    3556:	90 91 61 22 	lds	r25, 0x2261
    355a:	98 17       	cp	r25, r24
    355c:	88 f0       	brcs	.+34     	; 0x3580 <pneOperationMode+0x480>
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    3564:	62 e0       	ldi	r22, 0x02	; 2
    3566:	8e e6       	ldi	r24, 0x6E	; 110
    3568:	0e 94 03 36 	call	0x6c06	; 0x6c06 <test_completed>
    356c:	10 92 56 23 	sts	0x2356, r1
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	80 93 e1 22 	sts	0x22E1, r24
    3576:	80 93 b6 22 	sts	0x22B6, r24
    357a:	10 92 69 22 	sts	0x2269, r1
    357e:	f4 c0       	rjmp	.+488    	; 0x3768 <pneOperationMode+0x668>
    3580:	80 91 69 22 	lds	r24, 0x2269
    3584:	81 30       	cpi	r24, 0x01	; 1
    3586:	09 f4       	brne	.+2      	; 0x358a <pneOperationMode+0x48a>
    3588:	ef c0       	rjmp	.+478    	; 0x3768 <pneOperationMode+0x668>
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <store>
    3590:	62 e0       	ldi	r22, 0x02	; 2
    3592:	83 e7       	ldi	r24, 0x73	; 115
    3594:	0e 94 03 36 	call	0x6c06	; 0x6c06 <test_completed>
    3598:	10 92 56 23 	sts	0x2356, r1
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	80 93 e1 22 	sts	0x22E1, r24
    35a2:	80 93 b6 22 	sts	0x22B6, r24
    35a6:	10 92 69 22 	sts	0x2269, r1
    35aa:	de c0       	rjmp	.+444    	; 0x3768 <pneOperationMode+0x668>
    35ac:	80 91 ac 22 	lds	r24, 0x22AC
    35b0:	81 11       	cpse	r24, r1
    35b2:	08 c0       	rjmp	.+16     	; 0x35c4 <pneOperationMode+0x4c4>
    35b4:	85 e3       	ldi	r24, 0x35	; 53
    35b6:	93 e2       	ldi	r25, 0x23	; 35
    35b8:	2a db       	rcall	.-2476   	; 0x2c0e <SYS_TimerStart>
    35ba:	80 91 ac 22 	lds	r24, 0x22AC
    35be:	8f 5f       	subi	r24, 0xFF	; 255
    35c0:	80 93 ac 22 	sts	0x22AC, r24
    35c4:	80 91 c6 22 	lds	r24, 0x22C6
    35c8:	89 30       	cpi	r24, 0x09	; 9
    35ca:	80 f0       	brcs	.+32     	; 0x35ec <pneOperationMode+0x4ec>
    35cc:	60 91 9a 22 	lds	r22, 0x229A
    35d0:	70 91 9b 22 	lds	r23, 0x229B
    35d4:	80 91 9c 22 	lds	r24, 0x229C
    35d8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    35dc:	91 e0       	ldi	r25, 0x01	; 1
    35de:	81 11       	cpse	r24, r1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	90 93 64 22 	sts	0x2264, r25
    35e6:	10 92 c6 22 	sts	0x22C6, r1
    35ea:	03 c0       	rjmp	.+6      	; 0x35f2 <pneOperationMode+0x4f2>
    35ec:	8f 5f       	subi	r24, 0xFF	; 255
    35ee:	80 93 c6 22 	sts	0x22C6, r24
    35f2:	80 91 64 22 	lds	r24, 0x2264
    35f6:	81 11       	cpse	r24, r1
    35f8:	08 c0       	rjmp	.+16     	; 0x360a <pneOperationMode+0x50a>
    35fa:	85 e3       	ldi	r24, 0x35	; 53
    35fc:	93 e2       	ldi	r25, 0x23	; 35
    35fe:	b0 da       	rcall	.-2720   	; 0x2b60 <SYS_TimerStop>
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	80 93 b6 22 	sts	0x22B6, r24
    3606:	10 92 ac 22 	sts	0x22AC, r1
    360a:	80 91 60 22 	lds	r24, 0x2260
    360e:	81 30       	cpi	r24, 0x01	; 1
    3610:	09 f0       	breq	.+2      	; 0x3614 <pneOperationMode+0x514>
    3612:	aa c0       	rjmp	.+340    	; 0x3768 <pneOperationMode+0x668>
    3614:	80 91 f3 22 	lds	r24, 0x22F3
    3618:	81 11       	cpse	r24, r1
    361a:	a6 c0       	rjmp	.+332    	; 0x3768 <pneOperationMode+0x668>
    361c:	10 92 b6 22 	sts	0x22B6, r1
    3620:	10 92 ac 22 	sts	0x22AC, r1
    3624:	a1 c0       	rjmp	.+322    	; 0x3768 <pneOperationMode+0x668>
    3626:	8d e7       	ldi	r24, 0x7D	; 125
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	a0 e0       	ldi	r26, 0x00	; 0
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	80 93 fa 22 	sts	0x22FA, r24
    3632:	90 93 fb 22 	sts	0x22FB, r25
    3636:	a0 93 fc 22 	sts	0x22FC, r26
    363a:	b0 93 fd 22 	sts	0x22FD, r27
    363e:	8a ef       	ldi	r24, 0xFA	; 250
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	a0 e0       	ldi	r26, 0x00	; 0
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	80 93 d4 22 	sts	0x22D4, r24
    364a:	90 93 d5 22 	sts	0x22D5, r25
    364e:	a0 93 d6 22 	sts	0x22D6, r26
    3652:	b0 93 d7 22 	sts	0x22D7, r27
    3656:	10 92 88 22 	sts	0x2288, r1
    365a:	82 e0       	ldi	r24, 0x02	; 2
    365c:	80 93 72 22 	sts	0x2272, r24
    3660:	80 91 42 23 	lds	r24, 0x2342
    3664:	81 30       	cpi	r24, 0x01	; 1
    3666:	31 f0       	breq	.+12     	; 0x3674 <pneOperationMode+0x574>
    3668:	c0 f1       	brcs	.+112    	; 0x36da <pneOperationMode+0x5da>
    366a:	82 30       	cpi	r24, 0x02	; 2
    366c:	51 f0       	breq	.+20     	; 0x3682 <pneOperationMode+0x582>
    366e:	83 30       	cpi	r24, 0x03	; 3
    3670:	89 f0       	breq	.+34     	; 0x3694 <pneOperationMode+0x594>
    3672:	30 c0       	rjmp	.+96     	; 0x36d4 <pneOperationMode+0x5d4>
    3674:	86 e4       	ldi	r24, 0x46	; 70
    3676:	93 e2       	ldi	r25, 0x23	; 35
    3678:	73 da       	rcall	.-2842   	; 0x2b60 <SYS_TimerStop>
    367a:	82 e0       	ldi	r24, 0x02	; 2
    367c:	80 93 42 23 	sts	0x2342, r24
    3680:	2c c0       	rjmp	.+88     	; 0x36da <pneOperationMode+0x5da>
    3682:	60 e1       	ldi	r22, 0x10	; 16
    3684:	8e ed       	ldi	r24, 0xDE	; 222
    3686:	91 e2       	ldi	r25, 0x21	; 33
    3688:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <WPS_OK_Alert>
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	80 93 42 23 	sts	0x2342, r24
    3692:	23 c0       	rjmp	.+70     	; 0x36da <pneOperationMode+0x5da>
    3694:	80 91 b0 22 	lds	r24, 0x22B0
    3698:	90 91 b1 22 	lds	r25, 0x22B1
    369c:	81 35       	cpi	r24, 0x51	; 81
    369e:	23 ec       	ldi	r18, 0xC3	; 195
    36a0:	92 07       	cpc	r25, r18
    36a2:	90 f0       	brcs	.+36     	; 0x36c8 <pneOperationMode+0x5c8>
    36a4:	80 91 5c 23 	lds	r24, 0x235C
    36a8:	81 ff       	sbrs	r24, 1
    36aa:	0b c0       	rjmp	.+22     	; 0x36c2 <pneOperationMode+0x5c2>
    36ac:	80 91 5c 23 	lds	r24, 0x235C
    36b0:	8d 7f       	andi	r24, 0xFD	; 253
    36b2:	80 93 5c 23 	sts	0x235C, r24
    36b6:	60 91 5c 23 	lds	r22, 0x235C
    36ba:	82 e0       	ldi	r24, 0x02	; 2
    36bc:	90 e1       	ldi	r25, 0x10	; 16
    36be:	0e 94 0b 31 	call	0x6216	; 0x6216 <writeE2prom>
    36c2:	0e 94 49 33 	call	0x6692	; 0x6692 <reboot_to_rf>
    36c6:	09 c0       	rjmp	.+18     	; 0x36da <pneOperationMode+0x5da>
    36c8:	01 96       	adiw	r24, 0x01	; 1
    36ca:	90 93 b1 22 	sts	0x22B1, r25
    36ce:	80 93 b0 22 	sts	0x22B0, r24
    36d2:	03 c0       	rjmp	.+6      	; 0x36da <pneOperationMode+0x5da>
    36d4:	88 e0       	ldi	r24, 0x08	; 8
    36d6:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    36da:	80 91 c6 22 	lds	r24, 0x22C6
    36de:	89 30       	cpi	r24, 0x09	; 9
    36e0:	80 f0       	brcs	.+32     	; 0x3702 <pneOperationMode+0x602>
    36e2:	60 91 9a 22 	lds	r22, 0x229A
    36e6:	70 91 9b 22 	lds	r23, 0x229B
    36ea:	80 91 9c 22 	lds	r24, 0x229C
    36ee:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    36f2:	91 e0       	ldi	r25, 0x01	; 1
    36f4:	81 11       	cpse	r24, r1
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	90 93 64 22 	sts	0x2264, r25
    36fc:	10 92 c6 22 	sts	0x22C6, r1
    3700:	03 c0       	rjmp	.+6      	; 0x3708 <pneOperationMode+0x608>
    3702:	8f 5f       	subi	r24, 0xFF	; 255
    3704:	80 93 c6 22 	sts	0x22C6, r24
    3708:	80 91 64 22 	lds	r24, 0x2264
    370c:	81 30       	cpi	r24, 0x01	; 1
    370e:	51 f4       	brne	.+20     	; 0x3724 <pneOperationMode+0x624>
    3710:	80 91 ac 22 	lds	r24, 0x22AC
    3714:	81 30       	cpi	r24, 0x01	; 1
    3716:	91 f4       	brne	.+36     	; 0x373c <pneOperationMode+0x63c>
    3718:	85 e3       	ldi	r24, 0x35	; 53
    371a:	93 e2       	ldi	r25, 0x23	; 35
    371c:	78 da       	rcall	.-2832   	; 0x2c0e <SYS_TimerStart>
    371e:	10 92 ac 22 	sts	0x22AC, r1
    3722:	0c c0       	rjmp	.+24     	; 0x373c <pneOperationMode+0x63c>
    3724:	81 11       	cpse	r24, r1
    3726:	0a c0       	rjmp	.+20     	; 0x373c <pneOperationMode+0x63c>
    3728:	80 91 ac 22 	lds	r24, 0x22AC
    372c:	81 11       	cpse	r24, r1
    372e:	03 c0       	rjmp	.+6      	; 0x3736 <pneOperationMode+0x636>
    3730:	85 e3       	ldi	r24, 0x35	; 53
    3732:	93 e2       	ldi	r25, 0x23	; 35
    3734:	15 da       	rcall	.-3030   	; 0x2b60 <SYS_TimerStop>
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	80 93 ac 22 	sts	0x22AC, r24
    373c:	80 91 60 22 	lds	r24, 0x2260
    3740:	81 30       	cpi	r24, 0x01	; 1
    3742:	91 f4       	brne	.+36     	; 0x3768 <pneOperationMode+0x668>
    3744:	80 91 f3 22 	lds	r24, 0x22F3
    3748:	81 11       	cpse	r24, r1
    374a:	0e c0       	rjmp	.+28     	; 0x3768 <pneOperationMode+0x668>
    374c:	10 92 42 23 	sts	0x2342, r1
    3750:	10 92 b6 22 	sts	0x22B6, r1
    3754:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <APP_IbLoadSettings>
    3758:	0e 94 0b 03 	call	0x616	; 0x616 <APP_NwkInit>
    375c:	8d e8       	ldi	r24, 0x8D	; 141
    375e:	92 e2       	ldi	r25, 0x22	; 34
    3760:	ff d9       	rcall	.-3074   	; 0x2b60 <SYS_TimerStop>
    3762:	86 e4       	ldi	r24, 0x46	; 70
    3764:	93 e2       	ldi	r25, 0x23	; 35
    3766:	fc d9       	rcall	.-3080   	; 0x2b60 <SYS_TimerStop>
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	0f 91       	pop	r16
    376e:	08 95       	ret

00003770 <pneOutgoingData>:
    3770:	80 91 ef 22 	lds	r24, 0x22EF
    3774:	88 23       	and	r24, r24
    3776:	71 f0       	breq	.+28     	; 0x3794 <pneOutgoingData+0x24>
    3778:	80 91 e1 22 	lds	r24, 0x22E1
    377c:	88 23       	and	r24, r24
    377e:	19 f0       	breq	.+6      	; 0x3786 <pneOutgoingData+0x16>
    3780:	10 92 e1 22 	sts	0x22E1, r1
    3784:	02 c0       	rjmp	.+4      	; 0x378a <pneOutgoingData+0x1a>
    3786:	0e 94 12 34 	call	0x6824	; 0x6824 <status_send_to_rf>
    378a:	88 eb       	ldi	r24, 0xB8	; 184
    378c:	92 e2       	ldi	r25, 0x22	; 34
    378e:	3f da       	rcall	.-2946   	; 0x2c0e <SYS_TimerStart>
    3790:	10 92 ef 22 	sts	0x22EF, r1
    3794:	08 95       	ret

00003796 <manual_btn_handler>:
    3796:	80 91 6a 22 	lds	r24, 0x226A
    379a:	81 11       	cpse	r24, r1
    379c:	19 c0       	rjmp	.+50     	; 0x37d0 <manual_btn_handler+0x3a>
    379e:	80 91 68 22 	lds	r24, 0x2268
    37a2:	81 30       	cpi	r24, 0x01	; 1
    37a4:	21 f0       	breq	.+8      	; 0x37ae <manual_btn_handler+0x18>
    37a6:	80 91 63 22 	lds	r24, 0x2263
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	49 f4       	brne	.+18     	; 0x37c0 <manual_btn_handler+0x2a>
    37ae:	60 91 dd 22 	lds	r22, 0x22DD
    37b2:	70 91 de 22 	lds	r23, 0x22DE
    37b6:	80 91 df 22 	lds	r24, 0x22DF
    37ba:	0c 94 92 09 	jmp	0x1324	; 0x1324 <gpio_set>
    37be:	08 95       	ret
    37c0:	60 91 dd 22 	lds	r22, 0x22DD
    37c4:	70 91 de 22 	lds	r23, 0x22DE
    37c8:	80 91 df 22 	lds	r24, 0x22DF
    37cc:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <gpio_clr>
    37d0:	08 95       	ret

000037d2 <manual_btn_isr>:
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	80 93 61 23 	sts	0x2361, r24
    37d8:	de cf       	rjmp	.-68     	; 0x3796 <manual_btn_handler>
    37da:	08 95       	ret

000037dc <pneGetStatus>:
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	80 91 89 22 	lds	r24, 0x2289
    37e4:	88 23       	and	r24, r24
    37e6:	09 f4       	brne	.+2      	; 0x37ea <pneGetStatus+0xe>
    37e8:	60 c0       	rjmp	.+192    	; 0x38aa <pneGetStatus+0xce>
    37ea:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <pneBatteryAverage>
    37ee:	c0 e6       	ldi	r28, 0x60	; 96
    37f0:	d2 e2       	ldi	r29, 0x22	; 34
    37f2:	89 83       	std	Y+1, r24	; 0x01
    37f4:	79 d6       	rcall	.+3314   	; 0x44e8 <PNEWELSTemperatureRead>
    37f6:	8e 83       	std	Y+6, r24	; 0x06
    37f8:	80 ef       	ldi	r24, 0xF0	; 240
    37fa:	8f 87       	std	Y+15, r24	; 0x0f
    37fc:	10 92 89 22 	sts	0x2289, r1
    3800:	eb e7       	ldi	r30, 0x7B	; 123
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	87 7f       	andi	r24, 0xF7	; 247
    3808:	80 83       	st	Z, r24
    380a:	81 e6       	ldi	r24, 0x61	; 97
    380c:	80 93 7c 00 	sts	0x007C, r24
    3810:	ea e7       	ldi	r30, 0x7A	; 122
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	80 81       	ld	r24, Z
    3816:	80 64       	ori	r24, 0x40	; 64
    3818:	80 83       	st	Z, r24
    381a:	80 81       	ld	r24, Z
    381c:	86 fd       	sbrc	r24, 6
    381e:	fd cf       	rjmp	.-6      	; 0x381a <pneGetStatus+0x3e>
    3820:	80 91 79 00 	lds	r24, 0x0079
    3824:	24 e2       	ldi	r18, 0x24	; 36
    3826:	82 9f       	mul	r24, r18
    3828:	c0 01       	movw	r24, r0
    382a:	11 24       	eor	r1, r1
    382c:	6f ef       	ldi	r22, 0xFF	; 255
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	0e 94 3c 4d 	call	0x9a78	; 0x9a78 <__divmodhi4>
    3834:	60 93 62 22 	sts	0x2262, r22
    3838:	60 91 58 23 	lds	r22, 0x2358
    383c:	70 91 59 23 	lds	r23, 0x2359
    3840:	80 91 5a 23 	lds	r24, 0x235A
    3844:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3848:	91 e0       	ldi	r25, 0x01	; 1
    384a:	81 11       	cpse	r24, r1
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <pneGetStatus+0x74>
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	90 93 7f 22 	sts	0x227F, r25
    3854:	20 91 61 22 	lds	r18, 0x2261
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	80 91 57 23 	lds	r24, 0x2357
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	41 97       	sbiw	r24, 0x11	; 17
    3862:	28 17       	cp	r18, r24
    3864:	39 07       	cpc	r19, r25
    3866:	34 f4       	brge	.+12     	; 0x3874 <pneGetStatus+0x98>
    3868:	e0 e6       	ldi	r30, 0x60	; 96
    386a:	f2 e2       	ldi	r31, 0x22	; 34
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	80 8b       	std	Z+16, r24	; 0x10
    3870:	11 8a       	std	Z+17, r1	; 0x11
    3872:	0d c0       	rjmp	.+26     	; 0x388e <pneGetStatus+0xb2>
    3874:	80 91 57 23 	lds	r24, 0x2357
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	41 96       	adiw	r24, 0x11	; 17
    387c:	28 17       	cp	r18, r24
    387e:	39 07       	cpc	r19, r25
    3880:	1c f0       	brlt	.+6      	; 0x3888 <pneGetStatus+0xac>
    3882:	10 92 70 22 	sts	0x2270, r1
    3886:	03 c0       	rjmp	.+6      	; 0x388e <pneGetStatus+0xb2>
    3888:	82 e0       	ldi	r24, 0x02	; 2
    388a:	80 93 70 22 	sts	0x2270, r24
    388e:	80 91 66 22 	lds	r24, 0x2266
    3892:	8d 33       	cpi	r24, 0x3D	; 61
    3894:	18 f0       	brcs	.+6      	; 0x389c <pneGetStatus+0xc0>
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    389c:	80 91 61 22 	lds	r24, 0x2261
    38a0:	85 36       	cpi	r24, 0x65	; 101
    38a2:	18 f4       	brcc	.+6      	; 0x38aa <pneGetStatus+0xce>
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    38aa:	80 91 c9 22 	lds	r24, 0x22C9
    38ae:	81 30       	cpi	r24, 0x01	; 1
    38b0:	29 f0       	breq	.+10     	; 0x38bc <pneGetStatus+0xe0>
    38b2:	80 91 61 23 	lds	r24, 0x2361
    38b6:	81 30       	cpi	r24, 0x01	; 1
    38b8:	09 f0       	breq	.+2      	; 0x38bc <pneGetStatus+0xe0>
    38ba:	b4 c0       	rjmp	.+360    	; 0x3a24 <pneGetStatus+0x248>
    38bc:	80 91 c6 22 	lds	r24, 0x22C6
    38c0:	89 30       	cpi	r24, 0x09	; 9
    38c2:	08 f4       	brcc	.+2      	; 0x38c6 <pneGetStatus+0xea>
    38c4:	ac c0       	rjmp	.+344    	; 0x3a1e <pneGetStatus+0x242>
    38c6:	60 91 01 23 	lds	r22, 0x2301
    38ca:	70 91 02 23 	lds	r23, 0x2302
    38ce:	80 91 03 23 	lds	r24, 0x2303
    38d2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    38d6:	91 e0       	ldi	r25, 0x01	; 1
    38d8:	81 11       	cpse	r24, r1
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	90 93 63 22 	sts	0x2263, r25
    38e0:	5a df       	rcall	.-332    	; 0x3796 <manual_btn_handler>
    38e2:	60 91 9a 22 	lds	r22, 0x229A
    38e6:	70 91 9b 22 	lds	r23, 0x229B
    38ea:	80 91 9c 22 	lds	r24, 0x229C
    38ee:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    38f2:	91 e0       	ldi	r25, 0x01	; 1
    38f4:	81 11       	cpse	r24, r1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	90 93 64 22 	sts	0x2264, r25
    38fc:	60 91 9d 22 	lds	r22, 0x229D
    3900:	70 91 9e 22 	lds	r23, 0x229E
    3904:	80 91 9f 22 	lds	r24, 0x229F
    3908:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    390c:	91 e0       	ldi	r25, 0x01	; 1
    390e:	81 11       	cpse	r24, r1
    3910:	01 c0       	rjmp	.+2      	; 0x3914 <pneGetStatus+0x138>
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	90 93 65 22 	sts	0x2265, r25
    3918:	60 91 43 23 	lds	r22, 0x2343
    391c:	70 91 44 23 	lds	r23, 0x2344
    3920:	80 91 45 23 	lds	r24, 0x2345
    3924:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3928:	91 e0       	ldi	r25, 0x01	; 1
    392a:	81 11       	cpse	r24, r1
    392c:	01 c0       	rjmp	.+2      	; 0x3930 <pneGetStatus+0x154>
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	90 93 60 22 	sts	0x2260, r25
    3934:	60 91 58 23 	lds	r22, 0x2358
    3938:	70 91 59 23 	lds	r23, 0x2359
    393c:	80 91 5a 23 	lds	r24, 0x235A
    3940:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3944:	91 e0       	ldi	r25, 0x01	; 1
    3946:	81 11       	cpse	r24, r1
    3948:	01 c0       	rjmp	.+2      	; 0x394c <pneGetStatus+0x170>
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	90 93 7f 22 	sts	0x227F, r25
    3950:	60 91 53 23 	lds	r22, 0x2353
    3954:	70 91 54 23 	lds	r23, 0x2354
    3958:	80 91 55 23 	lds	r24, 0x2355
    395c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3960:	91 e0       	ldi	r25, 0x01	; 1
    3962:	81 11       	cpse	r24, r1
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	90 93 80 22 	sts	0x2280, r25
    396a:	60 91 a6 22 	lds	r22, 0x22A6
    396e:	70 91 a7 22 	lds	r23, 0x22A7
    3972:	80 91 a8 22 	lds	r24, 0x22A8
    3976:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    397a:	91 e0       	ldi	r25, 0x01	; 1
    397c:	81 11       	cpse	r24, r1
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	90 93 81 22 	sts	0x2281, r25
    3984:	60 91 04 23 	lds	r22, 0x2304
    3988:	70 91 05 23 	lds	r23, 0x2305
    398c:	80 91 06 23 	lds	r24, 0x2306
    3990:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	81 11       	cpse	r24, r1
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	90 93 82 22 	sts	0x2282, r25
    399e:	60 91 5c 22 	lds	r22, 0x225C
    39a2:	70 91 5d 22 	lds	r23, 0x225D
    39a6:	80 91 5e 22 	lds	r24, 0x225E
    39aa:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    39ae:	91 e0       	ldi	r25, 0x01	; 1
    39b0:	81 11       	cpse	r24, r1
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	90 93 83 22 	sts	0x2283, r25
    39b8:	60 91 b3 22 	lds	r22, 0x22B3
    39bc:	70 91 b4 22 	lds	r23, 0x22B4
    39c0:	80 91 b5 22 	lds	r24, 0x22B5
    39c4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    39c8:	91 e0       	ldi	r25, 0x01	; 1
    39ca:	81 11       	cpse	r24, r1
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	90 93 84 22 	sts	0x2284, r25
    39d2:	80 91 68 22 	lds	r24, 0x2268
    39d6:	81 30       	cpi	r24, 0x01	; 1
    39d8:	21 f0       	breq	.+8      	; 0x39e2 <pneGetStatus+0x206>
    39da:	80 91 63 22 	lds	r24, 0x2263
    39de:	81 30       	cpi	r24, 0x01	; 1
    39e0:	39 f4       	brne	.+14     	; 0x39f0 <pneGetStatus+0x214>
    39e2:	80 91 60 22 	lds	r24, 0x2260
    39e6:	81 11       	cpse	r24, r1
    39e8:	03 c0       	rjmp	.+6      	; 0x39f0 <pneGetStatus+0x214>
    39ea:	85 e0       	ldi	r24, 0x05	; 5
    39ec:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    39f0:	10 92 c9 22 	sts	0x22C9, r1
    39f4:	10 92 c6 22 	sts	0x22C6, r1
    39f8:	80 91 60 22 	lds	r24, 0x2260
    39fc:	81 11       	cpse	r24, r1
    39fe:	06 c0       	rjmp	.+12     	; 0x3a0c <pneGetStatus+0x230>
    3a00:	80 91 7f 22 	lds	r24, 0x227F
    3a04:	81 11       	cpse	r24, r1
    3a06:	02 c0       	rjmp	.+4      	; 0x3a0c <pneGetStatus+0x230>
    3a08:	10 92 f3 22 	sts	0x22F3, r1
    3a0c:	80 91 61 23 	lds	r24, 0x2361
    3a10:	81 30       	cpi	r24, 0x01	; 1
    3a12:	41 f4       	brne	.+16     	; 0x3a24 <pneGetStatus+0x248>
    3a14:	80 93 ef 22 	sts	0x22EF, r24
    3a18:	10 92 61 23 	sts	0x2361, r1
    3a1c:	03 c0       	rjmp	.+6      	; 0x3a24 <pneGetStatus+0x248>
    3a1e:	8f 5f       	subi	r24, 0xFF	; 255
    3a20:	80 93 c6 22 	sts	0x22C6, r24
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	08 95       	ret

00003a2a <PNEWELSTaskHandler>:
    3a2a:	d8 de       	rcall	.-592    	; 0x37dc <pneGetStatus>
    3a2c:	69 db       	rcall	.-2350   	; 0x3100 <pneOperationMode>
    3a2e:	a0 ce       	rjmp	.-704    	; 0x3770 <pneOutgoingData>
    3a30:	08 95       	ret

00003a32 <pneIncomingData>:
    3a32:	8f 92       	push	r8
    3a34:	9f 92       	push	r9
    3a36:	af 92       	push	r10
    3a38:	bf 92       	push	r11
    3a3a:	ff 92       	push	r15
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	29 97       	sbiw	r28, 0x09	; 9
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	8c 01       	movw	r16, r24
    3a56:	f6 2e       	mov	r15, r22
    3a58:	0e 94 87 03 	call	0x70e	; 0x70e <pneVerify_received>
    3a5c:	80 93 98 23 	sts	0x2398, r24
    3a60:	88 23       	and	r24, r24
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <pneIncomingData+0x34>
    3a64:	8c c2       	rjmp	.+1304   	; 0x3f7e <pneIncomingData+0x54c>
    3a66:	48 e0       	ldi	r20, 0x08	; 8
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	61 e4       	ldi	r22, 0x41	; 65
    3a6c:	72 e0       	ldi	r23, 0x02	; 2
    3a6e:	c8 01       	movw	r24, r16
    3a70:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3a74:	89 2b       	or	r24, r25
    3a76:	a1 f4       	brne	.+40     	; 0x3aa0 <pneIncomingData+0x6e>
    3a78:	80 91 b6 22 	lds	r24, 0x22B6
    3a7c:	81 11       	cpse	r24, r1
    3a7e:	0a c0       	rjmp	.+20     	; 0x3a94 <pneIncomingData+0x62>
    3a80:	80 91 68 22 	lds	r24, 0x2268
    3a84:	81 30       	cpi	r24, 0x01	; 1
    3a86:	31 f4       	brne	.+12     	; 0x3a94 <pneIncomingData+0x62>
    3a88:	83 e0       	ldi	r24, 0x03	; 3
    3a8a:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3a8e:	ff 24       	eor	r15, r15
    3a90:	f3 94       	inc	r15
    3a92:	79 c2       	rjmp	.+1266   	; 0x3f86 <pneIncomingData+0x554>
    3a94:	0e 94 38 34 	call	0x6870	; 0x6870 <emergency_on_to_rf>
    3a98:	7e de       	rcall	.-772    	; 0x3796 <manual_btn_handler>
    3a9a:	ff 24       	eor	r15, r15
    3a9c:	f3 94       	inc	r15
    3a9e:	73 c2       	rjmp	.+1254   	; 0x3f86 <pneIncomingData+0x554>
    3aa0:	48 e0       	ldi	r20, 0x08	; 8
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
    3aa4:	6a e4       	ldi	r22, 0x4A	; 74
    3aa6:	72 e0       	ldi	r23, 0x02	; 2
    3aa8:	c8 01       	movw	r24, r16
    3aaa:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3aae:	89 2b       	or	r24, r25
    3ab0:	a1 f4       	brne	.+40     	; 0x3ada <pneIncomingData+0xa8>
    3ab2:	80 91 b6 22 	lds	r24, 0x22B6
    3ab6:	81 30       	cpi	r24, 0x01	; 1
    3ab8:	51 f4       	brne	.+20     	; 0x3ace <pneIncomingData+0x9c>
    3aba:	80 91 68 22 	lds	r24, 0x2268
    3abe:	81 11       	cpse	r24, r1
    3ac0:	06 c0       	rjmp	.+12     	; 0x3ace <pneIncomingData+0x9c>
    3ac2:	83 e0       	ldi	r24, 0x03	; 3
    3ac4:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3ac8:	ff 24       	eor	r15, r15
    3aca:	f3 94       	inc	r15
    3acc:	5c c2       	rjmp	.+1208   	; 0x3f86 <pneIncomingData+0x554>
    3ace:	0e 94 42 34 	call	0x6884	; 0x6884 <emergency_off_to_rf>
    3ad2:	61 de       	rcall	.-830    	; 0x3796 <manual_btn_handler>
    3ad4:	ff 24       	eor	r15, r15
    3ad6:	f3 94       	inc	r15
    3ad8:	56 c2       	rjmp	.+1196   	; 0x3f86 <pneIncomingData+0x554>
    3ada:	48 e0       	ldi	r20, 0x08	; 8
    3adc:	50 e0       	ldi	r21, 0x00	; 0
    3ade:	63 e5       	ldi	r22, 0x53	; 83
    3ae0:	72 e0       	ldi	r23, 0x02	; 2
    3ae2:	c8 01       	movw	r24, r16
    3ae4:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3ae8:	89 2b       	or	r24, r25
    3aea:	09 f0       	breq	.+2      	; 0x3aee <pneIncomingData+0xbc>
    3aec:	50 c0       	rjmp	.+160    	; 0x3b8e <pneIncomingData+0x15c>
    3aee:	2f e0       	ldi	r18, 0x0F	; 15
    3af0:	2f 15       	cp	r18, r15
    3af2:	30 f0       	brcs	.+12     	; 0x3b00 <pneIncomingData+0xce>
    3af4:	84 e0       	ldi	r24, 0x04	; 4
    3af6:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3afa:	ff 24       	eor	r15, r15
    3afc:	f3 94       	inc	r15
    3afe:	43 c2       	rjmp	.+1158   	; 0x3f86 <pneIncomingData+0x554>
    3b00:	6e ef       	ldi	r22, 0xFE	; 254
    3b02:	6f 0d       	add	r22, r15
    3b04:	c8 01       	movw	r24, r16
    3b06:	0e 94 dd 36 	call	0x6dba	; 0x6dba <crc_verify>
    3b0a:	f8 2e       	mov	r15, r24
    3b0c:	88 23       	and	r24, r24
    3b0e:	09 f4       	brne	.+2      	; 0x3b12 <pneIncomingData+0xe0>
    3b10:	38 c2       	rjmp	.+1136   	; 0x3f82 <pneIncomingData+0x550>
    3b12:	f8 01       	movw	r30, r16
    3b14:	21 85       	ldd	r18, Z+9	; 0x09
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	20 53       	subi	r18, 0x30	; 48
    3b1a:	31 09       	sbc	r19, r1
    3b1c:	88 ee       	ldi	r24, 0xE8	; 232
    3b1e:	93 e0       	ldi	r25, 0x03	; 3
    3b20:	28 9f       	mul	r18, r24
    3b22:	a0 01       	movw	r20, r0
    3b24:	29 9f       	mul	r18, r25
    3b26:	50 0d       	add	r21, r0
    3b28:	38 9f       	mul	r19, r24
    3b2a:	50 0d       	add	r21, r0
    3b2c:	11 24       	eor	r1, r1
    3b2e:	22 85       	ldd	r18, Z+10	; 0x0a
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	20 53       	subi	r18, 0x30	; 48
    3b34:	31 09       	sbc	r19, r1
    3b36:	64 e6       	ldi	r22, 0x64	; 100
    3b38:	62 9f       	mul	r22, r18
    3b3a:	c0 01       	movw	r24, r0
    3b3c:	63 9f       	mul	r22, r19
    3b3e:	90 0d       	add	r25, r0
    3b40:	11 24       	eor	r1, r1
    3b42:	84 0f       	add	r24, r20
    3b44:	95 1f       	adc	r25, r21
    3b46:	24 85       	ldd	r18, Z+12	; 0x0c
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	20 53       	subi	r18, 0x30	; 48
    3b4c:	31 09       	sbc	r19, r1
    3b4e:	ac 01       	movw	r20, r24
    3b50:	42 0f       	add	r20, r18
    3b52:	53 1f       	adc	r21, r19
    3b54:	23 85       	ldd	r18, Z+11	; 0x0b
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	20 53       	subi	r18, 0x30	; 48
    3b5a:	31 09       	sbc	r19, r1
    3b5c:	c9 01       	movw	r24, r18
    3b5e:	88 0f       	add	r24, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	22 0f       	add	r18, r18
    3b64:	33 1f       	adc	r19, r19
    3b66:	22 0f       	add	r18, r18
    3b68:	33 1f       	adc	r19, r19
    3b6a:	22 0f       	add	r18, r18
    3b6c:	33 1f       	adc	r19, r19
    3b6e:	28 0f       	add	r18, r24
    3b70:	39 1f       	adc	r19, r25
    3b72:	ca 01       	movw	r24, r20
    3b74:	82 0f       	add	r24, r18
    3b76:	93 1f       	adc	r25, r19
    3b78:	8d 3f       	cpi	r24, 0xFD	; 253
    3b7a:	ff e0       	ldi	r31, 0x0F	; 15
    3b7c:	9f 07       	cpc	r25, r31
    3b7e:	20 f0       	brcs	.+8      	; 0x3b88 <pneIncomingData+0x156>
    3b80:	84 e0       	ldi	r24, 0x04	; 4
    3b82:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3b86:	ff c1       	rjmp	.+1022   	; 0x3f86 <pneIncomingData+0x554>
    3b88:	0e 94 4b 34 	call	0x6896	; 0x6896 <eeprom_to_rf>
    3b8c:	fc c1       	rjmp	.+1016   	; 0x3f86 <pneIncomingData+0x554>
    3b8e:	48 e0       	ldi	r20, 0x08	; 8
    3b90:	50 e0       	ldi	r21, 0x00	; 0
    3b92:	6c e5       	ldi	r22, 0x5C	; 92
    3b94:	72 e0       	ldi	r23, 0x02	; 2
    3b96:	c8 01       	movw	r24, r16
    3b98:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3b9c:	89 2b       	or	r24, r25
    3b9e:	81 f4       	brne	.+32     	; 0x3bc0 <pneIncomingData+0x18e>
    3ba0:	80 91 b6 22 	lds	r24, 0x22B6
    3ba4:	81 11       	cpse	r24, r1
    3ba6:	06 c0       	rjmp	.+12     	; 0x3bb4 <pneIncomingData+0x182>
    3ba8:	83 e0       	ldi	r24, 0x03	; 3
    3baa:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3bae:	ff 24       	eor	r15, r15
    3bb0:	f3 94       	inc	r15
    3bb2:	e9 c1       	rjmp	.+978    	; 0x3f86 <pneIncomingData+0x554>
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	80 93 69 22 	sts	0x2269, r24
    3bba:	ff 24       	eor	r15, r15
    3bbc:	f3 94       	inc	r15
    3bbe:	e3 c1       	rjmp	.+966    	; 0x3f86 <pneIncomingData+0x554>
    3bc0:	48 e0       	ldi	r20, 0x08	; 8
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	65 e6       	ldi	r22, 0x65	; 101
    3bc6:	72 e0       	ldi	r23, 0x02	; 2
    3bc8:	c8 01       	movw	r24, r16
    3bca:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3bce:	89 2b       	or	r24, r25
    3bd0:	79 f4       	brne	.+30     	; 0x3bf0 <pneIncomingData+0x1be>
    3bd2:	80 91 b6 22 	lds	r24, 0x22B6
    3bd6:	81 11       	cpse	r24, r1
    3bd8:	06 c0       	rjmp	.+12     	; 0x3be6 <pneIncomingData+0x1b4>
    3bda:	83 e0       	ldi	r24, 0x03	; 3
    3bdc:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3be0:	ff 24       	eor	r15, r15
    3be2:	f3 94       	inc	r15
    3be4:	d0 c1       	rjmp	.+928    	; 0x3f86 <pneIncomingData+0x554>
    3be6:	10 92 69 22 	sts	0x2269, r1
    3bea:	ff 24       	eor	r15, r15
    3bec:	f3 94       	inc	r15
    3bee:	cb c1       	rjmp	.+918    	; 0x3f86 <pneIncomingData+0x554>
    3bf0:	48 e0       	ldi	r20, 0x08	; 8
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	6e e6       	ldi	r22, 0x6E	; 110
    3bf6:	72 e0       	ldi	r23, 0x02	; 2
    3bf8:	c8 01       	movw	r24, r16
    3bfa:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3bfe:	89 2b       	or	r24, r25
    3c00:	81 f4       	brne	.+32     	; 0x3c22 <pneIncomingData+0x1f0>
    3c02:	80 91 b6 22 	lds	r24, 0x22B6
    3c06:	81 11       	cpse	r24, r1
    3c08:	06 c0       	rjmp	.+12     	; 0x3c16 <pneIncomingData+0x1e4>
    3c0a:	83 e0       	ldi	r24, 0x03	; 3
    3c0c:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3c10:	ff 24       	eor	r15, r15
    3c12:	f3 94       	inc	r15
    3c14:	b8 c1       	rjmp	.+880    	; 0x3f86 <pneIncomingData+0x554>
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	80 93 6a 22 	sts	0x226A, r24
    3c1c:	ff 24       	eor	r15, r15
    3c1e:	f3 94       	inc	r15
    3c20:	b2 c1       	rjmp	.+868    	; 0x3f86 <pneIncomingData+0x554>
    3c22:	48 e0       	ldi	r20, 0x08	; 8
    3c24:	50 e0       	ldi	r21, 0x00	; 0
    3c26:	67 e7       	ldi	r22, 0x77	; 119
    3c28:	72 e0       	ldi	r23, 0x02	; 2
    3c2a:	c8 01       	movw	r24, r16
    3c2c:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3c30:	89 2b       	or	r24, r25
    3c32:	79 f4       	brne	.+30     	; 0x3c52 <pneIncomingData+0x220>
    3c34:	80 91 b6 22 	lds	r24, 0x22B6
    3c38:	81 11       	cpse	r24, r1
    3c3a:	06 c0       	rjmp	.+12     	; 0x3c48 <pneIncomingData+0x216>
    3c3c:	83 e0       	ldi	r24, 0x03	; 3
    3c3e:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3c42:	ff 24       	eor	r15, r15
    3c44:	f3 94       	inc	r15
    3c46:	9f c1       	rjmp	.+830    	; 0x3f86 <pneIncomingData+0x554>
    3c48:	10 92 6a 22 	sts	0x226A, r1
    3c4c:	ff 24       	eor	r15, r15
    3c4e:	f3 94       	inc	r15
    3c50:	9a c1       	rjmp	.+820    	; 0x3f86 <pneIncomingData+0x554>
    3c52:	48 e0       	ldi	r20, 0x08	; 8
    3c54:	50 e0       	ldi	r21, 0x00	; 0
    3c56:	60 e8       	ldi	r22, 0x80	; 128
    3c58:	72 e0       	ldi	r23, 0x02	; 2
    3c5a:	c8 01       	movw	r24, r16
    3c5c:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3c60:	89 2b       	or	r24, r25
    3c62:	09 f0       	breq	.+2      	; 0x3c66 <pneIncomingData+0x234>
    3c64:	92 c0       	rjmp	.+292    	; 0x3d8a <pneIncomingData+0x358>
    3c66:	23 e1       	ldi	r18, 0x13	; 19
    3c68:	2f 15       	cp	r18, r15
    3c6a:	30 f0       	brcs	.+12     	; 0x3c78 <pneIncomingData+0x246>
    3c6c:	86 e0       	ldi	r24, 0x06	; 6
    3c6e:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3c72:	ff 24       	eor	r15, r15
    3c74:	f3 94       	inc	r15
    3c76:	87 c1       	rjmp	.+782    	; 0x3f86 <pneIncomingData+0x554>
    3c78:	6e ef       	ldi	r22, 0xFE	; 254
    3c7a:	6f 0d       	add	r22, r15
    3c7c:	c8 01       	movw	r24, r16
    3c7e:	0e 94 dd 36 	call	0x6dba	; 0x6dba <crc_verify>
    3c82:	f8 2e       	mov	r15, r24
    3c84:	88 23       	and	r24, r24
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <pneIncomingData+0x258>
    3c88:	7a c0       	rjmp	.+244    	; 0x3d7e <pneIncomingData+0x34c>
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	a1 85       	ldd	r26, Z+9	; 0x09
    3c8e:	b0 e0       	ldi	r27, 0x00	; 0
    3c90:	d0 97       	sbiw	r26, 0x30	; 48
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	3a ec       	ldi	r19, 0xCA	; 202
    3c96:	4a e9       	ldi	r20, 0x9A	; 154
    3c98:	5b e3       	ldi	r21, 0x3B	; 59
    3c9a:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <__mulshisi3>
    3c9e:	4b 01       	movw	r8, r22
    3ca0:	5c 01       	movw	r10, r24
    3ca2:	a2 85       	ldd	r26, Z+10	; 0x0a
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	d0 97       	sbiw	r26, 0x30	; 48
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	31 ee       	ldi	r19, 0xE1	; 225
    3cac:	45 ef       	ldi	r20, 0xF5	; 245
    3cae:	55 e0       	ldi	r21, 0x05	; 5
    3cb0:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <__mulshisi3>
    3cb4:	86 0e       	add	r8, r22
    3cb6:	97 1e       	adc	r9, r23
    3cb8:	a8 1e       	adc	r10, r24
    3cba:	b9 1e       	adc	r11, r25
    3cbc:	82 89       	ldd	r24, Z+18	; 0x12
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	c0 97       	sbiw	r24, 0x30	; 48
    3cc2:	09 2e       	mov	r0, r25
    3cc4:	00 0c       	add	r0, r0
    3cc6:	aa 0b       	sbc	r26, r26
    3cc8:	bb 0b       	sbc	r27, r27
    3cca:	88 0e       	add	r8, r24
    3ccc:	99 1e       	adc	r9, r25
    3cce:	aa 1e       	adc	r10, r26
    3cd0:	bb 1e       	adc	r11, r27
    3cd2:	a3 85       	ldd	r26, Z+11	; 0x0b
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	d0 97       	sbiw	r26, 0x30	; 48
    3cd8:	20 e8       	ldi	r18, 0x80	; 128
    3cda:	36 e9       	ldi	r19, 0x96	; 150
    3cdc:	48 e9       	ldi	r20, 0x98	; 152
    3cde:	50 e0       	ldi	r21, 0x00	; 0
    3ce0:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <__mulshisi3>
    3ce4:	86 0e       	add	r8, r22
    3ce6:	97 1e       	adc	r9, r23
    3ce8:	a8 1e       	adc	r10, r24
    3cea:	b9 1e       	adc	r11, r25
    3cec:	a4 85       	ldd	r26, Z+12	; 0x0c
    3cee:	b0 e0       	ldi	r27, 0x00	; 0
    3cf0:	d0 97       	sbiw	r26, 0x30	; 48
    3cf2:	20 e4       	ldi	r18, 0x40	; 64
    3cf4:	32 e4       	ldi	r19, 0x42	; 66
    3cf6:	4f e0       	ldi	r20, 0x0F	; 15
    3cf8:	50 e0       	ldi	r21, 0x00	; 0
    3cfa:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <__mulshisi3>
    3cfe:	86 0e       	add	r8, r22
    3d00:	97 1e       	adc	r9, r23
    3d02:	a8 1e       	adc	r10, r24
    3d04:	b9 1e       	adc	r11, r25
    3d06:	a5 85       	ldd	r26, Z+13	; 0x0d
    3d08:	b0 e0       	ldi	r27, 0x00	; 0
    3d0a:	d0 97       	sbiw	r26, 0x30	; 48
    3d0c:	20 ea       	ldi	r18, 0xA0	; 160
    3d0e:	36 e8       	ldi	r19, 0x86	; 134
    3d10:	41 e0       	ldi	r20, 0x01	; 1
    3d12:	50 e0       	ldi	r21, 0x00	; 0
    3d14:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <__mulshisi3>
    3d18:	86 0e       	add	r8, r22
    3d1a:	97 1e       	adc	r9, r23
    3d1c:	a8 1e       	adc	r10, r24
    3d1e:	b9 1e       	adc	r11, r25
    3d20:	a6 85       	ldd	r26, Z+14	; 0x0e
    3d22:	b0 e0       	ldi	r27, 0x00	; 0
    3d24:	d0 97       	sbiw	r26, 0x30	; 48
    3d26:	20 e1       	ldi	r18, 0x10	; 16
    3d28:	37 e2       	ldi	r19, 0x27	; 39
    3d2a:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <__usmulhisi3>
    3d2e:	86 0e       	add	r8, r22
    3d30:	97 1e       	adc	r9, r23
    3d32:	a8 1e       	adc	r10, r24
    3d34:	b9 1e       	adc	r11, r25
    3d36:	a7 85       	ldd	r26, Z+15	; 0x0f
    3d38:	b0 e0       	ldi	r27, 0x00	; 0
    3d3a:	d0 97       	sbiw	r26, 0x30	; 48
    3d3c:	28 ee       	ldi	r18, 0xE8	; 232
    3d3e:	33 e0       	ldi	r19, 0x03	; 3
    3d40:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <__usmulhisi3>
    3d44:	86 0e       	add	r8, r22
    3d46:	97 1e       	adc	r9, r23
    3d48:	a8 1e       	adc	r10, r24
    3d4a:	b9 1e       	adc	r11, r25
    3d4c:	a0 89       	ldd	r26, Z+16	; 0x10
    3d4e:	b0 e0       	ldi	r27, 0x00	; 0
    3d50:	d0 97       	sbiw	r26, 0x30	; 48
    3d52:	24 e6       	ldi	r18, 0x64	; 100
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <__usmulhisi3>
    3d5a:	86 0e       	add	r8, r22
    3d5c:	97 1e       	adc	r9, r23
    3d5e:	a8 1e       	adc	r10, r24
    3d60:	b9 1e       	adc	r11, r25
    3d62:	a1 89       	ldd	r26, Z+17	; 0x11
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	d0 97       	sbiw	r26, 0x30	; 48
    3d68:	2a e0       	ldi	r18, 0x0A	; 10
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <__usmulhisi3>
    3d70:	68 0d       	add	r22, r8
    3d72:	79 1d       	adc	r23, r9
    3d74:	8a 1d       	adc	r24, r10
    3d76:	9b 1d       	adc	r25, r11
    3d78:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <time_to_rf>
    3d7c:	04 c1       	rjmp	.+520    	; 0x3f86 <pneIncomingData+0x554>
    3d7e:	87 e0       	ldi	r24, 0x07	; 7
    3d80:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3d84:	ff 24       	eor	r15, r15
    3d86:	f3 94       	inc	r15
    3d88:	fe c0       	rjmp	.+508    	; 0x3f86 <pneIncomingData+0x554>
    3d8a:	48 e0       	ldi	r20, 0x08	; 8
    3d8c:	50 e0       	ldi	r21, 0x00	; 0
    3d8e:	69 e8       	ldi	r22, 0x89	; 137
    3d90:	72 e0       	ldi	r23, 0x02	; 2
    3d92:	c8 01       	movw	r24, r16
    3d94:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3d98:	89 2b       	or	r24, r25
    3d9a:	39 f4       	brne	.+14     	; 0x3daa <pneIncomingData+0x378>
    3d9c:	88 eb       	ldi	r24, 0xB8	; 184
    3d9e:	92 e2       	ldi	r25, 0x22	; 34
    3da0:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <SYS_TimerStop>
    3da4:	ff 24       	eor	r15, r15
    3da6:	f3 94       	inc	r15
    3da8:	ee c0       	rjmp	.+476    	; 0x3f86 <pneIncomingData+0x554>
    3daa:	48 e0       	ldi	r20, 0x08	; 8
    3dac:	50 e0       	ldi	r21, 0x00	; 0
    3dae:	62 e9       	ldi	r22, 0x92	; 146
    3db0:	72 e0       	ldi	r23, 0x02	; 2
    3db2:	c8 01       	movw	r24, r16
    3db4:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3db8:	89 2b       	or	r24, r25
    3dba:	29 f4       	brne	.+10     	; 0x3dc6 <pneIncomingData+0x394>
    3dbc:	0e 94 14 35 	call	0x6a28	; 0x6a28 <clr_rom_to_rf>
    3dc0:	ff 24       	eor	r15, r15
    3dc2:	f3 94       	inc	r15
    3dc4:	e0 c0       	rjmp	.+448    	; 0x3f86 <pneIncomingData+0x554>
    3dc6:	48 e0       	ldi	r20, 0x08	; 8
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
    3dca:	6b e9       	ldi	r22, 0x9B	; 155
    3dcc:	72 e0       	ldi	r23, 0x02	; 2
    3dce:	c8 01       	movw	r24, r16
    3dd0:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3dd4:	89 2b       	or	r24, r25
    3dd6:	29 f4       	brne	.+10     	; 0x3de2 <pneIncomingData+0x3b0>
    3dd8:	0e 94 49 33 	call	0x6692	; 0x6692 <reboot_to_rf>
    3ddc:	ff 24       	eor	r15, r15
    3dde:	f3 94       	inc	r15
    3de0:	d2 c0       	rjmp	.+420    	; 0x3f86 <pneIncomingData+0x554>
    3de2:	48 e0       	ldi	r20, 0x08	; 8
    3de4:	50 e0       	ldi	r21, 0x00	; 0
    3de6:	64 ea       	ldi	r22, 0xA4	; 164
    3de8:	72 e0       	ldi	r23, 0x02	; 2
    3dea:	c8 01       	movw	r24, r16
    3dec:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3df0:	89 2b       	or	r24, r25
    3df2:	29 f4       	brne	.+10     	; 0x3dfe <pneIncomingData+0x3cc>
    3df4:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <info_to_rf>
    3df8:	ff 24       	eor	r15, r15
    3dfa:	f3 94       	inc	r15
    3dfc:	c4 c0       	rjmp	.+392    	; 0x3f86 <pneIncomingData+0x554>
    3dfe:	48 e0       	ldi	r20, 0x08	; 8
    3e00:	50 e0       	ldi	r21, 0x00	; 0
    3e02:	6d ea       	ldi	r22, 0xAD	; 173
    3e04:	72 e0       	ldi	r23, 0x02	; 2
    3e06:	c8 01       	movw	r24, r16
    3e08:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3e0c:	89 2b       	or	r24, r25
    3e0e:	a1 f5       	brne	.+104    	; 0x3e78 <pneIncomingData+0x446>
    3e10:	f4 e1       	ldi	r31, 0x14	; 20
    3e12:	ff 15       	cp	r31, r15
    3e14:	30 f0       	brcs	.+12     	; 0x3e22 <pneIncomingData+0x3f0>
    3e16:	84 e0       	ldi	r24, 0x04	; 4
    3e18:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3e1c:	ff 24       	eor	r15, r15
    3e1e:	f3 94       	inc	r15
    3e20:	b2 c0       	rjmp	.+356    	; 0x3f86 <pneIncomingData+0x554>
    3e22:	6e ef       	ldi	r22, 0xFE	; 254
    3e24:	6f 0d       	add	r22, r15
    3e26:	c8 01       	movw	r24, r16
    3e28:	0e 94 dd 36 	call	0x6dba	; 0x6dba <crc_verify>
    3e2c:	f8 2e       	mov	r15, r24
    3e2e:	88 23       	and	r24, r24
    3e30:	e9 f0       	breq	.+58     	; 0x3e6c <pneIncomingData+0x43a>
    3e32:	ce 01       	movw	r24, r28
    3e34:	01 96       	adiw	r24, 0x01	; 1
    3e36:	29 e0       	ldi	r18, 0x09	; 9
    3e38:	fc 01       	movw	r30, r24
    3e3a:	11 92       	st	Z+, r1
    3e3c:	2a 95       	dec	r18
    3e3e:	e9 f7       	brne	.-6      	; 0x3e3a <pneIncomingData+0x408>
    3e40:	f8 01       	movw	r30, r16
    3e42:	21 85       	ldd	r18, Z+9	; 0x09
    3e44:	29 83       	std	Y+1, r18	; 0x01
    3e46:	22 85       	ldd	r18, Z+10	; 0x0a
    3e48:	2a 83       	std	Y+2, r18	; 0x02
    3e4a:	23 85       	ldd	r18, Z+11	; 0x0b
    3e4c:	2b 83       	std	Y+3, r18	; 0x03
    3e4e:	24 85       	ldd	r18, Z+12	; 0x0c
    3e50:	2c 83       	std	Y+4, r18	; 0x04
    3e52:	25 85       	ldd	r18, Z+13	; 0x0d
    3e54:	2d 83       	std	Y+5, r18	; 0x05
    3e56:	26 85       	ldd	r18, Z+14	; 0x0e
    3e58:	2e 83       	std	Y+6, r18	; 0x06
    3e5a:	27 85       	ldd	r18, Z+15	; 0x0f
    3e5c:	2f 83       	std	Y+7, r18	; 0x07
    3e5e:	20 89       	ldd	r18, Z+16	; 0x10
    3e60:	28 87       	std	Y+8, r18	; 0x08
    3e62:	21 89       	ldd	r18, Z+17	; 0x11
    3e64:	29 87       	std	Y+9, r18	; 0x09
    3e66:	0e 94 41 35 	call	0x6a82	; 0x6a82 <change_id_to_rf>
    3e6a:	8d c0       	rjmp	.+282    	; 0x3f86 <pneIncomingData+0x554>
    3e6c:	84 e0       	ldi	r24, 0x04	; 4
    3e6e:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3e72:	ff 24       	eor	r15, r15
    3e74:	f3 94       	inc	r15
    3e76:	87 c0       	rjmp	.+270    	; 0x3f86 <pneIncomingData+0x554>
    3e78:	48 e0       	ldi	r20, 0x08	; 8
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	66 eb       	ldi	r22, 0xB6	; 182
    3e7e:	72 e0       	ldi	r23, 0x02	; 2
    3e80:	c8 01       	movw	r24, r16
    3e82:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3e86:	89 2b       	or	r24, r25
    3e88:	49 f4       	brne	.+18     	; 0x3e9c <pneIncomingData+0x46a>
    3e8a:	80 e2       	ldi	r24, 0x20	; 32
    3e8c:	0e 94 6b 35 	call	0x6ad6	; 0x6ad6 <last_1_log>
    3e90:	80 e2       	ldi	r24, 0x20	; 32
    3e92:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <last_2_log>
    3e96:	ff 24       	eor	r15, r15
    3e98:	f3 94       	inc	r15
    3e9a:	75 c0       	rjmp	.+234    	; 0x3f86 <pneIncomingData+0x554>
    3e9c:	48 e0       	ldi	r20, 0x08	; 8
    3e9e:	50 e0       	ldi	r21, 0x00	; 0
    3ea0:	6f eb       	ldi	r22, 0xBF	; 191
    3ea2:	72 e0       	ldi	r23, 0x02	; 2
    3ea4:	c8 01       	movw	r24, r16
    3ea6:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3eaa:	89 2b       	or	r24, r25
    3eac:	29 f4       	brne	.+10     	; 0x3eb8 <pneIncomingData+0x486>
    3eae:	0e 94 76 36 	call	0x6cec	; 0x6cec <dump_log_to_rf>
    3eb2:	ff 24       	eor	r15, r15
    3eb4:	f3 94       	inc	r15
    3eb6:	67 c0       	rjmp	.+206    	; 0x3f86 <pneIncomingData+0x554>
    3eb8:	48 e0       	ldi	r20, 0x08	; 8
    3eba:	50 e0       	ldi	r21, 0x00	; 0
    3ebc:	68 ec       	ldi	r22, 0xC8	; 200
    3ebe:	72 e0       	ldi	r23, 0x02	; 2
    3ec0:	c8 01       	movw	r24, r16
    3ec2:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3ec6:	89 2b       	or	r24, r25
    3ec8:	29 f4       	brne	.+10     	; 0x3ed4 <pneIncomingData+0x4a2>
    3eca:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <stress_test>
    3ece:	ff 24       	eor	r15, r15
    3ed0:	f3 94       	inc	r15
    3ed2:	59 c0       	rjmp	.+178    	; 0x3f86 <pneIncomingData+0x554>
    3ed4:	48 e0       	ldi	r20, 0x08	; 8
    3ed6:	50 e0       	ldi	r21, 0x00	; 0
    3ed8:	61 ed       	ldi	r22, 0xD1	; 209
    3eda:	72 e0       	ldi	r23, 0x02	; 2
    3edc:	c8 01       	movw	r24, r16
    3ede:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <memcmp>
    3ee2:	89 2b       	or	r24, r25
    3ee4:	09 f0       	breq	.+2      	; 0x3ee8 <pneIncomingData+0x4b6>
    3ee6:	45 c0       	rjmp	.+138    	; 0x3f72 <pneIncomingData+0x540>
    3ee8:	fb e1       	ldi	r31, 0x1B	; 27
    3eea:	ff 15       	cp	r31, r15
    3eec:	30 f0       	brcs	.+12     	; 0x3efa <pneIncomingData+0x4c8>
    3eee:	88 e0       	ldi	r24, 0x08	; 8
    3ef0:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3ef4:	ff 24       	eor	r15, r15
    3ef6:	f3 94       	inc	r15
    3ef8:	46 c0       	rjmp	.+140    	; 0x3f86 <pneIncomingData+0x554>
    3efa:	6e ef       	ldi	r22, 0xFE	; 254
    3efc:	6f 0d       	add	r22, r15
    3efe:	c8 01       	movw	r24, r16
    3f00:	0e 94 dd 36 	call	0x6dba	; 0x6dba <crc_verify>
    3f04:	f8 2e       	mov	r15, r24
    3f06:	88 23       	and	r24, r24
    3f08:	71 f1       	breq	.+92     	; 0x3f66 <pneIncomingData+0x534>
    3f0a:	d8 01       	movw	r26, r16
    3f0c:	19 96       	adiw	r26, 0x09	; 9
    3f0e:	ee ed       	ldi	r30, 0xDE	; 222
    3f10:	f1 e2       	ldi	r31, 0x21	; 33
    3f12:	cf 01       	movw	r24, r30
    3f14:	80 5f       	subi	r24, 0xF0	; 240
    3f16:	2d 91       	ld	r18, X+
    3f18:	91 91       	ld	r25, Z+
    3f1a:	29 17       	cp	r18, r25
    3f1c:	29 f0       	breq	.+10     	; 0x3f28 <pneIncomingData+0x4f6>
    3f1e:	89 e0       	ldi	r24, 0x09	; 9
    3f20:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3f24:	f1 2c       	mov	r15, r1
    3f26:	2f c0       	rjmp	.+94     	; 0x3f86 <pneIncomingData+0x554>
    3f28:	8e 13       	cpse	r24, r30
    3f2a:	f5 cf       	rjmp	.-22     	; 0x3f16 <pneIncomingData+0x4e4>
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	01 96       	adiw	r24, 0x01	; 1
    3f30:	29 e0       	ldi	r18, 0x09	; 9
    3f32:	fc 01       	movw	r30, r24
    3f34:	11 92       	st	Z+, r1
    3f36:	2a 95       	dec	r18
    3f38:	e9 f7       	brne	.-6      	; 0x3f34 <pneIncomingData+0x502>
    3f3a:	f8 01       	movw	r30, r16
    3f3c:	23 8d       	ldd	r18, Z+27	; 0x1b
    3f3e:	29 83       	std	Y+1, r18	; 0x01
    3f40:	24 8d       	ldd	r18, Z+28	; 0x1c
    3f42:	2a 83       	std	Y+2, r18	; 0x02
    3f44:	25 8d       	ldd	r18, Z+29	; 0x1d
    3f46:	2b 83       	std	Y+3, r18	; 0x03
    3f48:	26 8d       	ldd	r18, Z+30	; 0x1e
    3f4a:	2c 83       	std	Y+4, r18	; 0x04
    3f4c:	27 8d       	ldd	r18, Z+31	; 0x1f
    3f4e:	2d 83       	std	Y+5, r18	; 0x05
    3f50:	20 a1       	ldd	r18, Z+32	; 0x20
    3f52:	2e 83       	std	Y+6, r18	; 0x06
    3f54:	0e 94 4a 33 	call	0x6694	; 0x6694 <WPS_pairing>
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	80 93 42 23 	sts	0x2342, r24
    3f5e:	88 ee       	ldi	r24, 0xE8	; 232
    3f60:	93 e0       	ldi	r25, 0x03	; 3
    3f62:	7e d1       	rcall	.+764    	; 0x4260 <pne_delayms>
    3f64:	10 c0       	rjmp	.+32     	; 0x3f86 <pneIncomingData+0x554>
    3f66:	8a e0       	ldi	r24, 0x0A	; 10
    3f68:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3f6c:	ff 24       	eor	r15, r15
    3f6e:	f3 94       	inc	r15
    3f70:	0a c0       	rjmp	.+20     	; 0x3f86 <pneIncomingData+0x554>
    3f72:	8b e0       	ldi	r24, 0x0B	; 11
    3f74:	0e 94 76 34 	call	0x68ec	; 0x68ec <error_to_rf>
    3f78:	ff 24       	eor	r15, r15
    3f7a:	f3 94       	inc	r15
    3f7c:	04 c0       	rjmp	.+8      	; 0x3f86 <pneIncomingData+0x554>
    3f7e:	f1 2c       	mov	r15, r1
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <pneIncomingData+0x554>
    3f82:	ff 24       	eor	r15, r15
    3f84:	f3 94       	inc	r15
    3f86:	8f 2d       	mov	r24, r15
    3f88:	29 96       	adiw	r28, 0x09	; 9
    3f8a:	0f b6       	in	r0, 0x3f	; 63
    3f8c:	f8 94       	cli
    3f8e:	de bf       	out	0x3e, r29	; 62
    3f90:	0f be       	out	0x3f, r0	; 63
    3f92:	cd bf       	out	0x3d, r28	; 61
    3f94:	df 91       	pop	r29
    3f96:	cf 91       	pop	r28
    3f98:	1f 91       	pop	r17
    3f9a:	0f 91       	pop	r16
    3f9c:	ff 90       	pop	r15
    3f9e:	bf 90       	pop	r11
    3fa0:	af 90       	pop	r10
    3fa2:	9f 90       	pop	r9
    3fa4:	8f 90       	pop	r8
    3fa6:	08 95       	ret

00003fa8 <getUID>:

/*************************************************************************//**
*****************************************************************************/

void getUID()
{
    3fa8:	0f 93       	push	r16
    3faa:	cf 93       	push	r28
    3fac:	df 93       	push	r29
    3fae:	1f 92       	push	r1
    3fb0:	1f 92       	push	r1
    3fb2:	cd b7       	in	r28, 0x3d	; 61
    3fb4:	de b7       	in	r29, 0x3e	; 62
	uint8_t serial_addr[2] = {0x00, 0x08};
    3fb6:	19 82       	std	Y+1, r1	; 0x01
    3fb8:	88 e0       	ldi	r24, 0x08	; 8
    3fba:	8a 83       	std	Y+2, r24	; 0x02
		
	pne_APP_TwiInit(0xBF);
    3fbc:	8f eb       	ldi	r24, 0xBF	; 191
    3fbe:	64 d1       	rcall	.+712    	; 0x4288 <pne_APP_TwiInit>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, UID, 16);
    3fc0:	00 e1       	ldi	r16, 0x10	; 16
    3fc2:	2e ed       	ldi	r18, 0xDE	; 222
    3fc4:	31 e2       	ldi	r19, 0x21	; 33
    3fc6:	4f eb       	ldi	r20, 0xBF	; 191
    3fc8:	62 e0       	ldi	r22, 0x02	; 2
    3fca:	ce 01       	movw	r24, r28
    3fcc:	01 96       	adiw	r24, 0x01	; 1
    3fce:	dd d1       	rcall	.+954    	; 0x438a <pne_APP_TwiReceive>
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	df 91       	pop	r29
    3fd6:	cf 91       	pop	r28
    3fd8:	0f 91       	pop	r16
    3fda:	08 95       	ret

00003fdc <PNEWELSAppInit>:
	gpio_in(INPUT_LED_DRV2);
	gpio_pullup(INPUT_LED_DRV2);
}

void PNEWELSAppInit(void)
{
    3fdc:	0f 93       	push	r16
    3fde:	1f 93       	push	r17
    3fe0:	cf 93       	push	r28
	initialize_flag = 1;
    3fe2:	c1 e0       	ldi	r28, 0x01	; 1
    3fe4:	c0 93 c9 22 	sts	0x22C9, r28
	installation_flag = 1;
    3fe8:	c0 93 f3 22 	sts	0x22F3, r28
	data_update_flag = 1;
    3fec:	c0 93 89 22 	sts	0x2289, r28
	status_report_flag = 1;
    3ff0:	c0 93 ef 22 	sts	0x22EF, r28
	interrupt_flag = 1;
    3ff4:	c0 93 61 23 	sts	0x2361, r28
	debouncing_delay = 0;
    3ff8:	10 92 c6 22 	sts	0x22C6, r1
	LED_flag = 0;
    3ffc:	10 92 5b 22 	sts	0x225B, r1
	wps_flag = 0;
    4000:	10 92 ac 22 	sts	0x22AC, r1
	do_once = 0;
    4004:	10 92 56 23 	sts	0x2356, r1
	operation_seq = off_emergency_light;
    4008:	c0 93 b6 22 	sts	0x22B6, r28
	current_state_emergency_light = 0;
    400c:	10 92 67 23 	sts	0x2367, r1
	memory_address_incr = 0;
    4010:	10 92 69 23 	sts	0x2369, r1
    4014:	10 92 68 23 	sts	0x2368, r1
	error_count_status = 0;
    4018:	10 92 ca 22 	sts	0x22CA, r1
	error_count_wps = 0;
    401c:	10 92 b2 22 	sts	0x22B2, r1
	wps_send_flag = 1;
    4020:	c0 93 88 22 	sts	0x2288, r28
	battery_low_once = 0;
    4024:	10 92 33 23 	sts	0x2333, r1
	WPS_STATUS = WPS_init;
    4028:	10 92 42 23 	sts	0x2342, r1
	rf_flag = 0;
    402c:	10 92 e1 22 	sts	0x22E1, r1
	countdown = 0;
    4030:	10 92 c8 22 	sts	0x22C8, r1
    4034:	10 92 c7 22 	sts	0x22C7, r1
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    4038:	87 e8       	ldi	r24, 0x87	; 135
    403a:	80 93 7a 00 	sts	0x007A, r24
	//do_once_stop_wps_timer = 0;
	
	adc_init(ADC_PRESCALER_DIV128);
	timer2_init();
    403e:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <timer2_init>
	memoryCounter_init();
    4042:	9c d2       	rcall	.+1336   	; 0x457c <memoryCounter_init>
		.baudrate = USART_SERIAL_EXAMPLE_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    4044:	64 e0       	ldi	r22, 0x04	; 4
    4046:	72 e0       	ldi	r23, 0x02	; 2
    4048:	88 ec       	ldi	r24, 0xC8	; 200
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 8c 06 	call	0xd18	; 0xd18 <usart_init_rs232>
	
	/*Software timer declaration*/
	appLEDTimer.interval = STANDBY_TIMER;
    4050:	e4 ef       	ldi	r30, 0xF4	; 244
    4052:	f2 e2       	ldi	r31, 0x22	; 34
    4054:	84 ef       	ldi	r24, 0xF4	; 244
    4056:	91 e0       	ldi	r25, 0x01	; 1
    4058:	a0 e0       	ldi	r26, 0x00	; 0
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	86 83       	std	Z+6, r24	; 0x06
    405e:	97 83       	std	Z+7, r25	; 0x07
    4060:	a0 87       	std	Z+8, r26	; 0x08
    4062:	b1 87       	std	Z+9, r27	; 0x09
	appLEDTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4064:	12 86       	std	Z+10, r1	; 0x0a
	appLEDTimer.handler = appLEDTimerHandler;
    4066:	83 ec       	ldi	r24, 0xC3	; 195
    4068:	96 e1       	ldi	r25, 0x16	; 22
    406a:	94 87       	std	Z+12, r25	; 0x0c
    406c:	83 87       	std	Z+11, r24	; 0x0b
	SYS_TimerStart(&appLEDTimer);
    406e:	cf 01       	movw	r24, r30
    4070:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <SYS_TimerStart>
	
	appLEDIntervalTimer.interval = STANDBY_INTERVAL_TIMER;
    4074:	ee ec       	ldi	r30, 0xCE	; 206
    4076:	f2 e2       	ldi	r31, 0x22	; 34
    4078:	88 ee       	ldi	r24, 0xE8	; 232
    407a:	93 e0       	ldi	r25, 0x03	; 3
    407c:	a0 e0       	ldi	r26, 0x00	; 0
    407e:	b0 e0       	ldi	r27, 0x00	; 0
    4080:	86 83       	std	Z+6, r24	; 0x06
    4082:	97 83       	std	Z+7, r25	; 0x07
    4084:	a0 87       	std	Z+8, r26	; 0x08
    4086:	b1 87       	std	Z+9, r27	; 0x09
	appLEDIntervalTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4088:	12 86       	std	Z+10, r1	; 0x0a
	appLEDIntervalTimer.handler = appLEDIntervalTimerHandler;
    408a:	8b e8       	ldi	r24, 0x8B	; 139
    408c:	96 e1       	ldi	r25, 0x16	; 22
    408e:	94 87       	std	Z+12, r25	; 0x0c
    4090:	83 87       	std	Z+11, r24	; 0x0b
	
	error_timer_status.interval = rand()%400+100;
    4092:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <rand>
    4096:	e8 eb       	ldi	r30, 0xB8	; 184
    4098:	f2 e2       	ldi	r31, 0x22	; 34
    409a:	00 e9       	ldi	r16, 0x90	; 144
    409c:	11 e0       	ldi	r17, 0x01	; 1
    409e:	b8 01       	movw	r22, r16
    40a0:	0e 94 3c 4d 	call	0x9a78	; 0x9a78 <__divmodhi4>
    40a4:	8c 59       	subi	r24, 0x9C	; 156
    40a6:	9f 4f       	sbci	r25, 0xFF	; 255
    40a8:	09 2e       	mov	r0, r25
    40aa:	00 0c       	add	r0, r0
    40ac:	aa 0b       	sbc	r26, r26
    40ae:	bb 0b       	sbc	r27, r27
    40b0:	86 83       	std	Z+6, r24	; 0x06
    40b2:	97 83       	std	Z+7, r25	; 0x07
    40b4:	a0 87       	std	Z+8, r26	; 0x08
    40b6:	b1 87       	std	Z+9, r27	; 0x09
	error_timer_status.mode = SYS_TIMER_INTERVAL_MODE;
    40b8:	12 86       	std	Z+10, r1	; 0x0a
	error_timer_status.handler = errorTimerStatusHandler;
    40ba:	8d e7       	ldi	r24, 0x7D	; 125
    40bc:	96 e1       	ldi	r25, 0x16	; 22
    40be:	94 87       	std	Z+12, r25	; 0x0c
    40c0:	83 87       	std	Z+11, r24	; 0x0b
	
	error_timer_wps.interval = rand()%400+100;
    40c2:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <rand>
    40c6:	ed e8       	ldi	r30, 0x8D	; 141
    40c8:	f2 e2       	ldi	r31, 0x22	; 34
    40ca:	b8 01       	movw	r22, r16
    40cc:	0e 94 3c 4d 	call	0x9a78	; 0x9a78 <__divmodhi4>
    40d0:	8c 59       	subi	r24, 0x9C	; 156
    40d2:	9f 4f       	sbci	r25, 0xFF	; 255
    40d4:	09 2e       	mov	r0, r25
    40d6:	00 0c       	add	r0, r0
    40d8:	aa 0b       	sbc	r26, r26
    40da:	bb 0b       	sbc	r27, r27
    40dc:	86 83       	std	Z+6, r24	; 0x06
    40de:	97 83       	std	Z+7, r25	; 0x07
    40e0:	a0 87       	std	Z+8, r26	; 0x08
    40e2:	b1 87       	std	Z+9, r27	; 0x09
	error_timer_wps.mode = SYS_TIMER_INTERVAL_MODE;
    40e4:	12 86       	std	Z+10, r1	; 0x0a
	error_timer_wps.handler = errorTimerWpsHandler;
    40e6:	8b eb       	ldi	r24, 0xBB	; 187
    40e8:	96 e1       	ldi	r25, 0x16	; 22
    40ea:	94 87       	std	Z+12, r25	; 0x0c
    40ec:	83 87       	std	Z+11, r24	; 0x0b
	/*SYS_TimerStart(&error_timer_wps);*/
	
	appWPSRequestTimer.interval = WPS_REQUEST_TIMER;
    40ee:	e6 e4       	ldi	r30, 0x46	; 70
    40f0:	f3 e2       	ldi	r31, 0x23	; 35
    40f2:	88 e8       	ldi	r24, 0x88	; 136
    40f4:	93 e1       	ldi	r25, 0x13	; 19
    40f6:	a0 e0       	ldi	r26, 0x00	; 0
    40f8:	b0 e0       	ldi	r27, 0x00	; 0
    40fa:	86 83       	std	Z+6, r24	; 0x06
    40fc:	97 83       	std	Z+7, r25	; 0x07
    40fe:	a0 87       	std	Z+8, r26	; 0x08
    4100:	b1 87       	std	Z+9, r27	; 0x09
	appWPSRequestTimer.mode = SYS_TIMER_PERIODIC_MODE;
    4102:	c2 87       	std	Z+10, r28	; 0x0a
	appWPSRequestTimer.handler = appWPSRequestTimerHandler;
    4104:	26 eb       	ldi	r18, 0xB6	; 182
    4106:	36 e1       	ldi	r19, 0x16	; 22
    4108:	34 87       	std	Z+12, r19	; 0x0c
    410a:	23 87       	std	Z+11, r18	; 0x0b
	/*SYS_TimerStart(&appWPSRequestTimer);*/
	
	appWPSActivationTimer.interval = WPS_REQUEST_TIMER;
    410c:	e5 e3       	ldi	r30, 0x35	; 53
    410e:	f3 e2       	ldi	r31, 0x23	; 35
    4110:	86 83       	std	Z+6, r24	; 0x06
    4112:	97 83       	std	Z+7, r25	; 0x07
    4114:	a0 87       	std	Z+8, r26	; 0x08
    4116:	b1 87       	std	Z+9, r27	; 0x09
	appWPSActivationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4118:	12 86       	std	Z+10, r1	; 0x0a
	appWPSActivationTimer.handler = appWPSActivationTimerHandler;
    411a:	8f e8       	ldi	r24, 0x8F	; 143
    411c:	96 e1       	ldi	r25, 0x16	; 22
    411e:	94 87       	std	Z+12, r25	; 0x0c
    4120:	83 87       	std	Z+11, r24	; 0x0b
	
	pneBatteryAverage_init(); //get average battery reading
    4122:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <pneBatteryAverage_init>
	getUID(); //retrieve UID
    4126:	40 df       	rcall	.-384    	; 0x3fa8 <getUID>
	
	/*Factory Status*/
	if(gpio_read(FACTORY_BTN) ? 0 : 1)
    4128:	60 91 f0 22 	lds	r22, 0x22F0
    412c:	70 91 f1 22 	lds	r23, 0x22F1
    4130:	80 91 f2 22 	lds	r24, 0x22F2
    4134:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    4138:	81 11       	cpse	r24, r1
    413a:	08 c0       	rjmp	.+16     	; 0x414c <PNEWELSAppInit+0x170>
	{
		PNEWELS_Buffer.IsFactory = STATUS_FACTORY_OK;
    413c:	e0 e6       	ldi	r30, 0x60	; 96
    413e:	f2 e2       	ldi	r31, 0x22	; 34
    4140:	17 82       	std	Z+7, r1	; 0x07
		PNEWELS_Buffer.mode_Next = MODE_FACTORY;
    4142:	86 e0       	ldi	r24, 0x06	; 6
    4144:	83 8b       	std	Z+19, r24	; 0x13
		factory_mode();
    4146:	0e 94 ae 31 	call	0x635c	; 0x635c <factory_mode>
    414a:	03 c0       	rjmp	.+6      	; 0x4152 <PNEWELSAppInit+0x176>
	}
	else
	{
		PNEWELS_Buffer.IsFactory = STATUS_FACTORY_NOK;
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	80 93 67 22 	sts	0x2267, r24
	}
}
    4152:	cf 91       	pop	r28
    4154:	1f 91       	pop	r17
    4156:	0f 91       	pop	r16
    4158:	08 95       	ret

0000415a <systemFlag_check>:
	//PNEWELSE2promWrite(0xAE, 'E', 01, 41, 0xFF); //reset flag
}

void systemFlag_check()
{
	if(device_flag & (1<<AC_FLAG))
    415a:	80 91 5c 23 	lds	r24, 0x235C
    415e:	81 ff       	sbrs	r24, 1
    4160:	0e c0       	rjmp	.+28     	; 0x417e <systemFlag_check+0x24>
	{
		operation_seq = wps_state;
    4162:	84 e0       	ldi	r24, 0x04	; 4
    4164:	80 93 b6 22 	sts	0x22B6, r24
		reboot_countdown = 0;
    4168:	10 92 b1 22 	sts	0x22B1, r1
    416c:	10 92 b0 22 	sts	0x22B0, r1
		APP_IbLoadSettings_WPS(); //load temporary setting
    4170:	0e 94 84 02 	call	0x508	; 0x508 <APP_IbLoadSettings_WPS>
		SYS_TimerStart(&appWPSRequestTimer); //start requesting data
    4174:	86 e4       	ldi	r24, 0x46	; 70
    4176:	93 e2       	ldi	r25, 0x23	; 35
    4178:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <SYS_TimerStart>
    417c:	08 95       	ret
	}
	else operation_seq = off_emergency_light;
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	80 93 b6 22 	sts	0x22B6, r24
    4184:	08 95       	ret

00004186 <write_factory_default>:
	//device_flag = (device_flag & ~(1<<AC_FLAG)); //write the flag
	//writeE2prom(FLAG,device_flag);
}

void write_factory_default(uint16_t address, uint8_t factory_default)
{
    4186:	0f 93       	push	r16
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, factory_default); //set device address default value (LSB)
    4188:	06 2f       	mov	r16, r22
    418a:	29 2f       	mov	r18, r25
    418c:	48 2f       	mov	r20, r24
    418e:	65 e4       	ldi	r22, 0x45	; 69
    4190:	8e ea       	ldi	r24, 0xAE	; 174
    4192:	53 d1       	rcall	.+678    	; 0x443a <PNEWELSE2promWrite>
	pne_delayms(10);
    4194:	8a e0       	ldi	r24, 0x0A	; 10
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	63 d0       	rcall	.+198    	; 0x4260 <pne_delayms>
	
    419a:	0f 91       	pop	r16
    419c:	08 95       	ret

0000419e <factory_initialization>:
#include "memoryConfig.h"
#include "appIb.h"

void factory_initialization()
{
	device_flag = readE2prom(FLAG); //read flag form EEPROM
    419e:	82 e0       	ldi	r24, 0x02	; 2
    41a0:	90 e1       	ldi	r25, 0x10	; 16
    41a2:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <readE2prom>
    41a6:	80 93 5c 23 	sts	0x235C, r24
	batt_low = readE2prom(BATTERY_LOW);
    41aa:	84 e0       	ldi	r24, 0x04	; 4
    41ac:	90 e1       	ldi	r25, 0x10	; 16
    41ae:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <readE2prom>
    41b2:	80 93 57 23 	sts	0x2357, r24
	batt_max = readE2prom(BATTERY_MAX);
    41b6:	83 e0       	ldi	r24, 0x03	; 3
    41b8:	90 e1       	ldi	r25, 0x10	; 16
    41ba:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <readE2prom>
    41be:	80 93 5a 22 	sts	0x225A, r24
	if(device_flag & (1<<FACTORY_FLAG))
    41c2:	80 91 5c 23 	lds	r24, 0x235C
    41c6:	80 ff       	sbrs	r24, 0
    41c8:	2e c0       	rjmp	.+92     	; 0x4226 <factory_initialization+0x88>
	{
		write_factory_default(DEVICE_ADDRESS_L,ADDRESS_DEFAULT_L);
    41ca:	61 e0       	ldi	r22, 0x01	; 1
    41cc:	8c ef       	ldi	r24, 0xFC	; 252
    41ce:	9f e0       	ldi	r25, 0x0F	; 15
    41d0:	da df       	rcall	.-76     	; 0x4186 <write_factory_default>
		write_factory_default(DEVICE_ADDRESS_H,ADDRESS_DEFAULT_H); //set device address default value (MSB)
    41d2:	60 e0       	ldi	r22, 0x00	; 0
    41d4:	8d ef       	ldi	r24, 0xFD	; 253
    41d6:	9f e0       	ldi	r25, 0x0F	; 15
    41d8:	d6 df       	rcall	.-84     	; 0x4186 <write_factory_default>
		
		write_factory_default(DEVICE_CHANNEL_L,CHANNEL_DEFAULT_L); //set device channel default value (LSB)
    41da:	60 e1       	ldi	r22, 0x10	; 16
    41dc:	8e ef       	ldi	r24, 0xFE	; 254
    41de:	9f e0       	ldi	r25, 0x0F	; 15
    41e0:	d2 df       	rcall	.-92     	; 0x4186 <write_factory_default>
		write_factory_default(DEVICE_CHANNEL_H,CHANNEL_DEFAULT_H); //set device channel default value (MSB)
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	8f ef       	ldi	r24, 0xFF	; 255
    41e6:	9f e0       	ldi	r25, 0x0F	; 15
    41e8:	ce df       	rcall	.-100    	; 0x4186 <write_factory_default>
		
		write_factory_default(DEVICE_PAN_L,PAN_DEFAULT_L); //set device PAN default value (LSB)
    41ea:	64 e3       	ldi	r22, 0x34	; 52
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e1       	ldi	r25, 0x10	; 16
    41f0:	ca df       	rcall	.-108    	; 0x4186 <write_factory_default>
		write_factory_default(DEVICE_PAN_H,PAN_DEFAULT_H); //set device PAN default value (MSB)
    41f2:	62 e1       	ldi	r22, 0x12	; 18
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	90 e1       	ldi	r25, 0x10	; 16
    41f8:	c6 df       	rcall	.-116    	; 0x4186 <write_factory_default>
		
		write_factory_default(BATTERY_MAX,BATTERY_MAX_THRESH);
    41fa:	6e ee       	ldi	r22, 0xEE	; 238
    41fc:	83 e0       	ldi	r24, 0x03	; 3
    41fe:	90 e1       	ldi	r25, 0x10	; 16
    4200:	c2 df       	rcall	.-124    	; 0x4186 <write_factory_default>
		write_factory_default(BATTERY_LOW,BATTERY_LOW_THRESH);
    4202:	6a ea       	ldi	r22, 0xAA	; 170
    4204:	84 e0       	ldi	r24, 0x04	; 4
    4206:	90 e1       	ldi	r25, 0x10	; 16
    4208:	be df       	rcall	.-132    	; 0x4186 <write_factory_default>
		
		clre2prom(); //wipe all log file
    420a:	9c d1       	rcall	.+824    	; 0x4544 <clre2prom>
//		write_factory_default(GROUP_ID, GROUP_DEFAULT); //set Group ID default Value
//		write_factory_default(ZONE_ID, ZONE_DEFAULT); //set Zone ID default Value
//		write_factory_default(NODE_ID, NODE_DEFAULT); //set Node ID default value
		
		device_flag = (device_flag & ~(1<<FACTORY_FLAG));
    420c:	80 91 5c 23 	lds	r24, 0x235C
    4210:	8e 7f       	andi	r24, 0xFE	; 254
    4212:	80 93 5c 23 	sts	0x235C, r24
		
		write_factory_default(FLAG, device_flag); //set Factory flag
    4216:	60 91 5c 23 	lds	r22, 0x235C
    421a:	82 e0       	ldi	r24, 0x02	; 2
    421c:	90 e1       	ldi	r25, 0x10	; 16
    421e:	b3 df       	rcall	.-154    	; 0x4186 <write_factory_default>
		pne_delayms(10);
    4220:	8a e0       	ldi	r24, 0x0A	; 10
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	1d c0       	rjmp	.+58     	; 0x4260 <pne_delayms>
    4226:	08 95       	ret

00004228 <rf_init>:
#include <string.h>
#include "pne_appDelay.h"
#include "pne_rf_processor.h"

uint16_t rf_init(uint16_t address, uint16_t app_type)
{
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	d8 2f       	mov	r29, r24
    4230:	19 2f       	mov	r17, r25
	uint8_t cache[2] = {0};
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
		
	cache[0] = PNEWELSE2promRead(0xAF,'E',memory_address_low+1,memory_address_high);
    4232:	41 e0       	ldi	r20, 0x01	; 1
    4234:	48 0f       	add	r20, r24
    4236:	29 2f       	mov	r18, r25
    4238:	65 e4       	ldi	r22, 0x45	; 69
    423a:	8f ea       	ldi	r24, 0xAF	; 175
    423c:	29 d1       	rcall	.+594    	; 0x4490 <PNEWELSE2promRead>
    423e:	c8 2f       	mov	r28, r24
	cache[1] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    4240:	21 2f       	mov	r18, r17
    4242:	4d 2f       	mov	r20, r29
    4244:	65 e4       	ldi	r22, 0x45	; 69
    4246:	8f ea       	ldi	r24, 0xAF	; 175
    4248:	23 d1       	rcall	.+582    	; 0x4490 <PNEWELSE2promRead>
	app_type = cache[0];
    424a:	2c 2f       	mov	r18, r28
    424c:	30 e0       	ldi	r19, 0x00	; 0
	app_type = app_type << 8;
    424e:	32 2f       	mov	r19, r18
    4250:	22 27       	eor	r18, r18
	app_type |= cache[1];
	return app_type;
    4252:	a9 01       	movw	r20, r18
    4254:	48 2b       	or	r20, r24
    4256:	ca 01       	movw	r24, r20
    4258:	df 91       	pop	r29
    425a:	cf 91       	pop	r28
    425c:	1f 91       	pop	r17
    425e:	08 95       	ret

00004260 <pne_delayms>:

#include "pne_appDelay.h"

void pne_delayms(uint16_t milisecond)
{
	uint16_t microsecond = milisecond * 1000;
    4260:	28 ee       	ldi	r18, 0xE8	; 232
    4262:	33 e0       	ldi	r19, 0x03	; 3
    4264:	ac 01       	movw	r20, r24
    4266:	42 9f       	mul	r20, r18
    4268:	c0 01       	movw	r24, r0
    426a:	43 9f       	mul	r20, r19
    426c:	90 0d       	add	r25, r0
    426e:	52 9f       	mul	r21, r18
    4270:	90 0d       	add	r25, r0
    4272:	11 24       	eor	r1, r1
	
	for (int i=0; i<microsecond; i++)
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	39 f0       	breq	.+14     	; 0x4286 <pne_delayms+0x26>
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	2f 5f       	subi	r18, 0xFF	; 255
    427e:	3f 4f       	sbci	r19, 0xFF	; 255
    4280:	28 17       	cp	r18, r24
    4282:	39 07       	cpc	r19, r25
    4284:	d9 f7       	brne	.-10     	; 0x427c <pne_delayms+0x1c>
    4286:	08 95       	ret

00004288 <pne_APP_TwiInit>:
#include "memoryConfig.h"


//Functions
void pne_APP_TwiInit(uint8_t slave_bus_address)
{	
    4288:	0f 93       	push	r16
    428a:	1f 93       	push	r17
    428c:	cf 93       	push	r28
    428e:	df 93       	push	r29
    4290:	00 d0       	rcall	.+0      	; 0x4292 <pne_APP_TwiInit+0xa>
    4292:	00 d0       	rcall	.+0      	; 0x4294 <pne_APP_TwiInit+0xc>
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
	//TWI Declaration
	twi_master_options_t opt =
    4298:	be 01       	movw	r22, r28
    429a:	6f 5f       	subi	r22, 0xFF	; 255
    429c:	7f 4f       	sbci	r23, 0xFF	; 255
    429e:	96 e0       	ldi	r25, 0x06	; 6
    42a0:	fb 01       	movw	r30, r22
    42a2:	11 92       	st	Z+, r1
    42a4:	9a 95       	dec	r25
    42a6:	e9 f7       	brne	.-6      	; 0x42a2 <pne_APP_TwiInit+0x1a>
    42a8:	08 e4       	ldi	r16, 0x48	; 72
    42aa:	18 ee       	ldi	r17, 0xE8	; 232
    42ac:	21 e0       	ldi	r18, 0x01	; 1
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	09 83       	std	Y+1, r16	; 0x01
    42b2:	1a 83       	std	Y+2, r17	; 0x02
    42b4:	2b 83       	std	Y+3, r18	; 0x03
    42b6:	3c 83       	std	Y+4, r19	; 0x04
    42b8:	8e 83       	std	Y+6, r24	; 0x06
	{
		.speed = TWI_SPEED_HZ,
		.chip  = slave_bus_address,
	};
	opt .baud_reg = TWI_CLOCK_RATE(F_CPU, opt.speed);
    42ba:	88 e1       	ldi	r24, 0x18	; 24
    42bc:	8d 83       	std	Y+5, r24	; 0x05
	twi_master_init(TWI_EXAMPLE,&opt);
    42be:	88 eb       	ldi	r24, 0xB8	; 184
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	0e 94 11 04 	call	0x822	; 0x822 <twi_master_init>
}
    42c6:	26 96       	adiw	r28, 0x06	; 6
    42c8:	0f b6       	in	r0, 0x3f	; 63
    42ca:	f8 94       	cli
    42cc:	de bf       	out	0x3e, r29	; 62
    42ce:	0f be       	out	0x3f, r0	; 63
    42d0:	cd bf       	out	0x3d, r28	; 61
    42d2:	df 91       	pop	r29
    42d4:	cf 91       	pop	r28
    42d6:	1f 91       	pop	r17
    42d8:	0f 91       	pop	r16
    42da:	08 95       	ret

000042dc <pne_APP_TwiSend>:

AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
    42dc:	ef 92       	push	r14
    42de:	ff 92       	push	r15
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	2a 97       	sbiw	r28, 0x0a	; 10
    42ee:	0f b6       	in	r0, 0x3f	; 63
    42f0:	f8 94       	cli
    42f2:	de bf       	out	0x3e, r29	; 62
    42f4:	0f be       	out	0x3f, r0	; 63
    42f6:	cd bf       	out	0x3d, r28	; 61
    42f8:	f9 01       	movw	r30, r18
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_WRITE_SUCCESS;
	
	twi_package_t temperature_packet =
    42fa:	9e 01       	movw	r18, r28
    42fc:	2f 5f       	subi	r18, 0xFF	; 255
    42fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4300:	79 01       	movw	r14, r18
    4302:	2a e0       	ldi	r18, 0x0A	; 10
    4304:	d7 01       	movw	r26, r14
    4306:	1d 92       	st	X+, r1
    4308:	2a 95       	dec	r18
    430a:	e9 f7       	brne	.-6      	; 0x4306 <pne_APP_TwiSend+0x2a>
    430c:	49 83       	std	Y+1, r20	; 0x01
	{
		.addr[0]      = slave_mem_addr[0],               /* TWI slave memory address data */
    430e:	dc 01       	movw	r26, r24
    4310:	3c 91       	ld	r19, X
AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_WRITE_SUCCESS;
	
	twi_package_t temperature_packet =
    4312:	3a 83       	std	Y+2, r19	; 0x02
    4314:	46 2f       	mov	r20, r22
    4316:	50 e0       	ldi	r21, 0x00	; 0
    4318:	5e 83       	std	Y+6, r21	; 0x06
    431a:	4d 83       	std	Y+5, r20	; 0x05
    431c:	f8 87       	std	Y+8, r31	; 0x08
    431e:	ef 83       	std	Y+7, r30	; 0x07
    4320:	10 e0       	ldi	r17, 0x00	; 0
    4322:	1a 87       	std	Y+10, r17	; 0x0a
    4324:	09 87       	std	Y+9, r16	; 0x09
		.chip         = slave_bus_address,               /* TWI slave bus address */
		.buffer       = (void *)test_pattern,            /* transfer data source buffer */
		.length       = test_pattern_length              /* transfer data size (bytes) */
	};
	
	if (slave_mem_addr_length == 1)
    4326:	61 30       	cpi	r22, 0x01	; 1
    4328:	c9 f0       	breq	.+50     	; 0x435c <pne_APP_TwiSend+0x80>
	{
		temperature_packet.addr[0] = slave_mem_addr[0];
	}
	else if (slave_mem_addr_length == 2)
    432a:	62 30       	cpi	r22, 0x02	; 2
    432c:	29 f4       	brne	.+10     	; 0x4338 <pne_APP_TwiSend+0x5c>
	{
		temperature_packet.addr[0] = slave_mem_addr[1];
    432e:	11 96       	adiw	r26, 0x01	; 1
    4330:	8c 91       	ld	r24, X
    4332:	8a 83       	std	Y+2, r24	; 0x02
		temperature_packet.addr[1] = slave_mem_addr[0];
    4334:	3b 83       	std	Y+3, r19	; 0x03
    4336:	12 c0       	rjmp	.+36     	; 0x435c <pne_APP_TwiSend+0x80>
	}
	else if (slave_mem_addr_length == 3)
    4338:	63 30       	cpi	r22, 0x03	; 3
    433a:	81 f4       	brne	.+32     	; 0x435c <pne_APP_TwiSend+0x80>
	{
		temperature_packet.addr[0] = slave_mem_addr[0];
		temperature_packet.addr[1] = slave_mem_addr[1];
    433c:	fc 01       	movw	r30, r24
    433e:	21 81       	ldd	r18, Z+1	; 0x01
    4340:	2b 83       	std	Y+3, r18	; 0x03
		temperature_packet.addr[2] = slave_mem_addr[2];
    4342:	82 81       	ldd	r24, Z+2	; 0x02
    4344:	8c 83       	std	Y+4, r24	; 0x04
    4346:	0a c0       	rjmp	.+20     	; 0x435c <pne_APP_TwiSend+0x80>
	}
	
	while(twi_master_write(TWI_EXAMPLE,&temperature_packet) != TWI_SUCCESS)
	{
		pne_delayms(1);
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	89 df       	rcall	.-238    	; 0x4260 <pne_delayms>
    434e:	11 50       	subi	r17, 0x01	; 1
		count++;
		if (count == 10)
    4350:	31 f4       	brne	.+12     	; 0x435e <pne_APP_TwiSend+0x82>
		{
			count = 0;
			status = APP_PNEWELS_TWI_WRITE_FAIL;
			fatal_error_to_rf(twi_fatal_error);
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <fatal_error_to_rf>
		pne_delayms(1);
		count++;
		if (count == 10)
		{
			count = 0;
			status = APP_PNEWELS_TWI_WRITE_FAIL;
    4358:	81 e0       	ldi	r24, 0x01	; 1
			fatal_error_to_rf(twi_fatal_error);
			break;
    435a:	0a c0       	rjmp	.+20     	; 0x4370 <pne_APP_TwiSend+0x94>
	opt .baud_reg = TWI_CLOCK_RATE(F_CPU, opt.speed);
	twi_master_init(TWI_EXAMPLE,&opt);
}

AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
    435c:	1a e0       	ldi	r17, 0x0A	; 10
		temperature_packet.addr[0] = slave_mem_addr[0];
		temperature_packet.addr[1] = slave_mem_addr[1];
		temperature_packet.addr[2] = slave_mem_addr[2];
	}
	
	while(twi_master_write(TWI_EXAMPLE,&temperature_packet) != TWI_SUCCESS)
    435e:	be 01       	movw	r22, r28
    4360:	6f 5f       	subi	r22, 0xFF	; 255
    4362:	7f 4f       	sbci	r23, 0xFF	; 255
    4364:	88 eb       	ldi	r24, 0xB8	; 184
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	0e 94 b0 03 	call	0x760	; 0x760 <twi_master_write>
    436c:	81 11       	cpse	r24, r1
    436e:	ec cf       	rjmp	.-40     	; 0x4348 <pne_APP_TwiSend+0x6c>
			break;
		}
	}
	
	return status;
}
    4370:	2a 96       	adiw	r28, 0x0a	; 10
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	cd bf       	out	0x3d, r28	; 61
    437c:	df 91       	pop	r29
    437e:	cf 91       	pop	r28
    4380:	1f 91       	pop	r17
    4382:	0f 91       	pop	r16
    4384:	ff 90       	pop	r15
    4386:	ef 90       	pop	r14
    4388:	08 95       	ret

0000438a <pne_APP_TwiReceive>:

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
    438a:	ef 92       	push	r14
    438c:	ff 92       	push	r15
    438e:	0f 93       	push	r16
    4390:	1f 93       	push	r17
    4392:	cf 93       	push	r28
    4394:	df 93       	push	r29
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
    439a:	2a 97       	sbiw	r28, 0x0a	; 10
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	f8 94       	cli
    43a0:	de bf       	out	0x3e, r29	; 62
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	cd bf       	out	0x3d, r28	; 61
    43a6:	f9 01       	movw	r30, r18
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
	
	twi_package_t packet_received =
    43a8:	9e 01       	movw	r18, r28
    43aa:	2f 5f       	subi	r18, 0xFF	; 255
    43ac:	3f 4f       	sbci	r19, 0xFF	; 255
    43ae:	79 01       	movw	r14, r18
    43b0:	2a e0       	ldi	r18, 0x0A	; 10
    43b2:	d7 01       	movw	r26, r14
    43b4:	1d 92       	st	X+, r1
    43b6:	2a 95       	dec	r18
    43b8:	e9 f7       	brne	.-6      	; 0x43b4 <pne_APP_TwiReceive+0x2a>
    43ba:	49 83       	std	Y+1, r20	; 0x01
	{
		.addr[0]      = slave_mem_addr[0],               /* TWI slave memory address data */
    43bc:	dc 01       	movw	r26, r24
    43be:	3c 91       	ld	r19, X
AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
	
	twi_package_t packet_received =
    43c0:	3a 83       	std	Y+2, r19	; 0x02
    43c2:	46 2f       	mov	r20, r22
    43c4:	50 e0       	ldi	r21, 0x00	; 0
    43c6:	5e 83       	std	Y+6, r21	; 0x06
    43c8:	4d 83       	std	Y+5, r20	; 0x05
    43ca:	f8 87       	std	Y+8, r31	; 0x08
    43cc:	ef 83       	std	Y+7, r30	; 0x07
    43ce:	10 e0       	ldi	r17, 0x00	; 0
    43d0:	1a 87       	std	Y+10, r17	; 0x0a
    43d2:	09 87       	std	Y+9, r16	; 0x09
		.chip         = slave_bus_address,               /* TWI slave bus address */
		.buffer       = data_received,                   /* transfer data source buffer */
		.length       = data_received_length             /* transfer data size (bytes) */
	};
	
	if (slave_mem_addr_length == 1)
    43d4:	61 30       	cpi	r22, 0x01	; 1
    43d6:	c9 f0       	breq	.+50     	; 0x440a <pne_APP_TwiReceive+0x80>
	{
		packet_received.addr[0] = slave_mem_addr[0];
	}
	else if (slave_mem_addr_length == 2)
    43d8:	62 30       	cpi	r22, 0x02	; 2
    43da:	29 f4       	brne	.+10     	; 0x43e6 <pne_APP_TwiReceive+0x5c>
	{
		packet_received.addr[0] = slave_mem_addr[1];
    43dc:	11 96       	adiw	r26, 0x01	; 1
    43de:	8c 91       	ld	r24, X
    43e0:	8a 83       	std	Y+2, r24	; 0x02
		packet_received.addr[1] = slave_mem_addr[0];
    43e2:	3b 83       	std	Y+3, r19	; 0x03
    43e4:	12 c0       	rjmp	.+36     	; 0x440a <pne_APP_TwiReceive+0x80>
	}
	else if (slave_mem_addr_length == 3)
    43e6:	63 30       	cpi	r22, 0x03	; 3
    43e8:	81 f4       	brne	.+32     	; 0x440a <pne_APP_TwiReceive+0x80>
	{
		packet_received.addr[0] = slave_mem_addr[0];
		packet_received.addr[1] = slave_mem_addr[1];
    43ea:	fc 01       	movw	r30, r24
    43ec:	21 81       	ldd	r18, Z+1	; 0x01
    43ee:	2b 83       	std	Y+3, r18	; 0x03
		packet_received.addr[2] = slave_mem_addr[2];
    43f0:	82 81       	ldd	r24, Z+2	; 0x02
    43f2:	8c 83       	std	Y+4, r24	; 0x04
    43f4:	0a c0       	rjmp	.+20     	; 0x440a <pne_APP_TwiReceive+0x80>
		
	}
	
	while(twi_master_read(TWI_EXAMPLE,&packet_received) != TWI_SUCCESS)
	{
		pne_delayms(1);
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	32 df       	rcall	.-412    	; 0x4260 <pne_delayms>
    43fc:	11 50       	subi	r17, 0x01	; 1
		count++;
		if (count == 10)
    43fe:	31 f4       	brne	.+12     	; 0x440c <pne_APP_TwiReceive+0x82>
		{
			count = 0;
			status = APP_PNEWELS_TWI_READ_FAIL;
			fatal_error_to_rf(twi_fatal_error);
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <fatal_error_to_rf>
		pne_delayms(1);
		count++;
		if (count == 10)
		{
			count = 0;
			status = APP_PNEWELS_TWI_READ_FAIL;
    4406:	83 e0       	ldi	r24, 0x03	; 3
			fatal_error_to_rf(twi_fatal_error);
			break;
    4408:	0b c0       	rjmp	.+22     	; 0x4420 <pne_APP_TwiReceive+0x96>
	
	return status;
}

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
    440a:	1a e0       	ldi	r17, 0x0A	; 10
	else
	{
		
	}
	
	while(twi_master_read(TWI_EXAMPLE,&packet_received) != TWI_SUCCESS)
    440c:	be 01       	movw	r22, r28
    440e:	6f 5f       	subi	r22, 0xFF	; 255
    4410:	7f 4f       	sbci	r23, 0xFF	; 255
    4412:	88 eb       	ldi	r24, 0xB8	; 184
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_master_read>
    441a:	81 11       	cpse	r24, r1
    441c:	ec cf       	rjmp	.-40     	; 0x43f6 <pne_APP_TwiReceive+0x6c>
}

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
    441e:	82 e0       	ldi	r24, 0x02	; 2
			break;
		}
	}
	
	return status;
}
    4420:	2a 96       	adiw	r28, 0x0a	; 10
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	f8 94       	cli
    4426:	de bf       	out	0x3e, r29	; 62
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	cd bf       	out	0x3d, r28	; 61
    442c:	df 91       	pop	r29
    442e:	cf 91       	pop	r28
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	ff 90       	pop	r15
    4436:	ef 90       	pop	r14
    4438:	08 95       	ret

0000443a <PNEWELSE2promWrite>:
	

}

void PNEWELSE2promWrite(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2, uint8_t memory_data)
{
    443a:	ff 92       	push	r15
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
    4440:	cf 93       	push	r28
    4442:	df 93       	push	r29
    4444:	00 d0       	rcall	.+0      	; 0x4446 <PNEWELSE2promWrite+0xc>
    4446:	cd b7       	in	r28, 0x3d	; 61
    4448:	de b7       	in	r29, 0x3e	; 62
    444a:	18 2f       	mov	r17, r24
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
    444c:	65 34       	cpi	r22, 0x45	; 69
    444e:	19 f0       	breq	.+6      	; 0x4456 <PNEWELSE2promWrite+0x1c>
	{
		e2prom_address_length = 2;
	}
	else
	{
		e2prom_address_length = 1;
    4450:	ff 24       	eor	r15, r15
    4452:	f3 94       	inc	r15
    4454:	03 c0       	rjmp	.+6      	; 0x445c <PNEWELSE2promWrite+0x22>
void PNEWELSE2promWrite(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2, uint8_t memory_data)
{
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
	{
		e2prom_address_length = 2;
    4456:	68 94       	set
    4458:	ff 24       	eor	r15, r15
    445a:	f1 f8       	bld	r15, 1
	else
	{
		e2prom_address_length = 1;
	}
	uint8_t e2prom_write_address = address;
	uint8_t e2prom_address[2] =
    445c:	49 83       	std	Y+1, r20	; 0x01
    445e:	2a 83       	std	Y+2, r18	; 0x02
	{
		memory_loc_1,
		memory_loc_2,
	};
	uint8_t write_data[1] =
    4460:	0b 83       	std	Y+3, r16	; 0x03
	{
		memory_data,
	};
	
	pne_APP_TwiInit(e2prom_write_address);
    4462:	81 2f       	mov	r24, r17
    4464:	11 df       	rcall	.-478    	; 0x4288 <pne_APP_TwiInit>
	
	pne_APP_TwiSend(e2prom_address, e2prom_address_length, e2prom_write_address, write_data, 1);
    4466:	01 e0       	ldi	r16, 0x01	; 1
    4468:	9e 01       	movw	r18, r28
    446a:	2d 5f       	subi	r18, 0xFD	; 253
    446c:	3f 4f       	sbci	r19, 0xFF	; 255
    446e:	41 2f       	mov	r20, r17
    4470:	6f 2d       	mov	r22, r15
    4472:	ce 01       	movw	r24, r28
    4474:	01 96       	adiw	r24, 0x01	; 1
    4476:	32 df       	rcall	.-412    	; 0x42dc <pne_APP_TwiSend>
	pne_delayms(5);
    4478:	85 e0       	ldi	r24, 0x05	; 5
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	f1 de       	rcall	.-542    	; 0x4260 <pne_delayms>
}
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	df 91       	pop	r29
    4486:	cf 91       	pop	r28
    4488:	1f 91       	pop	r17
    448a:	0f 91       	pop	r16
    448c:	ff 90       	pop	r15
    448e:	08 95       	ret

00004490 <PNEWELSE2promRead>:

uint8_t PNEWELSE2promRead(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2)
{
    4490:	ff 92       	push	r15
    4492:	0f 93       	push	r16
    4494:	1f 93       	push	r17
    4496:	cf 93       	push	r28
    4498:	df 93       	push	r29
    449a:	00 d0       	rcall	.+0      	; 0x449c <PNEWELSE2promRead+0xc>
    449c:	1f 92       	push	r1
    449e:	cd b7       	in	r28, 0x3d	; 61
    44a0:	de b7       	in	r29, 0x3e	; 62
    44a2:	18 2f       	mov	r17, r24
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
    44a4:	65 34       	cpi	r22, 0x45	; 69
    44a6:	19 f0       	breq	.+6      	; 0x44ae <PNEWELSE2promRead+0x1e>
	{
		e2prom_address_length = 2;
	}
	else
	{
		e2prom_address_length = 1;
    44a8:	ff 24       	eor	r15, r15
    44aa:	f3 94       	inc	r15
    44ac:	03 c0       	rjmp	.+6      	; 0x44b4 <PNEWELSE2promRead+0x24>
uint8_t PNEWELSE2promRead(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2)
{
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
	{
		e2prom_address_length = 2;
    44ae:	68 94       	set
    44b0:	ff 24       	eor	r15, r15
    44b2:	f1 f8       	bld	r15, 1
	else
	{
		e2prom_address_length = 1;
	}
	uint8_t e2prom_read_address = address;
	uint8_t e2prom_address[2] =
    44b4:	49 83       	std	Y+1, r20	; 0x01
    44b6:	2a 83       	std	Y+2, r18	; 0x02
	{
		memory_loc_1,
		memory_loc_2,
	};
	uint8_t read_data[2] = {0,0};
    44b8:	1b 82       	std	Y+3, r1	; 0x03
    44ba:	1c 82       	std	Y+4, r1	; 0x04
	
	pne_APP_TwiInit(e2prom_read_address);
    44bc:	81 2f       	mov	r24, r17
    44be:	e4 de       	rcall	.-568    	; 0x4288 <pne_APP_TwiInit>
	
	pne_APP_TwiReceive(e2prom_address, e2prom_address_length, e2prom_read_address, read_data, 1);
    44c0:	01 e0       	ldi	r16, 0x01	; 1
    44c2:	9e 01       	movw	r18, r28
    44c4:	2d 5f       	subi	r18, 0xFD	; 253
    44c6:	3f 4f       	sbci	r19, 0xFF	; 255
    44c8:	41 2f       	mov	r20, r17
    44ca:	6f 2d       	mov	r22, r15
    44cc:	ce 01       	movw	r24, r28
    44ce:	01 96       	adiw	r24, 0x01	; 1
    44d0:	5c df       	rcall	.-328    	; 0x438a <pne_APP_TwiReceive>
	
	return read_data[0];
}
    44d2:	8b 81       	ldd	r24, Y+3	; 0x03
    44d4:	0f 90       	pop	r0
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	df 91       	pop	r29
    44de:	cf 91       	pop	r28
    44e0:	1f 91       	pop	r17
    44e2:	0f 91       	pop	r16
    44e4:	ff 90       	pop	r15
    44e6:	08 95       	ret

000044e8 <PNEWELSTemperatureRead>:

uint8_t PNEWELSTemperatureRead(void)
{
    44e8:	0f 93       	push	r16
    44ea:	cf 93       	push	r28
    44ec:	df 93       	push	r29
    44ee:	00 d0       	rcall	.+0      	; 0x44f0 <PNEWELSTemperatureRead+0x8>
    44f0:	1f 92       	push	r1
    44f2:	cd b7       	in	r28, 0x3d	; 61
    44f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t temperature_write_address = 0x90;
	uint8_t temperature_read_address = 0x91;
	uint8_t temperature_register[2] =
    44f6:	19 82       	std	Y+1, r1	; 0x01
    44f8:	1a 82       	std	Y+2, r1	; 0x02
	{
		0x00,
		0x00,
	};
	uint8_t data_received[2] = {0, 0};
    44fa:	1b 82       	std	Y+3, r1	; 0x03
    44fc:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t data = 0;
	
	pne_APP_TwiInit(temperature_write_address);
    44fe:	80 e9       	ldi	r24, 0x90	; 144
    4500:	c3 de       	rcall	.-634    	; 0x4288 <pne_APP_TwiInit>
	
	if (pne_APP_TwiSend(temperature_register, 1, temperature_write_address, 0, 0) == APP_PNEWELS_TWI_WRITE_SUCCESS)
    4502:	00 e0       	ldi	r16, 0x00	; 0
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	40 e9       	ldi	r20, 0x90	; 144
    450a:	61 e0       	ldi	r22, 0x01	; 1
    450c:	ce 01       	movw	r24, r28
    450e:	01 96       	adiw	r24, 0x01	; 1
    4510:	e5 de       	rcall	.-566    	; 0x42dc <pne_APP_TwiSend>
    4512:	81 11       	cpse	r24, r1
    4514:	09 c0       	rjmp	.+18     	; 0x4528 <PNEWELSTemperatureRead+0x40>
	{
		pne_APP_TwiReceive(temperature_register, 1, temperature_read_address, data_received, 2);
    4516:	02 e0       	ldi	r16, 0x02	; 2
    4518:	9e 01       	movw	r18, r28
    451a:	2d 5f       	subi	r18, 0xFD	; 253
    451c:	3f 4f       	sbci	r19, 0xFF	; 255
    451e:	41 e9       	ldi	r20, 0x91	; 145
    4520:	61 e0       	ldi	r22, 0x01	; 1
    4522:	ce 01       	movw	r24, r28
    4524:	01 96       	adiw	r24, 0x01	; 1
    4526:	31 df       	rcall	.-414    	; 0x438a <pne_APP_TwiReceive>
	}
	
	data = (data_received[0]<<1) / 2;
    4528:	8b 81       	ldd	r24, Y+3	; 0x03
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	95 95       	asr	r25
    4532:	87 95       	ror	r24

	return data;
}
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	0f 90       	pop	r0
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	0f 91       	pop	r16
    4542:	08 95       	ret

00004544 <clre2prom>:

void clre2prom()
{
    4544:	0f 93       	push	r16
    4546:	cf 93       	push	r28
    4548:	df 93       	push	r29
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    454a:	c0 e0       	ldi	r28, 0x00	; 0
    454c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0xFF);
    454e:	0f ef       	ldi	r16, 0xFF	; 255
    4550:	2d 2f       	mov	r18, r29
    4552:	4c 2f       	mov	r20, r28
    4554:	65 e4       	ldi	r22, 0x45	; 69
    4556:	8e ea       	ldi	r24, 0xAE	; 174
    4558:	70 df       	rcall	.-288    	; 0x443a <PNEWELSE2promWrite>
		pne_delayms(10);
    455a:	8a e0       	ldi	r24, 0x0A	; 10
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	80 de       	rcall	.-768    	; 0x4260 <pne_delayms>
		wdt_reset();
    4560:	a8 95       	wdr
void clre2prom()
{
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    4562:	21 96       	adiw	r28, 0x01	; 1
    4564:	cc 3f       	cpi	r28, 0xFC	; 252
    4566:	8f e0       	ldi	r24, 0x0F	; 15
    4568:	d8 07       	cpc	r29, r24
    456a:	89 f7       	brne	.-30     	; 0x454e <clre2prom+0xa>
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0xFF);
		pne_delayms(10);
		wdt_reset();
	}
	
	memory_address_incr = 0;
    456c:	10 92 69 23 	sts	0x2369, r1
    4570:	10 92 68 23 	sts	0x2368, r1
}
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	0f 91       	pop	r16
    457a:	08 95       	ret

0000457c <memoryCounter_init>:

void memoryCounter_init()
{
    457c:	cf 93       	push	r28
    457e:	df 93       	push	r29
	uint8_t cache = 0;
	for (uint16_t counter = 0; counter<4092; counter = counter + 11)
    4580:	c0 e0       	ldi	r28, 0x00	; 0
    4582:	d0 e0       	ldi	r29, 0x00	; 0
	{
		cache = readE2prom(counter);
    4584:	ce 01       	movw	r24, r28
    4586:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <readE2prom>
		if(cache == 0xFF)
    458a:	8f 3f       	cpi	r24, 0xFF	; 255
    458c:	29 f4       	brne	.+10     	; 0x4598 <memoryCounter_init+0x1c>
		{
			memory_address_incr = counter;
    458e:	d0 93 69 23 	sts	0x2369, r29
    4592:	c0 93 68 23 	sts	0x2368, r28
			break;
    4596:	05 c0       	rjmp	.+10     	; 0x45a2 <memoryCounter_init+0x26>
}

void memoryCounter_init()
{
	uint8_t cache = 0;
	for (uint16_t counter = 0; counter<4092; counter = counter + 11)
    4598:	2b 96       	adiw	r28, 0x0b	; 11
    459a:	cc 3f       	cpi	r28, 0xFC	; 252
    459c:	8f e0       	ldi	r24, 0x0F	; 15
    459e:	d8 07       	cpc	r29, r24
    45a0:	89 f7       	brne	.-30     	; 0x4584 <memoryCounter_init+0x8>
		{
			memory_address_incr = counter;
			break;
		}
	}
}
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	08 95       	ret

000045a8 <memoryCounter_save>:

void memoryCounter_save(uint16_t log_counter)
{
	writeE2prom(log_counter, 0xFF);
    45a8:	6f ef       	ldi	r22, 0xFF	; 255
    45aa:	0c 94 0b 31 	jmp	0x6216	; 0x6216 <writeE2prom>
    45ae:	08 95       	ret

000045b0 <store>:
	
	return status;
}

void store(store_seq_t seq)
{
    45b0:	2f 92       	push	r2
    45b2:	3f 92       	push	r3
    45b4:	4f 92       	push	r4
    45b6:	5f 92       	push	r5
    45b8:	6f 92       	push	r6
    45ba:	7f 92       	push	r7
    45bc:	8f 92       	push	r8
    45be:	9f 92       	push	r9
    45c0:	af 92       	push	r10
    45c2:	bf 92       	push	r11
    45c4:	cf 92       	push	r12
    45c6:	df 92       	push	r13
    45c8:	ef 92       	push	r14
    45ca:	ff 92       	push	r15
    45cc:	0f 93       	push	r16
    45ce:	1f 93       	push	r17
    45d0:	cf 93       	push	r28
    45d2:	df 93       	push	r29
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	6e 97       	sbiw	r28, 0x1e	; 30
    45da:	0f b6       	in	r0, 0x3f	; 63
    45dc:	f8 94       	cli
    45de:	de bf       	out	0x3e, r29	; 62
    45e0:	0f be       	out	0x3f, r0	; 63
    45e2:	cd bf       	out	0x3d, r28	; 61
	uint8_t time_4_byte = 0;
	uint8_t status_byte1 = 0;
	uint8_t status_byte2 = 0;
	uint8_t status_byte3 = 0;

	if (seq == charge_start)
    45e4:	81 11       	cpse	r24, r1
    45e6:	3f c0       	rjmp	.+126    	; 0x4666 <store+0xb6>
	{
		if (memory_address_incr >= 4092)
    45e8:	80 91 68 23 	lds	r24, 0x2368
    45ec:	90 91 69 23 	lds	r25, 0x2369
    45f0:	8c 3f       	cpi	r24, 0xFC	; 252
    45f2:	9f 40       	sbci	r25, 0x0F	; 15
    45f4:	20 f0       	brcs	.+8      	; 0x45fe <store+0x4e>
		{
			memory_address_incr = 0;
    45f6:	10 92 69 23 	sts	0x2369, r1
    45fa:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    45fe:	40 91 68 23 	lds	r20, 0x2368
    4602:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    4606:	03 e4       	ldi	r16, 0x43	; 67
    4608:	65 e4       	ldi	r22, 0x45	; 69
    460a:	8e ea       	ldi	r24, 0xAE	; 174
    460c:	16 df       	rcall	.-468    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    460e:	80 91 68 23 	lds	r24, 0x2368
    4612:	90 91 69 23 	lds	r25, 0x2369
    4616:	01 96       	adiw	r24, 0x01	; 1
    4618:	90 93 69 23 	sts	0x2369, r25
    461c:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    4620:	8a e0       	ldi	r24, 0x0A	; 10
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	1d de       	rcall	.-966    	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    4626:	80 91 68 23 	lds	r24, 0x2368
    462a:	90 91 69 23 	lds	r25, 0x2369
    462e:	8c 3f       	cpi	r24, 0xFC	; 252
    4630:	9f 40       	sbci	r25, 0x0F	; 15
    4632:	20 f0       	brcs	.+8      	; 0x463c <store+0x8c>
		{
			memory_address_incr = 0;
    4634:	10 92 69 23 	sts	0x2369, r1
    4638:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    463c:	40 91 68 23 	lds	r20, 0x2368
    4640:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    4644:	03 e5       	ldi	r16, 0x53	; 83
    4646:	65 e4       	ldi	r22, 0x45	; 69
    4648:	8e ea       	ldi	r24, 0xAE	; 174
    464a:	f7 de       	rcall	.-530    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    464c:	80 91 68 23 	lds	r24, 0x2368
    4650:	90 91 69 23 	lds	r25, 0x2369
    4654:	01 96       	adiw	r24, 0x01	; 1
    4656:	90 93 69 23 	sts	0x2369, r25
    465a:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    465e:	8a e0       	ldi	r24, 0x0A	; 10
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	fe dd       	rcall	.-1028   	; 0x4260 <pne_delayms>
    4664:	0c c2       	rjmp	.+1048   	; 0x4a7e <store+0x4ce>
	}
	else if (seq == charge_end)
    4666:	81 30       	cpi	r24, 0x01	; 1
    4668:	09 f0       	breq	.+2      	; 0x466c <store+0xbc>
    466a:	3f c0       	rjmp	.+126    	; 0x46ea <store+0x13a>
	{
		if (memory_address_incr >= 4092)
    466c:	80 91 68 23 	lds	r24, 0x2368
    4670:	90 91 69 23 	lds	r25, 0x2369
    4674:	8c 3f       	cpi	r24, 0xFC	; 252
    4676:	9f 40       	sbci	r25, 0x0F	; 15
    4678:	20 f0       	brcs	.+8      	; 0x4682 <store+0xd2>
		{
			memory_address_incr = 0;
    467a:	10 92 69 23 	sts	0x2369, r1
    467e:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4682:	40 91 68 23 	lds	r20, 0x2368
    4686:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    468a:	03 e4       	ldi	r16, 0x43	; 67
    468c:	65 e4       	ldi	r22, 0x45	; 69
    468e:	8e ea       	ldi	r24, 0xAE	; 174
    4690:	d4 de       	rcall	.-600    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    4692:	80 91 68 23 	lds	r24, 0x2368
    4696:	90 91 69 23 	lds	r25, 0x2369
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	90 93 69 23 	sts	0x2369, r25
    46a0:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    46a4:	8a e0       	ldi	r24, 0x0A	; 10
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	db dd       	rcall	.-1098   	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    46aa:	80 91 68 23 	lds	r24, 0x2368
    46ae:	90 91 69 23 	lds	r25, 0x2369
    46b2:	8c 3f       	cpi	r24, 0xFC	; 252
    46b4:	9f 40       	sbci	r25, 0x0F	; 15
    46b6:	20 f0       	brcs	.+8      	; 0x46c0 <store+0x110>
		{
			memory_address_incr = 0;
    46b8:	10 92 69 23 	sts	0x2369, r1
    46bc:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    46c0:	40 91 68 23 	lds	r20, 0x2368
    46c4:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    46c8:	05 e4       	ldi	r16, 0x45	; 69
    46ca:	65 e4       	ldi	r22, 0x45	; 69
    46cc:	8e ea       	ldi	r24, 0xAE	; 174
    46ce:	b5 de       	rcall	.-662    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    46d0:	80 91 68 23 	lds	r24, 0x2368
    46d4:	90 91 69 23 	lds	r25, 0x2369
    46d8:	01 96       	adiw	r24, 0x01	; 1
    46da:	90 93 69 23 	sts	0x2369, r25
    46de:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    46e2:	8a e0       	ldi	r24, 0x0A	; 10
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	bc dd       	rcall	.-1160   	; 0x4260 <pne_delayms>
    46e8:	ca c1       	rjmp	.+916    	; 0x4a7e <store+0x4ce>
	}
	else if (seq == discharge_start)
    46ea:	82 30       	cpi	r24, 0x02	; 2
    46ec:	09 f0       	breq	.+2      	; 0x46f0 <store+0x140>
    46ee:	3f c0       	rjmp	.+126    	; 0x476e <store+0x1be>
	{
		if (memory_address_incr >= 4092)
    46f0:	80 91 68 23 	lds	r24, 0x2368
    46f4:	90 91 69 23 	lds	r25, 0x2369
    46f8:	8c 3f       	cpi	r24, 0xFC	; 252
    46fa:	9f 40       	sbci	r25, 0x0F	; 15
    46fc:	20 f0       	brcs	.+8      	; 0x4706 <store+0x156>
		{
			memory_address_incr = 0;
    46fe:	10 92 69 23 	sts	0x2369, r1
    4702:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4706:	40 91 68 23 	lds	r20, 0x2368
    470a:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    470e:	04 e4       	ldi	r16, 0x44	; 68
    4710:	65 e4       	ldi	r22, 0x45	; 69
    4712:	8e ea       	ldi	r24, 0xAE	; 174
    4714:	92 de       	rcall	.-732    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    4716:	80 91 68 23 	lds	r24, 0x2368
    471a:	90 91 69 23 	lds	r25, 0x2369
    471e:	01 96       	adiw	r24, 0x01	; 1
    4720:	90 93 69 23 	sts	0x2369, r25
    4724:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    4728:	8a e0       	ldi	r24, 0x0A	; 10
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	99 dd       	rcall	.-1230   	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    472e:	80 91 68 23 	lds	r24, 0x2368
    4732:	90 91 69 23 	lds	r25, 0x2369
    4736:	8c 3f       	cpi	r24, 0xFC	; 252
    4738:	9f 40       	sbci	r25, 0x0F	; 15
    473a:	20 f0       	brcs	.+8      	; 0x4744 <store+0x194>
		{
			memory_address_incr = 0;
    473c:	10 92 69 23 	sts	0x2369, r1
    4740:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4744:	40 91 68 23 	lds	r20, 0x2368
    4748:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    474c:	03 e5       	ldi	r16, 0x53	; 83
    474e:	65 e4       	ldi	r22, 0x45	; 69
    4750:	8e ea       	ldi	r24, 0xAE	; 174
    4752:	73 de       	rcall	.-794    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    4754:	80 91 68 23 	lds	r24, 0x2368
    4758:	90 91 69 23 	lds	r25, 0x2369
    475c:	01 96       	adiw	r24, 0x01	; 1
    475e:	90 93 69 23 	sts	0x2369, r25
    4762:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    4766:	8a e0       	ldi	r24, 0x0A	; 10
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	7a dd       	rcall	.-1292   	; 0x4260 <pne_delayms>
    476c:	88 c1       	rjmp	.+784    	; 0x4a7e <store+0x4ce>
	}
	else if (seq == discharge_end)
    476e:	83 30       	cpi	r24, 0x03	; 3
    4770:	09 f0       	breq	.+2      	; 0x4774 <store+0x1c4>
    4772:	3f c0       	rjmp	.+126    	; 0x47f2 <store+0x242>
	{
		if (memory_address_incr >= 4092)
    4774:	80 91 68 23 	lds	r24, 0x2368
    4778:	90 91 69 23 	lds	r25, 0x2369
    477c:	8c 3f       	cpi	r24, 0xFC	; 252
    477e:	9f 40       	sbci	r25, 0x0F	; 15
    4780:	20 f0       	brcs	.+8      	; 0x478a <store+0x1da>
		{
			memory_address_incr = 0;
    4782:	10 92 69 23 	sts	0x2369, r1
    4786:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    478a:	40 91 68 23 	lds	r20, 0x2368
    478e:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    4792:	04 e4       	ldi	r16, 0x44	; 68
    4794:	65 e4       	ldi	r22, 0x45	; 69
    4796:	8e ea       	ldi	r24, 0xAE	; 174
    4798:	50 de       	rcall	.-864    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    479a:	80 91 68 23 	lds	r24, 0x2368
    479e:	90 91 69 23 	lds	r25, 0x2369
    47a2:	01 96       	adiw	r24, 0x01	; 1
    47a4:	90 93 69 23 	sts	0x2369, r25
    47a8:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    47ac:	8a e0       	ldi	r24, 0x0A	; 10
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	57 dd       	rcall	.-1362   	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    47b2:	80 91 68 23 	lds	r24, 0x2368
    47b6:	90 91 69 23 	lds	r25, 0x2369
    47ba:	8c 3f       	cpi	r24, 0xFC	; 252
    47bc:	9f 40       	sbci	r25, 0x0F	; 15
    47be:	20 f0       	brcs	.+8      	; 0x47c8 <store+0x218>
		{
			memory_address_incr = 0;
    47c0:	10 92 69 23 	sts	0x2369, r1
    47c4:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    47c8:	40 91 68 23 	lds	r20, 0x2368
    47cc:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    47d0:	05 e4       	ldi	r16, 0x45	; 69
    47d2:	65 e4       	ldi	r22, 0x45	; 69
    47d4:	8e ea       	ldi	r24, 0xAE	; 174
    47d6:	31 de       	rcall	.-926    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    47d8:	80 91 68 23 	lds	r24, 0x2368
    47dc:	90 91 69 23 	lds	r25, 0x2369
    47e0:	01 96       	adiw	r24, 0x01	; 1
    47e2:	90 93 69 23 	sts	0x2369, r25
    47e6:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    47ea:	8a e0       	ldi	r24, 0x0A	; 10
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	38 dd       	rcall	.-1424   	; 0x4260 <pne_delayms>
    47f0:	46 c1       	rjmp	.+652    	; 0x4a7e <store+0x4ce>
	}
	else if (seq == emergency_start)
    47f2:	84 30       	cpi	r24, 0x04	; 4
    47f4:	09 f0       	breq	.+2      	; 0x47f8 <store+0x248>
    47f6:	3f c0       	rjmp	.+126    	; 0x4876 <store+0x2c6>
	{
		if (memory_address_incr >= 4092)
    47f8:	80 91 68 23 	lds	r24, 0x2368
    47fc:	90 91 69 23 	lds	r25, 0x2369
    4800:	8c 3f       	cpi	r24, 0xFC	; 252
    4802:	9f 40       	sbci	r25, 0x0F	; 15
    4804:	20 f0       	brcs	.+8      	; 0x480e <store+0x25e>
		{
			memory_address_incr = 0;
    4806:	10 92 69 23 	sts	0x2369, r1
    480a:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    480e:	40 91 68 23 	lds	r20, 0x2368
    4812:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    4816:	05 e4       	ldi	r16, 0x45	; 69
    4818:	65 e4       	ldi	r22, 0x45	; 69
    481a:	8e ea       	ldi	r24, 0xAE	; 174
    481c:	0e de       	rcall	.-996    	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    481e:	80 91 68 23 	lds	r24, 0x2368
    4822:	90 91 69 23 	lds	r25, 0x2369
    4826:	01 96       	adiw	r24, 0x01	; 1
    4828:	90 93 69 23 	sts	0x2369, r25
    482c:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    4830:	8a e0       	ldi	r24, 0x0A	; 10
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	15 dd       	rcall	.-1494   	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    4836:	80 91 68 23 	lds	r24, 0x2368
    483a:	90 91 69 23 	lds	r25, 0x2369
    483e:	8c 3f       	cpi	r24, 0xFC	; 252
    4840:	9f 40       	sbci	r25, 0x0F	; 15
    4842:	20 f0       	brcs	.+8      	; 0x484c <store+0x29c>
		{
			memory_address_incr = 0;
    4844:	10 92 69 23 	sts	0x2369, r1
    4848:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    484c:	40 91 68 23 	lds	r20, 0x2368
    4850:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    4854:	03 e5       	ldi	r16, 0x53	; 83
    4856:	65 e4       	ldi	r22, 0x45	; 69
    4858:	8e ea       	ldi	r24, 0xAE	; 174
    485a:	ef dd       	rcall	.-1058   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    485c:	80 91 68 23 	lds	r24, 0x2368
    4860:	90 91 69 23 	lds	r25, 0x2369
    4864:	01 96       	adiw	r24, 0x01	; 1
    4866:	90 93 69 23 	sts	0x2369, r25
    486a:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    486e:	8a e0       	ldi	r24, 0x0A	; 10
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	f6 dc       	rcall	.-1556   	; 0x4260 <pne_delayms>
    4874:	04 c1       	rjmp	.+520    	; 0x4a7e <store+0x4ce>
	}
	else if (seq == emergency_end)
    4876:	85 30       	cpi	r24, 0x05	; 5
    4878:	09 f0       	breq	.+2      	; 0x487c <store+0x2cc>
    487a:	3f c0       	rjmp	.+126    	; 0x48fa <store+0x34a>
	{
		if (memory_address_incr >= 4092)
    487c:	80 91 68 23 	lds	r24, 0x2368
    4880:	90 91 69 23 	lds	r25, 0x2369
    4884:	8c 3f       	cpi	r24, 0xFC	; 252
    4886:	9f 40       	sbci	r25, 0x0F	; 15
    4888:	20 f0       	brcs	.+8      	; 0x4892 <store+0x2e2>
		{
			memory_address_incr = 0;
    488a:	10 92 69 23 	sts	0x2369, r1
    488e:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4892:	40 91 68 23 	lds	r20, 0x2368
    4896:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    489a:	05 e4       	ldi	r16, 0x45	; 69
    489c:	65 e4       	ldi	r22, 0x45	; 69
    489e:	8e ea       	ldi	r24, 0xAE	; 174
    48a0:	cc dd       	rcall	.-1128   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    48a2:	80 91 68 23 	lds	r24, 0x2368
    48a6:	90 91 69 23 	lds	r25, 0x2369
    48aa:	01 96       	adiw	r24, 0x01	; 1
    48ac:	90 93 69 23 	sts	0x2369, r25
    48b0:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    48b4:	8a e0       	ldi	r24, 0x0A	; 10
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	d3 dc       	rcall	.-1626   	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    48ba:	80 91 68 23 	lds	r24, 0x2368
    48be:	90 91 69 23 	lds	r25, 0x2369
    48c2:	8c 3f       	cpi	r24, 0xFC	; 252
    48c4:	9f 40       	sbci	r25, 0x0F	; 15
    48c6:	20 f0       	brcs	.+8      	; 0x48d0 <store+0x320>
		{
			memory_address_incr = 0;
    48c8:	10 92 69 23 	sts	0x2369, r1
    48cc:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    48d0:	40 91 68 23 	lds	r20, 0x2368
    48d4:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    48d8:	05 e4       	ldi	r16, 0x45	; 69
    48da:	65 e4       	ldi	r22, 0x45	; 69
    48dc:	8e ea       	ldi	r24, 0xAE	; 174
    48de:	ad dd       	rcall	.-1190   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    48e0:	80 91 68 23 	lds	r24, 0x2368
    48e4:	90 91 69 23 	lds	r25, 0x2369
    48e8:	01 96       	adiw	r24, 0x01	; 1
    48ea:	90 93 69 23 	sts	0x2369, r25
    48ee:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    48f2:	8a e0       	ldi	r24, 0x0A	; 10
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	b4 dc       	rcall	.-1688   	; 0x4260 <pne_delayms>
    48f8:	c2 c0       	rjmp	.+388    	; 0x4a7e <store+0x4ce>
	}
	else if (seq == battery_charged)
    48fa:	86 30       	cpi	r24, 0x06	; 6
    48fc:	09 f0       	breq	.+2      	; 0x4900 <store+0x350>
    48fe:	3f c0       	rjmp	.+126    	; 0x497e <store+0x3ce>
	{
		if (memory_address_incr >= 4092)
    4900:	80 91 68 23 	lds	r24, 0x2368
    4904:	90 91 69 23 	lds	r25, 0x2369
    4908:	8c 3f       	cpi	r24, 0xFC	; 252
    490a:	9f 40       	sbci	r25, 0x0F	; 15
    490c:	20 f0       	brcs	.+8      	; 0x4916 <store+0x366>
		{
			memory_address_incr = 0;
    490e:	10 92 69 23 	sts	0x2369, r1
    4912:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4916:	40 91 68 23 	lds	r20, 0x2368
    491a:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x42);
    491e:	02 e4       	ldi	r16, 0x42	; 66
    4920:	65 e4       	ldi	r22, 0x45	; 69
    4922:	8e ea       	ldi	r24, 0xAE	; 174
    4924:	8a dd       	rcall	.-1260   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    4926:	80 91 68 23 	lds	r24, 0x2368
    492a:	90 91 69 23 	lds	r25, 0x2369
    492e:	01 96       	adiw	r24, 0x01	; 1
    4930:	90 93 69 23 	sts	0x2369, r25
    4934:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    4938:	8a e0       	ldi	r24, 0x0A	; 10
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	91 dc       	rcall	.-1758   	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    493e:	80 91 68 23 	lds	r24, 0x2368
    4942:	90 91 69 23 	lds	r25, 0x2369
    4946:	8c 3f       	cpi	r24, 0xFC	; 252
    4948:	9f 40       	sbci	r25, 0x0F	; 15
    494a:	20 f0       	brcs	.+8      	; 0x4954 <store+0x3a4>
		{
			memory_address_incr = 0;
    494c:	10 92 69 23 	sts	0x2369, r1
    4950:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4954:	40 91 68 23 	lds	r20, 0x2368
    4958:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    495c:	03 e4       	ldi	r16, 0x43	; 67
    495e:	65 e4       	ldi	r22, 0x45	; 69
    4960:	8e ea       	ldi	r24, 0xAE	; 174
    4962:	6b dd       	rcall	.-1322   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    4964:	80 91 68 23 	lds	r24, 0x2368
    4968:	90 91 69 23 	lds	r25, 0x2369
    496c:	01 96       	adiw	r24, 0x01	; 1
    496e:	90 93 69 23 	sts	0x2369, r25
    4972:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    4976:	8a e0       	ldi	r24, 0x0A	; 10
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	72 dc       	rcall	.-1820   	; 0x4260 <pne_delayms>
    497c:	80 c0       	rjmp	.+256    	; 0x4a7e <store+0x4ce>
	}
	else if (seq == battery_discharged)
    497e:	87 30       	cpi	r24, 0x07	; 7
    4980:	09 f0       	breq	.+2      	; 0x4984 <store+0x3d4>
    4982:	3f c0       	rjmp	.+126    	; 0x4a02 <store+0x452>
	{
		if (memory_address_incr >= 4092)
    4984:	80 91 68 23 	lds	r24, 0x2368
    4988:	90 91 69 23 	lds	r25, 0x2369
    498c:	8c 3f       	cpi	r24, 0xFC	; 252
    498e:	9f 40       	sbci	r25, 0x0F	; 15
    4990:	20 f0       	brcs	.+8      	; 0x499a <store+0x3ea>
		{
			memory_address_incr = 0;
    4992:	10 92 69 23 	sts	0x2369, r1
    4996:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    499a:	40 91 68 23 	lds	r20, 0x2368
    499e:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x42);
    49a2:	02 e4       	ldi	r16, 0x42	; 66
    49a4:	65 e4       	ldi	r22, 0x45	; 69
    49a6:	8e ea       	ldi	r24, 0xAE	; 174
    49a8:	48 dd       	rcall	.-1392   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    49aa:	80 91 68 23 	lds	r24, 0x2368
    49ae:	90 91 69 23 	lds	r25, 0x2369
    49b2:	01 96       	adiw	r24, 0x01	; 1
    49b4:	90 93 69 23 	sts	0x2369, r25
    49b8:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    49bc:	8a e0       	ldi	r24, 0x0A	; 10
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	4f dc       	rcall	.-1890   	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    49c2:	80 91 68 23 	lds	r24, 0x2368
    49c6:	90 91 69 23 	lds	r25, 0x2369
    49ca:	8c 3f       	cpi	r24, 0xFC	; 252
    49cc:	9f 40       	sbci	r25, 0x0F	; 15
    49ce:	20 f0       	brcs	.+8      	; 0x49d8 <store+0x428>
		{
			memory_address_incr = 0;
    49d0:	10 92 69 23 	sts	0x2369, r1
    49d4:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    49d8:	40 91 68 23 	lds	r20, 0x2368
    49dc:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    49e0:	04 e4       	ldi	r16, 0x44	; 68
    49e2:	65 e4       	ldi	r22, 0x45	; 69
    49e4:	8e ea       	ldi	r24, 0xAE	; 174
    49e6:	29 dd       	rcall	.-1454   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    49e8:	80 91 68 23 	lds	r24, 0x2368
    49ec:	90 91 69 23 	lds	r25, 0x2369
    49f0:	01 96       	adiw	r24, 0x01	; 1
    49f2:	90 93 69 23 	sts	0x2369, r25
    49f6:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    49fa:	8a e0       	ldi	r24, 0x0A	; 10
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	30 dc       	rcall	.-1952   	; 0x4260 <pne_delayms>
    4a00:	3e c0       	rjmp	.+124    	; 0x4a7e <store+0x4ce>
	}
	else
	{
		if (memory_address_incr >= 4092)
    4a02:	80 91 68 23 	lds	r24, 0x2368
    4a06:	90 91 69 23 	lds	r25, 0x2369
    4a0a:	8c 3f       	cpi	r24, 0xFC	; 252
    4a0c:	9f 40       	sbci	r25, 0x0F	; 15
    4a0e:	20 f0       	brcs	.+8      	; 0x4a18 <store+0x468>
		{
			memory_address_incr = 0;
    4a10:	10 92 69 23 	sts	0x2369, r1
    4a14:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a18:	40 91 68 23 	lds	r20, 0x2368
    4a1c:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x4E);
    4a20:	0e e4       	ldi	r16, 0x4E	; 78
    4a22:	65 e4       	ldi	r22, 0x45	; 69
    4a24:	8e ea       	ldi	r24, 0xAE	; 174
    4a26:	09 dd       	rcall	.-1518   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    4a28:	80 91 68 23 	lds	r24, 0x2368
    4a2c:	90 91 69 23 	lds	r25, 0x2369
    4a30:	01 96       	adiw	r24, 0x01	; 1
    4a32:	90 93 69 23 	sts	0x2369, r25
    4a36:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    4a3a:	8a e0       	ldi	r24, 0x0A	; 10
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	10 dc       	rcall	.-2016   	; 0x4260 <pne_delayms>
		if (memory_address_incr >= 4092)
    4a40:	80 91 68 23 	lds	r24, 0x2368
    4a44:	90 91 69 23 	lds	r25, 0x2369
    4a48:	8c 3f       	cpi	r24, 0xFC	; 252
    4a4a:	9f 40       	sbci	r25, 0x0F	; 15
    4a4c:	20 f0       	brcs	.+8      	; 0x4a56 <store+0x4a6>
		{
			memory_address_incr = 0;
    4a4e:	10 92 69 23 	sts	0x2369, r1
    4a52:	10 92 68 23 	sts	0x2368, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a56:	40 91 68 23 	lds	r20, 0x2368
    4a5a:	20 91 69 23 	lds	r18, 0x2369
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x4E);
    4a5e:	0e e4       	ldi	r16, 0x4E	; 78
    4a60:	65 e4       	ldi	r22, 0x45	; 69
    4a62:	8e ea       	ldi	r24, 0xAE	; 174
    4a64:	ea dc       	rcall	.-1580   	; 0x443a <PNEWELSE2promWrite>
		memory_address_incr++;
    4a66:	80 91 68 23 	lds	r24, 0x2368
    4a6a:	90 91 69 23 	lds	r25, 0x2369
    4a6e:	01 96       	adiw	r24, 0x01	; 1
    4a70:	90 93 69 23 	sts	0x2369, r25
    4a74:	80 93 68 23 	sts	0x2368, r24
		pne_delayms(10);
    4a78:	8a e0       	ldi	r24, 0x0A	; 10
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	f1 db       	rcall	.-2078   	; 0x4260 <pne_delayms>
	}
	
	current_state_emergency_light = PNEWELS_Buffer.IsOutputEmergencyLED;
    4a7e:	80 91 6b 22 	lds	r24, 0x226B
    4a82:	80 93 67 23 	sts	0x2367, r24
	current_time = get_timestamp();
    4a86:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <get_timestamp>
    4a8a:	6b 01       	movw	r12, r22
    4a8c:	7c 01       	movw	r14, r24
	time_4_byte = ((current_time & 0xFF000000) >> 24);
    4a8e:	4f 2d       	mov	r20, r15
    4a90:	55 27       	eor	r21, r21
    4a92:	66 27       	eor	r22, r22
    4a94:	77 27       	eor	r23, r23
	time_3_byte = ((current_time & 0x00FF0000) >> 16);
    4a96:	4e 2c       	mov	r4, r14
	time_2_byte = ((current_time & 0x0000FF00) >> 8);
    4a98:	8d 2c       	mov	r8, r13
	time_1_byte = (current_time & 0x000000FF);
	status_byte1 = ((PNEWELS_Buffer.BUTTON_WPS & 0x01) | ((PNEWELS_Buffer.BUTTON_MANUAL & 0x01) << 1) | ((PNEWELS_Buffer.IsFactory & 0x01) << 2) | ((PNEWELS_Buffer.STATUS_VCHARGE & 0x01) << 3) | ((PNEWELS_Buffer.TEMP_ALARM & 0x01) << 4) | ((PNEWELS_Buffer.IsBatt & 0x01) << 5) | ((PNEWELS_Buffer.soft_manual & 0x01) << 6) | ((PNEWELS_Buffer.STATUS_AC & 0x01) << 7));
    4a9a:	a0 91 7f 22 	lds	r26, 0x227F
    4a9e:	e0 e8       	ldi	r30, 0x80	; 128
    4aa0:	ae 9f       	mul	r26, r30
    4aa2:	d0 01       	movw	r26, r0
    4aa4:	11 24       	eor	r1, r1
    4aa6:	80 91 64 22 	lds	r24, 0x2264
    4aaa:	81 70       	andi	r24, 0x01	; 1
    4aac:	a8 2b       	or	r26, r24
    4aae:	80 91 63 22 	lds	r24, 0x2263
    4ab2:	81 70       	andi	r24, 0x01	; 1
    4ab4:	89 83       	std	Y+1, r24	; 0x01
    4ab6:	1a 82       	std	Y+2, r1	; 0x02
    4ab8:	89 81       	ldd	r24, Y+1	; 0x01
    4aba:	9a 81       	ldd	r25, Y+2	; 0x02
    4abc:	88 0f       	add	r24, r24
    4abe:	99 1f       	adc	r25, r25
    4ac0:	9a 2f       	mov	r25, r26
    4ac2:	98 2b       	or	r25, r24
    4ac4:	80 91 67 22 	lds	r24, 0x2267
    4ac8:	80 fb       	bst	r24, 0
    4aca:	22 24       	eor	r2, r2
    4acc:	20 f8       	bld	r2, 0
    4ace:	31 2c       	mov	r3, r1
    4ad0:	22 0c       	add	r2, r2
    4ad2:	33 1c       	adc	r3, r3
    4ad4:	22 0c       	add	r2, r2
    4ad6:	33 1c       	adc	r3, r3
    4ad8:	29 2a       	or	r2, r25
    4ada:	a0 e6       	ldi	r26, 0x60	; 96
    4adc:	b2 e2       	ldi	r27, 0x22	; 34
    4ade:	8c 91       	ld	r24, X
    4ae0:	81 70       	andi	r24, 0x01	; 1
    4ae2:	8b 83       	std	Y+3, r24	; 0x03
    4ae4:	1c 82       	std	Y+4, r1	; 0x04
    4ae6:	eb 81       	ldd	r30, Y+3	; 0x03
    4ae8:	fc 81       	ldd	r31, Y+4	; 0x04
    4aea:	ee 0f       	add	r30, r30
    4aec:	ff 1f       	adc	r31, r31
    4aee:	ee 0f       	add	r30, r30
    4af0:	ff 1f       	adc	r31, r31
    4af2:	ee 0f       	add	r30, r30
    4af4:	ff 1f       	adc	r31, r31
    4af6:	82 2d       	mov	r24, r2
    4af8:	8e 2b       	or	r24, r30
    4afa:	90 91 65 22 	lds	r25, 0x2265
    4afe:	91 70       	andi	r25, 0x01	; 1
    4b00:	9d 83       	std	Y+5, r25	; 0x05
    4b02:	1e 82       	std	Y+6, r1	; 0x06
    4b04:	2d 81       	ldd	r18, Y+5	; 0x05
    4b06:	3e 81       	ldd	r19, Y+6	; 0x06
    4b08:	22 95       	swap	r18
    4b0a:	32 95       	swap	r19
    4b0c:	30 7f       	andi	r19, 0xF0	; 240
    4b0e:	32 27       	eor	r19, r18
    4b10:	20 7f       	andi	r18, 0xF0	; 240
    4b12:	32 27       	eor	r19, r18
    4b14:	28 2e       	mov	r2, r24
    4b16:	22 2a       	or	r2, r18
    4b18:	80 91 70 22 	lds	r24, 0x2270
    4b1c:	81 70       	andi	r24, 0x01	; 1
    4b1e:	8f 83       	std	Y+7, r24	; 0x07
    4b20:	18 86       	std	Y+8, r1	; 0x08
    4b22:	8f 81       	ldd	r24, Y+7	; 0x07
    4b24:	98 85       	ldd	r25, Y+8	; 0x08
    4b26:	88 0f       	add	r24, r24
    4b28:	99 1f       	adc	r25, r25
    4b2a:	82 95       	swap	r24
    4b2c:	92 95       	swap	r25
    4b2e:	90 7f       	andi	r25, 0xF0	; 240
    4b30:	98 27       	eor	r25, r24
    4b32:	80 7f       	andi	r24, 0xF0	; 240
    4b34:	98 27       	eor	r25, r24
    4b36:	82 29       	or	r24, r2
    4b38:	90 91 68 22 	lds	r25, 0x2268
    4b3c:	91 70       	andi	r25, 0x01	; 1
    4b3e:	99 87       	std	Y+9, r25	; 0x09
    4b40:	1a 86       	std	Y+10, r1	; 0x0a
    4b42:	29 84       	ldd	r2, Y+9	; 0x09
    4b44:	3a 84       	ldd	r3, Y+10	; 0x0a
    4b46:	00 24       	eor	r0, r0
    4b48:	36 94       	lsr	r3
    4b4a:	27 94       	ror	r2
    4b4c:	07 94       	ror	r0
    4b4e:	36 94       	lsr	r3
    4b50:	27 94       	ror	r2
    4b52:	07 94       	ror	r0
    4b54:	32 2c       	mov	r3, r2
    4b56:	20 2c       	mov	r2, r0
    4b58:	28 2a       	or	r2, r24
	status_byte2 = ((PNEWELS_Buffer.mode & 0x07) | ((PNEWELS_Buffer.IsOutputEmergencyLED & 0x01) << 3) | ((PNEWELS_Buffer.IsOutputDisableCharging & 0x01) << 4) | ((PNEWELS_Buffer.oled0 & 0x01) << 5) | ((PNEWELS_Buffer.oled1 & 0x01) << 6) | ((PNEWELS_Buffer.oled2 & 0x01) << 7));
    4b5a:	a0 91 87 22 	lds	r26, 0x2287
    4b5e:	e0 e8       	ldi	r30, 0x80	; 128
    4b60:	ae 9f       	mul	r26, r30
    4b62:	d0 01       	movw	r26, r0
    4b64:	11 24       	eor	r1, r1
    4b66:	80 91 72 22 	lds	r24, 0x2272
    4b6a:	87 70       	andi	r24, 0x07	; 7
    4b6c:	8a 2b       	or	r24, r26
    4b6e:	90 91 6b 22 	lds	r25, 0x226B
    4b72:	91 70       	andi	r25, 0x01	; 1
    4b74:	9b 87       	std	Y+11, r25	; 0x0b
    4b76:	1c 86       	std	Y+12, r1	; 0x0c
    4b78:	eb 85       	ldd	r30, Y+11	; 0x0b
    4b7a:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b7c:	ee 0f       	add	r30, r30
    4b7e:	ff 1f       	adc	r31, r31
    4b80:	ee 0f       	add	r30, r30
    4b82:	ff 1f       	adc	r31, r31
    4b84:	ee 0f       	add	r30, r30
    4b86:	ff 1f       	adc	r31, r31
    4b88:	8e 2b       	or	r24, r30
    4b8a:	90 91 6e 22 	lds	r25, 0x226E
    4b8e:	91 70       	andi	r25, 0x01	; 1
    4b90:	9d 87       	std	Y+13, r25	; 0x0d
    4b92:	1e 86       	std	Y+14, r1	; 0x0e
    4b94:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b96:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b98:	22 95       	swap	r18
    4b9a:	32 95       	swap	r19
    4b9c:	30 7f       	andi	r19, 0xF0	; 240
    4b9e:	32 27       	eor	r19, r18
    4ba0:	20 7f       	andi	r18, 0xF0	; 240
    4ba2:	32 27       	eor	r19, r18
    4ba4:	28 2b       	or	r18, r24
    4ba6:	80 91 85 22 	lds	r24, 0x2285
    4baa:	81 70       	andi	r24, 0x01	; 1
    4bac:	8f 87       	std	Y+15, r24	; 0x0f
    4bae:	18 8a       	std	Y+16, r1	; 0x10
    4bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bb2:	98 89       	ldd	r25, Y+16	; 0x10
    4bb4:	88 0f       	add	r24, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	82 95       	swap	r24
    4bba:	92 95       	swap	r25
    4bbc:	90 7f       	andi	r25, 0xF0	; 240
    4bbe:	98 27       	eor	r25, r24
    4bc0:	80 7f       	andi	r24, 0xF0	; 240
    4bc2:	98 27       	eor	r25, r24
    4bc4:	82 2b       	or	r24, r18
    4bc6:	90 91 86 22 	lds	r25, 0x2286
    4bca:	91 70       	andi	r25, 0x01	; 1
    4bcc:	99 8b       	std	Y+17, r25	; 0x11
    4bce:	1a 8a       	std	Y+18, r1	; 0x12
    4bd0:	29 89       	ldd	r18, Y+17	; 0x11
    4bd2:	3a 89       	ldd	r19, Y+18	; 0x12
    4bd4:	00 24       	eor	r0, r0
    4bd6:	36 95       	lsr	r19
    4bd8:	27 95       	ror	r18
    4bda:	07 94       	ror	r0
    4bdc:	36 95       	lsr	r19
    4bde:	27 95       	ror	r18
    4be0:	07 94       	ror	r0
    4be2:	32 2f       	mov	r19, r18
    4be4:	20 2d       	mov	r18, r0
    4be6:	18 2f       	mov	r17, r24
    4be8:	12 2b       	or	r17, r18
	status_byte3 = ((PNEWELS_Buffer.led_ch1 & 0x01) | ((PNEWELS_Buffer.led_ch2 & 0x01) << 1) | ((PNEWELS_Buffer.led_drv0 & 0x01) << 2) | ((PNEWELS_Buffer.led_drv1 & 0x01) << 3) | ((PNEWELS_Buffer.led_drv2 & 0x01) << 4) | ((PNEWELS_Buffer.soft_charge & 0x01) << 5) | ((PNEWELS_Buffer.soft_discharge & 0x01) << 6));
    4bea:	80 91 81 22 	lds	r24, 0x2281
    4bee:	81 70       	andi	r24, 0x01	; 1
    4bf0:	8b 8b       	std	Y+19, r24	; 0x13
    4bf2:	1c 8a       	std	Y+20, r1	; 0x14
    4bf4:	eb 89       	ldd	r30, Y+19	; 0x13
    4bf6:	fc 89       	ldd	r31, Y+20	; 0x14
    4bf8:	ee 0f       	add	r30, r30
    4bfa:	ff 1f       	adc	r31, r31
    4bfc:	80 91 82 22 	lds	r24, 0x2282
    4c00:	81 70       	andi	r24, 0x01	; 1
    4c02:	8d 8b       	std	Y+21, r24	; 0x15
    4c04:	1e 8a       	std	Y+22, r1	; 0x16
    4c06:	8d 89       	ldd	r24, Y+21	; 0x15
    4c08:	9e 89       	ldd	r25, Y+22	; 0x16
    4c0a:	88 0f       	add	r24, r24
    4c0c:	99 1f       	adc	r25, r25
    4c0e:	88 0f       	add	r24, r24
    4c10:	99 1f       	adc	r25, r25
    4c12:	8e 2b       	or	r24, r30
    4c14:	e0 91 80 22 	lds	r30, 0x2280
    4c18:	e1 70       	andi	r30, 0x01	; 1
    4c1a:	8e 2b       	or	r24, r30
    4c1c:	90 91 83 22 	lds	r25, 0x2283
    4c20:	91 70       	andi	r25, 0x01	; 1
    4c22:	9f 8b       	std	Y+23, r25	; 0x17
    4c24:	18 8e       	std	Y+24, r1	; 0x18
    4c26:	ef 89       	ldd	r30, Y+23	; 0x17
    4c28:	f8 8d       	ldd	r31, Y+24	; 0x18
    4c2a:	ee 0f       	add	r30, r30
    4c2c:	ff 1f       	adc	r31, r31
    4c2e:	ee 0f       	add	r30, r30
    4c30:	ff 1f       	adc	r31, r31
    4c32:	ee 0f       	add	r30, r30
    4c34:	ff 1f       	adc	r31, r31
    4c36:	8e 2b       	or	r24, r30
    4c38:	90 91 84 22 	lds	r25, 0x2284
    4c3c:	91 70       	andi	r25, 0x01	; 1
    4c3e:	99 8f       	std	Y+25, r25	; 0x19
    4c40:	1a 8e       	std	Y+26, r1	; 0x1a
    4c42:	29 8d       	ldd	r18, Y+25	; 0x19
    4c44:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4c46:	22 95       	swap	r18
    4c48:	32 95       	swap	r19
    4c4a:	30 7f       	andi	r19, 0xF0	; 240
    4c4c:	32 27       	eor	r19, r18
    4c4e:	20 7f       	andi	r18, 0xF0	; 240
    4c50:	32 27       	eor	r19, r18
    4c52:	28 2b       	or	r18, r24
    4c54:	80 91 69 22 	lds	r24, 0x2269
    4c58:	81 70       	andi	r24, 0x01	; 1
    4c5a:	8b 8f       	std	Y+27, r24	; 0x1b
    4c5c:	1c 8e       	std	Y+28, r1	; 0x1c
    4c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c62:	88 0f       	add	r24, r24
    4c64:	99 1f       	adc	r25, r25
    4c66:	82 95       	swap	r24
    4c68:	92 95       	swap	r25
    4c6a:	90 7f       	andi	r25, 0xF0	; 240
    4c6c:	98 27       	eor	r25, r24
    4c6e:	80 7f       	andi	r24, 0xF0	; 240
    4c70:	98 27       	eor	r25, r24
    4c72:	82 2b       	or	r24, r18
    4c74:	90 91 6a 22 	lds	r25, 0x226A
    4c78:	91 70       	andi	r25, 0x01	; 1
    4c7a:	9d 8f       	std	Y+29, r25	; 0x1d
    4c7c:	1e 8e       	std	Y+30, r1	; 0x1e
    4c7e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4c80:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4c82:	00 24       	eor	r0, r0
    4c84:	36 95       	lsr	r19
    4c86:	27 95       	ror	r18
    4c88:	07 94       	ror	r0
    4c8a:	36 95       	lsr	r19
    4c8c:	27 95       	ror	r18
    4c8e:	07 94       	ror	r0
    4c90:	32 2f       	mov	r19, r18
    4c92:	20 2d       	mov	r18, r0
    4c94:	38 2e       	mov	r3, r24
    4c96:	32 2a       	or	r3, r18
		
	if (memory_address_incr >= 4092)
    4c98:	80 91 68 23 	lds	r24, 0x2368
    4c9c:	90 91 69 23 	lds	r25, 0x2369
    4ca0:	8c 3f       	cpi	r24, 0xFC	; 252
    4ca2:	9f 40       	sbci	r25, 0x0F	; 15
    4ca4:	20 f0       	brcs	.+8      	; 0x4cae <store+0x6fe>
	{
		memory_address_incr = 0;
    4ca6:	10 92 69 23 	sts	0x2369, r1
    4caa:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4cae:	80 91 68 23 	lds	r24, 0x2368
    4cb2:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_4_byte);
    4cb6:	04 2f       	mov	r16, r20
    4cb8:	48 2f       	mov	r20, r24
    4cba:	65 e4       	ldi	r22, 0x45	; 69
    4cbc:	8e ea       	ldi	r24, 0xAE	; 174
    4cbe:	bd db       	rcall	.-2182   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4cc0:	80 91 68 23 	lds	r24, 0x2368
    4cc4:	90 91 69 23 	lds	r25, 0x2369
    4cc8:	01 96       	adiw	r24, 0x01	; 1
    4cca:	90 93 69 23 	sts	0x2369, r25
    4cce:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4cd2:	8a e0       	ldi	r24, 0x0A	; 10
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	c4 da       	rcall	.-2680   	; 0x4260 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4cd8:	80 91 68 23 	lds	r24, 0x2368
    4cdc:	90 91 69 23 	lds	r25, 0x2369
    4ce0:	8c 3f       	cpi	r24, 0xFC	; 252
    4ce2:	9f 40       	sbci	r25, 0x0F	; 15
    4ce4:	20 f0       	brcs	.+8      	; 0x4cee <store+0x73e>
	{
		memory_address_incr = 0;
    4ce6:	10 92 69 23 	sts	0x2369, r1
    4cea:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4cee:	40 91 68 23 	lds	r20, 0x2368
    4cf2:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_3_byte);
    4cf6:	04 2d       	mov	r16, r4
    4cf8:	65 e4       	ldi	r22, 0x45	; 69
    4cfa:	8e ea       	ldi	r24, 0xAE	; 174
    4cfc:	9e db       	rcall	.-2244   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4cfe:	80 91 68 23 	lds	r24, 0x2368
    4d02:	90 91 69 23 	lds	r25, 0x2369
    4d06:	01 96       	adiw	r24, 0x01	; 1
    4d08:	90 93 69 23 	sts	0x2369, r25
    4d0c:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4d10:	8a e0       	ldi	r24, 0x0A	; 10
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	a5 da       	rcall	.-2742   	; 0x4260 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4d16:	80 91 68 23 	lds	r24, 0x2368
    4d1a:	90 91 69 23 	lds	r25, 0x2369
    4d1e:	8c 3f       	cpi	r24, 0xFC	; 252
    4d20:	9f 40       	sbci	r25, 0x0F	; 15
    4d22:	20 f0       	brcs	.+8      	; 0x4d2c <store+0x77c>
	{
		memory_address_incr = 0;
    4d24:	10 92 69 23 	sts	0x2369, r1
    4d28:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4d2c:	40 91 68 23 	lds	r20, 0x2368
    4d30:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_2_byte);
    4d34:	08 2d       	mov	r16, r8
    4d36:	65 e4       	ldi	r22, 0x45	; 69
    4d38:	8e ea       	ldi	r24, 0xAE	; 174
    4d3a:	7f db       	rcall	.-2306   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4d3c:	80 91 68 23 	lds	r24, 0x2368
    4d40:	90 91 69 23 	lds	r25, 0x2369
    4d44:	01 96       	adiw	r24, 0x01	; 1
    4d46:	90 93 69 23 	sts	0x2369, r25
    4d4a:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4d4e:	8a e0       	ldi	r24, 0x0A	; 10
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	86 da       	rcall	.-2804   	; 0x4260 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4d54:	80 91 68 23 	lds	r24, 0x2368
    4d58:	90 91 69 23 	lds	r25, 0x2369
    4d5c:	8c 3f       	cpi	r24, 0xFC	; 252
    4d5e:	9f 40       	sbci	r25, 0x0F	; 15
    4d60:	20 f0       	brcs	.+8      	; 0x4d6a <store+0x7ba>
	{
		memory_address_incr = 0;
    4d62:	10 92 69 23 	sts	0x2369, r1
    4d66:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4d6a:	40 91 68 23 	lds	r20, 0x2368
    4d6e:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_1_byte);
    4d72:	0c 2d       	mov	r16, r12
    4d74:	65 e4       	ldi	r22, 0x45	; 69
    4d76:	8e ea       	ldi	r24, 0xAE	; 174
    4d78:	60 db       	rcall	.-2368   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4d7a:	80 91 68 23 	lds	r24, 0x2368
    4d7e:	90 91 69 23 	lds	r25, 0x2369
    4d82:	01 96       	adiw	r24, 0x01	; 1
    4d84:	90 93 69 23 	sts	0x2369, r25
    4d88:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4d8c:	8a e0       	ldi	r24, 0x0A	; 10
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	67 da       	rcall	.-2866   	; 0x4260 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4d92:	80 91 68 23 	lds	r24, 0x2368
    4d96:	90 91 69 23 	lds	r25, 0x2369
    4d9a:	8c 3f       	cpi	r24, 0xFC	; 252
    4d9c:	9f 40       	sbci	r25, 0x0F	; 15
    4d9e:	20 f0       	brcs	.+8      	; 0x4da8 <store+0x7f8>
	{
		memory_address_incr = 0;
    4da0:	10 92 69 23 	sts	0x2369, r1
    4da4:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4da8:	40 91 68 23 	lds	r20, 0x2368
    4dac:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, PNEWELS_Buffer.V_BATT);
    4db0:	00 91 61 22 	lds	r16, 0x2261
    4db4:	65 e4       	ldi	r22, 0x45	; 69
    4db6:	8e ea       	ldi	r24, 0xAE	; 174
    4db8:	40 db       	rcall	.-2432   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4dba:	80 91 68 23 	lds	r24, 0x2368
    4dbe:	90 91 69 23 	lds	r25, 0x2369
    4dc2:	01 96       	adiw	r24, 0x01	; 1
    4dc4:	90 93 69 23 	sts	0x2369, r25
    4dc8:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4dcc:	8a e0       	ldi	r24, 0x0A	; 10
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	47 da       	rcall	.-2930   	; 0x4260 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4dd2:	80 91 68 23 	lds	r24, 0x2368
    4dd6:	90 91 69 23 	lds	r25, 0x2369
    4dda:	8c 3f       	cpi	r24, 0xFC	; 252
    4ddc:	9f 40       	sbci	r25, 0x0F	; 15
    4dde:	20 f0       	brcs	.+8      	; 0x4de8 <store+0x838>
	{
		memory_address_incr = 0;
    4de0:	10 92 69 23 	sts	0x2369, r1
    4de4:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4de8:	40 91 68 23 	lds	r20, 0x2368
    4dec:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, PNEWELS_Buffer.temperature);
    4df0:	00 91 66 22 	lds	r16, 0x2266
    4df4:	65 e4       	ldi	r22, 0x45	; 69
    4df6:	8e ea       	ldi	r24, 0xAE	; 174
    4df8:	20 db       	rcall	.-2496   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4dfa:	80 91 68 23 	lds	r24, 0x2368
    4dfe:	90 91 69 23 	lds	r25, 0x2369
    4e02:	01 96       	adiw	r24, 0x01	; 1
    4e04:	90 93 69 23 	sts	0x2369, r25
    4e08:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4e0c:	8a e0       	ldi	r24, 0x0A	; 10
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	27 da       	rcall	.-2994   	; 0x4260 <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4e12:	80 91 68 23 	lds	r24, 0x2368
    4e16:	90 91 69 23 	lds	r25, 0x2369
    4e1a:	8c 3f       	cpi	r24, 0xFC	; 252
    4e1c:	9f 40       	sbci	r25, 0x0F	; 15
    4e1e:	20 f0       	brcs	.+8      	; 0x4e28 <store+0x878>
	{
		memory_address_incr = 0;
    4e20:	10 92 69 23 	sts	0x2369, r1
    4e24:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4e28:	40 91 68 23 	lds	r20, 0x2368
    4e2c:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte1);
    4e30:	02 2d       	mov	r16, r2
    4e32:	65 e4       	ldi	r22, 0x45	; 69
    4e34:	8e ea       	ldi	r24, 0xAE	; 174
    4e36:	01 db       	rcall	.-2558   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4e38:	80 91 68 23 	lds	r24, 0x2368
    4e3c:	90 91 69 23 	lds	r25, 0x2369
    4e40:	01 96       	adiw	r24, 0x01	; 1
    4e42:	90 93 69 23 	sts	0x2369, r25
    4e46:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4e4a:	8a e0       	ldi	r24, 0x0A	; 10
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	08 da       	rcall	.-3056   	; 0x4260 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4e50:	80 91 68 23 	lds	r24, 0x2368
    4e54:	90 91 69 23 	lds	r25, 0x2369
    4e58:	8c 3f       	cpi	r24, 0xFC	; 252
    4e5a:	9f 40       	sbci	r25, 0x0F	; 15
    4e5c:	20 f0       	brcs	.+8      	; 0x4e66 <store+0x8b6>
	{
		memory_address_incr = 0;
    4e5e:	10 92 69 23 	sts	0x2369, r1
    4e62:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4e66:	40 91 68 23 	lds	r20, 0x2368
    4e6a:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte2);
    4e6e:	01 2f       	mov	r16, r17
    4e70:	65 e4       	ldi	r22, 0x45	; 69
    4e72:	8e ea       	ldi	r24, 0xAE	; 174
    4e74:	e2 da       	rcall	.-2620   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4e76:	80 91 68 23 	lds	r24, 0x2368
    4e7a:	90 91 69 23 	lds	r25, 0x2369
    4e7e:	01 96       	adiw	r24, 0x01	; 1
    4e80:	90 93 69 23 	sts	0x2369, r25
    4e84:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4e88:	8a e0       	ldi	r24, 0x0A	; 10
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	e9 d9       	rcall	.-3118   	; 0x4260 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4e8e:	80 91 68 23 	lds	r24, 0x2368
    4e92:	90 91 69 23 	lds	r25, 0x2369
    4e96:	8c 3f       	cpi	r24, 0xFC	; 252
    4e98:	9f 40       	sbci	r25, 0x0F	; 15
    4e9a:	20 f0       	brcs	.+8      	; 0x4ea4 <store+0x8f4>
	{
		memory_address_incr = 0;
    4e9c:	10 92 69 23 	sts	0x2369, r1
    4ea0:	10 92 68 23 	sts	0x2368, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4ea4:	40 91 68 23 	lds	r20, 0x2368
    4ea8:	20 91 69 23 	lds	r18, 0x2369
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte3);
    4eac:	03 2d       	mov	r16, r3
    4eae:	65 e4       	ldi	r22, 0x45	; 69
    4eb0:	8e ea       	ldi	r24, 0xAE	; 174
    4eb2:	c3 da       	rcall	.-2682   	; 0x443a <PNEWELSE2promWrite>
	memory_address_incr++;
    4eb4:	80 91 68 23 	lds	r24, 0x2368
    4eb8:	90 91 69 23 	lds	r25, 0x2369
    4ebc:	01 96       	adiw	r24, 0x01	; 1
    4ebe:	90 93 69 23 	sts	0x2369, r25
    4ec2:	80 93 68 23 	sts	0x2368, r24
	pne_delayms(10);
    4ec6:	8a e0       	ldi	r24, 0x0A	; 10
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	ca d9       	rcall	.-3180   	; 0x4260 <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4ecc:	80 91 68 23 	lds	r24, 0x2368
    4ed0:	90 91 69 23 	lds	r25, 0x2369
    4ed4:	8c 3f       	cpi	r24, 0xFC	; 252
    4ed6:	9f 40       	sbci	r25, 0x0F	; 15
    4ed8:	20 f0       	brcs	.+8      	; 0x4ee2 <store+0x932>
	{
		memory_address_incr = 0;
    4eda:	10 92 69 23 	sts	0x2369, r1
    4ede:	10 92 68 23 	sts	0x2368, r1
	}
	memoryCounter_save(memory_address_incr);
    4ee2:	80 91 68 23 	lds	r24, 0x2368
    4ee6:	90 91 69 23 	lds	r25, 0x2369
    4eea:	5e db       	rcall	.-2372   	; 0x45a8 <memoryCounter_save>
	pne_delayms(10);
    4eec:	8a e0       	ldi	r24, 0x0A	; 10
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	b7 d9       	rcall	.-3218   	; 0x4260 <pne_delayms>
	

}
    4ef2:	6e 96       	adiw	r28, 0x1e	; 30
    4ef4:	0f b6       	in	r0, 0x3f	; 63
    4ef6:	f8 94       	cli
    4ef8:	de bf       	out	0x3e, r29	; 62
    4efa:	0f be       	out	0x3f, r0	; 63
    4efc:	cd bf       	out	0x3d, r28	; 61
    4efe:	df 91       	pop	r29
    4f00:	cf 91       	pop	r28
    4f02:	1f 91       	pop	r17
    4f04:	0f 91       	pop	r16
    4f06:	ff 90       	pop	r15
    4f08:	ef 90       	pop	r14
    4f0a:	df 90       	pop	r13
    4f0c:	cf 90       	pop	r12
    4f0e:	bf 90       	pop	r11
    4f10:	af 90       	pop	r10
    4f12:	9f 90       	pop	r9
    4f14:	8f 90       	pop	r8
    4f16:	7f 90       	pop	r7
    4f18:	6f 90       	pop	r6
    4f1a:	5f 90       	pop	r5
    4f1c:	4f 90       	pop	r4
    4f1e:	3f 90       	pop	r3
    4f20:	2f 90       	pop	r2
    4f22:	08 95       	ret

00004f24 <send_usart_char>:
	while (tx_buf[i] != 0x00)
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
		i++;
	}
}
    4f24:	0f 93       	push	r16
    4f26:	1f 93       	push	r17
    4f28:	cf 93       	push	r28
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	60 81       	ld	r22, Z
    4f2e:	66 23       	and	r22, r22
    4f30:	69 f0       	breq	.+26     	; 0x4f4c <send_usart_char+0x28>
    4f32:	8c 01       	movw	r16, r24
    4f34:	c0 e0       	ldi	r28, 0x00	; 0
    4f36:	88 ec       	ldi	r24, 0xC8	; 200
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	0e 94 f6 05 	call	0xbec	; 0xbec <usart_putchar>
    4f3e:	cf 5f       	subi	r28, 0xFF	; 255
    4f40:	f8 01       	movw	r30, r16
    4f42:	ec 0f       	add	r30, r28
    4f44:	f1 1d       	adc	r31, r1
    4f46:	60 81       	ld	r22, Z
    4f48:	61 11       	cpse	r22, r1
    4f4a:	f5 cf       	rjmp	.-22     	; 0x4f36 <send_usart_char+0x12>
    4f4c:	cf 91       	pop	r28
    4f4e:	1f 91       	pop	r17
    4f50:	0f 91       	pop	r16
    4f52:	08 95       	ret

00004f54 <pnewels_get_usart>:
    4f54:	90 91 34 23 	lds	r25, 0x2334
    4f58:	99 23       	and	r25, r25
    4f5a:	19 f0       	breq	.+6      	; 0x4f62 <pnewels_get_usart+0xe>
    4f5c:	91 30       	cpi	r25, 0x01	; 1
    4f5e:	b9 f0       	breq	.+46     	; 0x4f8e <pnewels_get_usart+0x3a>
    4f60:	08 95       	ret
    4f62:	e2 ee       	ldi	r30, 0xE2	; 226
    4f64:	f2 e2       	ldi	r31, 0x22	; 34
    4f66:	2f ee       	ldi	r18, 0xEF	; 239
    4f68:	32 e2       	ldi	r19, 0x22	; 34
    4f6a:	90 e2       	ldi	r25, 0x20	; 32
    4f6c:	91 93       	st	Z+, r25
    4f6e:	e2 17       	cp	r30, r18
    4f70:	f3 07       	cpc	r31, r19
    4f72:	e1 f7       	brne	.-8      	; 0x4f6c <pnewels_get_usart+0x18>
    4f74:	8b 35       	cpi	r24, 0x5B	; 91
    4f76:	21 f4       	brne	.+8      	; 0x4f80 <pnewels_get_usart+0x2c>
    4f78:	81 e0       	ldi	r24, 0x01	; 1
    4f7a:	80 93 34 23 	sts	0x2334, r24
    4f7e:	08 95       	ret
    4f80:	8d 35       	cpi	r24, 0x5D	; 93
    4f82:	19 f5       	brne	.+70     	; 0x4fca <pnewels_get_usart+0x76>
    4f84:	10 92 c5 22 	sts	0x22C5, r1
    4f88:	10 92 34 23 	sts	0x2334, r1
    4f8c:	08 95       	ret
    4f8e:	8d 35       	cpi	r24, 0x5D	; 93
    4f90:	41 f4       	brne	.+16     	; 0x4fa2 <pnewels_get_usart+0x4e>
    4f92:	10 92 c5 22 	sts	0x22C5, r1
    4f96:	10 92 34 23 	sts	0x2334, r1
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	80 93 a1 22 	sts	0x22A1, r24
    4fa0:	08 95       	ret
    4fa2:	90 91 c5 22 	lds	r25, 0x22C5
    4fa6:	9d 30       	cpi	r25, 0x0D	; 13
    4fa8:	48 f4       	brcc	.+18     	; 0x4fbc <pnewels_get_usart+0x68>
    4faa:	e9 2f       	mov	r30, r25
    4fac:	f0 e0       	ldi	r31, 0x00	; 0
    4fae:	ee 51       	subi	r30, 0x1E	; 30
    4fb0:	fd 4d       	sbci	r31, 0xDD	; 221
    4fb2:	80 83       	st	Z, r24
    4fb4:	9f 5f       	subi	r25, 0xFF	; 255
    4fb6:	90 93 c5 22 	sts	0x22C5, r25
    4fba:	08 95       	ret
    4fbc:	10 92 c5 22 	sts	0x22C5, r1
    4fc0:	10 92 34 23 	sts	0x2334, r1
    4fc4:	8a ed       	ldi	r24, 0xDA	; 218
    4fc6:	92 e0       	ldi	r25, 0x02	; 2
    4fc8:	ad cf       	rjmp	.-166    	; 0x4f24 <send_usart_char>
    4fca:	08 95       	ret

00004fcc <int_to_ascii>:


//---------- side function for factory mode ----------//
void int_to_ascii(uint8_t number)
{
    4fcc:	cf 93       	push	r28
    4fce:	c8 2f       	mov	r28, r24
	uint8_t display;
	
	display = ((number>>4) & 0x0F);
    4fd0:	68 2f       	mov	r22, r24
    4fd2:	62 95       	swap	r22
    4fd4:	6f 70       	andi	r22, 0x0F	; 15
	if (display > 9)
    4fd6:	6a 30       	cpi	r22, 0x0A	; 10
    4fd8:	10 f0       	brcs	.+4      	; 0x4fde <int_to_ascii+0x12>
	{
		display = display + 0x37;
    4fda:	69 5c       	subi	r22, 0xC9	; 201
    4fdc:	01 c0       	rjmp	.+2      	; 0x4fe0 <int_to_ascii+0x14>
	}
	else
	{
		display = display + 0x30;
    4fde:	60 5d       	subi	r22, 0xD0	; 208
	}
	usart_putchar(USART_SERIAL_EXAMPLE, display);
    4fe0:	88 ec       	ldi	r24, 0xC8	; 200
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	0e 94 f6 05 	call	0xbec	; 0xbec <usart_putchar>
	
	display = ((number) & 0x0F);
    4fe8:	cf 70       	andi	r28, 0x0F	; 15
	if (display > 9)
    4fea:	ca 30       	cpi	r28, 0x0A	; 10
    4fec:	18 f0       	brcs	.+6      	; 0x4ff4 <int_to_ascii+0x28>
	{
		display = display + 0x37;
    4fee:	67 e3       	ldi	r22, 0x37	; 55
    4ff0:	6c 0f       	add	r22, r28
    4ff2:	02 c0       	rjmp	.+4      	; 0x4ff8 <int_to_ascii+0x2c>
	}
	else
	{
		display = display + 0x30;
    4ff4:	60 e3       	ldi	r22, 0x30	; 48
    4ff6:	6c 0f       	add	r22, r28
	}
	usart_putchar(USART_SERIAL_EXAMPLE, display);
    4ff8:	88 ec       	ldi	r24, 0xC8	; 200
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	0e 94 f6 05 	call	0xbec	; 0xbec <usart_putchar>
}
    5000:	cf 91       	pop	r28
    5002:	08 95       	ret

00005004 <optionSelect>:
}

uint8_t optionSelect()
{
	/*char real_command[3] = "123";*/
	flag = 0;
    5004:	10 92 a1 22 	sts	0x22A1, r1
	
	switch(commamd[0])
    5008:	e0 91 e2 22 	lds	r30, 0x22E2
    500c:	8e 2f       	mov	r24, r30
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	fc 01       	movw	r30, r24
    5012:	f1 97       	sbiw	r30, 0x31	; 49
    5014:	e9 30       	cpi	r30, 0x09	; 9
    5016:	f1 05       	cpc	r31, r1
    5018:	b0 f4       	brcc	.+44     	; 0x5046 <optionSelect+0x42>
    501a:	88 27       	eor	r24, r24
    501c:	ed 59       	subi	r30, 0x9D	; 157
    501e:	fe 4f       	sbci	r31, 0xFE	; 254
    5020:	8f 4f       	sbci	r24, 0xFF	; 255
    5022:	0c 94 71 4d 	jmp	0x9ae2	; 0x9ae2 <__tablejump2__>
		case '1':
			return 1;
		break;
		
		case '2':
			return 2;
    5026:	82 e0       	ldi	r24, 0x02	; 2
    5028:	08 95       	ret
		break;
		
		case '3':
			return 3;
    502a:	83 e0       	ldi	r24, 0x03	; 3
    502c:	08 95       	ret
		break;
		
		case '4':
			return 4;
    502e:	84 e0       	ldi	r24, 0x04	; 4
    5030:	08 95       	ret
		break;
		
		case '5':
			return 5;
    5032:	85 e0       	ldi	r24, 0x05	; 5
    5034:	08 95       	ret
		break;
		
		case '6':
			return 6;
    5036:	86 e0       	ldi	r24, 0x06	; 6
    5038:	08 95       	ret
		break;
		
		case '7':
			return 7;
    503a:	87 e0       	ldi	r24, 0x07	; 7
    503c:	08 95       	ret
		break;
		
		case '8':
			return 8;
    503e:	88 e0       	ldi	r24, 0x08	; 8
    5040:	08 95       	ret
		break;
		
		case '9':
			return 9;
    5042:	89 e0       	ldi	r24, 0x09	; 9
    5044:	08 95       	ret
		break;
		
		default:
			send_usart_char("Invalid command\r\n");
    5046:	8a ef       	ldi	r24, 0xFA	; 250
    5048:	92 e0       	ldi	r25, 0x02	; 2
    504a:	6c df       	rcall	.-296    	; 0x4f24 <send_usart_char>
		break;
			
	}
		return idle;
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
			return 1;
    5050:	81 e0       	ldi	r24, 0x01	; 1
			send_usart_char("Invalid command\r\n");
		break;
			
	}
		return idle;
}
    5052:	08 95       	ret

00005054 <configSelect>:
}

uint8_t configSelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    5054:	10 92 a1 22 	sts	0x22A1, r1
	
	switch(commamd[0])
    5058:	80 91 e2 22 	lds	r24, 0x22E2
    505c:	81 33       	cpi	r24, 0x31	; 49
    505e:	a1 f0       	breq	.+40     	; 0x5088 <configSelect+0x34>
    5060:	18 f4       	brcc	.+6      	; 0x5068 <configSelect+0x14>
    5062:	80 33       	cpi	r24, 0x30	; 48
    5064:	51 f0       	breq	.+20     	; 0x507a <configSelect+0x26>
    5066:	0b c0       	rjmp	.+22     	; 0x507e <configSelect+0x2a>
    5068:	82 33       	cpi	r24, 0x32	; 50
    506a:	19 f0       	breq	.+6      	; 0x5072 <configSelect+0x1e>
    506c:	83 33       	cpi	r24, 0x33	; 51
    506e:	19 f0       	breq	.+6      	; 0x5076 <configSelect+0x22>
    5070:	06 c0       	rjmp	.+12     	; 0x507e <configSelect+0x2a>
		case '1':
			return config_DeviceADDR;
		break;
		
		case '2':
			return config_DeviceCH;
    5072:	82 e0       	ldi	r24, 0x02	; 2
    5074:	08 95       	ret
		break;
		
		case '3':
			return config_DevicePAN;
    5076:	83 e0       	ldi	r24, 0x03	; 3
    5078:	08 95       	ret
		break;
		
		case '0':
			return config_exit;
    507a:	84 e0       	ldi	r24, 0x04	; 4
    507c:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    507e:	8a ef       	ldi	r24, 0xFA	; 250
    5080:	92 e0       	ldi	r25, 0x02	; 2
    5082:	50 df       	rcall	.-352    	; 0x4f24 <send_usart_char>
			return config_idle;
    5084:	85 e0       	ldi	r24, 0x05	; 5
    5086:	08 95       	ret
// 		case '3':
// 			return config_NodeID;
// 		break;
		
		case '1':
			return config_DeviceADDR;
    5088:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		
			
	}
}
    508a:	08 95       	ret

0000508c <send_usart_const_char>:
		}
	}
}

void send_usart_const_char(const char *tx_buf)
{
    508c:	0f 93       	push	r16
    508e:	1f 93       	push	r17
    5090:	cf 93       	push	r28
	uint8_t i =0;
	
	while (tx_buf[i] != 0x00)
    5092:	fc 01       	movw	r30, r24
    5094:	60 81       	ld	r22, Z
    5096:	66 23       	and	r22, r22
    5098:	69 f0       	breq	.+26     	; 0x50b4 <send_usart_const_char+0x28>
    509a:	8c 01       	movw	r16, r24
    509c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
    509e:	88 ec       	ldi	r24, 0xC8	; 200
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	0e 94 f6 05 	call	0xbec	; 0xbec <usart_putchar>
		i++;
    50a6:	cf 5f       	subi	r28, 0xFF	; 255

void send_usart_const_char(const char *tx_buf)
{
	uint8_t i =0;
	
	while (tx_buf[i] != 0x00)
    50a8:	f8 01       	movw	r30, r16
    50aa:	ec 0f       	add	r30, r28
    50ac:	f1 1d       	adc	r31, r1
    50ae:	60 81       	ld	r22, Z
    50b0:	61 11       	cpse	r22, r1
    50b2:	f5 cf       	rjmp	.-22     	; 0x509e <send_usart_const_char+0x12>
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
		i++;
	}
}
    50b4:	cf 91       	pop	r28
    50b6:	1f 91       	pop	r17
    50b8:	0f 91       	pop	r16
    50ba:	08 95       	ret

000050bc <send_operation_info>:

void send_operation_info(const char *name, uint8_t data)
{
    50bc:	cf 93       	push	r28
    50be:	c6 2f       	mov	r28, r22
	send_usart_const_char(name);
    50c0:	e5 df       	rcall	.-54     	; 0x508c <send_usart_const_char>
	send_usart_char(" changed to ");
    50c2:	8c e0       	ldi	r24, 0x0C	; 12
    50c4:	93 e0       	ldi	r25, 0x03	; 3
    50c6:	2e df       	rcall	.-420    	; 0x4f24 <send_usart_char>
	int_to_ascii(data);
    50c8:	8c 2f       	mov	r24, r28
    50ca:	80 df       	rcall	.-256    	; 0x4fcc <int_to_ascii>
	/*send_usart_char("\r\n");*/
}
    50cc:	cf 91       	pop	r28
    50ce:	08 95       	ret

000050d0 <config_read_input>:
			
	}
}

void config_read_input(uint16_t address, char data_length, const char *name)
{
    50d0:	9f 92       	push	r9
    50d2:	af 92       	push	r10
    50d4:	bf 92       	push	r11
    50d6:	cf 92       	push	r12
    50d8:	df 92       	push	r13
    50da:	ef 92       	push	r14
    50dc:	ff 92       	push	r15
    50de:	0f 93       	push	r16
    50e0:	1f 93       	push	r17
    50e2:	cf 93       	push	r28
    50e4:	df 93       	push	r29
    50e6:	f6 2e       	mov	r15, r22
    50e8:	6a 01       	movw	r12, r20
	uint8_t data_short = 0;
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
    50ea:	21 e0       	ldi	r18, 0x01	; 1
    50ec:	20 93 07 23 	sts	0x2307, r18
	flag = 0;
    50f0:	10 92 a1 22 	sts	0x22A1, r1
	uint8_t memory_address_low = (address & 0xFF);
    50f4:	18 2f       	mov	r17, r24
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
    50f6:	b9 2e       	mov	r11, r25
		{
			switch(data_length)
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    50f8:	c2 ee       	ldi	r28, 0xE2	; 226
    50fa:	d2 e2       	ldi	r29, 0x22	; 34
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
    50fc:	aa 24       	eor	r10, r10
    50fe:	a3 94       	inc	r10
    5100:	a8 0e       	add	r10, r24
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
	flag = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	while(config_waiting_input == 1)
    5102:	5b c0       	rjmp	.+182    	; 0x51ba <config_read_input+0xea>
	{
		if(flag == 1)
    5104:	30 91 a1 22 	lds	r19, 0x22A1
    5108:	31 30       	cpi	r19, 0x01	; 1
    510a:	e1 f7       	brne	.-8      	; 0x5104 <config_read_input+0x34>
		{
			switch(data_length)
    510c:	81 e3       	ldi	r24, 0x31	; 49
    510e:	f8 16       	cp	r15, r24
    5110:	21 f0       	breq	.+8      	; 0x511a <config_read_input+0x4a>
    5112:	82 e3       	ldi	r24, 0x32	; 50
    5114:	f8 16       	cp	r15, r24
    5116:	f1 f0       	breq	.+60     	; 0x5154 <config_read_input+0x84>
    5118:	4d c0       	rjmp	.+154    	; 0x51b4 <config_read_input+0xe4>
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    511a:	88 81       	ld	r24, Y
    511c:	0e 94 09 37 	call	0x6e12	; 0x6e12 <ascii_to_hex>
    5120:	e8 2e       	mov	r14, r24
					cache[1] = ascii_to_hex(commamd[1]);
    5122:	89 81       	ldd	r24, Y+1	; 0x01
    5124:	0e 94 09 37 	call	0x6e12	; 0x6e12 <ascii_to_hex>
		{
			switch(data_length)
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    5128:	ee 0c       	add	r14, r14
    512a:	ee 0c       	add	r14, r14
    512c:	ee 0c       	add	r14, r14
    512e:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
    5130:	e8 2a       	or	r14, r24
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, data_short);
    5132:	0e 2d       	mov	r16, r14
    5134:	2b 2d       	mov	r18, r11
    5136:	41 2f       	mov	r20, r17
    5138:	65 e4       	ldi	r22, 0x45	; 69
    513a:	8e ea       	ldi	r24, 0xAE	; 174
    513c:	7e d9       	rcall	.-3332   	; 0x443a <PNEWELSE2promWrite>
					send_operation_info(name, data_short);
    513e:	6e 2d       	mov	r22, r14
    5140:	c6 01       	movw	r24, r12
    5142:	bc df       	rcall	.-136    	; 0x50bc <send_operation_info>
					pne_delayms(10);
    5144:	8a e0       	ldi	r24, 0x0A	; 10
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	8b d8       	rcall	.-3818   	; 0x4260 <pne_delayms>

					config_waiting_input = 0;
    514a:	10 92 07 23 	sts	0x2307, r1
					flag = 0;
    514e:	10 92 a1 22 	sts	0x22A1, r1
				}
				break;
    5152:	33 c0       	rjmp	.+102    	; 0x51ba <config_read_input+0xea>
				
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    5154:	88 81       	ld	r24, Y
    5156:	0e 94 09 37 	call	0x6e12	; 0x6e12 <ascii_to_hex>
    515a:	e8 2e       	mov	r14, r24
					cache[1] = ascii_to_hex(commamd[1]);
    515c:	89 81       	ldd	r24, Y+1	; 0x01
    515e:	0e 94 09 37 	call	0x6e12	; 0x6e12 <ascii_to_hex>
				}
				break;
				
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    5162:	ee 0c       	add	r14, r14
    5164:	ee 0c       	add	r14, r14
    5166:	ee 0c       	add	r14, r14
    5168:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
    516a:	e8 2a       	or	r14, r24
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
    516c:	0e 2d       	mov	r16, r14
    516e:	2b 2d       	mov	r18, r11
    5170:	4a 2d       	mov	r20, r10
    5172:	65 e4       	ldi	r22, 0x45	; 69
    5174:	8e ea       	ldi	r24, 0xAE	; 174
    5176:	61 d9       	rcall	.-3390   	; 0x443a <PNEWELSE2promWrite>
					cache[0] = ascii_to_hex(commamd[2])<<4;
    5178:	8a 81       	ldd	r24, Y+2	; 0x02
    517a:	0e 94 09 37 	call	0x6e12	; 0x6e12 <ascii_to_hex>
    517e:	98 2e       	mov	r9, r24
					cache[1] = ascii_to_hex(commamd[3]);
    5180:	8b 81       	ldd	r24, Y+3	; 0x03
    5182:	0e 94 09 37 	call	0x6e12	; 0x6e12 <ascii_to_hex>
    5186:	08 2f       	mov	r16, r24
					send_operation_info(name, data_short);
    5188:	6e 2d       	mov	r22, r14
    518a:	c6 01       	movw	r24, r12
    518c:	97 df       	rcall	.-210    	; 0x50bc <send_operation_info>
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
					cache[0] = ascii_to_hex(commamd[2])<<4;
    518e:	e9 2c       	mov	r14, r9
    5190:	ee 0c       	add	r14, r14
    5192:	ee 0c       	add	r14, r14
    5194:	ee 0c       	add	r14, r14
    5196:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[3]);
					send_operation_info(name, data_short);
					data_short = cache[0] | cache[1];
    5198:	e0 2a       	or	r14, r16
					PNEWELSE2promWrite(0xAF, 'E', memory_address_low , memory_address_high, data_short);
    519a:	0e 2d       	mov	r16, r14
    519c:	2b 2d       	mov	r18, r11
    519e:	41 2f       	mov	r20, r17
    51a0:	65 e4       	ldi	r22, 0x45	; 69
    51a2:	8f ea       	ldi	r24, 0xAF	; 175
    51a4:	4a d9       	rcall	.-3436   	; 0x443a <PNEWELSE2promWrite>
					int_to_ascii(data_short);
    51a6:	8e 2d       	mov	r24, r14
    51a8:	11 df       	rcall	.-478    	; 0x4fcc <int_to_ascii>
					config_waiting_input = 0;
    51aa:	10 92 07 23 	sts	0x2307, r1
					flag = 0;
    51ae:	10 92 a1 22 	sts	0x22A1, r1
				}
				break;
    51b2:	03 c0       	rjmp	.+6      	; 0x51ba <config_read_input+0xea>
				
				default:
					send_usart_char("Critical Error! Please contact manufacturer.");
    51b4:	89 e1       	ldi	r24, 0x19	; 25
    51b6:	93 e0       	ldi	r25, 0x03	; 3
    51b8:	b5 de       	rcall	.-662    	; 0x4f24 <send_usart_char>
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
	flag = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	while(config_waiting_input == 1)
    51ba:	30 91 07 23 	lds	r19, 0x2307
    51be:	31 30       	cpi	r19, 0x01	; 1
    51c0:	09 f4       	brne	.+2      	; 0x51c4 <config_read_input+0xf4>
    51c2:	a0 cf       	rjmp	.-192    	; 0x5104 <config_read_input+0x34>
		else
		{
			
		}
	}
}
    51c4:	df 91       	pop	r29
    51c6:	cf 91       	pop	r28
    51c8:	1f 91       	pop	r17
    51ca:	0f 91       	pop	r16
    51cc:	ff 90       	pop	r15
    51ce:	ef 90       	pop	r14
    51d0:	df 90       	pop	r13
    51d2:	cf 90       	pop	r12
    51d4:	bf 90       	pop	r11
    51d6:	af 90       	pop	r10
    51d8:	9f 90       	pop	r9
    51da:	08 95       	ret

000051dc <pneConfiguration>:
	usart_putchar(USART_SERIAL_EXAMPLE, display);
}

void pneConfiguration()
{
	switch(config_state)
    51dc:	80 91 a2 22 	lds	r24, 0x22A2
    51e0:	82 30       	cpi	r24, 0x02	; 2
    51e2:	51 f1       	breq	.+84     	; 0x5238 <pneConfiguration+0x5c>
    51e4:	28 f4       	brcc	.+10     	; 0x51f0 <pneConfiguration+0x14>
    51e6:	88 23       	and	r24, r24
    51e8:	59 f0       	breq	.+22     	; 0x5200 <pneConfiguration+0x24>
    51ea:	81 30       	cpi	r24, 0x01	; 1
    51ec:	c9 f0       	breq	.+50     	; 0x5220 <pneConfiguration+0x44>
    51ee:	41 c0       	rjmp	.+130    	; 0x5272 <pneConfiguration+0x96>
    51f0:	84 30       	cpi	r24, 0x04	; 4
    51f2:	09 f4       	brne	.+2      	; 0x51f6 <pneConfiguration+0x1a>
    51f4:	39 c0       	rjmp	.+114    	; 0x5268 <pneConfiguration+0x8c>
    51f6:	60 f1       	brcs	.+88     	; 0x5250 <pneConfiguration+0x74>
    51f8:	85 30       	cpi	r24, 0x05	; 5
    51fa:	09 f4       	brne	.+2      	; 0x51fe <pneConfiguration+0x22>
    51fc:	3f c0       	rjmp	.+126    	; 0x527c <pneConfiguration+0xa0>
    51fe:	39 c0       	rjmp	.+114    	; 0x5272 <pneConfiguration+0x96>
	{
		case config_startup_message:
		{
			send_usart_char("\r\n\r\nConfiguration mode. Select an option:\r\n\r\n");
    5200:	86 e4       	ldi	r24, 0x46	; 70
    5202:	93 e0       	ldi	r25, 0x03	; 3
    5204:	8f de       	rcall	.-738    	; 0x4f24 <send_usart_char>
/*			send_usart_char("1. Change Group ID\r\n");*/
			send_usart_char("1. Change Device Address\r\n2. Change Device Channel\r\n3. Change Device PAN ID\r\n");
    5206:	84 e7       	ldi	r24, 0x74	; 116
    5208:	93 e0       	ldi	r25, 0x03	; 3
    520a:	8c de       	rcall	.-744    	; 0x4f24 <send_usart_char>
			send_usart_char("0. Exit configuration mode\r\n");
    520c:	8c ed       	ldi	r24, 0xDC	; 220
    520e:	95 e0       	ldi	r25, 0x05	; 5
    5210:	89 de       	rcall	.-750    	; 0x4f24 <send_usart_char>
			configuration_flag = 1;
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	80 93 db 22 	sts	0x22DB, r24
			config_state = config_idle;
    5218:	85 e0       	ldi	r24, 0x05	; 5
    521a:	80 93 a2 22 	sts	0x22A2, r24
		}
		break;
    521e:	08 95       	ret
// 		}
// 		break;
		
		case config_DeviceADDR:
		{
			send_usart_char("Enter new device address: \r\n");
    5220:	82 ec       	ldi	r24, 0xC2	; 194
    5222:	93 e0       	ldi	r25, 0x03	; 3
    5224:	7f de       	rcall	.-770    	; 0x4f24 <send_usart_char>
			config_read_input(DEVICE_ADDRESS_L, '2', deviceADDR_display);
    5226:	48 e3       	ldi	r20, 0x38	; 56
    5228:	58 e0       	ldi	r21, 0x08	; 8
    522a:	62 e3       	ldi	r22, 0x32	; 50
    522c:	8c ef       	ldi	r24, 0xFC	; 252
    522e:	9f e0       	ldi	r25, 0x0F	; 15
    5230:	4f df       	rcall	.-354    	; 0x50d0 <config_read_input>
			config_state = config_startup_message;
    5232:	10 92 a2 22 	sts	0x22A2, r1
		}
		break;
    5236:	08 95       	ret
		
		case config_DeviceCH:
		{
			send_usart_char("Enter new device channel: \r\n");
    5238:	8f ed       	ldi	r24, 0xDF	; 223
    523a:	93 e0       	ldi	r25, 0x03	; 3
    523c:	73 de       	rcall	.-794    	; 0x4f24 <send_usart_char>
			config_read_input(DEVICE_CHANNEL_L, '2', deviceCH_display);
    523e:	49 e2       	ldi	r20, 0x29	; 41
    5240:	58 e0       	ldi	r21, 0x08	; 8
    5242:	62 e3       	ldi	r22, 0x32	; 50
    5244:	8e ef       	ldi	r24, 0xFE	; 254
    5246:	9f e0       	ldi	r25, 0x0F	; 15
    5248:	43 df       	rcall	.-378    	; 0x50d0 <config_read_input>
			config_state = config_startup_message;
    524a:	10 92 a2 22 	sts	0x22A2, r1
		}
		break;
    524e:	08 95       	ret
		
		case config_DevicePAN:
		{
			send_usart_char("Enter new device PAN ID: \r\n");
    5250:	8c ef       	ldi	r24, 0xFC	; 252
    5252:	93 e0       	ldi	r25, 0x03	; 3
    5254:	67 de       	rcall	.-818    	; 0x4f24 <send_usart_char>
			config_read_input(DEVICE_PAN_L, '2', devicePAN_display);
    5256:	4b e1       	ldi	r20, 0x1B	; 27
    5258:	58 e0       	ldi	r21, 0x08	; 8
    525a:	62 e3       	ldi	r22, 0x32	; 50
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	90 e1       	ldi	r25, 0x10	; 16
    5260:	37 df       	rcall	.-402    	; 0x50d0 <config_read_input>
			config_state = config_startup_message;
    5262:	10 92 a2 22 	sts	0x22A2, r1
		}
		break;
    5266:	08 95       	ret
		case config_idle:
		break;
		
		case config_exit:
		{
			configuration_flag = 0;
    5268:	10 92 db 22 	sts	0x22DB, r1
			send_usart_char("Exiting config mode");
    526c:	88 e1       	ldi	r24, 0x18	; 24
    526e:	94 e0       	ldi	r25, 0x04	; 4
    5270:	59 de       	rcall	.-846    	; 0x4f24 <send_usart_char>
			option_select = option_message;
			config_state = config_startup_message;
		}
		default:
			option_select = option_message;
    5272:	89 e0       	ldi	r24, 0x09	; 9
    5274:	80 93 b7 22 	sts	0x22B7, r24
			config_state = config_startup_message;
    5278:	10 92 a2 22 	sts	0x22A2, r1
    527c:	08 95       	ret

0000527e <resetSelect>:


uint8_t resetSelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    527e:	10 92 a1 22 	sts	0x22A1, r1
	
	switch(commamd[0])
    5282:	80 91 e2 22 	lds	r24, 0x22E2
    5286:	82 33       	cpi	r24, 0x32	; 50
    5288:	59 f0       	breq	.+22     	; 0x52a0 <resetSelect+0x22>
    528a:	28 f4       	brcc	.+10     	; 0x5296 <resetSelect+0x18>
    528c:	80 33       	cpi	r24, 0x30	; 48
    528e:	71 f0       	breq	.+28     	; 0x52ac <resetSelect+0x2e>
    5290:	81 33       	cpi	r24, 0x31	; 49
    5292:	99 f0       	breq	.+38     	; 0x52ba <resetSelect+0x3c>
    5294:	0d c0       	rjmp	.+26     	; 0x52b0 <resetSelect+0x32>
    5296:	83 33       	cpi	r24, 0x33	; 51
    5298:	29 f0       	breq	.+10     	; 0x52a4 <resetSelect+0x26>
    529a:	84 33       	cpi	r24, 0x34	; 52
    529c:	29 f0       	breq	.+10     	; 0x52a8 <resetSelect+0x2a>
    529e:	08 c0       	rjmp	.+16     	; 0x52b0 <resetSelect+0x32>
		case '1':
		return reset_all;
		break;
		
		case '2':
		return reset_bit0;
    52a0:	82 e0       	ldi	r24, 0x02	; 2
    52a2:	08 95       	ret
		break;
		
		case '3':
		return reset_bit1;
    52a4:	83 e0       	ldi	r24, 0x03	; 3
    52a6:	08 95       	ret
		break;
		
		case '4':
		return reset_read_status;
    52a8:	84 e0       	ldi	r24, 0x04	; 4
    52aa:	08 95       	ret
		break;
		
		case '0':
		return reset_exit;
    52ac:	86 e0       	ldi	r24, 0x06	; 6
    52ae:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    52b0:	8a ef       	ldi	r24, 0xFA	; 250
    52b2:	92 e0       	ldi	r25, 0x02	; 2
    52b4:	37 de       	rcall	.-914    	; 0x4f24 <send_usart_char>
			return reset_idle;
    52b6:	85 e0       	ldi	r24, 0x05	; 5
    52b8:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
		return reset_all;
    52ba:	81 e0       	ldi	r24, 0x01	; 1
			return reset_idle;
		}
		break;
				
	}
}
    52bc:	08 95       	ret

000052be <testMode>:

void testMode()
{
    52be:	df 92       	push	r13
    52c0:	ef 92       	push	r14
    52c2:	ff 92       	push	r15
    52c4:	0f 93       	push	r16
    52c6:	1f 93       	push	r17
    52c8:	cf 93       	push	r28
    52ca:	df 93       	push	r29
	uint8_t button_status_factory6;
	uint8_t button_status_factory7;
	uint8_t button_status_factory8;
	uint8_t button_status_factory9;
	
	switch(button)
    52cc:	80 91 a3 22 	lds	r24, 0x22A3
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	8a 30       	cpi	r24, 0x0A	; 10
    52d4:	91 05       	cpc	r25, r1
    52d6:	08 f0       	brcs	.+2      	; 0x52da <testMode+0x1c>
    52d8:	ef c5       	rjmp	.+3038   	; 0x5eb8 <testMode+0xbfa>
    52da:	fc 01       	movw	r30, r24
    52dc:	88 27       	eor	r24, r24
    52de:	e4 59       	subi	r30, 0x94	; 148
    52e0:	fe 4f       	sbci	r31, 0xFE	; 254
    52e2:	8f 4f       	sbci	r24, 0xFF	; 255
    52e4:	0c 94 71 4d 	jmp	0x9ae2	; 0x9ae2 <__tablejump2__>
	{
		case button1:
		{
			gpio_clr(STATUS_LED_1);
    52e8:	60 91 a9 22 	lds	r22, 0x22A9
    52ec:	70 91 aa 22 	lds	r23, 0x22AA
    52f0:	80 91 ab 22 	lds	r24, 0x22AB
    52f4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(STATUS_LED_2);
    52f8:	60 91 cb 22 	lds	r22, 0x22CB
    52fc:	70 91 cc 22 	lds	r23, 0x22CC
    5300:	80 91 cd 22 	lds	r24, 0x22CD
    5304:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(CHARGING_DISABLE);
    5308:	60 91 dd 22 	lds	r22, 0x22DD
    530c:	70 91 de 22 	lds	r23, 0x22DE
    5310:	80 91 df 22 	lds	r24, 0x22DF
    5314:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(EMER_LIGHT_EN);
    5318:	60 91 ad 22 	lds	r22, 0x22AD
    531c:	70 91 ae 22 	lds	r23, 0x22AE
    5320:	80 91 af 22 	lds	r24, 0x22AF
    5324:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(OUT_LED_CH0);
    5328:	60 91 8a 22 	lds	r22, 0x228A
    532c:	70 91 8b 22 	lds	r23, 0x228B
    5330:	80 91 8c 22 	lds	r24, 0x228C
    5334:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(OUT_LED_CH1);
    5338:	60 91 5e 23 	lds	r22, 0x235E
    533c:	70 91 5f 23 	lds	r23, 0x235F
    5340:	80 91 60 23 	lds	r24, 0x2360
    5344:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			gpio_clr(OUT_LED_CH2);
    5348:	60 91 64 23 	lds	r22, 0x2364
    534c:	70 91 65 23 	lds	r23, 0x2365
    5350:	80 91 66 23 	lds	r24, 0x2366
    5354:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
			
			send_usart_char("\r\nIO Switch ");
    5358:	8c e2       	ldi	r24, 0x2C	; 44
    535a:	94 e0       	ldi	r25, 0x04	; 4
    535c:	e3 dd       	rcall	.-1082   	; 0x4f24 <send_usart_char>
			send_usart_char("1");
    535e:	80 e5       	ldi	r24, 0x50	; 80
    5360:	97 e0       	ldi	r25, 0x07	; 7
    5362:	e0 dd       	rcall	.-1088   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
    5364:	60 91 58 23 	lds	r22, 0x2358
    5368:	70 91 59 23 	lds	r23, 0x2359
    536c:	80 91 5a 23 	lds	r24, 0x235A
    5370:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5374:	88 23       	and	r24, r24
    5376:	51 f0       	breq	.+20     	; 0x538c <testMode+0xce>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
    5378:	60 91 58 23 	lds	r22, 0x2358
    537c:	70 91 59 23 	lds	r23, 0x2359
    5380:	80 91 5a 23 	lds	r24, 0x235A
    5384:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("1");
			
			button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			
			while(button_status_factory != 1)
    5388:	81 11       	cpse	r24, r1
    538a:	f6 cf       	rjmp	.-20     	; 0x5378 <testMode+0xba>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    538c:	60 91 53 23 	lds	r22, 0x2353
    5390:	70 91 54 23 	lds	r23, 0x2354
    5394:	80 91 55 23 	lds	r24, 0x2355
    5398:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    539c:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    539e:	60 91 a6 22 	lds	r22, 0x22A6
    53a2:	70 91 a7 22 	lds	r23, 0x22A7
    53a6:	80 91 a8 22 	lds	r24, 0x22A8
    53aa:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    53ae:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    53b0:	60 91 04 23 	lds	r22, 0x2304
    53b4:	70 91 05 23 	lds	r23, 0x2305
    53b8:	80 91 06 23 	lds	r24, 0x2306
    53bc:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    53c0:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    53c2:	60 91 5c 22 	lds	r22, 0x225C
    53c6:	70 91 5d 22 	lds	r23, 0x225D
    53ca:	80 91 5e 22 	lds	r24, 0x225E
    53ce:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    53d2:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    53d4:	60 91 b3 22 	lds	r22, 0x22B3
    53d8:	70 91 b4 22 	lds	r23, 0x22B4
    53dc:	80 91 b5 22 	lds	r24, 0x22B5
    53e0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    53e4:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    53e6:	60 91 9a 22 	lds	r22, 0x229A
    53ea:	70 91 9b 22 	lds	r23, 0x229B
    53ee:	80 91 9c 22 	lds	r24, 0x229C
    53f2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    53f6:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    53f8:	60 91 43 23 	lds	r22, 0x2343
    53fc:	70 91 44 23 	lds	r23, 0x2344
    5400:	80 91 45 23 	lds	r24, 0x2345
    5404:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5408:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    540a:	60 91 01 23 	lds	r22, 0x2301
    540e:	70 91 02 23 	lds	r23, 0x2302
    5412:	80 91 03 23 	lds	r24, 0x2303
    5416:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    541a:	21 e0       	ldi	r18, 0x01	; 1
    541c:	d1 10       	cpse	r13, r1
    541e:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5420:	91 e0       	ldi	r25, 0x01	; 1
    5422:	e1 10       	cpse	r14, r1
    5424:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5426:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5428:	91 e0       	ldi	r25, 0x01	; 1
    542a:	f1 10       	cpse	r15, r1
    542c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    542e:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5430:	21 e0       	ldi	r18, 0x01	; 1
    5432:	01 11       	cpse	r16, r1
    5434:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5436:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5438:	91 e0       	ldi	r25, 0x01	; 1
    543a:	11 11       	cpse	r17, r1
    543c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    543e:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5440:	21 e0       	ldi	r18, 0x01	; 1
    5442:	d1 11       	cpse	r29, r1
    5444:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5446:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5448:	91 e0       	ldi	r25, 0x01	; 1
    544a:	c1 11       	cpse	r28, r1
    544c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    544e:	92 2b       	or	r25, r18
    5450:	29 f4       	brne	.+10     	; 0x545c <testMode+0x19e>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5452:	91 e0       	ldi	r25, 0x01	; 1
    5454:	81 11       	cpse	r24, r1
    5456:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5458:	99 23       	and	r25, r25
    545a:	49 f0       	breq	.+18     	; 0x546e <testMode+0x1b0>
			{
				send_usart_char(" ------FAIL");
    545c:	89 e3       	ldi	r24, 0x39	; 57
    545e:	94 e0       	ldi	r25, 0x04	; 4
    5460:	61 dd       	rcall	.-1342   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5462:	85 e4       	ldi	r24, 0x45	; 69
    5464:	94 e0       	ldi	r25, 0x04	; 4
    5466:	5e dd       	rcall	.-1348   	; 0x4f24 <send_usart_char>
				button = button1;
    5468:	10 92 a3 22 	sts	0x22A3, r1
    546c:	25 c5       	rjmp	.+2634   	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_set(STATUS_LED_1);
    546e:	60 91 a9 22 	lds	r22, 0x22A9
    5472:	70 91 aa 22 	lds	r23, 0x22AA
    5476:	80 91 ab 22 	lds	r24, 0x22AB
    547a:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    547e:	82 e6       	ldi	r24, 0x62	; 98
    5480:	94 e0       	ldi	r25, 0x04	; 4
    5482:	50 dd       	rcall	.-1376   	; 0x4f24 <send_usart_char>
				button = button2;
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	80 93 a3 22 	sts	0x22A3, r24
    548a:	16 c5       	rjmp	.+2604   	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button2:
		{
			send_usart_char("\r\nIO Switch ");
    548c:	8c e2       	ldi	r24, 0x2C	; 44
    548e:	94 e0       	ldi	r25, 0x04	; 4
    5490:	49 dd       	rcall	.-1390   	; 0x4f24 <send_usart_char>
			send_usart_char("2");
    5492:	8e e6       	ldi	r24, 0x6E	; 110
    5494:	94 e0       	ldi	r25, 0x04	; 4
    5496:	46 dd       	rcall	.-1396   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5498:	60 91 53 23 	lds	r22, 0x2353
    549c:	70 91 54 23 	lds	r23, 0x2354
    54a0:	80 91 55 23 	lds	r24, 0x2355
    54a4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    54a8:	88 23       	and	r24, r24
    54aa:	51 f0       	breq	.+20     	; 0x54c0 <testMode+0x202>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    54ac:	60 91 53 23 	lds	r22, 0x2353
    54b0:	70 91 54 23 	lds	r23, 0x2354
    54b4:	80 91 55 23 	lds	r24, 0x2355
    54b8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("2");
			
			button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			
			while(button_status_factory != 1)
    54bc:	81 11       	cpse	r24, r1
    54be:	f6 cf       	rjmp	.-20     	; 0x54ac <testMode+0x1ee>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    54c0:	60 91 58 23 	lds	r22, 0x2358
    54c4:	70 91 59 23 	lds	r23, 0x2359
    54c8:	80 91 5a 23 	lds	r24, 0x235A
    54cc:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    54d0:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    54d2:	60 91 a6 22 	lds	r22, 0x22A6
    54d6:	70 91 a7 22 	lds	r23, 0x22A7
    54da:	80 91 a8 22 	lds	r24, 0x22A8
    54de:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    54e2:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    54e4:	60 91 04 23 	lds	r22, 0x2304
    54e8:	70 91 05 23 	lds	r23, 0x2305
    54ec:	80 91 06 23 	lds	r24, 0x2306
    54f0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    54f4:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    54f6:	60 91 5c 22 	lds	r22, 0x225C
    54fa:	70 91 5d 22 	lds	r23, 0x225D
    54fe:	80 91 5e 22 	lds	r24, 0x225E
    5502:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5506:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5508:	60 91 b3 22 	lds	r22, 0x22B3
    550c:	70 91 b4 22 	lds	r23, 0x22B4
    5510:	80 91 b5 22 	lds	r24, 0x22B5
    5514:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5518:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    551a:	60 91 9a 22 	lds	r22, 0x229A
    551e:	70 91 9b 22 	lds	r23, 0x229B
    5522:	80 91 9c 22 	lds	r24, 0x229C
    5526:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    552a:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    552c:	60 91 43 23 	lds	r22, 0x2343
    5530:	70 91 44 23 	lds	r23, 0x2344
    5534:	80 91 45 23 	lds	r24, 0x2345
    5538:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    553c:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    553e:	60 91 01 23 	lds	r22, 0x2301
    5542:	70 91 02 23 	lds	r23, 0x2302
    5546:	80 91 03 23 	lds	r24, 0x2303
    554a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    554e:	21 e0       	ldi	r18, 0x01	; 1
    5550:	d1 10       	cpse	r13, r1
    5552:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5554:	91 e0       	ldi	r25, 0x01	; 1
    5556:	e1 10       	cpse	r14, r1
    5558:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    555a:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    555c:	91 e0       	ldi	r25, 0x01	; 1
    555e:	f1 10       	cpse	r15, r1
    5560:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5562:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5564:	21 e0       	ldi	r18, 0x01	; 1
    5566:	01 11       	cpse	r16, r1
    5568:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    556a:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    556c:	91 e0       	ldi	r25, 0x01	; 1
    556e:	11 11       	cpse	r17, r1
    5570:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5572:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5574:	21 e0       	ldi	r18, 0x01	; 1
    5576:	d1 11       	cpse	r29, r1
    5578:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    557a:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    557c:	91 e0       	ldi	r25, 0x01	; 1
    557e:	c1 11       	cpse	r28, r1
    5580:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5582:	92 2b       	or	r25, r18
    5584:	29 f4       	brne	.+10     	; 0x5590 <testMode+0x2d2>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5586:	91 e0       	ldi	r25, 0x01	; 1
    5588:	81 11       	cpse	r24, r1
    558a:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    558c:	99 23       	and	r25, r25
    558e:	49 f0       	breq	.+18     	; 0x55a2 <testMode+0x2e4>
			{
				send_usart_char(" ------FAIL");
    5590:	89 e3       	ldi	r24, 0x39	; 57
    5592:	94 e0       	ldi	r25, 0x04	; 4
    5594:	c7 dc       	rcall	.-1650   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5596:	85 e4       	ldi	r24, 0x45	; 69
    5598:	94 e0       	ldi	r25, 0x04	; 4
    559a:	c4 dc       	rcall	.-1656   	; 0x4f24 <send_usart_char>
				button = button1;
    559c:	10 92 a3 22 	sts	0x22A3, r1
    55a0:	8b c4       	rjmp	.+2326   	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_set(STATUS_LED_2);
    55a2:	60 91 cb 22 	lds	r22, 0x22CB
    55a6:	70 91 cc 22 	lds	r23, 0x22CC
    55aa:	80 91 cd 22 	lds	r24, 0x22CD
    55ae:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    55b2:	82 e6       	ldi	r24, 0x62	; 98
    55b4:	94 e0       	ldi	r25, 0x04	; 4
    55b6:	b6 dc       	rcall	.-1684   	; 0x4f24 <send_usart_char>
				button = button3;
    55b8:	82 e0       	ldi	r24, 0x02	; 2
    55ba:	80 93 a3 22 	sts	0x22A3, r24
    55be:	7c c4       	rjmp	.+2296   	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button3:
		{
			send_usart_char("\r\nIO Switch ");
    55c0:	8c e2       	ldi	r24, 0x2C	; 44
    55c2:	94 e0       	ldi	r25, 0x04	; 4
    55c4:	af dc       	rcall	.-1698   	; 0x4f24 <send_usart_char>
			send_usart_char("3");
    55c6:	8d e2       	ldi	r24, 0x2D	; 45
    55c8:	92 e0       	ldi	r25, 0x02	; 2
    55ca:	ac dc       	rcall	.-1704   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    55cc:	60 91 a6 22 	lds	r22, 0x22A6
    55d0:	70 91 a7 22 	lds	r23, 0x22A7
    55d4:	80 91 a8 22 	lds	r24, 0x22A8
    55d8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    55dc:	88 23       	and	r24, r24
    55de:	51 f0       	breq	.+20     	; 0x55f4 <testMode+0x336>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    55e0:	60 91 a6 22 	lds	r22, 0x22A6
    55e4:	70 91 a7 22 	lds	r23, 0x22A7
    55e8:	80 91 a8 22 	lds	r24, 0x22A8
    55ec:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("3");
			
			button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			
			while(button_status_factory != 1)
    55f0:	81 11       	cpse	r24, r1
    55f2:	f6 cf       	rjmp	.-20     	; 0x55e0 <testMode+0x322>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    55f4:	60 91 58 23 	lds	r22, 0x2358
    55f8:	70 91 59 23 	lds	r23, 0x2359
    55fc:	80 91 5a 23 	lds	r24, 0x235A
    5600:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5604:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5606:	60 91 53 23 	lds	r22, 0x2353
    560a:	70 91 54 23 	lds	r23, 0x2354
    560e:	80 91 55 23 	lds	r24, 0x2355
    5612:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5616:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5618:	60 91 04 23 	lds	r22, 0x2304
    561c:	70 91 05 23 	lds	r23, 0x2305
    5620:	80 91 06 23 	lds	r24, 0x2306
    5624:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5628:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    562a:	60 91 5c 22 	lds	r22, 0x225C
    562e:	70 91 5d 22 	lds	r23, 0x225D
    5632:	80 91 5e 22 	lds	r24, 0x225E
    5636:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    563a:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    563c:	60 91 b3 22 	lds	r22, 0x22B3
    5640:	70 91 b4 22 	lds	r23, 0x22B4
    5644:	80 91 b5 22 	lds	r24, 0x22B5
    5648:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    564c:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    564e:	60 91 9a 22 	lds	r22, 0x229A
    5652:	70 91 9b 22 	lds	r23, 0x229B
    5656:	80 91 9c 22 	lds	r24, 0x229C
    565a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    565e:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5660:	60 91 43 23 	lds	r22, 0x2343
    5664:	70 91 44 23 	lds	r23, 0x2344
    5668:	80 91 45 23 	lds	r24, 0x2345
    566c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5670:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5672:	60 91 01 23 	lds	r22, 0x2301
    5676:	70 91 02 23 	lds	r23, 0x2302
    567a:	80 91 03 23 	lds	r24, 0x2303
    567e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5682:	21 e0       	ldi	r18, 0x01	; 1
    5684:	d1 10       	cpse	r13, r1
    5686:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5688:	91 e0       	ldi	r25, 0x01	; 1
    568a:	e1 10       	cpse	r14, r1
    568c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    568e:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5690:	91 e0       	ldi	r25, 0x01	; 1
    5692:	f1 10       	cpse	r15, r1
    5694:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5696:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5698:	21 e0       	ldi	r18, 0x01	; 1
    569a:	01 11       	cpse	r16, r1
    569c:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    569e:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    56a0:	91 e0       	ldi	r25, 0x01	; 1
    56a2:	11 11       	cpse	r17, r1
    56a4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56a6:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    56a8:	21 e0       	ldi	r18, 0x01	; 1
    56aa:	d1 11       	cpse	r29, r1
    56ac:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56ae:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    56b0:	91 e0       	ldi	r25, 0x01	; 1
    56b2:	c1 11       	cpse	r28, r1
    56b4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56b6:	92 2b       	or	r25, r18
    56b8:	29 f4       	brne	.+10     	; 0x56c4 <testMode+0x406>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    56ba:	91 e0       	ldi	r25, 0x01	; 1
    56bc:	81 11       	cpse	r24, r1
    56be:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56c0:	99 23       	and	r25, r25
    56c2:	49 f0       	breq	.+18     	; 0x56d6 <testMode+0x418>
			{
				send_usart_char(" ------FAIL");
    56c4:	89 e3       	ldi	r24, 0x39	; 57
    56c6:	94 e0       	ldi	r25, 0x04	; 4
    56c8:	2d dc       	rcall	.-1958   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    56ca:	85 e4       	ldi	r24, 0x45	; 69
    56cc:	94 e0       	ldi	r25, 0x04	; 4
    56ce:	2a dc       	rcall	.-1964   	; 0x4f24 <send_usart_char>
				button = button1;
    56d0:	10 92 a3 22 	sts	0x22A3, r1
    56d4:	f1 c3       	rjmp	.+2018   	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_set(CHARGING_DISABLE);
    56d6:	60 91 dd 22 	lds	r22, 0x22DD
    56da:	70 91 de 22 	lds	r23, 0x22DE
    56de:	80 91 df 22 	lds	r24, 0x22DF
    56e2:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    56e6:	82 e6       	ldi	r24, 0x62	; 98
    56e8:	94 e0       	ldi	r25, 0x04	; 4
    56ea:	1c dc       	rcall	.-1992   	; 0x4f24 <send_usart_char>
				button = button4;
    56ec:	83 e0       	ldi	r24, 0x03	; 3
    56ee:	80 93 a3 22 	sts	0x22A3, r24
    56f2:	e2 c3       	rjmp	.+1988   	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button4:
		{
			send_usart_char("\r\nIO Switch ");
    56f4:	8c e2       	ldi	r24, 0x2C	; 44
    56f6:	94 e0       	ldi	r25, 0x04	; 4
    56f8:	15 dc       	rcall	.-2006   	; 0x4f24 <send_usart_char>
			send_usart_char("4");
    56fa:	80 e7       	ldi	r24, 0x70	; 112
    56fc:	94 e0       	ldi	r25, 0x04	; 4
    56fe:	12 dc       	rcall	.-2012   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5700:	60 91 04 23 	lds	r22, 0x2304
    5704:	70 91 05 23 	lds	r23, 0x2305
    5708:	80 91 06 23 	lds	r24, 0x2306
    570c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5710:	88 23       	and	r24, r24
    5712:	51 f0       	breq	.+20     	; 0x5728 <testMode+0x46a>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5714:	60 91 04 23 	lds	r22, 0x2304
    5718:	70 91 05 23 	lds	r23, 0x2305
    571c:	80 91 06 23 	lds	r24, 0x2306
    5720:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("4");
			
			button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			
			while(button_status_factory != 1)
    5724:	81 11       	cpse	r24, r1
    5726:	f6 cf       	rjmp	.-20     	; 0x5714 <testMode+0x456>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5728:	60 91 58 23 	lds	r22, 0x2358
    572c:	70 91 59 23 	lds	r23, 0x2359
    5730:	80 91 5a 23 	lds	r24, 0x235A
    5734:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5738:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    573a:	60 91 53 23 	lds	r22, 0x2353
    573e:	70 91 54 23 	lds	r23, 0x2354
    5742:	80 91 55 23 	lds	r24, 0x2355
    5746:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    574a:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    574c:	60 91 a6 22 	lds	r22, 0x22A6
    5750:	70 91 a7 22 	lds	r23, 0x22A7
    5754:	80 91 a8 22 	lds	r24, 0x22A8
    5758:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    575c:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    575e:	60 91 5c 22 	lds	r22, 0x225C
    5762:	70 91 5d 22 	lds	r23, 0x225D
    5766:	80 91 5e 22 	lds	r24, 0x225E
    576a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    576e:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5770:	60 91 b3 22 	lds	r22, 0x22B3
    5774:	70 91 b4 22 	lds	r23, 0x22B4
    5778:	80 91 b5 22 	lds	r24, 0x22B5
    577c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5780:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5782:	60 91 9a 22 	lds	r22, 0x229A
    5786:	70 91 9b 22 	lds	r23, 0x229B
    578a:	80 91 9c 22 	lds	r24, 0x229C
    578e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5792:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5794:	60 91 43 23 	lds	r22, 0x2343
    5798:	70 91 44 23 	lds	r23, 0x2344
    579c:	80 91 45 23 	lds	r24, 0x2345
    57a0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    57a4:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    57a6:	60 91 01 23 	lds	r22, 0x2301
    57aa:	70 91 02 23 	lds	r23, 0x2302
    57ae:	80 91 03 23 	lds	r24, 0x2303
    57b2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    57b6:	21 e0       	ldi	r18, 0x01	; 1
    57b8:	d1 10       	cpse	r13, r1
    57ba:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    57bc:	91 e0       	ldi	r25, 0x01	; 1
    57be:	e1 10       	cpse	r14, r1
    57c0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57c2:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    57c4:	91 e0       	ldi	r25, 0x01	; 1
    57c6:	f1 10       	cpse	r15, r1
    57c8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57ca:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    57cc:	21 e0       	ldi	r18, 0x01	; 1
    57ce:	01 11       	cpse	r16, r1
    57d0:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57d2:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    57d4:	91 e0       	ldi	r25, 0x01	; 1
    57d6:	11 11       	cpse	r17, r1
    57d8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57da:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    57dc:	21 e0       	ldi	r18, 0x01	; 1
    57de:	d1 11       	cpse	r29, r1
    57e0:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57e2:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    57e4:	91 e0       	ldi	r25, 0x01	; 1
    57e6:	c1 11       	cpse	r28, r1
    57e8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57ea:	92 2b       	or	r25, r18
    57ec:	29 f4       	brne	.+10     	; 0x57f8 <testMode+0x53a>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    57ee:	91 e0       	ldi	r25, 0x01	; 1
    57f0:	81 11       	cpse	r24, r1
    57f2:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    57f4:	99 23       	and	r25, r25
    57f6:	49 f0       	breq	.+18     	; 0x580a <testMode+0x54c>
			{
				send_usart_char(" ------FAIL");
    57f8:	89 e3       	ldi	r24, 0x39	; 57
    57fa:	94 e0       	ldi	r25, 0x04	; 4
    57fc:	93 db       	rcall	.-2266   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    57fe:	85 e4       	ldi	r24, 0x45	; 69
    5800:	94 e0       	ldi	r25, 0x04	; 4
    5802:	90 db       	rcall	.-2272   	; 0x4f24 <send_usart_char>
				button = button1;
    5804:	10 92 a3 22 	sts	0x22A3, r1
    5808:	57 c3       	rjmp	.+1710   	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_set(EMER_LIGHT_EN);
    580a:	60 91 ad 22 	lds	r22, 0x22AD
    580e:	70 91 ae 22 	lds	r23, 0x22AE
    5812:	80 91 af 22 	lds	r24, 0x22AF
    5816:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    581a:	82 e6       	ldi	r24, 0x62	; 98
    581c:	94 e0       	ldi	r25, 0x04	; 4
    581e:	82 db       	rcall	.-2300   	; 0x4f24 <send_usart_char>
				button = button5;
    5820:	84 e0       	ldi	r24, 0x04	; 4
    5822:	80 93 a3 22 	sts	0x22A3, r24
    5826:	48 c3       	rjmp	.+1680   	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button5:
		{
			send_usart_char("\r\nIO Switch ");
    5828:	8c e2       	ldi	r24, 0x2C	; 44
    582a:	94 e0       	ldi	r25, 0x04	; 4
    582c:	7b db       	rcall	.-2314   	; 0x4f24 <send_usart_char>
			send_usart_char("5");
    582e:	82 e7       	ldi	r24, 0x72	; 114
    5830:	94 e0       	ldi	r25, 0x04	; 4
    5832:	78 db       	rcall	.-2320   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5834:	60 91 5c 22 	lds	r22, 0x225C
    5838:	70 91 5d 22 	lds	r23, 0x225D
    583c:	80 91 5e 22 	lds	r24, 0x225E
    5840:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5844:	88 23       	and	r24, r24
    5846:	51 f0       	breq	.+20     	; 0x585c <testMode+0x59e>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5848:	60 91 5c 22 	lds	r22, 0x225C
    584c:	70 91 5d 22 	lds	r23, 0x225D
    5850:	80 91 5e 22 	lds	r24, 0x225E
    5854:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("5");
			
			button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			
			while(button_status_factory != 1)
    5858:	81 11       	cpse	r24, r1
    585a:	f6 cf       	rjmp	.-20     	; 0x5848 <testMode+0x58a>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    585c:	60 91 58 23 	lds	r22, 0x2358
    5860:	70 91 59 23 	lds	r23, 0x2359
    5864:	80 91 5a 23 	lds	r24, 0x235A
    5868:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    586c:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    586e:	60 91 53 23 	lds	r22, 0x2353
    5872:	70 91 54 23 	lds	r23, 0x2354
    5876:	80 91 55 23 	lds	r24, 0x2355
    587a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    587e:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5880:	60 91 a6 22 	lds	r22, 0x22A6
    5884:	70 91 a7 22 	lds	r23, 0x22A7
    5888:	80 91 a8 22 	lds	r24, 0x22A8
    588c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5890:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5892:	60 91 04 23 	lds	r22, 0x2304
    5896:	70 91 05 23 	lds	r23, 0x2305
    589a:	80 91 06 23 	lds	r24, 0x2306
    589e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    58a2:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    58a4:	60 91 b3 22 	lds	r22, 0x22B3
    58a8:	70 91 b4 22 	lds	r23, 0x22B4
    58ac:	80 91 b5 22 	lds	r24, 0x22B5
    58b0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    58b4:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    58b6:	60 91 9a 22 	lds	r22, 0x229A
    58ba:	70 91 9b 22 	lds	r23, 0x229B
    58be:	80 91 9c 22 	lds	r24, 0x229C
    58c2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    58c6:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    58c8:	60 91 43 23 	lds	r22, 0x2343
    58cc:	70 91 44 23 	lds	r23, 0x2344
    58d0:	80 91 45 23 	lds	r24, 0x2345
    58d4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    58d8:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    58da:	60 91 01 23 	lds	r22, 0x2301
    58de:	70 91 02 23 	lds	r23, 0x2302
    58e2:	80 91 03 23 	lds	r24, 0x2303
    58e6:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    58ea:	21 e0       	ldi	r18, 0x01	; 1
    58ec:	d1 10       	cpse	r13, r1
    58ee:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    58f0:	91 e0       	ldi	r25, 0x01	; 1
    58f2:	e1 10       	cpse	r14, r1
    58f4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    58f6:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    58f8:	91 e0       	ldi	r25, 0x01	; 1
    58fa:	f1 10       	cpse	r15, r1
    58fc:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    58fe:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5900:	21 e0       	ldi	r18, 0x01	; 1
    5902:	01 11       	cpse	r16, r1
    5904:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5906:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5908:	91 e0       	ldi	r25, 0x01	; 1
    590a:	11 11       	cpse	r17, r1
    590c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    590e:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5910:	21 e0       	ldi	r18, 0x01	; 1
    5912:	d1 11       	cpse	r29, r1
    5914:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5916:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5918:	91 e0       	ldi	r25, 0x01	; 1
    591a:	c1 11       	cpse	r28, r1
    591c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    591e:	92 2b       	or	r25, r18
    5920:	29 f4       	brne	.+10     	; 0x592c <testMode+0x66e>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5922:	91 e0       	ldi	r25, 0x01	; 1
    5924:	81 11       	cpse	r24, r1
    5926:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5928:	99 23       	and	r25, r25
    592a:	49 f0       	breq	.+18     	; 0x593e <testMode+0x680>
			{
				send_usart_char(" ------FAIL");
    592c:	89 e3       	ldi	r24, 0x39	; 57
    592e:	94 e0       	ldi	r25, 0x04	; 4
    5930:	f9 da       	rcall	.-2574   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5932:	85 e4       	ldi	r24, 0x45	; 69
    5934:	94 e0       	ldi	r25, 0x04	; 4
    5936:	f6 da       	rcall	.-2580   	; 0x4f24 <send_usart_char>
				button = button1;
    5938:	10 92 a3 22 	sts	0x22A3, r1
    593c:	bd c2       	rjmp	.+1402   	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH0);
    593e:	60 91 8a 22 	lds	r22, 0x228A
    5942:	70 91 8b 22 	lds	r23, 0x228B
    5946:	80 91 8c 22 	lds	r24, 0x228C
    594a:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    594e:	82 e6       	ldi	r24, 0x62	; 98
    5950:	94 e0       	ldi	r25, 0x04	; 4
    5952:	e8 da       	rcall	.-2608   	; 0x4f24 <send_usart_char>
				button = button6;
    5954:	85 e0       	ldi	r24, 0x05	; 5
    5956:	80 93 a3 22 	sts	0x22A3, r24
    595a:	ae c2       	rjmp	.+1372   	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button6:
		{
			send_usart_char("\r\nIO Switch ");
    595c:	8c e2       	ldi	r24, 0x2C	; 44
    595e:	94 e0       	ldi	r25, 0x04	; 4
    5960:	e1 da       	rcall	.-2622   	; 0x4f24 <send_usart_char>
			send_usart_char("6");
    5962:	84 e7       	ldi	r24, 0x74	; 116
    5964:	94 e0       	ldi	r25, 0x04	; 4
    5966:	de da       	rcall	.-2628   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5968:	60 91 b3 22 	lds	r22, 0x22B3
    596c:	70 91 b4 22 	lds	r23, 0x22B4
    5970:	80 91 b5 22 	lds	r24, 0x22B5
    5974:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5978:	88 23       	and	r24, r24
    597a:	51 f0       	breq	.+20     	; 0x5990 <testMode+0x6d2>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    597c:	60 91 b3 22 	lds	r22, 0x22B3
    5980:	70 91 b4 22 	lds	r23, 0x22B4
    5984:	80 91 b5 22 	lds	r24, 0x22B5
    5988:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("6");
			
			button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			
			while(button_status_factory != 1)
    598c:	81 11       	cpse	r24, r1
    598e:	f6 cf       	rjmp	.-20     	; 0x597c <testMode+0x6be>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5990:	60 91 58 23 	lds	r22, 0x2358
    5994:	70 91 59 23 	lds	r23, 0x2359
    5998:	80 91 5a 23 	lds	r24, 0x235A
    599c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    59a0:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    59a2:	60 91 53 23 	lds	r22, 0x2353
    59a6:	70 91 54 23 	lds	r23, 0x2354
    59aa:	80 91 55 23 	lds	r24, 0x2355
    59ae:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    59b2:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    59b4:	60 91 a6 22 	lds	r22, 0x22A6
    59b8:	70 91 a7 22 	lds	r23, 0x22A7
    59bc:	80 91 a8 22 	lds	r24, 0x22A8
    59c0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    59c4:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    59c6:	60 91 04 23 	lds	r22, 0x2304
    59ca:	70 91 05 23 	lds	r23, 0x2305
    59ce:	80 91 06 23 	lds	r24, 0x2306
    59d2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    59d6:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    59d8:	60 91 5c 22 	lds	r22, 0x225C
    59dc:	70 91 5d 22 	lds	r23, 0x225D
    59e0:	80 91 5e 22 	lds	r24, 0x225E
    59e4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    59e8:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    59ea:	60 91 9a 22 	lds	r22, 0x229A
    59ee:	70 91 9b 22 	lds	r23, 0x229B
    59f2:	80 91 9c 22 	lds	r24, 0x229C
    59f6:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    59fa:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    59fc:	60 91 43 23 	lds	r22, 0x2343
    5a00:	70 91 44 23 	lds	r23, 0x2344
    5a04:	80 91 45 23 	lds	r24, 0x2345
    5a08:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5a0c:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5a0e:	60 91 01 23 	lds	r22, 0x2301
    5a12:	70 91 02 23 	lds	r23, 0x2302
    5a16:	80 91 03 23 	lds	r24, 0x2303
    5a1a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5a1e:	21 e0       	ldi	r18, 0x01	; 1
    5a20:	d1 10       	cpse	r13, r1
    5a22:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5a24:	91 e0       	ldi	r25, 0x01	; 1
    5a26:	e1 10       	cpse	r14, r1
    5a28:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a2a:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5a2c:	91 e0       	ldi	r25, 0x01	; 1
    5a2e:	f1 10       	cpse	r15, r1
    5a30:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a32:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5a34:	21 e0       	ldi	r18, 0x01	; 1
    5a36:	01 11       	cpse	r16, r1
    5a38:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a3a:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5a3c:	91 e0       	ldi	r25, 0x01	; 1
    5a3e:	11 11       	cpse	r17, r1
    5a40:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a42:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5a44:	21 e0       	ldi	r18, 0x01	; 1
    5a46:	d1 11       	cpse	r29, r1
    5a48:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a4a:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5a4c:	91 e0       	ldi	r25, 0x01	; 1
    5a4e:	c1 11       	cpse	r28, r1
    5a50:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a52:	92 2b       	or	r25, r18
    5a54:	29 f4       	brne	.+10     	; 0x5a60 <testMode+0x7a2>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5a56:	91 e0       	ldi	r25, 0x01	; 1
    5a58:	81 11       	cpse	r24, r1
    5a5a:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a5c:	99 23       	and	r25, r25
    5a5e:	49 f0       	breq	.+18     	; 0x5a72 <testMode+0x7b4>
			{
				send_usart_char(" ------FAIL");
    5a60:	89 e3       	ldi	r24, 0x39	; 57
    5a62:	94 e0       	ldi	r25, 0x04	; 4
    5a64:	5f da       	rcall	.-2882   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5a66:	85 e4       	ldi	r24, 0x45	; 69
    5a68:	94 e0       	ldi	r25, 0x04	; 4
    5a6a:	5c da       	rcall	.-2888   	; 0x4f24 <send_usart_char>
				button = button1;
    5a6c:	10 92 a3 22 	sts	0x22A3, r1
    5a70:	23 c2       	rjmp	.+1094   	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH1);
    5a72:	60 91 5e 23 	lds	r22, 0x235E
    5a76:	70 91 5f 23 	lds	r23, 0x235F
    5a7a:	80 91 60 23 	lds	r24, 0x2360
    5a7e:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    5a82:	82 e6       	ldi	r24, 0x62	; 98
    5a84:	94 e0       	ldi	r25, 0x04	; 4
    5a86:	4e da       	rcall	.-2916   	; 0x4f24 <send_usart_char>
				button = button7;
    5a88:	86 e0       	ldi	r24, 0x06	; 6
    5a8a:	80 93 a3 22 	sts	0x22A3, r24
    5a8e:	14 c2       	rjmp	.+1064   	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button7:
		{
			send_usart_char("\r\nIO Switch ");
    5a90:	8c e2       	ldi	r24, 0x2C	; 44
    5a92:	94 e0       	ldi	r25, 0x04	; 4
    5a94:	47 da       	rcall	.-2930   	; 0x4f24 <send_usart_char>
			send_usart_char("7");
    5a96:	86 e7       	ldi	r24, 0x76	; 118
    5a98:	94 e0       	ldi	r25, 0x04	; 4
    5a9a:	44 da       	rcall	.-2936   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
    5a9c:	60 91 9a 22 	lds	r22, 0x229A
    5aa0:	70 91 9b 22 	lds	r23, 0x229B
    5aa4:	80 91 9c 22 	lds	r24, 0x229C
    5aa8:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5aac:	88 23       	and	r24, r24
    5aae:	51 f0       	breq	.+20     	; 0x5ac4 <testMode+0x806>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
    5ab0:	60 91 9a 22 	lds	r22, 0x229A
    5ab4:	70 91 9b 22 	lds	r23, 0x229B
    5ab8:	80 91 9c 22 	lds	r24, 0x229C
    5abc:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("7");
			
			button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			
			while(button_status_factory != 1)
    5ac0:	81 11       	cpse	r24, r1
    5ac2:	f6 cf       	rjmp	.-20     	; 0x5ab0 <testMode+0x7f2>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5ac4:	60 91 58 23 	lds	r22, 0x2358
    5ac8:	70 91 59 23 	lds	r23, 0x2359
    5acc:	80 91 5a 23 	lds	r24, 0x235A
    5ad0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5ad4:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5ad6:	60 91 53 23 	lds	r22, 0x2353
    5ada:	70 91 54 23 	lds	r23, 0x2354
    5ade:	80 91 55 23 	lds	r24, 0x2355
    5ae2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5ae6:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5ae8:	60 91 a6 22 	lds	r22, 0x22A6
    5aec:	70 91 a7 22 	lds	r23, 0x22A7
    5af0:	80 91 a8 22 	lds	r24, 0x22A8
    5af4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5af8:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5afa:	60 91 04 23 	lds	r22, 0x2304
    5afe:	70 91 05 23 	lds	r23, 0x2305
    5b02:	80 91 06 23 	lds	r24, 0x2306
    5b06:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5b0a:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5b0c:	60 91 5c 22 	lds	r22, 0x225C
    5b10:	70 91 5d 22 	lds	r23, 0x225D
    5b14:	80 91 5e 22 	lds	r24, 0x225E
    5b18:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5b1c:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5b1e:	60 91 b3 22 	lds	r22, 0x22B3
    5b22:	70 91 b4 22 	lds	r23, 0x22B4
    5b26:	80 91 b5 22 	lds	r24, 0x22B5
    5b2a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5b2e:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5b30:	60 91 43 23 	lds	r22, 0x2343
    5b34:	70 91 44 23 	lds	r23, 0x2344
    5b38:	80 91 45 23 	lds	r24, 0x2345
    5b3c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5b40:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5b42:	60 91 01 23 	lds	r22, 0x2301
    5b46:	70 91 02 23 	lds	r23, 0x2302
    5b4a:	80 91 03 23 	lds	r24, 0x2303
    5b4e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5b52:	21 e0       	ldi	r18, 0x01	; 1
    5b54:	d1 10       	cpse	r13, r1
    5b56:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5b58:	91 e0       	ldi	r25, 0x01	; 1
    5b5a:	e1 10       	cpse	r14, r1
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b5e:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5b60:	91 e0       	ldi	r25, 0x01	; 1
    5b62:	f1 10       	cpse	r15, r1
    5b64:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b66:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5b68:	21 e0       	ldi	r18, 0x01	; 1
    5b6a:	01 11       	cpse	r16, r1
    5b6c:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b6e:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5b70:	91 e0       	ldi	r25, 0x01	; 1
    5b72:	11 11       	cpse	r17, r1
    5b74:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b76:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5b78:	21 e0       	ldi	r18, 0x01	; 1
    5b7a:	d1 11       	cpse	r29, r1
    5b7c:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b7e:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5b80:	91 e0       	ldi	r25, 0x01	; 1
    5b82:	c1 11       	cpse	r28, r1
    5b84:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b86:	92 2b       	or	r25, r18
    5b88:	29 f4       	brne	.+10     	; 0x5b94 <testMode+0x8d6>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5b8a:	91 e0       	ldi	r25, 0x01	; 1
    5b8c:	81 11       	cpse	r24, r1
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5b90:	99 23       	and	r25, r25
    5b92:	49 f0       	breq	.+18     	; 0x5ba6 <testMode+0x8e8>
			{
				send_usart_char(" ------FAIL");
    5b94:	89 e3       	ldi	r24, 0x39	; 57
    5b96:	94 e0       	ldi	r25, 0x04	; 4
    5b98:	c5 d9       	rcall	.-3190   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5b9a:	85 e4       	ldi	r24, 0x45	; 69
    5b9c:	94 e0       	ldi	r25, 0x04	; 4
    5b9e:	c2 d9       	rcall	.-3196   	; 0x4f24 <send_usart_char>
				button = button1;
    5ba0:	10 92 a3 22 	sts	0x22A3, r1
    5ba4:	89 c1       	rjmp	.+786    	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH2);
    5ba6:	60 91 64 23 	lds	r22, 0x2364
    5baa:	70 91 65 23 	lds	r23, 0x2365
    5bae:	80 91 66 23 	lds	r24, 0x2366
    5bb2:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    5bb6:	82 e6       	ldi	r24, 0x62	; 98
    5bb8:	94 e0       	ldi	r25, 0x04	; 4
    5bba:	b4 d9       	rcall	.-3224   	; 0x4f24 <send_usart_char>
				button = button8;
    5bbc:	87 e0       	ldi	r24, 0x07	; 7
    5bbe:	80 93 a3 22 	sts	0x22A3, r24
    5bc2:	7a c1       	rjmp	.+756    	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button8:
		{
			send_usart_char("\r\nIO Switch ");
    5bc4:	8c e2       	ldi	r24, 0x2C	; 44
    5bc6:	94 e0       	ldi	r25, 0x04	; 4
    5bc8:	ad d9       	rcall	.-3238   	; 0x4f24 <send_usart_char>
			send_usart_char("8");
    5bca:	88 e7       	ldi	r24, 0x78	; 120
    5bcc:	94 e0       	ldi	r25, 0x04	; 4
    5bce:	aa d9       	rcall	.-3244   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5bd0:	60 91 43 23 	lds	r22, 0x2343
    5bd4:	70 91 44 23 	lds	r23, 0x2344
    5bd8:	80 91 45 23 	lds	r24, 0x2345
    5bdc:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5be0:	88 23       	and	r24, r24
    5be2:	51 f0       	breq	.+20     	; 0x5bf8 <testMode+0x93a>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5be4:	60 91 43 23 	lds	r22, 0x2343
    5be8:	70 91 44 23 	lds	r23, 0x2344
    5bec:	80 91 45 23 	lds	r24, 0x2345
    5bf0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("8");
			
			button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			while(button_status_factory != 1)
    5bf4:	81 11       	cpse	r24, r1
    5bf6:	f6 cf       	rjmp	.-20     	; 0x5be4 <testMode+0x926>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5bf8:	60 91 58 23 	lds	r22, 0x2358
    5bfc:	70 91 59 23 	lds	r23, 0x2359
    5c00:	80 91 5a 23 	lds	r24, 0x235A
    5c04:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5c08:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5c0a:	60 91 53 23 	lds	r22, 0x2353
    5c0e:	70 91 54 23 	lds	r23, 0x2354
    5c12:	80 91 55 23 	lds	r24, 0x2355
    5c16:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5c1a:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5c1c:	60 91 a6 22 	lds	r22, 0x22A6
    5c20:	70 91 a7 22 	lds	r23, 0x22A7
    5c24:	80 91 a8 22 	lds	r24, 0x22A8
    5c28:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5c2c:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5c2e:	60 91 04 23 	lds	r22, 0x2304
    5c32:	70 91 05 23 	lds	r23, 0x2305
    5c36:	80 91 06 23 	lds	r24, 0x2306
    5c3a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5c3e:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5c40:	60 91 5c 22 	lds	r22, 0x225C
    5c44:	70 91 5d 22 	lds	r23, 0x225D
    5c48:	80 91 5e 22 	lds	r24, 0x225E
    5c4c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5c50:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5c52:	60 91 b3 22 	lds	r22, 0x22B3
    5c56:	70 91 b4 22 	lds	r23, 0x22B4
    5c5a:	80 91 b5 22 	lds	r24, 0x22B5
    5c5e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5c62:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5c64:	60 91 9a 22 	lds	r22, 0x229A
    5c68:	70 91 9b 22 	lds	r23, 0x229B
    5c6c:	80 91 9c 22 	lds	r24, 0x229C
    5c70:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5c74:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5c76:	60 91 01 23 	lds	r22, 0x2301
    5c7a:	70 91 02 23 	lds	r23, 0x2302
    5c7e:	80 91 03 23 	lds	r24, 0x2303
    5c82:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5c86:	21 e0       	ldi	r18, 0x01	; 1
    5c88:	d1 10       	cpse	r13, r1
    5c8a:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5c8c:	91 e0       	ldi	r25, 0x01	; 1
    5c8e:	e1 10       	cpse	r14, r1
    5c90:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5c92:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5c94:	91 e0       	ldi	r25, 0x01	; 1
    5c96:	f1 10       	cpse	r15, r1
    5c98:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5c9a:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5c9c:	21 e0       	ldi	r18, 0x01	; 1
    5c9e:	01 11       	cpse	r16, r1
    5ca0:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5ca2:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5ca4:	91 e0       	ldi	r25, 0x01	; 1
    5ca6:	11 11       	cpse	r17, r1
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5caa:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5cac:	21 e0       	ldi	r18, 0x01	; 1
    5cae:	d1 11       	cpse	r29, r1
    5cb0:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5cb2:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5cb4:	91 e0       	ldi	r25, 0x01	; 1
    5cb6:	c1 11       	cpse	r28, r1
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5cba:	92 2b       	or	r25, r18
    5cbc:	29 f4       	brne	.+10     	; 0x5cc8 <testMode+0xa0a>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5cbe:	91 e0       	ldi	r25, 0x01	; 1
    5cc0:	81 11       	cpse	r24, r1
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5cc4:	99 23       	and	r25, r25
    5cc6:	49 f0       	breq	.+18     	; 0x5cda <testMode+0xa1c>
			{
				send_usart_char(" ------FAIL");
    5cc8:	89 e3       	ldi	r24, 0x39	; 57
    5cca:	94 e0       	ldi	r25, 0x04	; 4
    5ccc:	2b d9       	rcall	.-3498   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5cce:	85 e4       	ldi	r24, 0x45	; 69
    5cd0:	94 e0       	ldi	r25, 0x04	; 4
    5cd2:	28 d9       	rcall	.-3504   	; 0x4f24 <send_usart_char>
				button = button1;
    5cd4:	10 92 a3 22 	sts	0x22A3, r1
    5cd8:	ef c0       	rjmp	.+478    	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_clr(OUT_LED_CH0);
    5cda:	60 91 8a 22 	lds	r22, 0x228A
    5cde:	70 91 8b 22 	lds	r23, 0x228B
    5ce2:	80 91 8c 22 	lds	r24, 0x228C
    5ce6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(OUT_LED_CH1);
    5cea:	60 91 5e 23 	lds	r22, 0x235E
    5cee:	70 91 5f 23 	lds	r23, 0x235F
    5cf2:	80 91 60 23 	lds	r24, 0x2360
    5cf6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(OUT_LED_CH2);
    5cfa:	60 91 64 23 	lds	r22, 0x2364
    5cfe:	70 91 65 23 	lds	r23, 0x2365
    5d02:	80 91 66 23 	lds	r24, 0x2366
    5d06:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				send_usart_char(" ------PASS");
    5d0a:	82 e6       	ldi	r24, 0x62	; 98
    5d0c:	94 e0       	ldi	r25, 0x04	; 4
    5d0e:	0a d9       	rcall	.-3564   	; 0x4f24 <send_usart_char>
				button = button9;
    5d10:	88 e0       	ldi	r24, 0x08	; 8
    5d12:	80 93 a3 22 	sts	0x22A3, r24
    5d16:	d0 c0       	rjmp	.+416    	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button9:
		{
			send_usart_char("\r\nIO Switch ");
    5d18:	8c e2       	ldi	r24, 0x2C	; 44
    5d1a:	94 e0       	ldi	r25, 0x04	; 4
    5d1c:	03 d9       	rcall	.-3578   	; 0x4f24 <send_usart_char>
			send_usart_char("9");
    5d1e:	8a e7       	ldi	r24, 0x7A	; 122
    5d20:	94 e0       	ldi	r25, 0x04	; 4
    5d22:	00 d9       	rcall	.-3584   	; 0x4f24 <send_usart_char>
			
			button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
    5d24:	60 91 01 23 	lds	r22, 0x2301
    5d28:	70 91 02 23 	lds	r23, 0x2302
    5d2c:	80 91 03 23 	lds	r24, 0x2303
    5d30:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			
			while(button_status_factory != 1)
    5d34:	88 23       	and	r24, r24
    5d36:	51 f0       	breq	.+20     	; 0x5d4c <testMode+0xa8e>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
    5d38:	60 91 01 23 	lds	r22, 0x2301
    5d3c:	70 91 02 23 	lds	r23, 0x2302
    5d40:	80 91 03 23 	lds	r24, 0x2303
    5d44:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("9");
			
			button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			while(button_status_factory != 1)
    5d48:	81 11       	cpse	r24, r1
    5d4a:	f6 cf       	rjmp	.-20     	; 0x5d38 <testMode+0xa7a>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5d4c:	60 91 58 23 	lds	r22, 0x2358
    5d50:	70 91 59 23 	lds	r23, 0x2359
    5d54:	80 91 5a 23 	lds	r24, 0x235A
    5d58:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5d5c:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5d5e:	60 91 53 23 	lds	r22, 0x2353
    5d62:	70 91 54 23 	lds	r23, 0x2354
    5d66:	80 91 55 23 	lds	r24, 0x2355
    5d6a:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5d6e:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5d70:	60 91 a6 22 	lds	r22, 0x22A6
    5d74:	70 91 a7 22 	lds	r23, 0x22A7
    5d78:	80 91 a8 22 	lds	r24, 0x22A8
    5d7c:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5d80:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5d82:	60 91 04 23 	lds	r22, 0x2304
    5d86:	70 91 05 23 	lds	r23, 0x2305
    5d8a:	80 91 06 23 	lds	r24, 0x2306
    5d8e:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5d92:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5d94:	60 91 5c 22 	lds	r22, 0x225C
    5d98:	70 91 5d 22 	lds	r23, 0x225D
    5d9c:	80 91 5e 22 	lds	r24, 0x225E
    5da0:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5da4:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5da6:	60 91 b3 22 	lds	r22, 0x22B3
    5daa:	70 91 b4 22 	lds	r23, 0x22B4
    5dae:	80 91 b5 22 	lds	r24, 0x22B5
    5db2:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5db6:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5db8:	60 91 9a 22 	lds	r22, 0x229A
    5dbc:	70 91 9b 22 	lds	r23, 0x229B
    5dc0:	80 91 9c 22 	lds	r24, 0x229C
    5dc4:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
    5dc8:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5dca:	60 91 43 23 	lds	r22, 0x2343
    5dce:	70 91 44 23 	lds	r23, 0x2344
    5dd2:	80 91 45 23 	lds	r24, 0x2345
    5dd6:	0e 94 49 0b 	call	0x1692	; 0x1692 <gpio_read>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5dda:	21 e0       	ldi	r18, 0x01	; 1
    5ddc:	d1 10       	cpse	r13, r1
    5dde:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5de0:	91 e0       	ldi	r25, 0x01	; 1
    5de2:	e1 10       	cpse	r14, r1
    5de4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5de6:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5de8:	91 e0       	ldi	r25, 0x01	; 1
    5dea:	f1 10       	cpse	r15, r1
    5dec:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5dee:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5df0:	21 e0       	ldi	r18, 0x01	; 1
    5df2:	01 11       	cpse	r16, r1
    5df4:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5df6:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5df8:	91 e0       	ldi	r25, 0x01	; 1
    5dfa:	11 11       	cpse	r17, r1
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5dfe:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5e00:	21 e0       	ldi	r18, 0x01	; 1
    5e02:	d1 11       	cpse	r29, r1
    5e04:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e06:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5e08:	91 e0       	ldi	r25, 0x01	; 1
    5e0a:	c1 11       	cpse	r28, r1
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e0e:	92 2b       	or	r25, r18
    5e10:	29 f4       	brne	.+10     	; 0x5e1c <testMode+0xb5e>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5e12:	91 e0       	ldi	r25, 0x01	; 1
    5e14:	81 11       	cpse	r24, r1
    5e16:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e18:	99 23       	and	r25, r25
    5e1a:	49 f0       	breq	.+18     	; 0x5e2e <testMode+0xb70>
			{
				send_usart_char(" ------FAIL");
    5e1c:	89 e3       	ldi	r24, 0x39	; 57
    5e1e:	94 e0       	ldi	r25, 0x04	; 4
    5e20:	81 d8       	rcall	.-3838   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5e22:	85 e4       	ldi	r24, 0x45	; 69
    5e24:	94 e0       	ldi	r25, 0x04	; 4
    5e26:	7e d8       	rcall	.-3844   	; 0x4f24 <send_usart_char>
				button = button1;
    5e28:	10 92 a3 22 	sts	0x22A3, r1
    5e2c:	45 c0       	rjmp	.+138    	; 0x5eb8 <testMode+0xbfa>
			}
			else
			{
				gpio_clr(STATUS_LED_1);
    5e2e:	60 91 a9 22 	lds	r22, 0x22A9
    5e32:	70 91 aa 22 	lds	r23, 0x22AA
    5e36:	80 91 ab 22 	lds	r24, 0x22AB
    5e3a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(STATUS_LED_2);
    5e3e:	60 91 cb 22 	lds	r22, 0x22CB
    5e42:	70 91 cc 22 	lds	r23, 0x22CC
    5e46:	80 91 cd 22 	lds	r24, 0x22CD
    5e4a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(CHARGING_DISABLE);
    5e4e:	60 91 dd 22 	lds	r22, 0x22DD
    5e52:	70 91 de 22 	lds	r23, 0x22DE
    5e56:	80 91 df 22 	lds	r24, 0x22DF
    5e5a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_clr(EMER_LIGHT_EN);
    5e5e:	60 91 ad 22 	lds	r22, 0x22AD
    5e62:	70 91 ae 22 	lds	r23, 0x22AE
    5e66:	80 91 af 22 	lds	r24, 0x22AF
    5e6a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpio_clr>
				gpio_set(OUT_LED_CH0);
    5e6e:	60 91 8a 22 	lds	r22, 0x228A
    5e72:	70 91 8b 22 	lds	r23, 0x228B
    5e76:	80 91 8c 22 	lds	r24, 0x228C
    5e7a:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				gpio_set(OUT_LED_CH1);
    5e7e:	60 91 5e 23 	lds	r22, 0x235E
    5e82:	70 91 5f 23 	lds	r23, 0x235F
    5e86:	80 91 60 23 	lds	r24, 0x2360
    5e8a:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				gpio_set(OUT_LED_CH2);
    5e8e:	60 91 64 23 	lds	r22, 0x2364
    5e92:	70 91 65 23 	lds	r23, 0x2365
    5e96:	80 91 66 23 	lds	r24, 0x2366
    5e9a:	0e 94 92 09 	call	0x1324	; 0x1324 <gpio_set>
				send_usart_char(" ------PASS");
    5e9e:	82 e6       	ldi	r24, 0x62	; 98
    5ea0:	94 e0       	ldi	r25, 0x04	; 4
    5ea2:	40 d8       	rcall	.-3968   	; 0x4f24 <send_usart_char>
				send_usart_char("\r\n------ Test Finished ------\r\n------ Successful ------");
    5ea4:	8c e7       	ldi	r24, 0x7C	; 124
    5ea6:	94 e0       	ldi	r25, 0x04	; 4
    5ea8:	3d d8       	rcall	.-3974   	; 0x4f24 <send_usart_char>
				button = button10;
    5eaa:	89 e0       	ldi	r24, 0x09	; 9
    5eac:	80 93 a3 22 	sts	0x22A3, r24
    5eb0:	03 c0       	rjmp	.+6      	; 0x5eb8 <testMode+0xbfa>
		}
		break;
		
		case button10:
		{
			option_select = option_message;
    5eb2:	89 e0       	ldi	r24, 0x09	; 9
    5eb4:	80 93 b7 22 	sts	0x22B7, r24
		}
		break;
	}

}
    5eb8:	df 91       	pop	r29
    5eba:	cf 91       	pop	r28
    5ebc:	1f 91       	pop	r17
    5ebe:	0f 91       	pop	r16
    5ec0:	ff 90       	pop	r15
    5ec2:	ef 90       	pop	r14
    5ec4:	df 90       	pop	r13
    5ec6:	08 95       	ret

00005ec8 <dump_eeprom>:

void dump_eeprom()
{
    5ec8:	0f 93       	push	r16
    5eca:	1f 93       	push	r17
    5ecc:	cf 93       	push	r28
    5ece:	df 93       	push	r29
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
    5ed0:	c0 e0       	ldi	r28, 0x00	; 0
    5ed2:	d0 e0       	ldi	r29, 0x00	; 0

}

void dump_eeprom()
{
	uint8_t block = 0;
    5ed4:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
	{
		if(block == 32)
		{
			send_usart_char("\r\n");
			block = 0;
    5ed6:	00 e0       	ldi	r16, 0x00	; 0
    5ed8:	06 c0       	rjmp	.+12     	; 0x5ee6 <dump_eeprom+0x1e>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
	{
		if(block == 32)
    5eda:	10 32       	cpi	r17, 0x20	; 32
    5edc:	21 f4       	brne	.+8      	; 0x5ee6 <dump_eeprom+0x1e>
		{
			send_usart_char("\r\n");
    5ede:	8c e3       	ldi	r24, 0x3C	; 60
    5ee0:	96 e0       	ldi	r25, 0x06	; 6
    5ee2:	20 d8       	rcall	.-4032   	; 0x4f24 <send_usart_char>
			block = 0;
    5ee4:	10 2f       	mov	r17, r16
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		int_to_ascii(PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high));
    5ee6:	2d 2f       	mov	r18, r29
    5ee8:	4c 2f       	mov	r20, r28
    5eea:	65 e4       	ldi	r22, 0x45	; 69
    5eec:	8f ea       	ldi	r24, 0xAF	; 175
    5eee:	0e 94 48 22 	call	0x4490	; 0x4490 <PNEWELSE2promRead>
    5ef2:	6c d8       	rcall	.-3880   	; 0x4fcc <int_to_ascii>
		send_usart_char(" ");
    5ef4:	8b ed       	ldi	r24, 0xDB	; 219
    5ef6:	94 e0       	ldi	r25, 0x04	; 4
    5ef8:	15 d8       	rcall	.-4054   	; 0x4f24 <send_usart_char>
		pne_delayms(5);
    5efa:	85 e0       	ldi	r24, 0x05	; 5
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	0e 94 30 21 	call	0x4260	; 0x4260 <pne_delayms>
		block++;
    5f02:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
    5f04:	21 96       	adiw	r28, 0x01	; 1
    5f06:	c1 15       	cp	r28, r1
    5f08:	80 e2       	ldi	r24, 0x20	; 32
    5f0a:	d8 07       	cpc	r29, r24
    5f0c:	31 f7       	brne	.-52     	; 0x5eda <dump_eeprom+0x12>
		send_usart_char(" ");
		pne_delayms(5);
		block++;
		
	}
	option_select = option_message;
    5f0e:	89 e0       	ldi	r24, 0x09	; 9
    5f10:	80 93 b7 22 	sts	0x22B7, r24
}
    5f14:	df 91       	pop	r29
    5f16:	cf 91       	pop	r28
    5f18:	1f 91       	pop	r17
    5f1a:	0f 91       	pop	r16
    5f1c:	08 95       	ret

00005f1e <readE2prom>:
uint8_t readE2prom(uint16_t address)
{
	uint8_t cache = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	cache = PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high);
    5f1e:	29 2f       	mov	r18, r25
    5f20:	48 2f       	mov	r20, r24
    5f22:	65 e4       	ldi	r22, 0x45	; 69
    5f24:	8f ea       	ldi	r24, 0xAF	; 175
    5f26:	0c 94 48 22 	jmp	0x4490	; 0x4490 <PNEWELSE2promRead>
	return cache;
}
    5f2a:	08 95       	ret

00005f2c <pneDisplayInfo>:
	}
		return idle;
}

void pneDisplayInfo()
{
    5f2c:	ef 92       	push	r14
    5f2e:	ff 92       	push	r15
    5f30:	0f 93       	push	r16
    5f32:	1f 93       	push	r17
    5f34:	cf 93       	push	r28
    5f36:	df 93       	push	r29
    5f38:	cd b7       	in	r28, 0x3d	; 61
    5f3a:	de b7       	in	r29, 0x3e	; 62
    5f3c:	62 97       	sbiw	r28, 0x12	; 18
    5f3e:	0f b6       	in	r0, 0x3f	; 63
    5f40:	f8 94       	cli
    5f42:	de bf       	out	0x3e, r29	; 62
    5f44:	0f be       	out	0x3f, r0	; 63
    5f46:	cd bf       	out	0x3d, r28	; 61
	uint8_t cache[2]={0};
		
	send_usart_char("Device information:\r\n");
    5f48:	84 eb       	ldi	r24, 0xB4	; 180
    5f4a:	94 e0       	ldi	r25, 0x04	; 4
    5f4c:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
	send_usart_char("\r\nPAN ID (Zone)\t: ");
    5f50:	8a ec       	ldi	r24, 0xCA	; 202
    5f52:	94 e0       	ldi	r25, 0x04	; 4
    5f54:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
	cache[0] = readE2prom(DEVICE_PAN_H);
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	90 e1       	ldi	r25, 0x10	; 16
    5f5c:	e0 df       	rcall	.-64     	; 0x5f1e <readE2prom>
    5f5e:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_PAN_L);
    5f60:	80 e0       	ldi	r24, 0x00	; 0
    5f62:	90 e1       	ldi	r25, 0x10	; 16
    5f64:	dc df       	rcall	.-72     	; 0x5f1e <readE2prom>
	PNEWELS_Buffer.devicePAN = cache[0];
    5f66:	21 2f       	mov	r18, r17
    5f68:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.devicePAN = PNEWELS_Buffer.devicePAN << 8;
    5f6a:	32 2f       	mov	r19, r18
    5f6c:	22 27       	eor	r18, r18
	PNEWELS_Buffer.devicePAN |= cache[1];
    5f6e:	a9 01       	movw	r20, r18
    5f70:	48 2b       	or	r20, r24
    5f72:	ca 01       	movw	r24, r20
    5f74:	0f 2e       	mov	r0, r31
    5f76:	f0 e6       	ldi	r31, 0x60	; 96
    5f78:	ef 2e       	mov	r14, r31
    5f7a:	f2 e2       	ldi	r31, 0x22	; 34
    5f7c:	ff 2e       	mov	r15, r31
    5f7e:	f0 2d       	mov	r31, r0
    5f80:	f7 01       	movw	r30, r14
    5f82:	96 8f       	std	Z+30, r25	; 0x1e
    5f84:	85 8f       	std	Z+29, r24	; 0x1d
	int_to_ascii((uint8_t)(PNEWELS_Buffer.devicePAN>>8));
    5f86:	89 2f       	mov	r24, r25
    5f88:	21 d8       	rcall	.-4030   	; 0x4fcc <int_to_ascii>
	int_to_ascii((uint8_t)PNEWELS_Buffer.devicePAN);
    5f8a:	f7 01       	movw	r30, r14
    5f8c:	85 8d       	ldd	r24, Z+29	; 0x1d
    5f8e:	1e d8       	rcall	.-4036   	; 0x4fcc <int_to_ascii>
	
// 	send_usart_char("\r\nNode ID\t\t: ");
// 	PNEWELS_Buffer.nodeID = readE2prom(NODE_ID);
// 	int_to_ascii(PNEWELS_Buffer.nodeID);
	
	send_usart_char("\r\nDevice address\t: ");
    5f90:	8d ed       	ldi	r24, 0xDD	; 221
    5f92:	94 e0       	ldi	r25, 0x04	; 4
    5f94:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
	cache[0] = readE2prom(DEVICE_ADDRESS_H);
    5f98:	8d ef       	ldi	r24, 0xFD	; 253
    5f9a:	9f e0       	ldi	r25, 0x0F	; 15
    5f9c:	c0 df       	rcall	.-128    	; 0x5f1e <readE2prom>
    5f9e:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_ADDRESS_L);
    5fa0:	8c ef       	ldi	r24, 0xFC	; 252
    5fa2:	9f e0       	ldi	r25, 0x0F	; 15
    5fa4:	bc df       	rcall	.-136    	; 0x5f1e <readE2prom>
	PNEWELS_Buffer.deviceAddress = cache[0];
    5fa6:	21 2f       	mov	r18, r17
    5fa8:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.deviceAddress = PNEWELS_Buffer.deviceAddress << 8;
    5faa:	32 2f       	mov	r19, r18
    5fac:	22 27       	eor	r18, r18
	PNEWELS_Buffer.deviceAddress |= cache[1];
    5fae:	a9 01       	movw	r20, r18
    5fb0:	48 2b       	or	r20, r24
    5fb2:	ca 01       	movw	r24, r20
    5fb4:	f7 01       	movw	r30, r14
    5fb6:	94 8f       	std	Z+28, r25	; 0x1c
    5fb8:	83 8f       	std	Z+27, r24	; 0x1b
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress>>8));
    5fba:	89 2f       	mov	r24, r25
    5fbc:	07 d8       	rcall	.-4082   	; 0x4fcc <int_to_ascii>
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress));
    5fbe:	f7 01       	movw	r30, r14
    5fc0:	83 8d       	ldd	r24, Z+27	; 0x1b
    5fc2:	04 d8       	rcall	.-4088   	; 0x4fcc <int_to_ascii>
	
	send_usart_char("\r\nDevice channel\t: ");
    5fc4:	81 ef       	ldi	r24, 0xF1	; 241
    5fc6:	94 e0       	ldi	r25, 0x04	; 4
    5fc8:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
	cache[0] = readE2prom(DEVICE_CHANNEL_H);
    5fcc:	8f ef       	ldi	r24, 0xFF	; 255
    5fce:	9f e0       	ldi	r25, 0x0F	; 15
    5fd0:	a6 df       	rcall	.-180    	; 0x5f1e <readE2prom>
    5fd2:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_CHANNEL_L);
    5fd4:	8e ef       	ldi	r24, 0xFE	; 254
    5fd6:	9f e0       	ldi	r25, 0x0F	; 15
    5fd8:	a2 df       	rcall	.-188    	; 0x5f1e <readE2prom>
	PNEWELS_Buffer.deviceAddress = cache[0];
    5fda:	21 2f       	mov	r18, r17
    5fdc:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.deviceAddress = PNEWELS_Buffer.deviceAddress << 8;
    5fde:	32 2f       	mov	r19, r18
    5fe0:	22 27       	eor	r18, r18
	PNEWELS_Buffer.deviceAddress |= cache[1];
    5fe2:	a9 01       	movw	r20, r18
    5fe4:	48 2b       	or	r20, r24
    5fe6:	ca 01       	movw	r24, r20
    5fe8:	f7 01       	movw	r30, r14
    5fea:	94 8f       	std	Z+28, r25	; 0x1c
    5fec:	83 8f       	std	Z+27, r24	; 0x1b
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress>>8));
    5fee:	89 2f       	mov	r24, r25
    5ff0:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress));
    5ff4:	f7 01       	movw	r30, r14
    5ff6:	83 8d       	ldd	r24, Z+27	; 0x1b
    5ff8:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
	
	//Read EEPROM and display serial number
	uint8_t serial_addr[2] = {0x00, 0x08};
    5ffc:	19 82       	std	Y+1, r1	; 0x01
    5ffe:	88 e0       	ldi	r24, 0x08	; 8
    6000:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t serial_no[16] = {0};
    6002:	7e 01       	movw	r14, r28
    6004:	f3 e0       	ldi	r31, 0x03	; 3
    6006:	ef 0e       	add	r14, r31
    6008:	f1 1c       	adc	r15, r1
    600a:	80 e1       	ldi	r24, 0x10	; 16
    600c:	f7 01       	movw	r30, r14
    600e:	11 92       	st	Z+, r1
    6010:	8a 95       	dec	r24
    6012:	e9 f7       	brne	.-6      	; 0x600e <pneDisplayInfo+0xe2>
								
	pne_APP_TwiInit(0xBF);
    6014:	8f eb       	ldi	r24, 0xBF	; 191
    6016:	0e 94 44 21 	call	0x4288	; 0x4288 <pne_APP_TwiInit>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, serial_no, 16);
    601a:	00 e1       	ldi	r16, 0x10	; 16
    601c:	97 01       	movw	r18, r14
    601e:	4f eb       	ldi	r20, 0xBF	; 191
    6020:	62 e0       	ldi	r22, 0x02	; 2
    6022:	ce 01       	movw	r24, r28
    6024:	01 96       	adiw	r24, 0x01	; 1
    6026:	0e 94 c5 21 	call	0x438a	; 0x438a <pne_APP_TwiReceive>
	send_usart_char("\r\nSerial Number   : ");
    602a:	85 e0       	ldi	r24, 0x05	; 5
    602c:	95 e0       	ldi	r25, 0x05	; 5
    602e:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
    6032:	87 01       	movw	r16, r14
    6034:	7e 01       	movw	r14, r28
    6036:	f2 e1       	ldi	r31, 0x12	; 18
    6038:	ef 0e       	add	r14, r31
    603a:	f1 1c       	adc	r15, r1
							
	uint8_t compare = 0;
							
	for (compare=0; compare<15; compare++)
	{
		int_to_ascii(serial_no[compare]);
    603c:	f8 01       	movw	r30, r16
    603e:	81 91       	ld	r24, Z+
    6040:	8f 01       	movw	r16, r30
    6042:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
		usart_putchar(USART_SERIAL_EXAMPLE, 0x2E);
    6046:	6e e2       	ldi	r22, 0x2E	; 46
    6048:	88 ec       	ldi	r24, 0xC8	; 200
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	0e 94 f6 05 	call	0xbec	; 0xbec <usart_putchar>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, serial_no, 16);
	send_usart_char("\r\nSerial Number   : ");
							
	uint8_t compare = 0;
							
	for (compare=0; compare<15; compare++)
    6050:	0e 15       	cp	r16, r14
    6052:	1f 05       	cpc	r17, r15
    6054:	99 f7       	brne	.-26     	; 0x603c <pneDisplayInfo+0x110>
	{
		int_to_ascii(serial_no[compare]);
		usart_putchar(USART_SERIAL_EXAMPLE, 0x2E);
	}
							
	int_to_ascii(serial_no[15]);
    6056:	8a 89       	ldd	r24, Y+18	; 0x12
    6058:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
							
	//Read ADC
	uint8_t battery_voltage = pneBatteryAverage();
    605c:	cc d7       	rcall	.+3992   	; 0x6ff6 <pneBatteryAverage>
    605e:	08 2f       	mov	r16, r24
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    6060:	eb e7       	ldi	r30, 0x7B	; 123
    6062:	f0 e0       	ldi	r31, 0x00	; 0
    6064:	90 81       	ld	r25, Z
    6066:	97 7f       	andi	r25, 0xF7	; 247
    6068:	90 83       	st	Z, r25
	}

	ADMUX
		= ((uint8_t)input &
    606a:	81 e6       	ldi	r24, 0x61	; 97
    606c:	80 93 7c 00 	sts	0x007C, r24
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    6070:	ea e7       	ldi	r30, 0x7A	; 122
    6072:	f0 e0       	ldi	r31, 0x00	; 0
    6074:	90 81       	ld	r25, Z
    6076:	90 64       	ori	r25, 0x40	; 64
    6078:	90 83       	st	Z, r25

	while ((ADCSRA & (1 << ADSC))) {
    607a:	90 81       	ld	r25, Z
    607c:	96 fd       	sbrc	r25, 6
    607e:	fd cf       	rjmp	.-6      	; 0x607a <pneDisplayInfo+0x14e>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    6080:	10 91 79 00 	lds	r17, 0x0079
	uint8_t battery_capacity = adc_read_8bit(ADC_EMER_LIGHT_INPUT, ADC_VREF);
							
	send_usart_char("\r\nBattery Voltage : ");
    6084:	8a e1       	ldi	r24, 0x1A	; 26
    6086:	95 e0       	ldi	r25, 0x05	; 5
    6088:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
	int_to_ascii(battery_voltage);
    608c:	80 2f       	mov	r24, r16
    608e:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
	send_usart_char("\r\nBattery Capacity: ");
    6092:	8f e2       	ldi	r24, 0x2F	; 47
    6094:	95 e0       	ldi	r25, 0x05	; 5
    6096:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
	int_to_ascii(battery_capacity);
    609a:	81 2f       	mov	r24, r17
    609c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
	
	option_select = option_message;
    60a0:	89 e0       	ldi	r24, 0x09	; 9
    60a2:	80 93 b7 22 	sts	0x22B7, r24
}
    60a6:	62 96       	adiw	r28, 0x12	; 18
    60a8:	0f b6       	in	r0, 0x3f	; 63
    60aa:	f8 94       	cli
    60ac:	de bf       	out	0x3e, r29	; 62
    60ae:	0f be       	out	0x3f, r0	; 63
    60b0:	cd bf       	out	0x3d, r28	; 61
    60b2:	df 91       	pop	r29
    60b4:	cf 91       	pop	r28
    60b6:	1f 91       	pop	r17
    60b8:	0f 91       	pop	r16
    60ba:	ff 90       	pop	r15
    60bc:	ef 90       	pop	r14
    60be:	08 95       	ret

000060c0 <resetFlag>:
	int_to_ascii(data);
	/*send_usart_char("\r\n");*/
}

void resetFlag()
{
    60c0:	0f 93       	push	r16
	
	uint8_t memory_address_low = (FLAG & 0xFF);
	uint8_t memory_address_high = ((FLAG >> 8) & 0xFF);
	
	switch(reset_state)
    60c2:	80 91 32 23 	lds	r24, 0x2332
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	87 30       	cpi	r24, 0x07	; 7
    60ca:	91 05       	cpc	r25, r1
    60cc:	08 f0       	brcs	.+2      	; 0x60d0 <resetFlag+0x10>
    60ce:	66 c0       	rjmp	.+204    	; 0x619c <resetFlag+0xdc>
    60d0:	fc 01       	movw	r30, r24
    60d2:	88 27       	eor	r24, r24
    60d4:	ea 58       	subi	r30, 0x8A	; 138
    60d6:	fe 4f       	sbci	r31, 0xFE	; 254
    60d8:	8f 4f       	sbci	r24, 0xFF	; 255
    60da:	0c 94 71 4d 	jmp	0x9ae2	; 0x9ae2 <__tablejump2__>
	{
		case reset_startup_message:
		{
			send_usart_char("\r\n\r\nFlag reset mode. Select an option:\r\n\r\n");
    60de:	84 e4       	ldi	r24, 0x44	; 68
    60e0:	95 e0       	ldi	r25, 0x05	; 5
    60e2:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			send_usart_char("1. Reset all flag\r\n2. Reset Factory flag (bit0)\r\n3. Reset AC Power flag (bit1)\r\n");
    60e6:	8f e6       	ldi	r24, 0x6F	; 111
    60e8:	95 e0       	ldi	r25, 0x05	; 5
    60ea:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			send_usart_char("4. Read system flag status\r\n0. Exit configuration mode\r\n");
    60ee:	80 ec       	ldi	r24, 0xC0	; 192
    60f0:	95 e0       	ldi	r25, 0x05	; 5
    60f2:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			reset_option_flag = 1;
    60f6:	81 e0       	ldi	r24, 0x01	; 1
    60f8:	80 93 a5 22 	sts	0x22A5, r24
			reset_state = reset_idle;
    60fc:	85 e0       	ldi	r24, 0x05	; 5
    60fe:	80 93 32 23 	sts	0x2332, r24
		}
		break;
    6102:	53 c0       	rjmp	.+166    	; 0x61aa <resetFlag+0xea>
		
		case reset_all:
		{
 			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,0xFF);
    6104:	0f ef       	ldi	r16, 0xFF	; 255
    6106:	20 e1       	ldi	r18, 0x10	; 16
    6108:	42 e0       	ldi	r20, 0x02	; 2
    610a:	65 e4       	ldi	r22, 0x45	; 69
    610c:	8e ea       	ldi	r24, 0xAE	; 174
    610e:	0e 94 1d 22 	call	0x443a	; 0x443a <PNEWELSE2promWrite>
			pne_delayms(10);
    6112:	8a e0       	ldi	r24, 0x0A	; 10
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	0e 94 30 21 	call	0x4260	; 0x4260 <pne_delayms>
			reset_state = reset_startup_message;
    611a:	10 92 32 23 	sts	0x2332, r1
		}
		break;
    611e:	45 c0       	rjmp	.+138    	; 0x61aa <resetFlag+0xea>
		
		case reset_bit0:
		{
			reset_cache = readE2prom(FLAG);
    6120:	82 e0       	ldi	r24, 0x02	; 2
    6122:	90 e1       	ldi	r25, 0x10	; 16
    6124:	fc de       	rcall	.-520    	; 0x5f1e <readE2prom>
			reset_cache = (reset_cache | 0x01); 
    6126:	08 2f       	mov	r16, r24
    6128:	01 60       	ori	r16, 0x01	; 1
    612a:	00 93 5f 22 	sts	0x225F, r16
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    612e:	20 e1       	ldi	r18, 0x10	; 16
    6130:	42 e0       	ldi	r20, 0x02	; 2
    6132:	65 e4       	ldi	r22, 0x45	; 69
    6134:	8e ea       	ldi	r24, 0xAE	; 174
    6136:	0e 94 1d 22 	call	0x443a	; 0x443a <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    613a:	10 92 32 23 	sts	0x2332, r1
		}
		break;
    613e:	35 c0       	rjmp	.+106    	; 0x61aa <resetFlag+0xea>
		
		case reset_bit1:
		{
			reset_cache = readE2prom(FLAG);
    6140:	82 e0       	ldi	r24, 0x02	; 2
    6142:	90 e1       	ldi	r25, 0x10	; 16
    6144:	ec de       	rcall	.-552    	; 0x5f1e <readE2prom>
			reset_cache = (reset_cache | 0x02); 
    6146:	08 2f       	mov	r16, r24
    6148:	02 60       	ori	r16, 0x02	; 2
    614a:	00 93 5f 22 	sts	0x225F, r16
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    614e:	20 e1       	ldi	r18, 0x10	; 16
    6150:	42 e0       	ldi	r20, 0x02	; 2
    6152:	65 e4       	ldi	r22, 0x45	; 69
    6154:	8e ea       	ldi	r24, 0xAE	; 174
    6156:	0e 94 1d 22 	call	0x443a	; 0x443a <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    615a:	10 92 32 23 	sts	0x2332, r1
		}
		break;
    615e:	25 c0       	rjmp	.+74     	; 0x61aa <resetFlag+0xea>
		
		case reset_read_status:
		{
			reset_cache = readE2prom(FLAG);
    6160:	82 e0       	ldi	r24, 0x02	; 2
    6162:	90 e1       	ldi	r25, 0x10	; 16
    6164:	dc de       	rcall	.-584    	; 0x5f1e <readE2prom>
    6166:	80 93 5f 22 	sts	0x225F, r24
			send_usart_char("\r\nSystem Flag: ");
    616a:	89 ef       	ldi	r24, 0xF9	; 249
    616c:	95 e0       	ldi	r25, 0x05	; 5
    616e:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			int_to_ascii(reset_cache);
    6172:	80 91 5f 22 	lds	r24, 0x225F
    6176:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
			send_usart_char("\r\n");
    617a:	8c e3       	ldi	r24, 0x3C	; 60
    617c:	96 e0       	ldi	r25, 0x06	; 6
    617e:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			reset_state = reset_startup_message;
    6182:	10 92 32 23 	sts	0x2332, r1
		}
		break;
    6186:	11 c0       	rjmp	.+34     	; 0x61aa <resetFlag+0xea>
		case reset_idle:
		break;
		
		case reset_exit:
		{
			reset_option_flag = 0;
    6188:	10 92 a5 22 	sts	0x22A5, r1
			option_select = option_message;
    618c:	89 e0       	ldi	r24, 0x09	; 9
    618e:	80 93 b7 22 	sts	0x22B7, r24
			config_state = config_startup_message;
    6192:	10 92 a2 22 	sts	0x22A2, r1
			reset_state = reset_startup_message;
    6196:	10 92 32 23 	sts	0x2332, r1
			break;
    619a:	07 c0       	rjmp	.+14     	; 0x61aa <resetFlag+0xea>
		}
		default:
		option_select = option_message;
    619c:	89 e0       	ldi	r24, 0x09	; 9
    619e:	80 93 b7 22 	sts	0x22B7, r24
		config_state = config_startup_message;
    61a2:	10 92 a2 22 	sts	0x22A2, r1
		reset_state = reset_startup_message;
    61a6:	10 92 32 23 	sts	0x2332, r1
		break;
		
	}
}
    61aa:	0f 91       	pop	r16
    61ac:	08 95       	ret

000061ae <dump_log_file>:
	cache = PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high);
	return cache;
}

void dump_log_file()
{
    61ae:	0f 93       	push	r16
    61b0:	1f 93       	push	r17
    61b2:	cf 93       	push	r28
    61b4:	df 93       	push	r29
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    61b6:	c0 e0       	ldi	r28, 0x00	; 0
    61b8:	d0 e0       	ldi	r29, 0x00	; 0
	return cache;
}

void dump_log_file()
{
	uint8_t block = 0;
    61ba:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(block == 11)
		{
			send_usart_char("\r\n");
			block = 0;
    61bc:	00 e0       	ldi	r16, 0x00	; 0
    61be:	07 c0       	rjmp	.+14     	; 0x61ce <dump_log_file+0x20>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(block == 11)
    61c0:	1b 30       	cpi	r17, 0x0B	; 11
    61c2:	29 f4       	brne	.+10     	; 0x61ce <dump_log_file+0x20>
		{
			send_usart_char("\r\n");
    61c4:	8c e3       	ldi	r24, 0x3C	; 60
    61c6:	96 e0       	ldi	r25, 0x06	; 6
    61c8:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			block = 0;
    61cc:	10 2f       	mov	r17, r16
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		int_to_ascii(PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high));
    61ce:	2d 2f       	mov	r18, r29
    61d0:	4c 2f       	mov	r20, r28
    61d2:	65 e4       	ldi	r22, 0x45	; 69
    61d4:	8f ea       	ldi	r24, 0xAF	; 175
    61d6:	0e 94 48 22 	call	0x4490	; 0x4490 <PNEWELSE2promRead>
    61da:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
		send_usart_char(" ");
    61de:	8b ed       	ldi	r24, 0xDB	; 219
    61e0:	94 e0       	ldi	r25, 0x04	; 4
    61e2:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
		pne_delayms(5);
    61e6:	85 e0       	ldi	r24, 0x05	; 5
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	0e 94 30 21 	call	0x4260	; 0x4260 <pne_delayms>
		block++;
    61ee:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    61f0:	21 96       	adiw	r28, 0x01	; 1
    61f2:	cc 3f       	cpi	r28, 0xFC	; 252
    61f4:	8f e0       	ldi	r24, 0x0F	; 15
    61f6:	d8 07       	cpc	r29, r24
    61f8:	19 f7       	brne	.-58     	; 0x61c0 <dump_log_file+0x12>
		send_usart_char(" ");
		pne_delayms(5);
		block++;
		
	}
	option_select = option_message;
    61fa:	89 e0       	ldi	r24, 0x09	; 9
    61fc:	80 93 b7 22 	sts	0x22B7, r24
}
    6200:	df 91       	pop	r29
    6202:	cf 91       	pop	r28
    6204:	1f 91       	pop	r17
    6206:	0f 91       	pop	r16
    6208:	08 95       	ret

0000620a <erase_memory>:

void erase_memory()
{
	clre2prom();
    620a:	0e 94 a2 22 	call	0x4544	; 0x4544 <clre2prom>
	option_select = option_message;
    620e:	89 e0       	ldi	r24, 0x09	; 9
    6210:	80 93 b7 22 	sts	0x22B7, r24
    6214:	08 95       	ret

00006216 <writeE2prom>:
}

void writeE2prom(uint16_t address, uint8_t data)
{
    6216:	0f 93       	push	r16
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, data);
    6218:	06 2f       	mov	r16, r22
    621a:	29 2f       	mov	r18, r25
    621c:	48 2f       	mov	r20, r24
    621e:	65 e4       	ldi	r22, 0x45	; 69
    6220:	8e ea       	ldi	r24, 0xAE	; 174
    6222:	0e 94 1d 22 	call	0x443a	; 0x443a <PNEWELSE2promWrite>
	pne_delayms(10);
    6226:	8a e0       	ldi	r24, 0x0A	; 10
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	0e 94 30 21 	call	0x4260	; 0x4260 <pne_delayms>
}
    622e:	0f 91       	pop	r16
    6230:	08 95       	ret

00006232 <battery_config>:

void battery_config()
{	
	switch(battery_state)
    6232:	80 91 5d 23 	lds	r24, 0x235D
    6236:	82 30       	cpi	r24, 0x02	; 2
    6238:	79 f1       	breq	.+94     	; 0x6298 <battery_config+0x66>
    623a:	28 f4       	brcc	.+10     	; 0x6246 <battery_config+0x14>
    623c:	88 23       	and	r24, r24
    623e:	59 f0       	breq	.+22     	; 0x6256 <battery_config+0x24>
    6240:	81 30       	cpi	r24, 0x01	; 1
    6242:	e1 f0       	breq	.+56     	; 0x627c <battery_config+0x4a>
    6244:	66 c0       	rjmp	.+204    	; 0x6312 <battery_config+0xe0>
    6246:	84 30       	cpi	r24, 0x04	; 4
    6248:	09 f4       	brne	.+2      	; 0x624c <battery_config+0x1a>
    624a:	6a c0       	rjmp	.+212    	; 0x6320 <battery_config+0xee>
    624c:	98 f1       	brcs	.+102    	; 0x62b4 <battery_config+0x82>
    624e:	85 30       	cpi	r24, 0x05	; 5
    6250:	09 f4       	brne	.+2      	; 0x6254 <battery_config+0x22>
    6252:	55 c0       	rjmp	.+170    	; 0x62fe <battery_config+0xcc>
    6254:	5e c0       	rjmp	.+188    	; 0x6312 <battery_config+0xe0>
	{
		case battery_startup_message:
		{
			send_usart_char("\r\n\r\nBattery Configuration Mode. Select an option:\r\n\r\n");
    6256:	89 e0       	ldi	r24, 0x09	; 9
    6258:	96 e0       	ldi	r25, 0x06	; 6
    625a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			send_usart_char("1. Set Battery Low Threshold\r\n2. Set Battery Max Threshold\r\n");
    625e:	8f e3       	ldi	r24, 0x3F	; 63
    6260:	96 e0       	ldi	r25, 0x06	; 6
    6262:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			send_usart_char("3. Display Battery Threshold\r\n0. Exit\r\n");
    6266:	8c e7       	ldi	r24, 0x7C	; 124
    6268:	96 e0       	ldi	r25, 0x06	; 6
    626a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			battery_option_flag = 1;
    626e:	81 e0       	ldi	r24, 0x01	; 1
    6270:	80 93 a4 22 	sts	0x22A4, r24
			battery_state = battery_idle;
    6274:	84 e0       	ldi	r24, 0x04	; 4
    6276:	80 93 5d 23 	sts	0x235D, r24
		}
		break;
    627a:	08 95       	ret
		
		case batteryLow:
		{
			send_usart_char("Enter battery low threshold value (00-FF): \r\n");
    627c:	84 ea       	ldi	r24, 0xA4	; 164
    627e:	96 e0       	ldi	r25, 0x06	; 6
    6280:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			config_read_input(BATTERY_LOW, '1', batteryLOW_display);
    6284:	45 e0       	ldi	r20, 0x05	; 5
    6286:	58 e0       	ldi	r21, 0x08	; 8
    6288:	61 e3       	ldi	r22, 0x31	; 49
    628a:	84 e0       	ldi	r24, 0x04	; 4
    628c:	90 e1       	ldi	r25, 0x10	; 16
    628e:	0e 94 68 28 	call	0x50d0	; 0x50d0 <config_read_input>
			battery_state = battery_startup_message;
    6292:	10 92 5d 23 	sts	0x235D, r1
		}
		break;
    6296:	08 95       	ret
		
		case batteryMax:
		{
			send_usart_char("Enter battery max threshold value (00-FF): \r\n");
    6298:	82 ed       	ldi	r24, 0xD2	; 210
    629a:	96 e0       	ldi	r25, 0x06	; 6
    629c:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			config_read_input(BATTERY_MAX, '1', batteryMAX_display);
    62a0:	4f ee       	ldi	r20, 0xEF	; 239
    62a2:	57 e0       	ldi	r21, 0x07	; 7
    62a4:	61 e3       	ldi	r22, 0x31	; 49
    62a6:	83 e0       	ldi	r24, 0x03	; 3
    62a8:	90 e1       	ldi	r25, 0x10	; 16
    62aa:	0e 94 68 28 	call	0x50d0	; 0x50d0 <config_read_input>
			battery_state = battery_startup_message;
    62ae:	10 92 5d 23 	sts	0x235D, r1
		}
		break;
    62b2:	08 95       	ret
		
		case batteryStatus:
		{
			battery_cache = readE2prom(BATTERY_LOW);
    62b4:	84 e0       	ldi	r24, 0x04	; 4
    62b6:	90 e1       	ldi	r25, 0x10	; 16
    62b8:	32 de       	rcall	.-924    	; 0x5f1e <readE2prom>
    62ba:	80 93 62 23 	sts	0x2362, r24
			send_usart_char("\r\nBattery Low Threshold: ");
    62be:	80 e0       	ldi	r24, 0x00	; 0
    62c0:	97 e0       	ldi	r25, 0x07	; 7
    62c2:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			int_to_ascii(battery_cache);
    62c6:	80 91 62 23 	lds	r24, 0x2362
    62ca:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
			send_usart_char("\r\n");
    62ce:	8c e3       	ldi	r24, 0x3C	; 60
    62d0:	96 e0       	ldi	r25, 0x06	; 6
    62d2:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			battery_cache = readE2prom(BATTERY_MAX);
    62d6:	83 e0       	ldi	r24, 0x03	; 3
    62d8:	90 e1       	ldi	r25, 0x10	; 16
    62da:	21 de       	rcall	.-958    	; 0x5f1e <readE2prom>
    62dc:	80 93 62 23 	sts	0x2362, r24
			send_usart_char("\r\nBattery MAX Threshold: ");
    62e0:	8a e1       	ldi	r24, 0x1A	; 26
    62e2:	97 e0       	ldi	r25, 0x07	; 7
    62e4:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			int_to_ascii(battery_cache);
    62e8:	80 91 62 23 	lds	r24, 0x2362
    62ec:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <int_to_ascii>
			send_usart_char("\r\n");
    62f0:	8c e3       	ldi	r24, 0x3C	; 60
    62f2:	96 e0       	ldi	r25, 0x06	; 6
    62f4:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			battery_state = battery_startup_message;
    62f8:	10 92 5d 23 	sts	0x235D, r1
		}
		break;
    62fc:	08 95       	ret
		case battery_idle:
		break;
		
		case battery_exit:
		{
			battery_option_flag = 0;
    62fe:	10 92 a4 22 	sts	0x22A4, r1
			option_select = option_message;
    6302:	89 e0       	ldi	r24, 0x09	; 9
    6304:	80 93 b7 22 	sts	0x22B7, r24
			config_state = config_startup_message;
    6308:	10 92 a2 22 	sts	0x22A2, r1
			battery_state = battery_startup_message;
    630c:	10 92 5d 23 	sts	0x235D, r1
			break;
    6310:	08 95       	ret
		}
		default:
		option_select = option_message;
    6312:	89 e0       	ldi	r24, 0x09	; 9
    6314:	80 93 b7 22 	sts	0x22B7, r24
		config_state = config_startup_message;
    6318:	10 92 a2 22 	sts	0x22A2, r1
		battery_state = battery_startup_message;
    631c:	10 92 5d 23 	sts	0x235D, r1
    6320:	08 95       	ret

00006322 <batterySelect>:


uint8_t batterySelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    6322:	10 92 a1 22 	sts	0x22A1, r1
	
	switch(commamd[0])
    6326:	80 91 e2 22 	lds	r24, 0x22E2
    632a:	81 33       	cpi	r24, 0x31	; 49
    632c:	a9 f0       	breq	.+42     	; 0x6358 <batterySelect+0x36>
    632e:	18 f4       	brcc	.+6      	; 0x6336 <batterySelect+0x14>
    6330:	80 33       	cpi	r24, 0x30	; 48
    6332:	51 f0       	breq	.+20     	; 0x6348 <batterySelect+0x26>
    6334:	0b c0       	rjmp	.+22     	; 0x634c <batterySelect+0x2a>
    6336:	82 33       	cpi	r24, 0x32	; 50
    6338:	19 f0       	breq	.+6      	; 0x6340 <batterySelect+0x1e>
    633a:	83 33       	cpi	r24, 0x33	; 51
    633c:	19 f0       	breq	.+6      	; 0x6344 <batterySelect+0x22>
    633e:	06 c0       	rjmp	.+12     	; 0x634c <batterySelect+0x2a>
		case '1':
		return batteryLow;
		break;
		
		case '2':
		return batteryMax;
    6340:	82 e0       	ldi	r24, 0x02	; 2
    6342:	08 95       	ret
		break;
		
		case '3':
		return batteryStatus;
    6344:	83 e0       	ldi	r24, 0x03	; 3
    6346:	08 95       	ret
		break;
		
		case '0':
		return battery_exit;
    6348:	85 e0       	ldi	r24, 0x05	; 5
    634a:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    634c:	8a ef       	ldi	r24, 0xFA	; 250
    634e:	92 e0       	ldi	r25, 0x02	; 2
    6350:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
			return  battery_idle;
    6354:	84 e0       	ldi	r24, 0x04	; 4
    6356:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
		return batteryLow;
    6358:	81 e0       	ldi	r24, 0x01	; 1
			return  battery_idle;
		}
		break;
		
	}
    635a:	08 95       	ret

0000635c <factory_mode>:
#include "appBattery.h"

//---------- main routine for factory mode ----------//
void factory_mode(void)
{
	configuration_flag = 0; 
    635c:	10 92 db 22 	sts	0x22DB, r1
	reset_option_flag = 0;
    6360:	10 92 a5 22 	sts	0x22A5, r1
	config_waiting_input = 0;
    6364:	10 92 07 23 	sts	0x2307, r1
	flag = 0;
    6368:	10 92 a1 22 	sts	0x22A1, r1
	count_usart = 0;
    636c:	10 92 c5 22 	sts	0x22C5, r1
	usart_state = Usart_start;
    6370:	10 92 34 23 	sts	0x2334, r1
	factory_state = factory_startup_message;
    6374:	10 92 5b 23 	sts	0x235B, r1
	factory_command = groupID_command;
    6378:	10 92 a0 22 	sts	0x22A0, r1
	config_state = config_startup_message;
    637c:	10 92 a2 22 	sts	0x22A2, r1
	reset_state = reset_startup_message;
    6380:	10 92 32 23 	sts	0x2332, r1
	config_command = groupID_config;
    6384:	10 92 63 23 	sts	0x2363, r1
	button = button1;
    6388:	10 92 a3 22 	sts	0x22A3, r1
	option_select = option_message;
    638c:	89 e0       	ldi	r24, 0x09	; 9
    638e:	80 93 b7 22 	sts	0x22B7, r24
	battery_option_flag = 0;
    6392:	10 92 a4 22 	sts	0x22A4, r1
	battery_state = battery_startup_message;
    6396:	10 92 5d 23 	sts	0x235D, r1
    639a:	e2 ee       	ldi	r30, 0xE2	; 226
    639c:	f2 e2       	ldi	r31, 0x22	; 34
    639e:	8f ee       	ldi	r24, 0xEF	; 239
    63a0:	92 e2       	ldi	r25, 0x22	; 34
	
	for (uint8_t i=0; i<max_command_length; i++)
	{
		commamd[i] = 0;
    63a2:	11 92       	st	Z+, r1
	button = button1;
	option_select = option_message;
	battery_option_flag = 0;
	battery_state = battery_startup_message;
	
	for (uint8_t i=0; i<max_command_length; i++)
    63a4:	e8 17       	cp	r30, r24
    63a6:	f9 07       	cpc	r31, r25
    63a8:	e1 f7       	brne	.-8      	; 0x63a2 <factory_mode+0x46>
	}


	while (1)
	{
		if(flag == 1)
    63aa:	80 91 a1 22 	lds	r24, 0x22A1
    63ae:	81 30       	cpi	r24, 0x01	; 1
    63b0:	f1 f4       	brne	.+60     	; 0x63ee <factory_mode+0x92>
		{
			if(configuration_flag == 1)
    63b2:	80 91 db 22 	lds	r24, 0x22DB
    63b6:	81 30       	cpi	r24, 0x01	; 1
    63b8:	29 f4       	brne	.+10     	; 0x63c4 <factory_mode+0x68>
				config_state = configSelect();
    63ba:	0e 94 2a 28 	call	0x5054	; 0x5054 <configSelect>
    63be:	80 93 a2 22 	sts	0x22A2, r24
    63c2:	15 c0       	rjmp	.+42     	; 0x63ee <factory_mode+0x92>
			else if(reset_option_flag == 1)
    63c4:	80 91 a5 22 	lds	r24, 0x22A5
    63c8:	81 30       	cpi	r24, 0x01	; 1
    63ca:	29 f4       	brne	.+10     	; 0x63d6 <factory_mode+0x7a>
				reset_state = resetSelect();
    63cc:	0e 94 3f 29 	call	0x527e	; 0x527e <resetSelect>
    63d0:	80 93 32 23 	sts	0x2332, r24
    63d4:	0c c0       	rjmp	.+24     	; 0x63ee <factory_mode+0x92>
			else if(battery_option_flag == 1)
    63d6:	80 91 a4 22 	lds	r24, 0x22A4
    63da:	81 30       	cpi	r24, 0x01	; 1
    63dc:	21 f4       	brne	.+8      	; 0x63e6 <factory_mode+0x8a>
				battery_state = batterySelect();
    63de:	a1 df       	rcall	.-190    	; 0x6322 <batterySelect>
    63e0:	80 93 5d 23 	sts	0x235D, r24
    63e4:	04 c0       	rjmp	.+8      	; 0x63ee <factory_mode+0x92>
			else option_select = optionSelect();
    63e6:	0e 94 02 28 	call	0x5004	; 0x5004 <optionSelect>
    63ea:	80 93 b7 22 	sts	0x22B7, r24
		}
		
		switch(option_select)
    63ee:	e0 91 b7 22 	lds	r30, 0x22B7
    63f2:	8e 2f       	mov	r24, r30
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	fc 01       	movw	r30, r24
    63f8:	31 97       	sbiw	r30, 0x01	; 1
    63fa:	e9 30       	cpi	r30, 0x09	; 9
    63fc:	f1 05       	cpc	r31, r1
    63fe:	a8 f6       	brcc	.-86     	; 0x63aa <factory_mode+0x4e>
    6400:	88 27       	eor	r24, r24
    6402:	e3 58       	subi	r30, 0x83	; 131
    6404:	fe 4f       	sbci	r31, 0xFE	; 254
    6406:	8f 4f       	sbci	r24, 0xFF	; 255
    6408:	0c 94 71 4d 	jmp	0x9ae2	; 0x9ae2 <__tablejump2__>
		{
			case config:
				pneConfiguration();
    640c:	0e 94 ee 28 	call	0x51dc	; 0x51dc <pneConfiguration>
			break;
    6410:	cc cf       	rjmp	.-104    	; 0x63aa <factory_mode+0x4e>
			
			case display_info:
				pneDisplayInfo();
    6412:	8c dd       	rcall	.-1256   	; 0x5f2c <pneDisplayInfo>
			break;
    6414:	ca cf       	rjmp	.-108    	; 0x63aa <factory_mode+0x4e>
			
			case reset_flag:
				resetFlag();
    6416:	54 de       	rcall	.-856    	; 0x60c0 <resetFlag>
			break;
    6418:	c8 cf       	rjmp	.-112    	; 0x63aa <factory_mode+0x4e>
			
			case option_message:
			{
				//Welcome Message	
				send_usart_char("\r\n\r\n\r\nPNEWELS ");
    641a:	84 e3       	ldi	r24, 0x34	; 52
    641c:	97 e0       	ldi	r25, 0x07	; 7
    641e:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
				send_usart_char(version);
    6422:	83 e4       	ldi	r24, 0x43	; 67
    6424:	97 e0       	ldi	r25, 0x07	; 7
    6426:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
				send_usart_char(" ");
    642a:	8b ed       	ldi	r24, 0xDB	; 219
    642c:	94 e0       	ldi	r25, 0x04	; 4
    642e:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
				send_usart_char(version_date);
    6432:	82 e5       	ldi	r24, 0x52	; 82
    6434:	97 e0       	ldi	r25, 0x07	; 7
    6436:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
				send_usart_char("\r\n");
    643a:	8c e3       	ldi	r24, 0x3C	; 60
    643c:	96 e0       	ldi	r25, 0x06	; 6
    643e:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
				send_usart_char("1. Configuration\r\n2. Display info\r\n3. Test mode\r\n4. Reset device flag\r\n");
    6442:	87 e5       	ldi	r24, 0x57	; 87
    6444:	97 e0       	ldi	r25, 0x07	; 7
    6446:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
				send_usart_char("5. Dump Memory\r\n6. Dump Log Files\r\n7. Format Memory\r\n8. Battery Configuration\r\n");
    644a:	8f e9       	ldi	r24, 0x9F	; 159
    644c:	97 e0       	ldi	r25, 0x07	; 7
    644e:	0e 94 92 27 	call	0x4f24	; 0x4f24 <send_usart_char>
				option_select = idle;
    6452:	10 92 b7 22 	sts	0x22B7, r1
			}
			break;
    6456:	a9 cf       	rjmp	.-174    	; 0x63aa <factory_mode+0x4e>
			
			case test_mode:
				testMode();
    6458:	0e 94 5f 29 	call	0x52be	; 0x52be <testMode>
			break;
    645c:	a6 cf       	rjmp	.-180    	; 0x63aa <factory_mode+0x4e>
			
			case dump_memory:
				dump_eeprom();
    645e:	34 dd       	rcall	.-1432   	; 0x5ec8 <dump_eeprom>
			break;
    6460:	a4 cf       	rjmp	.-184    	; 0x63aa <factory_mode+0x4e>
			
			case dump_log:
				dump_log_file();
    6462:	a5 de       	rcall	.-694    	; 0x61ae <dump_log_file>
			break;
    6464:	a2 cf       	rjmp	.-188    	; 0x63aa <factory_mode+0x4e>

			case wipe_memory:
				erase_memory();
    6466:	d1 de       	rcall	.-606    	; 0x620a <erase_memory>
			break;
    6468:	a0 cf       	rjmp	.-192    	; 0x63aa <factory_mode+0x4e>
			
			case battery_set:
				battery_config();
    646a:	e3 de       	rcall	.-570    	; 0x6232 <battery_config>
			break;	
    646c:	9e cf       	rjmp	.-196    	; 0x63aa <factory_mode+0x4e>

0000646e <packet_data>:
void charge_to_rf()
{
	uint16_t address = memory_address_incr - 11;
	eeprom_to_rf(address);
	address = memory_address_incr - 22;
	eeprom_to_rf(address);
    646e:	2f 92       	push	r2
    6470:	3f 92       	push	r3
    6472:	4f 92       	push	r4
    6474:	5f 92       	push	r5
    6476:	6f 92       	push	r6
    6478:	7f 92       	push	r7
    647a:	8f 92       	push	r8
    647c:	9f 92       	push	r9
    647e:	af 92       	push	r10
    6480:	bf 92       	push	r11
    6482:	cf 92       	push	r12
    6484:	df 92       	push	r13
    6486:	ef 92       	push	r14
    6488:	ff 92       	push	r15
    648a:	0f 93       	push	r16
    648c:	1f 93       	push	r17
    648e:	cf 93       	push	r28
    6490:	df 93       	push	r29
    6492:	cd b7       	in	r28, 0x3d	; 61
    6494:	de b7       	in	r29, 0x3e	; 62
    6496:	28 97       	sbiw	r28, 0x08	; 8
    6498:	0f b6       	in	r0, 0x3f	; 63
    649a:	f8 94       	cli
    649c:	de bf       	out	0x3e, r29	; 62
    649e:	0f be       	out	0x3f, r0	; 63
    64a0:	cd bf       	out	0x3d, r28	; 61
    64a2:	e0 e6       	ldi	r30, 0x60	; 96
    64a4:	f2 e2       	ldi	r31, 0x22	; 34
    64a6:	c7 8c       	ldd	r12, Z+31	; 0x1f
    64a8:	20 e8       	ldi	r18, 0x80	; 128
    64aa:	c2 9e       	mul	r12, r18
    64ac:	60 01       	movw	r12, r0
    64ae:	11 24       	eor	r1, r1
    64b0:	d4 80       	ldd	r13, Z+4	; 0x04
    64b2:	8d 2d       	mov	r24, r13
    64b4:	81 70       	andi	r24, 0x01	; 1
    64b6:	c8 2a       	or	r12, r24
    64b8:	d3 80       	ldd	r13, Z+3	; 0x03
    64ba:	d0 fa       	bst	r13, 0
    64bc:	ee 24       	eor	r14, r14
    64be:	e0 f8       	bld	r14, 0
    64c0:	f1 2c       	mov	r15, r1
    64c2:	ee 0c       	add	r14, r14
    64c4:	ff 1c       	adc	r15, r15
    64c6:	ec 28       	or	r14, r12
    64c8:	f7 80       	ldd	r15, Z+7	; 0x07
    64ca:	0f 2d       	mov	r16, r15
    64cc:	01 70       	andi	r16, 0x01	; 1
    64ce:	10 e0       	ldi	r17, 0x00	; 0
    64d0:	00 0f       	add	r16, r16
    64d2:	11 1f       	adc	r17, r17
    64d4:	00 0f       	add	r16, r16
    64d6:	11 1f       	adc	r17, r17
    64d8:	e0 2a       	or	r14, r16
    64da:	10 81       	ld	r17, Z
    64dc:	11 70       	andi	r17, 0x01	; 1
    64de:	1f 83       	std	Y+7, r17	; 0x07
    64e0:	18 86       	std	Y+8, r1	; 0x08
    64e2:	0f 81       	ldd	r16, Y+7	; 0x07
    64e4:	18 85       	ldd	r17, Y+8	; 0x08
    64e6:	00 0f       	add	r16, r16
    64e8:	11 1f       	adc	r17, r17
    64ea:	00 0f       	add	r16, r16
    64ec:	11 1f       	adc	r17, r17
    64ee:	00 0f       	add	r16, r16
    64f0:	11 1f       	adc	r17, r17
    64f2:	e0 2a       	or	r14, r16
    64f4:	15 81       	ldd	r17, Z+5	; 0x05
    64f6:	a1 2f       	mov	r26, r17
    64f8:	a1 70       	andi	r26, 0x01	; 1
    64fa:	b0 e0       	ldi	r27, 0x00	; 0
    64fc:	a2 95       	swap	r26
    64fe:	b2 95       	swap	r27
    6500:	b0 7f       	andi	r27, 0xF0	; 240
    6502:	ba 27       	eor	r27, r26
    6504:	a0 7f       	andi	r26, 0xF0	; 240
    6506:	ba 27       	eor	r27, r26
    6508:	ea 2a       	or	r14, r26
    650a:	a0 89       	ldd	r26, Z+16	; 0x10
    650c:	6a 2f       	mov	r22, r26
    650e:	61 70       	andi	r22, 0x01	; 1
    6510:	70 e0       	ldi	r23, 0x00	; 0
    6512:	66 0f       	add	r22, r22
    6514:	77 1f       	adc	r23, r23
    6516:	62 95       	swap	r22
    6518:	72 95       	swap	r23
    651a:	70 7f       	andi	r23, 0xF0	; 240
    651c:	76 27       	eor	r23, r22
    651e:	60 7f       	andi	r22, 0xF0	; 240
    6520:	76 27       	eor	r23, r22
    6522:	6e 29       	or	r22, r14
    6524:	70 85       	ldd	r23, Z+8	; 0x08
    6526:	47 2f       	mov	r20, r23
    6528:	41 70       	andi	r20, 0x01	; 1
    652a:	50 e0       	ldi	r21, 0x00	; 0
    652c:	00 24       	eor	r0, r0
    652e:	56 95       	lsr	r21
    6530:	47 95       	ror	r20
    6532:	07 94       	ror	r0
    6534:	56 95       	lsr	r21
    6536:	47 95       	ror	r20
    6538:	07 94       	ror	r0
    653a:	54 2f       	mov	r21, r20
    653c:	40 2d       	mov	r20, r0
    653e:	46 2b       	or	r20, r22
    6540:	40 93 54 22 	sts	0x2254, r20
    6544:	47 a1       	ldd	r20, Z+39	; 0x27
    6546:	90 e8       	ldi	r25, 0x80	; 128
    6548:	49 9f       	mul	r20, r25
    654a:	a0 01       	movw	r20, r0
    654c:	11 24       	eor	r1, r1
    654e:	52 89       	ldd	r21, Z+18	; 0x12
    6550:	57 70       	andi	r21, 0x07	; 7
    6552:	45 2b       	or	r20, r21
    6554:	53 85       	ldd	r21, Z+11	; 0x0b
    6556:	25 2f       	mov	r18, r21
    6558:	21 70       	andi	r18, 0x01	; 1
    655a:	30 e0       	ldi	r19, 0x00	; 0
    655c:	22 0f       	add	r18, r18
    655e:	33 1f       	adc	r19, r19
    6560:	22 0f       	add	r18, r18
    6562:	33 1f       	adc	r19, r19
    6564:	22 0f       	add	r18, r18
    6566:	33 1f       	adc	r19, r19
    6568:	24 2b       	or	r18, r20
    656a:	36 85       	ldd	r19, Z+14	; 0x0e
    656c:	83 2f       	mov	r24, r19
    656e:	81 70       	andi	r24, 0x01	; 1
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	82 95       	swap	r24
    6574:	92 95       	swap	r25
    6576:	90 7f       	andi	r25, 0xF0	; 240
    6578:	98 27       	eor	r25, r24
    657a:	80 7f       	andi	r24, 0xF0	; 240
    657c:	98 27       	eor	r25, r24
    657e:	82 2b       	or	r24, r18
    6580:	95 a1       	ldd	r25, Z+37	; 0x25
    6582:	90 fb       	bst	r25, 0
    6584:	aa 24       	eor	r10, r10
    6586:	a0 f8       	bld	r10, 0
    6588:	b1 2c       	mov	r11, r1
    658a:	aa 0c       	add	r10, r10
    658c:	bb 1c       	adc	r11, r11
    658e:	aa 0c       	add	r10, r10
    6590:	bb 1c       	adc	r11, r11
    6592:	aa 0c       	add	r10, r10
    6594:	bb 1c       	adc	r11, r11
    6596:	aa 0c       	add	r10, r10
    6598:	bb 1c       	adc	r11, r11
    659a:	aa 0c       	add	r10, r10
    659c:	bb 1c       	adc	r11, r11
    659e:	a8 2a       	or	r10, r24
    65a0:	86 a1       	ldd	r24, Z+38	; 0x26
    65a2:	80 fb       	bst	r24, 0
    65a4:	88 24       	eor	r8, r8
    65a6:	80 f8       	bld	r8, 0
    65a8:	91 2c       	mov	r9, r1
    65aa:	00 24       	eor	r0, r0
    65ac:	96 94       	lsr	r9
    65ae:	87 94       	ror	r8
    65b0:	07 94       	ror	r0
    65b2:	96 94       	lsr	r9
    65b4:	87 94       	ror	r8
    65b6:	07 94       	ror	r0
    65b8:	98 2c       	mov	r9, r8
    65ba:	80 2c       	mov	r8, r0
    65bc:	8a 28       	or	r8, r10
    65be:	80 92 53 22 	sts	0x2253, r8
    65c2:	81 a1       	ldd	r24, Z+33	; 0x21
    65c4:	80 fb       	bst	r24, 0
    65c6:	66 24       	eor	r6, r6
    65c8:	60 f8       	bld	r6, 0
    65ca:	71 2c       	mov	r7, r1
    65cc:	66 0c       	add	r6, r6
    65ce:	77 1c       	adc	r7, r7
    65d0:	82 a1       	ldd	r24, Z+34	; 0x22
    65d2:	80 fb       	bst	r24, 0
    65d4:	44 24       	eor	r4, r4
    65d6:	40 f8       	bld	r4, 0
    65d8:	51 2c       	mov	r5, r1
    65da:	44 0c       	add	r4, r4
    65dc:	55 1c       	adc	r5, r5
    65de:	44 0c       	add	r4, r4
    65e0:	55 1c       	adc	r5, r5
    65e2:	46 28       	or	r4, r6
    65e4:	80 a1       	ldd	r24, Z+32	; 0x20
    65e6:	81 70       	andi	r24, 0x01	; 1
    65e8:	48 2a       	or	r4, r24
    65ea:	83 a1       	ldd	r24, Z+35	; 0x23
    65ec:	80 fb       	bst	r24, 0
    65ee:	22 24       	eor	r2, r2
    65f0:	20 f8       	bld	r2, 0
    65f2:	31 2c       	mov	r3, r1
    65f4:	22 0c       	add	r2, r2
    65f6:	33 1c       	adc	r3, r3
    65f8:	22 0c       	add	r2, r2
    65fa:	33 1c       	adc	r3, r3
    65fc:	22 0c       	add	r2, r2
    65fe:	33 1c       	adc	r3, r3
    6600:	24 28       	or	r2, r4
    6602:	84 a1       	ldd	r24, Z+36	; 0x24
    6604:	81 70       	andi	r24, 0x01	; 1
    6606:	89 83       	std	Y+1, r24	; 0x01
    6608:	1a 82       	std	Y+2, r1	; 0x02
    660a:	49 81       	ldd	r20, Y+1	; 0x01
    660c:	5a 81       	ldd	r21, Y+2	; 0x02
    660e:	42 95       	swap	r20
    6610:	52 95       	swap	r21
    6612:	50 7f       	andi	r21, 0xF0	; 240
    6614:	54 27       	eor	r21, r20
    6616:	40 7f       	andi	r20, 0xF0	; 240
    6618:	54 27       	eor	r21, r20
    661a:	82 2d       	mov	r24, r2
    661c:	84 2b       	or	r24, r20
    661e:	91 85       	ldd	r25, Z+9	; 0x09
    6620:	91 70       	andi	r25, 0x01	; 1
    6622:	9b 83       	std	Y+3, r25	; 0x03
    6624:	1c 82       	std	Y+4, r1	; 0x04
    6626:	2b 81       	ldd	r18, Y+3	; 0x03
    6628:	3c 81       	ldd	r19, Y+4	; 0x04
    662a:	22 0f       	add	r18, r18
    662c:	33 1f       	adc	r19, r19
    662e:	22 95       	swap	r18
    6630:	32 95       	swap	r19
    6632:	30 7f       	andi	r19, 0xF0	; 240
    6634:	32 27       	eor	r19, r18
    6636:	20 7f       	andi	r18, 0xF0	; 240
    6638:	32 27       	eor	r19, r18
    663a:	28 2b       	or	r18, r24
    663c:	82 85       	ldd	r24, Z+10	; 0x0a
    663e:	81 70       	andi	r24, 0x01	; 1
    6640:	8d 83       	std	Y+5, r24	; 0x05
    6642:	1e 82       	std	Y+6, r1	; 0x06
    6644:	8d 81       	ldd	r24, Y+5	; 0x05
    6646:	9e 81       	ldd	r25, Y+6	; 0x06
    6648:	00 24       	eor	r0, r0
    664a:	96 95       	lsr	r25
    664c:	87 95       	ror	r24
    664e:	07 94       	ror	r0
    6650:	96 95       	lsr	r25
    6652:	87 95       	ror	r24
    6654:	07 94       	ror	r0
    6656:	98 2f       	mov	r25, r24
    6658:	80 2d       	mov	r24, r0
    665a:	82 2b       	or	r24, r18
    665c:	80 93 52 22 	sts	0x2252, r24
    6660:	28 96       	adiw	r28, 0x08	; 8
    6662:	0f b6       	in	r0, 0x3f	; 63
    6664:	f8 94       	cli
    6666:	de bf       	out	0x3e, r29	; 62
    6668:	0f be       	out	0x3f, r0	; 63
    666a:	cd bf       	out	0x3d, r28	; 61
    666c:	df 91       	pop	r29
    666e:	cf 91       	pop	r28
    6670:	1f 91       	pop	r17
    6672:	0f 91       	pop	r16
    6674:	ff 90       	pop	r15
    6676:	ef 90       	pop	r14
    6678:	df 90       	pop	r13
    667a:	cf 90       	pop	r12
    667c:	bf 90       	pop	r11
    667e:	af 90       	pop	r10
    6680:	9f 90       	pop	r9
    6682:	8f 90       	pop	r8
    6684:	7f 90       	pop	r7
    6686:	6f 90       	pop	r6
    6688:	5f 90       	pop	r5
    668a:	4f 90       	pop	r4
    668c:	3f 90       	pop	r3
    668e:	2f 90       	pop	r2
    6690:	08 95       	ret

00006692 <reboot_to_rf>:
    6692:	ff cf       	rjmp	.-2      	; 0x6692 <reboot_to_rf>

00006694 <WPS_pairing>:
    6694:	cf 93       	push	r28
    6696:	df 93       	push	r29
    6698:	ec 01       	movw	r28, r24
    669a:	68 81       	ld	r22, Y
    669c:	8d ef       	ldi	r24, 0xFD	; 253
    669e:	9f e0       	ldi	r25, 0x0F	; 15
    66a0:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
    66a4:	69 81       	ldd	r22, Y+1	; 0x01
    66a6:	8c ef       	ldi	r24, 0xFC	; 252
    66a8:	9f e0       	ldi	r25, 0x0F	; 15
    66aa:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
    66ae:	6a 81       	ldd	r22, Y+2	; 0x02
    66b0:	8f ef       	ldi	r24, 0xFF	; 255
    66b2:	9f e0       	ldi	r25, 0x0F	; 15
    66b4:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
    66b8:	6b 81       	ldd	r22, Y+3	; 0x03
    66ba:	8e ef       	ldi	r24, 0xFE	; 254
    66bc:	9f e0       	ldi	r25, 0x0F	; 15
    66be:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
    66c2:	6c 81       	ldd	r22, Y+4	; 0x04
    66c4:	81 e0       	ldi	r24, 0x01	; 1
    66c6:	90 e1       	ldi	r25, 0x10	; 16
    66c8:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
    66cc:	6d 81       	ldd	r22, Y+5	; 0x05
    66ce:	80 e0       	ldi	r24, 0x00	; 0
    66d0:	90 e1       	ldi	r25, 0x10	; 16
    66d2:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
    66d6:	df 91       	pop	r29
    66d8:	cf 91       	pop	r28
    66da:	08 95       	ret

000066dc <send_to_rf>:
    66dc:	af 92       	push	r10
    66de:	bf 92       	push	r11
    66e0:	cf 92       	push	r12
    66e2:	df 92       	push	r13
    66e4:	ef 92       	push	r14
    66e6:	ff 92       	push	r15
    66e8:	0f 93       	push	r16
    66ea:	1f 93       	push	r17
    66ec:	cf 93       	push	r28
    66ee:	df 93       	push	r29
    66f0:	6c 01       	movw	r12, r24
    66f2:	f6 2e       	mov	r15, r22
    66f4:	5a 01       	movw	r10, r20
    66f6:	0e 94 49 03 	call	0x692	; 0x692 <APP_NwkGetBuffer>
    66fa:	ec 01       	movw	r28, r24
    66fc:	00 97       	sbiw	r24, 0x00	; 0
    66fe:	09 f4       	brne	.+2      	; 0x6702 <send_to_rf+0x26>
    6700:	86 c0       	rjmp	.+268    	; 0x680e <send_to_rf+0x132>
    6702:	80 58       	subi	r24, 0x80	; 128
    6704:	9f 4f       	sbci	r25, 0xFF	; 255
    6706:	dc 01       	movw	r26, r24
    6708:	1c 92       	st	X, r1
    670a:	8e 01       	movw	r16, r28
    670c:	0d 5e       	subi	r16, 0xED	; 237
    670e:	1f 4f       	sbci	r17, 0xFF	; 255
    6710:	28 e0       	ldi	r18, 0x08	; 8
    6712:	f5 01       	movw	r30, r10
    6714:	d8 01       	movw	r26, r16
    6716:	01 90       	ld	r0, Z+
    6718:	0d 92       	st	X+, r0
    671a:	2a 95       	dec	r18
    671c:	e1 f7       	brne	.-8      	; 0x6716 <send_to_rf+0x3a>
    671e:	28 e0       	ldi	r18, 0x08	; 8
    6720:	fc 01       	movw	r30, r24
    6722:	20 83       	st	Z, r18
    6724:	ff 20       	and	r15, r15
    6726:	89 f1       	breq	.+98     	; 0x678a <send_to_rf+0xae>
    6728:	56 01       	movw	r10, r12
    672a:	6f ef       	ldi	r22, 0xFF	; 255
    672c:	6f 0d       	add	r22, r15
    672e:	70 e0       	ldi	r23, 0x00	; 0
    6730:	6f 5f       	subi	r22, 0xFF	; 255
    6732:	7f 4f       	sbci	r23, 0xFF	; 255
    6734:	6c 0d       	add	r22, r12
    6736:	7d 1d       	adc	r23, r13
    6738:	fc 01       	movw	r30, r24
    673a:	0f 2e       	mov	r0, r31
    673c:	fb e5       	ldi	r31, 0x5B	; 91
    673e:	df 2e       	mov	r13, r31
    6740:	f0 2d       	mov	r31, r0
    6742:	0f 2e       	mov	r0, r31
    6744:	fd e5       	ldi	r31, 0x5D	; 93
    6746:	ef 2e       	mov	r14, r31
    6748:	f0 2d       	mov	r31, r0
    674a:	90 81       	ld	r25, Z
    674c:	9e 01       	movw	r18, r28
    674e:	29 0f       	add	r18, r25
    6750:	31 1d       	adc	r19, r1
    6752:	d9 01       	movw	r26, r18
    6754:	53 96       	adiw	r26, 0x13	; 19
    6756:	dc 92       	st	X, r13
    6758:	22 e0       	ldi	r18, 0x02	; 2
    675a:	29 0f       	add	r18, r25
    675c:	20 83       	st	Z, r18
    675e:	d5 01       	movw	r26, r10
    6760:	3d 91       	ld	r19, X+
    6762:	5d 01       	movw	r10, r26
    6764:	81 e0       	ldi	r24, 0x01	; 1
    6766:	89 0f       	add	r24, r25
    6768:	ae 01       	movw	r20, r28
    676a:	48 0f       	add	r20, r24
    676c:	51 1d       	adc	r21, r1
    676e:	da 01       	movw	r26, r20
    6770:	53 96       	adiw	r26, 0x13	; 19
    6772:	3c 93       	st	X, r19
    6774:	9d 5f       	subi	r25, 0xFD	; 253
    6776:	90 83       	st	Z, r25
    6778:	ce 01       	movw	r24, r28
    677a:	82 0f       	add	r24, r18
    677c:	91 1d       	adc	r25, r1
    677e:	dc 01       	movw	r26, r24
    6780:	53 96       	adiw	r26, 0x13	; 19
    6782:	ec 92       	st	X, r14
    6784:	a6 16       	cp	r10, r22
    6786:	b7 06       	cpc	r11, r23
    6788:	01 f7       	brne	.-64     	; 0x674a <send_to_rf+0x6e>
    678a:	ad d4       	rcall	.+2394   	; 0x70e6 <crcInit>
    678c:	6e 01       	movw	r12, r28
    678e:	b0 e8       	ldi	r27, 0x80	; 128
    6790:	cb 0e       	add	r12, r27
    6792:	d1 1c       	adc	r13, r1
    6794:	f6 01       	movw	r30, r12
    6796:	b0 80       	ld	r11, Z
    6798:	81 e0       	ldi	r24, 0x01	; 1
    679a:	8b 0d       	add	r24, r11
    679c:	80 83       	st	Z, r24
    679e:	8f 2d       	mov	r24, r15
    67a0:	90 e0       	ldi	r25, 0x00	; 0
    67a2:	7c 01       	movw	r14, r24
    67a4:	f8 e0       	ldi	r31, 0x08	; 8
    67a6:	ef 0e       	add	r14, r31
    67a8:	f1 1c       	adc	r15, r1
    67aa:	88 0f       	add	r24, r24
    67ac:	99 1f       	adc	r25, r25
    67ae:	e8 0e       	add	r14, r24
    67b0:	f9 1e       	adc	r15, r25
    67b2:	b7 01       	movw	r22, r14
    67b4:	c8 01       	movw	r24, r16
    67b6:	b4 d4       	rcall	.+2408   	; 0x7120 <crcFast>
    67b8:	fe 01       	movw	r30, r28
    67ba:	eb 0d       	add	r30, r11
    67bc:	f1 1d       	adc	r31, r1
    67be:	93 8b       	std	Z+19, r25	; 0x13
    67c0:	d6 01       	movw	r26, r12
    67c2:	bc 90       	ld	r11, X
    67c4:	81 e0       	ldi	r24, 0x01	; 1
    67c6:	8b 0d       	add	r24, r11
    67c8:	8c 93       	st	X, r24
    67ca:	b7 01       	movw	r22, r14
    67cc:	c8 01       	movw	r24, r16
    67ce:	a8 d4       	rcall	.+2384   	; 0x7120 <crcFast>
    67d0:	fe 01       	movw	r30, r28
    67d2:	eb 0d       	add	r30, r11
    67d4:	f1 1d       	adc	r31, r1
    67d6:	83 8b       	std	Z+19, r24	; 0x13
    67d8:	f6 01       	movw	r30, r12
    67da:	60 81       	ld	r22, Z
    67dc:	70 e0       	ldi	r23, 0x00	; 0
    67de:	26 e0       	ldi	r18, 0x06	; 6
    67e0:	30 e0       	ldi	r19, 0x00	; 0
    67e2:	48 e2       	ldi	r20, 0x28	; 40
    67e4:	52 e0       	ldi	r21, 0x02	; 2
    67e6:	c8 01       	movw	r24, r16
    67e8:	0e 94 0d 4d 	call	0x9a1a	; 0x9a1a <pnesign>
    67ec:	d6 01       	movw	r26, r12
    67ee:	2c 91       	ld	r18, X
    67f0:	fe 01       	movw	r30, r28
    67f2:	e2 0f       	add	r30, r18
    67f4:	f1 1d       	adc	r31, r1
    67f6:	93 8b       	std	Z+19, r25	; 0x13
    67f8:	92 e0       	ldi	r25, 0x02	; 2
    67fa:	92 0f       	add	r25, r18
    67fc:	9c 93       	st	X, r25
    67fe:	2f 5f       	subi	r18, 0xFF	; 255
    6800:	fe 01       	movw	r30, r28
    6802:	e2 0f       	add	r30, r18
    6804:	f1 1d       	adc	r31, r1
    6806:	83 8b       	std	Z+19, r24	; 0x13
    6808:	ce 01       	movw	r24, r28
    680a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <APP_NwkSendBuffer>
    680e:	df 91       	pop	r29
    6810:	cf 91       	pop	r28
    6812:	1f 91       	pop	r17
    6814:	0f 91       	pop	r16
    6816:	ff 90       	pop	r15
    6818:	ef 90       	pop	r14
    681a:	df 90       	pop	r13
    681c:	cf 90       	pop	r12
    681e:	bf 90       	pop	r11
    6820:	af 90       	pop	r10
    6822:	08 95       	ret

00006824 <status_send_to_rf>:
    6824:	cf 93       	push	r28
    6826:	df 93       	push	r29
    6828:	22 de       	rcall	.-956    	; 0x646e <packet_data>
    682a:	ce ee       	ldi	r28, 0xEE	; 238
    682c:	d1 e2       	ldi	r29, 0x21	; 33
    682e:	80 91 54 22 	lds	r24, 0x2254
    6832:	88 83       	st	Y, r24
    6834:	80 91 53 22 	lds	r24, 0x2253
    6838:	89 83       	std	Y+1, r24	; 0x01
    683a:	80 91 52 22 	lds	r24, 0x2252
    683e:	8a 83       	std	Y+2, r24	; 0x02
    6840:	e0 e6       	ldi	r30, 0x60	; 96
    6842:	f2 e2       	ldi	r31, 0x22	; 34
    6844:	86 81       	ldd	r24, Z+6	; 0x06
    6846:	8b 83       	std	Y+3, r24	; 0x03
    6848:	81 81       	ldd	r24, Z+1	; 0x01
    684a:	8c 83       	std	Y+4, r24	; 0x04
    684c:	82 81       	ldd	r24, Z+2	; 0x02
    684e:	8d 83       	std	Y+5, r24	; 0x05
    6850:	9f d3       	rcall	.+1854   	; 0x6f90 <get_timestamp>
    6852:	9e 83       	std	Y+6, r25	; 0x06
    6854:	9d d3       	rcall	.+1850   	; 0x6f90 <get_timestamp>
    6856:	8f 83       	std	Y+7, r24	; 0x07
    6858:	9b d3       	rcall	.+1846   	; 0x6f90 <get_timestamp>
    685a:	78 87       	std	Y+8, r23	; 0x08
    685c:	99 d3       	rcall	.+1842   	; 0x6f90 <get_timestamp>
    685e:	69 87       	std	Y+9, r22	; 0x09
    6860:	47 e4       	ldi	r20, 0x47	; 71
    6862:	58 e0       	ldi	r21, 0x08	; 8
    6864:	6a e0       	ldi	r22, 0x0A	; 10
    6866:	ce 01       	movw	r24, r28
    6868:	39 df       	rcall	.-398    	; 0x66dc <send_to_rf>
    686a:	df 91       	pop	r29
    686c:	cf 91       	pop	r28
    686e:	08 95       	ret

00006870 <emergency_on_to_rf>:
    6870:	81 e0       	ldi	r24, 0x01	; 1
    6872:	80 93 68 22 	sts	0x2268, r24
    6876:	49 e5       	ldi	r20, 0x59	; 89
    6878:	58 e0       	ldi	r21, 0x08	; 8
    687a:	60 e0       	ldi	r22, 0x00	; 0
    687c:	8e ee       	ldi	r24, 0xEE	; 238
    687e:	91 e2       	ldi	r25, 0x21	; 33
    6880:	2d cf       	rjmp	.-422    	; 0x66dc <send_to_rf>
    6882:	08 95       	ret

00006884 <emergency_off_to_rf>:
    6884:	10 92 68 22 	sts	0x2268, r1
    6888:	49 e5       	ldi	r20, 0x59	; 89
    688a:	58 e0       	ldi	r21, 0x08	; 8
    688c:	60 e0       	ldi	r22, 0x00	; 0
    688e:	8e ee       	ldi	r24, 0xEE	; 238
    6890:	91 e2       	ldi	r25, 0x21	; 33
    6892:	24 cf       	rjmp	.-440    	; 0x66dc <send_to_rf>
    6894:	08 95       	ret

00006896 <eeprom_to_rf>:
    6896:	ef 92       	push	r14
    6898:	ff 92       	push	r15
    689a:	0f 93       	push	r16
    689c:	1f 93       	push	r17
    689e:	cf 93       	push	r28
    68a0:	df 93       	push	r29
    68a2:	ec 01       	movw	r28, r24
    68a4:	0e ee       	ldi	r16, 0xEE	; 238
    68a6:	11 e2       	ldi	r17, 0x21	; 33
    68a8:	7c 01       	movw	r14, r24
    68aa:	8b e0       	ldi	r24, 0x0B	; 11
    68ac:	e8 0e       	add	r14, r24
    68ae:	f1 1c       	adc	r15, r1
    68b0:	2d 2f       	mov	r18, r29
    68b2:	4c 2f       	mov	r20, r28
    68b4:	65 e4       	ldi	r22, 0x45	; 69
    68b6:	8f ea       	ldi	r24, 0xAF	; 175
    68b8:	0e 94 48 22 	call	0x4490	; 0x4490 <PNEWELSE2promRead>
    68bc:	f8 01       	movw	r30, r16
    68be:	81 93       	st	Z+, r24
    68c0:	8f 01       	movw	r16, r30
    68c2:	21 96       	adiw	r28, 0x01	; 1
    68c4:	8a e0       	ldi	r24, 0x0A	; 10
    68c6:	90 e0       	ldi	r25, 0x00	; 0
    68c8:	0e 94 30 21 	call	0x4260	; 0x4260 <pne_delayms>
    68cc:	ce 15       	cp	r28, r14
    68ce:	df 05       	cpc	r29, r15
    68d0:	79 f7       	brne	.-34     	; 0x68b0 <eeprom_to_rf+0x1a>
    68d2:	43 e5       	ldi	r20, 0x53	; 83
    68d4:	52 e0       	ldi	r21, 0x02	; 2
    68d6:	6b e0       	ldi	r22, 0x0B	; 11
    68d8:	8e ee       	ldi	r24, 0xEE	; 238
    68da:	91 e2       	ldi	r25, 0x21	; 33
    68dc:	ff de       	rcall	.-514    	; 0x66dc <send_to_rf>
    68de:	df 91       	pop	r29
    68e0:	cf 91       	pop	r28
    68e2:	1f 91       	pop	r17
    68e4:	0f 91       	pop	r16
    68e6:	ff 90       	pop	r15
    68e8:	ef 90       	pop	r14
    68ea:	08 95       	ret

000068ec <error_to_rf>:
	send_to_rf(data_to_rf, 11, "[rd rom]");
}

void error_to_rf(uint8_t alert_type)
{
	switch(alert_type)
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	8c 30       	cpi	r24, 0x0C	; 12
    68f0:	91 05       	cpc	r25, r1
    68f2:	08 f0       	brcs	.+2      	; 0x68f6 <error_to_rf+0xa>
    68f4:	7d c0       	rjmp	.+250    	; 0x69f0 <error_to_rf+0x104>
    68f6:	fc 01       	movw	r30, r24
    68f8:	88 27       	eor	r24, r24
    68fa:	ea 57       	subi	r30, 0x7A	; 122
    68fc:	fe 4f       	sbci	r31, 0xFE	; 254
    68fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6900:	0c 94 71 4d 	jmp	0x9ae2	; 0x9ae2 <__tablejump2__>
	{
		case temperature_alert:
			data_to_rf[0] = temperature_alert;
    6904:	10 92 ee 21 	sts	0x21EE, r1
			send_to_rf(data_to_rf,1,"[error!]");
    6908:	42 e6       	ldi	r20, 0x62	; 98
    690a:	58 e0       	ldi	r21, 0x08	; 8
    690c:	61 e0       	ldi	r22, 0x01	; 1
    690e:	8e ee       	ldi	r24, 0xEE	; 238
    6910:	91 e2       	ldi	r25, 0x21	; 33
    6912:	e4 ce       	rjmp	.-568    	; 0x66dc <send_to_rf>
			break;
    6914:	08 95       	ret
			
		case battery_dead_alert:
			data_to_rf[0] = battery_dead_alert;
    6916:	81 e0       	ldi	r24, 0x01	; 1
    6918:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    691c:	42 e6       	ldi	r20, 0x62	; 98
    691e:	58 e0       	ldi	r21, 0x08	; 8
    6920:	61 e0       	ldi	r22, 0x01	; 1
    6922:	8e ee       	ldi	r24, 0xEE	; 238
    6924:	91 e2       	ldi	r25, 0x21	; 33
    6926:	da ce       	rjmp	.-588    	; 0x66dc <send_to_rf>
			break;
    6928:	08 95       	ret
			
		case conflicted_command:
			data_to_rf[0] = conflicted_command;
    692a:	83 e0       	ldi	r24, 0x03	; 3
    692c:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6930:	42 e6       	ldi	r20, 0x62	; 98
    6932:	58 e0       	ldi	r21, 0x08	; 8
    6934:	61 e0       	ldi	r22, 0x01	; 1
    6936:	8e ee       	ldi	r24, 0xEE	; 238
    6938:	91 e2       	ldi	r25, 0x21	; 33
    693a:	d0 ce       	rjmp	.-608    	; 0x66dc <send_to_rf>
			break;
    693c:	08 95       	ret
		
		case battery_wrong_alert:
			data_to_rf[0] = battery_wrong_alert;
    693e:	82 e0       	ldi	r24, 0x02	; 2
    6940:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6944:	42 e6       	ldi	r20, 0x62	; 98
    6946:	58 e0       	ldi	r21, 0x08	; 8
    6948:	61 e0       	ldi	r22, 0x01	; 1
    694a:	8e ee       	ldi	r24, 0xEE	; 238
    694c:	91 e2       	ldi	r25, 0x21	; 33
    694e:	c6 ce       	rjmp	.-628    	; 0x66dc <send_to_rf>
			break;
    6950:	08 95       	ret
			
		case read_eeprom_error:
			data_to_rf[0] = read_eeprom_error;
    6952:	84 e0       	ldi	r24, 0x04	; 4
    6954:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6958:	42 e6       	ldi	r20, 0x62	; 98
    695a:	58 e0       	ldi	r21, 0x08	; 8
    695c:	61 e0       	ldi	r22, 0x01	; 1
    695e:	8e ee       	ldi	r24, 0xEE	; 238
    6960:	91 e2       	ldi	r25, 0x21	; 33
    6962:	bc ce       	rjmp	.-648    	; 0x66dc <send_to_rf>
			break;
    6964:	08 95       	ret
			
		case hardware_error:
			data_to_rf[0] = hardware_error;
    6966:	85 e0       	ldi	r24, 0x05	; 5
    6968:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    696c:	42 e6       	ldi	r20, 0x62	; 98
    696e:	58 e0       	ldi	r21, 0x08	; 8
    6970:	61 e0       	ldi	r22, 0x01	; 1
    6972:	8e ee       	ldi	r24, 0xEE	; 238
    6974:	91 e2       	ldi	r25, 0x21	; 33
    6976:	b2 ce       	rjmp	.-668    	; 0x66dc <send_to_rf>
			break;
    6978:	08 95       	ret
			
		case time_invalid_data_size:
			data_to_rf[0] = time_invalid_data_size;
    697a:	86 e0       	ldi	r24, 0x06	; 6
    697c:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6980:	42 e6       	ldi	r20, 0x62	; 98
    6982:	58 e0       	ldi	r21, 0x08	; 8
    6984:	61 e0       	ldi	r22, 0x01	; 1
    6986:	8e ee       	ldi	r24, 0xEE	; 238
    6988:	91 e2       	ldi	r25, 0x21	; 33
    698a:	a8 ce       	rjmp	.-688    	; 0x66dc <send_to_rf>
			break;
    698c:	08 95       	ret
		
		case time_crc_error:
			data_to_rf[0] = time_crc_error;
    698e:	87 e0       	ldi	r24, 0x07	; 7
    6990:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6994:	42 e6       	ldi	r20, 0x62	; 98
    6996:	58 e0       	ldi	r21, 0x08	; 8
    6998:	61 e0       	ldi	r22, 0x01	; 1
    699a:	8e ee       	ldi	r24, 0xEE	; 238
    699c:	91 e2       	ldi	r25, 0x21	; 33
    699e:	9e ce       	rjmp	.-708    	; 0x66dc <send_to_rf>
			break;
    69a0:	08 95       	ret
		
		case wps_invalid_data_size:
			data_to_rf[0] = wps_invalid_data_size;
    69a2:	88 e0       	ldi	r24, 0x08	; 8
    69a4:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69a8:	42 e6       	ldi	r20, 0x62	; 98
    69aa:	58 e0       	ldi	r21, 0x08	; 8
    69ac:	61 e0       	ldi	r22, 0x01	; 1
    69ae:	8e ee       	ldi	r24, 0xEE	; 238
    69b0:	91 e2       	ldi	r25, 0x21	; 33
    69b2:	94 ce       	rjmp	.-728    	; 0x66dc <send_to_rf>
			break;
    69b4:	08 95       	ret
			
		case invalid_command_error:
			data_to_rf[0] = invalid_command_error;
    69b6:	8b e0       	ldi	r24, 0x0B	; 11
    69b8:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69bc:	42 e6       	ldi	r20, 0x62	; 98
    69be:	58 e0       	ldi	r21, 0x08	; 8
    69c0:	61 e0       	ldi	r22, 0x01	; 1
    69c2:	8e ee       	ldi	r24, 0xEE	; 238
    69c4:	91 e2       	ldi	r25, 0x21	; 33
    69c6:	8a ce       	rjmp	.-748    	; 0x66dc <send_to_rf>
			break;
    69c8:	08 95       	ret
			
		case wps_invalid_UID:
			data_to_rf[0] = wps_invalid_UID;
    69ca:	89 e0       	ldi	r24, 0x09	; 9
    69cc:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69d0:	42 e6       	ldi	r20, 0x62	; 98
    69d2:	58 e0       	ldi	r21, 0x08	; 8
    69d4:	61 e0       	ldi	r22, 0x01	; 1
    69d6:	8e ee       	ldi	r24, 0xEE	; 238
    69d8:	91 e2       	ldi	r25, 0x21	; 33
    69da:	80 ce       	rjmp	.-768    	; 0x66dc <send_to_rf>
			break;
    69dc:	08 95       	ret
			
		case wps_crc_error:
			data_to_rf[0] = wps_crc_error;
    69de:	8a e0       	ldi	r24, 0x0A	; 10
    69e0:	80 93 ee 21 	sts	0x21EE, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69e4:	42 e6       	ldi	r20, 0x62	; 98
    69e6:	58 e0       	ldi	r21, 0x08	; 8
    69e8:	61 e0       	ldi	r22, 0x01	; 1
    69ea:	8e ee       	ldi	r24, 0xEE	; 238
    69ec:	91 e2       	ldi	r25, 0x21	; 33
    69ee:	76 ce       	rjmp	.-788    	; 0x66dc <send_to_rf>
    69f0:	08 95       	ret

000069f2 <pend_to_rf>:
	}
}

void pend_to_rf(char pend_type)
{
	switch(pend_type)
    69f2:	83 36       	cpi	r24, 0x63	; 99
    69f4:	19 f0       	breq	.+6      	; 0x69fc <pend_to_rf+0xa>
    69f6:	84 36       	cpi	r24, 0x64	; 100
    69f8:	41 f0       	breq	.+16     	; 0x6a0a <pend_to_rf+0x18>
    69fa:	08 95       	ret
	{
		case 'c':
			send_to_rf(data_to_rf, 0, "[chrgng]");
    69fc:	4b e6       	ldi	r20, 0x6B	; 107
    69fe:	58 e0       	ldi	r21, 0x08	; 8
    6a00:	60 e0       	ldi	r22, 0x00	; 0
    6a02:	8e ee       	ldi	r24, 0xEE	; 238
    6a04:	91 e2       	ldi	r25, 0x21	; 33
    6a06:	6a ce       	rjmp	.-812    	; 0x66dc <send_to_rf>
		break;
    6a08:	08 95       	ret
		case 'd':
			send_to_rf(data_to_rf, 0, "[dschrg]");
    6a0a:	44 e7       	ldi	r20, 0x74	; 116
    6a0c:	58 e0       	ldi	r21, 0x08	; 8
    6a0e:	60 e0       	ldi	r22, 0x00	; 0
    6a10:	8e ee       	ldi	r24, 0xEE	; 238
    6a12:	91 e2       	ldi	r25, 0x21	; 33
    6a14:	63 ce       	rjmp	.-826    	; 0x66dc <send_to_rf>
    6a16:	08 95       	ret

00006a18 <time_to_rf>:
	eeprom_to_rf(address);
}

void time_to_rf(uint32_t time)
{
	set_timestamp(time);
    6a18:	b2 d2       	rcall	.+1380   	; 0x6f7e <set_timestamp>
	send_to_rf(data_to_rf, 0, "[timech]");
    6a1a:	40 e8       	ldi	r20, 0x80	; 128
    6a1c:	52 e0       	ldi	r21, 0x02	; 2
    6a1e:	60 e0       	ldi	r22, 0x00	; 0
    6a20:	8e ee       	ldi	r24, 0xEE	; 238
    6a22:	91 e2       	ldi	r25, 0x21	; 33
    6a24:	5b ce       	rjmp	.-842    	; 0x66dc <send_to_rf>
    6a26:	08 95       	ret

00006a28 <clr_rom_to_rf>:
}

void clr_rom_to_rf()
{
	clre2prom();
    6a28:	0e 94 a2 22 	call	0x4544	; 0x4544 <clre2prom>
	send_to_rf(data_to_rf, 0, "[clrrom]");
    6a2c:	42 e9       	ldi	r20, 0x92	; 146
    6a2e:	52 e0       	ldi	r21, 0x02	; 2
    6a30:	60 e0       	ldi	r22, 0x00	; 0
    6a32:	8e ee       	ldi	r24, 0xEE	; 238
    6a34:	91 e2       	ldi	r25, 0x21	; 33
    6a36:	52 ce       	rjmp	.-860    	; 0x66dc <send_to_rf>
    6a38:	08 95       	ret

00006a3a <info_to_rf>:
		//after a while this will reset the system when watchdog enabled
	}
}

void info_to_rf()
{
    6a3a:	cf 93       	push	r28
    6a3c:	df 93       	push	r29
/*	data_to_rf[0] = readE2prom(GROUP_ID); //group*/
// 	data_to_rf[1] = readE2prom(ZONE_ID); //zone
// 	data_to_rf[2] = readE2prom(NODE_ID); //node
	data_to_rf[0] = readE2prom(DEVICE_ADDRESS_H); //address MSB
    6a3e:	8d ef       	ldi	r24, 0xFD	; 253
    6a40:	9f e0       	ldi	r25, 0x0F	; 15
    6a42:	6d da       	rcall	.-2854   	; 0x5f1e <readE2prom>
    6a44:	ce ee       	ldi	r28, 0xEE	; 238
    6a46:	d1 e2       	ldi	r29, 0x21	; 33
    6a48:	88 83       	st	Y, r24
	data_to_rf[1] = readE2prom(DEVICE_ADDRESS_L); //address LSB
    6a4a:	8c ef       	ldi	r24, 0xFC	; 252
    6a4c:	9f e0       	ldi	r25, 0x0F	; 15
    6a4e:	67 da       	rcall	.-2866   	; 0x5f1e <readE2prom>
    6a50:	89 83       	std	Y+1, r24	; 0x01
	data_to_rf[2] = readE2prom(DEVICE_CHANNEL_H); //channel MSB
    6a52:	8f ef       	ldi	r24, 0xFF	; 255
    6a54:	9f e0       	ldi	r25, 0x0F	; 15
    6a56:	63 da       	rcall	.-2874   	; 0x5f1e <readE2prom>
    6a58:	8a 83       	std	Y+2, r24	; 0x02
	data_to_rf[3] = readE2prom(DEVICE_CHANNEL_L); //channel LSB
    6a5a:	8e ef       	ldi	r24, 0xFE	; 254
    6a5c:	9f e0       	ldi	r25, 0x0F	; 15
    6a5e:	5f da       	rcall	.-2882   	; 0x5f1e <readE2prom>
    6a60:	8b 83       	std	Y+3, r24	; 0x03
	data_to_rf[4] = readE2prom(DEVICE_PAN_H); //pan id MSB
    6a62:	81 e0       	ldi	r24, 0x01	; 1
    6a64:	90 e1       	ldi	r25, 0x10	; 16
    6a66:	5b da       	rcall	.-2890   	; 0x5f1e <readE2prom>
    6a68:	8c 83       	std	Y+4, r24	; 0x04
	data_to_rf[5] = readE2prom(DEVICE_PAN_L); //pan id LSB
    6a6a:	80 e0       	ldi	r24, 0x00	; 0
    6a6c:	90 e1       	ldi	r25, 0x10	; 16
    6a6e:	57 da       	rcall	.-2898   	; 0x5f1e <readE2prom>
    6a70:	8d 83       	std	Y+5, r24	; 0x05
	send_to_rf(data_to_rf, 6, "[infoid]");
    6a72:	44 ea       	ldi	r20, 0xA4	; 164
    6a74:	52 e0       	ldi	r21, 0x02	; 2
    6a76:	66 e0       	ldi	r22, 0x06	; 6
    6a78:	ce 01       	movw	r24, r28
    6a7a:	30 de       	rcall	.-928    	; 0x66dc <send_to_rf>
}
    6a7c:	df 91       	pop	r29
    6a7e:	cf 91       	pop	r28
    6a80:	08 95       	ret

00006a82 <change_id_to_rf>:

void change_id_to_rf(uint8_t *data)
{
    6a82:	cf 93       	push	r28
    6a84:	df 93       	push	r29
    6a86:	ec 01       	movw	r28, r24
/*	write_factory_default(GROUP_ID,data[0]);*/
// 	write_factory_default(ZONE_ID,data[1]);
// 	write_factory_default(NODE_ID,data[2]);
	write_factory_default(DEVICE_ADDRESS_H,data[0]);
    6a88:	68 81       	ld	r22, Y
    6a8a:	8d ef       	ldi	r24, 0xFD	; 253
    6a8c:	9f e0       	ldi	r25, 0x0F	; 15
    6a8e:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
	write_factory_default(DEVICE_ADDRESS_L,data[1]);
    6a92:	69 81       	ldd	r22, Y+1	; 0x01
    6a94:	8c ef       	ldi	r24, 0xFC	; 252
    6a96:	9f e0       	ldi	r25, 0x0F	; 15
    6a98:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
	write_factory_default(DEVICE_CHANNEL_H,data[2]);
    6a9c:	6a 81       	ldd	r22, Y+2	; 0x02
    6a9e:	8f ef       	ldi	r24, 0xFF	; 255
    6aa0:	9f e0       	ldi	r25, 0x0F	; 15
    6aa2:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
	write_factory_default(DEVICE_CHANNEL_L,data[3]);
    6aa6:	6b 81       	ldd	r22, Y+3	; 0x03
    6aa8:	8e ef       	ldi	r24, 0xFE	; 254
    6aaa:	9f e0       	ldi	r25, 0x0F	; 15
    6aac:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
	write_factory_default(DEVICE_PAN_H,data[4]);
    6ab0:	6c 81       	ldd	r22, Y+4	; 0x04
    6ab2:	81 e0       	ldi	r24, 0x01	; 1
    6ab4:	90 e1       	ldi	r25, 0x10	; 16
    6ab6:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
	write_factory_default(DEVICE_PAN_L,data[5]);
    6aba:	6d 81       	ldd	r22, Y+5	; 0x05
    6abc:	80 e0       	ldi	r24, 0x00	; 0
    6abe:	90 e1       	ldi	r25, 0x10	; 16
    6ac0:	0e 94 c3 20 	call	0x4186	; 0x4186 <write_factory_default>
	send_to_rf(data_to_rf, 0, "[chngid]");
    6ac4:	4d ea       	ldi	r20, 0xAD	; 173
    6ac6:	52 e0       	ldi	r21, 0x02	; 2
    6ac8:	60 e0       	ldi	r22, 0x00	; 0
    6aca:	8e ee       	ldi	r24, 0xEE	; 238
    6acc:	91 e2       	ldi	r25, 0x21	; 33
    6ace:	06 de       	rcall	.-1012   	; 0x66dc <send_to_rf>
}
    6ad0:	df 91       	pop	r29
    6ad2:	cf 91       	pop	r28
    6ad4:	08 95       	ret

00006ad6 <last_1_log>:

void last_1_log(char type)
{
    6ad6:	ff 92       	push	r15
    6ad8:	0f 93       	push	r16
    6ada:	1f 93       	push	r17
    6adc:	cf 93       	push	r28
    6ade:	df 93       	push	r29
    6ae0:	f8 2e       	mov	r15, r24
    6ae2:	0e ee       	ldi	r16, 0xEE	; 238
    6ae4:	11 e2       	ldi	r17, 0x21	; 33
    6ae6:	c0 e0       	ldi	r28, 0x00	; 0
    6ae8:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t memory_address_low = 0;
  uint8_t memory_address_high = 0;
  for (uint8_t i=0; i<11; i++)
  {
    memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    6aea:	40 91 68 23 	lds	r20, 0x2368
    6aee:	50 91 69 23 	lds	r21, 0x2369
    6af2:	9a 01       	movw	r18, r20
    6af4:	26 51       	subi	r18, 0x16	; 22
    6af6:	31 09       	sbc	r19, r1
    6af8:	2c 0f       	add	r18, r28
    6afa:	3d 1f       	adc	r19, r29
    6afc:	46 51       	subi	r20, 0x16	; 22
    memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    6afe:	4c 0f       	add	r20, r28
    data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6b00:	23 2f       	mov	r18, r19
    6b02:	65 e4       	ldi	r22, 0x45	; 69
    6b04:	8f ea       	ldi	r24, 0xAF	; 175
    6b06:	0e 94 48 22 	call	0x4490	; 0x4490 <PNEWELSE2promRead>
    6b0a:	f8 01       	movw	r30, r16
    6b0c:	81 93       	st	Z+, r24
    6b0e:	8f 01       	movw	r16, r30
    6b10:	21 96       	adiw	r28, 0x01	; 1

void last_1_log(char type)
{
  uint8_t memory_address_low = 0;
  uint8_t memory_address_high = 0;
  for (uint8_t i=0; i<11; i++)
    6b12:	cb 30       	cpi	r28, 0x0B	; 11
    6b14:	d1 05       	cpc	r29, r1
    6b16:	49 f7       	brne	.-46     	; 0x6aea <last_1_log+0x14>
    memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    /*pne_delayms(10);*/
  }
  switch(type)
    6b18:	fe e6       	ldi	r31, 0x6E	; 110
    6b1a:	ff 16       	cp	r15, r31
    6b1c:	39 f0       	breq	.+14     	; 0x6b2c <last_1_log+0x56>
    6b1e:	83 e7       	ldi	r24, 0x73	; 115
    6b20:	f8 16       	cp	r15, r24
    6b22:	91 f0       	breq	.+36     	; 0x6b48 <last_1_log+0x72>
    6b24:	e1 e6       	ldi	r30, 0x61	; 97
    6b26:	fe 12       	cpse	r15, r30
    6b28:	16 c0       	rjmp	.+44     	; 0x6b56 <last_1_log+0x80>
    6b2a:	07 c0       	rjmp	.+14     	; 0x6b3a <last_1_log+0x64>
  {
	  case 'n':
		send_to_rf(data_to_rf, 6, "[1stnml]"); //temporary reduce the sent data to 6 only in order to reduce bandwidth usage. Default value is 11
    6b2c:	4d e7       	ldi	r20, 0x7D	; 125
    6b2e:	58 e0       	ldi	r21, 0x08	; 8
    6b30:	66 e0       	ldi	r22, 0x06	; 6
    6b32:	8e ee       	ldi	r24, 0xEE	; 238
    6b34:	91 e2       	ldi	r25, 0x21	; 33
    6b36:	d2 dd       	rcall	.-1116   	; 0x66dc <send_to_rf>
		break;
    6b38:	14 c0       	rjmp	.+40     	; 0x6b62 <last_1_log+0x8c>
	  case 'a':
		send_to_rf(data_to_rf, 6, "[1staci]");
    6b3a:	46 e8       	ldi	r20, 0x86	; 134
    6b3c:	58 e0       	ldi	r21, 0x08	; 8
    6b3e:	66 e0       	ldi	r22, 0x06	; 6
    6b40:	8e ee       	ldi	r24, 0xEE	; 238
    6b42:	91 e2       	ldi	r25, 0x21	; 33
    6b44:	cb dd       	rcall	.-1130   	; 0x66dc <send_to_rf>
		break;
    6b46:	0d c0       	rjmp	.+26     	; 0x6b62 <last_1_log+0x8c>
	  case 's':
		send_to_rf(data_to_rf, 6, "[1stsft]");
    6b48:	4f e8       	ldi	r20, 0x8F	; 143
    6b4a:	58 e0       	ldi	r21, 0x08	; 8
    6b4c:	66 e0       	ldi	r22, 0x06	; 6
    6b4e:	8e ee       	ldi	r24, 0xEE	; 238
    6b50:	91 e2       	ldi	r25, 0x21	; 33
    6b52:	c4 dd       	rcall	.-1144   	; 0x66dc <send_to_rf>
		break;
    6b54:	06 c0       	rjmp	.+12     	; 0x6b62 <last_1_log+0x8c>
	  default:
		send_to_rf(data_to_rf, 11, "[1stlog]");
    6b56:	48 e9       	ldi	r20, 0x98	; 152
    6b58:	58 e0       	ldi	r21, 0x08	; 8
    6b5a:	6b e0       	ldi	r22, 0x0B	; 11
    6b5c:	8e ee       	ldi	r24, 0xEE	; 238
    6b5e:	91 e2       	ldi	r25, 0x21	; 33
    6b60:	bd dd       	rcall	.-1158   	; 0x66dc <send_to_rf>
		break;
  }
}
    6b62:	df 91       	pop	r29
    6b64:	cf 91       	pop	r28
    6b66:	1f 91       	pop	r17
    6b68:	0f 91       	pop	r16
    6b6a:	ff 90       	pop	r15
    6b6c:	08 95       	ret

00006b6e <last_2_log>:


void last_2_log(char type)
{
    6b6e:	ff 92       	push	r15
    6b70:	0f 93       	push	r16
    6b72:	1f 93       	push	r17
    6b74:	cf 93       	push	r28
    6b76:	df 93       	push	r29
    6b78:	f8 2e       	mov	r15, r24
    6b7a:	0e ee       	ldi	r16, 0xEE	; 238
    6b7c:	11 e2       	ldi	r17, 0x21	; 33
    6b7e:	c0 e0       	ldi	r28, 0x00	; 0
    6b80:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	for (uint8_t i=0; i<11; i++)
	{
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
    6b82:	40 91 68 23 	lds	r20, 0x2368
    6b86:	50 91 69 23 	lds	r21, 0x2369
    6b8a:	9a 01       	movw	r18, r20
    6b8c:	2b 50       	subi	r18, 0x0B	; 11
    6b8e:	31 09       	sbc	r19, r1
    6b90:	2c 0f       	add	r18, r28
    6b92:	3d 1f       	adc	r19, r29
    6b94:	4b 50       	subi	r20, 0x0B	; 11
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
    6b96:	4c 0f       	add	r20, r28
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6b98:	23 2f       	mov	r18, r19
    6b9a:	65 e4       	ldi	r22, 0x45	; 69
    6b9c:	8f ea       	ldi	r24, 0xAF	; 175
    6b9e:	0e 94 48 22 	call	0x4490	; 0x4490 <PNEWELSE2promRead>
    6ba2:	f8 01       	movw	r30, r16
    6ba4:	81 93       	st	Z+, r24
    6ba6:	8f 01       	movw	r16, r30
    6ba8:	21 96       	adiw	r28, 0x01	; 1

void last_2_log(char type)
{
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	for (uint8_t i=0; i<11; i++)
    6baa:	cb 30       	cpi	r28, 0x0B	; 11
    6bac:	d1 05       	cpc	r29, r1
    6bae:	49 f7       	brne	.-46     	; 0x6b82 <last_2_log+0x14>
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		/*pne_delayms(10);*/
	}
	switch(type)
    6bb0:	fe e6       	ldi	r31, 0x6E	; 110
    6bb2:	ff 16       	cp	r15, r31
    6bb4:	39 f0       	breq	.+14     	; 0x6bc4 <last_2_log+0x56>
    6bb6:	83 e7       	ldi	r24, 0x73	; 115
    6bb8:	f8 16       	cp	r15, r24
    6bba:	91 f0       	breq	.+36     	; 0x6be0 <last_2_log+0x72>
    6bbc:	e1 e6       	ldi	r30, 0x61	; 97
    6bbe:	fe 12       	cpse	r15, r30
    6bc0:	16 c0       	rjmp	.+44     	; 0x6bee <last_2_log+0x80>
    6bc2:	07 c0       	rjmp	.+14     	; 0x6bd2 <last_2_log+0x64>
	{
		case 'n':
			send_to_rf(data_to_rf, 6, "[2ndnml]");
    6bc4:	41 ea       	ldi	r20, 0xA1	; 161
    6bc6:	58 e0       	ldi	r21, 0x08	; 8
    6bc8:	66 e0       	ldi	r22, 0x06	; 6
    6bca:	8e ee       	ldi	r24, 0xEE	; 238
    6bcc:	91 e2       	ldi	r25, 0x21	; 33
    6bce:	86 dd       	rcall	.-1268   	; 0x66dc <send_to_rf>
			break;
    6bd0:	14 c0       	rjmp	.+40     	; 0x6bfa <last_2_log+0x8c>
		case 'a':
			send_to_rf(data_to_rf, 6, "[2ndaci]");
    6bd2:	4a ea       	ldi	r20, 0xAA	; 170
    6bd4:	58 e0       	ldi	r21, 0x08	; 8
    6bd6:	66 e0       	ldi	r22, 0x06	; 6
    6bd8:	8e ee       	ldi	r24, 0xEE	; 238
    6bda:	91 e2       	ldi	r25, 0x21	; 33
    6bdc:	7f dd       	rcall	.-1282   	; 0x66dc <send_to_rf>
			break;
    6bde:	0d c0       	rjmp	.+26     	; 0x6bfa <last_2_log+0x8c>
		case 's':
			send_to_rf(data_to_rf, 6, "[2ndsft]");
    6be0:	43 eb       	ldi	r20, 0xB3	; 179
    6be2:	58 e0       	ldi	r21, 0x08	; 8
    6be4:	66 e0       	ldi	r22, 0x06	; 6
    6be6:	8e ee       	ldi	r24, 0xEE	; 238
    6be8:	91 e2       	ldi	r25, 0x21	; 33
    6bea:	78 dd       	rcall	.-1296   	; 0x66dc <send_to_rf>
			break;
    6bec:	06 c0       	rjmp	.+12     	; 0x6bfa <last_2_log+0x8c>
		default:
			send_to_rf(data_to_rf, 11, "[2ndlog]");
    6bee:	4c eb       	ldi	r20, 0xBC	; 188
    6bf0:	58 e0       	ldi	r21, 0x08	; 8
    6bf2:	6b e0       	ldi	r22, 0x0B	; 11
    6bf4:	8e ee       	ldi	r24, 0xEE	; 238
    6bf6:	91 e2       	ldi	r25, 0x21	; 33
    6bf8:	71 dd       	rcall	.-1310   	; 0x66dc <send_to_rf>
			break;
	}
}
    6bfa:	df 91       	pop	r29
    6bfc:	cf 91       	pop	r28
    6bfe:	1f 91       	pop	r17
    6c00:	0f 91       	pop	r16
    6c02:	ff 90       	pop	r15
    6c04:	08 95       	ret

00006c06 <test_completed>:

void test_completed(char type, uint8_t retry)
{
    6c06:	df 92       	push	r13
    6c08:	ef 92       	push	r14
    6c0a:	ff 92       	push	r15
    6c0c:	0f 93       	push	r16
    6c0e:	cf 93       	push	r28
    6c10:	df 93       	push	r29
    6c12:	08 2f       	mov	r16, r24
    6c14:	d6 2e       	mov	r13, r22
    6c16:	0f 2e       	mov	r0, r31
    6c18:	fe ee       	ldi	r31, 0xEE	; 238
    6c1a:	ef 2e       	mov	r14, r31
    6c1c:	f1 e2       	ldi	r31, 0x21	; 33
    6c1e:	ff 2e       	mov	r15, r31
    6c20:	f0 2d       	mov	r31, r0
    6c22:	c0 e0       	ldi	r28, 0x00	; 0
    6c24:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t memory_address_high = 0;
	uint8_t data_counter = 0;
	uint8_t counter = 0;
	for (uint8_t i=0; i<6; i++) //For the start of the test. Only retrieve the time portion. Fork of last_2_log function
	{
		memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    6c26:	40 91 68 23 	lds	r20, 0x2368
    6c2a:	50 91 69 23 	lds	r21, 0x2369
    6c2e:	ca 01       	movw	r24, r20
    6c30:	46 97       	sbiw	r24, 0x16	; 22
    6c32:	8c 0f       	add	r24, r28
    6c34:	9d 1f       	adc	r25, r29
    6c36:	46 51       	subi	r20, 0x16	; 22
		memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    6c38:	4c 0f       	add	r20, r28
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6c3a:	29 2f       	mov	r18, r25
    6c3c:	65 e4       	ldi	r22, 0x45	; 69
    6c3e:	8f ea       	ldi	r24, 0xAF	; 175
    6c40:	0e 94 48 22 	call	0x4490	; 0x4490 <PNEWELSE2promRead>
    6c44:	f7 01       	movw	r30, r14
    6c46:	81 93       	st	Z+, r24
    6c48:	7f 01       	movw	r14, r30
    6c4a:	21 96       	adiw	r28, 0x01	; 1
{
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	uint8_t data_counter = 0;
	uint8_t counter = 0;
	for (uint8_t i=0; i<6; i++) //For the start of the test. Only retrieve the time portion. Fork of last_2_log function
    6c4c:	c6 30       	cpi	r28, 0x06	; 6
    6c4e:	d1 05       	cpc	r29, r1
    6c50:	51 f7       	brne	.-44     	; 0x6c26 <test_completed+0x20>
    6c52:	0f 2e       	mov	r0, r31
    6c54:	f4 ef       	ldi	r31, 0xF4	; 244
    6c56:	ef 2e       	mov	r14, r31
    6c58:	f1 e2       	ldi	r31, 0x21	; 33
    6c5a:	ff 2e       	mov	r15, r31
    6c5c:	f0 2d       	mov	r31, r0
    6c5e:	c0 e0       	ldi	r28, 0x00	; 0
    6c60:	d0 e0       	ldi	r29, 0x00	; 0
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	for (uint8_t i=0; i<6; i++) //For the end of the test. Only retrieve the time portion
	{
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
    6c62:	40 91 68 23 	lds	r20, 0x2368
    6c66:	50 91 69 23 	lds	r21, 0x2369
    6c6a:	ca 01       	movw	r24, r20
    6c6c:	0b 97       	sbiw	r24, 0x0b	; 11
    6c6e:	8c 0f       	add	r24, r28
    6c70:	9d 1f       	adc	r25, r29
    6c72:	4b 50       	subi	r20, 0x0B	; 11
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
    6c74:	4c 0f       	add	r20, r28
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6c76:	29 2f       	mov	r18, r25
    6c78:	65 e4       	ldi	r22, 0x45	; 69
    6c7a:	8f ea       	ldi	r24, 0xAF	; 175
    6c7c:	0e 94 48 22 	call	0x4490	; 0x4490 <PNEWELSE2promRead>
    6c80:	f7 01       	movw	r30, r14
    6c82:	81 93       	st	Z+, r24
    6c84:	7f 01       	movw	r14, r30
    6c86:	21 96       	adiw	r28, 0x01	; 1
		memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	for (uint8_t i=0; i<6; i++) //For the end of the test. Only retrieve the time portion
    6c88:	c6 30       	cpi	r28, 0x06	; 6
    6c8a:	d1 05       	cpc	r29, r1
    6c8c:	51 f7       	brne	.-44     	; 0x6c62 <test_completed+0x5c>
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	while(counter < retry)
    6c8e:	dd 20       	and	r13, r13
    6c90:	31 f1       	breq	.+76     	; 0x6cde <test_completed+0xd8>
    6c92:	c0 e0       	ldi	r28, 0x00	; 0
	{
		switch(type)
    6c94:	0e 36       	cpi	r16, 0x6E	; 110
    6c96:	29 f0       	breq	.+10     	; 0x6ca2 <test_completed+0x9c>
    6c98:	03 37       	cpi	r16, 0x73	; 115
    6c9a:	89 f0       	breq	.+34     	; 0x6cbe <test_completed+0xb8>
    6c9c:	01 36       	cpi	r16, 0x61	; 97
    6c9e:	b1 f4       	brne	.+44     	; 0x6ccc <test_completed+0xc6>
    6ca0:	07 c0       	rjmp	.+14     	; 0x6cb0 <test_completed+0xaa>
		{
			case 'n':
			send_to_rf(data_to_rf, data_counter, "[tstend]");
    6ca2:	45 ec       	ldi	r20, 0xC5	; 197
    6ca4:	58 e0       	ldi	r21, 0x08	; 8
    6ca6:	6c e0       	ldi	r22, 0x0C	; 12
    6ca8:	8e ee       	ldi	r24, 0xEE	; 238
    6caa:	91 e2       	ldi	r25, 0x21	; 33
    6cac:	17 dd       	rcall	.-1490   	; 0x66dc <send_to_rf>
			break;
    6cae:	14 c0       	rjmp	.+40     	; 0x6cd8 <test_completed+0xd2>
			case 'a':
			send_to_rf(data_to_rf, data_counter, "[tstaci]");
    6cb0:	4e ec       	ldi	r20, 0xCE	; 206
    6cb2:	58 e0       	ldi	r21, 0x08	; 8
    6cb4:	6c e0       	ldi	r22, 0x0C	; 12
    6cb6:	8e ee       	ldi	r24, 0xEE	; 238
    6cb8:	91 e2       	ldi	r25, 0x21	; 33
    6cba:	10 dd       	rcall	.-1504   	; 0x66dc <send_to_rf>
			break;
    6cbc:	0d c0       	rjmp	.+26     	; 0x6cd8 <test_completed+0xd2>
			case 's':
			send_to_rf(data_to_rf, data_counter, "[tststp]");
    6cbe:	47 ed       	ldi	r20, 0xD7	; 215
    6cc0:	58 e0       	ldi	r21, 0x08	; 8
    6cc2:	6c e0       	ldi	r22, 0x0C	; 12
    6cc4:	8e ee       	ldi	r24, 0xEE	; 238
    6cc6:	91 e2       	ldi	r25, 0x21	; 33
    6cc8:	09 dd       	rcall	.-1518   	; 0x66dc <send_to_rf>
			break;
    6cca:	06 c0       	rjmp	.+12     	; 0x6cd8 <test_completed+0xd2>
			default:
			send_to_rf(data_to_rf, data_counter, "[tstend]");
    6ccc:	45 ec       	ldi	r20, 0xC5	; 197
    6cce:	58 e0       	ldi	r21, 0x08	; 8
    6cd0:	6c e0       	ldi	r22, 0x0C	; 12
    6cd2:	8e ee       	ldi	r24, 0xEE	; 238
    6cd4:	91 e2       	ldi	r25, 0x21	; 33
    6cd6:	02 dd       	rcall	.-1532   	; 0x66dc <send_to_rf>
			break;
		}
		counter++;
    6cd8:	cf 5f       	subi	r28, 0xFF	; 255
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	while(counter < retry)
    6cda:	cd 11       	cpse	r28, r13
    6cdc:	db cf       	rjmp	.-74     	; 0x6c94 <test_completed+0x8e>
	}
	
/*	send_to_rf(data_to_rf, data_counter + 1, "[tstend]");*/
// 	pne_delayms(10);
// 	send_to_rf(data_to_rf, data_counter + 1, "[tstend]");
}
    6cde:	df 91       	pop	r29
    6ce0:	cf 91       	pop	r28
    6ce2:	0f 91       	pop	r16
    6ce4:	ff 90       	pop	r15
    6ce6:	ef 90       	pop	r14
    6ce8:	df 90       	pop	r13
    6cea:	08 95       	ret

00006cec <dump_log_to_rf>:

/*---------This is experimental function----------------*/
void dump_log_to_rf()
{
    6cec:	0f 93       	push	r16
    6cee:	1f 93       	push	r17
    6cf0:	cf 93       	push	r28
    6cf2:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6cf4:	c0 e0       	ldi	r28, 0x00	; 0
    6cf6:	d0 e0       	ldi	r29, 0x00	; 0
}

/*---------This is experimental function----------------*/
void dump_log_to_rf()
{
	uint8_t i = 0;
    6cf8:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(i == 11)
		{
			send_to_rf(data_to_rf, 11, "[dumpmm]");
			i = 0;
    6cfa:	00 e0       	ldi	r16, 0x00	; 0
    6cfc:	09 c0       	rjmp	.+18     	; 0x6d10 <dump_log_to_rf+0x24>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(i == 11)
    6cfe:	1b 30       	cpi	r17, 0x0B	; 11
    6d00:	39 f4       	brne	.+14     	; 0x6d10 <dump_log_to_rf+0x24>
		{
			send_to_rf(data_to_rf, 11, "[dumpmm]");
    6d02:	40 ee       	ldi	r20, 0xE0	; 224
    6d04:	58 e0       	ldi	r21, 0x08	; 8
    6d06:	6b e0       	ldi	r22, 0x0B	; 11
    6d08:	8e ee       	ldi	r24, 0xEE	; 238
    6d0a:	91 e2       	ldi	r25, 0x21	; 33
    6d0c:	e7 dc       	rcall	.-1586   	; 0x66dc <send_to_rf>
			i = 0;
    6d0e:	10 2f       	mov	r17, r16
			/*pne_delayms(10);*/
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6d10:	2d 2f       	mov	r18, r29
    6d12:	4c 2f       	mov	r20, r28
    6d14:	65 e4       	ldi	r22, 0x45	; 69
    6d16:	8f ea       	ldi	r24, 0xAF	; 175
    6d18:	0e 94 48 22 	call	0x4490	; 0x4490 <PNEWELSE2promRead>
    6d1c:	e1 2f       	mov	r30, r17
    6d1e:	f0 e0       	ldi	r31, 0x00	; 0
    6d20:	e2 51       	subi	r30, 0x12	; 18
    6d22:	fe 4d       	sbci	r31, 0xDE	; 222
    6d24:	80 83       	st	Z, r24
		pne_delayms(10);
    6d26:	8a e0       	ldi	r24, 0x0A	; 10
    6d28:	90 e0       	ldi	r25, 0x00	; 0
    6d2a:	0e 94 30 21 	call	0x4260	; 0x4260 <pne_delayms>
		i++;
    6d2e:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t i = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6d30:	21 96       	adiw	r28, 0x01	; 1
    6d32:	cc 3f       	cpi	r28, 0xFC	; 252
    6d34:	8f e0       	ldi	r24, 0x0F	; 15
    6d36:	d8 07       	cpc	r29, r24
    6d38:	11 f7       	brne	.-60     	; 0x6cfe <dump_log_to_rf+0x12>
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		pne_delayms(10);
		i++;
		
	}
}
    6d3a:	df 91       	pop	r29
    6d3c:	cf 91       	pop	r28
    6d3e:	1f 91       	pop	r17
    6d40:	0f 91       	pop	r16
    6d42:	08 95       	ret

00006d44 <stress_test>:
//---------End of Experimental function-----------------*/
/*---------This is experimental function----------------*/
void stress_test()
{
    6d44:	ef 92       	push	r14
    6d46:	ff 92       	push	r15
    6d48:	1f 93       	push	r17
    6d4a:	cf 93       	push	r28
    6d4c:	df 93       	push	r29
	for(uint8_t u = 0; u<20; u++)
    6d4e:	10 e0       	ldi	r17, 0x00	; 0
    6d50:	0f 2e       	mov	r0, r31
    6d52:	fe ee       	ldi	r31, 0xEE	; 238
    6d54:	ef 2e       	mov	r14, r31
    6d56:	f1 e2       	ldi	r31, 0x21	; 33
    6d58:	ff 2e       	mov	r15, r31
    6d5a:	f0 2d       	mov	r31, r0
    6d5c:	cd e0       	ldi	r28, 0x0D	; 13
    6d5e:	d2 e2       	ldi	r29, 0x22	; 34
    6d60:	0e c0       	rjmp	.+28     	; 0x6d7e <stress_test+0x3a>
	{
		for(uint16_t i = 0; i<31; i++)
		{
			data_to_rf[i] = 0;
    6d62:	11 92       	st	Z+, r1
/*---------This is experimental function----------------*/
void stress_test()
{
	for(uint8_t u = 0; u<20; u++)
	{
		for(uint16_t i = 0; i<31; i++)
    6d64:	ec 17       	cp	r30, r28
    6d66:	fd 07       	cpc	r31, r29
    6d68:	e1 f7       	brne	.-8      	; 0x6d62 <stress_test+0x1e>
		{
			data_to_rf[i] = 0;
		}
		data_to_rf[31] = u;
    6d6a:	f7 01       	movw	r30, r14
    6d6c:	17 8f       	std	Z+31, r17	; 0x1f
		send_to_rf(data_to_rf,32,"[stress]");
    6d6e:	48 ec       	ldi	r20, 0xC8	; 200
    6d70:	52 e0       	ldi	r21, 0x02	; 2
    6d72:	60 e2       	ldi	r22, 0x20	; 32
    6d74:	c7 01       	movw	r24, r14
    6d76:	b2 dc       	rcall	.-1692   	; 0x66dc <send_to_rf>
}
//---------End of Experimental function-----------------*/
/*---------This is experimental function----------------*/
void stress_test()
{
	for(uint8_t u = 0; u<20; u++)
    6d78:	1f 5f       	subi	r17, 0xFF	; 255
    6d7a:	14 31       	cpi	r17, 0x14	; 20
    6d7c:	11 f0       	breq	.+4      	; 0x6d82 <stress_test+0x3e>
    6d7e:	f7 01       	movw	r30, r14
    6d80:	f0 cf       	rjmp	.-32     	; 0x6d62 <stress_test+0x1e>
			data_to_rf[i] = 0;
		}
		data_to_rf[31] = u;
		send_to_rf(data_to_rf,32,"[stress]");
	}
}
    6d82:	df 91       	pop	r29
    6d84:	cf 91       	pop	r28
    6d86:	1f 91       	pop	r17
    6d88:	ff 90       	pop	r15
    6d8a:	ef 90       	pop	r14
    6d8c:	08 95       	ret

00006d8e <request_to_RF>:
//---------End of Experimental function-----------------*/
void request_to_RF(uint8_t *RFU_UID)
{
    6d8e:	fc 01       	movw	r30, r24
    6d90:	ae ee       	ldi	r26, 0xEE	; 238
    6d92:	b1 e2       	ldi	r27, 0x21	; 33
    6d94:	9c 01       	movw	r18, r24
    6d96:	20 5f       	subi	r18, 0xF0	; 240
    6d98:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i = 0; i<max_UID_length; i++)
	{
		data_to_rf[i] = RFU_UID[i];
    6d9a:	81 91       	ld	r24, Z+
    6d9c:	8d 93       	st	X+, r24
	}
}
//---------End of Experimental function-----------------*/
void request_to_RF(uint8_t *RFU_UID)
{
	for(uint8_t i = 0; i<max_UID_length; i++)
    6d9e:	e2 17       	cp	r30, r18
    6da0:	f3 07       	cpc	r31, r19
    6da2:	d9 f7       	brne	.-10     	; 0x6d9a <request_to_RF+0xc>
	{
		data_to_rf[i] = RFU_UID[i];
	}
	send_to_rf(data_to_rf, max_UID_length, "[requid]");
    6da4:	49 ee       	ldi	r20, 0xE9	; 233
    6da6:	58 e0       	ldi	r21, 0x08	; 8
    6da8:	60 e1       	ldi	r22, 0x10	; 16
    6daa:	8e ee       	ldi	r24, 0xEE	; 238
    6dac:	91 e2       	ldi	r25, 0x21	; 33
    6dae:	96 cc       	rjmp	.-1748   	; 0x66dc <send_to_rf>
    6db0:	08 95       	ret

00006db2 <WPS_OK_Alert>:
	/*send_to_rf(data_to_rf, 0, "[chngid]");*/
}

void WPS_OK_Alert(uint8_t *data, uint8_t size)
{
	send_to_rf(data,size,"[pairok]");
    6db2:	42 ef       	ldi	r20, 0xF2	; 242
    6db4:	58 e0       	ldi	r21, 0x08	; 8
    6db6:	92 cc       	rjmp	.-1756   	; 0x66dc <send_to_rf>
    6db8:	08 95       	ret

00006dba <crc_verify>:
}


//crc verification routine
bool crc_verify(uint8_t *data, uint8_t size)
{
    6dba:	df 92       	push	r13
    6dbc:	ef 92       	push	r14
    6dbe:	ff 92       	push	r15
    6dc0:	0f 93       	push	r16
    6dc2:	1f 93       	push	r17
    6dc4:	cf 93       	push	r28
    6dc6:	df 93       	push	r29
    6dc8:	8c 01       	movw	r16, r24
    6dca:	c6 2f       	mov	r28, r22
	uint8_t crc_upper = 0;
	uint8_t crc_lower = 0;
	crc_upper = data[size-2]; //crc_upper = (ascii_to_hex(data[size-4])*0x10 + ascii_to_hex(data[size-3]));
    6dcc:	9c 01       	movw	r18, r24
    6dce:	26 0f       	add	r18, r22
    6dd0:	31 1d       	adc	r19, r1
    6dd2:	f9 01       	movw	r30, r18
    6dd4:	32 97       	sbiw	r30, 0x02	; 2
    6dd6:	e0 80       	ld	r14, Z
	crc_lower = data[size-1]; //crc_lower = (ascii_to_hex(data[size-1])*0x10 + ascii_to_hex(data[size-1]));
    6dd8:	31 96       	adiw	r30, 0x01	; 1
    6dda:	d0 80       	ld	r13, Z
	uint8_t crc_upper_internal = 0;
	uint8_t crc_lower_internal = 0;
	uint8_t data_length = size-2; //uint8_t data_length = size-4;
	crcInit();
    6ddc:	84 d1       	rcall	.+776    	; 0x70e6 <crcInit>
	uint8_t crc_lower = 0;
	crc_upper = data[size-2]; //crc_upper = (ascii_to_hex(data[size-4])*0x10 + ascii_to_hex(data[size-3]));
	crc_lower = data[size-1]; //crc_lower = (ascii_to_hex(data[size-1])*0x10 + ascii_to_hex(data[size-1]));
	uint8_t crc_upper_internal = 0;
	uint8_t crc_lower_internal = 0;
	uint8_t data_length = size-2; //uint8_t data_length = size-4;
    6dde:	c2 50       	subi	r28, 0x02	; 2
	crcInit();
	crc_upper_internal = ((crcFast(data, (data_length)) & 0xFF00) >> 8);
    6de0:	d0 e0       	ldi	r29, 0x00	; 0
    6de2:	be 01       	movw	r22, r28
    6de4:	c8 01       	movw	r24, r16
    6de6:	9c d1       	rcall	.+824    	; 0x7120 <crcFast>
    6de8:	f9 2e       	mov	r15, r25
	crc_lower_internal = (crcFast(data, (data_length)) & 0x00FF);
    6dea:	be 01       	movw	r22, r28
    6dec:	c8 01       	movw	r24, r16
    6dee:	98 d1       	rcall	.+816    	; 0x7120 <crcFast>
    6df0:	98 2f       	mov	r25, r24
	if ((crc_upper_internal == crc_upper) && (crc_lower_internal == crc_lower))
    6df2:	ef 10       	cpse	r14, r15
    6df4:	05 c0       	rjmp	.+10     	; 0x6e00 <crc_verify+0x46>
    6df6:	81 e0       	ldi	r24, 0x01	; 1
    6df8:	d9 16       	cp	r13, r25
    6dfa:	19 f0       	breq	.+6      	; 0x6e02 <crc_verify+0x48>
    6dfc:	80 e0       	ldi	r24, 0x00	; 0
    6dfe:	01 c0       	rjmp	.+2      	; 0x6e02 <crc_verify+0x48>
	{
		
		return true;
	}

	return false;	
    6e00:	80 e0       	ldi	r24, 0x00	; 0
}
    6e02:	df 91       	pop	r29
    6e04:	cf 91       	pop	r28
    6e06:	1f 91       	pop	r17
    6e08:	0f 91       	pop	r16
    6e0a:	ff 90       	pop	r15
    6e0c:	ef 90       	pop	r14
    6e0e:	df 90       	pop	r13
    6e10:	08 95       	ret

00006e12 <ascii_to_hex>:

//ascii to hex conversion routine
uint8_t ascii_to_hex(uint8_t data)
{
	uint8_t return_data = 0;
	if ((data<=0x39) && (data>=0x30))
    6e12:	90 ed       	ldi	r25, 0xD0	; 208
    6e14:	98 0f       	add	r25, r24
    6e16:	9a 30       	cpi	r25, 0x0A	; 10
    6e18:	08 f0       	brcs	.+2      	; 0x6e1c <ascii_to_hex+0xa>


//ascii to hex conversion routine
uint8_t ascii_to_hex(uint8_t data)
{
	uint8_t return_data = 0;
    6e1a:	90 e0       	ldi	r25, 0x00	; 0
	if ((data<=0x39) && (data>=0x30))
	{
		return_data = data - 0x30;
	}
	if ((data<=0x5A) && (data>=0x41))
    6e1c:	2f eb       	ldi	r18, 0xBF	; 191
    6e1e:	28 0f       	add	r18, r24
    6e20:	2a 31       	cpi	r18, 0x1A	; 26
    6e22:	10 f4       	brcc	.+4      	; 0x6e28 <ascii_to_hex+0x16>
	{
		return_data = data - 0x37;
    6e24:	99 ec       	ldi	r25, 0xC9	; 201
    6e26:	98 0f       	add	r25, r24
	}
	if ((data<=0x66) && (data>=0x61))
    6e28:	2f e9       	ldi	r18, 0x9F	; 159
    6e2a:	28 0f       	add	r18, r24
    6e2c:	26 30       	cpi	r18, 0x06	; 6
    6e2e:	10 f4       	brcc	.+4      	; 0x6e34 <ascii_to_hex+0x22>
	{
		return_data = data - 0x57;
    6e30:	99 ea       	ldi	r25, 0xA9	; 169
    6e32:	98 0f       	add	r25, r24
	}
	return return_data;
}
    6e34:	89 2f       	mov	r24, r25
    6e36:	08 95       	ret

00006e38 <fatal_error_to_rf>:


//fatal error routine
void fatal_error_to_rf(fatal_error_t error)
{
	if (error == adc_fatal_error)
    6e38:	81 11       	cpse	r24, r1
    6e3a:	0a c0       	rjmp	.+20     	; 0x6e50 <fatal_error_to_rf+0x18>
	{
		data_to_rf[0] = adc_fatal_error+1;
    6e3c:	81 e0       	ldi	r24, 0x01	; 1
    6e3e:	80 93 ee 21 	sts	0x21EE, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6e42:	4b ef       	ldi	r20, 0xFB	; 251
    6e44:	58 e0       	ldi	r21, 0x08	; 8
    6e46:	61 e0       	ldi	r22, 0x01	; 1
    6e48:	8e ee       	ldi	r24, 0xEE	; 238
    6e4a:	91 e2       	ldi	r25, 0x21	; 33
    6e4c:	47 cc       	rjmp	.-1906   	; 0x66dc <send_to_rf>
    6e4e:	08 95       	ret
	}
	else if (error == twi_fatal_error)
    6e50:	81 30       	cpi	r24, 0x01	; 1
    6e52:	51 f4       	brne	.+20     	; 0x6e68 <fatal_error_to_rf+0x30>
	{
		data_to_rf[0] = twi_fatal_error+1;
    6e54:	82 e0       	ldi	r24, 0x02	; 2
    6e56:	80 93 ee 21 	sts	0x21EE, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6e5a:	4b ef       	ldi	r20, 0xFB	; 251
    6e5c:	58 e0       	ldi	r21, 0x08	; 8
    6e5e:	61 e0       	ldi	r22, 0x01	; 1
    6e60:	8e ee       	ldi	r24, 0xEE	; 238
    6e62:	91 e2       	ldi	r25, 0x21	; 33
    6e64:	3b cc       	rjmp	.-1930   	; 0x66dc <send_to_rf>
    6e66:	08 95       	ret
	}
	else if (error == usart_fatal_error)
    6e68:	82 30       	cpi	r24, 0x02	; 2
    6e6a:	51 f4       	brne	.+20     	; 0x6e80 <fatal_error_to_rf+0x48>
	{
		data_to_rf[0] = usart_fatal_error+1;
    6e6c:	83 e0       	ldi	r24, 0x03	; 3
    6e6e:	80 93 ee 21 	sts	0x21EE, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6e72:	4b ef       	ldi	r20, 0xFB	; 251
    6e74:	58 e0       	ldi	r21, 0x08	; 8
    6e76:	61 e0       	ldi	r22, 0x01	; 1
    6e78:	8e ee       	ldi	r24, 0xEE	; 238
    6e7a:	91 e2       	ldi	r25, 0x21	; 33
    6e7c:	2f cc       	rjmp	.-1954   	; 0x66dc <send_to_rf>
    6e7e:	08 95       	ret
	}
	else
	{
		data_to_rf[0] = timer2_fatal_error+1;
    6e80:	84 e0       	ldi	r24, 0x04	; 4
    6e82:	80 93 ee 21 	sts	0x21EE, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6e86:	4b ef       	ldi	r20, 0xFB	; 251
    6e88:	58 e0       	ldi	r21, 0x08	; 8
    6e8a:	61 e0       	ldi	r22, 0x01	; 1
    6e8c:	8e ee       	ldi	r24, 0xEE	; 238
    6e8e:	91 e2       	ldi	r25, 0x21	; 33
    6e90:	25 cc       	rjmp	.-1974   	; 0x66dc <send_to_rf>
    6e92:	08 95       	ret

00006e94 <__vector_23>:
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
		date_out->month++;
	}
	date_out->date = day_number;
}
    6e94:	1f 92       	push	r1
    6e96:	0f 92       	push	r0
    6e98:	0f b6       	in	r0, 0x3f	; 63
    6e9a:	0f 92       	push	r0
    6e9c:	11 24       	eor	r1, r1
    6e9e:	8f 93       	push	r24
    6ea0:	9f 93       	push	r25
    6ea2:	af 93       	push	r26
    6ea4:	bf 93       	push	r27
    6ea6:	80 91 55 22 	lds	r24, 0x2255
    6eaa:	8f 5f       	subi	r24, 0xFF	; 255
    6eac:	80 93 55 22 	sts	0x2255, r24
    6eb0:	8e 31       	cpi	r24, 0x1E	; 30
    6eb2:	a8 f0       	brcs	.+42     	; 0x6ede <__vector_23+0x4a>
    6eb4:	80 91 56 22 	lds	r24, 0x2256
    6eb8:	90 91 57 22 	lds	r25, 0x2257
    6ebc:	a0 91 58 22 	lds	r26, 0x2258
    6ec0:	b0 91 59 22 	lds	r27, 0x2259
    6ec4:	01 96       	adiw	r24, 0x01	; 1
    6ec6:	a1 1d       	adc	r26, r1
    6ec8:	b1 1d       	adc	r27, r1
    6eca:	80 93 56 22 	sts	0x2256, r24
    6ece:	90 93 57 22 	sts	0x2257, r25
    6ed2:	a0 93 58 22 	sts	0x2258, r26
    6ed6:	b0 93 59 22 	sts	0x2259, r27
    6eda:	10 92 55 22 	sts	0x2255, r1
    6ede:	bf 91       	pop	r27
    6ee0:	af 91       	pop	r26
    6ee2:	9f 91       	pop	r25
    6ee4:	8f 91       	pop	r24
    6ee6:	0f 90       	pop	r0
    6ee8:	0f be       	out	0x3f, r0	; 63
    6eea:	0f 90       	pop	r0
    6eec:	1f 90       	pop	r1
    6eee:	18 95       	reti

00006ef0 <__vector_15>:
    6ef0:	1f 92       	push	r1
    6ef2:	0f 92       	push	r0
    6ef4:	0f b6       	in	r0, 0x3f	; 63
    6ef6:	0f 92       	push	r0
    6ef8:	11 24       	eor	r1, r1
    6efa:	8f 93       	push	r24
    6efc:	9f 93       	push	r25
    6efe:	af 93       	push	r26
    6f00:	bf 93       	push	r27
    6f02:	80 91 56 22 	lds	r24, 0x2256
    6f06:	90 91 57 22 	lds	r25, 0x2257
    6f0a:	a0 91 58 22 	lds	r26, 0x2258
    6f0e:	b0 91 59 22 	lds	r27, 0x2259
    6f12:	01 96       	adiw	r24, 0x01	; 1
    6f14:	a1 1d       	adc	r26, r1
    6f16:	b1 1d       	adc	r27, r1
    6f18:	80 93 56 22 	sts	0x2256, r24
    6f1c:	90 93 57 22 	sts	0x2257, r25
    6f20:	a0 93 58 22 	sts	0x2258, r26
    6f24:	b0 93 59 22 	sts	0x2259, r27
    6f28:	bf 91       	pop	r27
    6f2a:	af 91       	pop	r26
    6f2c:	9f 91       	pop	r25
    6f2e:	8f 91       	pop	r24
    6f30:	0f 90       	pop	r0
    6f32:	0f be       	out	0x3f, r0	; 63
    6f34:	0f 90       	pop	r0
    6f36:	1f 90       	pop	r1
    6f38:	18 95       	reti

00006f3a <timer2_init>:
    6f3a:	f8 94       	cli
    6f3c:	10 92 70 00 	sts	0x0070, r1
    6f40:	e6 eb       	ldi	r30, 0xB6	; 182
    6f42:	f0 e0       	ldi	r31, 0x00	; 0
    6f44:	80 81       	ld	r24, Z
    6f46:	80 62       	ori	r24, 0x20	; 32
    6f48:	80 83       	st	Z, r24
    6f4a:	10 92 b2 00 	sts	0x00B2, r1
    6f4e:	10 92 b0 00 	sts	0x00B0, r1
    6f52:	85 e0       	ldi	r24, 0x05	; 5
    6f54:	80 93 b1 00 	sts	0x00B1, r24
    6f58:	80 81       	ld	r24, Z
    6f5a:	83 70       	andi	r24, 0x03	; 3
    6f5c:	83 30       	cpi	r24, 0x03	; 3
    6f5e:	e1 f3       	breq	.-8      	; 0x6f58 <timer2_init+0x1e>
    6f60:	10 92 b2 00 	sts	0x00B2, r1
    6f64:	10 92 b0 00 	sts	0x00B0, r1
    6f68:	85 e0       	ldi	r24, 0x05	; 5
    6f6a:	80 93 b1 00 	sts	0x00B1, r24
    6f6e:	17 ba       	out	0x17, r1	; 23
    6f70:	e0 e7       	ldi	r30, 0x70	; 112
    6f72:	f0 e0       	ldi	r31, 0x00	; 0
    6f74:	80 81       	ld	r24, Z
    6f76:	81 60       	ori	r24, 0x01	; 1
    6f78:	80 83       	st	Z, r24
    6f7a:	78 94       	sei
    6f7c:	08 95       	ret

00006f7e <set_timestamp>:

void set_timestamp(uint32_t timestamp)
{
	timestamp_internal = timestamp;
    6f7e:	60 93 56 22 	sts	0x2256, r22
    6f82:	70 93 57 22 	sts	0x2257, r23
    6f86:	80 93 58 22 	sts	0x2258, r24
    6f8a:	90 93 59 22 	sts	0x2259, r25
    6f8e:	08 95       	ret

00006f90 <get_timestamp>:
}

uint32_t get_timestamp(void)
{
	return timestamp_internal;
    6f90:	60 91 56 22 	lds	r22, 0x2256
    6f94:	70 91 57 22 	lds	r23, 0x2257
    6f98:	80 91 58 22 	lds	r24, 0x2258
    6f9c:	90 91 59 22 	lds	r25, 0x2259
    6fa0:	08 95       	ret

00006fa2 <pneBatteryAverage_init>:
#include "PNE_Factory.h"



void pneBatteryAverage_init()
{
    6fa2:	0f 93       	push	r16
    6fa4:	1f 93       	push	r17
    6fa6:	cf 93       	push	r28
    6fa8:	df 93       	push	r29
	battery_counter = 0;
    6faa:	10 92 99 23 	sts	0x2399, r1
    6fae:	a3 e9       	ldi	r26, 0x93	; 147
    6fb0:	b3 e2       	ldi	r27, 0x23	; 35
    6fb2:	68 e9       	ldi	r22, 0x98	; 152
    6fb4:	73 e2       	ldi	r23, 0x23	; 35
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    6fb6:	0b e7       	ldi	r16, 0x7B	; 123
    6fb8:	10 e0       	ldi	r17, 0x00	; 0
	}

	ADMUX
		= ((uint8_t)input &
    6fba:	4c e7       	ldi	r20, 0x7C	; 124
    6fbc:	50 e0       	ldi	r21, 0x00	; 0
    6fbe:	90 e6       	ldi	r25, 0x60	; 96
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    6fc0:	ea e7       	ldi	r30, 0x7A	; 122
    6fc2:	f0 e0       	ldi	r31, 0x00	; 0
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    6fc4:	29 e7       	ldi	r18, 0x79	; 121
    6fc6:	30 e0       	ldi	r19, 0x00	; 0
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    6fc8:	e8 01       	movw	r28, r16
    6fca:	88 81       	ld	r24, Y
    6fcc:	87 7f       	andi	r24, 0xF7	; 247
    6fce:	88 83       	st	Y, r24
	}

	ADMUX
		= ((uint8_t)input &
    6fd0:	ea 01       	movw	r28, r20
    6fd2:	98 83       	st	Y, r25
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    6fd4:	80 81       	ld	r24, Z
    6fd6:	80 64       	ori	r24, 0x40	; 64
    6fd8:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
    6fda:	80 81       	ld	r24, Z
    6fdc:	86 fd       	sbrc	r24, 6
    6fde:	fd cf       	rjmp	.-6      	; 0x6fda <pneBatteryAverage_init+0x38>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    6fe0:	e9 01       	movw	r28, r18
    6fe2:	88 81       	ld	r24, Y
	uint8_t i=0;
		
	for(i=0; i<5; i++)
	{
		battery_average[i] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);
    6fe4:	8d 93       	st	X+, r24
void pneBatteryAverage_init()
{
	battery_counter = 0;
	uint8_t i=0;
		
	for(i=0; i<5; i++)
    6fe6:	a6 17       	cp	r26, r22
    6fe8:	b7 07       	cpc	r27, r23
    6fea:	71 f7       	brne	.-36     	; 0x6fc8 <pneBatteryAverage_init+0x26>
	{
		battery_average[i] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);
		//int_to_ascii(battery_average[i]);
	}
}
    6fec:	df 91       	pop	r29
    6fee:	cf 91       	pop	r28
    6ff0:	1f 91       	pop	r17
    6ff2:	0f 91       	pop	r16
    6ff4:	08 95       	ret

00006ff6 <pneBatteryAverage>:

uint8_t pneBatteryAverage()
{
	if(battery_counter > 5)
    6ff6:	80 91 99 23 	lds	r24, 0x2399
    6ffa:	86 30       	cpi	r24, 0x06	; 6
    6ffc:	10 f0       	brcs	.+4      	; 0x7002 <pneBatteryAverage+0xc>
	{
		battery_counter = 0;
    6ffe:	10 92 99 23 	sts	0x2399, r1
	}
	
	battery_average[battery_counter] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);//*18*10/255;
    7002:	a0 91 99 23 	lds	r26, 0x2399
    7006:	b0 e0       	ldi	r27, 0x00	; 0
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    7008:	eb e7       	ldi	r30, 0x7B	; 123
    700a:	f0 e0       	ldi	r31, 0x00	; 0
    700c:	80 81       	ld	r24, Z
    700e:	87 7f       	andi	r24, 0xF7	; 247
    7010:	80 83       	st	Z, r24
	}

	ADMUX
		= ((uint8_t)input &
    7012:	80 e6       	ldi	r24, 0x60	; 96
    7014:	80 93 7c 00 	sts	0x007C, r24
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    7018:	ea e7       	ldi	r30, 0x7A	; 122
    701a:	f0 e0       	ldi	r31, 0x00	; 0
    701c:	80 81       	ld	r24, Z
    701e:	80 64       	ori	r24, 0x40	; 64
    7020:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
    7022:	80 81       	ld	r24, Z
    7024:	86 fd       	sbrc	r24, 6
    7026:	fd cf       	rjmp	.-6      	; 0x7022 <pneBatteryAverage+0x2c>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    7028:	80 91 79 00 	lds	r24, 0x0079
    702c:	e3 e9       	ldi	r30, 0x93	; 147
    702e:	f3 e2       	ldi	r31, 0x23	; 35
    7030:	ad 56       	subi	r26, 0x6D	; 109
    7032:	bc 4d       	sbci	r27, 0xDC	; 220
    7034:	8c 93       	st	X, r24
	battery_counter++;
    7036:	80 91 99 23 	lds	r24, 0x2399
    703a:	8f 5f       	subi	r24, 0xFF	; 255
    703c:	80 93 99 23 	sts	0x2399, r24
	
	return (battery_average[0]+battery_average[1]+battery_average[2]+battery_average[3]+battery_average[4])/5;
    7040:	20 81       	ld	r18, Z
    7042:	81 81       	ldd	r24, Z+1	; 0x01
    7044:	90 e0       	ldi	r25, 0x00	; 0
    7046:	82 0f       	add	r24, r18
    7048:	91 1d       	adc	r25, r1
    704a:	22 81       	ldd	r18, Z+2	; 0x02
    704c:	82 0f       	add	r24, r18
    704e:	91 1d       	adc	r25, r1
    7050:	23 81       	ldd	r18, Z+3	; 0x03
    7052:	82 0f       	add	r24, r18
    7054:	91 1d       	adc	r25, r1
    7056:	24 81       	ldd	r18, Z+4	; 0x04
    7058:	82 0f       	add	r24, r18
    705a:	91 1d       	adc	r25, r1
    705c:	65 e0       	ldi	r22, 0x05	; 5
    705e:	70 e0       	ldi	r23, 0x00	; 0
    7060:	0e 94 3c 4d 	call	0x9a78	; 0x9a78 <__divmodhi4>
    7064:	86 2f       	mov	r24, r22
}
    7066:	08 95       	ret

00007068 <reflect>:
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
    7068:	8f 92       	push	r8
    706a:	9f 92       	push	r9
    706c:	af 92       	push	r10
    706e:	bf 92       	push	r11
    7070:	cf 92       	push	r12
    7072:	df 92       	push	r13
    7074:	ef 92       	push	r14
    7076:	ff 92       	push	r15
    7078:	cf 93       	push	r28
    707a:	df 93       	push	r29
    707c:	44 23       	and	r20, r20
    707e:	19 f1       	breq	.+70     	; 0x70c6 <reflect+0x5e>
    7080:	e4 2f       	mov	r30, r20
    7082:	f0 e0       	ldi	r31, 0x00	; 0
    7084:	31 97       	sbiw	r30, 0x01	; 1
    7086:	20 e0       	ldi	r18, 0x00	; 0
    7088:	81 2c       	mov	r8, r1
    708a:	91 2c       	mov	r9, r1
    708c:	54 01       	movw	r10, r8
    708e:	c1 e0       	ldi	r28, 0x01	; 1
    7090:	d0 e0       	ldi	r29, 0x00	; 0
    7092:	60 ff       	sbrs	r22, 0
    7094:	0f c0       	rjmp	.+30     	; 0x70b4 <reflect+0x4c>
    7096:	6e 01       	movw	r12, r28
    7098:	0e 2e       	mov	r0, r30
    709a:	02 c0       	rjmp	.+4      	; 0x70a0 <reflect+0x38>
    709c:	cc 0c       	add	r12, r12
    709e:	dd 1c       	adc	r13, r13
    70a0:	0a 94       	dec	r0
    70a2:	e2 f7       	brpl	.-8      	; 0x709c <reflect+0x34>
    70a4:	0d 2c       	mov	r0, r13
    70a6:	00 0c       	add	r0, r0
    70a8:	ee 08       	sbc	r14, r14
    70aa:	ff 08       	sbc	r15, r15
    70ac:	8c 28       	or	r8, r12
    70ae:	9d 28       	or	r9, r13
    70b0:	ae 28       	or	r10, r14
    70b2:	bf 28       	or	r11, r15
    70b4:	96 95       	lsr	r25
    70b6:	87 95       	ror	r24
    70b8:	77 95       	ror	r23
    70ba:	67 95       	ror	r22
    70bc:	2f 5f       	subi	r18, 0xFF	; 255
    70be:	31 97       	sbiw	r30, 0x01	; 1
    70c0:	24 13       	cpse	r18, r20
    70c2:	e7 cf       	rjmp	.-50     	; 0x7092 <reflect+0x2a>
    70c4:	03 c0       	rjmp	.+6      	; 0x70cc <reflect+0x64>
    70c6:	81 2c       	mov	r8, r1
    70c8:	91 2c       	mov	r9, r1
    70ca:	54 01       	movw	r10, r8
    70cc:	c5 01       	movw	r24, r10
    70ce:	b4 01       	movw	r22, r8
    70d0:	df 91       	pop	r29
    70d2:	cf 91       	pop	r28
    70d4:	ff 90       	pop	r15
    70d6:	ef 90       	pop	r14
    70d8:	df 90       	pop	r13
    70da:	cf 90       	pop	r12
    70dc:	bf 90       	pop	r11
    70de:	af 90       	pop	r10
    70e0:	9f 90       	pop	r9
    70e2:	8f 90       	pop	r8
    70e4:	08 95       	ret

000070e6 <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
    70e6:	ea e9       	ldi	r30, 0x9A	; 154
    70e8:	f3 e2       	ldi	r31, 0x23	; 35


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    70ea:	40 e0       	ldi	r20, 0x00	; 0
    70ec:	50 e0       	ldi	r21, 0x00	; 0
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
    70ee:	38 e0       	ldi	r19, 0x08	; 8
    70f0:	94 2f       	mov	r25, r20
    70f2:	88 27       	eor	r24, r24
    70f4:	23 2f       	mov	r18, r19
        for (bit = 8; bit > 0; --bit)
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
    70f6:	99 23       	and	r25, r25
    70f8:	34 f4       	brge	.+12     	; 0x7106 <crcInit+0x20>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
    70fa:	88 0f       	add	r24, r24
    70fc:	99 1f       	adc	r25, r25
    70fe:	65 e0       	ldi	r22, 0x05	; 5
    7100:	86 27       	eor	r24, r22
    7102:	90 58       	subi	r25, 0x80	; 128
    7104:	02 c0       	rjmp	.+4      	; 0x710a <crcInit+0x24>
            }
            else
            {
                remainder = (remainder << 1);
    7106:	88 0f       	add	r24, r24
    7108:	99 1f       	adc	r25, r25
    710a:	21 50       	subi	r18, 0x01	; 1
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
    710c:	a1 f7       	brne	.-24     	; 0x70f6 <crcInit+0x10>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    710e:	81 93       	st	Z+, r24
    7110:	91 93       	st	Z+, r25


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    7112:	4f 5f       	subi	r20, 0xFF	; 255
    7114:	5f 4f       	sbci	r21, 0xFF	; 255
    7116:	41 15       	cp	r20, r1
    7118:	81 e0       	ldi	r24, 0x01	; 1
    711a:	58 07       	cpc	r21, r24
    711c:	49 f7       	brne	.-46     	; 0x70f0 <crcInit+0xa>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
    711e:	08 95       	ret

00007120 <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    7120:	ef 92       	push	r14
    7122:	ff 92       	push	r15
    7124:	0f 93       	push	r16
    7126:	1f 93       	push	r17
    7128:	cf 93       	push	r28
    712a:	df 93       	push	r29


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    712c:	16 16       	cp	r1, r22
    712e:	17 06       	cpc	r1, r23
    7130:	fc f4       	brge	.+62     	; 0x7170 <crcFast+0x50>
    7132:	7c 01       	movw	r14, r24
    7134:	8c 01       	movw	r16, r24
    7136:	06 0f       	add	r16, r22
    7138:	17 1f       	adc	r17, r23
    713a:	c0 e0       	ldi	r28, 0x00	; 0
    713c:	d0 e0       	ldi	r29, 0x00	; 0
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
    713e:	f7 01       	movw	r30, r14
    7140:	61 91       	ld	r22, Z+
    7142:	7f 01       	movw	r14, r30
    7144:	70 e0       	ldi	r23, 0x00	; 0
    7146:	80 e0       	ldi	r24, 0x00	; 0
    7148:	90 e0       	ldi	r25, 0x00	; 0
    714a:	48 e0       	ldi	r20, 0x08	; 8
    714c:	8d df       	rcall	.-230    	; 0x7068 <reflect>
    714e:	6d 27       	eor	r22, r29
  		remainder = crcTable[data] ^ (remainder << 8);
    7150:	e6 2f       	mov	r30, r22
    7152:	f0 e0       	ldi	r31, 0x00	; 0
    7154:	ee 0f       	add	r30, r30
    7156:	ff 1f       	adc	r31, r31
    7158:	e6 56       	subi	r30, 0x66	; 102
    715a:	fc 4d       	sbci	r31, 0xDC	; 220
    715c:	80 81       	ld	r24, Z
    715e:	91 81       	ldd	r25, Z+1	; 0x01
    7160:	dc 2f       	mov	r29, r28
    7162:	cc 27       	eor	r28, r28
    7164:	c8 27       	eor	r28, r24
    7166:	d9 27       	eor	r29, r25


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    7168:	e0 16       	cp	r14, r16
    716a:	f1 06       	cpc	r15, r17
    716c:	41 f7       	brne	.-48     	; 0x713e <crcFast+0x1e>
    716e:	02 c0       	rjmp	.+4      	; 0x7174 <crcFast+0x54>
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    crc	           remainder = INITIAL_REMAINDER;
    7170:	c0 e0       	ldi	r28, 0x00	; 0
    7172:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
    7174:	be 01       	movw	r22, r28
    7176:	80 e0       	ldi	r24, 0x00	; 0
    7178:	90 e0       	ldi	r25, 0x00	; 0
    717a:	40 e1       	ldi	r20, 0x10	; 16
    717c:	75 df       	rcall	.-278    	; 0x7068 <reflect>

}   /* crcFast() */
    717e:	cb 01       	movw	r24, r22
    7180:	df 91       	pop	r29
    7182:	cf 91       	pop	r28
    7184:	1f 91       	pop	r17
    7186:	0f 91       	pop	r16
    7188:	ff 90       	pop	r15
    718a:	ef 90       	pop	r14
    718c:	08 95       	ret

0000718e <md5_process>:
 */
void md5_hmac_reset( md5_context *ctx )
{
    md5_starts( ctx );
    md5_update( ctx, ctx->ipad, 64 );
}
    718e:	2f 92       	push	r2
    7190:	3f 92       	push	r3
    7192:	4f 92       	push	r4
    7194:	5f 92       	push	r5
    7196:	6f 92       	push	r6
    7198:	7f 92       	push	r7
    719a:	8f 92       	push	r8
    719c:	9f 92       	push	r9
    719e:	af 92       	push	r10
    71a0:	bf 92       	push	r11
    71a2:	cf 92       	push	r12
    71a4:	df 92       	push	r13
    71a6:	ef 92       	push	r14
    71a8:	ff 92       	push	r15
    71aa:	0f 93       	push	r16
    71ac:	1f 93       	push	r17
    71ae:	cf 93       	push	r28
    71b0:	df 93       	push	r29
    71b2:	cd b7       	in	r28, 0x3d	; 61
    71b4:	de b7       	in	r29, 0x3e	; 62
    71b6:	c0 55       	subi	r28, 0x50	; 80
    71b8:	d1 09       	sbc	r29, r1
    71ba:	0f b6       	in	r0, 0x3f	; 63
    71bc:	f8 94       	cli
    71be:	de bf       	out	0x3e, r29	; 62
    71c0:	0f be       	out	0x3f, r0	; 63
    71c2:	cd bf       	out	0x3d, r28	; 61
    71c4:	1c 01       	movw	r2, r24
    71c6:	fb 01       	movw	r30, r22
    71c8:	21 81       	ldd	r18, Z+1	; 0x01
    71ca:	82 81       	ldd	r24, Z+2	; 0x02
    71cc:	90 e0       	ldi	r25, 0x00	; 0
    71ce:	a0 e0       	ldi	r26, 0x00	; 0
    71d0:	b0 e0       	ldi	r27, 0x00	; 0
    71d2:	dc 01       	movw	r26, r24
    71d4:	99 27       	eor	r25, r25
    71d6:	88 27       	eor	r24, r24
    71d8:	92 2b       	or	r25, r18
    71da:	20 81       	ld	r18, Z
    71dc:	6c 01       	movw	r12, r24
    71de:	7d 01       	movw	r14, r26
    71e0:	c2 2a       	or	r12, r18
    71e2:	23 81       	ldd	r18, Z+3	; 0x03
    71e4:	b7 01       	movw	r22, r14
    71e6:	a6 01       	movw	r20, r12
    71e8:	72 2b       	or	r23, r18
    71ea:	49 87       	std	Y+9, r20	; 0x09
    71ec:	5a 87       	std	Y+10, r21	; 0x0a
    71ee:	6b 87       	std	Y+11, r22	; 0x0b
    71f0:	7c 87       	std	Y+12, r23	; 0x0c
    71f2:	85 81       	ldd	r24, Z+5	; 0x05
    71f4:	86 80       	ldd	r8, Z+6	; 0x06
    71f6:	91 2c       	mov	r9, r1
    71f8:	a1 2c       	mov	r10, r1
    71fa:	b1 2c       	mov	r11, r1
    71fc:	54 01       	movw	r10, r8
    71fe:	99 24       	eor	r9, r9
    7200:	88 24       	eor	r8, r8
    7202:	98 2a       	or	r9, r24
    7204:	84 81       	ldd	r24, Z+4	; 0x04
    7206:	88 2a       	or	r8, r24
    7208:	87 81       	ldd	r24, Z+7	; 0x07
    720a:	75 01       	movw	r14, r10
    720c:	64 01       	movw	r12, r8
    720e:	f8 2a       	or	r15, r24
    7210:	cd 86       	std	Y+13, r12	; 0x0d
    7212:	de 86       	std	Y+14, r13	; 0x0e
    7214:	ef 86       	std	Y+15, r14	; 0x0f
    7216:	f8 8a       	std	Y+16, r15	; 0x10
    7218:	81 85       	ldd	r24, Z+9	; 0x09
    721a:	82 84       	ldd	r8, Z+10	; 0x0a
    721c:	91 2c       	mov	r9, r1
    721e:	a1 2c       	mov	r10, r1
    7220:	b1 2c       	mov	r11, r1
    7222:	54 01       	movw	r10, r8
    7224:	99 24       	eor	r9, r9
    7226:	88 24       	eor	r8, r8
    7228:	98 2a       	or	r9, r24
    722a:	80 85       	ldd	r24, Z+8	; 0x08
    722c:	88 2a       	or	r8, r24
    722e:	83 85       	ldd	r24, Z+11	; 0x0b
    7230:	85 01       	movw	r16, r10
    7232:	74 01       	movw	r14, r8
    7234:	18 2b       	or	r17, r24
    7236:	e9 8a       	std	Y+17, r14	; 0x11
    7238:	fa 8a       	std	Y+18, r15	; 0x12
    723a:	0b 8b       	std	Y+19, r16	; 0x13
    723c:	1c 8b       	std	Y+20, r17	; 0x14
    723e:	85 85       	ldd	r24, Z+13	; 0x0d
    7240:	06 85       	ldd	r16, Z+14	; 0x0e
    7242:	10 e0       	ldi	r17, 0x00	; 0
    7244:	20 e0       	ldi	r18, 0x00	; 0
    7246:	30 e0       	ldi	r19, 0x00	; 0
    7248:	98 01       	movw	r18, r16
    724a:	11 27       	eor	r17, r17
    724c:	00 27       	eor	r16, r16
    724e:	18 2b       	or	r17, r24
    7250:	84 85       	ldd	r24, Z+12	; 0x0c
    7252:	08 2b       	or	r16, r24
    7254:	87 85       	ldd	r24, Z+15	; 0x0f
    7256:	b9 01       	movw	r22, r18
    7258:	a8 01       	movw	r20, r16
    725a:	78 2b       	or	r23, r24
    725c:	4d 8b       	std	Y+21, r20	; 0x15
    725e:	5e 8b       	std	Y+22, r21	; 0x16
    7260:	6f 8b       	std	Y+23, r22	; 0x17
    7262:	78 8f       	std	Y+24, r23	; 0x18
    7264:	81 89       	ldd	r24, Z+17	; 0x11
    7266:	82 88       	ldd	r8, Z+18	; 0x12
    7268:	91 2c       	mov	r9, r1
    726a:	a1 2c       	mov	r10, r1
    726c:	b1 2c       	mov	r11, r1
    726e:	54 01       	movw	r10, r8
    7270:	99 24       	eor	r9, r9
    7272:	88 24       	eor	r8, r8
    7274:	98 2a       	or	r9, r24
    7276:	80 89       	ldd	r24, Z+16	; 0x10
    7278:	88 2a       	or	r8, r24
    727a:	83 89       	ldd	r24, Z+19	; 0x13
    727c:	75 01       	movw	r14, r10
    727e:	64 01       	movw	r12, r8
    7280:	f8 2a       	or	r15, r24
    7282:	c9 8e       	std	Y+25, r12	; 0x19
    7284:	da 8e       	std	Y+26, r13	; 0x1a
    7286:	eb 8e       	std	Y+27, r14	; 0x1b
    7288:	fc 8e       	std	Y+28, r15	; 0x1c
    728a:	85 89       	ldd	r24, Z+21	; 0x15
    728c:	06 89       	ldd	r16, Z+22	; 0x16
    728e:	10 e0       	ldi	r17, 0x00	; 0
    7290:	20 e0       	ldi	r18, 0x00	; 0
    7292:	30 e0       	ldi	r19, 0x00	; 0
    7294:	98 01       	movw	r18, r16
    7296:	11 27       	eor	r17, r17
    7298:	00 27       	eor	r16, r16
    729a:	18 2b       	or	r17, r24
    729c:	84 89       	ldd	r24, Z+20	; 0x14
    729e:	08 2b       	or	r16, r24
    72a0:	87 89       	ldd	r24, Z+23	; 0x17
    72a2:	b9 01       	movw	r22, r18
    72a4:	a8 01       	movw	r20, r16
    72a6:	78 2b       	or	r23, r24
    72a8:	4d 8f       	std	Y+29, r20	; 0x1d
    72aa:	5e 8f       	std	Y+30, r21	; 0x1e
    72ac:	6f 8f       	std	Y+31, r22	; 0x1f
    72ae:	78 a3       	std	Y+32, r23	; 0x20
    72b0:	81 8d       	ldd	r24, Z+25	; 0x19
    72b2:	82 8c       	ldd	r8, Z+26	; 0x1a
    72b4:	91 2c       	mov	r9, r1
    72b6:	a1 2c       	mov	r10, r1
    72b8:	b1 2c       	mov	r11, r1
    72ba:	54 01       	movw	r10, r8
    72bc:	99 24       	eor	r9, r9
    72be:	88 24       	eor	r8, r8
    72c0:	98 2a       	or	r9, r24
    72c2:	80 8d       	ldd	r24, Z+24	; 0x18
    72c4:	88 2a       	or	r8, r24
    72c6:	83 8d       	ldd	r24, Z+27	; 0x1b
    72c8:	75 01       	movw	r14, r10
    72ca:	64 01       	movw	r12, r8
    72cc:	f8 2a       	or	r15, r24
    72ce:	c9 a2       	std	Y+33, r12	; 0x21
    72d0:	da a2       	std	Y+34, r13	; 0x22
    72d2:	eb a2       	std	Y+35, r14	; 0x23
    72d4:	fc a2       	std	Y+36, r15	; 0x24
    72d6:	85 8d       	ldd	r24, Z+29	; 0x1d
    72d8:	06 8d       	ldd	r16, Z+30	; 0x1e
    72da:	10 e0       	ldi	r17, 0x00	; 0
    72dc:	20 e0       	ldi	r18, 0x00	; 0
    72de:	30 e0       	ldi	r19, 0x00	; 0
    72e0:	98 01       	movw	r18, r16
    72e2:	11 27       	eor	r17, r17
    72e4:	00 27       	eor	r16, r16
    72e6:	18 2b       	or	r17, r24
    72e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    72ea:	08 2b       	or	r16, r24
    72ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    72ee:	b9 01       	movw	r22, r18
    72f0:	a8 01       	movw	r20, r16
    72f2:	78 2b       	or	r23, r24
    72f4:	4d a3       	std	Y+37, r20	; 0x25
    72f6:	5e a3       	std	Y+38, r21	; 0x26
    72f8:	6f a3       	std	Y+39, r22	; 0x27
    72fa:	78 a7       	std	Y+40, r23	; 0x28
    72fc:	81 a1       	ldd	r24, Z+33	; 0x21
    72fe:	82 a0       	ldd	r8, Z+34	; 0x22
    7300:	91 2c       	mov	r9, r1
    7302:	a1 2c       	mov	r10, r1
    7304:	b1 2c       	mov	r11, r1
    7306:	54 01       	movw	r10, r8
    7308:	99 24       	eor	r9, r9
    730a:	88 24       	eor	r8, r8
    730c:	98 2a       	or	r9, r24
    730e:	80 a1       	ldd	r24, Z+32	; 0x20
    7310:	88 2a       	or	r8, r24
    7312:	83 a1       	ldd	r24, Z+35	; 0x23
    7314:	75 01       	movw	r14, r10
    7316:	64 01       	movw	r12, r8
    7318:	f8 2a       	or	r15, r24
    731a:	c9 a6       	std	Y+41, r12	; 0x29
    731c:	da a6       	std	Y+42, r13	; 0x2a
    731e:	eb a6       	std	Y+43, r14	; 0x2b
    7320:	fc a6       	std	Y+44, r15	; 0x2c
    7322:	85 a1       	ldd	r24, Z+37	; 0x25
    7324:	c6 a0       	ldd	r12, Z+38	; 0x26
    7326:	d1 2c       	mov	r13, r1
    7328:	e1 2c       	mov	r14, r1
    732a:	f1 2c       	mov	r15, r1
    732c:	76 01       	movw	r14, r12
    732e:	dd 24       	eor	r13, r13
    7330:	cc 24       	eor	r12, r12
    7332:	d8 2a       	or	r13, r24
    7334:	84 a1       	ldd	r24, Z+36	; 0x24
    7336:	c8 2a       	or	r12, r24
    7338:	87 a1       	ldd	r24, Z+39	; 0x27
    733a:	97 01       	movw	r18, r14
    733c:	86 01       	movw	r16, r12
    733e:	38 2b       	or	r19, r24
    7340:	0d a7       	std	Y+45, r16	; 0x2d
    7342:	1e a7       	std	Y+46, r17	; 0x2e
    7344:	2f a7       	std	Y+47, r18	; 0x2f
    7346:	38 ab       	std	Y+48, r19	; 0x30
    7348:	81 a5       	ldd	r24, Z+41	; 0x29
    734a:	02 a5       	ldd	r16, Z+42	; 0x2a
    734c:	10 e0       	ldi	r17, 0x00	; 0
    734e:	20 e0       	ldi	r18, 0x00	; 0
    7350:	30 e0       	ldi	r19, 0x00	; 0
    7352:	98 01       	movw	r18, r16
    7354:	11 27       	eor	r17, r17
    7356:	00 27       	eor	r16, r16
    7358:	18 2b       	or	r17, r24
    735a:	80 a5       	ldd	r24, Z+40	; 0x28
    735c:	08 2b       	or	r16, r24
    735e:	83 a5       	ldd	r24, Z+43	; 0x2b
    7360:	b9 01       	movw	r22, r18
    7362:	a8 01       	movw	r20, r16
    7364:	78 2b       	or	r23, r24
    7366:	49 ab       	std	Y+49, r20	; 0x31
    7368:	5a ab       	std	Y+50, r21	; 0x32
    736a:	6b ab       	std	Y+51, r22	; 0x33
    736c:	7c ab       	std	Y+52, r23	; 0x34
    736e:	85 a5       	ldd	r24, Z+45	; 0x2d
    7370:	46 a5       	ldd	r20, Z+46	; 0x2e
    7372:	50 e0       	ldi	r21, 0x00	; 0
    7374:	60 e0       	ldi	r22, 0x00	; 0
    7376:	70 e0       	ldi	r23, 0x00	; 0
    7378:	ba 01       	movw	r22, r20
    737a:	55 27       	eor	r21, r21
    737c:	44 27       	eor	r20, r20
    737e:	58 2b       	or	r21, r24
    7380:	84 a5       	ldd	r24, Z+44	; 0x2c
    7382:	48 2b       	or	r20, r24
    7384:	87 a5       	ldd	r24, Z+47	; 0x2f
    7386:	6a 01       	movw	r12, r20
    7388:	7b 01       	movw	r14, r22
    738a:	f8 2a       	or	r15, r24
    738c:	cd aa       	std	Y+53, r12	; 0x35
    738e:	de aa       	std	Y+54, r13	; 0x36
    7390:	ef aa       	std	Y+55, r14	; 0x37
    7392:	f8 ae       	std	Y+56, r15	; 0x38
    7394:	81 a9       	ldd	r24, Z+49	; 0x31
    7396:	02 a9       	ldd	r16, Z+50	; 0x32
    7398:	10 e0       	ldi	r17, 0x00	; 0
    739a:	20 e0       	ldi	r18, 0x00	; 0
    739c:	30 e0       	ldi	r19, 0x00	; 0
    739e:	98 01       	movw	r18, r16
    73a0:	11 27       	eor	r17, r17
    73a2:	00 27       	eor	r16, r16
    73a4:	18 2b       	or	r17, r24
    73a6:	80 a9       	ldd	r24, Z+48	; 0x30
    73a8:	08 2b       	or	r16, r24
    73aa:	83 a9       	ldd	r24, Z+51	; 0x33
    73ac:	b9 01       	movw	r22, r18
    73ae:	a8 01       	movw	r20, r16
    73b0:	78 2b       	or	r23, r24
    73b2:	49 af       	std	Y+57, r20	; 0x39
    73b4:	5a af       	std	Y+58, r21	; 0x3a
    73b6:	6b af       	std	Y+59, r22	; 0x3b
    73b8:	7c af       	std	Y+60, r23	; 0x3c
    73ba:	85 a9       	ldd	r24, Z+53	; 0x35
    73bc:	86 a8       	ldd	r8, Z+54	; 0x36
    73be:	91 2c       	mov	r9, r1
    73c0:	a1 2c       	mov	r10, r1
    73c2:	b1 2c       	mov	r11, r1
    73c4:	54 01       	movw	r10, r8
    73c6:	99 24       	eor	r9, r9
    73c8:	88 24       	eor	r8, r8
    73ca:	98 2a       	or	r9, r24
    73cc:	84 a9       	ldd	r24, Z+52	; 0x34
    73ce:	88 2a       	or	r8, r24
    73d0:	87 a9       	ldd	r24, Z+55	; 0x37
    73d2:	75 01       	movw	r14, r10
    73d4:	64 01       	movw	r12, r8
    73d6:	f8 2a       	or	r15, r24
    73d8:	21 96       	adiw	r28, 0x01	; 1
    73da:	cc ae       	std	Y+60, r12	; 0x3c
    73dc:	dd ae       	std	Y+61, r13	; 0x3d
    73de:	ee ae       	std	Y+62, r14	; 0x3e
    73e0:	ff ae       	std	Y+63, r15	; 0x3f
    73e2:	21 97       	sbiw	r28, 0x01	; 1
    73e4:	81 ad       	ldd	r24, Z+57	; 0x39
    73e6:	02 ad       	ldd	r16, Z+58	; 0x3a
    73e8:	10 e0       	ldi	r17, 0x00	; 0
    73ea:	20 e0       	ldi	r18, 0x00	; 0
    73ec:	30 e0       	ldi	r19, 0x00	; 0
    73ee:	98 01       	movw	r18, r16
    73f0:	11 27       	eor	r17, r17
    73f2:	00 27       	eor	r16, r16
    73f4:	18 2b       	or	r17, r24
    73f6:	80 ad       	ldd	r24, Z+56	; 0x38
    73f8:	08 2b       	or	r16, r24
    73fa:	83 ad       	ldd	r24, Z+59	; 0x3b
    73fc:	b9 01       	movw	r22, r18
    73fe:	a8 01       	movw	r20, r16
    7400:	78 2b       	or	r23, r24
    7402:	25 96       	adiw	r28, 0x05	; 5
    7404:	4c af       	std	Y+60, r20	; 0x3c
    7406:	5d af       	std	Y+61, r21	; 0x3d
    7408:	6e af       	std	Y+62, r22	; 0x3e
    740a:	7f af       	std	Y+63, r23	; 0x3f
    740c:	25 97       	sbiw	r28, 0x05	; 5
    740e:	85 ad       	ldd	r24, Z+61	; 0x3d
    7410:	46 ad       	ldd	r20, Z+62	; 0x3e
    7412:	50 e0       	ldi	r21, 0x00	; 0
    7414:	60 e0       	ldi	r22, 0x00	; 0
    7416:	70 e0       	ldi	r23, 0x00	; 0
    7418:	ba 01       	movw	r22, r20
    741a:	55 27       	eor	r21, r21
    741c:	44 27       	eor	r20, r20
    741e:	58 2b       	or	r21, r24
    7420:	84 ad       	ldd	r24, Z+60	; 0x3c
    7422:	48 2b       	or	r20, r24
    7424:	87 ad       	ldd	r24, Z+63	; 0x3f
    7426:	6a 01       	movw	r12, r20
    7428:	7b 01       	movw	r14, r22
    742a:	f8 2a       	or	r15, r24
    742c:	29 96       	adiw	r28, 0x09	; 9
    742e:	cc ae       	std	Y+60, r12	; 0x3c
    7430:	dd ae       	std	Y+61, r13	; 0x3d
    7432:	ee ae       	std	Y+62, r14	; 0x3e
    7434:	ff ae       	std	Y+63, r15	; 0x3f
    7436:	29 97       	sbiw	r28, 0x09	; 9
    7438:	d1 01       	movw	r26, r2
    743a:	18 96       	adiw	r26, 0x08	; 8
    743c:	ed 90       	ld	r14, X+
    743e:	fd 90       	ld	r15, X+
    7440:	0d 91       	ld	r16, X+
    7442:	1c 91       	ld	r17, X
    7444:	1b 97       	sbiw	r26, 0x0b	; 11
    7446:	61 96       	adiw	r28, 0x11	; 17
    7448:	ec ae       	std	Y+60, r14	; 0x3c
    744a:	fd ae       	std	Y+61, r15	; 0x3d
    744c:	0e af       	std	Y+62, r16	; 0x3e
    744e:	1f af       	std	Y+63, r17	; 0x3f
    7450:	61 97       	sbiw	r28, 0x11	; 17
    7452:	1c 96       	adiw	r26, 0x0c	; 12
    7454:	cd 90       	ld	r12, X+
    7456:	dd 90       	ld	r13, X+
    7458:	ed 90       	ld	r14, X+
    745a:	fc 90       	ld	r15, X
    745c:	1f 97       	sbiw	r26, 0x0f	; 15
    745e:	c9 82       	std	Y+1, r12	; 0x01
    7460:	da 82       	std	Y+2, r13	; 0x02
    7462:	eb 82       	std	Y+3, r14	; 0x03
    7464:	fc 82       	std	Y+4, r15	; 0x04
    7466:	50 96       	adiw	r26, 0x10	; 16
    7468:	cd 90       	ld	r12, X+
    746a:	dd 90       	ld	r13, X+
    746c:	ed 90       	ld	r14, X+
    746e:	fc 90       	ld	r15, X
    7470:	53 97       	sbiw	r26, 0x13	; 19
    7472:	cd 82       	std	Y+5, r12	; 0x05
    7474:	de 82       	std	Y+6, r13	; 0x06
    7476:	ef 82       	std	Y+7, r14	; 0x07
    7478:	f8 86       	std	Y+8, r15	; 0x08
    747a:	54 96       	adiw	r26, 0x14	; 20
    747c:	cd 90       	ld	r12, X+
    747e:	dd 90       	ld	r13, X+
    7480:	ed 90       	ld	r14, X+
    7482:	fc 90       	ld	r15, X
    7484:	57 97       	sbiw	r26, 0x17	; 23
    7486:	2d 96       	adiw	r28, 0x0d	; 13
    7488:	cc ae       	std	Y+60, r12	; 0x3c
    748a:	dd ae       	std	Y+61, r13	; 0x3d
    748c:	ee ae       	std	Y+62, r14	; 0x3e
    748e:	ff ae       	std	Y+63, r15	; 0x3f
    7490:	2d 97       	sbiw	r28, 0x0d	; 13
    7492:	61 96       	adiw	r28, 0x11	; 17
    7494:	4c ad       	ldd	r20, Y+60	; 0x3c
    7496:	5d ad       	ldd	r21, Y+61	; 0x3d
    7498:	6e ad       	ldd	r22, Y+62	; 0x3e
    749a:	7f ad       	ldd	r23, Y+63	; 0x3f
    749c:	61 97       	sbiw	r28, 0x11	; 17
    749e:	48 58       	subi	r20, 0x88	; 136
    74a0:	5b 45       	sbci	r21, 0x5B	; 91
    74a2:	65 49       	sbci	r22, 0x95	; 149
    74a4:	78 42       	sbci	r23, 0x28	; 40
    74a6:	d7 01       	movw	r26, r14
    74a8:	c6 01       	movw	r24, r12
    74aa:	cd 80       	ldd	r12, Y+5	; 0x05
    74ac:	de 80       	ldd	r13, Y+6	; 0x06
    74ae:	ef 80       	ldd	r14, Y+7	; 0x07
    74b0:	f8 84       	ldd	r15, Y+8	; 0x08
    74b2:	8c 25       	eor	r24, r12
    74b4:	9d 25       	eor	r25, r13
    74b6:	ae 25       	eor	r26, r14
    74b8:	bf 25       	eor	r27, r15
    74ba:	e9 80       	ldd	r14, Y+1	; 0x01
    74bc:	fa 80       	ldd	r15, Y+2	; 0x02
    74be:	0b 81       	ldd	r16, Y+3	; 0x03
    74c0:	1c 81       	ldd	r17, Y+4	; 0x04
    74c2:	8e 21       	and	r24, r14
    74c4:	9f 21       	and	r25, r15
    74c6:	a0 23       	and	r26, r16
    74c8:	b1 23       	and	r27, r17
    74ca:	2d 96       	adiw	r28, 0x0d	; 13
    74cc:	0c ad       	ldd	r16, Y+60	; 0x3c
    74ce:	1d ad       	ldd	r17, Y+61	; 0x3d
    74d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    74d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    74d4:	2d 97       	sbiw	r28, 0x0d	; 13
    74d6:	80 27       	eor	r24, r16
    74d8:	91 27       	eor	r25, r17
    74da:	a2 27       	eor	r26, r18
    74dc:	b3 27       	eor	r27, r19
    74de:	84 0f       	add	r24, r20
    74e0:	95 1f       	adc	r25, r21
    74e2:	a6 1f       	adc	r26, r22
    74e4:	b7 1f       	adc	r27, r23
    74e6:	29 85       	ldd	r18, Y+9	; 0x09
    74e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    74ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    74ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    74ee:	82 0f       	add	r24, r18
    74f0:	93 1f       	adc	r25, r19
    74f2:	a4 1f       	adc	r26, r20
    74f4:	b5 1f       	adc	r27, r21
    74f6:	8c 01       	movw	r16, r24
    74f8:	9d 01       	movw	r18, r26
    74fa:	00 0f       	add	r16, r16
    74fc:	11 1f       	adc	r17, r17
    74fe:	22 1f       	adc	r18, r18
    7500:	33 1f       	adc	r19, r19
    7502:	00 0f       	add	r16, r16
    7504:	11 1f       	adc	r17, r17
    7506:	22 1f       	adc	r18, r18
    7508:	33 1f       	adc	r19, r19
    750a:	00 0f       	add	r16, r16
    750c:	11 1f       	adc	r17, r17
    750e:	22 1f       	adc	r18, r18
    7510:	33 1f       	adc	r19, r19
    7512:	00 0f       	add	r16, r16
    7514:	11 1f       	adc	r17, r17
    7516:	22 1f       	adc	r18, r18
    7518:	33 1f       	adc	r19, r19
    751a:	00 0f       	add	r16, r16
    751c:	11 1f       	adc	r17, r17
    751e:	22 1f       	adc	r18, r18
    7520:	33 1f       	adc	r19, r19
    7522:	00 0f       	add	r16, r16
    7524:	11 1f       	adc	r17, r17
    7526:	22 1f       	adc	r18, r18
    7528:	33 1f       	adc	r19, r19
    752a:	00 0f       	add	r16, r16
    752c:	11 1f       	adc	r17, r17
    752e:	22 1f       	adc	r18, r18
    7530:	33 1f       	adc	r19, r19
    7532:	07 2e       	mov	r0, r23
    7534:	79 e1       	ldi	r23, 0x19	; 25
    7536:	b6 95       	lsr	r27
    7538:	a7 95       	ror	r26
    753a:	97 95       	ror	r25
    753c:	87 95       	ror	r24
    753e:	7a 95       	dec	r23
    7540:	d1 f7       	brne	.-12     	; 0x7536 <md5_process+0x3a8>
    7542:	70 2d       	mov	r23, r0
    7544:	80 2b       	or	r24, r16
    7546:	91 2b       	or	r25, r17
    7548:	a2 2b       	or	r26, r18
    754a:	b3 2b       	or	r27, r19
    754c:	49 81       	ldd	r20, Y+1	; 0x01
    754e:	5a 81       	ldd	r21, Y+2	; 0x02
    7550:	6b 81       	ldd	r22, Y+3	; 0x03
    7552:	7c 81       	ldd	r23, Y+4	; 0x04
    7554:	84 0f       	add	r24, r20
    7556:	95 1f       	adc	r25, r21
    7558:	a6 1f       	adc	r26, r22
    755a:	b7 1f       	adc	r27, r23
    755c:	2d 96       	adiw	r28, 0x0d	; 13
    755e:	0c ad       	ldd	r16, Y+60	; 0x3c
    7560:	1d ad       	ldd	r17, Y+61	; 0x3d
    7562:	2e ad       	ldd	r18, Y+62	; 0x3e
    7564:	3f ad       	ldd	r19, Y+63	; 0x3f
    7566:	2d 97       	sbiw	r28, 0x0d	; 13
    7568:	0a 5a       	subi	r16, 0xAA	; 170
    756a:	18 44       	sbci	r17, 0x48	; 72
    756c:	28 43       	sbci	r18, 0x38	; 56
    756e:	37 41       	sbci	r19, 0x17	; 23
    7570:	4d 85       	ldd	r20, Y+13	; 0x0d
    7572:	5e 85       	ldd	r21, Y+14	; 0x0e
    7574:	6f 85       	ldd	r22, Y+15	; 0x0f
    7576:	78 89       	ldd	r23, Y+16	; 0x10
    7578:	40 0f       	add	r20, r16
    757a:	51 1f       	adc	r21, r17
    757c:	62 1f       	adc	r22, r18
    757e:	73 1f       	adc	r23, r19
    7580:	0d 81       	ldd	r16, Y+5	; 0x05
    7582:	1e 81       	ldd	r17, Y+6	; 0x06
    7584:	2f 81       	ldd	r18, Y+7	; 0x07
    7586:	38 85       	ldd	r19, Y+8	; 0x08
    7588:	c9 80       	ldd	r12, Y+1	; 0x01
    758a:	da 80       	ldd	r13, Y+2	; 0x02
    758c:	eb 80       	ldd	r14, Y+3	; 0x03
    758e:	fc 80       	ldd	r15, Y+4	; 0x04
    7590:	0c 25       	eor	r16, r12
    7592:	1d 25       	eor	r17, r13
    7594:	2e 25       	eor	r18, r14
    7596:	3f 25       	eor	r19, r15
    7598:	08 23       	and	r16, r24
    759a:	19 23       	and	r17, r25
    759c:	2a 23       	and	r18, r26
    759e:	3b 23       	and	r19, r27
    75a0:	cd 80       	ldd	r12, Y+5	; 0x05
    75a2:	de 80       	ldd	r13, Y+6	; 0x06
    75a4:	ef 80       	ldd	r14, Y+7	; 0x07
    75a6:	f8 84       	ldd	r15, Y+8	; 0x08
    75a8:	0c 25       	eor	r16, r12
    75aa:	1d 25       	eor	r17, r13
    75ac:	2e 25       	eor	r18, r14
    75ae:	3f 25       	eor	r19, r15
    75b0:	04 0f       	add	r16, r20
    75b2:	15 1f       	adc	r17, r21
    75b4:	26 1f       	adc	r18, r22
    75b6:	37 1f       	adc	r19, r23
    75b8:	b9 01       	movw	r22, r18
    75ba:	a8 01       	movw	r20, r16
    75bc:	03 2e       	mov	r0, r19
    75be:	3c e0       	ldi	r19, 0x0C	; 12
    75c0:	44 0f       	add	r20, r20
    75c2:	55 1f       	adc	r21, r21
    75c4:	66 1f       	adc	r22, r22
    75c6:	77 1f       	adc	r23, r23
    75c8:	3a 95       	dec	r19
    75ca:	d1 f7       	brne	.-12     	; 0x75c0 <md5_process+0x432>
    75cc:	30 2d       	mov	r19, r0
    75ce:	0f 2e       	mov	r0, r31
    75d0:	f4 e1       	ldi	r31, 0x14	; 20
    75d2:	36 95       	lsr	r19
    75d4:	27 95       	ror	r18
    75d6:	17 95       	ror	r17
    75d8:	07 95       	ror	r16
    75da:	fa 95       	dec	r31
    75dc:	d1 f7       	brne	.-12     	; 0x75d2 <md5_process+0x444>
    75de:	f0 2d       	mov	r31, r0
    75e0:	04 2b       	or	r16, r20
    75e2:	15 2b       	or	r17, r21
    75e4:	26 2b       	or	r18, r22
    75e6:	37 2b       	or	r19, r23
    75e8:	08 0f       	add	r16, r24
    75ea:	19 1f       	adc	r17, r25
    75ec:	2a 1f       	adc	r18, r26
    75ee:	3b 1f       	adc	r19, r27
    75f0:	46 01       	movw	r8, r12
    75f2:	57 01       	movw	r10, r14
    75f4:	45 e2       	ldi	r20, 0x25	; 37
    75f6:	84 1a       	sub	r8, r20
    75f8:	4f e8       	ldi	r20, 0x8F	; 143
    75fa:	94 0a       	sbc	r9, r20
    75fc:	4f ed       	ldi	r20, 0xDF	; 223
    75fe:	a4 0a       	sbc	r10, r20
    7600:	4b ed       	ldi	r20, 0xDB	; 219
    7602:	b4 0a       	sbc	r11, r20
    7604:	49 89       	ldd	r20, Y+17	; 0x11
    7606:	5a 89       	ldd	r21, Y+18	; 0x12
    7608:	6b 89       	ldd	r22, Y+19	; 0x13
    760a:	7c 89       	ldd	r23, Y+20	; 0x14
    760c:	48 0d       	add	r20, r8
    760e:	59 1d       	adc	r21, r9
    7610:	6a 1d       	adc	r22, r10
    7612:	7b 1d       	adc	r23, r11
    7614:	89 80       	ldd	r8, Y+1	; 0x01
    7616:	9a 80       	ldd	r9, Y+2	; 0x02
    7618:	ab 80       	ldd	r10, Y+3	; 0x03
    761a:	bc 80       	ldd	r11, Y+4	; 0x04
    761c:	88 26       	eor	r8, r24
    761e:	99 26       	eor	r9, r25
    7620:	aa 26       	eor	r10, r26
    7622:	bb 26       	eor	r11, r27
    7624:	80 22       	and	r8, r16
    7626:	91 22       	and	r9, r17
    7628:	a2 22       	and	r10, r18
    762a:	b3 22       	and	r11, r19
    762c:	c9 80       	ldd	r12, Y+1	; 0x01
    762e:	da 80       	ldd	r13, Y+2	; 0x02
    7630:	eb 80       	ldd	r14, Y+3	; 0x03
    7632:	fc 80       	ldd	r15, Y+4	; 0x04
    7634:	8c 24       	eor	r8, r12
    7636:	9d 24       	eor	r9, r13
    7638:	ae 24       	eor	r10, r14
    763a:	bf 24       	eor	r11, r15
    763c:	84 0e       	add	r8, r20
    763e:	95 1e       	adc	r9, r21
    7640:	a6 1e       	adc	r10, r22
    7642:	b7 1e       	adc	r11, r23
    7644:	b5 01       	movw	r22, r10
    7646:	a4 01       	movw	r20, r8
    7648:	03 2e       	mov	r0, r19
    764a:	3f e0       	ldi	r19, 0x0F	; 15
    764c:	76 95       	lsr	r23
    764e:	67 95       	ror	r22
    7650:	57 95       	ror	r21
    7652:	47 95       	ror	r20
    7654:	3a 95       	dec	r19
    7656:	d1 f7       	brne	.-12     	; 0x764c <md5_process+0x4be>
    7658:	30 2d       	mov	r19, r0
    765a:	07 2e       	mov	r0, r23
    765c:	71 e1       	ldi	r23, 0x11	; 17
    765e:	88 0c       	add	r8, r8
    7660:	99 1c       	adc	r9, r9
    7662:	aa 1c       	adc	r10, r10
    7664:	bb 1c       	adc	r11, r11
    7666:	7a 95       	dec	r23
    7668:	d1 f7       	brne	.-12     	; 0x765e <md5_process+0x4d0>
    766a:	70 2d       	mov	r23, r0
    766c:	84 2a       	or	r8, r20
    766e:	95 2a       	or	r9, r21
    7670:	a6 2a       	or	r10, r22
    7672:	b7 2a       	or	r11, r23
    7674:	80 0e       	add	r8, r16
    7676:	91 1e       	adc	r9, r17
    7678:	a2 1e       	adc	r10, r18
    767a:	b3 1e       	adc	r11, r19
    767c:	42 e1       	ldi	r20, 0x12	; 18
    767e:	c4 1a       	sub	r12, r20
    7680:	41 e3       	ldi	r20, 0x31	; 49
    7682:	d4 0a       	sbc	r13, r20
    7684:	42 e4       	ldi	r20, 0x42	; 66
    7686:	e4 0a       	sbc	r14, r20
    7688:	4e e3       	ldi	r20, 0x3E	; 62
    768a:	f4 0a       	sbc	r15, r20
    768c:	4d 89       	ldd	r20, Y+21	; 0x15
    768e:	5e 89       	ldd	r21, Y+22	; 0x16
    7690:	6f 89       	ldd	r22, Y+23	; 0x17
    7692:	78 8d       	ldd	r23, Y+24	; 0x18
    7694:	4c 0d       	add	r20, r12
    7696:	5d 1d       	adc	r21, r13
    7698:	6e 1d       	adc	r22, r14
    769a:	7f 1d       	adc	r23, r15
    769c:	68 01       	movw	r12, r16
    769e:	79 01       	movw	r14, r18
    76a0:	c8 26       	eor	r12, r24
    76a2:	d9 26       	eor	r13, r25
    76a4:	ea 26       	eor	r14, r26
    76a6:	fb 26       	eor	r15, r27
    76a8:	c8 20       	and	r12, r8
    76aa:	d9 20       	and	r13, r9
    76ac:	ea 20       	and	r14, r10
    76ae:	fb 20       	and	r15, r11
    76b0:	c8 26       	eor	r12, r24
    76b2:	d9 26       	eor	r13, r25
    76b4:	ea 26       	eor	r14, r26
    76b6:	fb 26       	eor	r15, r27
    76b8:	c4 0e       	add	r12, r20
    76ba:	d5 1e       	adc	r13, r21
    76bc:	e6 1e       	adc	r14, r22
    76be:	f7 1e       	adc	r15, r23
    76c0:	b7 01       	movw	r22, r14
    76c2:	a6 01       	movw	r20, r12
    76c4:	03 2e       	mov	r0, r19
    76c6:	3a e0       	ldi	r19, 0x0A	; 10
    76c8:	76 95       	lsr	r23
    76ca:	67 95       	ror	r22
    76cc:	57 95       	ror	r21
    76ce:	47 95       	ror	r20
    76d0:	3a 95       	dec	r19
    76d2:	d1 f7       	brne	.-12     	; 0x76c8 <md5_process+0x53a>
    76d4:	30 2d       	mov	r19, r0
    76d6:	0b 2e       	mov	r0, r27
    76d8:	b6 e1       	ldi	r27, 0x16	; 22
    76da:	cc 0c       	add	r12, r12
    76dc:	dd 1c       	adc	r13, r13
    76de:	ee 1c       	adc	r14, r14
    76e0:	ff 1c       	adc	r15, r15
    76e2:	ba 95       	dec	r27
    76e4:	d1 f7       	brne	.-12     	; 0x76da <md5_process+0x54c>
    76e6:	b0 2d       	mov	r27, r0
    76e8:	c4 2a       	or	r12, r20
    76ea:	d5 2a       	or	r13, r21
    76ec:	e6 2a       	or	r14, r22
    76ee:	f7 2a       	or	r15, r23
    76f0:	c8 0c       	add	r12, r8
    76f2:	d9 1c       	adc	r13, r9
    76f4:	ea 1c       	adc	r14, r10
    76f6:	fb 1c       	adc	r15, r11
    76f8:	49 8d       	ldd	r20, Y+25	; 0x19
    76fa:	5a 8d       	ldd	r21, Y+26	; 0x1a
    76fc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    76fe:	7c 8d       	ldd	r23, Y+28	; 0x1c
    7700:	41 55       	subi	r20, 0x51	; 81
    7702:	50 4f       	sbci	r21, 0xF0	; 240
    7704:	63 48       	sbci	r22, 0x83	; 131
    7706:	7a 40       	sbci	r23, 0x0A	; 10
    7708:	84 0f       	add	r24, r20
    770a:	95 1f       	adc	r25, r21
    770c:	a6 1f       	adc	r26, r22
    770e:	b7 1f       	adc	r27, r23
    7710:	b5 01       	movw	r22, r10
    7712:	a4 01       	movw	r20, r8
    7714:	40 27       	eor	r20, r16
    7716:	51 27       	eor	r21, r17
    7718:	62 27       	eor	r22, r18
    771a:	73 27       	eor	r23, r19
    771c:	4c 21       	and	r20, r12
    771e:	5d 21       	and	r21, r13
    7720:	6e 21       	and	r22, r14
    7722:	7f 21       	and	r23, r15
    7724:	40 27       	eor	r20, r16
    7726:	51 27       	eor	r21, r17
    7728:	62 27       	eor	r22, r18
    772a:	73 27       	eor	r23, r19
    772c:	84 0f       	add	r24, r20
    772e:	95 1f       	adc	r25, r21
    7730:	a6 1f       	adc	r26, r22
    7732:	b7 1f       	adc	r27, r23
    7734:	2c 01       	movw	r4, r24
    7736:	3d 01       	movw	r6, r26
    7738:	44 0c       	add	r4, r4
    773a:	55 1c       	adc	r5, r5
    773c:	66 1c       	adc	r6, r6
    773e:	77 1c       	adc	r7, r7
    7740:	44 0c       	add	r4, r4
    7742:	55 1c       	adc	r5, r5
    7744:	66 1c       	adc	r6, r6
    7746:	77 1c       	adc	r7, r7
    7748:	44 0c       	add	r4, r4
    774a:	55 1c       	adc	r5, r5
    774c:	66 1c       	adc	r6, r6
    774e:	77 1c       	adc	r7, r7
    7750:	44 0c       	add	r4, r4
    7752:	55 1c       	adc	r5, r5
    7754:	66 1c       	adc	r6, r6
    7756:	77 1c       	adc	r7, r7
    7758:	44 0c       	add	r4, r4
    775a:	55 1c       	adc	r5, r5
    775c:	66 1c       	adc	r6, r6
    775e:	77 1c       	adc	r7, r7
    7760:	44 0c       	add	r4, r4
    7762:	55 1c       	adc	r5, r5
    7764:	66 1c       	adc	r6, r6
    7766:	77 1c       	adc	r7, r7
    7768:	44 0c       	add	r4, r4
    776a:	55 1c       	adc	r5, r5
    776c:	66 1c       	adc	r6, r6
    776e:	77 1c       	adc	r7, r7
    7770:	07 2e       	mov	r0, r23
    7772:	79 e1       	ldi	r23, 0x19	; 25
    7774:	b6 95       	lsr	r27
    7776:	a7 95       	ror	r26
    7778:	97 95       	ror	r25
    777a:	87 95       	ror	r24
    777c:	7a 95       	dec	r23
    777e:	d1 f7       	brne	.-12     	; 0x7774 <md5_process+0x5e6>
    7780:	70 2d       	mov	r23, r0
    7782:	84 29       	or	r24, r4
    7784:	95 29       	or	r25, r5
    7786:	a6 29       	or	r26, r6
    7788:	b7 29       	or	r27, r7
    778a:	8c 0d       	add	r24, r12
    778c:	9d 1d       	adc	r25, r13
    778e:	ae 1d       	adc	r26, r14
    7790:	bf 1d       	adc	r27, r15
    7792:	4d 8d       	ldd	r20, Y+29	; 0x1d
    7794:	5e 8d       	ldd	r21, Y+30	; 0x1e
    7796:	6f 8d       	ldd	r22, Y+31	; 0x1f
    7798:	78 a1       	ldd	r23, Y+32	; 0x20
    779a:	46 5d       	subi	r20, 0xD6	; 214
    779c:	59 43       	sbci	r21, 0x39	; 57
    779e:	68 47       	sbci	r22, 0x78	; 120
    77a0:	78 4b       	sbci	r23, 0xB8	; 184
    77a2:	04 0f       	add	r16, r20
    77a4:	15 1f       	adc	r17, r21
    77a6:	26 1f       	adc	r18, r22
    77a8:	37 1f       	adc	r19, r23
    77aa:	b7 01       	movw	r22, r14
    77ac:	a6 01       	movw	r20, r12
    77ae:	48 25       	eor	r20, r8
    77b0:	59 25       	eor	r21, r9
    77b2:	6a 25       	eor	r22, r10
    77b4:	7b 25       	eor	r23, r11
    77b6:	48 23       	and	r20, r24
    77b8:	59 23       	and	r21, r25
    77ba:	6a 23       	and	r22, r26
    77bc:	7b 23       	and	r23, r27
    77be:	48 25       	eor	r20, r8
    77c0:	59 25       	eor	r21, r9
    77c2:	6a 25       	eor	r22, r10
    77c4:	7b 25       	eor	r23, r11
    77c6:	04 0f       	add	r16, r20
    77c8:	15 1f       	adc	r17, r21
    77ca:	26 1f       	adc	r18, r22
    77cc:	37 1f       	adc	r19, r23
    77ce:	b9 01       	movw	r22, r18
    77d0:	a8 01       	movw	r20, r16
    77d2:	03 2e       	mov	r0, r19
    77d4:	3c e0       	ldi	r19, 0x0C	; 12
    77d6:	44 0f       	add	r20, r20
    77d8:	55 1f       	adc	r21, r21
    77da:	66 1f       	adc	r22, r22
    77dc:	77 1f       	adc	r23, r23
    77de:	3a 95       	dec	r19
    77e0:	d1 f7       	brne	.-12     	; 0x77d6 <md5_process+0x648>
    77e2:	30 2d       	mov	r19, r0
    77e4:	0f 2e       	mov	r0, r31
    77e6:	f4 e1       	ldi	r31, 0x14	; 20
    77e8:	36 95       	lsr	r19
    77ea:	27 95       	ror	r18
    77ec:	17 95       	ror	r17
    77ee:	07 95       	ror	r16
    77f0:	fa 95       	dec	r31
    77f2:	d1 f7       	brne	.-12     	; 0x77e8 <md5_process+0x65a>
    77f4:	f0 2d       	mov	r31, r0
    77f6:	04 2b       	or	r16, r20
    77f8:	15 2b       	or	r17, r21
    77fa:	26 2b       	or	r18, r22
    77fc:	37 2b       	or	r19, r23
    77fe:	08 0f       	add	r16, r24
    7800:	19 1f       	adc	r17, r25
    7802:	2a 1f       	adc	r18, r26
    7804:	3b 1f       	adc	r19, r27
    7806:	49 a1       	ldd	r20, Y+33	; 0x21
    7808:	5a a1       	ldd	r21, Y+34	; 0x22
    780a:	6b a1       	ldd	r22, Y+35	; 0x23
    780c:	7c a1       	ldd	r23, Y+36	; 0x24
    780e:	4d 5e       	subi	r20, 0xED	; 237
    7810:	59 4b       	sbci	r21, 0xB9	; 185
    7812:	6f 4c       	sbci	r22, 0xCF	; 207
    7814:	77 45       	sbci	r23, 0x57	; 87
    7816:	84 0e       	add	r8, r20
    7818:	95 1e       	adc	r9, r21
    781a:	a6 1e       	adc	r10, r22
    781c:	b7 1e       	adc	r11, r23
    781e:	ac 01       	movw	r20, r24
    7820:	bd 01       	movw	r22, r26
    7822:	4c 25       	eor	r20, r12
    7824:	5d 25       	eor	r21, r13
    7826:	6e 25       	eor	r22, r14
    7828:	7f 25       	eor	r23, r15
    782a:	40 23       	and	r20, r16
    782c:	51 23       	and	r21, r17
    782e:	62 23       	and	r22, r18
    7830:	73 23       	and	r23, r19
    7832:	4c 25       	eor	r20, r12
    7834:	5d 25       	eor	r21, r13
    7836:	6e 25       	eor	r22, r14
    7838:	7f 25       	eor	r23, r15
    783a:	84 0e       	add	r8, r20
    783c:	95 1e       	adc	r9, r21
    783e:	a6 1e       	adc	r10, r22
    7840:	b7 1e       	adc	r11, r23
    7842:	b5 01       	movw	r22, r10
    7844:	a4 01       	movw	r20, r8
    7846:	03 2e       	mov	r0, r19
    7848:	3f e0       	ldi	r19, 0x0F	; 15
    784a:	76 95       	lsr	r23
    784c:	67 95       	ror	r22
    784e:	57 95       	ror	r21
    7850:	47 95       	ror	r20
    7852:	3a 95       	dec	r19
    7854:	d1 f7       	brne	.-12     	; 0x784a <md5_process+0x6bc>
    7856:	30 2d       	mov	r19, r0
    7858:	07 2e       	mov	r0, r23
    785a:	71 e1       	ldi	r23, 0x11	; 17
    785c:	88 0c       	add	r8, r8
    785e:	99 1c       	adc	r9, r9
    7860:	aa 1c       	adc	r10, r10
    7862:	bb 1c       	adc	r11, r11
    7864:	7a 95       	dec	r23
    7866:	d1 f7       	brne	.-12     	; 0x785c <md5_process+0x6ce>
    7868:	70 2d       	mov	r23, r0
    786a:	84 2a       	or	r8, r20
    786c:	95 2a       	or	r9, r21
    786e:	a6 2a       	or	r10, r22
    7870:	b7 2a       	or	r11, r23
    7872:	80 0e       	add	r8, r16
    7874:	91 1e       	adc	r9, r17
    7876:	a2 1e       	adc	r10, r18
    7878:	b3 1e       	adc	r11, r19
    787a:	4d a1       	ldd	r20, Y+37	; 0x25
    787c:	5e a1       	ldd	r21, Y+38	; 0x26
    787e:	6f a1       	ldd	r22, Y+39	; 0x27
    7880:	78 a5       	ldd	r23, Y+40	; 0x28
    7882:	4f 5f       	subi	r20, 0xFF	; 255
    7884:	5a 46       	sbci	r21, 0x6A	; 106
    7886:	69 4b       	sbci	r22, 0xB9	; 185
    7888:	72 40       	sbci	r23, 0x02	; 2
    788a:	c4 0e       	add	r12, r20
    788c:	d5 1e       	adc	r13, r21
    788e:	e6 1e       	adc	r14, r22
    7890:	f7 1e       	adc	r15, r23
    7892:	b9 01       	movw	r22, r18
    7894:	a8 01       	movw	r20, r16
    7896:	48 27       	eor	r20, r24
    7898:	59 27       	eor	r21, r25
    789a:	6a 27       	eor	r22, r26
    789c:	7b 27       	eor	r23, r27
    789e:	48 21       	and	r20, r8
    78a0:	59 21       	and	r21, r9
    78a2:	6a 21       	and	r22, r10
    78a4:	7b 21       	and	r23, r11
    78a6:	48 27       	eor	r20, r24
    78a8:	59 27       	eor	r21, r25
    78aa:	6a 27       	eor	r22, r26
    78ac:	7b 27       	eor	r23, r27
    78ae:	c4 0e       	add	r12, r20
    78b0:	d5 1e       	adc	r13, r21
    78b2:	e6 1e       	adc	r14, r22
    78b4:	f7 1e       	adc	r15, r23
    78b6:	b7 01       	movw	r22, r14
    78b8:	a6 01       	movw	r20, r12
    78ba:	03 2e       	mov	r0, r19
    78bc:	3a e0       	ldi	r19, 0x0A	; 10
    78be:	76 95       	lsr	r23
    78c0:	67 95       	ror	r22
    78c2:	57 95       	ror	r21
    78c4:	47 95       	ror	r20
    78c6:	3a 95       	dec	r19
    78c8:	d1 f7       	brne	.-12     	; 0x78be <md5_process+0x730>
    78ca:	30 2d       	mov	r19, r0
    78cc:	0b 2e       	mov	r0, r27
    78ce:	b6 e1       	ldi	r27, 0x16	; 22
    78d0:	cc 0c       	add	r12, r12
    78d2:	dd 1c       	adc	r13, r13
    78d4:	ee 1c       	adc	r14, r14
    78d6:	ff 1c       	adc	r15, r15
    78d8:	ba 95       	dec	r27
    78da:	d1 f7       	brne	.-12     	; 0x78d0 <md5_process+0x742>
    78dc:	b0 2d       	mov	r27, r0
    78de:	c4 2a       	or	r12, r20
    78e0:	d5 2a       	or	r13, r21
    78e2:	e6 2a       	or	r14, r22
    78e4:	f7 2a       	or	r15, r23
    78e6:	c8 0c       	add	r12, r8
    78e8:	d9 1c       	adc	r13, r9
    78ea:	ea 1c       	adc	r14, r10
    78ec:	fb 1c       	adc	r15, r11
    78ee:	49 a5       	ldd	r20, Y+41	; 0x29
    78f0:	5a a5       	ldd	r21, Y+42	; 0x2a
    78f2:	6b a5       	ldd	r22, Y+43	; 0x2b
    78f4:	7c a5       	ldd	r23, Y+44	; 0x2c
    78f6:	48 52       	subi	r20, 0x28	; 40
    78f8:	57 46       	sbci	r21, 0x67	; 103
    78fa:	6f 47       	sbci	r22, 0x7F	; 127
    78fc:	76 49       	sbci	r23, 0x96	; 150
    78fe:	84 0f       	add	r24, r20
    7900:	95 1f       	adc	r25, r21
    7902:	a6 1f       	adc	r26, r22
    7904:	b7 1f       	adc	r27, r23
    7906:	b5 01       	movw	r22, r10
    7908:	a4 01       	movw	r20, r8
    790a:	40 27       	eor	r20, r16
    790c:	51 27       	eor	r21, r17
    790e:	62 27       	eor	r22, r18
    7910:	73 27       	eor	r23, r19
    7912:	4c 21       	and	r20, r12
    7914:	5d 21       	and	r21, r13
    7916:	6e 21       	and	r22, r14
    7918:	7f 21       	and	r23, r15
    791a:	2a 01       	movw	r4, r20
    791c:	3b 01       	movw	r6, r22
    791e:	40 26       	eor	r4, r16
    7920:	51 26       	eor	r5, r17
    7922:	62 26       	eor	r6, r18
    7924:	73 26       	eor	r7, r19
    7926:	ac 01       	movw	r20, r24
    7928:	bd 01       	movw	r22, r26
    792a:	44 0d       	add	r20, r4
    792c:	55 1d       	adc	r21, r5
    792e:	66 1d       	adc	r22, r6
    7930:	77 1d       	adc	r23, r7
    7932:	2a 01       	movw	r4, r20
    7934:	3b 01       	movw	r6, r22
    7936:	44 0c       	add	r4, r4
    7938:	55 1c       	adc	r5, r5
    793a:	66 1c       	adc	r6, r6
    793c:	77 1c       	adc	r7, r7
    793e:	44 0c       	add	r4, r4
    7940:	55 1c       	adc	r5, r5
    7942:	66 1c       	adc	r6, r6
    7944:	77 1c       	adc	r7, r7
    7946:	44 0c       	add	r4, r4
    7948:	55 1c       	adc	r5, r5
    794a:	66 1c       	adc	r6, r6
    794c:	77 1c       	adc	r7, r7
    794e:	44 0c       	add	r4, r4
    7950:	55 1c       	adc	r5, r5
    7952:	66 1c       	adc	r6, r6
    7954:	77 1c       	adc	r7, r7
    7956:	44 0c       	add	r4, r4
    7958:	55 1c       	adc	r5, r5
    795a:	66 1c       	adc	r6, r6
    795c:	77 1c       	adc	r7, r7
    795e:	44 0c       	add	r4, r4
    7960:	55 1c       	adc	r5, r5
    7962:	66 1c       	adc	r6, r6
    7964:	77 1c       	adc	r7, r7
    7966:	44 0c       	add	r4, r4
    7968:	55 1c       	adc	r5, r5
    796a:	66 1c       	adc	r6, r6
    796c:	77 1c       	adc	r7, r7
    796e:	03 2e       	mov	r0, r19
    7970:	39 e1       	ldi	r19, 0x19	; 25
    7972:	76 95       	lsr	r23
    7974:	67 95       	ror	r22
    7976:	57 95       	ror	r21
    7978:	47 95       	ror	r20
    797a:	3a 95       	dec	r19
    797c:	d1 f7       	brne	.-12     	; 0x7972 <md5_process+0x7e4>
    797e:	30 2d       	mov	r19, r0
    7980:	44 29       	or	r20, r4
    7982:	55 29       	or	r21, r5
    7984:	66 29       	or	r22, r6
    7986:	77 29       	or	r23, r7
    7988:	4c 0d       	add	r20, r12
    798a:	5d 1d       	adc	r21, r13
    798c:	6e 1d       	adc	r22, r14
    798e:	7f 1d       	adc	r23, r15
    7990:	8d a5       	ldd	r24, Y+45	; 0x2d
    7992:	9e a5       	ldd	r25, Y+46	; 0x2e
    7994:	af a5       	ldd	r26, Y+47	; 0x2f
    7996:	b8 a9       	ldd	r27, Y+48	; 0x30
    7998:	81 55       	subi	r24, 0x51	; 81
    799a:	98 40       	sbci	r25, 0x08	; 8
    799c:	ab 4b       	sbci	r26, 0xBB	; 187
    799e:	b4 47       	sbci	r27, 0x74	; 116
    79a0:	08 0f       	add	r16, r24
    79a2:	19 1f       	adc	r17, r25
    79a4:	2a 1f       	adc	r18, r26
    79a6:	3b 1f       	adc	r19, r27
    79a8:	d7 01       	movw	r26, r14
    79aa:	c6 01       	movw	r24, r12
    79ac:	88 25       	eor	r24, r8
    79ae:	99 25       	eor	r25, r9
    79b0:	aa 25       	eor	r26, r10
    79b2:	bb 25       	eor	r27, r11
    79b4:	84 23       	and	r24, r20
    79b6:	95 23       	and	r25, r21
    79b8:	a6 23       	and	r26, r22
    79ba:	b7 23       	and	r27, r23
    79bc:	88 25       	eor	r24, r8
    79be:	99 25       	eor	r25, r9
    79c0:	aa 25       	eor	r26, r10
    79c2:	bb 25       	eor	r27, r11
    79c4:	08 0f       	add	r16, r24
    79c6:	19 1f       	adc	r17, r25
    79c8:	2a 1f       	adc	r18, r26
    79ca:	3b 1f       	adc	r19, r27
    79cc:	d9 01       	movw	r26, r18
    79ce:	c8 01       	movw	r24, r16
    79d0:	07 2e       	mov	r0, r23
    79d2:	7c e0       	ldi	r23, 0x0C	; 12
    79d4:	88 0f       	add	r24, r24
    79d6:	99 1f       	adc	r25, r25
    79d8:	aa 1f       	adc	r26, r26
    79da:	bb 1f       	adc	r27, r27
    79dc:	7a 95       	dec	r23
    79de:	d1 f7       	brne	.-12     	; 0x79d4 <md5_process+0x846>
    79e0:	70 2d       	mov	r23, r0
    79e2:	0f 2e       	mov	r0, r31
    79e4:	f4 e1       	ldi	r31, 0x14	; 20
    79e6:	36 95       	lsr	r19
    79e8:	27 95       	ror	r18
    79ea:	17 95       	ror	r17
    79ec:	07 95       	ror	r16
    79ee:	fa 95       	dec	r31
    79f0:	d1 f7       	brne	.-12     	; 0x79e6 <md5_process+0x858>
    79f2:	f0 2d       	mov	r31, r0
    79f4:	08 2b       	or	r16, r24
    79f6:	19 2b       	or	r17, r25
    79f8:	2a 2b       	or	r18, r26
    79fa:	3b 2b       	or	r19, r27
    79fc:	04 0f       	add	r16, r20
    79fe:	15 1f       	adc	r17, r21
    7a00:	26 1f       	adc	r18, r22
    7a02:	37 1f       	adc	r19, r23
    7a04:	89 a9       	ldd	r24, Y+49	; 0x31
    7a06:	9a a9       	ldd	r25, Y+50	; 0x32
    7a08:	ab a9       	ldd	r26, Y+51	; 0x33
    7a0a:	bc a9       	ldd	r27, Y+52	; 0x34
    7a0c:	8f 54       	subi	r24, 0x4F	; 79
    7a0e:	94 4a       	sbci	r25, 0xA4	; 164
    7a10:	a1 09       	sbc	r26, r1
    7a12:	b1 09       	sbc	r27, r1
    7a14:	88 0e       	add	r8, r24
    7a16:	99 1e       	adc	r9, r25
    7a18:	aa 1e       	adc	r10, r26
    7a1a:	bb 1e       	adc	r11, r27
    7a1c:	db 01       	movw	r26, r22
    7a1e:	ca 01       	movw	r24, r20
    7a20:	8c 25       	eor	r24, r12
    7a22:	9d 25       	eor	r25, r13
    7a24:	ae 25       	eor	r26, r14
    7a26:	bf 25       	eor	r27, r15
    7a28:	80 23       	and	r24, r16
    7a2a:	91 23       	and	r25, r17
    7a2c:	a2 23       	and	r26, r18
    7a2e:	b3 23       	and	r27, r19
    7a30:	8c 25       	eor	r24, r12
    7a32:	9d 25       	eor	r25, r13
    7a34:	ae 25       	eor	r26, r14
    7a36:	bf 25       	eor	r27, r15
    7a38:	88 0e       	add	r8, r24
    7a3a:	99 1e       	adc	r9, r25
    7a3c:	aa 1e       	adc	r10, r26
    7a3e:	bb 1e       	adc	r11, r27
    7a40:	d5 01       	movw	r26, r10
    7a42:	c4 01       	movw	r24, r8
    7a44:	07 2e       	mov	r0, r23
    7a46:	7f e0       	ldi	r23, 0x0F	; 15
    7a48:	b6 95       	lsr	r27
    7a4a:	a7 95       	ror	r26
    7a4c:	97 95       	ror	r25
    7a4e:	87 95       	ror	r24
    7a50:	7a 95       	dec	r23
    7a52:	d1 f7       	brne	.-12     	; 0x7a48 <md5_process+0x8ba>
    7a54:	70 2d       	mov	r23, r0
    7a56:	07 2e       	mov	r0, r23
    7a58:	71 e1       	ldi	r23, 0x11	; 17
    7a5a:	88 0c       	add	r8, r8
    7a5c:	99 1c       	adc	r9, r9
    7a5e:	aa 1c       	adc	r10, r10
    7a60:	bb 1c       	adc	r11, r11
    7a62:	7a 95       	dec	r23
    7a64:	d1 f7       	brne	.-12     	; 0x7a5a <md5_process+0x8cc>
    7a66:	70 2d       	mov	r23, r0
    7a68:	88 2a       	or	r8, r24
    7a6a:	99 2a       	or	r9, r25
    7a6c:	aa 2a       	or	r10, r26
    7a6e:	bb 2a       	or	r11, r27
    7a70:	80 0e       	add	r8, r16
    7a72:	91 1e       	adc	r9, r17
    7a74:	a2 1e       	adc	r10, r18
    7a76:	b3 1e       	adc	r11, r19
    7a78:	8d a9       	ldd	r24, Y+53	; 0x35
    7a7a:	9e a9       	ldd	r25, Y+54	; 0x36
    7a7c:	af a9       	ldd	r26, Y+55	; 0x37
    7a7e:	b8 ad       	ldd	r27, Y+56	; 0x38
    7a80:	82 54       	subi	r24, 0x42	; 66
    7a82:	98 42       	sbci	r25, 0x28	; 40
    7a84:	a3 4a       	sbci	r26, 0xA3	; 163
    7a86:	b6 47       	sbci	r27, 0x76	; 118
    7a88:	c8 0e       	add	r12, r24
    7a8a:	d9 1e       	adc	r13, r25
    7a8c:	ea 1e       	adc	r14, r26
    7a8e:	fb 1e       	adc	r15, r27
    7a90:	d9 01       	movw	r26, r18
    7a92:	c8 01       	movw	r24, r16
    7a94:	84 27       	eor	r24, r20
    7a96:	95 27       	eor	r25, r21
    7a98:	a6 27       	eor	r26, r22
    7a9a:	b7 27       	eor	r27, r23
    7a9c:	88 21       	and	r24, r8
    7a9e:	99 21       	and	r25, r9
    7aa0:	aa 21       	and	r26, r10
    7aa2:	bb 21       	and	r27, r11
    7aa4:	2c 01       	movw	r4, r24
    7aa6:	3d 01       	movw	r6, r26
    7aa8:	44 26       	eor	r4, r20
    7aaa:	55 26       	eor	r5, r21
    7aac:	66 26       	eor	r6, r22
    7aae:	77 26       	eor	r7, r23
    7ab0:	d7 01       	movw	r26, r14
    7ab2:	c6 01       	movw	r24, r12
    7ab4:	84 0d       	add	r24, r4
    7ab6:	95 1d       	adc	r25, r5
    7ab8:	a6 1d       	adc	r26, r6
    7aba:	b7 1d       	adc	r27, r7
    7abc:	2c 01       	movw	r4, r24
    7abe:	3d 01       	movw	r6, r26
    7ac0:	03 2e       	mov	r0, r19
    7ac2:	3a e0       	ldi	r19, 0x0A	; 10
    7ac4:	76 94       	lsr	r7
    7ac6:	67 94       	ror	r6
    7ac8:	57 94       	ror	r5
    7aca:	47 94       	ror	r4
    7acc:	3a 95       	dec	r19
    7ace:	d1 f7       	brne	.-12     	; 0x7ac4 <md5_process+0x936>
    7ad0:	30 2d       	mov	r19, r0
    7ad2:	07 2e       	mov	r0, r23
    7ad4:	76 e1       	ldi	r23, 0x16	; 22
    7ad6:	88 0f       	add	r24, r24
    7ad8:	99 1f       	adc	r25, r25
    7ada:	aa 1f       	adc	r26, r26
    7adc:	bb 1f       	adc	r27, r27
    7ade:	7a 95       	dec	r23
    7ae0:	d1 f7       	brne	.-12     	; 0x7ad6 <md5_process+0x948>
    7ae2:	70 2d       	mov	r23, r0
    7ae4:	84 29       	or	r24, r4
    7ae6:	95 29       	or	r25, r5
    7ae8:	a6 29       	or	r26, r6
    7aea:	b7 29       	or	r27, r7
    7aec:	88 0d       	add	r24, r8
    7aee:	99 1d       	adc	r25, r9
    7af0:	aa 1d       	adc	r26, r10
    7af2:	bb 1d       	adc	r27, r11
    7af4:	c9 ac       	ldd	r12, Y+57	; 0x39
    7af6:	da ac       	ldd	r13, Y+58	; 0x3a
    7af8:	eb ac       	ldd	r14, Y+59	; 0x3b
    7afa:	fc ac       	ldd	r15, Y+60	; 0x3c
    7afc:	ee ed       	ldi	r30, 0xDE	; 222
    7afe:	ce 1a       	sub	r12, r30
    7b00:	ee ee       	ldi	r30, 0xEE	; 238
    7b02:	de 0a       	sbc	r13, r30
    7b04:	ef e6       	ldi	r30, 0x6F	; 111
    7b06:	ee 0a       	sbc	r14, r30
    7b08:	e4 e9       	ldi	r30, 0x94	; 148
    7b0a:	fe 0a       	sbc	r15, r30
    7b0c:	4c 0d       	add	r20, r12
    7b0e:	5d 1d       	adc	r21, r13
    7b10:	6e 1d       	adc	r22, r14
    7b12:	7f 1d       	adc	r23, r15
    7b14:	75 01       	movw	r14, r10
    7b16:	64 01       	movw	r12, r8
    7b18:	c0 26       	eor	r12, r16
    7b1a:	d1 26       	eor	r13, r17
    7b1c:	e2 26       	eor	r14, r18
    7b1e:	f3 26       	eor	r15, r19
    7b20:	c8 22       	and	r12, r24
    7b22:	d9 22       	and	r13, r25
    7b24:	ea 22       	and	r14, r26
    7b26:	fb 22       	and	r15, r27
    7b28:	c0 26       	eor	r12, r16
    7b2a:	d1 26       	eor	r13, r17
    7b2c:	e2 26       	eor	r14, r18
    7b2e:	f3 26       	eor	r15, r19
    7b30:	4c 0d       	add	r20, r12
    7b32:	5d 1d       	adc	r21, r13
    7b34:	6e 1d       	adc	r22, r14
    7b36:	7f 1d       	adc	r23, r15
    7b38:	6a 01       	movw	r12, r20
    7b3a:	7b 01       	movw	r14, r22
    7b3c:	cc 0c       	add	r12, r12
    7b3e:	dd 1c       	adc	r13, r13
    7b40:	ee 1c       	adc	r14, r14
    7b42:	ff 1c       	adc	r15, r15
    7b44:	cc 0c       	add	r12, r12
    7b46:	dd 1c       	adc	r13, r13
    7b48:	ee 1c       	adc	r14, r14
    7b4a:	ff 1c       	adc	r15, r15
    7b4c:	cc 0c       	add	r12, r12
    7b4e:	dd 1c       	adc	r13, r13
    7b50:	ee 1c       	adc	r14, r14
    7b52:	ff 1c       	adc	r15, r15
    7b54:	cc 0c       	add	r12, r12
    7b56:	dd 1c       	adc	r13, r13
    7b58:	ee 1c       	adc	r14, r14
    7b5a:	ff 1c       	adc	r15, r15
    7b5c:	cc 0c       	add	r12, r12
    7b5e:	dd 1c       	adc	r13, r13
    7b60:	ee 1c       	adc	r14, r14
    7b62:	ff 1c       	adc	r15, r15
    7b64:	cc 0c       	add	r12, r12
    7b66:	dd 1c       	adc	r13, r13
    7b68:	ee 1c       	adc	r14, r14
    7b6a:	ff 1c       	adc	r15, r15
    7b6c:	cc 0c       	add	r12, r12
    7b6e:	dd 1c       	adc	r13, r13
    7b70:	ee 1c       	adc	r14, r14
    7b72:	ff 1c       	adc	r15, r15
    7b74:	03 2e       	mov	r0, r19
    7b76:	39 e1       	ldi	r19, 0x19	; 25
    7b78:	76 95       	lsr	r23
    7b7a:	67 95       	ror	r22
    7b7c:	57 95       	ror	r21
    7b7e:	47 95       	ror	r20
    7b80:	3a 95       	dec	r19
    7b82:	d1 f7       	brne	.-12     	; 0x7b78 <md5_process+0x9ea>
    7b84:	30 2d       	mov	r19, r0
    7b86:	4c 29       	or	r20, r12
    7b88:	5d 29       	or	r21, r13
    7b8a:	6e 29       	or	r22, r14
    7b8c:	7f 29       	or	r23, r15
    7b8e:	48 0f       	add	r20, r24
    7b90:	59 1f       	adc	r21, r25
    7b92:	6a 1f       	adc	r22, r26
    7b94:	7b 1f       	adc	r23, r27
    7b96:	21 96       	adiw	r28, 0x01	; 1
    7b98:	cc ac       	ldd	r12, Y+60	; 0x3c
    7b9a:	dd ac       	ldd	r13, Y+61	; 0x3d
    7b9c:	ee ac       	ldd	r14, Y+62	; 0x3e
    7b9e:	ff ac       	ldd	r15, Y+63	; 0x3f
    7ba0:	21 97       	sbiw	r28, 0x01	; 1
    7ba2:	fd e6       	ldi	r31, 0x6D	; 109
    7ba4:	cf 1a       	sub	r12, r31
    7ba6:	fe e8       	ldi	r31, 0x8E	; 142
    7ba8:	df 0a       	sbc	r13, r31
    7baa:	f7 e6       	ldi	r31, 0x67	; 103
    7bac:	ef 0a       	sbc	r14, r31
    7bae:	f2 e0       	ldi	r31, 0x02	; 2
    7bb0:	ff 0a       	sbc	r15, r31
    7bb2:	0c 0d       	add	r16, r12
    7bb4:	1d 1d       	adc	r17, r13
    7bb6:	2e 1d       	adc	r18, r14
    7bb8:	3f 1d       	adc	r19, r15
    7bba:	6c 01       	movw	r12, r24
    7bbc:	7d 01       	movw	r14, r26
    7bbe:	c8 24       	eor	r12, r8
    7bc0:	d9 24       	eor	r13, r9
    7bc2:	ea 24       	eor	r14, r10
    7bc4:	fb 24       	eor	r15, r11
    7bc6:	c4 22       	and	r12, r20
    7bc8:	d5 22       	and	r13, r21
    7bca:	e6 22       	and	r14, r22
    7bcc:	f7 22       	and	r15, r23
    7bce:	c8 24       	eor	r12, r8
    7bd0:	d9 24       	eor	r13, r9
    7bd2:	ea 24       	eor	r14, r10
    7bd4:	fb 24       	eor	r15, r11
    7bd6:	0c 0d       	add	r16, r12
    7bd8:	1d 1d       	adc	r17, r13
    7bda:	2e 1d       	adc	r18, r14
    7bdc:	3f 1d       	adc	r19, r15
    7bde:	68 01       	movw	r12, r16
    7be0:	79 01       	movw	r14, r18
    7be2:	0b 2e       	mov	r0, r27
    7be4:	bc e0       	ldi	r27, 0x0C	; 12
    7be6:	cc 0c       	add	r12, r12
    7be8:	dd 1c       	adc	r13, r13
    7bea:	ee 1c       	adc	r14, r14
    7bec:	ff 1c       	adc	r15, r15
    7bee:	ba 95       	dec	r27
    7bf0:	d1 f7       	brne	.-12     	; 0x7be6 <md5_process+0xa58>
    7bf2:	b0 2d       	mov	r27, r0
    7bf4:	0f 2e       	mov	r0, r31
    7bf6:	f4 e1       	ldi	r31, 0x14	; 20
    7bf8:	36 95       	lsr	r19
    7bfa:	27 95       	ror	r18
    7bfc:	17 95       	ror	r17
    7bfe:	07 95       	ror	r16
    7c00:	fa 95       	dec	r31
    7c02:	d1 f7       	brne	.-12     	; 0x7bf8 <md5_process+0xa6a>
    7c04:	f0 2d       	mov	r31, r0
    7c06:	0c 29       	or	r16, r12
    7c08:	1d 29       	or	r17, r13
    7c0a:	2e 29       	or	r18, r14
    7c0c:	3f 29       	or	r19, r15
    7c0e:	04 0f       	add	r16, r20
    7c10:	15 1f       	adc	r17, r21
    7c12:	26 1f       	adc	r18, r22
    7c14:	37 1f       	adc	r19, r23
    7c16:	25 96       	adiw	r28, 0x05	; 5
    7c18:	cc ac       	ldd	r12, Y+60	; 0x3c
    7c1a:	dd ac       	ldd	r13, Y+61	; 0x3d
    7c1c:	ee ac       	ldd	r14, Y+62	; 0x3e
    7c1e:	ff ac       	ldd	r15, Y+63	; 0x3f
    7c20:	25 97       	sbiw	r28, 0x05	; 5
    7c22:	e2 e7       	ldi	r30, 0x72	; 114
    7c24:	ce 1a       	sub	r12, r30
    7c26:	ec eb       	ldi	r30, 0xBC	; 188
    7c28:	de 0a       	sbc	r13, r30
    7c2a:	e6 e8       	ldi	r30, 0x86	; 134
    7c2c:	ee 0a       	sbc	r14, r30
    7c2e:	e9 e5       	ldi	r30, 0x59	; 89
    7c30:	fe 0a       	sbc	r15, r30
    7c32:	8c 0c       	add	r8, r12
    7c34:	9d 1c       	adc	r9, r13
    7c36:	ae 1c       	adc	r10, r14
    7c38:	bf 1c       	adc	r11, r15
    7c3a:	6a 01       	movw	r12, r20
    7c3c:	7b 01       	movw	r14, r22
    7c3e:	c8 26       	eor	r12, r24
    7c40:	d9 26       	eor	r13, r25
    7c42:	ea 26       	eor	r14, r26
    7c44:	fb 26       	eor	r15, r27
    7c46:	c0 22       	and	r12, r16
    7c48:	d1 22       	and	r13, r17
    7c4a:	e2 22       	and	r14, r18
    7c4c:	f3 22       	and	r15, r19
    7c4e:	c8 26       	eor	r12, r24
    7c50:	d9 26       	eor	r13, r25
    7c52:	ea 26       	eor	r14, r26
    7c54:	fb 26       	eor	r15, r27
    7c56:	8c 0c       	add	r8, r12
    7c58:	9d 1c       	adc	r9, r13
    7c5a:	ae 1c       	adc	r10, r14
    7c5c:	bf 1c       	adc	r11, r15
    7c5e:	75 01       	movw	r14, r10
    7c60:	64 01       	movw	r12, r8
    7c62:	0b 2e       	mov	r0, r27
    7c64:	bf e0       	ldi	r27, 0x0F	; 15
    7c66:	f6 94       	lsr	r15
    7c68:	e7 94       	ror	r14
    7c6a:	d7 94       	ror	r13
    7c6c:	c7 94       	ror	r12
    7c6e:	ba 95       	dec	r27
    7c70:	d1 f7       	brne	.-12     	; 0x7c66 <md5_process+0xad8>
    7c72:	b0 2d       	mov	r27, r0
    7c74:	07 2e       	mov	r0, r23
    7c76:	71 e1       	ldi	r23, 0x11	; 17
    7c78:	88 0c       	add	r8, r8
    7c7a:	99 1c       	adc	r9, r9
    7c7c:	aa 1c       	adc	r10, r10
    7c7e:	bb 1c       	adc	r11, r11
    7c80:	7a 95       	dec	r23
    7c82:	d1 f7       	brne	.-12     	; 0x7c78 <md5_process+0xaea>
    7c84:	70 2d       	mov	r23, r0
    7c86:	8c 28       	or	r8, r12
    7c88:	9d 28       	or	r9, r13
    7c8a:	ae 28       	or	r10, r14
    7c8c:	bf 28       	or	r11, r15
    7c8e:	80 0e       	add	r8, r16
    7c90:	91 1e       	adc	r9, r17
    7c92:	a2 1e       	adc	r10, r18
    7c94:	b3 1e       	adc	r11, r19
    7c96:	29 96       	adiw	r28, 0x09	; 9
    7c98:	cc ac       	ldd	r12, Y+60	; 0x3c
    7c9a:	dd ac       	ldd	r13, Y+61	; 0x3d
    7c9c:	ee ac       	ldd	r14, Y+62	; 0x3e
    7c9e:	ff ac       	ldd	r15, Y+63	; 0x3f
    7ca0:	29 97       	sbiw	r28, 0x09	; 9
    7ca2:	ff ed       	ldi	r31, 0xDF	; 223
    7ca4:	cf 1a       	sub	r12, r31
    7ca6:	f7 ef       	ldi	r31, 0xF7	; 247
    7ca8:	df 0a       	sbc	r13, r31
    7caa:	fb e4       	ldi	r31, 0x4B	; 75
    7cac:	ef 0a       	sbc	r14, r31
    7cae:	f6 eb       	ldi	r31, 0xB6	; 182
    7cb0:	ff 0a       	sbc	r15, r31
    7cb2:	8c 0d       	add	r24, r12
    7cb4:	9d 1d       	adc	r25, r13
    7cb6:	ae 1d       	adc	r26, r14
    7cb8:	bf 1d       	adc	r27, r15
    7cba:	68 01       	movw	r12, r16
    7cbc:	79 01       	movw	r14, r18
    7cbe:	c4 26       	eor	r12, r20
    7cc0:	d5 26       	eor	r13, r21
    7cc2:	e6 26       	eor	r14, r22
    7cc4:	f7 26       	eor	r15, r23
    7cc6:	c8 20       	and	r12, r8
    7cc8:	d9 20       	and	r13, r9
    7cca:	ea 20       	and	r14, r10
    7ccc:	fb 20       	and	r15, r11
    7cce:	c4 26       	eor	r12, r20
    7cd0:	d5 26       	eor	r13, r21
    7cd2:	e6 26       	eor	r14, r22
    7cd4:	f7 26       	eor	r15, r23
    7cd6:	8c 0d       	add	r24, r12
    7cd8:	9d 1d       	adc	r25, r13
    7cda:	ae 1d       	adc	r26, r14
    7cdc:	bf 1d       	adc	r27, r15
    7cde:	6c 01       	movw	r12, r24
    7ce0:	7d 01       	movw	r14, r26
    7ce2:	0b 2e       	mov	r0, r27
    7ce4:	ba e0       	ldi	r27, 0x0A	; 10
    7ce6:	f6 94       	lsr	r15
    7ce8:	e7 94       	ror	r14
    7cea:	d7 94       	ror	r13
    7cec:	c7 94       	ror	r12
    7cee:	ba 95       	dec	r27
    7cf0:	d1 f7       	brne	.-12     	; 0x7ce6 <md5_process+0xb58>
    7cf2:	b0 2d       	mov	r27, r0
    7cf4:	07 2e       	mov	r0, r23
    7cf6:	76 e1       	ldi	r23, 0x16	; 22
    7cf8:	88 0f       	add	r24, r24
    7cfa:	99 1f       	adc	r25, r25
    7cfc:	aa 1f       	adc	r26, r26
    7cfe:	bb 1f       	adc	r27, r27
    7d00:	7a 95       	dec	r23
    7d02:	d1 f7       	brne	.-12     	; 0x7cf8 <md5_process+0xb6a>
    7d04:	70 2d       	mov	r23, r0
    7d06:	8c 29       	or	r24, r12
    7d08:	9d 29       	or	r25, r13
    7d0a:	ae 29       	or	r26, r14
    7d0c:	bf 29       	or	r27, r15
    7d0e:	88 0d       	add	r24, r8
    7d10:	99 1d       	adc	r25, r9
    7d12:	aa 1d       	adc	r26, r10
    7d14:	bb 1d       	adc	r27, r11
    7d16:	cd 84       	ldd	r12, Y+13	; 0x0d
    7d18:	de 84       	ldd	r13, Y+14	; 0x0e
    7d1a:	ef 84       	ldd	r14, Y+15	; 0x0f
    7d1c:	f8 88       	ldd	r15, Y+16	; 0x10
    7d1e:	ee e9       	ldi	r30, 0x9E	; 158
    7d20:	ce 1a       	sub	r12, r30
    7d22:	ea ed       	ldi	r30, 0xDA	; 218
    7d24:	de 0a       	sbc	r13, r30
    7d26:	e1 ee       	ldi	r30, 0xE1	; 225
    7d28:	ee 0a       	sbc	r14, r30
    7d2a:	e9 e0       	ldi	r30, 0x09	; 9
    7d2c:	fe 0a       	sbc	r15, r30
    7d2e:	4c 0d       	add	r20, r12
    7d30:	5d 1d       	adc	r21, r13
    7d32:	6e 1d       	adc	r22, r14
    7d34:	7f 1d       	adc	r23, r15
    7d36:	6c 01       	movw	r12, r24
    7d38:	7d 01       	movw	r14, r26
    7d3a:	c8 24       	eor	r12, r8
    7d3c:	d9 24       	eor	r13, r9
    7d3e:	ea 24       	eor	r14, r10
    7d40:	fb 24       	eor	r15, r11
    7d42:	c0 22       	and	r12, r16
    7d44:	d1 22       	and	r13, r17
    7d46:	e2 22       	and	r14, r18
    7d48:	f3 22       	and	r15, r19
    7d4a:	c8 24       	eor	r12, r8
    7d4c:	d9 24       	eor	r13, r9
    7d4e:	ea 24       	eor	r14, r10
    7d50:	fb 24       	eor	r15, r11
    7d52:	4c 0d       	add	r20, r12
    7d54:	5d 1d       	adc	r21, r13
    7d56:	6e 1d       	adc	r22, r14
    7d58:	7f 1d       	adc	r23, r15
    7d5a:	6a 01       	movw	r12, r20
    7d5c:	7b 01       	movw	r14, r22
    7d5e:	cc 0c       	add	r12, r12
    7d60:	dd 1c       	adc	r13, r13
    7d62:	ee 1c       	adc	r14, r14
    7d64:	ff 1c       	adc	r15, r15
    7d66:	cc 0c       	add	r12, r12
    7d68:	dd 1c       	adc	r13, r13
    7d6a:	ee 1c       	adc	r14, r14
    7d6c:	ff 1c       	adc	r15, r15
    7d6e:	cc 0c       	add	r12, r12
    7d70:	dd 1c       	adc	r13, r13
    7d72:	ee 1c       	adc	r14, r14
    7d74:	ff 1c       	adc	r15, r15
    7d76:	cc 0c       	add	r12, r12
    7d78:	dd 1c       	adc	r13, r13
    7d7a:	ee 1c       	adc	r14, r14
    7d7c:	ff 1c       	adc	r15, r15
    7d7e:	cc 0c       	add	r12, r12
    7d80:	dd 1c       	adc	r13, r13
    7d82:	ee 1c       	adc	r14, r14
    7d84:	ff 1c       	adc	r15, r15
    7d86:	03 2e       	mov	r0, r19
    7d88:	3b e1       	ldi	r19, 0x1B	; 27
    7d8a:	76 95       	lsr	r23
    7d8c:	67 95       	ror	r22
    7d8e:	57 95       	ror	r21
    7d90:	47 95       	ror	r20
    7d92:	3a 95       	dec	r19
    7d94:	d1 f7       	brne	.-12     	; 0x7d8a <md5_process+0xbfc>
    7d96:	30 2d       	mov	r19, r0
    7d98:	4c 29       	or	r20, r12
    7d9a:	5d 29       	or	r21, r13
    7d9c:	6e 29       	or	r22, r14
    7d9e:	7f 29       	or	r23, r15
    7da0:	48 0f       	add	r20, r24
    7da2:	59 1f       	adc	r21, r25
    7da4:	6a 1f       	adc	r22, r26
    7da6:	7b 1f       	adc	r23, r27
    7da8:	c9 a0       	ldd	r12, Y+33	; 0x21
    7daa:	da a0       	ldd	r13, Y+34	; 0x22
    7dac:	eb a0       	ldd	r14, Y+35	; 0x23
    7dae:	fc a0       	ldd	r15, Y+36	; 0x24
    7db0:	f0 ec       	ldi	r31, 0xC0	; 192
    7db2:	cf 1a       	sub	r12, r31
    7db4:	fc e4       	ldi	r31, 0x4C	; 76
    7db6:	df 0a       	sbc	r13, r31
    7db8:	ff eb       	ldi	r31, 0xBF	; 191
    7dba:	ef 0a       	sbc	r14, r31
    7dbc:	ff e3       	ldi	r31, 0x3F	; 63
    7dbe:	ff 0a       	sbc	r15, r31
    7dc0:	0c 0d       	add	r16, r12
    7dc2:	1d 1d       	adc	r17, r13
    7dc4:	2e 1d       	adc	r18, r14
    7dc6:	3f 1d       	adc	r19, r15
    7dc8:	6a 01       	movw	r12, r20
    7dca:	7b 01       	movw	r14, r22
    7dcc:	c8 26       	eor	r12, r24
    7dce:	d9 26       	eor	r13, r25
    7dd0:	ea 26       	eor	r14, r26
    7dd2:	fb 26       	eor	r15, r27
    7dd4:	c8 20       	and	r12, r8
    7dd6:	d9 20       	and	r13, r9
    7dd8:	ea 20       	and	r14, r10
    7dda:	fb 20       	and	r15, r11
    7ddc:	c8 26       	eor	r12, r24
    7dde:	d9 26       	eor	r13, r25
    7de0:	ea 26       	eor	r14, r26
    7de2:	fb 26       	eor	r15, r27
    7de4:	0c 0d       	add	r16, r12
    7de6:	1d 1d       	adc	r17, r13
    7de8:	2e 1d       	adc	r18, r14
    7dea:	3f 1d       	adc	r19, r15
    7dec:	68 01       	movw	r12, r16
    7dee:	79 01       	movw	r14, r18
    7df0:	0b 2e       	mov	r0, r27
    7df2:	b9 e0       	ldi	r27, 0x09	; 9
    7df4:	cc 0c       	add	r12, r12
    7df6:	dd 1c       	adc	r13, r13
    7df8:	ee 1c       	adc	r14, r14
    7dfa:	ff 1c       	adc	r15, r15
    7dfc:	ba 95       	dec	r27
    7dfe:	d1 f7       	brne	.-12     	; 0x7df4 <md5_process+0xc66>
    7e00:	b0 2d       	mov	r27, r0
    7e02:	0f 2e       	mov	r0, r31
    7e04:	f7 e1       	ldi	r31, 0x17	; 23
    7e06:	36 95       	lsr	r19
    7e08:	27 95       	ror	r18
    7e0a:	17 95       	ror	r17
    7e0c:	07 95       	ror	r16
    7e0e:	fa 95       	dec	r31
    7e10:	d1 f7       	brne	.-12     	; 0x7e06 <md5_process+0xc78>
    7e12:	f0 2d       	mov	r31, r0
    7e14:	0c 29       	or	r16, r12
    7e16:	1d 29       	or	r17, r13
    7e18:	2e 29       	or	r18, r14
    7e1a:	3f 29       	or	r19, r15
    7e1c:	04 0f       	add	r16, r20
    7e1e:	15 1f       	adc	r17, r21
    7e20:	26 1f       	adc	r18, r22
    7e22:	37 1f       	adc	r19, r23
    7e24:	cd a8       	ldd	r12, Y+53	; 0x35
    7e26:	de a8       	ldd	r13, Y+54	; 0x36
    7e28:	ef a8       	ldd	r14, Y+55	; 0x37
    7e2a:	f8 ac       	ldd	r15, Y+56	; 0x38
    7e2c:	ef ea       	ldi	r30, 0xAF	; 175
    7e2e:	ce 1a       	sub	r12, r30
    7e30:	e5 ea       	ldi	r30, 0xA5	; 165
    7e32:	de 0a       	sbc	r13, r30
    7e34:	e1 ea       	ldi	r30, 0xA1	; 161
    7e36:	ee 0a       	sbc	r14, r30
    7e38:	e9 ed       	ldi	r30, 0xD9	; 217
    7e3a:	fe 0a       	sbc	r15, r30
    7e3c:	8c 0c       	add	r8, r12
    7e3e:	9d 1c       	adc	r9, r13
    7e40:	ae 1c       	adc	r10, r14
    7e42:	bf 1c       	adc	r11, r15
    7e44:	68 01       	movw	r12, r16
    7e46:	79 01       	movw	r14, r18
    7e48:	c4 26       	eor	r12, r20
    7e4a:	d5 26       	eor	r13, r21
    7e4c:	e6 26       	eor	r14, r22
    7e4e:	f7 26       	eor	r15, r23
    7e50:	c8 22       	and	r12, r24
    7e52:	d9 22       	and	r13, r25
    7e54:	ea 22       	and	r14, r26
    7e56:	fb 22       	and	r15, r27
    7e58:	c4 26       	eor	r12, r20
    7e5a:	d5 26       	eor	r13, r21
    7e5c:	e6 26       	eor	r14, r22
    7e5e:	f7 26       	eor	r15, r23
    7e60:	8c 0c       	add	r8, r12
    7e62:	9d 1c       	adc	r9, r13
    7e64:	ae 1c       	adc	r10, r14
    7e66:	bf 1c       	adc	r11, r15
    7e68:	75 01       	movw	r14, r10
    7e6a:	64 01       	movw	r12, r8
    7e6c:	0b 2e       	mov	r0, r27
    7e6e:	be e0       	ldi	r27, 0x0E	; 14
    7e70:	cc 0c       	add	r12, r12
    7e72:	dd 1c       	adc	r13, r13
    7e74:	ee 1c       	adc	r14, r14
    7e76:	ff 1c       	adc	r15, r15
    7e78:	ba 95       	dec	r27
    7e7a:	d1 f7       	brne	.-12     	; 0x7e70 <md5_process+0xce2>
    7e7c:	b0 2d       	mov	r27, r0
    7e7e:	07 2e       	mov	r0, r23
    7e80:	72 e1       	ldi	r23, 0x12	; 18
    7e82:	b6 94       	lsr	r11
    7e84:	a7 94       	ror	r10
    7e86:	97 94       	ror	r9
    7e88:	87 94       	ror	r8
    7e8a:	7a 95       	dec	r23
    7e8c:	d1 f7       	brne	.-12     	; 0x7e82 <md5_process+0xcf4>
    7e8e:	70 2d       	mov	r23, r0
    7e90:	8c 28       	or	r8, r12
    7e92:	9d 28       	or	r9, r13
    7e94:	ae 28       	or	r10, r14
    7e96:	bf 28       	or	r11, r15
    7e98:	80 0e       	add	r8, r16
    7e9a:	91 1e       	adc	r9, r17
    7e9c:	a2 1e       	adc	r10, r18
    7e9e:	b3 1e       	adc	r11, r19
    7ea0:	c9 84       	ldd	r12, Y+9	; 0x09
    7ea2:	da 84       	ldd	r13, Y+10	; 0x0a
    7ea4:	eb 84       	ldd	r14, Y+11	; 0x0b
    7ea6:	fc 84       	ldd	r15, Y+12	; 0x0c
    7ea8:	f6 e5       	ldi	r31, 0x56	; 86
    7eaa:	cf 1a       	sub	r12, r31
    7eac:	f8 e3       	ldi	r31, 0x38	; 56
    7eae:	df 0a       	sbc	r13, r31
    7eb0:	f9 e4       	ldi	r31, 0x49	; 73
    7eb2:	ef 0a       	sbc	r14, r31
    7eb4:	f6 e1       	ldi	r31, 0x16	; 22
    7eb6:	ff 0a       	sbc	r15, r31
    7eb8:	8c 0d       	add	r24, r12
    7eba:	9d 1d       	adc	r25, r13
    7ebc:	ae 1d       	adc	r26, r14
    7ebe:	bf 1d       	adc	r27, r15
    7ec0:	75 01       	movw	r14, r10
    7ec2:	64 01       	movw	r12, r8
    7ec4:	c0 26       	eor	r12, r16
    7ec6:	d1 26       	eor	r13, r17
    7ec8:	e2 26       	eor	r14, r18
    7eca:	f3 26       	eor	r15, r19
    7ecc:	c4 22       	and	r12, r20
    7ece:	d5 22       	and	r13, r21
    7ed0:	e6 22       	and	r14, r22
    7ed2:	f7 22       	and	r15, r23
    7ed4:	c0 26       	eor	r12, r16
    7ed6:	d1 26       	eor	r13, r17
    7ed8:	e2 26       	eor	r14, r18
    7eda:	f3 26       	eor	r15, r19
    7edc:	8c 0d       	add	r24, r12
    7ede:	9d 1d       	adc	r25, r13
    7ee0:	ae 1d       	adc	r26, r14
    7ee2:	bf 1d       	adc	r27, r15
    7ee4:	6c 01       	movw	r12, r24
    7ee6:	7d 01       	movw	r14, r26
    7ee8:	0b 2e       	mov	r0, r27
    7eea:	bc e0       	ldi	r27, 0x0C	; 12
    7eec:	f6 94       	lsr	r15
    7eee:	e7 94       	ror	r14
    7ef0:	d7 94       	ror	r13
    7ef2:	c7 94       	ror	r12
    7ef4:	ba 95       	dec	r27
    7ef6:	d1 f7       	brne	.-12     	; 0x7eec <md5_process+0xd5e>
    7ef8:	b0 2d       	mov	r27, r0
    7efa:	07 2e       	mov	r0, r23
    7efc:	74 e1       	ldi	r23, 0x14	; 20
    7efe:	88 0f       	add	r24, r24
    7f00:	99 1f       	adc	r25, r25
    7f02:	aa 1f       	adc	r26, r26
    7f04:	bb 1f       	adc	r27, r27
    7f06:	7a 95       	dec	r23
    7f08:	d1 f7       	brne	.-12     	; 0x7efe <md5_process+0xd70>
    7f0a:	70 2d       	mov	r23, r0
    7f0c:	8c 29       	or	r24, r12
    7f0e:	9d 29       	or	r25, r13
    7f10:	ae 29       	or	r26, r14
    7f12:	bf 29       	or	r27, r15
    7f14:	88 0d       	add	r24, r8
    7f16:	99 1d       	adc	r25, r9
    7f18:	aa 1d       	adc	r26, r10
    7f1a:	bb 1d       	adc	r27, r11
    7f1c:	cd 8c       	ldd	r12, Y+29	; 0x1d
    7f1e:	de 8c       	ldd	r13, Y+30	; 0x1e
    7f20:	ef 8c       	ldd	r14, Y+31	; 0x1f
    7f22:	f8 a0       	ldd	r15, Y+32	; 0x20
    7f24:	e3 ea       	ldi	r30, 0xA3	; 163
    7f26:	ce 1a       	sub	r12, r30
    7f28:	ef ee       	ldi	r30, 0xEF	; 239
    7f2a:	de 0a       	sbc	r13, r30
    7f2c:	e0 ed       	ldi	r30, 0xD0	; 208
    7f2e:	ee 0a       	sbc	r14, r30
    7f30:	e9 e2       	ldi	r30, 0x29	; 41
    7f32:	fe 0a       	sbc	r15, r30
    7f34:	4c 0d       	add	r20, r12
    7f36:	5d 1d       	adc	r21, r13
    7f38:	6e 1d       	adc	r22, r14
    7f3a:	7f 1d       	adc	r23, r15
    7f3c:	6c 01       	movw	r12, r24
    7f3e:	7d 01       	movw	r14, r26
    7f40:	c8 24       	eor	r12, r8
    7f42:	d9 24       	eor	r13, r9
    7f44:	ea 24       	eor	r14, r10
    7f46:	fb 24       	eor	r15, r11
    7f48:	c0 22       	and	r12, r16
    7f4a:	d1 22       	and	r13, r17
    7f4c:	e2 22       	and	r14, r18
    7f4e:	f3 22       	and	r15, r19
    7f50:	c8 24       	eor	r12, r8
    7f52:	d9 24       	eor	r13, r9
    7f54:	ea 24       	eor	r14, r10
    7f56:	fb 24       	eor	r15, r11
    7f58:	4c 0d       	add	r20, r12
    7f5a:	5d 1d       	adc	r21, r13
    7f5c:	6e 1d       	adc	r22, r14
    7f5e:	7f 1d       	adc	r23, r15
    7f60:	6a 01       	movw	r12, r20
    7f62:	7b 01       	movw	r14, r22
    7f64:	cc 0c       	add	r12, r12
    7f66:	dd 1c       	adc	r13, r13
    7f68:	ee 1c       	adc	r14, r14
    7f6a:	ff 1c       	adc	r15, r15
    7f6c:	cc 0c       	add	r12, r12
    7f6e:	dd 1c       	adc	r13, r13
    7f70:	ee 1c       	adc	r14, r14
    7f72:	ff 1c       	adc	r15, r15
    7f74:	cc 0c       	add	r12, r12
    7f76:	dd 1c       	adc	r13, r13
    7f78:	ee 1c       	adc	r14, r14
    7f7a:	ff 1c       	adc	r15, r15
    7f7c:	cc 0c       	add	r12, r12
    7f7e:	dd 1c       	adc	r13, r13
    7f80:	ee 1c       	adc	r14, r14
    7f82:	ff 1c       	adc	r15, r15
    7f84:	cc 0c       	add	r12, r12
    7f86:	dd 1c       	adc	r13, r13
    7f88:	ee 1c       	adc	r14, r14
    7f8a:	ff 1c       	adc	r15, r15
    7f8c:	03 2e       	mov	r0, r19
    7f8e:	3b e1       	ldi	r19, 0x1B	; 27
    7f90:	76 95       	lsr	r23
    7f92:	67 95       	ror	r22
    7f94:	57 95       	ror	r21
    7f96:	47 95       	ror	r20
    7f98:	3a 95       	dec	r19
    7f9a:	d1 f7       	brne	.-12     	; 0x7f90 <md5_process+0xe02>
    7f9c:	30 2d       	mov	r19, r0
    7f9e:	4c 29       	or	r20, r12
    7fa0:	5d 29       	or	r21, r13
    7fa2:	6e 29       	or	r22, r14
    7fa4:	7f 29       	or	r23, r15
    7fa6:	48 0f       	add	r20, r24
    7fa8:	59 1f       	adc	r21, r25
    7faa:	6a 1f       	adc	r22, r26
    7fac:	7b 1f       	adc	r23, r27
    7fae:	c9 a8       	ldd	r12, Y+49	; 0x31
    7fb0:	da a8       	ldd	r13, Y+50	; 0x32
    7fb2:	eb a8       	ldd	r14, Y+51	; 0x33
    7fb4:	fc a8       	ldd	r15, Y+52	; 0x34
    7fb6:	fd ea       	ldi	r31, 0xAD	; 173
    7fb8:	cf 1a       	sub	r12, r31
    7fba:	fb ee       	ldi	r31, 0xEB	; 235
    7fbc:	df 0a       	sbc	r13, r31
    7fbe:	fb eb       	ldi	r31, 0xBB	; 187
    7fc0:	ef 0a       	sbc	r14, r31
    7fc2:	fd ef       	ldi	r31, 0xFD	; 253
    7fc4:	ff 0a       	sbc	r15, r31
    7fc6:	0c 0d       	add	r16, r12
    7fc8:	1d 1d       	adc	r17, r13
    7fca:	2e 1d       	adc	r18, r14
    7fcc:	3f 1d       	adc	r19, r15
    7fce:	6a 01       	movw	r12, r20
    7fd0:	7b 01       	movw	r14, r22
    7fd2:	c8 26       	eor	r12, r24
    7fd4:	d9 26       	eor	r13, r25
    7fd6:	ea 26       	eor	r14, r26
    7fd8:	fb 26       	eor	r15, r27
    7fda:	c8 20       	and	r12, r8
    7fdc:	d9 20       	and	r13, r9
    7fde:	ea 20       	and	r14, r10
    7fe0:	fb 20       	and	r15, r11
    7fe2:	c8 26       	eor	r12, r24
    7fe4:	d9 26       	eor	r13, r25
    7fe6:	ea 26       	eor	r14, r26
    7fe8:	fb 26       	eor	r15, r27
    7fea:	0c 0d       	add	r16, r12
    7fec:	1d 1d       	adc	r17, r13
    7fee:	2e 1d       	adc	r18, r14
    7ff0:	3f 1d       	adc	r19, r15
    7ff2:	68 01       	movw	r12, r16
    7ff4:	79 01       	movw	r14, r18
    7ff6:	0b 2e       	mov	r0, r27
    7ff8:	b9 e0       	ldi	r27, 0x09	; 9
    7ffa:	cc 0c       	add	r12, r12
    7ffc:	dd 1c       	adc	r13, r13
    7ffe:	ee 1c       	adc	r14, r14
    8000:	ff 1c       	adc	r15, r15
    8002:	ba 95       	dec	r27
    8004:	d1 f7       	brne	.-12     	; 0x7ffa <md5_process+0xe6c>
    8006:	b0 2d       	mov	r27, r0
    8008:	0f 2e       	mov	r0, r31
    800a:	f7 e1       	ldi	r31, 0x17	; 23
    800c:	36 95       	lsr	r19
    800e:	27 95       	ror	r18
    8010:	17 95       	ror	r17
    8012:	07 95       	ror	r16
    8014:	fa 95       	dec	r31
    8016:	d1 f7       	brne	.-12     	; 0x800c <md5_process+0xe7e>
    8018:	f0 2d       	mov	r31, r0
    801a:	0c 29       	or	r16, r12
    801c:	1d 29       	or	r17, r13
    801e:	2e 29       	or	r18, r14
    8020:	3f 29       	or	r19, r15
    8022:	04 0f       	add	r16, r20
    8024:	15 1f       	adc	r17, r21
    8026:	26 1f       	adc	r18, r22
    8028:	37 1f       	adc	r19, r23
    802a:	29 96       	adiw	r28, 0x09	; 9
    802c:	cc ac       	ldd	r12, Y+60	; 0x3c
    802e:	dd ac       	ldd	r13, Y+61	; 0x3d
    8030:	ee ac       	ldd	r14, Y+62	; 0x3e
    8032:	ff ac       	ldd	r15, Y+63	; 0x3f
    8034:	29 97       	sbiw	r28, 0x09	; 9
    8036:	ef e7       	ldi	r30, 0x7F	; 127
    8038:	ce 1a       	sub	r12, r30
    803a:	e9 e1       	ldi	r30, 0x19	; 25
    803c:	de 0a       	sbc	r13, r30
    803e:	ee e5       	ldi	r30, 0x5E	; 94
    8040:	ee 0a       	sbc	r14, r30
    8042:	e7 e2       	ldi	r30, 0x27	; 39
    8044:	fe 0a       	sbc	r15, r30
    8046:	8c 0c       	add	r8, r12
    8048:	9d 1c       	adc	r9, r13
    804a:	ae 1c       	adc	r10, r14
    804c:	bf 1c       	adc	r11, r15
    804e:	68 01       	movw	r12, r16
    8050:	79 01       	movw	r14, r18
    8052:	c4 26       	eor	r12, r20
    8054:	d5 26       	eor	r13, r21
    8056:	e6 26       	eor	r14, r22
    8058:	f7 26       	eor	r15, r23
    805a:	c8 22       	and	r12, r24
    805c:	d9 22       	and	r13, r25
    805e:	ea 22       	and	r14, r26
    8060:	fb 22       	and	r15, r27
    8062:	c4 26       	eor	r12, r20
    8064:	d5 26       	eor	r13, r21
    8066:	e6 26       	eor	r14, r22
    8068:	f7 26       	eor	r15, r23
    806a:	8c 0c       	add	r8, r12
    806c:	9d 1c       	adc	r9, r13
    806e:	ae 1c       	adc	r10, r14
    8070:	bf 1c       	adc	r11, r15
    8072:	75 01       	movw	r14, r10
    8074:	64 01       	movw	r12, r8
    8076:	0b 2e       	mov	r0, r27
    8078:	be e0       	ldi	r27, 0x0E	; 14
    807a:	cc 0c       	add	r12, r12
    807c:	dd 1c       	adc	r13, r13
    807e:	ee 1c       	adc	r14, r14
    8080:	ff 1c       	adc	r15, r15
    8082:	ba 95       	dec	r27
    8084:	d1 f7       	brne	.-12     	; 0x807a <md5_process+0xeec>
    8086:	b0 2d       	mov	r27, r0
    8088:	07 2e       	mov	r0, r23
    808a:	72 e1       	ldi	r23, 0x12	; 18
    808c:	b6 94       	lsr	r11
    808e:	a7 94       	ror	r10
    8090:	97 94       	ror	r9
    8092:	87 94       	ror	r8
    8094:	7a 95       	dec	r23
    8096:	d1 f7       	brne	.-12     	; 0x808c <md5_process+0xefe>
    8098:	70 2d       	mov	r23, r0
    809a:	8c 28       	or	r8, r12
    809c:	9d 28       	or	r9, r13
    809e:	ae 28       	or	r10, r14
    80a0:	bf 28       	or	r11, r15
    80a2:	80 0e       	add	r8, r16
    80a4:	91 1e       	adc	r9, r17
    80a6:	a2 1e       	adc	r10, r18
    80a8:	b3 1e       	adc	r11, r19
    80aa:	c9 8c       	ldd	r12, Y+25	; 0x19
    80ac:	da 8c       	ldd	r13, Y+26	; 0x1a
    80ae:	eb 8c       	ldd	r14, Y+27	; 0x1b
    80b0:	fc 8c       	ldd	r15, Y+28	; 0x1c
    80b2:	f8 e3       	ldi	r31, 0x38	; 56
    80b4:	cf 1a       	sub	r12, r31
    80b6:	f4 e0       	ldi	r31, 0x04	; 4
    80b8:	df 0a       	sbc	r13, r31
    80ba:	fc e2       	ldi	r31, 0x2C	; 44
    80bc:	ef 0a       	sbc	r14, r31
    80be:	f8 e1       	ldi	r31, 0x18	; 24
    80c0:	ff 0a       	sbc	r15, r31
    80c2:	8c 0d       	add	r24, r12
    80c4:	9d 1d       	adc	r25, r13
    80c6:	ae 1d       	adc	r26, r14
    80c8:	bf 1d       	adc	r27, r15
    80ca:	75 01       	movw	r14, r10
    80cc:	64 01       	movw	r12, r8
    80ce:	c0 26       	eor	r12, r16
    80d0:	d1 26       	eor	r13, r17
    80d2:	e2 26       	eor	r14, r18
    80d4:	f3 26       	eor	r15, r19
    80d6:	c4 22       	and	r12, r20
    80d8:	d5 22       	and	r13, r21
    80da:	e6 22       	and	r14, r22
    80dc:	f7 22       	and	r15, r23
    80de:	c0 26       	eor	r12, r16
    80e0:	d1 26       	eor	r13, r17
    80e2:	e2 26       	eor	r14, r18
    80e4:	f3 26       	eor	r15, r19
    80e6:	8c 0d       	add	r24, r12
    80e8:	9d 1d       	adc	r25, r13
    80ea:	ae 1d       	adc	r26, r14
    80ec:	bf 1d       	adc	r27, r15
    80ee:	6c 01       	movw	r12, r24
    80f0:	7d 01       	movw	r14, r26
    80f2:	0b 2e       	mov	r0, r27
    80f4:	bc e0       	ldi	r27, 0x0C	; 12
    80f6:	f6 94       	lsr	r15
    80f8:	e7 94       	ror	r14
    80fa:	d7 94       	ror	r13
    80fc:	c7 94       	ror	r12
    80fe:	ba 95       	dec	r27
    8100:	d1 f7       	brne	.-12     	; 0x80f6 <md5_process+0xf68>
    8102:	b0 2d       	mov	r27, r0
    8104:	07 2e       	mov	r0, r23
    8106:	74 e1       	ldi	r23, 0x14	; 20
    8108:	88 0f       	add	r24, r24
    810a:	99 1f       	adc	r25, r25
    810c:	aa 1f       	adc	r26, r26
    810e:	bb 1f       	adc	r27, r27
    8110:	7a 95       	dec	r23
    8112:	d1 f7       	brne	.-12     	; 0x8108 <md5_process+0xf7a>
    8114:	70 2d       	mov	r23, r0
    8116:	8c 29       	or	r24, r12
    8118:	9d 29       	or	r25, r13
    811a:	ae 29       	or	r26, r14
    811c:	bf 29       	or	r27, r15
    811e:	88 0d       	add	r24, r8
    8120:	99 1d       	adc	r25, r9
    8122:	aa 1d       	adc	r26, r10
    8124:	bb 1d       	adc	r27, r11
    8126:	cd a4       	ldd	r12, Y+45	; 0x2d
    8128:	de a4       	ldd	r13, Y+46	; 0x2e
    812a:	ef a4       	ldd	r14, Y+47	; 0x2f
    812c:	f8 a8       	ldd	r15, Y+48	; 0x30
    812e:	ea e1       	ldi	r30, 0x1A	; 26
    8130:	ce 1a       	sub	r12, r30
    8132:	e2 e3       	ldi	r30, 0x32	; 50
    8134:	de 0a       	sbc	r13, r30
    8136:	ee e1       	ldi	r30, 0x1E	; 30
    8138:	ee 0a       	sbc	r14, r30
    813a:	ee ed       	ldi	r30, 0xDE	; 222
    813c:	fe 0a       	sbc	r15, r30
    813e:	4c 0d       	add	r20, r12
    8140:	5d 1d       	adc	r21, r13
    8142:	6e 1d       	adc	r22, r14
    8144:	7f 1d       	adc	r23, r15
    8146:	6c 01       	movw	r12, r24
    8148:	7d 01       	movw	r14, r26
    814a:	c8 24       	eor	r12, r8
    814c:	d9 24       	eor	r13, r9
    814e:	ea 24       	eor	r14, r10
    8150:	fb 24       	eor	r15, r11
    8152:	c0 22       	and	r12, r16
    8154:	d1 22       	and	r13, r17
    8156:	e2 22       	and	r14, r18
    8158:	f3 22       	and	r15, r19
    815a:	c8 24       	eor	r12, r8
    815c:	d9 24       	eor	r13, r9
    815e:	ea 24       	eor	r14, r10
    8160:	fb 24       	eor	r15, r11
    8162:	4c 0d       	add	r20, r12
    8164:	5d 1d       	adc	r21, r13
    8166:	6e 1d       	adc	r22, r14
    8168:	7f 1d       	adc	r23, r15
    816a:	6a 01       	movw	r12, r20
    816c:	7b 01       	movw	r14, r22
    816e:	cc 0c       	add	r12, r12
    8170:	dd 1c       	adc	r13, r13
    8172:	ee 1c       	adc	r14, r14
    8174:	ff 1c       	adc	r15, r15
    8176:	cc 0c       	add	r12, r12
    8178:	dd 1c       	adc	r13, r13
    817a:	ee 1c       	adc	r14, r14
    817c:	ff 1c       	adc	r15, r15
    817e:	cc 0c       	add	r12, r12
    8180:	dd 1c       	adc	r13, r13
    8182:	ee 1c       	adc	r14, r14
    8184:	ff 1c       	adc	r15, r15
    8186:	cc 0c       	add	r12, r12
    8188:	dd 1c       	adc	r13, r13
    818a:	ee 1c       	adc	r14, r14
    818c:	ff 1c       	adc	r15, r15
    818e:	cc 0c       	add	r12, r12
    8190:	dd 1c       	adc	r13, r13
    8192:	ee 1c       	adc	r14, r14
    8194:	ff 1c       	adc	r15, r15
    8196:	03 2e       	mov	r0, r19
    8198:	3b e1       	ldi	r19, 0x1B	; 27
    819a:	76 95       	lsr	r23
    819c:	67 95       	ror	r22
    819e:	57 95       	ror	r21
    81a0:	47 95       	ror	r20
    81a2:	3a 95       	dec	r19
    81a4:	d1 f7       	brne	.-12     	; 0x819a <md5_process+0x100c>
    81a6:	30 2d       	mov	r19, r0
    81a8:	4c 29       	or	r20, r12
    81aa:	5d 29       	or	r21, r13
    81ac:	6e 29       	or	r22, r14
    81ae:	7f 29       	or	r23, r15
    81b0:	48 0f       	add	r20, r24
    81b2:	59 1f       	adc	r21, r25
    81b4:	6a 1f       	adc	r22, r26
    81b6:	7b 1f       	adc	r23, r27
    81b8:	25 96       	adiw	r28, 0x05	; 5
    81ba:	cc ac       	ldd	r12, Y+60	; 0x3c
    81bc:	dd ac       	ldd	r13, Y+61	; 0x3d
    81be:	ee ac       	ldd	r14, Y+62	; 0x3e
    81c0:	ff ac       	ldd	r15, Y+63	; 0x3f
    81c2:	25 97       	sbiw	r28, 0x05	; 5
    81c4:	fa e2       	ldi	r31, 0x2A	; 42
    81c6:	cf 1a       	sub	r12, r31
    81c8:	f8 ef       	ldi	r31, 0xF8	; 248
    81ca:	df 0a       	sbc	r13, r31
    81cc:	f8 ec       	ldi	r31, 0xC8	; 200
    81ce:	ef 0a       	sbc	r14, r31
    81d0:	fc e3       	ldi	r31, 0x3C	; 60
    81d2:	ff 0a       	sbc	r15, r31
    81d4:	0c 0d       	add	r16, r12
    81d6:	1d 1d       	adc	r17, r13
    81d8:	2e 1d       	adc	r18, r14
    81da:	3f 1d       	adc	r19, r15
    81dc:	6a 01       	movw	r12, r20
    81de:	7b 01       	movw	r14, r22
    81e0:	c8 26       	eor	r12, r24
    81e2:	d9 26       	eor	r13, r25
    81e4:	ea 26       	eor	r14, r26
    81e6:	fb 26       	eor	r15, r27
    81e8:	c8 20       	and	r12, r8
    81ea:	d9 20       	and	r13, r9
    81ec:	ea 20       	and	r14, r10
    81ee:	fb 20       	and	r15, r11
    81f0:	c8 26       	eor	r12, r24
    81f2:	d9 26       	eor	r13, r25
    81f4:	ea 26       	eor	r14, r26
    81f6:	fb 26       	eor	r15, r27
    81f8:	0c 0d       	add	r16, r12
    81fa:	1d 1d       	adc	r17, r13
    81fc:	2e 1d       	adc	r18, r14
    81fe:	3f 1d       	adc	r19, r15
    8200:	68 01       	movw	r12, r16
    8202:	79 01       	movw	r14, r18
    8204:	0b 2e       	mov	r0, r27
    8206:	b9 e0       	ldi	r27, 0x09	; 9
    8208:	cc 0c       	add	r12, r12
    820a:	dd 1c       	adc	r13, r13
    820c:	ee 1c       	adc	r14, r14
    820e:	ff 1c       	adc	r15, r15
    8210:	ba 95       	dec	r27
    8212:	d1 f7       	brne	.-12     	; 0x8208 <__stack+0x9>
    8214:	b0 2d       	mov	r27, r0
    8216:	0f 2e       	mov	r0, r31
    8218:	f7 e1       	ldi	r31, 0x17	; 23
    821a:	36 95       	lsr	r19
    821c:	27 95       	ror	r18
    821e:	17 95       	ror	r17
    8220:	07 95       	ror	r16
    8222:	fa 95       	dec	r31
    8224:	d1 f7       	brne	.-12     	; 0x821a <__stack+0x1b>
    8226:	f0 2d       	mov	r31, r0
    8228:	0c 29       	or	r16, r12
    822a:	1d 29       	or	r17, r13
    822c:	2e 29       	or	r18, r14
    822e:	3f 29       	or	r19, r15
    8230:	04 0f       	add	r16, r20
    8232:	15 1f       	adc	r17, r21
    8234:	26 1f       	adc	r18, r22
    8236:	37 1f       	adc	r19, r23
    8238:	cd 88       	ldd	r12, Y+21	; 0x15
    823a:	de 88       	ldd	r13, Y+22	; 0x16
    823c:	ef 88       	ldd	r14, Y+23	; 0x17
    823e:	f8 8c       	ldd	r15, Y+24	; 0x18
    8240:	e9 e7       	ldi	r30, 0x79	; 121
    8242:	ce 1a       	sub	r12, r30
    8244:	e2 ef       	ldi	r30, 0xF2	; 242
    8246:	de 0a       	sbc	r13, r30
    8248:	ea e2       	ldi	r30, 0x2A	; 42
    824a:	ee 0a       	sbc	r14, r30
    824c:	eb e0       	ldi	r30, 0x0B	; 11
    824e:	fe 0a       	sbc	r15, r30
    8250:	8c 0c       	add	r8, r12
    8252:	9d 1c       	adc	r9, r13
    8254:	ae 1c       	adc	r10, r14
    8256:	bf 1c       	adc	r11, r15
    8258:	68 01       	movw	r12, r16
    825a:	79 01       	movw	r14, r18
    825c:	c4 26       	eor	r12, r20
    825e:	d5 26       	eor	r13, r21
    8260:	e6 26       	eor	r14, r22
    8262:	f7 26       	eor	r15, r23
    8264:	c8 22       	and	r12, r24
    8266:	d9 22       	and	r13, r25
    8268:	ea 22       	and	r14, r26
    826a:	fb 22       	and	r15, r27
    826c:	c4 26       	eor	r12, r20
    826e:	d5 26       	eor	r13, r21
    8270:	e6 26       	eor	r14, r22
    8272:	f7 26       	eor	r15, r23
    8274:	8c 0c       	add	r8, r12
    8276:	9d 1c       	adc	r9, r13
    8278:	ae 1c       	adc	r10, r14
    827a:	bf 1c       	adc	r11, r15
    827c:	75 01       	movw	r14, r10
    827e:	64 01       	movw	r12, r8
    8280:	0b 2e       	mov	r0, r27
    8282:	be e0       	ldi	r27, 0x0E	; 14
    8284:	cc 0c       	add	r12, r12
    8286:	dd 1c       	adc	r13, r13
    8288:	ee 1c       	adc	r14, r14
    828a:	ff 1c       	adc	r15, r15
    828c:	ba 95       	dec	r27
    828e:	d1 f7       	brne	.-12     	; 0x8284 <__stack+0x85>
    8290:	b0 2d       	mov	r27, r0
    8292:	07 2e       	mov	r0, r23
    8294:	72 e1       	ldi	r23, 0x12	; 18
    8296:	b6 94       	lsr	r11
    8298:	a7 94       	ror	r10
    829a:	97 94       	ror	r9
    829c:	87 94       	ror	r8
    829e:	7a 95       	dec	r23
    82a0:	d1 f7       	brne	.-12     	; 0x8296 <__stack+0x97>
    82a2:	70 2d       	mov	r23, r0
    82a4:	8c 28       	or	r8, r12
    82a6:	9d 28       	or	r9, r13
    82a8:	ae 28       	or	r10, r14
    82aa:	bf 28       	or	r11, r15
    82ac:	80 0e       	add	r8, r16
    82ae:	91 1e       	adc	r9, r17
    82b0:	a2 1e       	adc	r10, r18
    82b2:	b3 1e       	adc	r11, r19
    82b4:	c9 a4       	ldd	r12, Y+41	; 0x29
    82b6:	da a4       	ldd	r13, Y+42	; 0x2a
    82b8:	eb a4       	ldd	r14, Y+43	; 0x2b
    82ba:	fc a4       	ldd	r15, Y+44	; 0x2c
    82bc:	f3 e1       	ldi	r31, 0x13	; 19
    82be:	cf 1a       	sub	r12, r31
    82c0:	fb ee       	ldi	r31, 0xEB	; 235
    82c2:	df 0a       	sbc	r13, r31
    82c4:	f5 ea       	ldi	r31, 0xA5	; 165
    82c6:	ef 0a       	sbc	r14, r31
    82c8:	fa eb       	ldi	r31, 0xBA	; 186
    82ca:	ff 0a       	sbc	r15, r31
    82cc:	8c 0d       	add	r24, r12
    82ce:	9d 1d       	adc	r25, r13
    82d0:	ae 1d       	adc	r26, r14
    82d2:	bf 1d       	adc	r27, r15
    82d4:	75 01       	movw	r14, r10
    82d6:	64 01       	movw	r12, r8
    82d8:	c0 26       	eor	r12, r16
    82da:	d1 26       	eor	r13, r17
    82dc:	e2 26       	eor	r14, r18
    82de:	f3 26       	eor	r15, r19
    82e0:	c4 22       	and	r12, r20
    82e2:	d5 22       	and	r13, r21
    82e4:	e6 22       	and	r14, r22
    82e6:	f7 22       	and	r15, r23
    82e8:	c0 26       	eor	r12, r16
    82ea:	d1 26       	eor	r13, r17
    82ec:	e2 26       	eor	r14, r18
    82ee:	f3 26       	eor	r15, r19
    82f0:	8c 0d       	add	r24, r12
    82f2:	9d 1d       	adc	r25, r13
    82f4:	ae 1d       	adc	r26, r14
    82f6:	bf 1d       	adc	r27, r15
    82f8:	6c 01       	movw	r12, r24
    82fa:	7d 01       	movw	r14, r26
    82fc:	0b 2e       	mov	r0, r27
    82fe:	bc e0       	ldi	r27, 0x0C	; 12
    8300:	f6 94       	lsr	r15
    8302:	e7 94       	ror	r14
    8304:	d7 94       	ror	r13
    8306:	c7 94       	ror	r12
    8308:	ba 95       	dec	r27
    830a:	d1 f7       	brne	.-12     	; 0x8300 <__stack+0x101>
    830c:	b0 2d       	mov	r27, r0
    830e:	07 2e       	mov	r0, r23
    8310:	74 e1       	ldi	r23, 0x14	; 20
    8312:	88 0f       	add	r24, r24
    8314:	99 1f       	adc	r25, r25
    8316:	aa 1f       	adc	r26, r26
    8318:	bb 1f       	adc	r27, r27
    831a:	7a 95       	dec	r23
    831c:	d1 f7       	brne	.-12     	; 0x8312 <__stack+0x113>
    831e:	70 2d       	mov	r23, r0
    8320:	8c 29       	or	r24, r12
    8322:	9d 29       	or	r25, r13
    8324:	ae 29       	or	r26, r14
    8326:	bf 29       	or	r27, r15
    8328:	88 0d       	add	r24, r8
    832a:	99 1d       	adc	r25, r9
    832c:	aa 1d       	adc	r26, r10
    832e:	bb 1d       	adc	r27, r11
    8330:	21 96       	adiw	r28, 0x01	; 1
    8332:	cc ac       	ldd	r12, Y+60	; 0x3c
    8334:	dd ac       	ldd	r13, Y+61	; 0x3d
    8336:	ee ac       	ldd	r14, Y+62	; 0x3e
    8338:	ff ac       	ldd	r15, Y+63	; 0x3f
    833a:	21 97       	sbiw	r28, 0x01	; 1
    833c:	eb ef       	ldi	r30, 0xFB	; 251
    833e:	ce 1a       	sub	r12, r30
    8340:	e6 e1       	ldi	r30, 0x16	; 22
    8342:	de 0a       	sbc	r13, r30
    8344:	ec e1       	ldi	r30, 0x1C	; 28
    8346:	ee 0a       	sbc	r14, r30
    8348:	e6 e5       	ldi	r30, 0x56	; 86
    834a:	fe 0a       	sbc	r15, r30
    834c:	4c 0d       	add	r20, r12
    834e:	5d 1d       	adc	r21, r13
    8350:	6e 1d       	adc	r22, r14
    8352:	7f 1d       	adc	r23, r15
    8354:	6c 01       	movw	r12, r24
    8356:	7d 01       	movw	r14, r26
    8358:	c8 24       	eor	r12, r8
    835a:	d9 24       	eor	r13, r9
    835c:	ea 24       	eor	r14, r10
    835e:	fb 24       	eor	r15, r11
    8360:	c0 22       	and	r12, r16
    8362:	d1 22       	and	r13, r17
    8364:	e2 22       	and	r14, r18
    8366:	f3 22       	and	r15, r19
    8368:	c8 24       	eor	r12, r8
    836a:	d9 24       	eor	r13, r9
    836c:	ea 24       	eor	r14, r10
    836e:	fb 24       	eor	r15, r11
    8370:	4c 0d       	add	r20, r12
    8372:	5d 1d       	adc	r21, r13
    8374:	6e 1d       	adc	r22, r14
    8376:	7f 1d       	adc	r23, r15
    8378:	6a 01       	movw	r12, r20
    837a:	7b 01       	movw	r14, r22
    837c:	cc 0c       	add	r12, r12
    837e:	dd 1c       	adc	r13, r13
    8380:	ee 1c       	adc	r14, r14
    8382:	ff 1c       	adc	r15, r15
    8384:	cc 0c       	add	r12, r12
    8386:	dd 1c       	adc	r13, r13
    8388:	ee 1c       	adc	r14, r14
    838a:	ff 1c       	adc	r15, r15
    838c:	cc 0c       	add	r12, r12
    838e:	dd 1c       	adc	r13, r13
    8390:	ee 1c       	adc	r14, r14
    8392:	ff 1c       	adc	r15, r15
    8394:	cc 0c       	add	r12, r12
    8396:	dd 1c       	adc	r13, r13
    8398:	ee 1c       	adc	r14, r14
    839a:	ff 1c       	adc	r15, r15
    839c:	cc 0c       	add	r12, r12
    839e:	dd 1c       	adc	r13, r13
    83a0:	ee 1c       	adc	r14, r14
    83a2:	ff 1c       	adc	r15, r15
    83a4:	03 2e       	mov	r0, r19
    83a6:	3b e1       	ldi	r19, 0x1B	; 27
    83a8:	76 95       	lsr	r23
    83aa:	67 95       	ror	r22
    83ac:	57 95       	ror	r21
    83ae:	47 95       	ror	r20
    83b0:	3a 95       	dec	r19
    83b2:	d1 f7       	brne	.-12     	; 0x83a8 <__stack+0x1a9>
    83b4:	30 2d       	mov	r19, r0
    83b6:	4c 29       	or	r20, r12
    83b8:	5d 29       	or	r21, r13
    83ba:	6e 29       	or	r22, r14
    83bc:	7f 29       	or	r23, r15
    83be:	48 0f       	add	r20, r24
    83c0:	59 1f       	adc	r21, r25
    83c2:	6a 1f       	adc	r22, r26
    83c4:	7b 1f       	adc	r23, r27
    83c6:	c9 88       	ldd	r12, Y+17	; 0x11
    83c8:	da 88       	ldd	r13, Y+18	; 0x12
    83ca:	eb 88       	ldd	r14, Y+19	; 0x13
    83cc:	fc 88       	ldd	r15, Y+20	; 0x14
    83ce:	f8 e0       	ldi	r31, 0x08	; 8
    83d0:	cf 1a       	sub	r12, r31
    83d2:	fc e5       	ldi	r31, 0x5C	; 92
    83d4:	df 0a       	sbc	r13, r31
    83d6:	f0 e1       	ldi	r31, 0x10	; 16
    83d8:	ef 0a       	sbc	r14, r31
    83da:	f3 e0       	ldi	r31, 0x03	; 3
    83dc:	ff 0a       	sbc	r15, r31
    83de:	0c 0d       	add	r16, r12
    83e0:	1d 1d       	adc	r17, r13
    83e2:	2e 1d       	adc	r18, r14
    83e4:	3f 1d       	adc	r19, r15
    83e6:	6a 01       	movw	r12, r20
    83e8:	7b 01       	movw	r14, r22
    83ea:	c8 26       	eor	r12, r24
    83ec:	d9 26       	eor	r13, r25
    83ee:	ea 26       	eor	r14, r26
    83f0:	fb 26       	eor	r15, r27
    83f2:	c8 20       	and	r12, r8
    83f4:	d9 20       	and	r13, r9
    83f6:	ea 20       	and	r14, r10
    83f8:	fb 20       	and	r15, r11
    83fa:	c8 26       	eor	r12, r24
    83fc:	d9 26       	eor	r13, r25
    83fe:	ea 26       	eor	r14, r26
    8400:	fb 26       	eor	r15, r27
    8402:	0c 0d       	add	r16, r12
    8404:	1d 1d       	adc	r17, r13
    8406:	2e 1d       	adc	r18, r14
    8408:	3f 1d       	adc	r19, r15
    840a:	68 01       	movw	r12, r16
    840c:	79 01       	movw	r14, r18
    840e:	0b 2e       	mov	r0, r27
    8410:	b9 e0       	ldi	r27, 0x09	; 9
    8412:	cc 0c       	add	r12, r12
    8414:	dd 1c       	adc	r13, r13
    8416:	ee 1c       	adc	r14, r14
    8418:	ff 1c       	adc	r15, r15
    841a:	ba 95       	dec	r27
    841c:	d1 f7       	brne	.-12     	; 0x8412 <__stack+0x213>
    841e:	b0 2d       	mov	r27, r0
    8420:	0f 2e       	mov	r0, r31
    8422:	f7 e1       	ldi	r31, 0x17	; 23
    8424:	36 95       	lsr	r19
    8426:	27 95       	ror	r18
    8428:	17 95       	ror	r17
    842a:	07 95       	ror	r16
    842c:	fa 95       	dec	r31
    842e:	d1 f7       	brne	.-12     	; 0x8424 <__stack+0x225>
    8430:	f0 2d       	mov	r31, r0
    8432:	0c 29       	or	r16, r12
    8434:	1d 29       	or	r17, r13
    8436:	2e 29       	or	r18, r14
    8438:	3f 29       	or	r19, r15
    843a:	04 0f       	add	r16, r20
    843c:	15 1f       	adc	r17, r21
    843e:	26 1f       	adc	r18, r22
    8440:	37 1f       	adc	r19, r23
    8442:	cd a0       	ldd	r12, Y+37	; 0x25
    8444:	de a0       	ldd	r13, Y+38	; 0x26
    8446:	ef a0       	ldd	r14, Y+39	; 0x27
    8448:	f8 a4       	ldd	r15, Y+40	; 0x28
    844a:	e7 e2       	ldi	r30, 0x27	; 39
    844c:	ce 1a       	sub	r12, r30
    844e:	ed ef       	ldi	r30, 0xFD	; 253
    8450:	de 0a       	sbc	r13, r30
    8452:	e0 e9       	ldi	r30, 0x90	; 144
    8454:	ee 0a       	sbc	r14, r30
    8456:	e8 e9       	ldi	r30, 0x98	; 152
    8458:	fe 0a       	sbc	r15, r30
    845a:	8c 0c       	add	r8, r12
    845c:	9d 1c       	adc	r9, r13
    845e:	ae 1c       	adc	r10, r14
    8460:	bf 1c       	adc	r11, r15
    8462:	68 01       	movw	r12, r16
    8464:	79 01       	movw	r14, r18
    8466:	c4 26       	eor	r12, r20
    8468:	d5 26       	eor	r13, r21
    846a:	e6 26       	eor	r14, r22
    846c:	f7 26       	eor	r15, r23
    846e:	c8 22       	and	r12, r24
    8470:	d9 22       	and	r13, r25
    8472:	ea 22       	and	r14, r26
    8474:	fb 22       	and	r15, r27
    8476:	c4 26       	eor	r12, r20
    8478:	d5 26       	eor	r13, r21
    847a:	e6 26       	eor	r14, r22
    847c:	f7 26       	eor	r15, r23
    847e:	8c 0c       	add	r8, r12
    8480:	9d 1c       	adc	r9, r13
    8482:	ae 1c       	adc	r10, r14
    8484:	bf 1c       	adc	r11, r15
    8486:	75 01       	movw	r14, r10
    8488:	64 01       	movw	r12, r8
    848a:	0b 2e       	mov	r0, r27
    848c:	be e0       	ldi	r27, 0x0E	; 14
    848e:	cc 0c       	add	r12, r12
    8490:	dd 1c       	adc	r13, r13
    8492:	ee 1c       	adc	r14, r14
    8494:	ff 1c       	adc	r15, r15
    8496:	ba 95       	dec	r27
    8498:	d1 f7       	brne	.-12     	; 0x848e <__stack+0x28f>
    849a:	b0 2d       	mov	r27, r0
    849c:	07 2e       	mov	r0, r23
    849e:	72 e1       	ldi	r23, 0x12	; 18
    84a0:	b6 94       	lsr	r11
    84a2:	a7 94       	ror	r10
    84a4:	97 94       	ror	r9
    84a6:	87 94       	ror	r8
    84a8:	7a 95       	dec	r23
    84aa:	d1 f7       	brne	.-12     	; 0x84a0 <__stack+0x2a1>
    84ac:	70 2d       	mov	r23, r0
    84ae:	8c 28       	or	r8, r12
    84b0:	9d 28       	or	r9, r13
    84b2:	ae 28       	or	r10, r14
    84b4:	bf 28       	or	r11, r15
    84b6:	80 0e       	add	r8, r16
    84b8:	91 1e       	adc	r9, r17
    84ba:	a2 1e       	adc	r10, r18
    84bc:	b3 1e       	adc	r11, r19
    84be:	75 01       	movw	r14, r10
    84c0:	64 01       	movw	r12, r8
    84c2:	c0 26       	eor	r12, r16
    84c4:	d1 26       	eor	r13, r17
    84c6:	e2 26       	eor	r14, r18
    84c8:	f3 26       	eor	r15, r19
    84ca:	49 ac       	ldd	r4, Y+57	; 0x39
    84cc:	5a ac       	ldd	r5, Y+58	; 0x3a
    84ce:	6b ac       	ldd	r6, Y+59	; 0x3b
    84d0:	7c ac       	ldd	r7, Y+60	; 0x3c
    84d2:	f6 e7       	ldi	r31, 0x76	; 118
    84d4:	4f 1a       	sub	r4, r31
    84d6:	f3 eb       	ldi	r31, 0xB3	; 179
    84d8:	5f 0a       	sbc	r5, r31
    84da:	f5 ed       	ldi	r31, 0xD5	; 213
    84dc:	6f 0a       	sbc	r6, r31
    84de:	f2 e7       	ldi	r31, 0x72	; 114
    84e0:	7f 0a       	sbc	r7, r31
    84e2:	84 0d       	add	r24, r4
    84e4:	95 1d       	adc	r25, r5
    84e6:	a6 1d       	adc	r26, r6
    84e8:	b7 1d       	adc	r27, r7
    84ea:	26 01       	movw	r4, r12
    84ec:	37 01       	movw	r6, r14
    84ee:	44 22       	and	r4, r20
    84f0:	55 22       	and	r5, r21
    84f2:	66 22       	and	r6, r22
    84f4:	77 22       	and	r7, r23
    84f6:	40 26       	eor	r4, r16
    84f8:	51 26       	eor	r5, r17
    84fa:	62 26       	eor	r6, r18
    84fc:	73 26       	eor	r7, r19
    84fe:	84 0d       	add	r24, r4
    8500:	95 1d       	adc	r25, r5
    8502:	a6 1d       	adc	r26, r6
    8504:	b7 1d       	adc	r27, r7
    8506:	2c 01       	movw	r4, r24
    8508:	3d 01       	movw	r6, r26
    850a:	03 2e       	mov	r0, r19
    850c:	3c e0       	ldi	r19, 0x0C	; 12
    850e:	76 94       	lsr	r7
    8510:	67 94       	ror	r6
    8512:	57 94       	ror	r5
    8514:	47 94       	ror	r4
    8516:	3a 95       	dec	r19
    8518:	d1 f7       	brne	.-12     	; 0x850e <__stack+0x30f>
    851a:	30 2d       	mov	r19, r0
    851c:	07 2e       	mov	r0, r23
    851e:	74 e1       	ldi	r23, 0x14	; 20
    8520:	88 0f       	add	r24, r24
    8522:	99 1f       	adc	r25, r25
    8524:	aa 1f       	adc	r26, r26
    8526:	bb 1f       	adc	r27, r27
    8528:	7a 95       	dec	r23
    852a:	d1 f7       	brne	.-12     	; 0x8520 <__stack+0x321>
    852c:	70 2d       	mov	r23, r0
    852e:	84 29       	or	r24, r4
    8530:	95 29       	or	r25, r5
    8532:	a6 29       	or	r26, r6
    8534:	b7 29       	or	r27, r7
    8536:	88 0d       	add	r24, r8
    8538:	99 1d       	adc	r25, r9
    853a:	aa 1d       	adc	r26, r10
    853c:	bb 1d       	adc	r27, r11
    853e:	4d 8c       	ldd	r4, Y+29	; 0x1d
    8540:	5e 8c       	ldd	r5, Y+30	; 0x1e
    8542:	6f 8c       	ldd	r6, Y+31	; 0x1f
    8544:	78 a0       	ldd	r7, Y+32	; 0x20
    8546:	ee eb       	ldi	r30, 0xBE	; 190
    8548:	4e 1a       	sub	r4, r30
    854a:	e6 ec       	ldi	r30, 0xC6	; 198
    854c:	5e 0a       	sbc	r5, r30
    854e:	e5 e0       	ldi	r30, 0x05	; 5
    8550:	6e 0a       	sbc	r6, r30
    8552:	71 08       	sbc	r7, r1
    8554:	44 0d       	add	r20, r4
    8556:	55 1d       	adc	r21, r5
    8558:	66 1d       	adc	r22, r6
    855a:	77 1d       	adc	r23, r7
    855c:	c8 26       	eor	r12, r24
    855e:	d9 26       	eor	r13, r25
    8560:	ea 26       	eor	r14, r26
    8562:	fb 26       	eor	r15, r27
    8564:	4c 0d       	add	r20, r12
    8566:	5d 1d       	adc	r21, r13
    8568:	6e 1d       	adc	r22, r14
    856a:	7f 1d       	adc	r23, r15
    856c:	6a 01       	movw	r12, r20
    856e:	7b 01       	movw	r14, r22
    8570:	cc 0c       	add	r12, r12
    8572:	dd 1c       	adc	r13, r13
    8574:	ee 1c       	adc	r14, r14
    8576:	ff 1c       	adc	r15, r15
    8578:	cc 0c       	add	r12, r12
    857a:	dd 1c       	adc	r13, r13
    857c:	ee 1c       	adc	r14, r14
    857e:	ff 1c       	adc	r15, r15
    8580:	cc 0c       	add	r12, r12
    8582:	dd 1c       	adc	r13, r13
    8584:	ee 1c       	adc	r14, r14
    8586:	ff 1c       	adc	r15, r15
    8588:	cc 0c       	add	r12, r12
    858a:	dd 1c       	adc	r13, r13
    858c:	ee 1c       	adc	r14, r14
    858e:	ff 1c       	adc	r15, r15
    8590:	03 2e       	mov	r0, r19
    8592:	3c e1       	ldi	r19, 0x1C	; 28
    8594:	76 95       	lsr	r23
    8596:	67 95       	ror	r22
    8598:	57 95       	ror	r21
    859a:	47 95       	ror	r20
    859c:	3a 95       	dec	r19
    859e:	d1 f7       	brne	.-12     	; 0x8594 <__stack+0x395>
    85a0:	30 2d       	mov	r19, r0
    85a2:	4c 29       	or	r20, r12
    85a4:	5d 29       	or	r21, r13
    85a6:	6e 29       	or	r22, r14
    85a8:	7f 29       	or	r23, r15
    85aa:	48 0f       	add	r20, r24
    85ac:	59 1f       	adc	r21, r25
    85ae:	6a 1f       	adc	r22, r26
    85b0:	7b 1f       	adc	r23, r27
    85b2:	c9 a4       	ldd	r12, Y+41	; 0x29
    85b4:	da a4       	ldd	r13, Y+42	; 0x2a
    85b6:	eb a4       	ldd	r14, Y+43	; 0x2b
    85b8:	fc a4       	ldd	r15, Y+44	; 0x2c
    85ba:	ff e7       	ldi	r31, 0x7F	; 127
    85bc:	cf 1a       	sub	r12, r31
    85be:	f9 e0       	ldi	r31, 0x09	; 9
    85c0:	df 0a       	sbc	r13, r31
    85c2:	fe e8       	ldi	r31, 0x8E	; 142
    85c4:	ef 0a       	sbc	r14, r31
    85c6:	f8 e7       	ldi	r31, 0x78	; 120
    85c8:	ff 0a       	sbc	r15, r31
    85ca:	0c 0d       	add	r16, r12
    85cc:	1d 1d       	adc	r17, r13
    85ce:	2e 1d       	adc	r18, r14
    85d0:	3f 1d       	adc	r19, r15
    85d2:	6c 01       	movw	r12, r24
    85d4:	7d 01       	movw	r14, r26
    85d6:	c8 24       	eor	r12, r8
    85d8:	d9 24       	eor	r13, r9
    85da:	ea 24       	eor	r14, r10
    85dc:	fb 24       	eor	r15, r11
    85de:	c4 26       	eor	r12, r20
    85e0:	d5 26       	eor	r13, r21
    85e2:	e6 26       	eor	r14, r22
    85e4:	f7 26       	eor	r15, r23
    85e6:	0c 0d       	add	r16, r12
    85e8:	1d 1d       	adc	r17, r13
    85ea:	2e 1d       	adc	r18, r14
    85ec:	3f 1d       	adc	r19, r15
    85ee:	68 01       	movw	r12, r16
    85f0:	79 01       	movw	r14, r18
    85f2:	0b 2e       	mov	r0, r27
    85f4:	bb e0       	ldi	r27, 0x0B	; 11
    85f6:	cc 0c       	add	r12, r12
    85f8:	dd 1c       	adc	r13, r13
    85fa:	ee 1c       	adc	r14, r14
    85fc:	ff 1c       	adc	r15, r15
    85fe:	ba 95       	dec	r27
    8600:	d1 f7       	brne	.-12     	; 0x85f6 <__stack+0x3f7>
    8602:	b0 2d       	mov	r27, r0
    8604:	0f 2e       	mov	r0, r31
    8606:	f5 e1       	ldi	r31, 0x15	; 21
    8608:	36 95       	lsr	r19
    860a:	27 95       	ror	r18
    860c:	17 95       	ror	r17
    860e:	07 95       	ror	r16
    8610:	fa 95       	dec	r31
    8612:	d1 f7       	brne	.-12     	; 0x8608 <__stack+0x409>
    8614:	f0 2d       	mov	r31, r0
    8616:	0c 29       	or	r16, r12
    8618:	1d 29       	or	r17, r13
    861a:	2e 29       	or	r18, r14
    861c:	3f 29       	or	r19, r15
    861e:	04 0f       	add	r16, r20
    8620:	15 1f       	adc	r17, r21
    8622:	26 1f       	adc	r18, r22
    8624:	37 1f       	adc	r19, r23
    8626:	cd a8       	ldd	r12, Y+53	; 0x35
    8628:	de a8       	ldd	r13, Y+54	; 0x36
    862a:	ef a8       	ldd	r14, Y+55	; 0x37
    862c:	f8 ac       	ldd	r15, Y+56	; 0x38
    862e:	ee ed       	ldi	r30, 0xDE	; 222
    8630:	ce 1a       	sub	r12, r30
    8632:	ee e9       	ldi	r30, 0x9E	; 158
    8634:	de 0a       	sbc	r13, r30
    8636:	e2 e6       	ldi	r30, 0x62	; 98
    8638:	ee 0a       	sbc	r14, r30
    863a:	e2 e9       	ldi	r30, 0x92	; 146
    863c:	fe 0a       	sbc	r15, r30
    863e:	8c 0c       	add	r8, r12
    8640:	9d 1c       	adc	r9, r13
    8642:	ae 1c       	adc	r10, r14
    8644:	bf 1c       	adc	r11, r15
    8646:	6a 01       	movw	r12, r20
    8648:	7b 01       	movw	r14, r22
    864a:	c8 26       	eor	r12, r24
    864c:	d9 26       	eor	r13, r25
    864e:	ea 26       	eor	r14, r26
    8650:	fb 26       	eor	r15, r27
    8652:	c0 26       	eor	r12, r16
    8654:	d1 26       	eor	r13, r17
    8656:	e2 26       	eor	r14, r18
    8658:	f3 26       	eor	r15, r19
    865a:	8c 0c       	add	r8, r12
    865c:	9d 1c       	adc	r9, r13
    865e:	ae 1c       	adc	r10, r14
    8660:	bf 1c       	adc	r11, r15
    8662:	64 01       	movw	r12, r8
    8664:	45 01       	movw	r8, r10
    8666:	56 01       	movw	r10, r12
    8668:	80 0e       	add	r8, r16
    866a:	91 1e       	adc	r9, r17
    866c:	a2 1e       	adc	r10, r18
    866e:	b3 1e       	adc	r11, r19
    8670:	25 96       	adiw	r28, 0x05	; 5
    8672:	cc ac       	ldd	r12, Y+60	; 0x3c
    8674:	dd ac       	ldd	r13, Y+61	; 0x3d
    8676:	ee ac       	ldd	r14, Y+62	; 0x3e
    8678:	ff ac       	ldd	r15, Y+63	; 0x3f
    867a:	25 97       	sbiw	r28, 0x05	; 5
    867c:	e4 ef       	ldi	r30, 0xF4	; 244
    867e:	ce 1a       	sub	r12, r30
    8680:	e7 ec       	ldi	r30, 0xC7	; 199
    8682:	de 0a       	sbc	r13, r30
    8684:	ea e1       	ldi	r30, 0x1A	; 26
    8686:	ee 0a       	sbc	r14, r30
    8688:	e2 e0       	ldi	r30, 0x02	; 2
    868a:	fe 0a       	sbc	r15, r30
    868c:	8c 0d       	add	r24, r12
    868e:	9d 1d       	adc	r25, r13
    8690:	ae 1d       	adc	r26, r14
    8692:	bf 1d       	adc	r27, r15
    8694:	68 01       	movw	r12, r16
    8696:	79 01       	movw	r14, r18
    8698:	c4 26       	eor	r12, r20
    869a:	d5 26       	eor	r13, r21
    869c:	e6 26       	eor	r14, r22
    869e:	f7 26       	eor	r15, r23
    86a0:	c8 24       	eor	r12, r8
    86a2:	d9 24       	eor	r13, r9
    86a4:	ea 24       	eor	r14, r10
    86a6:	fb 24       	eor	r15, r11
    86a8:	8c 0d       	add	r24, r12
    86aa:	9d 1d       	adc	r25, r13
    86ac:	ae 1d       	adc	r26, r14
    86ae:	bf 1d       	adc	r27, r15
    86b0:	6c 01       	movw	r12, r24
    86b2:	7d 01       	movw	r14, r26
    86b4:	0b 2e       	mov	r0, r27
    86b6:	b9 e0       	ldi	r27, 0x09	; 9
    86b8:	f6 94       	lsr	r15
    86ba:	e7 94       	ror	r14
    86bc:	d7 94       	ror	r13
    86be:	c7 94       	ror	r12
    86c0:	ba 95       	dec	r27
    86c2:	d1 f7       	brne	.-12     	; 0x86b8 <__stack+0x4b9>
    86c4:	b0 2d       	mov	r27, r0
    86c6:	07 2e       	mov	r0, r23
    86c8:	77 e1       	ldi	r23, 0x17	; 23
    86ca:	88 0f       	add	r24, r24
    86cc:	99 1f       	adc	r25, r25
    86ce:	aa 1f       	adc	r26, r26
    86d0:	bb 1f       	adc	r27, r27
    86d2:	7a 95       	dec	r23
    86d4:	d1 f7       	brne	.-12     	; 0x86ca <__stack+0x4cb>
    86d6:	70 2d       	mov	r23, r0
    86d8:	8c 29       	or	r24, r12
    86da:	9d 29       	or	r25, r13
    86dc:	ae 29       	or	r26, r14
    86de:	bf 29       	or	r27, r15
    86e0:	88 0d       	add	r24, r8
    86e2:	99 1d       	adc	r25, r9
    86e4:	aa 1d       	adc	r26, r10
    86e6:	bb 1d       	adc	r27, r11
    86e8:	4d 84       	ldd	r4, Y+13	; 0x0d
    86ea:	5e 84       	ldd	r5, Y+14	; 0x0e
    86ec:	6f 84       	ldd	r6, Y+15	; 0x0f
    86ee:	78 88       	ldd	r7, Y+16	; 0x10
    86f0:	fc eb       	ldi	r31, 0xBC	; 188
    86f2:	4f 1a       	sub	r4, r31
    86f4:	f5 e1       	ldi	r31, 0x15	; 21
    86f6:	5f 0a       	sbc	r5, r31
    86f8:	f1 e4       	ldi	r31, 0x41	; 65
    86fa:	6f 0a       	sbc	r6, r31
    86fc:	fb e5       	ldi	r31, 0x5B	; 91
    86fe:	7f 0a       	sbc	r7, r31
    8700:	44 0d       	add	r20, r4
    8702:	55 1d       	adc	r21, r5
    8704:	66 1d       	adc	r22, r6
    8706:	77 1d       	adc	r23, r7
    8708:	24 01       	movw	r4, r8
    870a:	35 01       	movw	r6, r10
    870c:	40 26       	eor	r4, r16
    870e:	51 26       	eor	r5, r17
    8710:	62 26       	eor	r6, r18
    8712:	73 26       	eor	r7, r19
    8714:	48 26       	eor	r4, r24
    8716:	59 26       	eor	r5, r25
    8718:	6a 26       	eor	r6, r26
    871a:	7b 26       	eor	r7, r27
    871c:	44 0d       	add	r20, r4
    871e:	55 1d       	adc	r21, r5
    8720:	66 1d       	adc	r22, r6
    8722:	77 1d       	adc	r23, r7
    8724:	6a 01       	movw	r12, r20
    8726:	7b 01       	movw	r14, r22
    8728:	cc 0c       	add	r12, r12
    872a:	dd 1c       	adc	r13, r13
    872c:	ee 1c       	adc	r14, r14
    872e:	ff 1c       	adc	r15, r15
    8730:	cc 0c       	add	r12, r12
    8732:	dd 1c       	adc	r13, r13
    8734:	ee 1c       	adc	r14, r14
    8736:	ff 1c       	adc	r15, r15
    8738:	cc 0c       	add	r12, r12
    873a:	dd 1c       	adc	r13, r13
    873c:	ee 1c       	adc	r14, r14
    873e:	ff 1c       	adc	r15, r15
    8740:	cc 0c       	add	r12, r12
    8742:	dd 1c       	adc	r13, r13
    8744:	ee 1c       	adc	r14, r14
    8746:	ff 1c       	adc	r15, r15
    8748:	03 2e       	mov	r0, r19
    874a:	3c e1       	ldi	r19, 0x1C	; 28
    874c:	76 95       	lsr	r23
    874e:	67 95       	ror	r22
    8750:	57 95       	ror	r21
    8752:	47 95       	ror	r20
    8754:	3a 95       	dec	r19
    8756:	d1 f7       	brne	.-12     	; 0x874c <__stack+0x54d>
    8758:	30 2d       	mov	r19, r0
    875a:	4c 29       	or	r20, r12
    875c:	5d 29       	or	r21, r13
    875e:	6e 29       	or	r22, r14
    8760:	7f 29       	or	r23, r15
    8762:	48 0f       	add	r20, r24
    8764:	59 1f       	adc	r21, r25
    8766:	6a 1f       	adc	r22, r26
    8768:	7b 1f       	adc	r23, r27
    876a:	c9 8c       	ldd	r12, Y+25	; 0x19
    876c:	da 8c       	ldd	r13, Y+26	; 0x1a
    876e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    8770:	fc 8c       	ldd	r15, Y+28	; 0x1c
    8772:	e7 e5       	ldi	r30, 0x57	; 87
    8774:	ce 1a       	sub	r12, r30
    8776:	e0 e3       	ldi	r30, 0x30	; 48
    8778:	de 0a       	sbc	r13, r30
    877a:	e1 e2       	ldi	r30, 0x21	; 33
    877c:	ee 0a       	sbc	r14, r30
    877e:	e4 eb       	ldi	r30, 0xB4	; 180
    8780:	fe 0a       	sbc	r15, r30
    8782:	0c 0d       	add	r16, r12
    8784:	1d 1d       	adc	r17, r13
    8786:	2e 1d       	adc	r18, r14
    8788:	3f 1d       	adc	r19, r15
    878a:	6c 01       	movw	r12, r24
    878c:	7d 01       	movw	r14, r26
    878e:	c8 24       	eor	r12, r8
    8790:	d9 24       	eor	r13, r9
    8792:	ea 24       	eor	r14, r10
    8794:	fb 24       	eor	r15, r11
    8796:	c4 26       	eor	r12, r20
    8798:	d5 26       	eor	r13, r21
    879a:	e6 26       	eor	r14, r22
    879c:	f7 26       	eor	r15, r23
    879e:	0c 0d       	add	r16, r12
    87a0:	1d 1d       	adc	r17, r13
    87a2:	2e 1d       	adc	r18, r14
    87a4:	3f 1d       	adc	r19, r15
    87a6:	68 01       	movw	r12, r16
    87a8:	79 01       	movw	r14, r18
    87aa:	0b 2e       	mov	r0, r27
    87ac:	bb e0       	ldi	r27, 0x0B	; 11
    87ae:	cc 0c       	add	r12, r12
    87b0:	dd 1c       	adc	r13, r13
    87b2:	ee 1c       	adc	r14, r14
    87b4:	ff 1c       	adc	r15, r15
    87b6:	ba 95       	dec	r27
    87b8:	d1 f7       	brne	.-12     	; 0x87ae <__stack+0x5af>
    87ba:	b0 2d       	mov	r27, r0
    87bc:	0f 2e       	mov	r0, r31
    87be:	f5 e1       	ldi	r31, 0x15	; 21
    87c0:	36 95       	lsr	r19
    87c2:	27 95       	ror	r18
    87c4:	17 95       	ror	r17
    87c6:	07 95       	ror	r16
    87c8:	fa 95       	dec	r31
    87ca:	d1 f7       	brne	.-12     	; 0x87c0 <__stack+0x5c1>
    87cc:	f0 2d       	mov	r31, r0
    87ce:	0c 29       	or	r16, r12
    87d0:	1d 29       	or	r17, r13
    87d2:	2e 29       	or	r18, r14
    87d4:	3f 29       	or	r19, r15
    87d6:	04 0f       	add	r16, r20
    87d8:	15 1f       	adc	r17, r21
    87da:	26 1f       	adc	r18, r22
    87dc:	37 1f       	adc	r19, r23
    87de:	cd a0       	ldd	r12, Y+37	; 0x25
    87e0:	de a0       	ldd	r13, Y+38	; 0x26
    87e2:	ef a0       	ldd	r14, Y+39	; 0x27
    87e4:	f8 a4       	ldd	r15, Y+40	; 0x28
    87e6:	f0 ea       	ldi	r31, 0xA0	; 160
    87e8:	cf 1a       	sub	r12, r31
    87ea:	f4 eb       	ldi	r31, 0xB4	; 180
    87ec:	df 0a       	sbc	r13, r31
    87ee:	f4 e4       	ldi	r31, 0x44	; 68
    87f0:	ef 0a       	sbc	r14, r31
    87f2:	f9 e0       	ldi	r31, 0x09	; 9
    87f4:	ff 0a       	sbc	r15, r31
    87f6:	8c 0c       	add	r8, r12
    87f8:	9d 1c       	adc	r9, r13
    87fa:	ae 1c       	adc	r10, r14
    87fc:	bf 1c       	adc	r11, r15
    87fe:	6a 01       	movw	r12, r20
    8800:	7b 01       	movw	r14, r22
    8802:	c8 26       	eor	r12, r24
    8804:	d9 26       	eor	r13, r25
    8806:	ea 26       	eor	r14, r26
    8808:	fb 26       	eor	r15, r27
    880a:	c0 26       	eor	r12, r16
    880c:	d1 26       	eor	r13, r17
    880e:	e2 26       	eor	r14, r18
    8810:	f3 26       	eor	r15, r19
    8812:	8c 0c       	add	r8, r12
    8814:	9d 1c       	adc	r9, r13
    8816:	ae 1c       	adc	r10, r14
    8818:	bf 1c       	adc	r11, r15
    881a:	64 01       	movw	r12, r8
    881c:	45 01       	movw	r8, r10
    881e:	56 01       	movw	r10, r12
    8820:	80 0e       	add	r8, r16
    8822:	91 1e       	adc	r9, r17
    8824:	a2 1e       	adc	r10, r18
    8826:	b3 1e       	adc	r11, r19
    8828:	c9 a8       	ldd	r12, Y+49	; 0x31
    882a:	da a8       	ldd	r13, Y+50	; 0x32
    882c:	eb a8       	ldd	r14, Y+51	; 0x33
    882e:	fc a8       	ldd	r15, Y+52	; 0x34
    8830:	e0 e9       	ldi	r30, 0x90	; 144
    8832:	ce 1a       	sub	r12, r30
    8834:	e3 e4       	ldi	r30, 0x43	; 67
    8836:	de 0a       	sbc	r13, r30
    8838:	e0 e4       	ldi	r30, 0x40	; 64
    883a:	ee 0a       	sbc	r14, r30
    883c:	e1 e4       	ldi	r30, 0x41	; 65
    883e:	fe 0a       	sbc	r15, r30
    8840:	8c 0d       	add	r24, r12
    8842:	9d 1d       	adc	r25, r13
    8844:	ae 1d       	adc	r26, r14
    8846:	bf 1d       	adc	r27, r15
    8848:	68 01       	movw	r12, r16
    884a:	79 01       	movw	r14, r18
    884c:	c4 26       	eor	r12, r20
    884e:	d5 26       	eor	r13, r21
    8850:	e6 26       	eor	r14, r22
    8852:	f7 26       	eor	r15, r23
    8854:	c8 24       	eor	r12, r8
    8856:	d9 24       	eor	r13, r9
    8858:	ea 24       	eor	r14, r10
    885a:	fb 24       	eor	r15, r11
    885c:	8c 0d       	add	r24, r12
    885e:	9d 1d       	adc	r25, r13
    8860:	ae 1d       	adc	r26, r14
    8862:	bf 1d       	adc	r27, r15
    8864:	6c 01       	movw	r12, r24
    8866:	7d 01       	movw	r14, r26
    8868:	0b 2e       	mov	r0, r27
    886a:	b9 e0       	ldi	r27, 0x09	; 9
    886c:	f6 94       	lsr	r15
    886e:	e7 94       	ror	r14
    8870:	d7 94       	ror	r13
    8872:	c7 94       	ror	r12
    8874:	ba 95       	dec	r27
    8876:	d1 f7       	brne	.-12     	; 0x886c <__stack+0x66d>
    8878:	b0 2d       	mov	r27, r0
    887a:	07 2e       	mov	r0, r23
    887c:	77 e1       	ldi	r23, 0x17	; 23
    887e:	88 0f       	add	r24, r24
    8880:	99 1f       	adc	r25, r25
    8882:	aa 1f       	adc	r26, r26
    8884:	bb 1f       	adc	r27, r27
    8886:	7a 95       	dec	r23
    8888:	d1 f7       	brne	.-12     	; 0x887e <__stack+0x67f>
    888a:	70 2d       	mov	r23, r0
    888c:	8c 29       	or	r24, r12
    888e:	9d 29       	or	r25, r13
    8890:	ae 29       	or	r26, r14
    8892:	bf 29       	or	r27, r15
    8894:	88 0d       	add	r24, r8
    8896:	99 1d       	adc	r25, r9
    8898:	aa 1d       	adc	r26, r10
    889a:	bb 1d       	adc	r27, r11
    889c:	21 96       	adiw	r28, 0x01	; 1
    889e:	4c ac       	ldd	r4, Y+60	; 0x3c
    88a0:	5d ac       	ldd	r5, Y+61	; 0x3d
    88a2:	6e ac       	ldd	r6, Y+62	; 0x3e
    88a4:	7f ac       	ldd	r7, Y+63	; 0x3f
    88a6:	21 97       	sbiw	r28, 0x01	; 1
    88a8:	fa e3       	ldi	r31, 0x3A	; 58
    88aa:	4f 1a       	sub	r4, r31
    88ac:	f1 e8       	ldi	r31, 0x81	; 129
    88ae:	5f 0a       	sbc	r5, r31
    88b0:	f4 e6       	ldi	r31, 0x64	; 100
    88b2:	6f 0a       	sbc	r6, r31
    88b4:	f7 ed       	ldi	r31, 0xD7	; 215
    88b6:	7f 0a       	sbc	r7, r31
    88b8:	44 0d       	add	r20, r4
    88ba:	55 1d       	adc	r21, r5
    88bc:	66 1d       	adc	r22, r6
    88be:	77 1d       	adc	r23, r7
    88c0:	24 01       	movw	r4, r8
    88c2:	35 01       	movw	r6, r10
    88c4:	40 26       	eor	r4, r16
    88c6:	51 26       	eor	r5, r17
    88c8:	62 26       	eor	r6, r18
    88ca:	73 26       	eor	r7, r19
    88cc:	73 01       	movw	r14, r6
    88ce:	62 01       	movw	r12, r4
    88d0:	c8 26       	eor	r12, r24
    88d2:	d9 26       	eor	r13, r25
    88d4:	ea 26       	eor	r14, r26
    88d6:	fb 26       	eor	r15, r27
    88d8:	2a 01       	movw	r4, r20
    88da:	3b 01       	movw	r6, r22
    88dc:	4c 0c       	add	r4, r12
    88de:	5d 1c       	adc	r5, r13
    88e0:	6e 1c       	adc	r6, r14
    88e2:	7f 1c       	adc	r7, r15
    88e4:	73 01       	movw	r14, r6
    88e6:	62 01       	movw	r12, r4
    88e8:	cc 0c       	add	r12, r12
    88ea:	dd 1c       	adc	r13, r13
    88ec:	ee 1c       	adc	r14, r14
    88ee:	ff 1c       	adc	r15, r15
    88f0:	cc 0c       	add	r12, r12
    88f2:	dd 1c       	adc	r13, r13
    88f4:	ee 1c       	adc	r14, r14
    88f6:	ff 1c       	adc	r15, r15
    88f8:	cc 0c       	add	r12, r12
    88fa:	dd 1c       	adc	r13, r13
    88fc:	ee 1c       	adc	r14, r14
    88fe:	ff 1c       	adc	r15, r15
    8900:	cc 0c       	add	r12, r12
    8902:	dd 1c       	adc	r13, r13
    8904:	ee 1c       	adc	r14, r14
    8906:	ff 1c       	adc	r15, r15
    8908:	03 2e       	mov	r0, r19
    890a:	3c e1       	ldi	r19, 0x1C	; 28
    890c:	76 94       	lsr	r7
    890e:	67 94       	ror	r6
    8910:	57 94       	ror	r5
    8912:	47 94       	ror	r4
    8914:	3a 95       	dec	r19
    8916:	d1 f7       	brne	.-12     	; 0x890c <__stack+0x70d>
    8918:	30 2d       	mov	r19, r0
    891a:	4c 28       	or	r4, r12
    891c:	5d 28       	or	r5, r13
    891e:	6e 28       	or	r6, r14
    8920:	7f 28       	or	r7, r15
    8922:	48 0e       	add	r4, r24
    8924:	59 1e       	adc	r5, r25
    8926:	6a 1e       	adc	r6, r26
    8928:	7b 1e       	adc	r7, r27
    892a:	49 85       	ldd	r20, Y+9	; 0x09
    892c:	5a 85       	ldd	r21, Y+10	; 0x0a
    892e:	6b 85       	ldd	r22, Y+11	; 0x0b
    8930:	7c 85       	ldd	r23, Y+12	; 0x0c
    8932:	46 50       	subi	r20, 0x06	; 6
    8934:	58 4d       	sbci	r21, 0xD8	; 216
    8936:	6e 45       	sbci	r22, 0x5E	; 94
    8938:	75 41       	sbci	r23, 0x15	; 21
    893a:	04 0f       	add	r16, r20
    893c:	15 1f       	adc	r17, r21
    893e:	26 1f       	adc	r18, r22
    8940:	37 1f       	adc	r19, r23
    8942:	ac 01       	movw	r20, r24
    8944:	bd 01       	movw	r22, r26
    8946:	48 25       	eor	r20, r8
    8948:	59 25       	eor	r21, r9
    894a:	6a 25       	eor	r22, r10
    894c:	7b 25       	eor	r23, r11
    894e:	6a 01       	movw	r12, r20
    8950:	7b 01       	movw	r14, r22
    8952:	c4 24       	eor	r12, r4
    8954:	d5 24       	eor	r13, r5
    8956:	e6 24       	eor	r14, r6
    8958:	f7 24       	eor	r15, r7
    895a:	b9 01       	movw	r22, r18
    895c:	a8 01       	movw	r20, r16
    895e:	4c 0d       	add	r20, r12
    8960:	5d 1d       	adc	r21, r13
    8962:	6e 1d       	adc	r22, r14
    8964:	7f 1d       	adc	r23, r15
    8966:	6a 01       	movw	r12, r20
    8968:	7b 01       	movw	r14, r22
    896a:	0b 2e       	mov	r0, r27
    896c:	bb e0       	ldi	r27, 0x0B	; 11
    896e:	cc 0c       	add	r12, r12
    8970:	dd 1c       	adc	r13, r13
    8972:	ee 1c       	adc	r14, r14
    8974:	ff 1c       	adc	r15, r15
    8976:	ba 95       	dec	r27
    8978:	d1 f7       	brne	.-12     	; 0x896e <__stack+0x76f>
    897a:	b0 2d       	mov	r27, r0
    897c:	03 2e       	mov	r0, r19
    897e:	35 e1       	ldi	r19, 0x15	; 21
    8980:	76 95       	lsr	r23
    8982:	67 95       	ror	r22
    8984:	57 95       	ror	r21
    8986:	47 95       	ror	r20
    8988:	3a 95       	dec	r19
    898a:	d1 f7       	brne	.-12     	; 0x8980 <__stack+0x781>
    898c:	30 2d       	mov	r19, r0
    898e:	4c 29       	or	r20, r12
    8990:	5d 29       	or	r21, r13
    8992:	6e 29       	or	r22, r14
    8994:	7f 29       	or	r23, r15
    8996:	44 0d       	add	r20, r4
    8998:	55 1d       	adc	r21, r5
    899a:	66 1d       	adc	r22, r6
    899c:	77 1d       	adc	r23, r7
    899e:	0d 89       	ldd	r16, Y+21	; 0x15
    89a0:	1e 89       	ldd	r17, Y+22	; 0x16
    89a2:	2f 89       	ldd	r18, Y+23	; 0x17
    89a4:	38 8d       	ldd	r19, Y+24	; 0x18
    89a6:	0b 57       	subi	r16, 0x7B	; 123
    89a8:	1f 4c       	sbci	r17, 0xCF	; 207
    89aa:	20 41       	sbci	r18, 0x10	; 16
    89ac:	3b 42       	sbci	r19, 0x2B	; 43
    89ae:	80 0e       	add	r8, r16
    89b0:	91 1e       	adc	r9, r17
    89b2:	a2 1e       	adc	r10, r18
    89b4:	b3 1e       	adc	r11, r19
    89b6:	93 01       	movw	r18, r6
    89b8:	82 01       	movw	r16, r4
    89ba:	08 27       	eor	r16, r24
    89bc:	19 27       	eor	r17, r25
    89be:	2a 27       	eor	r18, r26
    89c0:	3b 27       	eor	r19, r27
    89c2:	04 27       	eor	r16, r20
    89c4:	15 27       	eor	r17, r21
    89c6:	26 27       	eor	r18, r22
    89c8:	37 27       	eor	r19, r23
    89ca:	80 0e       	add	r8, r16
    89cc:	91 1e       	adc	r9, r17
    89ce:	a2 1e       	adc	r10, r18
    89d0:	b3 1e       	adc	r11, r19
    89d2:	64 01       	movw	r12, r8
    89d4:	45 01       	movw	r8, r10
    89d6:	56 01       	movw	r10, r12
    89d8:	84 0e       	add	r8, r20
    89da:	95 1e       	adc	r9, r21
    89dc:	a6 1e       	adc	r10, r22
    89de:	b7 1e       	adc	r11, r23
    89e0:	c9 a0       	ldd	r12, Y+33	; 0x21
    89e2:	da a0       	ldd	r13, Y+34	; 0x22
    89e4:	eb a0       	ldd	r14, Y+35	; 0x23
    89e6:	fc a0       	ldd	r15, Y+36	; 0x24
    89e8:	0b ef       	ldi	r16, 0xFB	; 251
    89ea:	c0 1a       	sub	r12, r16
    89ec:	02 ee       	ldi	r16, 0xE2	; 226
    89ee:	d0 0a       	sbc	r13, r16
    89f0:	07 e7       	ldi	r16, 0x77	; 119
    89f2:	e0 0a       	sbc	r14, r16
    89f4:	0b ef       	ldi	r16, 0xFB	; 251
    89f6:	f0 0a       	sbc	r15, r16
    89f8:	8c 0d       	add	r24, r12
    89fa:	9d 1d       	adc	r25, r13
    89fc:	ae 1d       	adc	r26, r14
    89fe:	bf 1d       	adc	r27, r15
    8a00:	6a 01       	movw	r12, r20
    8a02:	7b 01       	movw	r14, r22
    8a04:	c4 24       	eor	r12, r4
    8a06:	d5 24       	eor	r13, r5
    8a08:	e6 24       	eor	r14, r6
    8a0a:	f7 24       	eor	r15, r7
    8a0c:	97 01       	movw	r18, r14
    8a0e:	86 01       	movw	r16, r12
    8a10:	08 25       	eor	r16, r8
    8a12:	19 25       	eor	r17, r9
    8a14:	2a 25       	eor	r18, r10
    8a16:	3b 25       	eor	r19, r11
    8a18:	6c 01       	movw	r12, r24
    8a1a:	7d 01       	movw	r14, r26
    8a1c:	c0 0e       	add	r12, r16
    8a1e:	d1 1e       	adc	r13, r17
    8a20:	e2 1e       	adc	r14, r18
    8a22:	f3 1e       	adc	r15, r19
    8a24:	97 01       	movw	r18, r14
    8a26:	86 01       	movw	r16, r12
    8a28:	0f 2e       	mov	r0, r31
    8a2a:	f9 e0       	ldi	r31, 0x09	; 9
    8a2c:	36 95       	lsr	r19
    8a2e:	27 95       	ror	r18
    8a30:	17 95       	ror	r17
    8a32:	07 95       	ror	r16
    8a34:	fa 95       	dec	r31
    8a36:	d1 f7       	brne	.-12     	; 0x8a2c <__stack+0x82d>
    8a38:	f0 2d       	mov	r31, r0
    8a3a:	0b 2e       	mov	r0, r27
    8a3c:	b7 e1       	ldi	r27, 0x17	; 23
    8a3e:	cc 0c       	add	r12, r12
    8a40:	dd 1c       	adc	r13, r13
    8a42:	ee 1c       	adc	r14, r14
    8a44:	ff 1c       	adc	r15, r15
    8a46:	ba 95       	dec	r27
    8a48:	d1 f7       	brne	.-12     	; 0x8a3e <__stack+0x83f>
    8a4a:	b0 2d       	mov	r27, r0
    8a4c:	c0 2a       	or	r12, r16
    8a4e:	d1 2a       	or	r13, r17
    8a50:	e2 2a       	or	r14, r18
    8a52:	f3 2a       	or	r15, r19
    8a54:	c8 0c       	add	r12, r8
    8a56:	d9 1c       	adc	r13, r9
    8a58:	ea 1c       	adc	r14, r10
    8a5a:	fb 1c       	adc	r15, r11
    8a5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    8a5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    8a60:	af a5       	ldd	r26, Y+47	; 0x2f
    8a62:	b8 a9       	ldd	r27, Y+48	; 0x30
    8a64:	87 5c       	subi	r24, 0xC7	; 199
    8a66:	9f 42       	sbci	r25, 0x2F	; 47
    8a68:	ab 42       	sbci	r26, 0x2B	; 43
    8a6a:	b6 42       	sbci	r27, 0x26	; 38
    8a6c:	48 0e       	add	r4, r24
    8a6e:	59 1e       	adc	r5, r25
    8a70:	6a 1e       	adc	r6, r26
    8a72:	7b 1e       	adc	r7, r27
    8a74:	95 01       	movw	r18, r10
    8a76:	84 01       	movw	r16, r8
    8a78:	04 27       	eor	r16, r20
    8a7a:	15 27       	eor	r17, r21
    8a7c:	26 27       	eor	r18, r22
    8a7e:	37 27       	eor	r19, r23
    8a80:	0c 25       	eor	r16, r12
    8a82:	1d 25       	eor	r17, r13
    8a84:	2e 25       	eor	r18, r14
    8a86:	3f 25       	eor	r19, r15
    8a88:	40 0e       	add	r4, r16
    8a8a:	51 1e       	adc	r5, r17
    8a8c:	62 1e       	adc	r6, r18
    8a8e:	73 1e       	adc	r7, r19
    8a90:	93 01       	movw	r18, r6
    8a92:	82 01       	movw	r16, r4
    8a94:	00 0f       	add	r16, r16
    8a96:	11 1f       	adc	r17, r17
    8a98:	22 1f       	adc	r18, r18
    8a9a:	33 1f       	adc	r19, r19
    8a9c:	00 0f       	add	r16, r16
    8a9e:	11 1f       	adc	r17, r17
    8aa0:	22 1f       	adc	r18, r18
    8aa2:	33 1f       	adc	r19, r19
    8aa4:	00 0f       	add	r16, r16
    8aa6:	11 1f       	adc	r17, r17
    8aa8:	22 1f       	adc	r18, r18
    8aaa:	33 1f       	adc	r19, r19
    8aac:	00 0f       	add	r16, r16
    8aae:	11 1f       	adc	r17, r17
    8ab0:	22 1f       	adc	r18, r18
    8ab2:	33 1f       	adc	r19, r19
    8ab4:	03 2e       	mov	r0, r19
    8ab6:	3c e1       	ldi	r19, 0x1C	; 28
    8ab8:	76 94       	lsr	r7
    8aba:	67 94       	ror	r6
    8abc:	57 94       	ror	r5
    8abe:	47 94       	ror	r4
    8ac0:	3a 95       	dec	r19
    8ac2:	d1 f7       	brne	.-12     	; 0x8ab8 <__stack+0x8b9>
    8ac4:	30 2d       	mov	r19, r0
    8ac6:	40 2a       	or	r4, r16
    8ac8:	51 2a       	or	r5, r17
    8aca:	62 2a       	or	r6, r18
    8acc:	73 2a       	or	r7, r19
    8ace:	4c 0c       	add	r4, r12
    8ad0:	5d 1c       	adc	r5, r13
    8ad2:	6e 1c       	adc	r6, r14
    8ad4:	7f 1c       	adc	r7, r15
    8ad6:	89 ad       	ldd	r24, Y+57	; 0x39
    8ad8:	9a ad       	ldd	r25, Y+58	; 0x3a
    8ada:	ab ad       	ldd	r26, Y+59	; 0x3b
    8adc:	bc ad       	ldd	r27, Y+60	; 0x3c
    8ade:	8b 51       	subi	r24, 0x1B	; 27
    8ae0:	96 46       	sbci	r25, 0x66	; 102
    8ae2:	a4 42       	sbci	r26, 0x24	; 36
    8ae4:	b9 41       	sbci	r27, 0x19	; 25
    8ae6:	48 0f       	add	r20, r24
    8ae8:	59 1f       	adc	r21, r25
    8aea:	6a 1f       	adc	r22, r26
    8aec:	7b 1f       	adc	r23, r27
    8aee:	d7 01       	movw	r26, r14
    8af0:	c6 01       	movw	r24, r12
    8af2:	88 25       	eor	r24, r8
    8af4:	99 25       	eor	r25, r9
    8af6:	aa 25       	eor	r26, r10
    8af8:	bb 25       	eor	r27, r11
    8afa:	84 25       	eor	r24, r4
    8afc:	95 25       	eor	r25, r5
    8afe:	a6 25       	eor	r26, r6
    8b00:	b7 25       	eor	r27, r7
    8b02:	48 0f       	add	r20, r24
    8b04:	59 1f       	adc	r21, r25
    8b06:	6a 1f       	adc	r22, r26
    8b08:	7b 1f       	adc	r23, r27
    8b0a:	db 01       	movw	r26, r22
    8b0c:	ca 01       	movw	r24, r20
    8b0e:	07 2e       	mov	r0, r23
    8b10:	7b e0       	ldi	r23, 0x0B	; 11
    8b12:	88 0f       	add	r24, r24
    8b14:	99 1f       	adc	r25, r25
    8b16:	aa 1f       	adc	r26, r26
    8b18:	bb 1f       	adc	r27, r27
    8b1a:	7a 95       	dec	r23
    8b1c:	d1 f7       	brne	.-12     	; 0x8b12 <__stack+0x913>
    8b1e:	70 2d       	mov	r23, r0
    8b20:	03 2e       	mov	r0, r19
    8b22:	35 e1       	ldi	r19, 0x15	; 21
    8b24:	76 95       	lsr	r23
    8b26:	67 95       	ror	r22
    8b28:	57 95       	ror	r21
    8b2a:	47 95       	ror	r20
    8b2c:	3a 95       	dec	r19
    8b2e:	d1 f7       	brne	.-12     	; 0x8b24 <__stack+0x925>
    8b30:	30 2d       	mov	r19, r0
    8b32:	48 2b       	or	r20, r24
    8b34:	59 2b       	or	r21, r25
    8b36:	6a 2b       	or	r22, r26
    8b38:	7b 2b       	or	r23, r27
    8b3a:	44 0d       	add	r20, r4
    8b3c:	55 1d       	adc	r21, r5
    8b3e:	66 1d       	adc	r22, r6
    8b40:	77 1d       	adc	r23, r7
    8b42:	29 96       	adiw	r28, 0x09	; 9
    8b44:	8c ad       	ldd	r24, Y+60	; 0x3c
    8b46:	9d ad       	ldd	r25, Y+61	; 0x3d
    8b48:	ae ad       	ldd	r26, Y+62	; 0x3e
    8b4a:	bf ad       	ldd	r27, Y+63	; 0x3f
    8b4c:	29 97       	sbiw	r28, 0x09	; 9
    8b4e:	88 50       	subi	r24, 0x08	; 8
    8b50:	93 48       	sbci	r25, 0x83	; 131
    8b52:	ad 45       	sbci	r26, 0x5D	; 93
    8b54:	b0 4e       	sbci	r27, 0xE0	; 224
    8b56:	88 0e       	add	r8, r24
    8b58:	99 1e       	adc	r9, r25
    8b5a:	aa 1e       	adc	r10, r26
    8b5c:	bb 1e       	adc	r11, r27
    8b5e:	d3 01       	movw	r26, r6
    8b60:	c2 01       	movw	r24, r4
    8b62:	8c 25       	eor	r24, r12
    8b64:	9d 25       	eor	r25, r13
    8b66:	ae 25       	eor	r26, r14
    8b68:	bf 25       	eor	r27, r15
    8b6a:	84 27       	eor	r24, r20
    8b6c:	95 27       	eor	r25, r21
    8b6e:	a6 27       	eor	r26, r22
    8b70:	b7 27       	eor	r27, r23
    8b72:	88 0e       	add	r8, r24
    8b74:	99 1e       	adc	r9, r25
    8b76:	aa 1e       	adc	r10, r26
    8b78:	bb 1e       	adc	r11, r27
    8b7a:	94 01       	movw	r18, r8
    8b7c:	45 01       	movw	r8, r10
    8b7e:	59 01       	movw	r10, r18
    8b80:	84 0e       	add	r8, r20
    8b82:	95 1e       	adc	r9, r21
    8b84:	a6 1e       	adc	r10, r22
    8b86:	b7 1e       	adc	r11, r23
    8b88:	89 89       	ldd	r24, Y+17	; 0x11
    8b8a:	9a 89       	ldd	r25, Y+18	; 0x12
    8b8c:	ab 89       	ldd	r26, Y+19	; 0x13
    8b8e:	bc 89       	ldd	r27, Y+20	; 0x14
    8b90:	8b 59       	subi	r24, 0x9B	; 155
    8b92:	99 4a       	sbci	r25, 0xA9	; 169
    8b94:	a3 45       	sbci	r26, 0x53	; 83
    8b96:	bb 43       	sbci	r27, 0x3B	; 59
    8b98:	c8 0e       	add	r12, r24
    8b9a:	d9 1e       	adc	r13, r25
    8b9c:	ea 1e       	adc	r14, r26
    8b9e:	fb 1e       	adc	r15, r27
    8ba0:	8a 01       	movw	r16, r20
    8ba2:	9b 01       	movw	r18, r22
    8ba4:	04 25       	eor	r16, r4
    8ba6:	15 25       	eor	r17, r5
    8ba8:	26 25       	eor	r18, r6
    8baa:	37 25       	eor	r19, r7
    8bac:	08 25       	eor	r16, r8
    8bae:	19 25       	eor	r17, r9
    8bb0:	2a 25       	eor	r18, r10
    8bb2:	3b 25       	eor	r19, r11
    8bb4:	c0 0e       	add	r12, r16
    8bb6:	d1 1e       	adc	r13, r17
    8bb8:	e2 1e       	adc	r14, r18
    8bba:	f3 1e       	adc	r15, r19
    8bbc:	97 01       	movw	r18, r14
    8bbe:	86 01       	movw	r16, r12
    8bc0:	0f 2e       	mov	r0, r31
    8bc2:	f9 e0       	ldi	r31, 0x09	; 9
    8bc4:	36 95       	lsr	r19
    8bc6:	27 95       	ror	r18
    8bc8:	17 95       	ror	r17
    8bca:	07 95       	ror	r16
    8bcc:	fa 95       	dec	r31
    8bce:	d1 f7       	brne	.-12     	; 0x8bc4 <__stack+0x9c5>
    8bd0:	f0 2d       	mov	r31, r0
    8bd2:	0b 2e       	mov	r0, r27
    8bd4:	b7 e1       	ldi	r27, 0x17	; 23
    8bd6:	cc 0c       	add	r12, r12
    8bd8:	dd 1c       	adc	r13, r13
    8bda:	ee 1c       	adc	r14, r14
    8bdc:	ff 1c       	adc	r15, r15
    8bde:	ba 95       	dec	r27
    8be0:	d1 f7       	brne	.-12     	; 0x8bd6 <__stack+0x9d7>
    8be2:	b0 2d       	mov	r27, r0
    8be4:	c0 2a       	or	r12, r16
    8be6:	d1 2a       	or	r13, r17
    8be8:	e2 2a       	or	r14, r18
    8bea:	f3 2a       	or	r15, r19
    8bec:	c8 0c       	add	r12, r8
    8bee:	d9 1c       	adc	r13, r9
    8bf0:	ea 1c       	adc	r14, r10
    8bf2:	fb 1c       	adc	r15, r11
    8bf4:	89 85       	ldd	r24, Y+9	; 0x09
    8bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    8bf8:	ab 85       	ldd	r26, Y+11	; 0x0b
    8bfa:	bc 85       	ldd	r27, Y+12	; 0x0c
    8bfc:	8c 5b       	subi	r24, 0xBC	; 188
    8bfe:	9d 4d       	sbci	r25, 0xDD	; 221
    8c00:	a6 4d       	sbci	r26, 0xD6	; 214
    8c02:	bb 40       	sbci	r27, 0x0B	; 11
    8c04:	48 0e       	add	r4, r24
    8c06:	59 1e       	adc	r5, r25
    8c08:	6a 1e       	adc	r6, r26
    8c0a:	7b 1e       	adc	r7, r27
    8c0c:	db 01       	movw	r26, r22
    8c0e:	ca 01       	movw	r24, r20
    8c10:	80 95       	com	r24
    8c12:	90 95       	com	r25
    8c14:	a0 95       	com	r26
    8c16:	b0 95       	com	r27
    8c18:	8c 29       	or	r24, r12
    8c1a:	9d 29       	or	r25, r13
    8c1c:	ae 29       	or	r26, r14
    8c1e:	bf 29       	or	r27, r15
    8c20:	8c 01       	movw	r16, r24
    8c22:	9d 01       	movw	r18, r26
    8c24:	08 25       	eor	r16, r8
    8c26:	19 25       	eor	r17, r9
    8c28:	2a 25       	eor	r18, r10
    8c2a:	3b 25       	eor	r19, r11
    8c2c:	d3 01       	movw	r26, r6
    8c2e:	c2 01       	movw	r24, r4
    8c30:	80 0f       	add	r24, r16
    8c32:	91 1f       	adc	r25, r17
    8c34:	a2 1f       	adc	r26, r18
    8c36:	b3 1f       	adc	r27, r19
    8c38:	8c 01       	movw	r16, r24
    8c3a:	9d 01       	movw	r18, r26
    8c3c:	00 0f       	add	r16, r16
    8c3e:	11 1f       	adc	r17, r17
    8c40:	22 1f       	adc	r18, r18
    8c42:	33 1f       	adc	r19, r19
    8c44:	00 0f       	add	r16, r16
    8c46:	11 1f       	adc	r17, r17
    8c48:	22 1f       	adc	r18, r18
    8c4a:	33 1f       	adc	r19, r19
    8c4c:	00 0f       	add	r16, r16
    8c4e:	11 1f       	adc	r17, r17
    8c50:	22 1f       	adc	r18, r18
    8c52:	33 1f       	adc	r19, r19
    8c54:	00 0f       	add	r16, r16
    8c56:	11 1f       	adc	r17, r17
    8c58:	22 1f       	adc	r18, r18
    8c5a:	33 1f       	adc	r19, r19
    8c5c:	00 0f       	add	r16, r16
    8c5e:	11 1f       	adc	r17, r17
    8c60:	22 1f       	adc	r18, r18
    8c62:	33 1f       	adc	r19, r19
    8c64:	00 0f       	add	r16, r16
    8c66:	11 1f       	adc	r17, r17
    8c68:	22 1f       	adc	r18, r18
    8c6a:	33 1f       	adc	r19, r19
    8c6c:	07 2e       	mov	r0, r23
    8c6e:	7a e1       	ldi	r23, 0x1A	; 26
    8c70:	b6 95       	lsr	r27
    8c72:	a7 95       	ror	r26
    8c74:	97 95       	ror	r25
    8c76:	87 95       	ror	r24
    8c78:	7a 95       	dec	r23
    8c7a:	d1 f7       	brne	.-12     	; 0x8c70 <__stack+0xa71>
    8c7c:	70 2d       	mov	r23, r0
    8c7e:	80 2b       	or	r24, r16
    8c80:	91 2b       	or	r25, r17
    8c82:	a2 2b       	or	r26, r18
    8c84:	b3 2b       	or	r27, r19
    8c86:	8c 0d       	add	r24, r12
    8c88:	9d 1d       	adc	r25, r13
    8c8a:	ae 1d       	adc	r26, r14
    8c8c:	bf 1d       	adc	r27, r15
    8c8e:	0d a1       	ldd	r16, Y+37	; 0x25
    8c90:	1e a1       	ldd	r17, Y+38	; 0x26
    8c92:	2f a1       	ldd	r18, Y+39	; 0x27
    8c94:	38 a5       	ldd	r19, Y+40	; 0x28
    8c96:	09 56       	subi	r16, 0x69	; 105
    8c98:	11 09       	sbc	r17, r1
    8c9a:	25 4d       	sbci	r18, 0xD5	; 213
    8c9c:	3c 4b       	sbci	r19, 0xBC	; 188
    8c9e:	40 0f       	add	r20, r16
    8ca0:	51 1f       	adc	r21, r17
    8ca2:	62 1f       	adc	r22, r18
    8ca4:	73 1f       	adc	r23, r19
    8ca6:	95 01       	movw	r18, r10
    8ca8:	84 01       	movw	r16, r8
    8caa:	00 95       	com	r16
    8cac:	10 95       	com	r17
    8cae:	20 95       	com	r18
    8cb0:	30 95       	com	r19
    8cb2:	08 2b       	or	r16, r24
    8cb4:	19 2b       	or	r17, r25
    8cb6:	2a 2b       	or	r18, r26
    8cb8:	3b 2b       	or	r19, r27
    8cba:	0c 25       	eor	r16, r12
    8cbc:	1d 25       	eor	r17, r13
    8cbe:	2e 25       	eor	r18, r14
    8cc0:	3f 25       	eor	r19, r15
    8cc2:	40 0f       	add	r20, r16
    8cc4:	51 1f       	adc	r21, r17
    8cc6:	62 1f       	adc	r22, r18
    8cc8:	73 1f       	adc	r23, r19
    8cca:	8a 01       	movw	r16, r20
    8ccc:	9b 01       	movw	r18, r22
    8cce:	0f 2e       	mov	r0, r31
    8cd0:	fa e0       	ldi	r31, 0x0A	; 10
    8cd2:	00 0f       	add	r16, r16
    8cd4:	11 1f       	adc	r17, r17
    8cd6:	22 1f       	adc	r18, r18
    8cd8:	33 1f       	adc	r19, r19
    8cda:	fa 95       	dec	r31
    8cdc:	d1 f7       	brne	.-12     	; 0x8cd2 <__stack+0xad3>
    8cde:	f0 2d       	mov	r31, r0
    8ce0:	03 2e       	mov	r0, r19
    8ce2:	36 e1       	ldi	r19, 0x16	; 22
    8ce4:	76 95       	lsr	r23
    8ce6:	67 95       	ror	r22
    8ce8:	57 95       	ror	r21
    8cea:	47 95       	ror	r20
    8cec:	3a 95       	dec	r19
    8cee:	d1 f7       	brne	.-12     	; 0x8ce4 <__stack+0xae5>
    8cf0:	30 2d       	mov	r19, r0
    8cf2:	40 2b       	or	r20, r16
    8cf4:	51 2b       	or	r21, r17
    8cf6:	62 2b       	or	r22, r18
    8cf8:	73 2b       	or	r23, r19
    8cfa:	48 0f       	add	r20, r24
    8cfc:	59 1f       	adc	r21, r25
    8cfe:	6a 1f       	adc	r22, r26
    8d00:	7b 1f       	adc	r23, r27
    8d02:	25 96       	adiw	r28, 0x05	; 5
    8d04:	0c ad       	ldd	r16, Y+60	; 0x3c
    8d06:	1d ad       	ldd	r17, Y+61	; 0x3d
    8d08:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d0a:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d0c:	25 97       	sbiw	r28, 0x05	; 5
    8d0e:	09 55       	subi	r16, 0x59	; 89
    8d10:	1c 4d       	sbci	r17, 0xDC	; 220
    8d12:	2b 46       	sbci	r18, 0x6B	; 107
    8d14:	34 45       	sbci	r19, 0x54	; 84
    8d16:	80 0e       	add	r8, r16
    8d18:	91 1e       	adc	r9, r17
    8d1a:	a2 1e       	adc	r10, r18
    8d1c:	b3 1e       	adc	r11, r19
    8d1e:	26 01       	movw	r4, r12
    8d20:	37 01       	movw	r6, r14
    8d22:	40 94       	com	r4
    8d24:	50 94       	com	r5
    8d26:	60 94       	com	r6
    8d28:	70 94       	com	r7
    8d2a:	44 2a       	or	r4, r20
    8d2c:	55 2a       	or	r5, r21
    8d2e:	66 2a       	or	r6, r22
    8d30:	77 2a       	or	r7, r23
    8d32:	48 26       	eor	r4, r24
    8d34:	59 26       	eor	r5, r25
    8d36:	6a 26       	eor	r6, r26
    8d38:	7b 26       	eor	r7, r27
    8d3a:	84 0c       	add	r8, r4
    8d3c:	95 1c       	adc	r9, r5
    8d3e:	a6 1c       	adc	r10, r6
    8d40:	b7 1c       	adc	r11, r7
    8d42:	24 01       	movw	r4, r8
    8d44:	35 01       	movw	r6, r10
    8d46:	03 2e       	mov	r0, r19
    8d48:	3f e0       	ldi	r19, 0x0F	; 15
    8d4a:	44 0c       	add	r4, r4
    8d4c:	55 1c       	adc	r5, r5
    8d4e:	66 1c       	adc	r6, r6
    8d50:	77 1c       	adc	r7, r7
    8d52:	3a 95       	dec	r19
    8d54:	d1 f7       	brne	.-12     	; 0x8d4a <__stack+0xb4b>
    8d56:	30 2d       	mov	r19, r0
    8d58:	07 2e       	mov	r0, r23
    8d5a:	71 e1       	ldi	r23, 0x11	; 17
    8d5c:	b6 94       	lsr	r11
    8d5e:	a7 94       	ror	r10
    8d60:	97 94       	ror	r9
    8d62:	87 94       	ror	r8
    8d64:	7a 95       	dec	r23
    8d66:	d1 f7       	brne	.-12     	; 0x8d5c <__stack+0xb5d>
    8d68:	70 2d       	mov	r23, r0
    8d6a:	84 28       	or	r8, r4
    8d6c:	95 28       	or	r9, r5
    8d6e:	a6 28       	or	r10, r6
    8d70:	b7 28       	or	r11, r7
    8d72:	84 0e       	add	r8, r20
    8d74:	95 1e       	adc	r9, r21
    8d76:	a6 1e       	adc	r10, r22
    8d78:	b7 1e       	adc	r11, r23
    8d7a:	0d 8d       	ldd	r16, Y+29	; 0x1d
    8d7c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    8d7e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    8d80:	38 a1       	ldd	r19, Y+32	; 0x20
    8d82:	07 5c       	subi	r16, 0xC7	; 199
    8d84:	1f 45       	sbci	r17, 0x5F	; 95
    8d86:	2c 46       	sbci	r18, 0x6C	; 108
    8d88:	33 40       	sbci	r19, 0x03	; 3
    8d8a:	c0 0e       	add	r12, r16
    8d8c:	d1 1e       	adc	r13, r17
    8d8e:	e2 1e       	adc	r14, r18
    8d90:	f3 1e       	adc	r15, r19
    8d92:	8c 01       	movw	r16, r24
    8d94:	9d 01       	movw	r18, r26
    8d96:	00 95       	com	r16
    8d98:	10 95       	com	r17
    8d9a:	20 95       	com	r18
    8d9c:	30 95       	com	r19
    8d9e:	08 29       	or	r16, r8
    8da0:	19 29       	or	r17, r9
    8da2:	2a 29       	or	r18, r10
    8da4:	3b 29       	or	r19, r11
    8da6:	04 27       	eor	r16, r20
    8da8:	15 27       	eor	r17, r21
    8daa:	26 27       	eor	r18, r22
    8dac:	37 27       	eor	r19, r23
    8dae:	c0 0e       	add	r12, r16
    8db0:	d1 1e       	adc	r13, r17
    8db2:	e2 1e       	adc	r14, r18
    8db4:	f3 1e       	adc	r15, r19
    8db6:	97 01       	movw	r18, r14
    8db8:	86 01       	movw	r16, r12
    8dba:	0f 2e       	mov	r0, r31
    8dbc:	fb e0       	ldi	r31, 0x0B	; 11
    8dbe:	36 95       	lsr	r19
    8dc0:	27 95       	ror	r18
    8dc2:	17 95       	ror	r17
    8dc4:	07 95       	ror	r16
    8dc6:	fa 95       	dec	r31
    8dc8:	d1 f7       	brne	.-12     	; 0x8dbe <__stack+0xbbf>
    8dca:	f0 2d       	mov	r31, r0
    8dcc:	0b 2e       	mov	r0, r27
    8dce:	b5 e1       	ldi	r27, 0x15	; 21
    8dd0:	cc 0c       	add	r12, r12
    8dd2:	dd 1c       	adc	r13, r13
    8dd4:	ee 1c       	adc	r14, r14
    8dd6:	ff 1c       	adc	r15, r15
    8dd8:	ba 95       	dec	r27
    8dda:	d1 f7       	brne	.-12     	; 0x8dd0 <__stack+0xbd1>
    8ddc:	b0 2d       	mov	r27, r0
    8dde:	c0 2a       	or	r12, r16
    8de0:	d1 2a       	or	r13, r17
    8de2:	e2 2a       	or	r14, r18
    8de4:	f3 2a       	or	r15, r19
    8de6:	c8 0c       	add	r12, r8
    8de8:	d9 1c       	adc	r13, r9
    8dea:	ea 1c       	adc	r14, r10
    8dec:	fb 1c       	adc	r15, r11
    8dee:	09 ad       	ldd	r16, Y+57	; 0x39
    8df0:	1a ad       	ldd	r17, Y+58	; 0x3a
    8df2:	2b ad       	ldd	r18, Y+59	; 0x3b
    8df4:	3c ad       	ldd	r19, Y+60	; 0x3c
    8df6:	0d 53       	subi	r16, 0x3D	; 61
    8df8:	16 4a       	sbci	r17, 0xA6	; 166
    8dfa:	24 4a       	sbci	r18, 0xA4	; 164
    8dfc:	3a 49       	sbci	r19, 0x9A	; 154
    8dfe:	80 0f       	add	r24, r16
    8e00:	91 1f       	adc	r25, r17
    8e02:	a2 1f       	adc	r26, r18
    8e04:	b3 1f       	adc	r27, r19
    8e06:	2a 01       	movw	r4, r20
    8e08:	3b 01       	movw	r6, r22
    8e0a:	40 94       	com	r4
    8e0c:	50 94       	com	r5
    8e0e:	60 94       	com	r6
    8e10:	70 94       	com	r7
    8e12:	4c 28       	or	r4, r12
    8e14:	5d 28       	or	r5, r13
    8e16:	6e 28       	or	r6, r14
    8e18:	7f 28       	or	r7, r15
    8e1a:	48 24       	eor	r4, r8
    8e1c:	59 24       	eor	r5, r9
    8e1e:	6a 24       	eor	r6, r10
    8e20:	7b 24       	eor	r7, r11
    8e22:	84 0d       	add	r24, r4
    8e24:	95 1d       	adc	r25, r5
    8e26:	a6 1d       	adc	r26, r6
    8e28:	b7 1d       	adc	r27, r7
    8e2a:	8c 01       	movw	r16, r24
    8e2c:	9d 01       	movw	r18, r26
    8e2e:	00 0f       	add	r16, r16
    8e30:	11 1f       	adc	r17, r17
    8e32:	22 1f       	adc	r18, r18
    8e34:	33 1f       	adc	r19, r19
    8e36:	00 0f       	add	r16, r16
    8e38:	11 1f       	adc	r17, r17
    8e3a:	22 1f       	adc	r18, r18
    8e3c:	33 1f       	adc	r19, r19
    8e3e:	00 0f       	add	r16, r16
    8e40:	11 1f       	adc	r17, r17
    8e42:	22 1f       	adc	r18, r18
    8e44:	33 1f       	adc	r19, r19
    8e46:	00 0f       	add	r16, r16
    8e48:	11 1f       	adc	r17, r17
    8e4a:	22 1f       	adc	r18, r18
    8e4c:	33 1f       	adc	r19, r19
    8e4e:	00 0f       	add	r16, r16
    8e50:	11 1f       	adc	r17, r17
    8e52:	22 1f       	adc	r18, r18
    8e54:	33 1f       	adc	r19, r19
    8e56:	00 0f       	add	r16, r16
    8e58:	11 1f       	adc	r17, r17
    8e5a:	22 1f       	adc	r18, r18
    8e5c:	33 1f       	adc	r19, r19
    8e5e:	07 2e       	mov	r0, r23
    8e60:	7a e1       	ldi	r23, 0x1A	; 26
    8e62:	b6 95       	lsr	r27
    8e64:	a7 95       	ror	r26
    8e66:	97 95       	ror	r25
    8e68:	87 95       	ror	r24
    8e6a:	7a 95       	dec	r23
    8e6c:	d1 f7       	brne	.-12     	; 0x8e62 <__stack+0xc63>
    8e6e:	70 2d       	mov	r23, r0
    8e70:	80 2b       	or	r24, r16
    8e72:	91 2b       	or	r25, r17
    8e74:	a2 2b       	or	r26, r18
    8e76:	b3 2b       	or	r27, r19
    8e78:	8c 0d       	add	r24, r12
    8e7a:	9d 1d       	adc	r25, r13
    8e7c:	ae 1d       	adc	r26, r14
    8e7e:	bf 1d       	adc	r27, r15
    8e80:	0d 89       	ldd	r16, Y+21	; 0x15
    8e82:	1e 89       	ldd	r17, Y+22	; 0x16
    8e84:	2f 89       	ldd	r18, Y+23	; 0x17
    8e86:	38 8d       	ldd	r19, Y+24	; 0x18
    8e88:	0e 56       	subi	r16, 0x6E	; 110
    8e8a:	13 43       	sbci	r17, 0x33	; 51
    8e8c:	23 4f       	sbci	r18, 0xF3	; 243
    8e8e:	30 47       	sbci	r19, 0x70	; 112
    8e90:	40 0f       	add	r20, r16
    8e92:	51 1f       	adc	r21, r17
    8e94:	62 1f       	adc	r22, r18
    8e96:	73 1f       	adc	r23, r19
    8e98:	95 01       	movw	r18, r10
    8e9a:	84 01       	movw	r16, r8
    8e9c:	00 95       	com	r16
    8e9e:	10 95       	com	r17
    8ea0:	20 95       	com	r18
    8ea2:	30 95       	com	r19
    8ea4:	08 2b       	or	r16, r24
    8ea6:	19 2b       	or	r17, r25
    8ea8:	2a 2b       	or	r18, r26
    8eaa:	3b 2b       	or	r19, r27
    8eac:	0c 25       	eor	r16, r12
    8eae:	1d 25       	eor	r17, r13
    8eb0:	2e 25       	eor	r18, r14
    8eb2:	3f 25       	eor	r19, r15
    8eb4:	40 0f       	add	r20, r16
    8eb6:	51 1f       	adc	r21, r17
    8eb8:	62 1f       	adc	r22, r18
    8eba:	73 1f       	adc	r23, r19
    8ebc:	8a 01       	movw	r16, r20
    8ebe:	9b 01       	movw	r18, r22
    8ec0:	0f 2e       	mov	r0, r31
    8ec2:	fa e0       	ldi	r31, 0x0A	; 10
    8ec4:	00 0f       	add	r16, r16
    8ec6:	11 1f       	adc	r17, r17
    8ec8:	22 1f       	adc	r18, r18
    8eca:	33 1f       	adc	r19, r19
    8ecc:	fa 95       	dec	r31
    8ece:	d1 f7       	brne	.-12     	; 0x8ec4 <__stack+0xcc5>
    8ed0:	f0 2d       	mov	r31, r0
    8ed2:	03 2e       	mov	r0, r19
    8ed4:	36 e1       	ldi	r19, 0x16	; 22
    8ed6:	76 95       	lsr	r23
    8ed8:	67 95       	ror	r22
    8eda:	57 95       	ror	r21
    8edc:	47 95       	ror	r20
    8ede:	3a 95       	dec	r19
    8ee0:	d1 f7       	brne	.-12     	; 0x8ed6 <__stack+0xcd7>
    8ee2:	30 2d       	mov	r19, r0
    8ee4:	40 2b       	or	r20, r16
    8ee6:	51 2b       	or	r21, r17
    8ee8:	62 2b       	or	r22, r18
    8eea:	73 2b       	or	r23, r19
    8eec:	48 0f       	add	r20, r24
    8eee:	59 1f       	adc	r21, r25
    8ef0:	6a 1f       	adc	r22, r26
    8ef2:	7b 1f       	adc	r23, r27
    8ef4:	09 a9       	ldd	r16, Y+49	; 0x31
    8ef6:	1a a9       	ldd	r17, Y+50	; 0x32
    8ef8:	2b a9       	ldd	r18, Y+51	; 0x33
    8efa:	3c a9       	ldd	r19, Y+52	; 0x34
    8efc:	03 58       	subi	r16, 0x83	; 131
    8efe:	1b 40       	sbci	r17, 0x0B	; 11
    8f00:	20 41       	sbci	r18, 0x10	; 16
    8f02:	31 09       	sbc	r19, r1
    8f04:	80 0e       	add	r8, r16
    8f06:	91 1e       	adc	r9, r17
    8f08:	a2 1e       	adc	r10, r18
    8f0a:	b3 1e       	adc	r11, r19
    8f0c:	97 01       	movw	r18, r14
    8f0e:	86 01       	movw	r16, r12
    8f10:	00 95       	com	r16
    8f12:	10 95       	com	r17
    8f14:	20 95       	com	r18
    8f16:	30 95       	com	r19
    8f18:	04 2b       	or	r16, r20
    8f1a:	15 2b       	or	r17, r21
    8f1c:	26 2b       	or	r18, r22
    8f1e:	37 2b       	or	r19, r23
    8f20:	28 01       	movw	r4, r16
    8f22:	39 01       	movw	r6, r18
    8f24:	48 26       	eor	r4, r24
    8f26:	59 26       	eor	r5, r25
    8f28:	6a 26       	eor	r6, r26
    8f2a:	7b 26       	eor	r7, r27
    8f2c:	95 01       	movw	r18, r10
    8f2e:	84 01       	movw	r16, r8
    8f30:	04 0d       	add	r16, r4
    8f32:	15 1d       	adc	r17, r5
    8f34:	26 1d       	adc	r18, r6
    8f36:	37 1d       	adc	r19, r7
    8f38:	28 01       	movw	r4, r16
    8f3a:	39 01       	movw	r6, r18
    8f3c:	03 2e       	mov	r0, r19
    8f3e:	3f e0       	ldi	r19, 0x0F	; 15
    8f40:	44 0c       	add	r4, r4
    8f42:	55 1c       	adc	r5, r5
    8f44:	66 1c       	adc	r6, r6
    8f46:	77 1c       	adc	r7, r7
    8f48:	3a 95       	dec	r19
    8f4a:	d1 f7       	brne	.-12     	; 0x8f40 <__stack+0xd41>
    8f4c:	30 2d       	mov	r19, r0
    8f4e:	0f 2e       	mov	r0, r31
    8f50:	f1 e1       	ldi	r31, 0x11	; 17
    8f52:	36 95       	lsr	r19
    8f54:	27 95       	ror	r18
    8f56:	17 95       	ror	r17
    8f58:	07 95       	ror	r16
    8f5a:	fa 95       	dec	r31
    8f5c:	d1 f7       	brne	.-12     	; 0x8f52 <__stack+0xd53>
    8f5e:	f0 2d       	mov	r31, r0
    8f60:	04 29       	or	r16, r4
    8f62:	15 29       	or	r17, r5
    8f64:	26 29       	or	r18, r6
    8f66:	37 29       	or	r19, r7
    8f68:	04 0f       	add	r16, r20
    8f6a:	15 1f       	adc	r17, r21
    8f6c:	26 1f       	adc	r18, r22
    8f6e:	37 1f       	adc	r19, r23
    8f70:	8d 84       	ldd	r8, Y+13	; 0x0d
    8f72:	9e 84       	ldd	r9, Y+14	; 0x0e
    8f74:	af 84       	ldd	r10, Y+15	; 0x0f
    8f76:	b8 88       	ldd	r11, Y+16	; 0x10
    8f78:	ef e2       	ldi	r30, 0x2F	; 47
    8f7a:	8e 1a       	sub	r8, r30
    8f7c:	e2 ea       	ldi	r30, 0xA2	; 162
    8f7e:	9e 0a       	sbc	r9, r30
    8f80:	eb e7       	ldi	r30, 0x7B	; 123
    8f82:	ae 0a       	sbc	r10, r30
    8f84:	ea e7       	ldi	r30, 0x7A	; 122
    8f86:	be 0a       	sbc	r11, r30
    8f88:	c8 0c       	add	r12, r8
    8f8a:	d9 1c       	adc	r13, r9
    8f8c:	ea 1c       	adc	r14, r10
    8f8e:	fb 1c       	adc	r15, r11
    8f90:	4c 01       	movw	r8, r24
    8f92:	5d 01       	movw	r10, r26
    8f94:	80 94       	com	r8
    8f96:	90 94       	com	r9
    8f98:	a0 94       	com	r10
    8f9a:	b0 94       	com	r11
    8f9c:	80 2a       	or	r8, r16
    8f9e:	91 2a       	or	r9, r17
    8fa0:	a2 2a       	or	r10, r18
    8fa2:	b3 2a       	or	r11, r19
    8fa4:	84 26       	eor	r8, r20
    8fa6:	95 26       	eor	r9, r21
    8fa8:	a6 26       	eor	r10, r22
    8faa:	b7 26       	eor	r11, r23
    8fac:	c8 0c       	add	r12, r8
    8fae:	d9 1c       	adc	r13, r9
    8fb0:	ea 1c       	adc	r14, r10
    8fb2:	fb 1c       	adc	r15, r11
    8fb4:	46 01       	movw	r8, r12
    8fb6:	57 01       	movw	r10, r14
    8fb8:	07 2e       	mov	r0, r23
    8fba:	7b e0       	ldi	r23, 0x0B	; 11
    8fbc:	b6 94       	lsr	r11
    8fbe:	a7 94       	ror	r10
    8fc0:	97 94       	ror	r9
    8fc2:	87 94       	ror	r8
    8fc4:	7a 95       	dec	r23
    8fc6:	d1 f7       	brne	.-12     	; 0x8fbc <__stack+0xdbd>
    8fc8:	70 2d       	mov	r23, r0
    8fca:	0b 2e       	mov	r0, r27
    8fcc:	b5 e1       	ldi	r27, 0x15	; 21
    8fce:	cc 0c       	add	r12, r12
    8fd0:	dd 1c       	adc	r13, r13
    8fd2:	ee 1c       	adc	r14, r14
    8fd4:	ff 1c       	adc	r15, r15
    8fd6:	ba 95       	dec	r27
    8fd8:	d1 f7       	brne	.-12     	; 0x8fce <__stack+0xdcf>
    8fda:	b0 2d       	mov	r27, r0
    8fdc:	c8 28       	or	r12, r8
    8fde:	d9 28       	or	r13, r9
    8fe0:	ea 28       	or	r14, r10
    8fe2:	fb 28       	or	r15, r11
    8fe4:	c0 0e       	add	r12, r16
    8fe6:	d1 1e       	adc	r13, r17
    8fe8:	e2 1e       	adc	r14, r18
    8fea:	f3 1e       	adc	r15, r19
    8fec:	89 a4       	ldd	r8, Y+41	; 0x29
    8fee:	9a a4       	ldd	r9, Y+42	; 0x2a
    8ff0:	ab a4       	ldd	r10, Y+43	; 0x2b
    8ff2:	bc a4       	ldd	r11, Y+44	; 0x2c
    8ff4:	f1 eb       	ldi	r31, 0xB1	; 177
    8ff6:	8f 1a       	sub	r8, r31
    8ff8:	f1 e8       	ldi	r31, 0x81	; 129
    8ffa:	9f 0a       	sbc	r9, r31
    8ffc:	f7 e5       	ldi	r31, 0x57	; 87
    8ffe:	af 0a       	sbc	r10, r31
    9000:	f0 e9       	ldi	r31, 0x90	; 144
    9002:	bf 0a       	sbc	r11, r31
    9004:	88 0d       	add	r24, r8
    9006:	99 1d       	adc	r25, r9
    9008:	aa 1d       	adc	r26, r10
    900a:	bb 1d       	adc	r27, r11
    900c:	2a 01       	movw	r4, r20
    900e:	3b 01       	movw	r6, r22
    9010:	40 94       	com	r4
    9012:	50 94       	com	r5
    9014:	60 94       	com	r6
    9016:	70 94       	com	r7
    9018:	4c 28       	or	r4, r12
    901a:	5d 28       	or	r5, r13
    901c:	6e 28       	or	r6, r14
    901e:	7f 28       	or	r7, r15
    9020:	40 26       	eor	r4, r16
    9022:	51 26       	eor	r5, r17
    9024:	62 26       	eor	r6, r18
    9026:	73 26       	eor	r7, r19
    9028:	84 0d       	add	r24, r4
    902a:	95 1d       	adc	r25, r5
    902c:	a6 1d       	adc	r26, r6
    902e:	b7 1d       	adc	r27, r7
    9030:	4c 01       	movw	r8, r24
    9032:	5d 01       	movw	r10, r26
    9034:	88 0c       	add	r8, r8
    9036:	99 1c       	adc	r9, r9
    9038:	aa 1c       	adc	r10, r10
    903a:	bb 1c       	adc	r11, r11
    903c:	88 0c       	add	r8, r8
    903e:	99 1c       	adc	r9, r9
    9040:	aa 1c       	adc	r10, r10
    9042:	bb 1c       	adc	r11, r11
    9044:	88 0c       	add	r8, r8
    9046:	99 1c       	adc	r9, r9
    9048:	aa 1c       	adc	r10, r10
    904a:	bb 1c       	adc	r11, r11
    904c:	88 0c       	add	r8, r8
    904e:	99 1c       	adc	r9, r9
    9050:	aa 1c       	adc	r10, r10
    9052:	bb 1c       	adc	r11, r11
    9054:	88 0c       	add	r8, r8
    9056:	99 1c       	adc	r9, r9
    9058:	aa 1c       	adc	r10, r10
    905a:	bb 1c       	adc	r11, r11
    905c:	88 0c       	add	r8, r8
    905e:	99 1c       	adc	r9, r9
    9060:	aa 1c       	adc	r10, r10
    9062:	bb 1c       	adc	r11, r11
    9064:	07 2e       	mov	r0, r23
    9066:	7a e1       	ldi	r23, 0x1A	; 26
    9068:	b6 95       	lsr	r27
    906a:	a7 95       	ror	r26
    906c:	97 95       	ror	r25
    906e:	87 95       	ror	r24
    9070:	7a 95       	dec	r23
    9072:	d1 f7       	brne	.-12     	; 0x9068 <__stack+0xe69>
    9074:	70 2d       	mov	r23, r0
    9076:	88 29       	or	r24, r8
    9078:	99 29       	or	r25, r9
    907a:	aa 29       	or	r26, r10
    907c:	bb 29       	or	r27, r11
    907e:	8c 0d       	add	r24, r12
    9080:	9d 1d       	adc	r25, r13
    9082:	ae 1d       	adc	r26, r14
    9084:	bf 1d       	adc	r27, r15
    9086:	29 96       	adiw	r28, 0x09	; 9
    9088:	8c ac       	ldd	r8, Y+60	; 0x3c
    908a:	9d ac       	ldd	r9, Y+61	; 0x3d
    908c:	ae ac       	ldd	r10, Y+62	; 0x3e
    908e:	bf ac       	ldd	r11, Y+63	; 0x3f
    9090:	29 97       	sbiw	r28, 0x09	; 9
    9092:	e0 e2       	ldi	r30, 0x20	; 32
    9094:	8e 1a       	sub	r8, r30
    9096:	e9 e1       	ldi	r30, 0x19	; 25
    9098:	9e 0a       	sbc	r9, r30
    909a:	e3 ed       	ldi	r30, 0xD3	; 211
    909c:	ae 0a       	sbc	r10, r30
    909e:	e1 e0       	ldi	r30, 0x01	; 1
    90a0:	be 0a       	sbc	r11, r30
    90a2:	48 0d       	add	r20, r8
    90a4:	59 1d       	adc	r21, r9
    90a6:	6a 1d       	adc	r22, r10
    90a8:	7b 1d       	adc	r23, r11
    90aa:	48 01       	movw	r8, r16
    90ac:	59 01       	movw	r10, r18
    90ae:	80 94       	com	r8
    90b0:	90 94       	com	r9
    90b2:	a0 94       	com	r10
    90b4:	b0 94       	com	r11
    90b6:	88 2a       	or	r8, r24
    90b8:	99 2a       	or	r9, r25
    90ba:	aa 2a       	or	r10, r26
    90bc:	bb 2a       	or	r11, r27
    90be:	8c 24       	eor	r8, r12
    90c0:	9d 24       	eor	r9, r13
    90c2:	ae 24       	eor	r10, r14
    90c4:	bf 24       	eor	r11, r15
    90c6:	48 0d       	add	r20, r8
    90c8:	59 1d       	adc	r21, r9
    90ca:	6a 1d       	adc	r22, r10
    90cc:	7b 1d       	adc	r23, r11
    90ce:	4a 01       	movw	r8, r20
    90d0:	5b 01       	movw	r10, r22
    90d2:	07 2e       	mov	r0, r23
    90d4:	7a e0       	ldi	r23, 0x0A	; 10
    90d6:	88 0c       	add	r8, r8
    90d8:	99 1c       	adc	r9, r9
    90da:	aa 1c       	adc	r10, r10
    90dc:	bb 1c       	adc	r11, r11
    90de:	7a 95       	dec	r23
    90e0:	d1 f7       	brne	.-12     	; 0x90d6 <__stack+0xed7>
    90e2:	70 2d       	mov	r23, r0
    90e4:	03 2e       	mov	r0, r19
    90e6:	36 e1       	ldi	r19, 0x16	; 22
    90e8:	76 95       	lsr	r23
    90ea:	67 95       	ror	r22
    90ec:	57 95       	ror	r21
    90ee:	47 95       	ror	r20
    90f0:	3a 95       	dec	r19
    90f2:	d1 f7       	brne	.-12     	; 0x90e8 <__stack+0xee9>
    90f4:	30 2d       	mov	r19, r0
    90f6:	48 29       	or	r20, r8
    90f8:	59 29       	or	r21, r9
    90fa:	6a 29       	or	r22, r10
    90fc:	7b 29       	or	r23, r11
    90fe:	48 0f       	add	r20, r24
    9100:	59 1f       	adc	r21, r25
    9102:	6a 1f       	adc	r22, r26
    9104:	7b 1f       	adc	r23, r27
    9106:	89 a0       	ldd	r8, Y+33	; 0x21
    9108:	9a a0       	ldd	r9, Y+34	; 0x22
    910a:	ab a0       	ldd	r10, Y+35	; 0x23
    910c:	bc a0       	ldd	r11, Y+36	; 0x24
    910e:	fc ee       	ldi	r31, 0xEC	; 236
    9110:	8f 1a       	sub	r8, r31
    9112:	fc eb       	ldi	r31, 0xBC	; 188
    9114:	9f 0a       	sbc	r9, r31
    9116:	fe ef       	ldi	r31, 0xFE	; 254
    9118:	af 0a       	sbc	r10, r31
    911a:	fc e5       	ldi	r31, 0x5C	; 92
    911c:	bf 0a       	sbc	r11, r31
    911e:	08 0d       	add	r16, r8
    9120:	19 1d       	adc	r17, r9
    9122:	2a 1d       	adc	r18, r10
    9124:	3b 1d       	adc	r19, r11
    9126:	46 01       	movw	r8, r12
    9128:	57 01       	movw	r10, r14
    912a:	80 94       	com	r8
    912c:	90 94       	com	r9
    912e:	a0 94       	com	r10
    9130:	b0 94       	com	r11
    9132:	84 2a       	or	r8, r20
    9134:	95 2a       	or	r9, r21
    9136:	a6 2a       	or	r10, r22
    9138:	b7 2a       	or	r11, r23
    913a:	88 26       	eor	r8, r24
    913c:	99 26       	eor	r9, r25
    913e:	aa 26       	eor	r10, r26
    9140:	bb 26       	eor	r11, r27
    9142:	08 0d       	add	r16, r8
    9144:	19 1d       	adc	r17, r9
    9146:	2a 1d       	adc	r18, r10
    9148:	3b 1d       	adc	r19, r11
    914a:	48 01       	movw	r8, r16
    914c:	59 01       	movw	r10, r18
    914e:	07 2e       	mov	r0, r23
    9150:	7f e0       	ldi	r23, 0x0F	; 15
    9152:	88 0c       	add	r8, r8
    9154:	99 1c       	adc	r9, r9
    9156:	aa 1c       	adc	r10, r10
    9158:	bb 1c       	adc	r11, r11
    915a:	7a 95       	dec	r23
    915c:	d1 f7       	brne	.-12     	; 0x9152 <__stack+0xf53>
    915e:	70 2d       	mov	r23, r0
    9160:	0f 2e       	mov	r0, r31
    9162:	f1 e1       	ldi	r31, 0x11	; 17
    9164:	36 95       	lsr	r19
    9166:	27 95       	ror	r18
    9168:	17 95       	ror	r17
    916a:	07 95       	ror	r16
    916c:	fa 95       	dec	r31
    916e:	d1 f7       	brne	.-12     	; 0x9164 <__stack+0xf65>
    9170:	f0 2d       	mov	r31, r0
    9172:	08 29       	or	r16, r8
    9174:	19 29       	or	r17, r9
    9176:	2a 29       	or	r18, r10
    9178:	3b 29       	or	r19, r11
    917a:	04 0f       	add	r16, r20
    917c:	15 1f       	adc	r17, r21
    917e:	26 1f       	adc	r18, r22
    9180:	37 1f       	adc	r19, r23
    9182:	21 96       	adiw	r28, 0x01	; 1
    9184:	8c ac       	ldd	r8, Y+60	; 0x3c
    9186:	9d ac       	ldd	r9, Y+61	; 0x3d
    9188:	ae ac       	ldd	r10, Y+62	; 0x3e
    918a:	bf ac       	ldd	r11, Y+63	; 0x3f
    918c:	21 97       	sbiw	r28, 0x01	; 1
    918e:	ef e5       	ldi	r30, 0x5F	; 95
    9190:	8e 1a       	sub	r8, r30
    9192:	ee ee       	ldi	r30, 0xEE	; 238
    9194:	9e 0a       	sbc	r9, r30
    9196:	e7 ef       	ldi	r30, 0xF7	; 247
    9198:	ae 0a       	sbc	r10, r30
    919a:	e1 eb       	ldi	r30, 0xB1	; 177
    919c:	be 0a       	sbc	r11, r30
    919e:	c8 0c       	add	r12, r8
    91a0:	d9 1c       	adc	r13, r9
    91a2:	ea 1c       	adc	r14, r10
    91a4:	fb 1c       	adc	r15, r11
    91a6:	4c 01       	movw	r8, r24
    91a8:	5d 01       	movw	r10, r26
    91aa:	80 94       	com	r8
    91ac:	90 94       	com	r9
    91ae:	a0 94       	com	r10
    91b0:	b0 94       	com	r11
    91b2:	80 2a       	or	r8, r16
    91b4:	91 2a       	or	r9, r17
    91b6:	a2 2a       	or	r10, r18
    91b8:	b3 2a       	or	r11, r19
    91ba:	84 26       	eor	r8, r20
    91bc:	95 26       	eor	r9, r21
    91be:	a6 26       	eor	r10, r22
    91c0:	b7 26       	eor	r11, r23
    91c2:	c8 0c       	add	r12, r8
    91c4:	d9 1c       	adc	r13, r9
    91c6:	ea 1c       	adc	r14, r10
    91c8:	fb 1c       	adc	r15, r11
    91ca:	46 01       	movw	r8, r12
    91cc:	57 01       	movw	r10, r14
    91ce:	07 2e       	mov	r0, r23
    91d0:	7b e0       	ldi	r23, 0x0B	; 11
    91d2:	b6 94       	lsr	r11
    91d4:	a7 94       	ror	r10
    91d6:	97 94       	ror	r9
    91d8:	87 94       	ror	r8
    91da:	7a 95       	dec	r23
    91dc:	d1 f7       	brne	.-12     	; 0x91d2 <__stack+0xfd3>
    91de:	70 2d       	mov	r23, r0
    91e0:	0b 2e       	mov	r0, r27
    91e2:	b5 e1       	ldi	r27, 0x15	; 21
    91e4:	cc 0c       	add	r12, r12
    91e6:	dd 1c       	adc	r13, r13
    91e8:	ee 1c       	adc	r14, r14
    91ea:	ff 1c       	adc	r15, r15
    91ec:	ba 95       	dec	r27
    91ee:	d1 f7       	brne	.-12     	; 0x91e4 <__stack+0xfe5>
    91f0:	b0 2d       	mov	r27, r0
    91f2:	c8 28       	or	r12, r8
    91f4:	d9 28       	or	r13, r9
    91f6:	ea 28       	or	r14, r10
    91f8:	fb 28       	or	r15, r11
    91fa:	c0 0e       	add	r12, r16
    91fc:	d1 1e       	adc	r13, r17
    91fe:	e2 1e       	adc	r14, r18
    9200:	f3 1e       	adc	r15, r19
    9202:	89 8c       	ldd	r8, Y+25	; 0x19
    9204:	9a 8c       	ldd	r9, Y+26	; 0x1a
    9206:	ab 8c       	ldd	r10, Y+27	; 0x1b
    9208:	bc 8c       	ldd	r11, Y+28	; 0x1c
    920a:	fe e7       	ldi	r31, 0x7E	; 126
    920c:	8f 1a       	sub	r8, r31
    920e:	f1 e8       	ldi	r31, 0x81	; 129
    9210:	9f 0a       	sbc	r9, r31
    9212:	fc ea       	ldi	r31, 0xAC	; 172
    9214:	af 0a       	sbc	r10, r31
    9216:	f8 e0       	ldi	r31, 0x08	; 8
    9218:	bf 0a       	sbc	r11, r31
    921a:	88 0d       	add	r24, r8
    921c:	99 1d       	adc	r25, r9
    921e:	aa 1d       	adc	r26, r10
    9220:	bb 1d       	adc	r27, r11
    9222:	2a 01       	movw	r4, r20
    9224:	3b 01       	movw	r6, r22
    9226:	40 94       	com	r4
    9228:	50 94       	com	r5
    922a:	60 94       	com	r6
    922c:	70 94       	com	r7
    922e:	4c 28       	or	r4, r12
    9230:	5d 28       	or	r5, r13
    9232:	6e 28       	or	r6, r14
    9234:	7f 28       	or	r7, r15
    9236:	40 26       	eor	r4, r16
    9238:	51 26       	eor	r5, r17
    923a:	62 26       	eor	r6, r18
    923c:	73 26       	eor	r7, r19
    923e:	84 0d       	add	r24, r4
    9240:	95 1d       	adc	r25, r5
    9242:	a6 1d       	adc	r26, r6
    9244:	b7 1d       	adc	r27, r7
    9246:	4c 01       	movw	r8, r24
    9248:	5d 01       	movw	r10, r26
    924a:	88 0c       	add	r8, r8
    924c:	99 1c       	adc	r9, r9
    924e:	aa 1c       	adc	r10, r10
    9250:	bb 1c       	adc	r11, r11
    9252:	88 0c       	add	r8, r8
    9254:	99 1c       	adc	r9, r9
    9256:	aa 1c       	adc	r10, r10
    9258:	bb 1c       	adc	r11, r11
    925a:	88 0c       	add	r8, r8
    925c:	99 1c       	adc	r9, r9
    925e:	aa 1c       	adc	r10, r10
    9260:	bb 1c       	adc	r11, r11
    9262:	88 0c       	add	r8, r8
    9264:	99 1c       	adc	r9, r9
    9266:	aa 1c       	adc	r10, r10
    9268:	bb 1c       	adc	r11, r11
    926a:	88 0c       	add	r8, r8
    926c:	99 1c       	adc	r9, r9
    926e:	aa 1c       	adc	r10, r10
    9270:	bb 1c       	adc	r11, r11
    9272:	88 0c       	add	r8, r8
    9274:	99 1c       	adc	r9, r9
    9276:	aa 1c       	adc	r10, r10
    9278:	bb 1c       	adc	r11, r11
    927a:	07 2e       	mov	r0, r23
    927c:	7a e1       	ldi	r23, 0x1A	; 26
    927e:	b6 95       	lsr	r27
    9280:	a7 95       	ror	r26
    9282:	97 95       	ror	r25
    9284:	87 95       	ror	r24
    9286:	7a 95       	dec	r23
    9288:	d1 f7       	brne	.-12     	; 0x927e <__stack+0x107f>
    928a:	70 2d       	mov	r23, r0
    928c:	88 29       	or	r24, r8
    928e:	99 29       	or	r25, r9
    9290:	aa 29       	or	r26, r10
    9292:	bb 29       	or	r27, r11
    9294:	8c 0d       	add	r24, r12
    9296:	9d 1d       	adc	r25, r13
    9298:	ae 1d       	adc	r26, r14
    929a:	bf 1d       	adc	r27, r15
    929c:	8d a8       	ldd	r8, Y+53	; 0x35
    929e:	9e a8       	ldd	r9, Y+54	; 0x36
    92a0:	af a8       	ldd	r10, Y+55	; 0x37
    92a2:	b8 ac       	ldd	r11, Y+56	; 0x38
    92a4:	eb ec       	ldi	r30, 0xCB	; 203
    92a6:	8e 1a       	sub	r8, r30
    92a8:	ed e0       	ldi	r30, 0x0D	; 13
    92aa:	9e 0a       	sbc	r9, r30
    92ac:	e5 ec       	ldi	r30, 0xC5	; 197
    92ae:	ae 0a       	sbc	r10, r30
    92b0:	e2 e4       	ldi	r30, 0x42	; 66
    92b2:	be 0a       	sbc	r11, r30
    92b4:	48 0d       	add	r20, r8
    92b6:	59 1d       	adc	r21, r9
    92b8:	6a 1d       	adc	r22, r10
    92ba:	7b 1d       	adc	r23, r11
    92bc:	48 01       	movw	r8, r16
    92be:	59 01       	movw	r10, r18
    92c0:	80 94       	com	r8
    92c2:	90 94       	com	r9
    92c4:	a0 94       	com	r10
    92c6:	b0 94       	com	r11
    92c8:	88 2a       	or	r8, r24
    92ca:	99 2a       	or	r9, r25
    92cc:	aa 2a       	or	r10, r26
    92ce:	bb 2a       	or	r11, r27
    92d0:	8c 24       	eor	r8, r12
    92d2:	9d 24       	eor	r9, r13
    92d4:	ae 24       	eor	r10, r14
    92d6:	bf 24       	eor	r11, r15
    92d8:	48 0d       	add	r20, r8
    92da:	59 1d       	adc	r21, r9
    92dc:	6a 1d       	adc	r22, r10
    92de:	7b 1d       	adc	r23, r11
    92e0:	4a 01       	movw	r8, r20
    92e2:	5b 01       	movw	r10, r22
    92e4:	07 2e       	mov	r0, r23
    92e6:	7a e0       	ldi	r23, 0x0A	; 10
    92e8:	88 0c       	add	r8, r8
    92ea:	99 1c       	adc	r9, r9
    92ec:	aa 1c       	adc	r10, r10
    92ee:	bb 1c       	adc	r11, r11
    92f0:	7a 95       	dec	r23
    92f2:	d1 f7       	brne	.-12     	; 0x92e8 <__stack+0x10e9>
    92f4:	70 2d       	mov	r23, r0
    92f6:	03 2e       	mov	r0, r19
    92f8:	36 e1       	ldi	r19, 0x16	; 22
    92fa:	76 95       	lsr	r23
    92fc:	67 95       	ror	r22
    92fe:	57 95       	ror	r21
    9300:	47 95       	ror	r20
    9302:	3a 95       	dec	r19
    9304:	d1 f7       	brne	.-12     	; 0x92fa <__stack+0x10fb>
    9306:	30 2d       	mov	r19, r0
    9308:	48 29       	or	r20, r8
    930a:	59 29       	or	r21, r9
    930c:	6a 29       	or	r22, r10
    930e:	7b 29       	or	r23, r11
    9310:	48 0f       	add	r20, r24
    9312:	59 1f       	adc	r21, r25
    9314:	6a 1f       	adc	r22, r26
    9316:	7b 1f       	adc	r23, r27
    9318:	89 88       	ldd	r8, Y+17	; 0x11
    931a:	9a 88       	ldd	r9, Y+18	; 0x12
    931c:	ab 88       	ldd	r10, Y+19	; 0x13
    931e:	bc 88       	ldd	r11, Y+20	; 0x14
    9320:	f5 e4       	ldi	r31, 0x45	; 69
    9322:	8f 1a       	sub	r8, r31
    9324:	fd e2       	ldi	r31, 0x2D	; 45
    9326:	9f 0a       	sbc	r9, r31
    9328:	f8 e2       	ldi	r31, 0x28	; 40
    932a:	af 0a       	sbc	r10, r31
    932c:	f5 ed       	ldi	r31, 0xD5	; 213
    932e:	bf 0a       	sbc	r11, r31
    9330:	08 0d       	add	r16, r8
    9332:	19 1d       	adc	r17, r9
    9334:	2a 1d       	adc	r18, r10
    9336:	3b 1d       	adc	r19, r11
    9338:	46 01       	movw	r8, r12
    933a:	57 01       	movw	r10, r14
    933c:	80 94       	com	r8
    933e:	90 94       	com	r9
    9340:	a0 94       	com	r10
    9342:	b0 94       	com	r11
    9344:	84 2a       	or	r8, r20
    9346:	95 2a       	or	r9, r21
    9348:	a6 2a       	or	r10, r22
    934a:	b7 2a       	or	r11, r23
    934c:	88 26       	eor	r8, r24
    934e:	99 26       	eor	r9, r25
    9350:	aa 26       	eor	r10, r26
    9352:	bb 26       	eor	r11, r27
    9354:	08 0d       	add	r16, r8
    9356:	19 1d       	adc	r17, r9
    9358:	2a 1d       	adc	r18, r10
    935a:	3b 1d       	adc	r19, r11
    935c:	48 01       	movw	r8, r16
    935e:	59 01       	movw	r10, r18
    9360:	07 2e       	mov	r0, r23
    9362:	7f e0       	ldi	r23, 0x0F	; 15
    9364:	88 0c       	add	r8, r8
    9366:	99 1c       	adc	r9, r9
    9368:	aa 1c       	adc	r10, r10
    936a:	bb 1c       	adc	r11, r11
    936c:	7a 95       	dec	r23
    936e:	d1 f7       	brne	.-12     	; 0x9364 <__stack+0x1165>
    9370:	70 2d       	mov	r23, r0
    9372:	0f 2e       	mov	r0, r31
    9374:	f1 e1       	ldi	r31, 0x11	; 17
    9376:	36 95       	lsr	r19
    9378:	27 95       	ror	r18
    937a:	17 95       	ror	r17
    937c:	07 95       	ror	r16
    937e:	fa 95       	dec	r31
    9380:	d1 f7       	brne	.-12     	; 0x9376 <__stack+0x1177>
    9382:	f0 2d       	mov	r31, r0
    9384:	08 29       	or	r16, r8
    9386:	19 29       	or	r17, r9
    9388:	2a 29       	or	r18, r10
    938a:	3b 29       	or	r19, r11
    938c:	04 0f       	add	r16, r20
    938e:	15 1f       	adc	r17, r21
    9390:	26 1f       	adc	r18, r22
    9392:	37 1f       	adc	r19, r23
    9394:	8d a4       	ldd	r8, Y+45	; 0x2d
    9396:	9e a4       	ldd	r9, Y+46	; 0x2e
    9398:	af a4       	ldd	r10, Y+47	; 0x2f
    939a:	b8 a8       	ldd	r11, Y+48	; 0x30
    939c:	ef e6       	ldi	r30, 0x6F	; 111
    939e:	8e 1a       	sub	r8, r30
    93a0:	ec e2       	ldi	r30, 0x2C	; 44
    93a2:	9e 0a       	sbc	r9, r30
    93a4:	e9 e7       	ldi	r30, 0x79	; 121
    93a6:	ae 0a       	sbc	r10, r30
    93a8:	e4 e1       	ldi	r30, 0x14	; 20
    93aa:	be 0a       	sbc	r11, r30
    93ac:	c8 0c       	add	r12, r8
    93ae:	d9 1c       	adc	r13, r9
    93b0:	ea 1c       	adc	r14, r10
    93b2:	fb 1c       	adc	r15, r11
    93b4:	61 96       	adiw	r28, 0x11	; 17
    93b6:	8c ac       	ldd	r8, Y+60	; 0x3c
    93b8:	9d ac       	ldd	r9, Y+61	; 0x3d
    93ba:	ae ac       	ldd	r10, Y+62	; 0x3e
    93bc:	bf ac       	ldd	r11, Y+63	; 0x3f
    93be:	61 97       	sbiw	r28, 0x11	; 17
    93c0:	88 0e       	add	r8, r24
    93c2:	99 1e       	adc	r9, r25
    93c4:	aa 1e       	adc	r10, r26
    93c6:	bb 1e       	adc	r11, r27
    93c8:	f1 01       	movw	r30, r2
    93ca:	80 86       	std	Z+8, r8	; 0x08
    93cc:	91 86       	std	Z+9, r9	; 0x09
    93ce:	a2 86       	std	Z+10, r10	; 0x0a
    93d0:	b3 86       	std	Z+11, r11	; 0x0b
    93d2:	89 80       	ldd	r8, Y+1	; 0x01
    93d4:	9a 80       	ldd	r9, Y+2	; 0x02
    93d6:	ab 80       	ldd	r10, Y+3	; 0x03
    93d8:	bc 80       	ldd	r11, Y+4	; 0x04
    93da:	80 0e       	add	r8, r16
    93dc:	91 1e       	adc	r9, r17
    93de:	a2 1e       	adc	r10, r18
    93e0:	b3 1e       	adc	r11, r19
    93e2:	80 95       	com	r24
    93e4:	90 95       	com	r25
    93e6:	a0 95       	com	r26
    93e8:	b0 95       	com	r27
    93ea:	80 2b       	or	r24, r16
    93ec:	91 2b       	or	r25, r17
    93ee:	a2 2b       	or	r26, r18
    93f0:	b3 2b       	or	r27, r19
    93f2:	84 27       	eor	r24, r20
    93f4:	95 27       	eor	r25, r21
    93f6:	a6 27       	eor	r26, r22
    93f8:	b7 27       	eor	r27, r23
    93fa:	c8 0e       	add	r12, r24
    93fc:	d9 1e       	adc	r13, r25
    93fe:	ea 1e       	adc	r14, r26
    9400:	fb 1e       	adc	r15, r27
    9402:	26 01       	movw	r4, r12
    9404:	37 01       	movw	r6, r14
    9406:	03 2e       	mov	r0, r19
    9408:	3b e0       	ldi	r19, 0x0B	; 11
    940a:	76 94       	lsr	r7
    940c:	67 94       	ror	r6
    940e:	57 94       	ror	r5
    9410:	47 94       	ror	r4
    9412:	3a 95       	dec	r19
    9414:	d1 f7       	brne	.-12     	; 0x940a <__stack+0x120b>
    9416:	30 2d       	mov	r19, r0
    9418:	0b 2e       	mov	r0, r27
    941a:	b5 e1       	ldi	r27, 0x15	; 21
    941c:	cc 0c       	add	r12, r12
    941e:	dd 1c       	adc	r13, r13
    9420:	ee 1c       	adc	r14, r14
    9422:	ff 1c       	adc	r15, r15
    9424:	ba 95       	dec	r27
    9426:	d1 f7       	brne	.-12     	; 0x941c <__stack+0x121d>
    9428:	b0 2d       	mov	r27, r0
    942a:	c4 28       	or	r12, r4
    942c:	d5 28       	or	r13, r5
    942e:	e6 28       	or	r14, r6
    9430:	f7 28       	or	r15, r7
    9432:	8c 0c       	add	r8, r12
    9434:	9d 1c       	adc	r9, r13
    9436:	ae 1c       	adc	r10, r14
    9438:	bf 1c       	adc	r11, r15
    943a:	84 86       	std	Z+12, r8	; 0x0c
    943c:	95 86       	std	Z+13, r9	; 0x0d
    943e:	a6 86       	std	Z+14, r10	; 0x0e
    9440:	b7 86       	std	Z+15, r11	; 0x0f
    9442:	cd 80       	ldd	r12, Y+5	; 0x05
    9444:	de 80       	ldd	r13, Y+6	; 0x06
    9446:	ef 80       	ldd	r14, Y+7	; 0x07
    9448:	f8 84       	ldd	r15, Y+8	; 0x08
    944a:	0c 0d       	add	r16, r12
    944c:	1d 1d       	adc	r17, r13
    944e:	2e 1d       	adc	r18, r14
    9450:	3f 1d       	adc	r19, r15
    9452:	00 8b       	std	Z+16, r16	; 0x10
    9454:	11 8b       	std	Z+17, r17	; 0x11
    9456:	22 8b       	std	Z+18, r18	; 0x12
    9458:	33 8b       	std	Z+19, r19	; 0x13
    945a:	2d 96       	adiw	r28, 0x0d	; 13
    945c:	cc ac       	ldd	r12, Y+60	; 0x3c
    945e:	dd ac       	ldd	r13, Y+61	; 0x3d
    9460:	ee ac       	ldd	r14, Y+62	; 0x3e
    9462:	ff ac       	ldd	r15, Y+63	; 0x3f
    9464:	2d 97       	sbiw	r28, 0x0d	; 13
    9466:	4c 0d       	add	r20, r12
    9468:	5d 1d       	adc	r21, r13
    946a:	6e 1d       	adc	r22, r14
    946c:	7f 1d       	adc	r23, r15
    946e:	44 8b       	std	Z+20, r20	; 0x14
    9470:	55 8b       	std	Z+21, r21	; 0x15
    9472:	66 8b       	std	Z+22, r22	; 0x16
    9474:	77 8b       	std	Z+23, r23	; 0x17
    9476:	c0 5b       	subi	r28, 0xB0	; 176
    9478:	df 4f       	sbci	r29, 0xFF	; 255
    947a:	0f b6       	in	r0, 0x3f	; 63
    947c:	f8 94       	cli
    947e:	de bf       	out	0x3e, r29	; 62
    9480:	0f be       	out	0x3f, r0	; 63
    9482:	cd bf       	out	0x3d, r28	; 61
    9484:	df 91       	pop	r29
    9486:	cf 91       	pop	r28
    9488:	1f 91       	pop	r17
    948a:	0f 91       	pop	r16
    948c:	ff 90       	pop	r15
    948e:	ef 90       	pop	r14
    9490:	df 90       	pop	r13
    9492:	cf 90       	pop	r12
    9494:	bf 90       	pop	r11
    9496:	af 90       	pop	r10
    9498:	9f 90       	pop	r9
    949a:	8f 90       	pop	r8
    949c:	7f 90       	pop	r7
    949e:	6f 90       	pop	r6
    94a0:	5f 90       	pop	r5
    94a2:	4f 90       	pop	r4
    94a4:	3f 90       	pop	r3
    94a6:	2f 90       	pop	r2
    94a8:	08 95       	ret

000094aa <md5_starts>:
    94aa:	fc 01       	movw	r30, r24
    94ac:	10 82       	st	Z, r1
    94ae:	11 82       	std	Z+1, r1	; 0x01
    94b0:	12 82       	std	Z+2, r1	; 0x02
    94b2:	13 82       	std	Z+3, r1	; 0x03
    94b4:	14 82       	std	Z+4, r1	; 0x04
    94b6:	15 82       	std	Z+5, r1	; 0x05
    94b8:	16 82       	std	Z+6, r1	; 0x06
    94ba:	17 82       	std	Z+7, r1	; 0x07
    94bc:	81 e0       	ldi	r24, 0x01	; 1
    94be:	93 e2       	ldi	r25, 0x23	; 35
    94c0:	a5 e4       	ldi	r26, 0x45	; 69
    94c2:	b7 e6       	ldi	r27, 0x67	; 103
    94c4:	80 87       	std	Z+8, r24	; 0x08
    94c6:	91 87       	std	Z+9, r25	; 0x09
    94c8:	a2 87       	std	Z+10, r26	; 0x0a
    94ca:	b3 87       	std	Z+11, r27	; 0x0b
    94cc:	89 e8       	ldi	r24, 0x89	; 137
    94ce:	9b ea       	ldi	r25, 0xAB	; 171
    94d0:	ad ec       	ldi	r26, 0xCD	; 205
    94d2:	bf ee       	ldi	r27, 0xEF	; 239
    94d4:	84 87       	std	Z+12, r24	; 0x0c
    94d6:	95 87       	std	Z+13, r25	; 0x0d
    94d8:	a6 87       	std	Z+14, r26	; 0x0e
    94da:	b7 87       	std	Z+15, r27	; 0x0f
    94dc:	8e ef       	ldi	r24, 0xFE	; 254
    94de:	9c ed       	ldi	r25, 0xDC	; 220
    94e0:	aa eb       	ldi	r26, 0xBA	; 186
    94e2:	b8 e9       	ldi	r27, 0x98	; 152
    94e4:	80 8b       	std	Z+16, r24	; 0x10
    94e6:	91 8b       	std	Z+17, r25	; 0x11
    94e8:	a2 8b       	std	Z+18, r26	; 0x12
    94ea:	b3 8b       	std	Z+19, r27	; 0x13
    94ec:	86 e7       	ldi	r24, 0x76	; 118
    94ee:	94 e5       	ldi	r25, 0x54	; 84
    94f0:	a2 e3       	ldi	r26, 0x32	; 50
    94f2:	b0 e1       	ldi	r27, 0x10	; 16
    94f4:	84 8b       	std	Z+20, r24	; 0x14
    94f6:	95 8b       	std	Z+21, r25	; 0x15
    94f8:	a6 8b       	std	Z+22, r26	; 0x16
    94fa:	b7 8b       	std	Z+23, r27	; 0x17
    94fc:	08 95       	ret

000094fe <md5_update>:
    94fe:	8f 92       	push	r8
    9500:	9f 92       	push	r9
    9502:	af 92       	push	r10
    9504:	bf 92       	push	r11
    9506:	cf 92       	push	r12
    9508:	df 92       	push	r13
    950a:	ef 92       	push	r14
    950c:	ff 92       	push	r15
    950e:	0f 93       	push	r16
    9510:	1f 93       	push	r17
    9512:	cf 93       	push	r28
    9514:	df 93       	push	r29
    9516:	7c 01       	movw	r14, r24
    9518:	8b 01       	movw	r16, r22
    951a:	ea 01       	movw	r28, r20
    951c:	1c 16       	cp	r1, r28
    951e:	1d 06       	cpc	r1, r29
    9520:	0c f0       	brlt	.+2      	; 0x9524 <md5_update+0x26>
    9522:	6b c0       	rjmp	.+214    	; 0x95fa <md5_update+0xfc>
    9524:	fc 01       	movw	r30, r24
    9526:	80 81       	ld	r24, Z
    9528:	91 81       	ldd	r25, Z+1	; 0x01
    952a:	a2 81       	ldd	r26, Z+2	; 0x02
    952c:	b3 81       	ldd	r27, Z+3	; 0x03
    952e:	4c 01       	movw	r8, r24
    9530:	5d 01       	movw	r10, r26
    9532:	ff e3       	ldi	r31, 0x3F	; 63
    9534:	8f 22       	and	r8, r31
    9536:	99 24       	eor	r9, r9
    9538:	aa 24       	eor	r10, r10
    953a:	bb 24       	eor	r11, r11
    953c:	05 2e       	mov	r0, r21
    953e:	00 0c       	add	r0, r0
    9540:	66 0b       	sbc	r22, r22
    9542:	77 0b       	sbc	r23, r23
    9544:	84 0f       	add	r24, r20
    9546:	95 1f       	adc	r25, r21
    9548:	a6 1f       	adc	r26, r22
    954a:	b7 1f       	adc	r27, r23
    954c:	f7 01       	movw	r30, r14
    954e:	80 83       	st	Z, r24
    9550:	91 83       	std	Z+1, r25	; 0x01
    9552:	a2 83       	std	Z+2, r26	; 0x02
    9554:	b3 83       	std	Z+3, r27	; 0x03
    9556:	84 17       	cp	r24, r20
    9558:	95 07       	cpc	r25, r21
    955a:	a6 07       	cpc	r26, r22
    955c:	b7 07       	cpc	r27, r23
    955e:	58 f4       	brcc	.+22     	; 0x9576 <md5_update+0x78>
    9560:	84 81       	ldd	r24, Z+4	; 0x04
    9562:	95 81       	ldd	r25, Z+5	; 0x05
    9564:	a6 81       	ldd	r26, Z+6	; 0x06
    9566:	b7 81       	ldd	r27, Z+7	; 0x07
    9568:	01 96       	adiw	r24, 0x01	; 1
    956a:	a1 1d       	adc	r26, r1
    956c:	b1 1d       	adc	r27, r1
    956e:	84 83       	std	Z+4, r24	; 0x04
    9570:	95 83       	std	Z+5, r25	; 0x05
    9572:	a6 83       	std	Z+6, r26	; 0x06
    9574:	b7 83       	std	Z+7, r27	; 0x07
    9576:	81 14       	cp	r8, r1
    9578:	91 04       	cpc	r9, r1
    957a:	a1 04       	cpc	r10, r1
    957c:	b1 04       	cpc	r11, r1
    957e:	c9 f1       	breq	.+114    	; 0x95f2 <md5_update+0xf4>
    9580:	80 e4       	ldi	r24, 0x40	; 64
    9582:	90 e0       	ldi	r25, 0x00	; 0
    9584:	6c 01       	movw	r12, r24
    9586:	c8 18       	sub	r12, r8
    9588:	d9 08       	sbc	r13, r9
    958a:	cc 15       	cp	r28, r12
    958c:	dd 05       	cpc	r29, r13
    958e:	8c f1       	brlt	.+98     	; 0x95f2 <md5_update+0xf4>
    9590:	c4 01       	movw	r24, r8
    9592:	48 96       	adiw	r24, 0x18	; 24
    9594:	a6 01       	movw	r20, r12
    9596:	b8 01       	movw	r22, r16
    9598:	8e 0d       	add	r24, r14
    959a:	9f 1d       	adc	r25, r15
    959c:	45 d3       	rcall	.+1674   	; 0x9c28 <memcpy>
    959e:	b7 01       	movw	r22, r14
    95a0:	68 5e       	subi	r22, 0xE8	; 232
    95a2:	7f 4f       	sbci	r23, 0xFF	; 255
    95a4:	c7 01       	movw	r24, r14
    95a6:	0e 94 c7 38 	call	0x718e	; 0x718e <md5_process>
    95aa:	0c 0d       	add	r16, r12
    95ac:	1d 1d       	adc	r17, r13
    95ae:	cc 19       	sub	r28, r12
    95b0:	dd 09       	sbc	r29, r13
    95b2:	c0 34       	cpi	r28, 0x40	; 64
    95b4:	d1 05       	cpc	r29, r1
    95b6:	7c f0       	brlt	.+30     	; 0x95d6 <md5_update+0xd8>
    95b8:	81 2c       	mov	r8, r1
    95ba:	91 2c       	mov	r9, r1
    95bc:	54 01       	movw	r10, r8
    95be:	b8 01       	movw	r22, r16
    95c0:	c7 01       	movw	r24, r14
    95c2:	0e 94 c7 38 	call	0x718e	; 0x718e <md5_process>
    95c6:	00 5c       	subi	r16, 0xC0	; 192
    95c8:	1f 4f       	sbci	r17, 0xFF	; 255
    95ca:	c0 54       	subi	r28, 0x40	; 64
    95cc:	d1 09       	sbc	r29, r1
    95ce:	c0 34       	cpi	r28, 0x40	; 64
    95d0:	d1 05       	cpc	r29, r1
    95d2:	ac f7       	brge	.-22     	; 0x95be <md5_update+0xc0>
    95d4:	03 c0       	rjmp	.+6      	; 0x95dc <md5_update+0xde>
    95d6:	81 2c       	mov	r8, r1
    95d8:	91 2c       	mov	r9, r1
    95da:	54 01       	movw	r10, r8
    95dc:	1c 16       	cp	r1, r28
    95de:	1d 06       	cpc	r1, r29
    95e0:	64 f4       	brge	.+24     	; 0x95fa <md5_update+0xfc>
    95e2:	c4 01       	movw	r24, r8
    95e4:	48 96       	adiw	r24, 0x18	; 24
    95e6:	ae 01       	movw	r20, r28
    95e8:	b8 01       	movw	r22, r16
    95ea:	8e 0d       	add	r24, r14
    95ec:	9f 1d       	adc	r25, r15
    95ee:	1c d3       	rcall	.+1592   	; 0x9c28 <memcpy>
    95f0:	04 c0       	rjmp	.+8      	; 0x95fa <md5_update+0xfc>
    95f2:	c0 34       	cpi	r28, 0x40	; 64
    95f4:	d1 05       	cpc	r29, r1
    95f6:	1c f7       	brge	.-58     	; 0x95be <md5_update+0xc0>
    95f8:	f4 cf       	rjmp	.-24     	; 0x95e2 <md5_update+0xe4>
    95fa:	df 91       	pop	r29
    95fc:	cf 91       	pop	r28
    95fe:	1f 91       	pop	r17
    9600:	0f 91       	pop	r16
    9602:	ff 90       	pop	r15
    9604:	ef 90       	pop	r14
    9606:	df 90       	pop	r13
    9608:	cf 90       	pop	r12
    960a:	bf 90       	pop	r11
    960c:	af 90       	pop	r10
    960e:	9f 90       	pop	r9
    9610:	8f 90       	pop	r8
    9612:	08 95       	ret

00009614 <md5_finish>:
    9614:	8f 92       	push	r8
    9616:	9f 92       	push	r9
    9618:	af 92       	push	r10
    961a:	bf 92       	push	r11
    961c:	ef 92       	push	r14
    961e:	ff 92       	push	r15
    9620:	0f 93       	push	r16
    9622:	1f 93       	push	r17
    9624:	cf 93       	push	r28
    9626:	df 93       	push	r29
    9628:	cd b7       	in	r28, 0x3d	; 61
    962a:	de b7       	in	r29, 0x3e	; 62
    962c:	28 97       	sbiw	r28, 0x08	; 8
    962e:	0f b6       	in	r0, 0x3f	; 63
    9630:	f8 94       	cli
    9632:	de bf       	out	0x3e, r29	; 62
    9634:	0f be       	out	0x3f, r0	; 63
    9636:	cd bf       	out	0x3d, r28	; 61
    9638:	8c 01       	movw	r16, r24
    963a:	7b 01       	movw	r14, r22
    963c:	fc 01       	movw	r30, r24
    963e:	80 81       	ld	r24, Z
    9640:	91 81       	ldd	r25, Z+1	; 0x01
    9642:	a2 81       	ldd	r26, Z+2	; 0x02
    9644:	b3 81       	ldd	r27, Z+3	; 0x03
    9646:	44 81       	ldd	r20, Z+4	; 0x04
    9648:	55 81       	ldd	r21, Z+5	; 0x05
    964a:	66 81       	ldd	r22, Z+6	; 0x06
    964c:	77 81       	ldd	r23, Z+7	; 0x07
    964e:	44 0f       	add	r20, r20
    9650:	55 1f       	adc	r21, r21
    9652:	66 1f       	adc	r22, r22
    9654:	77 1f       	adc	r23, r23
    9656:	44 0f       	add	r20, r20
    9658:	55 1f       	adc	r21, r21
    965a:	66 1f       	adc	r22, r22
    965c:	77 1f       	adc	r23, r23
    965e:	44 0f       	add	r20, r20
    9660:	55 1f       	adc	r21, r21
    9662:	66 1f       	adc	r22, r22
    9664:	77 1f       	adc	r23, r23
    9666:	4c 01       	movw	r8, r24
    9668:	5d 01       	movw	r10, r26
    966a:	07 2e       	mov	r0, r23
    966c:	7d e1       	ldi	r23, 0x1D	; 29
    966e:	b6 94       	lsr	r11
    9670:	a7 94       	ror	r10
    9672:	97 94       	ror	r9
    9674:	87 94       	ror	r8
    9676:	7a 95       	dec	r23
    9678:	d1 f7       	brne	.-12     	; 0x966e <md5_finish+0x5a>
    967a:	70 2d       	mov	r23, r0
    967c:	48 29       	or	r20, r8
    967e:	59 29       	or	r21, r9
    9680:	6a 29       	or	r22, r10
    9682:	7b 29       	or	r23, r11
    9684:	4c 01       	movw	r8, r24
    9686:	5d 01       	movw	r10, r26
    9688:	88 0c       	add	r8, r8
    968a:	99 1c       	adc	r9, r9
    968c:	aa 1c       	adc	r10, r10
    968e:	bb 1c       	adc	r11, r11
    9690:	88 0c       	add	r8, r8
    9692:	99 1c       	adc	r9, r9
    9694:	aa 1c       	adc	r10, r10
    9696:	bb 1c       	adc	r11, r11
    9698:	88 0c       	add	r8, r8
    969a:	99 1c       	adc	r9, r9
    969c:	aa 1c       	adc	r10, r10
    969e:	bb 1c       	adc	r11, r11
    96a0:	89 82       	std	Y+1, r8	; 0x01
    96a2:	9a 82       	std	Y+2, r9	; 0x02
    96a4:	ab 82       	std	Y+3, r10	; 0x03
    96a6:	bc 82       	std	Y+4, r11	; 0x04
    96a8:	4d 83       	std	Y+5, r20	; 0x05
    96aa:	5e 83       	std	Y+6, r21	; 0x06
    96ac:	6f 83       	std	Y+7, r22	; 0x07
    96ae:	78 87       	std	Y+8, r23	; 0x08
    96b0:	8f 73       	andi	r24, 0x3F	; 63
    96b2:	99 27       	eor	r25, r25
    96b4:	aa 27       	eor	r26, r26
    96b6:	bb 27       	eor	r27, r27
    96b8:	88 33       	cpi	r24, 0x38	; 56
    96ba:	91 05       	cpc	r25, r1
    96bc:	a1 05       	cpc	r26, r1
    96be:	b1 05       	cpc	r27, r1
    96c0:	48 f4       	brcc	.+18     	; 0x96d4 <md5_finish+0xc0>
    96c2:	48 e3       	ldi	r20, 0x38	; 56
    96c4:	50 e0       	ldi	r21, 0x00	; 0
    96c6:	60 e0       	ldi	r22, 0x00	; 0
    96c8:	70 e0       	ldi	r23, 0x00	; 0
    96ca:	48 1b       	sub	r20, r24
    96cc:	59 0b       	sbc	r21, r25
    96ce:	6a 0b       	sbc	r22, r26
    96d0:	7b 0b       	sbc	r23, r27
    96d2:	08 c0       	rjmp	.+16     	; 0x96e4 <md5_finish+0xd0>
    96d4:	48 e7       	ldi	r20, 0x78	; 120
    96d6:	50 e0       	ldi	r21, 0x00	; 0
    96d8:	60 e0       	ldi	r22, 0x00	; 0
    96da:	70 e0       	ldi	r23, 0x00	; 0
    96dc:	48 1b       	sub	r20, r24
    96de:	59 0b       	sbc	r21, r25
    96e0:	6a 0b       	sbc	r22, r26
    96e2:	7b 0b       	sbc	r23, r27
    96e4:	64 e0       	ldi	r22, 0x04	; 4
    96e6:	79 e0       	ldi	r23, 0x09	; 9
    96e8:	c8 01       	movw	r24, r16
    96ea:	09 df       	rcall	.-494    	; 0x94fe <md5_update>
    96ec:	48 e0       	ldi	r20, 0x08	; 8
    96ee:	50 e0       	ldi	r21, 0x00	; 0
    96f0:	be 01       	movw	r22, r28
    96f2:	6f 5f       	subi	r22, 0xFF	; 255
    96f4:	7f 4f       	sbci	r23, 0xFF	; 255
    96f6:	c8 01       	movw	r24, r16
    96f8:	02 df       	rcall	.-508    	; 0x94fe <md5_update>
    96fa:	f8 01       	movw	r30, r16
    96fc:	80 85       	ldd	r24, Z+8	; 0x08
    96fe:	f7 01       	movw	r30, r14
    9700:	80 83       	st	Z, r24
    9702:	f8 01       	movw	r30, r16
    9704:	81 85       	ldd	r24, Z+9	; 0x09
    9706:	f7 01       	movw	r30, r14
    9708:	81 83       	std	Z+1, r24	; 0x01
    970a:	f8 01       	movw	r30, r16
    970c:	82 85       	ldd	r24, Z+10	; 0x0a
    970e:	f7 01       	movw	r30, r14
    9710:	82 83       	std	Z+2, r24	; 0x02
    9712:	f8 01       	movw	r30, r16
    9714:	83 85       	ldd	r24, Z+11	; 0x0b
    9716:	f7 01       	movw	r30, r14
    9718:	83 83       	std	Z+3, r24	; 0x03
    971a:	f8 01       	movw	r30, r16
    971c:	84 85       	ldd	r24, Z+12	; 0x0c
    971e:	f7 01       	movw	r30, r14
    9720:	84 83       	std	Z+4, r24	; 0x04
    9722:	f8 01       	movw	r30, r16
    9724:	85 85       	ldd	r24, Z+13	; 0x0d
    9726:	f7 01       	movw	r30, r14
    9728:	85 83       	std	Z+5, r24	; 0x05
    972a:	f8 01       	movw	r30, r16
    972c:	86 85       	ldd	r24, Z+14	; 0x0e
    972e:	f7 01       	movw	r30, r14
    9730:	86 83       	std	Z+6, r24	; 0x06
    9732:	f8 01       	movw	r30, r16
    9734:	87 85       	ldd	r24, Z+15	; 0x0f
    9736:	f7 01       	movw	r30, r14
    9738:	87 83       	std	Z+7, r24	; 0x07
    973a:	f8 01       	movw	r30, r16
    973c:	80 89       	ldd	r24, Z+16	; 0x10
    973e:	f7 01       	movw	r30, r14
    9740:	80 87       	std	Z+8, r24	; 0x08
    9742:	f8 01       	movw	r30, r16
    9744:	81 89       	ldd	r24, Z+17	; 0x11
    9746:	f7 01       	movw	r30, r14
    9748:	81 87       	std	Z+9, r24	; 0x09
    974a:	f8 01       	movw	r30, r16
    974c:	82 89       	ldd	r24, Z+18	; 0x12
    974e:	f7 01       	movw	r30, r14
    9750:	82 87       	std	Z+10, r24	; 0x0a
    9752:	f8 01       	movw	r30, r16
    9754:	83 89       	ldd	r24, Z+19	; 0x13
    9756:	f7 01       	movw	r30, r14
    9758:	83 87       	std	Z+11, r24	; 0x0b
    975a:	f8 01       	movw	r30, r16
    975c:	84 89       	ldd	r24, Z+20	; 0x14
    975e:	f7 01       	movw	r30, r14
    9760:	84 87       	std	Z+12, r24	; 0x0c
    9762:	f8 01       	movw	r30, r16
    9764:	85 89       	ldd	r24, Z+21	; 0x15
    9766:	f7 01       	movw	r30, r14
    9768:	85 87       	std	Z+13, r24	; 0x0d
    976a:	f8 01       	movw	r30, r16
    976c:	86 89       	ldd	r24, Z+22	; 0x16
    976e:	f7 01       	movw	r30, r14
    9770:	86 87       	std	Z+14, r24	; 0x0e
    9772:	f8 01       	movw	r30, r16
    9774:	87 89       	ldd	r24, Z+23	; 0x17
    9776:	f7 01       	movw	r30, r14
    9778:	87 87       	std	Z+15, r24	; 0x0f
    977a:	28 96       	adiw	r28, 0x08	; 8
    977c:	0f b6       	in	r0, 0x3f	; 63
    977e:	f8 94       	cli
    9780:	de bf       	out	0x3e, r29	; 62
    9782:	0f be       	out	0x3f, r0	; 63
    9784:	cd bf       	out	0x3d, r28	; 61
    9786:	df 91       	pop	r29
    9788:	cf 91       	pop	r28
    978a:	1f 91       	pop	r17
    978c:	0f 91       	pop	r16
    978e:	ff 90       	pop	r15
    9790:	ef 90       	pop	r14
    9792:	bf 90       	pop	r11
    9794:	af 90       	pop	r10
    9796:	9f 90       	pop	r9
    9798:	8f 90       	pop	r8
    979a:	08 95       	ret

0000979c <md5>:
    979c:	af 92       	push	r10
    979e:	bf 92       	push	r11
    97a0:	cf 92       	push	r12
    97a2:	df 92       	push	r13
    97a4:	ef 92       	push	r14
    97a6:	ff 92       	push	r15
    97a8:	0f 93       	push	r16
    97aa:	1f 93       	push	r17
    97ac:	cf 93       	push	r28
    97ae:	df 93       	push	r29
    97b0:	cd b7       	in	r28, 0x3d	; 61
    97b2:	de b7       	in	r29, 0x3e	; 62
    97b4:	c8 5d       	subi	r28, 0xD8	; 216
    97b6:	d1 09       	sbc	r29, r1
    97b8:	0f b6       	in	r0, 0x3f	; 63
    97ba:	f8 94       	cli
    97bc:	de bf       	out	0x3e, r29	; 62
    97be:	0f be       	out	0x3f, r0	; 63
    97c0:	cd bf       	out	0x3d, r28	; 61
    97c2:	6c 01       	movw	r12, r24
    97c4:	5b 01       	movw	r10, r22
    97c6:	7a 01       	movw	r14, r20
    97c8:	8e 01       	movw	r16, r28
    97ca:	0f 5f       	subi	r16, 0xFF	; 255
    97cc:	1f 4f       	sbci	r17, 0xFF	; 255
    97ce:	c8 01       	movw	r24, r16
    97d0:	6c de       	rcall	.-808    	; 0x94aa <md5_starts>
    97d2:	a5 01       	movw	r20, r10
    97d4:	b6 01       	movw	r22, r12
    97d6:	c8 01       	movw	r24, r16
    97d8:	92 de       	rcall	.-732    	; 0x94fe <md5_update>
    97da:	b7 01       	movw	r22, r14
    97dc:	c8 01       	movw	r24, r16
    97de:	1a df       	rcall	.-460    	; 0x9614 <md5_finish>
    97e0:	88 ed       	ldi	r24, 0xD8	; 216
    97e2:	f8 01       	movw	r30, r16
    97e4:	11 92       	st	Z+, r1
    97e6:	8a 95       	dec	r24
    97e8:	e9 f7       	brne	.-6      	; 0x97e4 <md5+0x48>
    97ea:	c8 52       	subi	r28, 0x28	; 40
    97ec:	df 4f       	sbci	r29, 0xFF	; 255
    97ee:	0f b6       	in	r0, 0x3f	; 63
    97f0:	f8 94       	cli
    97f2:	de bf       	out	0x3e, r29	; 62
    97f4:	0f be       	out	0x3f, r0	; 63
    97f6:	cd bf       	out	0x3d, r28	; 61
    97f8:	df 91       	pop	r29
    97fa:	cf 91       	pop	r28
    97fc:	1f 91       	pop	r17
    97fe:	0f 91       	pop	r16
    9800:	ff 90       	pop	r15
    9802:	ef 90       	pop	r14
    9804:	df 90       	pop	r13
    9806:	cf 90       	pop	r12
    9808:	bf 90       	pop	r11
    980a:	af 90       	pop	r10
    980c:	08 95       	ret

0000980e <md5_hmac_starts>:
    980e:	8f 92       	push	r8
    9810:	9f 92       	push	r9
    9812:	af 92       	push	r10
    9814:	bf 92       	push	r11
    9816:	cf 92       	push	r12
    9818:	df 92       	push	r13
    981a:	ef 92       	push	r14
    981c:	ff 92       	push	r15
    981e:	0f 93       	push	r16
    9820:	1f 93       	push	r17
    9822:	cf 93       	push	r28
    9824:	df 93       	push	r29
    9826:	cd b7       	in	r28, 0x3d	; 61
    9828:	de b7       	in	r29, 0x3e	; 62
    982a:	60 97       	sbiw	r28, 0x10	; 16
    982c:	0f b6       	in	r0, 0x3f	; 63
    982e:	f8 94       	cli
    9830:	de bf       	out	0x3e, r29	; 62
    9832:	0f be       	out	0x3f, r0	; 63
    9834:	cd bf       	out	0x3d, r28	; 61
    9836:	8c 01       	movw	r16, r24
    9838:	a6 2e       	mov	r10, r22
    983a:	b7 2e       	mov	r11, r23
    983c:	6a 01       	movw	r12, r20
    983e:	41 34       	cpi	r20, 0x41	; 65
    9840:	51 05       	cpc	r21, r1
    9842:	0c f1       	brlt	.+66     	; 0x9886 <md5_hmac_starts+0x78>
    9844:	de 01       	movw	r26, r28
    9846:	11 96       	adiw	r26, 0x01	; 1
    9848:	4d 01       	movw	r8, r26
    984a:	ad 01       	movw	r20, r26
    984c:	b6 01       	movw	r22, r12
    984e:	8a 2d       	mov	r24, r10
    9850:	9b 2d       	mov	r25, r11
    9852:	a4 df       	rcall	.-184    	; 0x979c <md5>
    9854:	78 01       	movw	r14, r16
    9856:	b8 e5       	ldi	r27, 0x58	; 88
    9858:	eb 0e       	add	r14, r27
    985a:	f1 1c       	adc	r15, r1
    985c:	40 e4       	ldi	r20, 0x40	; 64
    985e:	50 e0       	ldi	r21, 0x00	; 0
    9860:	66 e3       	ldi	r22, 0x36	; 54
    9862:	70 e0       	ldi	r23, 0x00	; 0
    9864:	c7 01       	movw	r24, r14
    9866:	e9 d1       	rcall	.+978    	; 0x9c3a <memset>
    9868:	40 e4       	ldi	r20, 0x40	; 64
    986a:	50 e0       	ldi	r21, 0x00	; 0
    986c:	6c e5       	ldi	r22, 0x5C	; 92
    986e:	70 e0       	ldi	r23, 0x00	; 0
    9870:	c8 01       	movw	r24, r16
    9872:	88 56       	subi	r24, 0x68	; 104
    9874:	9f 4f       	sbci	r25, 0xFF	; 255
    9876:	e1 d1       	rcall	.+962    	; 0x9c3a <memset>
    9878:	68 94       	set
    987a:	cc 24       	eor	r12, r12
    987c:	c4 f8       	bld	r12, 4
    987e:	d1 2c       	mov	r13, r1
    9880:	a8 2c       	mov	r10, r8
    9882:	b9 2c       	mov	r11, r9
    9884:	15 c0       	rjmp	.+42     	; 0x98b0 <md5_hmac_starts+0xa2>
    9886:	78 01       	movw	r14, r16
    9888:	e8 e5       	ldi	r30, 0x58	; 88
    988a:	ee 0e       	add	r14, r30
    988c:	f1 1c       	adc	r15, r1
    988e:	40 e4       	ldi	r20, 0x40	; 64
    9890:	50 e0       	ldi	r21, 0x00	; 0
    9892:	66 e3       	ldi	r22, 0x36	; 54
    9894:	70 e0       	ldi	r23, 0x00	; 0
    9896:	c7 01       	movw	r24, r14
    9898:	d0 d1       	rcall	.+928    	; 0x9c3a <memset>
    989a:	40 e4       	ldi	r20, 0x40	; 64
    989c:	50 e0       	ldi	r21, 0x00	; 0
    989e:	6c e5       	ldi	r22, 0x5C	; 92
    98a0:	70 e0       	ldi	r23, 0x00	; 0
    98a2:	c8 01       	movw	r24, r16
    98a4:	88 56       	subi	r24, 0x68	; 104
    98a6:	9f 4f       	sbci	r25, 0xFF	; 255
    98a8:	c8 d1       	rcall	.+912    	; 0x9c3a <memset>
    98aa:	1c 14       	cp	r1, r12
    98ac:	1d 04       	cpc	r1, r13
    98ae:	f4 f4       	brge	.+60     	; 0x98ec <md5_hmac_starts+0xde>
    98b0:	a8 01       	movw	r20, r16
    98b2:	48 5a       	subi	r20, 0xA8	; 168
    98b4:	5f 4f       	sbci	r21, 0xFF	; 255
    98b6:	8a 2c       	mov	r8, r10
    98b8:	9b 2c       	mov	r9, r11
    98ba:	d8 01       	movw	r26, r16
    98bc:	a8 56       	subi	r26, 0x68	; 104
    98be:	bf 4f       	sbci	r27, 0xFF	; 255
    98c0:	20 e0       	ldi	r18, 0x00	; 0
    98c2:	30 e0       	ldi	r19, 0x00	; 0
    98c4:	b4 01       	movw	r22, r8
    98c6:	fa 01       	movw	r30, r20
    98c8:	80 81       	ld	r24, Z
    98ca:	f4 01       	movw	r30, r8
    98cc:	91 91       	ld	r25, Z+
    98ce:	4f 01       	movw	r8, r30
    98d0:	98 27       	eor	r25, r24
    98d2:	fa 01       	movw	r30, r20
    98d4:	91 93       	st	Z+, r25
    98d6:	af 01       	movw	r20, r30
    98d8:	8c 91       	ld	r24, X
    98da:	fb 01       	movw	r30, r22
    98dc:	90 81       	ld	r25, Z
    98de:	98 27       	eor	r25, r24
    98e0:	9d 93       	st	X+, r25
    98e2:	2f 5f       	subi	r18, 0xFF	; 255
    98e4:	3f 4f       	sbci	r19, 0xFF	; 255
    98e6:	2c 15       	cp	r18, r12
    98e8:	3d 05       	cpc	r19, r13
    98ea:	64 f3       	brlt	.-40     	; 0x98c4 <md5_hmac_starts+0xb6>
    98ec:	c8 01       	movw	r24, r16
    98ee:	dd dd       	rcall	.-1094   	; 0x94aa <md5_starts>
    98f0:	40 e4       	ldi	r20, 0x40	; 64
    98f2:	50 e0       	ldi	r21, 0x00	; 0
    98f4:	b7 01       	movw	r22, r14
    98f6:	c8 01       	movw	r24, r16
    98f8:	02 de       	rcall	.-1020   	; 0x94fe <md5_update>
    98fa:	fe 01       	movw	r30, r28
    98fc:	31 96       	adiw	r30, 0x01	; 1
    98fe:	80 e1       	ldi	r24, 0x10	; 16
    9900:	df 01       	movw	r26, r30
    9902:	1d 92       	st	X+, r1
    9904:	8a 95       	dec	r24
    9906:	e9 f7       	brne	.-6      	; 0x9902 <md5_hmac_starts+0xf4>
    9908:	60 96       	adiw	r28, 0x10	; 16
    990a:	0f b6       	in	r0, 0x3f	; 63
    990c:	f8 94       	cli
    990e:	de bf       	out	0x3e, r29	; 62
    9910:	0f be       	out	0x3f, r0	; 63
    9912:	cd bf       	out	0x3d, r28	; 61
    9914:	df 91       	pop	r29
    9916:	cf 91       	pop	r28
    9918:	1f 91       	pop	r17
    991a:	0f 91       	pop	r16
    991c:	ff 90       	pop	r15
    991e:	ef 90       	pop	r14
    9920:	df 90       	pop	r13
    9922:	cf 90       	pop	r12
    9924:	bf 90       	pop	r11
    9926:	af 90       	pop	r10
    9928:	9f 90       	pop	r9
    992a:	8f 90       	pop	r8
    992c:	08 95       	ret

0000992e <md5_hmac_finish>:
    992e:	cf 92       	push	r12
    9930:	df 92       	push	r13
    9932:	ef 92       	push	r14
    9934:	ff 92       	push	r15
    9936:	0f 93       	push	r16
    9938:	1f 93       	push	r17
    993a:	cf 93       	push	r28
    993c:	df 93       	push	r29
    993e:	cd b7       	in	r28, 0x3d	; 61
    9940:	de b7       	in	r29, 0x3e	; 62
    9942:	60 97       	sbiw	r28, 0x10	; 16
    9944:	0f b6       	in	r0, 0x3f	; 63
    9946:	f8 94       	cli
    9948:	de bf       	out	0x3e, r29	; 62
    994a:	0f be       	out	0x3f, r0	; 63
    994c:	cd bf       	out	0x3d, r28	; 61
    994e:	8c 01       	movw	r16, r24
    9950:	6b 01       	movw	r12, r22
    9952:	ce 01       	movw	r24, r28
    9954:	01 96       	adiw	r24, 0x01	; 1
    9956:	7c 01       	movw	r14, r24
    9958:	bc 01       	movw	r22, r24
    995a:	c8 01       	movw	r24, r16
    995c:	5b de       	rcall	.-842    	; 0x9614 <md5_finish>
    995e:	c8 01       	movw	r24, r16
    9960:	a4 dd       	rcall	.-1208   	; 0x94aa <md5_starts>
    9962:	b8 01       	movw	r22, r16
    9964:	68 56       	subi	r22, 0x68	; 104
    9966:	7f 4f       	sbci	r23, 0xFF	; 255
    9968:	40 e4       	ldi	r20, 0x40	; 64
    996a:	50 e0       	ldi	r21, 0x00	; 0
    996c:	c8 01       	movw	r24, r16
    996e:	c7 dd       	rcall	.-1138   	; 0x94fe <md5_update>
    9970:	40 e1       	ldi	r20, 0x10	; 16
    9972:	50 e0       	ldi	r21, 0x00	; 0
    9974:	b7 01       	movw	r22, r14
    9976:	c8 01       	movw	r24, r16
    9978:	c2 dd       	rcall	.-1148   	; 0x94fe <md5_update>
    997a:	b6 01       	movw	r22, r12
    997c:	c8 01       	movw	r24, r16
    997e:	4a de       	rcall	.-876    	; 0x9614 <md5_finish>
    9980:	80 e1       	ldi	r24, 0x10	; 16
    9982:	f7 01       	movw	r30, r14
    9984:	11 92       	st	Z+, r1
    9986:	8a 95       	dec	r24
    9988:	e9 f7       	brne	.-6      	; 0x9984 <md5_hmac_finish+0x56>
    998a:	60 96       	adiw	r28, 0x10	; 16
    998c:	0f b6       	in	r0, 0x3f	; 63
    998e:	f8 94       	cli
    9990:	de bf       	out	0x3e, r29	; 62
    9992:	0f be       	out	0x3f, r0	; 63
    9994:	cd bf       	out	0x3d, r28	; 61
    9996:	df 91       	pop	r29
    9998:	cf 91       	pop	r28
    999a:	1f 91       	pop	r17
    999c:	0f 91       	pop	r16
    999e:	ff 90       	pop	r15
    99a0:	ef 90       	pop	r14
    99a2:	df 90       	pop	r13
    99a4:	cf 90       	pop	r12
    99a6:	08 95       	ret

000099a8 <md5_hmac>:
 * output = HMAC-MD5( hmac key, input buffer )
 */
void md5_hmac( const unsigned char *key, int keylen,
               const unsigned char *input, int ilen,
               unsigned char output[16] )
{
    99a8:	af 92       	push	r10
    99aa:	bf 92       	push	r11
    99ac:	cf 92       	push	r12
    99ae:	df 92       	push	r13
    99b0:	ef 92       	push	r14
    99b2:	ff 92       	push	r15
    99b4:	0f 93       	push	r16
    99b6:	1f 93       	push	r17
    99b8:	cf 93       	push	r28
    99ba:	df 93       	push	r29
    99bc:	cd b7       	in	r28, 0x3d	; 61
    99be:	de b7       	in	r29, 0x3e	; 62
    99c0:	c8 5d       	subi	r28, 0xD8	; 216
    99c2:	d1 09       	sbc	r29, r1
    99c4:	0f b6       	in	r0, 0x3f	; 63
    99c6:	f8 94       	cli
    99c8:	de bf       	out	0x3e, r29	; 62
    99ca:	0f be       	out	0x3f, r0	; 63
    99cc:	cd bf       	out	0x3d, r28	; 61
    99ce:	6a 01       	movw	r12, r20
    99d0:	59 01       	movw	r10, r18
    md5_context ctx;

    md5_hmac_starts( &ctx, key, keylen );
    99d2:	ab 01       	movw	r20, r22
    99d4:	bc 01       	movw	r22, r24
    99d6:	ce 01       	movw	r24, r28
    99d8:	01 96       	adiw	r24, 0x01	; 1
    99da:	7c 01       	movw	r14, r24
    99dc:	18 df       	rcall	.-464    	; 0x980e <md5_hmac_starts>
/*
 * MD5 HMAC process buffer
 */
void md5_hmac_update( md5_context *ctx, const unsigned char *input, int ilen )
{
    md5_update( ctx, input, ilen );
    99de:	a5 01       	movw	r20, r10
    99e0:	b6 01       	movw	r22, r12
    99e2:	c7 01       	movw	r24, r14
    99e4:	8c dd       	rcall	.-1256   	; 0x94fe <md5_update>
{
    md5_context ctx;

    md5_hmac_starts( &ctx, key, keylen );
    md5_hmac_update( &ctx, input, ilen );
    md5_hmac_finish( &ctx, output );
    99e6:	b8 01       	movw	r22, r16
    99e8:	c7 01       	movw	r24, r14
    99ea:	a1 df       	rcall	.-190    	; 0x992e <md5_hmac_finish>

    memset( &ctx, 0, sizeof( md5_context ) );
    99ec:	88 ed       	ldi	r24, 0xD8	; 216
    99ee:	f7 01       	movw	r30, r14
    99f0:	11 92       	st	Z+, r1
    99f2:	8a 95       	dec	r24
    99f4:	e9 f7       	brne	.-6      	; 0x99f0 <md5_hmac+0x48>
}
    99f6:	c8 52       	subi	r28, 0x28	; 40
    99f8:	df 4f       	sbci	r29, 0xFF	; 255
    99fa:	0f b6       	in	r0, 0x3f	; 63
    99fc:	f8 94       	cli
    99fe:	de bf       	out	0x3e, r29	; 62
    9a00:	0f be       	out	0x3f, r0	; 63
    9a02:	cd bf       	out	0x3d, r28	; 61
    9a04:	df 91       	pop	r29
    9a06:	cf 91       	pop	r28
    9a08:	1f 91       	pop	r17
    9a0a:	0f 91       	pop	r16
    9a0c:	ff 90       	pop	r15
    9a0e:	ef 90       	pop	r14
    9a10:	df 90       	pop	r13
    9a12:	cf 90       	pop	r12
    9a14:	bf 90       	pop	r11
    9a16:	af 90       	pop	r10
    9a18:	08 95       	ret

00009a1a <pnesign>:

uint16_t pnesign(const unsigned char* data, uint16_t dataLen, const unsigned char* key, uint16_t keyLen)
{
    9a1a:	0f 93       	push	r16
    9a1c:	1f 93       	push	r17
    9a1e:	cf 93       	push	r28
    9a20:	df 93       	push	r29
    9a22:	cd b7       	in	r28, 0x3d	; 61
    9a24:	de b7       	in	r29, 0x3e	; 62
    9a26:	60 97       	sbiw	r28, 0x10	; 16
    9a28:	0f b6       	in	r0, 0x3f	; 63
    9a2a:	f8 94       	cli
    9a2c:	de bf       	out	0x3e, r29	; 62
    9a2e:	0f be       	out	0x3f, r0	; 63
    9a30:	cd bf       	out	0x3d, r28	; 61
    9a32:	fc 01       	movw	r30, r24
    9a34:	db 01       	movw	r26, r22
    9a36:	ca 01       	movw	r24, r20
    9a38:	b9 01       	movw	r22, r18
// 	}
	//int_to_ascii(keyLen);

	
		
	md5_hmac(key, keyLen, data, dataLen, tmpbuf);//md5_hmac(key, 6, data1, 80, tmpbuf);
    9a3a:	8e 01       	movw	r16, r28
    9a3c:	0f 5f       	subi	r16, 0xFF	; 255
    9a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    9a40:	9d 01       	movw	r18, r26
    9a42:	af 01       	movw	r20, r30
    9a44:	b1 df       	rcall	.-158    	; 0x99a8 <md5_hmac>
// 	{
// 		int_to_ascii(tmpbuf[i]);
// 	}
// 	send_usart_char("\r\n");
	
	sign = ((uint16_t*)tmpbuf)[0] ^ ((uint16_t*)tmpbuf)[1] ^ ((uint16_t*)tmpbuf)[2] ^ ((uint16_t*)tmpbuf)[3];
    9a46:	2b 81       	ldd	r18, Y+3	; 0x03
    9a48:	3c 81       	ldd	r19, Y+4	; 0x04
    9a4a:	89 81       	ldd	r24, Y+1	; 0x01
    9a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    9a4e:	82 27       	eor	r24, r18
    9a50:	93 27       	eor	r25, r19
    9a52:	2d 81       	ldd	r18, Y+5	; 0x05
    9a54:	3e 81       	ldd	r19, Y+6	; 0x06
    9a56:	82 27       	eor	r24, r18
    9a58:	93 27       	eor	r25, r19
    9a5a:	2f 81       	ldd	r18, Y+7	; 0x07
    9a5c:	38 85       	ldd	r19, Y+8	; 0x08
	return sign;
}
    9a5e:	82 27       	eor	r24, r18
    9a60:	93 27       	eor	r25, r19
    9a62:	60 96       	adiw	r28, 0x10	; 16
    9a64:	0f b6       	in	r0, 0x3f	; 63
    9a66:	f8 94       	cli
    9a68:	de bf       	out	0x3e, r29	; 62
    9a6a:	0f be       	out	0x3f, r0	; 63
    9a6c:	cd bf       	out	0x3d, r28	; 61
    9a6e:	df 91       	pop	r29
    9a70:	cf 91       	pop	r28
    9a72:	1f 91       	pop	r17
    9a74:	0f 91       	pop	r16
    9a76:	08 95       	ret

00009a78 <__divmodhi4>:
    9a78:	97 fb       	bst	r25, 7
    9a7a:	07 2e       	mov	r0, r23
    9a7c:	16 f4       	brtc	.+4      	; 0x9a82 <__divmodhi4+0xa>
    9a7e:	00 94       	com	r0
    9a80:	06 d0       	rcall	.+12     	; 0x9a8e <__divmodhi4_neg1>
    9a82:	77 fd       	sbrc	r23, 7
    9a84:	08 d0       	rcall	.+16     	; 0x9a96 <__divmodhi4_neg2>
    9a86:	50 d0       	rcall	.+160    	; 0x9b28 <__udivmodhi4>
    9a88:	07 fc       	sbrc	r0, 7
    9a8a:	05 d0       	rcall	.+10     	; 0x9a96 <__divmodhi4_neg2>
    9a8c:	3e f4       	brtc	.+14     	; 0x9a9c <__divmodhi4_exit>

00009a8e <__divmodhi4_neg1>:
    9a8e:	90 95       	com	r25
    9a90:	81 95       	neg	r24
    9a92:	9f 4f       	sbci	r25, 0xFF	; 255
    9a94:	08 95       	ret

00009a96 <__divmodhi4_neg2>:
    9a96:	70 95       	com	r23
    9a98:	61 95       	neg	r22
    9a9a:	7f 4f       	sbci	r23, 0xFF	; 255

00009a9c <__divmodhi4_exit>:
    9a9c:	08 95       	ret

00009a9e <__udivmodsi4>:
    9a9e:	a1 e2       	ldi	r26, 0x21	; 33
    9aa0:	1a 2e       	mov	r1, r26
    9aa2:	aa 1b       	sub	r26, r26
    9aa4:	bb 1b       	sub	r27, r27
    9aa6:	fd 01       	movw	r30, r26
    9aa8:	0d c0       	rjmp	.+26     	; 0x9ac4 <__udivmodsi4_ep>

00009aaa <__udivmodsi4_loop>:
    9aaa:	aa 1f       	adc	r26, r26
    9aac:	bb 1f       	adc	r27, r27
    9aae:	ee 1f       	adc	r30, r30
    9ab0:	ff 1f       	adc	r31, r31
    9ab2:	a2 17       	cp	r26, r18
    9ab4:	b3 07       	cpc	r27, r19
    9ab6:	e4 07       	cpc	r30, r20
    9ab8:	f5 07       	cpc	r31, r21
    9aba:	20 f0       	brcs	.+8      	; 0x9ac4 <__udivmodsi4_ep>
    9abc:	a2 1b       	sub	r26, r18
    9abe:	b3 0b       	sbc	r27, r19
    9ac0:	e4 0b       	sbc	r30, r20
    9ac2:	f5 0b       	sbc	r31, r21

00009ac4 <__udivmodsi4_ep>:
    9ac4:	66 1f       	adc	r22, r22
    9ac6:	77 1f       	adc	r23, r23
    9ac8:	88 1f       	adc	r24, r24
    9aca:	99 1f       	adc	r25, r25
    9acc:	1a 94       	dec	r1
    9ace:	69 f7       	brne	.-38     	; 0x9aaa <__udivmodsi4_loop>
    9ad0:	60 95       	com	r22
    9ad2:	70 95       	com	r23
    9ad4:	80 95       	com	r24
    9ad6:	90 95       	com	r25
    9ad8:	9b 01       	movw	r18, r22
    9ada:	ac 01       	movw	r20, r24
    9adc:	bd 01       	movw	r22, r26
    9ade:	cf 01       	movw	r24, r30
    9ae0:	08 95       	ret

00009ae2 <__tablejump2__>:
    9ae2:	ee 0f       	add	r30, r30
    9ae4:	ff 1f       	adc	r31, r31
    9ae6:	88 1f       	adc	r24, r24
    9ae8:	8b bf       	out	0x3b, r24	; 59
    9aea:	07 90       	elpm	r0, Z+
    9aec:	f6 91       	elpm	r31, Z
    9aee:	e0 2d       	mov	r30, r0
    9af0:	19 94       	eijmp

00009af2 <__umulhisi3>:
    9af2:	a2 9f       	mul	r26, r18
    9af4:	b0 01       	movw	r22, r0
    9af6:	b3 9f       	mul	r27, r19
    9af8:	c0 01       	movw	r24, r0
    9afa:	a3 9f       	mul	r26, r19
    9afc:	70 0d       	add	r23, r0
    9afe:	81 1d       	adc	r24, r1
    9b00:	11 24       	eor	r1, r1
    9b02:	91 1d       	adc	r25, r1
    9b04:	b2 9f       	mul	r27, r18
    9b06:	70 0d       	add	r23, r0
    9b08:	81 1d       	adc	r24, r1
    9b0a:	11 24       	eor	r1, r1
    9b0c:	91 1d       	adc	r25, r1
    9b0e:	08 95       	ret

00009b10 <__usmulhisi3>:
    9b10:	f0 df       	rcall	.-32     	; 0x9af2 <__umulhisi3>

00009b12 <__usmulhisi3_tail>:
    9b12:	b7 ff       	sbrs	r27, 7
    9b14:	08 95       	ret
    9b16:	82 1b       	sub	r24, r18
    9b18:	93 0b       	sbc	r25, r19
    9b1a:	08 95       	ret

00009b1c <__mulshisi3>:
    9b1c:	b7 ff       	sbrs	r27, 7
    9b1e:	18 c0       	rjmp	.+48     	; 0x9b50 <__muluhisi3>

00009b20 <__mulohisi3>:
    9b20:	17 d0       	rcall	.+46     	; 0x9b50 <__muluhisi3>
    9b22:	82 1b       	sub	r24, r18
    9b24:	93 0b       	sbc	r25, r19
    9b26:	08 95       	ret

00009b28 <__udivmodhi4>:
    9b28:	aa 1b       	sub	r26, r26
    9b2a:	bb 1b       	sub	r27, r27
    9b2c:	51 e1       	ldi	r21, 0x11	; 17
    9b2e:	07 c0       	rjmp	.+14     	; 0x9b3e <__udivmodhi4_ep>

00009b30 <__udivmodhi4_loop>:
    9b30:	aa 1f       	adc	r26, r26
    9b32:	bb 1f       	adc	r27, r27
    9b34:	a6 17       	cp	r26, r22
    9b36:	b7 07       	cpc	r27, r23
    9b38:	10 f0       	brcs	.+4      	; 0x9b3e <__udivmodhi4_ep>
    9b3a:	a6 1b       	sub	r26, r22
    9b3c:	b7 0b       	sbc	r27, r23

00009b3e <__udivmodhi4_ep>:
    9b3e:	88 1f       	adc	r24, r24
    9b40:	99 1f       	adc	r25, r25
    9b42:	5a 95       	dec	r21
    9b44:	a9 f7       	brne	.-22     	; 0x9b30 <__udivmodhi4_loop>
    9b46:	80 95       	com	r24
    9b48:	90 95       	com	r25
    9b4a:	bc 01       	movw	r22, r24
    9b4c:	cd 01       	movw	r24, r26
    9b4e:	08 95       	ret

00009b50 <__muluhisi3>:
    9b50:	d0 df       	rcall	.-96     	; 0x9af2 <__umulhisi3>
    9b52:	a5 9f       	mul	r26, r21
    9b54:	90 0d       	add	r25, r0
    9b56:	b4 9f       	mul	r27, r20
    9b58:	90 0d       	add	r25, r0
    9b5a:	a4 9f       	mul	r26, r20
    9b5c:	80 0d       	add	r24, r0
    9b5e:	91 1d       	adc	r25, r1
    9b60:	11 24       	eor	r1, r1
    9b62:	08 95       	ret

00009b64 <do_rand>:
    9b64:	8f 92       	push	r8
    9b66:	9f 92       	push	r9
    9b68:	af 92       	push	r10
    9b6a:	bf 92       	push	r11
    9b6c:	cf 92       	push	r12
    9b6e:	df 92       	push	r13
    9b70:	ef 92       	push	r14
    9b72:	ff 92       	push	r15
    9b74:	cf 93       	push	r28
    9b76:	df 93       	push	r29
    9b78:	ec 01       	movw	r28, r24
    9b7a:	68 81       	ld	r22, Y
    9b7c:	79 81       	ldd	r23, Y+1	; 0x01
    9b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    9b80:	9b 81       	ldd	r25, Y+3	; 0x03
    9b82:	61 15       	cp	r22, r1
    9b84:	71 05       	cpc	r23, r1
    9b86:	81 05       	cpc	r24, r1
    9b88:	91 05       	cpc	r25, r1
    9b8a:	21 f4       	brne	.+8      	; 0x9b94 <do_rand+0x30>
    9b8c:	64 e2       	ldi	r22, 0x24	; 36
    9b8e:	79 ed       	ldi	r23, 0xD9	; 217
    9b90:	8b e5       	ldi	r24, 0x5B	; 91
    9b92:	97 e0       	ldi	r25, 0x07	; 7
    9b94:	2d e1       	ldi	r18, 0x1D	; 29
    9b96:	33 ef       	ldi	r19, 0xF3	; 243
    9b98:	41 e0       	ldi	r20, 0x01	; 1
    9b9a:	50 e0       	ldi	r21, 0x00	; 0
    9b9c:	55 d0       	rcall	.+170    	; 0x9c48 <__divmodsi4>
    9b9e:	49 01       	movw	r8, r18
    9ba0:	5a 01       	movw	r10, r20
    9ba2:	9b 01       	movw	r18, r22
    9ba4:	ac 01       	movw	r20, r24
    9ba6:	a7 ea       	ldi	r26, 0xA7	; 167
    9ba8:	b1 e4       	ldi	r27, 0x41	; 65
    9baa:	d2 df       	rcall	.-92     	; 0x9b50 <__muluhisi3>
    9bac:	6b 01       	movw	r12, r22
    9bae:	7c 01       	movw	r14, r24
    9bb0:	ac ee       	ldi	r26, 0xEC	; 236
    9bb2:	b4 ef       	ldi	r27, 0xF4	; 244
    9bb4:	a5 01       	movw	r20, r10
    9bb6:	94 01       	movw	r18, r8
    9bb8:	b3 df       	rcall	.-154    	; 0x9b20 <__mulohisi3>
    9bba:	dc 01       	movw	r26, r24
    9bbc:	cb 01       	movw	r24, r22
    9bbe:	8c 0d       	add	r24, r12
    9bc0:	9d 1d       	adc	r25, r13
    9bc2:	ae 1d       	adc	r26, r14
    9bc4:	bf 1d       	adc	r27, r15
    9bc6:	b7 ff       	sbrs	r27, 7
    9bc8:	03 c0       	rjmp	.+6      	; 0x9bd0 <do_rand+0x6c>
    9bca:	01 97       	sbiw	r24, 0x01	; 1
    9bcc:	a1 09       	sbc	r26, r1
    9bce:	b0 48       	sbci	r27, 0x80	; 128
    9bd0:	88 83       	st	Y, r24
    9bd2:	99 83       	std	Y+1, r25	; 0x01
    9bd4:	aa 83       	std	Y+2, r26	; 0x02
    9bd6:	bb 83       	std	Y+3, r27	; 0x03
    9bd8:	9f 77       	andi	r25, 0x7F	; 127
    9bda:	df 91       	pop	r29
    9bdc:	cf 91       	pop	r28
    9bde:	ff 90       	pop	r15
    9be0:	ef 90       	pop	r14
    9be2:	df 90       	pop	r13
    9be4:	cf 90       	pop	r12
    9be6:	bf 90       	pop	r11
    9be8:	af 90       	pop	r10
    9bea:	9f 90       	pop	r9
    9bec:	8f 90       	pop	r8
    9bee:	08 95       	ret

00009bf0 <rand_r>:
    9bf0:	b9 cf       	rjmp	.-142    	; 0x9b64 <do_rand>

00009bf2 <rand>:
    9bf2:	80 e0       	ldi	r24, 0x00	; 0
    9bf4:	92 e0       	ldi	r25, 0x02	; 2
    9bf6:	b6 cf       	rjmp	.-148    	; 0x9b64 <do_rand>

00009bf8 <srand>:
    9bf8:	a0 e0       	ldi	r26, 0x00	; 0
    9bfa:	b0 e0       	ldi	r27, 0x00	; 0
    9bfc:	80 93 00 02 	sts	0x0200, r24
    9c00:	90 93 01 02 	sts	0x0201, r25
    9c04:	a0 93 02 02 	sts	0x0202, r26
    9c08:	b0 93 03 02 	sts	0x0203, r27
    9c0c:	08 95       	ret

00009c0e <memcmp>:
    9c0e:	fb 01       	movw	r30, r22
    9c10:	dc 01       	movw	r26, r24
    9c12:	04 c0       	rjmp	.+8      	; 0x9c1c <memcmp+0xe>
    9c14:	8d 91       	ld	r24, X+
    9c16:	01 90       	ld	r0, Z+
    9c18:	80 19       	sub	r24, r0
    9c1a:	21 f4       	brne	.+8      	; 0x9c24 <memcmp+0x16>
    9c1c:	41 50       	subi	r20, 0x01	; 1
    9c1e:	50 40       	sbci	r21, 0x00	; 0
    9c20:	c8 f7       	brcc	.-14     	; 0x9c14 <memcmp+0x6>
    9c22:	88 1b       	sub	r24, r24
    9c24:	99 0b       	sbc	r25, r25
    9c26:	08 95       	ret

00009c28 <memcpy>:
    9c28:	fb 01       	movw	r30, r22
    9c2a:	dc 01       	movw	r26, r24
    9c2c:	02 c0       	rjmp	.+4      	; 0x9c32 <memcpy+0xa>
    9c2e:	01 90       	ld	r0, Z+
    9c30:	0d 92       	st	X+, r0
    9c32:	41 50       	subi	r20, 0x01	; 1
    9c34:	50 40       	sbci	r21, 0x00	; 0
    9c36:	d8 f7       	brcc	.-10     	; 0x9c2e <memcpy+0x6>
    9c38:	08 95       	ret

00009c3a <memset>:
    9c3a:	dc 01       	movw	r26, r24
    9c3c:	01 c0       	rjmp	.+2      	; 0x9c40 <memset+0x6>
    9c3e:	6d 93       	st	X+, r22
    9c40:	41 50       	subi	r20, 0x01	; 1
    9c42:	50 40       	sbci	r21, 0x00	; 0
    9c44:	e0 f7       	brcc	.-8      	; 0x9c3e <memset+0x4>
    9c46:	08 95       	ret

00009c48 <__divmodsi4>:
    9c48:	05 2e       	mov	r0, r21
    9c4a:	97 fb       	bst	r25, 7
    9c4c:	16 f4       	brtc	.+4      	; 0x9c52 <__divmodsi4+0xa>
    9c4e:	00 94       	com	r0
    9c50:	0f d0       	rcall	.+30     	; 0x9c70 <__negsi2>
    9c52:	57 fd       	sbrc	r21, 7
    9c54:	05 d0       	rcall	.+10     	; 0x9c60 <__divmodsi4_neg2>
    9c56:	23 df       	rcall	.-442    	; 0x9a9e <__udivmodsi4>
    9c58:	07 fc       	sbrc	r0, 7
    9c5a:	02 d0       	rcall	.+4      	; 0x9c60 <__divmodsi4_neg2>
    9c5c:	46 f4       	brtc	.+16     	; 0x9c6e <__divmodsi4_exit>
    9c5e:	08 c0       	rjmp	.+16     	; 0x9c70 <__negsi2>

00009c60 <__divmodsi4_neg2>:
    9c60:	50 95       	com	r21
    9c62:	40 95       	com	r20
    9c64:	30 95       	com	r19
    9c66:	21 95       	neg	r18
    9c68:	3f 4f       	sbci	r19, 0xFF	; 255
    9c6a:	4f 4f       	sbci	r20, 0xFF	; 255
    9c6c:	5f 4f       	sbci	r21, 0xFF	; 255

00009c6e <__divmodsi4_exit>:
    9c6e:	08 95       	ret

00009c70 <__negsi2>:
    9c70:	90 95       	com	r25
    9c72:	80 95       	com	r24
    9c74:	70 95       	com	r23
    9c76:	61 95       	neg	r22
    9c78:	7f 4f       	sbci	r23, 0xFF	; 255
    9c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    9c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    9c7e:	08 95       	ret

00009c80 <_exit>:
    9c80:	f8 94       	cli

00009c82 <__stop_program>:
    9c82:	ff cf       	rjmp	.-2      	; 0x9c82 <__stop_program>
