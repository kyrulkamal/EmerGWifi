
PNEWELS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000076a  00800200  00009d3a  00009dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009d3a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000019c0  0080096a  0080096a  0000a558  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000a558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000060  00000000  00000000  0000a55b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000a5bc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a78  00000000  00000000  0000a600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00015c96  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d66  00000000  00000000  00020d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008478  00000000  00000000  00024a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001fd4  00000000  00000000  0002ceec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000042ba  00000000  00000000  0002eec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a093  00000000  00000000  0003317a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e0  00000000  00000000  0003d20d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	92 c1       	rjmp	.+804    	; 0x326 <__ctors_end>
       2:	00 00       	nop
       4:	39 c7       	rjmp	.+3698   	; 0xe78 <__vector_1>
       6:	00 00       	nop
       8:	64 c7       	rjmp	.+3784   	; 0xed2 <__vector_2>
       a:	00 00       	nop
       c:	8f c7       	rjmp	.+3870   	; 0xf2c <__vector_3>
       e:	00 00       	nop
      10:	ba c7       	rjmp	.+3956   	; 0xf86 <__vector_4>
      12:	00 00       	nop
      14:	e5 c7       	rjmp	.+4042   	; 0xfe0 <__vector_5>
      16:	00 00       	nop
      18:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_6>
      1c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_7>
      20:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_8>
      24:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_9>
      28:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_10>
      2c:	9c c1       	rjmp	.+824    	; 0x366 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9a c1       	rjmp	.+820    	; 0x366 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c1       	rjmp	.+816    	; 0x366 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c1       	rjmp	.+812    	; 0x366 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 d3 37 	jmp	0x6fa6	; 0x6fa6 <__vector_15>
      40:	92 c1       	rjmp	.+804    	; 0x366 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c1       	rjmp	.+800    	; 0x366 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c1       	rjmp	.+796    	; 0x366 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c1       	rjmp	.+792    	; 0x366 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c1       	rjmp	.+788    	; 0x366 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c1       	rjmp	.+784    	; 0x366 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c1       	rjmp	.+780    	; 0x366 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <__vector_23>
      60:	82 c1       	rjmp	.+772    	; 0x366 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c1       	rjmp	.+768    	; 0x366 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c1       	rjmp	.+764    	; 0x366 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c1       	rjmp	.+760    	; 0x366 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c1       	rjmp	.+756    	; 0x366 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c1       	rjmp	.+752    	; 0x366 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c1       	rjmp	.+748    	; 0x366 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c1       	rjmp	.+744    	; 0x366 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c1       	rjmp	.+740    	; 0x366 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c1       	rjmp	.+736    	; 0x366 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c1       	rjmp	.+732    	; 0x366 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c1       	rjmp	.+728    	; 0x366 <__bad_interrupt>
      8e:	00 00       	nop
      90:	87 c6       	rjmp	.+3342   	; 0xda0 <__vector_36>
      92:	00 00       	nop
      94:	68 c1       	rjmp	.+720    	; 0x366 <__bad_interrupt>
      96:	00 00       	nop
      98:	66 c1       	rjmp	.+716    	; 0x366 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c3       	rjmp	.+1974   	; 0x854 <__vector_39>
      9e:	00 00       	nop
      a0:	62 c1       	rjmp	.+708    	; 0x366 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	60 c1       	rjmp	.+704    	; 0x366 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_42>
      ac:	5c c1       	rjmp	.+696    	; 0x366 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5a c1       	rjmp	.+692    	; 0x366 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	58 c1       	rjmp	.+688    	; 0x366 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	56 c1       	rjmp	.+684    	; 0x366 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	54 c1       	rjmp	.+680    	; 0x366 <__bad_interrupt>
      be:	00 00       	nop
      c0:	52 c1       	rjmp	.+676    	; 0x366 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	50 c1       	rjmp	.+672    	; 0x366 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4e c1       	rjmp	.+668    	; 0x366 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4c c1       	rjmp	.+664    	; 0x366 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4a c1       	rjmp	.+660    	; 0x366 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	48 c1       	rjmp	.+656    	; 0x366 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	46 c1       	rjmp	.+652    	; 0x366 <__bad_interrupt>
      da:	00 00       	nop
      dc:	44 c1       	rjmp	.+648    	; 0x366 <__bad_interrupt>
      de:	00 00       	nop
      e0:	42 c1       	rjmp	.+644    	; 0x366 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	40 c1       	rjmp	.+640    	; 0x366 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	3e c1       	rjmp	.+636    	; 0x366 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	3c c1       	rjmp	.+632    	; 0x366 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	3a c1       	rjmp	.+628    	; 0x366 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	38 c1       	rjmp	.+624    	; 0x366 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	36 c1       	rjmp	.+620    	; 0x366 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	34 c1       	rjmp	.+616    	; 0x366 <__bad_interrupt>
      fe:	00 00       	nop
     100:	32 c1       	rjmp	.+612    	; 0x366 <__bad_interrupt>
     102:	00 00       	nop
     104:	30 c1       	rjmp	.+608    	; 0x366 <__bad_interrupt>
     106:	00 00       	nop
     108:	2e c1       	rjmp	.+604    	; 0x366 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	2c c1       	rjmp	.+600    	; 0x366 <__bad_interrupt>
     10e:	00 00       	nop
     110:	2a c1       	rjmp	.+596    	; 0x366 <__bad_interrupt>
     112:	00 00       	nop
     114:	28 c1       	rjmp	.+592    	; 0x366 <__bad_interrupt>
     116:	00 00       	nop
     118:	26 c1       	rjmp	.+588    	; 0x366 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	24 c1       	rjmp	.+584    	; 0x366 <__bad_interrupt>
     11e:	00 00       	nop
     120:	22 c1       	rjmp	.+580    	; 0x366 <__bad_interrupt>
     122:	00 00       	nop
     124:	20 c1       	rjmp	.+576    	; 0x366 <__bad_interrupt>
     126:	00 00       	nop
     128:	1e c1       	rjmp	.+572    	; 0x366 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	1c c1       	rjmp	.+568    	; 0x366 <__bad_interrupt>
     12e:	00 00       	nop
     130:	1a c1       	rjmp	.+564    	; 0x366 <__bad_interrupt>
     132:	00 00       	nop
     134:	d5 04       	cpc	r13, r5
     136:	d1 05       	cpc	r29, r1
     138:	d1 05       	cpc	r29, r1
     13a:	d1 05       	cpc	r29, r1
     13c:	d1 05       	cpc	r29, r1
     13e:	d1 05       	cpc	r29, r1
     140:	d1 05       	cpc	r29, r1
     142:	d1 05       	cpc	r29, r1
     144:	4c 04       	cpc	r4, r12
     146:	d1 05       	cpc	r29, r1
     148:	d1 05       	cpc	r29, r1
     14a:	d1 05       	cpc	r29, r1
     14c:	d1 05       	cpc	r29, r1
     14e:	d1 05       	cpc	r29, r1
     150:	d1 05       	cpc	r29, r1
     152:	d1 05       	cpc	r29, r1
     154:	4c 04       	cpc	r4, r12
     156:	d1 05       	cpc	r29, r1
     158:	d1 05       	cpc	r29, r1
     15a:	d1 05       	cpc	r29, r1
     15c:	d1 05       	cpc	r29, r1
     15e:	d1 05       	cpc	r29, r1
     160:	d1 05       	cpc	r29, r1
     162:	d1 05       	cpc	r29, r1
     164:	71 04       	cpc	r7, r1
     166:	d1 05       	cpc	r29, r1
     168:	d1 05       	cpc	r29, r1
     16a:	d1 05       	cpc	r29, r1
     16c:	d1 05       	cpc	r29, r1
     16e:	d1 05       	cpc	r29, r1
     170:	d1 05       	cpc	r29, r1
     172:	d1 05       	cpc	r29, r1
     174:	d5 04       	cpc	r13, r5
     176:	d1 05       	cpc	r29, r1
     178:	d1 05       	cpc	r29, r1
     17a:	d1 05       	cpc	r29, r1
     17c:	d1 05       	cpc	r29, r1
     17e:	d1 05       	cpc	r29, r1
     180:	d1 05       	cpc	r29, r1
     182:	d1 05       	cpc	r29, r1
     184:	71 04       	cpc	r7, r1
     186:	d1 05       	cpc	r29, r1
     188:	d1 05       	cpc	r29, r1
     18a:	d1 05       	cpc	r29, r1
     18c:	d1 05       	cpc	r29, r1
     18e:	d1 05       	cpc	r29, r1
     190:	d1 05       	cpc	r29, r1
     192:	d1 05       	cpc	r29, r1
     194:	d5 04       	cpc	r13, r5
     196:	d1 05       	cpc	r29, r1
     198:	d1 05       	cpc	r29, r1
     19a:	d1 05       	cpc	r29, r1
     19c:	d1 05       	cpc	r29, r1
     19e:	d1 05       	cpc	r29, r1
     1a0:	d1 05       	cpc	r29, r1
     1a2:	d1 05       	cpc	r29, r1
     1a4:	62 05       	cpc	r22, r2
     1a6:	d1 05       	cpc	r29, r1
     1a8:	d1 05       	cpc	r29, r1
     1aa:	d1 05       	cpc	r29, r1
     1ac:	d1 05       	cpc	r29, r1
     1ae:	d1 05       	cpc	r29, r1
     1b0:	d1 05       	cpc	r29, r1
     1b2:	d1 05       	cpc	r29, r1
     1b4:	da 04       	cpc	r13, r10
     1b6:	d1 05       	cpc	r29, r1
     1b8:	d1 05       	cpc	r29, r1
     1ba:	d1 05       	cpc	r29, r1
     1bc:	d1 05       	cpc	r29, r1
     1be:	d1 05       	cpc	r29, r1
     1c0:	d1 05       	cpc	r29, r1
     1c2:	d1 05       	cpc	r29, r1
     1c4:	d5 04       	cpc	r13, r5
     1c6:	d1 05       	cpc	r29, r1
     1c8:	d1 05       	cpc	r29, r1
     1ca:	d1 05       	cpc	r29, r1
     1cc:	d1 05       	cpc	r29, r1
     1ce:	d1 05       	cpc	r29, r1
     1d0:	d1 05       	cpc	r29, r1
     1d2:	d1 05       	cpc	r29, r1
     1d4:	03 05       	cpc	r16, r3
     1d6:	d1 05       	cpc	r29, r1
     1d8:	d1 05       	cpc	r29, r1
     1da:	d1 05       	cpc	r29, r1
     1dc:	d1 05       	cpc	r29, r1
     1de:	d1 05       	cpc	r29, r1
     1e0:	d1 05       	cpc	r29, r1
     1e2:	d1 05       	cpc	r29, r1
     1e4:	3b 05       	cpc	r19, r11
     1e6:	d1 05       	cpc	r29, r1
     1e8:	d1 05       	cpc	r29, r1
     1ea:	d1 05       	cpc	r29, r1
     1ec:	d1 05       	cpc	r29, r1
     1ee:	d1 05       	cpc	r29, r1
     1f0:	d1 05       	cpc	r29, r1
     1f2:	d1 05       	cpc	r29, r1
     1f4:	96 05       	cpc	r25, r6
     1f6:	d1 05       	cpc	r29, r1
     1f8:	d1 05       	cpc	r29, r1
     1fa:	d1 05       	cpc	r29, r1
     1fc:	d1 05       	cpc	r29, r1
     1fe:	d1 05       	cpc	r29, r1
     200:	d1 05       	cpc	r29, r1
     202:	d1 05       	cpc	r29, r1
     204:	96 05       	cpc	r25, r6
     206:	d1 05       	cpc	r29, r1
     208:	d1 05       	cpc	r29, r1
     20a:	d1 05       	cpc	r29, r1
     20c:	d1 05       	cpc	r29, r1
     20e:	d1 05       	cpc	r29, r1
     210:	d1 05       	cpc	r29, r1
     212:	d1 05       	cpc	r29, r1
     214:	96 05       	cpc	r25, r6
     216:	d1 05       	cpc	r29, r1
     218:	d1 05       	cpc	r29, r1
     21a:	d1 05       	cpc	r29, r1
     21c:	d1 05       	cpc	r29, r1
     21e:	d1 05       	cpc	r29, r1
     220:	d1 05       	cpc	r29, r1
     222:	d1 05       	cpc	r29, r1
     224:	96 05       	cpc	r25, r6
     226:	d1 05       	cpc	r29, r1
     228:	d1 05       	cpc	r29, r1
     22a:	d1 05       	cpc	r29, r1
     22c:	d1 05       	cpc	r29, r1
     22e:	d1 05       	cpc	r29, r1
     230:	d1 05       	cpc	r29, r1
     232:	d1 05       	cpc	r29, r1
     234:	a0 05       	cpc	r26, r0
     236:	d1 05       	cpc	r29, r1
     238:	d1 05       	cpc	r29, r1
     23a:	d1 05       	cpc	r29, r1
     23c:	d1 05       	cpc	r29, r1
     23e:	d1 05       	cpc	r29, r1
     240:	d1 05       	cpc	r29, r1
     242:	d1 05       	cpc	r29, r1
     244:	c5 05       	cpc	r28, r5
     246:	d1 05       	cpc	r29, r1
     248:	d1 05       	cpc	r29, r1
     24a:	d1 05       	cpc	r29, r1
     24c:	d1 05       	cpc	r29, r1
     24e:	d1 05       	cpc	r29, r1
     250:	d1 05       	cpc	r29, r1
     252:	d1 05       	cpc	r29, r1
     254:	a0 05       	cpc	r26, r0
     256:	d1 05       	cpc	r29, r1
     258:	d1 05       	cpc	r29, r1
     25a:	d1 05       	cpc	r29, r1
     25c:	d1 05       	cpc	r29, r1
     25e:	d1 05       	cpc	r29, r1
     260:	d1 05       	cpc	r29, r1
     262:	d1 05       	cpc	r29, r1
     264:	c5 05       	cpc	r28, r5
     266:	d1 05       	cpc	r29, r1
     268:	d1 05       	cpc	r29, r1
     26a:	d1 05       	cpc	r29, r1
     26c:	d1 05       	cpc	r29, r1
     26e:	d1 05       	cpc	r29, r1
     270:	d1 05       	cpc	r29, r1
     272:	d1 05       	cpc	r29, r1
     274:	b9 05       	cpc	r27, r9
     276:	d1 05       	cpc	r29, r1
     278:	d1 05       	cpc	r29, r1
     27a:	d1 05       	cpc	r29, r1
     27c:	d1 05       	cpc	r29, r1
     27e:	d1 05       	cpc	r29, r1
     280:	d1 05       	cpc	r29, r1
     282:	d1 05       	cpc	r29, r1
     284:	6b 05       	cpc	r22, r11
     286:	d1 05       	cpc	r29, r1
     288:	d1 05       	cpc	r29, r1
     28a:	d1 05       	cpc	r29, r1
     28c:	d1 05       	cpc	r29, r1
     28e:	d1 05       	cpc	r29, r1
     290:	d1 05       	cpc	r29, r1
     292:	d1 05       	cpc	r29, r1
     294:	6b 05       	cpc	r22, r11
     296:	d1 05       	cpc	r29, r1
     298:	d1 05       	cpc	r29, r1
     29a:	d1 05       	cpc	r29, r1
     29c:	d1 05       	cpc	r29, r1
     29e:	d1 05       	cpc	r29, r1
     2a0:	d1 05       	cpc	r29, r1
     2a2:	d1 05       	cpc	r29, r1
     2a4:	6f 05       	cpc	r22, r15
     2a6:	d1 05       	cpc	r29, r1
     2a8:	d1 05       	cpc	r29, r1
     2aa:	d1 05       	cpc	r29, r1
     2ac:	d1 05       	cpc	r29, r1
     2ae:	d1 05       	cpc	r29, r1
     2b0:	d1 05       	cpc	r29, r1
     2b2:	d1 05       	cpc	r29, r1
     2b4:	8a 05       	cpc	r24, r10
     2b6:	d1 05       	cpc	r29, r1
     2b8:	d1 05       	cpc	r29, r1
     2ba:	d1 05       	cpc	r29, r1
     2bc:	d1 05       	cpc	r29, r1
     2be:	d1 05       	cpc	r29, r1
     2c0:	d1 05       	cpc	r29, r1
     2c2:	d1 05       	cpc	r29, r1
     2c4:	c5 05       	cpc	r28, r5
     2c6:	5d 28       	or	r5, r13
     2c8:	48 28       	or	r4, r8
     2ca:	4a 28       	or	r4, r10
     2cc:	4c 28       	or	r4, r12
     2ce:	4e 28       	or	r4, r14
     2d0:	50 28       	or	r5, r0
     2d2:	52 28       	or	r5, r2
     2d4:	54 28       	or	r5, r4
     2d6:	56 28       	or	r5, r6
     2d8:	ac 29       	or	r26, r12
     2da:	7e 2a       	or	r7, r30
     2dc:	18 2b       	or	r17, r24
     2de:	b2 2b       	or	r27, r18
     2e0:	4c 2c       	mov	r4, r12
     2e2:	e6 2c       	mov	r14, r6
     2e4:	80 2d       	mov	r24, r0
     2e6:	1a 2e       	mov	r1, r26
     2e8:	c4 2e       	mov	r12, r20
     2ea:	91 2f       	mov	r25, r17
     2ec:	a7 30       	cpi	r26, 0x07	; 7
     2ee:	ba 30       	cpi	r27, 0x0A	; 10
     2f0:	c8 30       	cpi	r28, 0x08	; 8
     2f2:	d8 30       	cpi	r29, 0x08	; 8
     2f4:	e8 30       	cpi	r30, 0x08	; 8
     2f6:	fc 30       	cpi	r31, 0x0C	; 12
     2f8:	1a 31       	cpi	r17, 0x1A	; 26
     2fa:	09 31       	cpi	r16, 0x19	; 25
     2fc:	4b 32       	cpi	r20, 0x2B	; 43
     2fe:	4e 32       	cpi	r20, 0x2E	; 46
     300:	71 32       	cpi	r23, 0x21	; 33
     302:	50 32       	cpi	r21, 0x20	; 32
     304:	74 32       	cpi	r23, 0x24	; 36
     306:	76 32       	cpi	r23, 0x26	; 38
     308:	78 32       	cpi	r23, 0x28	; 40
     30a:	7a 32       	cpi	r23, 0x2A	; 42
     30c:	52 32       	cpi	r21, 0x22	; 34
     30e:	c7 34       	cpi	r28, 0x47	; 71
     310:	d0 34       	cpi	r29, 0x40	; 64
     312:	e4 34       	cpi	r30, 0x44	; 68
     314:	da 34       	cpi	r29, 0x4A	; 74
     316:	ee 34       	cpi	r30, 0x4E	; 78
     318:	f8 34       	cpi	r31, 0x48	; 72
     31a:	02 35       	cpi	r16, 0x52	; 82
     31c:	0c 35       	cpi	r16, 0x5C	; 92
     31e:	16 35       	cpi	r17, 0x56	; 86
     320:	2a 35       	cpi	r18, 0x5A	; 90
     322:	34 35       	cpi	r19, 0x54	; 84
     324:	20 35       	cpi	r18, 0x50	; 80

00000326 <__ctors_end>:
     326:	11 24       	eor	r1, r1
     328:	1f be       	out	0x3f, r1	; 63
     32a:	cf ef       	ldi	r28, 0xFF	; 255
     32c:	d1 e8       	ldi	r29, 0x81	; 129
     32e:	de bf       	out	0x3e, r29	; 62
     330:	cd bf       	out	0x3d, r28	; 61
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	0c bf       	out	0x3c, r16	; 60

00000336 <__do_copy_data>:
     336:	19 e0       	ldi	r17, 0x09	; 9
     338:	a0 e0       	ldi	r26, 0x00	; 0
     33a:	b2 e0       	ldi	r27, 0x02	; 2
     33c:	ea e3       	ldi	r30, 0x3A	; 58
     33e:	fd e9       	ldi	r31, 0x9D	; 157
     340:	00 e0       	ldi	r16, 0x00	; 0
     342:	0b bf       	out	0x3b, r16	; 59
     344:	02 c0       	rjmp	.+4      	; 0x34a <__do_copy_data+0x14>
     346:	07 90       	elpm	r0, Z+
     348:	0d 92       	st	X+, r0
     34a:	aa 36       	cpi	r26, 0x6A	; 106
     34c:	b1 07       	cpc	r27, r17
     34e:	d9 f7       	brne	.-10     	; 0x346 <__do_copy_data+0x10>

00000350 <__do_clear_bss>:
     350:	23 e2       	ldi	r18, 0x23	; 35
     352:	aa e6       	ldi	r26, 0x6A	; 106
     354:	b9 e0       	ldi	r27, 0x09	; 9
     356:	01 c0       	rjmp	.+2      	; 0x35a <.do_clear_bss_start>

00000358 <.do_clear_bss_loop>:
     358:	1d 92       	st	X+, r1

0000035a <.do_clear_bss_start>:
     35a:	aa 32       	cpi	r26, 0x2A	; 42
     35c:	b2 07       	cpc	r27, r18
     35e:	e1 f7       	brne	.-8      	; 0x358 <.do_clear_bss_loop>
     360:	60 d5       	rcall	.+2752   	; 0xe22 <main>
     362:	0c 94 9b 4e 	jmp	0x9d36	; 0x9d36 <_exit>

00000366 <__bad_interrupt>:
     366:	4c ce       	rjmp	.-872    	; 0x0 <__vectors>

00000368 <APP_EepromReadByte>:
  for (uint16_t i = 0; i < size; i++)
  {
    if (APP_EepromReadByte(address + i) != data[i])
      APP_EepromWriteByte(address + i, data[i]);
  }
}
     368:	f9 99       	sbic	0x1f, 1	; 31
     36a:	fe cf       	rjmp	.-4      	; 0x368 <APP_EepromReadByte>
     36c:	92 bd       	out	0x22, r25	; 34
     36e:	81 bd       	out	0x21, r24	; 33
     370:	f8 9a       	sbi	0x1f, 0	; 31
     372:	80 b5       	in	r24, 0x20	; 32
     374:	08 95       	ret

00000376 <APP_EepromRead>:

/*****************************************************************************
*****************************************************************************/
void APP_EepromRead(uint16_t address, uint8_t *data, uint16_t size)
{
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
  for (uint16_t i = 0; i < size; i++)
     382:	41 15       	cp	r20, r1
     384:	51 05       	cpc	r21, r1
     386:	79 f0       	breq	.+30     	; 0x3a6 <APP_EepromRead+0x30>
     388:	8b 01       	movw	r16, r22
     38a:	04 0f       	add	r16, r20
     38c:	15 1f       	adc	r17, r21
     38e:	eb 01       	movw	r28, r22
     390:	7c 01       	movw	r14, r24
     392:	e6 1a       	sub	r14, r22
     394:	f7 0a       	sbc	r15, r23
  {
    data[i] = APP_EepromReadByte(address + i);
     396:	c7 01       	movw	r24, r14
     398:	8c 0f       	add	r24, r28
     39a:	9d 1f       	adc	r25, r29
     39c:	e5 df       	rcall	.-54     	; 0x368 <APP_EepromReadByte>
     39e:	89 93       	st	Y+, r24

/*****************************************************************************
*****************************************************************************/
void APP_EepromRead(uint16_t address, uint8_t *data, uint16_t size)
{
  for (uint16_t i = 0; i < size; i++)
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	c1 f7       	brne	.-16     	; 0x396 <APP_EepromRead+0x20>
  {
    data[i] = APP_EepromReadByte(address + i);
  }
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	08 95       	ret

000003b4 <APP_IbLoadSettings>:
}

/*****************************************************************************
*****************************************************************************/
void APP_IbLoadSettings(void)
{
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	61 97       	sbiw	r28, 0x11	; 17
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
  APP_EepromRead(APP_IB_EEPROM_OFFSET, (uint8_t *)&appIb, sizeof(appIb));
     3d0:	4a e2       	ldi	r20, 0x2A	; 42
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	68 e8       	ldi	r22, 0x88	; 136
     3d6:	70 e2       	ldi	r23, 0x20	; 32
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	cc df       	rcall	.-104    	; 0x376 <APP_EepromRead>

  if (APP_EEPROM_MAGIC != appIb.magic)
     3de:	80 91 ae 20 	lds	r24, 0x20AE
     3e2:	90 91 af 20 	lds	r25, 0x20AF
     3e6:	a0 91 b0 20 	lds	r26, 0x20B0
     3ea:	b0 91 b1 20 	lds	r27, 0x20B1
     3ee:	81 34       	cpi	r24, 0x41	; 65
     3f0:	9c 46       	sbci	r25, 0x6C	; 108
     3f2:	a5 46       	sbci	r26, 0x65	; 101
     3f4:	b8 47       	sbci	r27, 0x78	; 120
     3f6:	09 f4       	brne	.+2      	; 0x3fa <APP_IbLoadSettings+0x46>
     3f8:	7b c0       	rjmp	.+246    	; 0x4f0 <APP_IbLoadSettings+0x13c>
  {
    char hex[] = "0123456789abcdef";
     3fa:	81 e1       	ldi	r24, 0x11	; 17
     3fc:	e7 e1       	ldi	r30, 0x17	; 23
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	de 01       	movw	r26, r28
     402:	11 96       	adiw	r26, 0x01	; 1
     404:	01 90       	ld	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	8a 95       	dec	r24
     40a:	e1 f7       	brne	.-8      	; 0x404 <APP_IbLoadSettings+0x50>

/*-------------Initialize RF parameter----------------*/
    appIb.addr = rf_init(DEVICE_ADDRESS_L,PNEWELS_Buffer.deviceAddress);
     40c:	0f 2e       	mov	r0, r31
     40e:	f0 ee       	ldi	r31, 0xE0	; 224
     410:	ef 2e       	mov	r14, r31
     412:	ff e1       	ldi	r31, 0x1F	; 31
     414:	ff 2e       	mov	r15, r31
     416:	f0 2d       	mov	r31, r0
     418:	f7 01       	movw	r30, r14
     41a:	63 8d       	ldd	r22, Z+27	; 0x1b
     41c:	74 8d       	ldd	r23, Z+28	; 0x1c
     41e:	8c ef       	ldi	r24, 0xFC	; 252
     420:	9f e0       	ldi	r25, 0x0F	; 15
     422:	0e 94 49 21 	call	0x4292	; 0x4292 <rf_init>
     426:	08 e8       	ldi	r16, 0x88	; 136
     428:	10 e2       	ldi	r17, 0x20	; 32
     42a:	f8 01       	movw	r30, r16
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	80 83       	st	Z, r24
    appIb.panId = rf_init(DEVICE_PAN_L,PNEWELS_Buffer.devicePAN);
     430:	f7 01       	movw	r30, r14
     432:	65 8d       	ldd	r22, Z+29	; 0x1d
     434:	76 8d       	ldd	r23, Z+30	; 0x1e
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e1       	ldi	r25, 0x10	; 16
     43a:	0e 94 49 21 	call	0x4292	; 0x4292 <rf_init>
     43e:	f8 01       	movw	r30, r16
     440:	95 83       	std	Z+5, r25	; 0x05
     442:	84 83       	std	Z+4, r24	; 0x04
    appIb.channel = rf_init(DEVICE_CHANNEL_L,PNEWELS_Buffer.deviceChannel);
     444:	f7 01       	movw	r30, r14
     446:	61 8d       	ldd	r22, Z+25	; 0x19
     448:	72 8d       	ldd	r23, Z+26	; 0x1a
     44a:	8e ef       	ldi	r24, 0xFE	; 254
     44c:	9f e0       	ldi	r25, 0x0F	; 15
     44e:	0e 94 49 21 	call	0x4292	; 0x4292 <rf_init>
     452:	f8 01       	movw	r30, r16
     454:	93 83       	std	Z+3, r25	; 0x03
     456:	82 83       	std	Z+2, r24	; 0x02
//------------------------------------------------------
/*-------------Initialize Device parameter----------------*/
	/*PNEWELS_Buffer.groupID = readE2prom(GROUP_ID);*/

    memset(appIb.name, ' ', sizeof(appIb.name));
     458:	40 e2       	ldi	r20, 0x20	; 32
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	60 e2       	ldi	r22, 0x20	; 32
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	8e e8       	ldi	r24, 0x8E	; 142
     462:	90 e2       	ldi	r25, 0x20	; 32
     464:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <memset>
    memcpy(appIb.name, "Device_xxxx", strlen("Device_xxxx"));
     468:	8b e0       	ldi	r24, 0x0B	; 11
     46a:	eb e0       	ldi	r30, 0x0B	; 11
     46c:	f2 e0       	ldi	r31, 0x02	; 2
     46e:	ae e8       	ldi	r26, 0x8E	; 142
     470:	b0 e2       	ldi	r27, 0x20	; 32
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <APP_IbLoadSettings+0xbe>
    appIb.name[7] = hex[(appIb.addr >> 12) & 0x0f];
     47a:	f8 01       	movw	r30, r16
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	fc 01       	movw	r30, r24
     482:	ef 2f       	mov	r30, r31
     484:	ff 27       	eor	r31, r31
     486:	e2 95       	swap	r30
     488:	ef 70       	andi	r30, 0x0F	; 15
     48a:	21 e0       	ldi	r18, 0x01	; 1
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	2c 0f       	add	r18, r28
     490:	3d 1f       	adc	r19, r29
     492:	e2 0f       	add	r30, r18
     494:	f3 1f       	adc	r31, r19
     496:	20 81       	ld	r18, Z
     498:	f8 01       	movw	r30, r16
     49a:	25 87       	std	Z+13, r18	; 0x0d
    appIb.name[8] = hex[(appIb.addr >> 8) & 0x0f];
     49c:	e9 2f       	mov	r30, r25
     49e:	ff 27       	eor	r31, r31
     4a0:	ef 70       	andi	r30, 0x0F	; 15
     4a2:	ff 27       	eor	r31, r31
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	2c 0f       	add	r18, r28
     4aa:	3d 1f       	adc	r19, r29
     4ac:	e2 0f       	add	r30, r18
     4ae:	f3 1f       	adc	r31, r19
     4b0:	20 81       	ld	r18, Z
     4b2:	f8 01       	movw	r30, r16
     4b4:	26 87       	std	Z+14, r18	; 0x0e
    appIb.name[9] = hex[(appIb.addr >> 4) & 0x0f];
     4b6:	fc 01       	movw	r30, r24
     4b8:	f2 95       	swap	r31
     4ba:	e2 95       	swap	r30
     4bc:	ef 70       	andi	r30, 0x0F	; 15
     4be:	ef 27       	eor	r30, r31
     4c0:	ff 70       	andi	r31, 0x0F	; 15
     4c2:	ef 27       	eor	r30, r31
     4c4:	ef 70       	andi	r30, 0x0F	; 15
     4c6:	ff 27       	eor	r31, r31
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	2c 0f       	add	r18, r28
     4ce:	3d 1f       	adc	r19, r29
     4d0:	e2 0f       	add	r30, r18
     4d2:	f3 1f       	adc	r31, r19
     4d4:	20 81       	ld	r18, Z
     4d6:	f8 01       	movw	r30, r16
     4d8:	27 87       	std	Z+15, r18	; 0x0f
    appIb.name[10] = hex[appIb.addr & 0x0f];
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	99 27       	eor	r25, r25
     4de:	e1 e0       	ldi	r30, 0x01	; 1
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ec 0f       	add	r30, r28
     4e4:	fd 1f       	adc	r31, r29
     4e6:	e8 0f       	add	r30, r24
     4e8:	f9 1f       	adc	r31, r25
     4ea:	80 81       	ld	r24, Z
     4ec:	f8 01       	movw	r30, r16
     4ee:	80 8b       	std	Z+16, r24	; 0x10
  }
}
     4f0:	61 96       	adiw	r28, 0x11	; 17
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <APP_IbLoadSettings_WPS>:

void APP_IbLoadSettings_WPS(void)
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	APP_EepromRead(APP_IB_EEPROM_OFFSET, (uint8_t *)&appIb, sizeof(appIb));
     50e:	4a e2       	ldi	r20, 0x2A	; 42
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	68 e8       	ldi	r22, 0x88	; 136
     514:	70 e2       	ldi	r23, 0x20	; 32
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	2d df       	rcall	.-422    	; 0x376 <APP_EepromRead>

	if (APP_EEPROM_MAGIC != appIb.magic)
     51c:	80 91 ae 20 	lds	r24, 0x20AE
     520:	90 91 af 20 	lds	r25, 0x20AF
     524:	a0 91 b0 20 	lds	r26, 0x20B0
     528:	b0 91 b1 20 	lds	r27, 0x20B1
     52c:	81 34       	cpi	r24, 0x41	; 65
     52e:	9c 46       	sbci	r25, 0x6C	; 108
     530:	a5 46       	sbci	r26, 0x65	; 101
     532:	b8 47       	sbci	r27, 0x78	; 120
     534:	11 f1       	breq	.+68     	; 0x57a <APP_IbLoadSettings_WPS+0x70>
	{
		char hex[] = "0123456789abcdef";

		/*-------------Initialize RF parameter----------------*/
		appIb.addr = WPS_ADDRESS;
     536:	c8 e8       	ldi	r28, 0x88	; 136
     538:	d0 e2       	ldi	r29, 0x20	; 32
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	99 83       	std	Y+1, r25	; 0x01
     540:	88 83       	st	Y, r24
		appIb.panId = WPS_PANID;
     542:	9d 83       	std	Y+5, r25	; 0x05
     544:	8c 83       	std	Y+4, r24	; 0x04
		appIb.channel = WPS_CHANNEL;
     546:	8f e0       	ldi	r24, 0x0F	; 15
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9b 83       	std	Y+3, r25	; 0x03
     54c:	8a 83       	std	Y+2, r24	; 0x02
		//------------------------------------------------------

		memset(appIb.name, ' ', sizeof(appIb.name));
     54e:	40 e2       	ldi	r20, 0x20	; 32
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	60 e2       	ldi	r22, 0x20	; 32
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	8e e8       	ldi	r24, 0x8E	; 142
     558:	90 e2       	ldi	r25, 0x20	; 32
     55a:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <memset>
		memcpy(appIb.name, "Device_xxxx", strlen("Device_xxxx"));
     55e:	8b e0       	ldi	r24, 0x0B	; 11
     560:	eb e0       	ldi	r30, 0x0B	; 11
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	ae e8       	ldi	r26, 0x8E	; 142
     566:	b0 e2       	ldi	r27, 0x20	; 32
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	8a 95       	dec	r24
     56e:	e1 f7       	brne	.-8      	; 0x568 <APP_IbLoadSettings_WPS+0x5e>
		appIb.name[7] = hex[(appIb.addr >> 12) & 0x0f];
     570:	86 e6       	ldi	r24, 0x66	; 102
     572:	8d 87       	std	Y+13, r24	; 0x0d
		appIb.name[8] = hex[(appIb.addr >> 8) & 0x0f];
     574:	8e 87       	std	Y+14, r24	; 0x0e
		appIb.name[9] = hex[(appIb.addr >> 4) & 0x0f];
     576:	8f 87       	std	Y+15, r24	; 0x0f
		appIb.name[10] = hex[appIb.addr & 0x0f];
     578:	88 8b       	std	Y+16, r24	; 0x10
	}
	APP_NwkInit(); //execute new setting
     57a:	4e d0       	rcall	.+156    	; 0x618 <APP_NwkInit>
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <appNwkDataConf>:
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
    if (req == &appNwkBuffer[idx].req)
     582:	29 e0       	ldi	r18, 0x09	; 9
     584:	8c 36       	cpi	r24, 0x6C	; 108
     586:	92 07       	cpc	r25, r18
     588:	69 f0       	breq	.+26     	; 0x5a4 <appNwkDataConf+0x22>
     58a:	4d ee       	ldi	r20, 0xED	; 237
     58c:	59 e0       	ldi	r21, 0x09	; 9
     58e:	bc 01       	movw	r22, r24
*****************************************************************************/
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
     590:	21 e0       	ldi	r18, 0x01	; 1
    if (req == &appNwkBuffer[idx].req)
     592:	46 17       	cp	r20, r22
     594:	57 07       	cpc	r21, r23
     596:	39 f0       	breq	.+14     	; 0x5a6 <appNwkDataConf+0x24>
*****************************************************************************/
static void appNwkDataConf(NWK_DataReq_t *req)
{
  uint8_t idx;

  for (idx = 0; idx < APP_NWK_BUFFERS_SIZE; idx++)
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	4f 57       	subi	r20, 0x7F	; 127
     59c:	5f 4f       	sbci	r21, 0xFF	; 255
     59e:	24 31       	cpi	r18, 0x14	; 20
     5a0:	c1 f7       	brne	.-16     	; 0x592 <appNwkDataConf+0x10>
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <appNwkDataConf+0x24>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
    if (req == &appNwkBuffer[idx].req)
      break;

  if (NWK_SUCCESS_STATUS == req->status)
     5a6:	fc 01       	movw	r30, r24
     5a8:	37 85       	ldd	r19, Z+15	; 0x0f
     5aa:	31 11       	cpse	r19, r1
     5ac:	0e c0       	rjmp	.+28     	; 0x5ca <appNwkDataConf+0x48>
  {
    appNwkBuffer[idx].busy = false;
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	f6 95       	lsr	r31
     5b4:	fe 2f       	mov	r31, r30
     5b6:	ee 27       	eor	r30, r30
     5b8:	f7 95       	ror	r31
     5ba:	e7 95       	ror	r30
     5bc:	2e 0f       	add	r18, r30
     5be:	3f 1f       	adc	r19, r31
     5c0:	f9 01       	movw	r30, r18
     5c2:	e6 59       	subi	r30, 0x96	; 150
     5c4:	f6 4f       	sbci	r31, 0xF6	; 246
     5c6:	10 82       	st	Z, r1
     5c8:	08 95       	ret
  }
  else
  {
    if (--appNwkBuffer[idx].retries)
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	f9 01       	movw	r30, r18
     5ce:	f6 95       	lsr	r31
     5d0:	fe 2f       	mov	r31, r30
     5d2:	ee 27       	eor	r30, r30
     5d4:	f7 95       	ror	r31
     5d6:	e7 95       	ror	r30
     5d8:	e2 0f       	add	r30, r18
     5da:	f3 1f       	adc	r31, r19
     5dc:	e6 59       	subi	r30, 0x96	; 150
     5de:	f6 4f       	sbci	r31, 0xF6	; 246
     5e0:	41 81       	ldd	r20, Z+1	; 0x01
     5e2:	41 50       	subi	r20, 0x01	; 1
     5e4:	41 83       	std	Z+1, r20	; 0x01
     5e6:	44 23       	and	r20, r20
     5e8:	19 f0       	breq	.+6      	; 0x5f0 <appNwkDataConf+0x6e>
      NWK_DataReq(req);
     5ea:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <NWK_DataReq>
     5ee:	08 95       	ret
    else
      appNwkBuffer[idx].busy = false;
     5f0:	f9 01       	movw	r30, r18
     5f2:	f6 95       	lsr	r31
     5f4:	fe 2f       	mov	r31, r30
     5f6:	ee 27       	eor	r30, r30
     5f8:	f7 95       	ror	r31
     5fa:	e7 95       	ror	r30
     5fc:	2e 0f       	add	r18, r30
     5fe:	3f 1f       	adc	r19, r31
     600:	f9 01       	movw	r30, r18
     602:	e6 59       	subi	r30, 0x96	; 150
     604:	f6 4f       	sbci	r31, 0xF6	; 246
     606:	10 82       	st	Z, r1
     608:	08 95       	ret

0000060a <appNwkDataInd>:
/*************************************************************************//**
*****************************************************************************/
static bool appNwkDataInd(NWK_DataInd_t *ind)
{
  //return APP_CommandReceived(ind->data, ind->size);
  return pneIncomingData(ind->data, ind->size);
     60a:	fc 01       	movw	r30, r24
     60c:	61 85       	ldd	r22, Z+9	; 0x09
     60e:	87 81       	ldd	r24, Z+7	; 0x07
     610:	90 85       	ldd	r25, Z+8	; 0x08
     612:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <pneIncomingData>
}
     616:	08 95       	ret

00000618 <APP_NwkInit>:
}

/*************************************************************************//**
*****************************************************************************/
void APP_NwkInit(void)
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
  NWK_SetAddr(appIb.addr);
     61c:	c8 e8       	ldi	r28, 0x88	; 136
     61e:	d0 e2       	ldi	r29, 0x20	; 32
     620:	88 81       	ld	r24, Y
     622:	99 81       	ldd	r25, Y+1	; 0x01
     624:	0e 94 00 0c 	call	0x1800	; 0x1800 <NWK_SetAddr>
  NWK_SetPanId(appIb.panId);
     628:	8c 81       	ldd	r24, Y+4	; 0x04
     62a:	9d 81       	ldd	r25, Y+5	; 0x05
     62c:	0e 94 06 0c 	call	0x180c	; 0x180c <NWK_SetPanId>
  PHY_SetChannel(appIb.channel);
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <PHY_SetChannel>
  PHY_SetRxState(true);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 cc 13 	call	0x2798	; 0x2798 <PHY_SetRxState>

  NWK_SetSecurityKey((uint8_t *)"Security12345678");	//passphrase for AES encryption
     63c:	88 e2       	ldi	r24, 0x28	; 40
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 46 10 	call	0x208c	; 0x208c <NWK_SetSecurityKey>

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);
     644:	65 e0       	ldi	r22, 0x05	; 5
     646:	73 e0       	ldi	r23, 0x03	; 3
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <NWK_OpenEndpoint>
     64e:	aa e6       	ldi	r26, 0x6A	; 106
     650:	b9 e0       	ldi	r27, 0x09	; 9
     652:	e5 e7       	ldi	r30, 0x75	; 117
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	69 e8       	ldi	r22, 0x89	; 137
     658:	73 e1       	ldi	r23, 0x13	; 19

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    appNwkBuffer[i].busy = false;
    appNwkBuffer[i].req.dstAddr = 0;
    appNwkBuffer[i].req.dstEndpoint = APP_ENDPOINT;
     65a:	81 e0       	ldi	r24, 0x01	; 1
    appNwkBuffer[i].req.srcEndpoint = APP_ENDPOINT;
    appNwkBuffer[i].req.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY; //enable security mode AES
     65c:	93 e0       	ldi	r25, 0x03	; 3
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
    appNwkBuffer[i].req.confirm = appNwkDataConf;
     65e:	41 ec       	ldi	r20, 0xC1	; 193
     660:	52 e0       	ldi	r21, 0x02	; 2

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    appNwkBuffer[i].busy = false;
     662:	1c 92       	st	X, r1
    appNwkBuffer[i].req.dstAddr = 0;
     664:	18 96       	adiw	r26, 0x08	; 8
     666:	1c 92       	st	X, r1
     668:	1e 92       	st	-X, r1
     66a:	17 97       	sbiw	r26, 0x07	; 7
     66c:	ef 01       	movw	r28, r30
     66e:	22 97       	sbiw	r28, 0x02	; 2
    appNwkBuffer[i].req.dstEndpoint = APP_ENDPOINT;
     670:	88 83       	st	Y, r24
     672:	21 96       	adiw	r28, 0x01	; 1
    appNwkBuffer[i].req.srcEndpoint = APP_ENDPOINT;
     674:	88 83       	st	Y, r24
    appNwkBuffer[i].req.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY; //enable security mode AES
     676:	90 83       	st	Z, r25
     678:	9f 01       	movw	r18, r30
     67a:	28 5f       	subi	r18, 0xF8	; 248
     67c:	3f 4f       	sbci	r19, 0xFF	; 255
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
     67e:	32 83       	std	Z+2, r19	; 0x02
     680:	21 83       	std	Z+1, r18	; 0x01
    appNwkBuffer[i].req.confirm = appNwkDataConf;
     682:	55 83       	std	Z+5, r21	; 0x05
     684:	44 83       	std	Z+4, r20	; 0x04
     686:	af 57       	subi	r26, 0x7F	; 127
     688:	bf 4f       	sbci	r27, 0xFF	; 255
     68a:	ef 57       	subi	r30, 0x7F	; 127
     68c:	ff 4f       	sbci	r31, 0xFF	; 255

  NWK_SetSecurityKey((uint8_t *)"Security12345678");	//passphrase for AES encryption

  NWK_OpenEndpoint(APP_ENDPOINT, appNwkDataInd);

  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
     68e:	e6 17       	cp	r30, r22
     690:	f7 07       	cpc	r31, r23
     692:	39 f7       	brne	.-50     	; 0x662 <APP_NwkInit+0x4a>
    appNwkBuffer[i].req.data = appNwkBuffer[i].data;
    appNwkBuffer[i].req.confirm = appNwkDataConf;
  }

  //APP_CommandReport();
  pneOutgoingData();
     694:	0e 94 ac 1b 	call	0x3758	; 0x3758 <pneOutgoingData>
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <APP_NwkGetBuffer>:
*****************************************************************************/
AppNwkBuffer_t *APP_NwkGetBuffer(void)
{
  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
  {
    if (false == appNwkBuffer[i].busy)
     69e:	80 91 6a 09 	lds	r24, 0x096A
     6a2:	88 23       	and	r24, r24
     6a4:	59 f0       	breq	.+22     	; 0x6bc <APP_NwkGetBuffer+0x1e>
     6a6:	eb ee       	ldi	r30, 0xEB	; 235
     6a8:	f9 e0       	ldi	r31, 0x09	; 9
     6aa:	6e e7       	ldi	r22, 0x7E	; 126
     6ac:	73 e1       	ldi	r23, 0x13	; 19
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	ac 01       	movw	r20, r24
     6b4:	20 81       	ld	r18, Z
     6b6:	21 11       	cpse	r18, r1
     6b8:	18 c0       	rjmp	.+48     	; 0x6ea <APP_NwkGetBuffer+0x4c>
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <APP_NwkGetBuffer+0x22>
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	50 e0       	ldi	r21, 0x00	; 0
    {
      appNwkBuffer[i].busy = true;
     6c0:	fa 01       	movw	r30, r20
     6c2:	f6 95       	lsr	r31
     6c4:	fe 2f       	mov	r31, r30
     6c6:	ee 27       	eor	r30, r30
     6c8:	f7 95       	ror	r31
     6ca:	e7 95       	ror	r30
     6cc:	4e 0f       	add	r20, r30
     6ce:	5f 1f       	adc	r21, r31
     6d0:	fa 01       	movw	r30, r20
     6d2:	e6 59       	subi	r30, 0x96	; 150
     6d4:	f6 4f       	sbci	r31, 0xF6	; 246
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 83       	st	Z, r24
      appNwkBuffer[i].size = 0;
     6da:	df 01       	movw	r26, r30
     6dc:	a0 58       	subi	r26, 0x80	; 128
     6de:	bf 4f       	sbci	r27, 0xFF	; 255
     6e0:	1c 92       	st	X, r1
      appNwkBuffer[i].retries = APP_NWK_RETRIES;
     6e2:	81 83       	std	Z+1, r24	; 0x01
      return &appNwkBuffer[i];
     6e4:	8e 2f       	mov	r24, r30
     6e6:	9f 2f       	mov	r25, r31
     6e8:	08 95       	ret
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	ef 57       	subi	r30, 0x7F	; 127
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255

/*************************************************************************//**
*****************************************************************************/
AppNwkBuffer_t *APP_NwkGetBuffer(void)
{
  for (uint8_t i = 0; i < APP_NWK_BUFFERS_SIZE; i++)
     6f0:	e6 17       	cp	r30, r22
     6f2:	f7 07       	cpc	r31, r23
     6f4:	f1 f6       	brne	.-68     	; 0x6b2 <APP_NwkGetBuffer+0x14>
      appNwkBuffer[i].retries = APP_NWK_RETRIES;
      return &appNwkBuffer[i];
    }
  }

  return NULL;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
}
     6fa:	08 95       	ret

000006fc <APP_NwkSendBuffer>:

/*************************************************************************//**
*****************************************************************************/
void APP_NwkSendBuffer(AppNwkBuffer_t *buf)
{
  if (buf->size)
     6fc:	fc 01       	movw	r30, r24
     6fe:	e0 58       	subi	r30, 0x80	; 128
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	20 81       	ld	r18, Z
     704:	22 23       	and	r18, r18
     706:	31 f0       	breq	.+12     	; 0x714 <APP_NwkSendBuffer+0x18>
  {
    buf->req.size = buf->size;
     708:	fc 01       	movw	r30, r24
     70a:	26 87       	std	Z+14, r18	; 0x0e
    NWK_DataReq(&buf->req);
     70c:	02 96       	adiw	r24, 0x02	; 2
     70e:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <NWK_DataReq>
     712:	08 95       	ret
  }
  else
  {
    buf->busy = false;
     714:	fc 01       	movw	r30, r24
     716:	10 82       	st	Z, r1
     718:	08 95       	ret

0000071a <pneVerify_received>:
#include "PNE_Factory.h"
#include "crc.h"
#include "pneConfig.h"

uint8_t pneVerify_received(uint8_t *data, uint8_t size)
{
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
	uint16_t signature_d = (((uint16_t)data[size-2]) << 8) | ((uint16_t)data[size-1]);
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	9c 01       	movw	r18, r24
     722:	26 0f       	add	r18, r22
     724:	37 1f       	adc	r19, r23
     726:	f9 01       	movw	r30, r18
     728:	32 97       	sbiw	r30, 0x02	; 2
     72a:	c0 81       	ld	r28, Z
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	dc 2f       	mov	r29, r28
     730:	cc 27       	eor	r28, r28
     732:	31 96       	adiw	r30, 0x01	; 1
     734:	20 81       	ld	r18, Z
     736:	c2 2b       	or	r28, r18
// 	int_to_ascii((uint8_t)(signature_d >> 8));
// 	int_to_ascii((uint8_t)(signature_d));
// 	send_usart_char("\r\n");
	/*int_to_ascii(data[9]);*/
	uint16_t signature = pnesign(((char*)(data)), ((uint16_t)(size - 2)), SIGNATURE_KEY, strlen(SIGNATURE_KEY)); //need some rework
     738:	62 50       	subi	r22, 0x02	; 2
     73a:	71 09       	sbc	r23, r1
     73c:	26 e0       	ldi	r18, 0x06	; 6
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	49 e3       	ldi	r20, 0x39	; 57
     742:	52 e0       	ldi	r21, 0x02	; 2
     744:	0e 94 68 4d 	call	0x9ad0	; 0x9ad0 <pnesign>
// 	int_to_ascii((uint8_t)(signature >> 8));
// 	int_to_ascii((uint8_t)(signature));
// 	send_usart_char("\r\n");
	if (signature == signature_d )
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	c8 17       	cp	r28, r24
     74c:	d9 07       	cpc	r29, r25
     74e:	09 f0       	breq	.+2      	; 0x752 <pneVerify_received+0x38>
     750:	20 e0       	ldi	r18, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}
     752:	82 2f       	mov	r24, r18
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <twi_master_bus_reset>:
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 8d 13 	sts	0x138D, r24
     760:	10 92 7f 13 	sts	0x137F, r1
     764:	80 e9       	ldi	r24, 0x90	; 144
     766:	80 93 bc 00 	sts	0x00BC, r24
     76a:	08 95       	ret

0000076c <twi_master_write>:
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	29 f1       	breq	.+74     	; 0x7bc <twi_master_write+0x50>
     772:	80 91 7f 13 	lds	r24, 0x137F
     776:	81 11       	cpse	r24, r1
     778:	23 c0       	rjmp	.+70     	; 0x7c0 <twi_master_write+0x54>
     77a:	e7 e8       	ldi	r30, 0x87	; 135
     77c:	f3 e1       	ldi	r31, 0x13	; 19
     77e:	71 83       	std	Z+1, r23	; 0x01
     780:	60 83       	st	Z, r22
     782:	13 82       	std	Z+3, r1	; 0x03
     784:	12 82       	std	Z+2, r1	; 0x02
     786:	15 82       	std	Z+5, r1	; 0x05
     788:	14 82       	std	Z+4, r1	; 0x04
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 7f 13 	sts	0x137F, r24
     790:	fb 01       	movw	r30, r22
     792:	84 81       	ldd	r24, Z+4	; 0x04
     794:	95 81       	ldd	r25, Z+5	; 0x05
     796:	89 2b       	or	r24, r25
     798:	21 f4       	brne	.+8      	; 0x7a2 <twi_master_write+0x36>
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	80 93 8d 13 	sts	0x138D, r24
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <twi_master_write+0x3c>
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	80 93 8d 13 	sts	0x138D, r24
     7a8:	85 ea       	ldi	r24, 0xA5	; 165
     7aa:	80 93 bc 00 	sts	0x00BC, r24
     7ae:	80 91 7f 13 	lds	r24, 0x137F
     7b2:	81 11       	cpse	r24, r1
     7b4:	fc cf       	rjmp	.-8      	; 0x7ae <twi_master_write+0x42>
     7b6:	80 91 8e 13 	lds	r24, 0x138E
     7ba:	08 95       	ret
     7bc:	88 ef       	ldi	r24, 0xF8	; 248
     7be:	08 95       	ret
     7c0:	80 e8       	ldi	r24, 0x80	; 128
     7c2:	08 95       	ret

000007c4 <twi_master_read>:
     7c4:	70 93 88 13 	sts	0x1388, r23
     7c8:	60 93 87 13 	sts	0x1387, r22
     7cc:	61 15       	cp	r22, r1
     7ce:	71 05       	cpc	r23, r1
     7d0:	41 f1       	breq	.+80     	; 0x822 <twi_master_read+0x5e>
     7d2:	fb 01       	movw	r30, r22
     7d4:	80 85       	ldd	r24, Z+8	; 0x08
     7d6:	91 85       	ldd	r25, Z+9	; 0x09
     7d8:	89 2b       	or	r24, r25
     7da:	29 f1       	breq	.+74     	; 0x826 <twi_master_read+0x62>
     7dc:	80 91 7f 13 	lds	r24, 0x137F
     7e0:	81 11       	cpse	r24, r1
     7e2:	23 c0       	rjmp	.+70     	; 0x82a <twi_master_read+0x66>
     7e4:	e7 e8       	ldi	r30, 0x87	; 135
     7e6:	f3 e1       	ldi	r31, 0x13	; 19
     7e8:	13 82       	std	Z+3, r1	; 0x03
     7ea:	12 82       	std	Z+2, r1	; 0x02
     7ec:	15 82       	std	Z+5, r1	; 0x05
     7ee:	14 82       	std	Z+4, r1	; 0x04
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 7f 13 	sts	0x137F, r24
     7f6:	fb 01       	movw	r30, r22
     7f8:	84 81       	ldd	r24, Z+4	; 0x04
     7fa:	95 81       	ldd	r25, Z+5	; 0x05
     7fc:	89 2b       	or	r24, r25
     7fe:	21 f4       	brne	.+8      	; 0x808 <twi_master_read+0x44>
     800:	85 e0       	ldi	r24, 0x05	; 5
     802:	80 93 8d 13 	sts	0x138D, r24
     806:	03 c0       	rjmp	.+6      	; 0x80e <twi_master_read+0x4a>
     808:	83 e0       	ldi	r24, 0x03	; 3
     80a:	80 93 8d 13 	sts	0x138D, r24
     80e:	85 ea       	ldi	r24, 0xA5	; 165
     810:	80 93 bc 00 	sts	0x00BC, r24
     814:	80 91 7f 13 	lds	r24, 0x137F
     818:	81 11       	cpse	r24, r1
     81a:	fc cf       	rjmp	.-8      	; 0x814 <twi_master_read+0x50>
     81c:	80 91 8e 13 	lds	r24, 0x138E
     820:	08 95       	ret
     822:	88 ef       	ldi	r24, 0xF8	; 248
     824:	08 95       	ret
     826:	88 ef       	ldi	r24, 0xF8	; 248
     828:	08 95       	ret
     82a:	80 e8       	ldi	r24, 0x80	; 128
     82c:	08 95       	ret

0000082e <twi_master_init>:
     82e:	f8 94       	cli
     830:	ec eb       	ldi	r30, 0xBC	; 188
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	10 82       	st	Z, r1
     836:	10 92 b9 00 	sts	0x00B9, r1
     83a:	db 01       	movw	r26, r22
     83c:	14 96       	adiw	r26, 0x04	; 4
     83e:	8c 91       	ld	r24, X
     840:	80 93 b8 00 	sts	0x00B8, r24
     844:	80 81       	ld	r24, Z
     846:	81 60       	ori	r24, 0x01	; 1
     848:	80 83       	st	Z, r24
     84a:	78 94       	sei
     84c:	10 92 7e 13 	sts	0x137E, r1
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret

00000854 <__vector_39>:
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	0b b6       	in	r0, 0x3b	; 59
     860:	0f 92       	push	r0
     862:	2f 93       	push	r18
     864:	3f 93       	push	r19
     866:	4f 93       	push	r20
     868:	5f 93       	push	r21
     86a:	6f 93       	push	r22
     86c:	7f 93       	push	r23
     86e:	8f 93       	push	r24
     870:	9f 93       	push	r25
     872:	af 93       	push	r26
     874:	bf 93       	push	r27
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
     87a:	80 91 b9 00 	lds	r24, 0x00B9
     87e:	88 7f       	andi	r24, 0xF8	; 248
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	89 3c       	cpi	r24, 0xC9	; 201
     884:	91 05       	cpc	r25, r1
     886:	08 f0       	brcs	.+2      	; 0x88a <__vector_39+0x36>
     888:	8c c1       	rjmp	.+792    	; 0xba2 <__vector_39+0x34e>
     88a:	fc 01       	movw	r30, r24
     88c:	88 27       	eor	r24, r24
     88e:	e6 56       	subi	r30, 0x66	; 102
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	8f 4f       	sbci	r24, 0xFF	; 255
     894:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <__tablejump2__>
     898:	80 91 8d 13 	lds	r24, 0x138D
     89c:	9e ef       	ldi	r25, 0xFE	; 254
     89e:	98 0f       	add	r25, r24
     8a0:	93 30       	cpi	r25, 0x03	; 3
     8a2:	60 f4       	brcc	.+24     	; 0x8bc <__vector_39+0x68>
     8a4:	e0 91 87 13 	lds	r30, 0x1387
     8a8:	f0 91 88 13 	lds	r31, 0x1388
     8ac:	80 81       	ld	r24, Z
     8ae:	8e 7f       	andi	r24, 0xFE	; 254
     8b0:	80 93 bb 00 	sts	0x00BB, r24
     8b4:	85 e8       	ldi	r24, 0x85	; 133
     8b6:	80 93 bc 00 	sts	0x00BC, r24
     8ba:	8b c1       	rjmp	.+790    	; 0xbd2 <__vector_39+0x37e>
     8bc:	85 30       	cpi	r24, 0x05	; 5
     8be:	61 f4       	brne	.+24     	; 0x8d8 <__vector_39+0x84>
     8c0:	e0 91 87 13 	lds	r30, 0x1387
     8c4:	f0 91 88 13 	lds	r31, 0x1388
     8c8:	80 81       	ld	r24, Z
     8ca:	81 60       	ori	r24, 0x01	; 1
     8cc:	80 93 bb 00 	sts	0x00BB, r24
     8d0:	85 e8       	ldi	r24, 0x85	; 133
     8d2:	80 93 bc 00 	sts	0x00BC, r24
     8d6:	7d c1       	rjmp	.+762    	; 0xbd2 <__vector_39+0x37e>
     8d8:	40 df       	rcall	.-384    	; 0x75a <twi_master_bus_reset>
     8da:	8b ef       	ldi	r24, 0xFB	; 251
     8dc:	80 93 8e 13 	sts	0x138E, r24
     8e0:	78 c1       	rjmp	.+752    	; 0xbd2 <__vector_39+0x37e>
     8e2:	80 91 8d 13 	lds	r24, 0x138D
     8e6:	84 30       	cpi	r24, 0x04	; 4
     8e8:	51 f5       	brne	.+84     	; 0x93e <__vector_39+0xea>
     8ea:	e7 e8       	ldi	r30, 0x87	; 135
     8ec:	f3 e1       	ldi	r31, 0x13	; 19
     8ee:	84 81       	ldd	r24, Z+4	; 0x04
     8f0:	95 81       	ldd	r25, Z+5	; 0x05
     8f2:	01 90       	ld	r0, Z+
     8f4:	f0 81       	ld	r31, Z
     8f6:	e0 2d       	mov	r30, r0
     8f8:	20 85       	ldd	r18, Z+8	; 0x08
     8fa:	31 85       	ldd	r19, Z+9	; 0x09
     8fc:	82 17       	cp	r24, r18
     8fe:	93 07       	cpc	r25, r19
     900:	98 f4       	brcc	.+38     	; 0x928 <__vector_39+0xd4>
     902:	26 81       	ldd	r18, Z+6	; 0x06
     904:	37 81       	ldd	r19, Z+7	; 0x07
     906:	ac 01       	movw	r20, r24
     908:	4f 5f       	subi	r20, 0xFF	; 255
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	50 93 8c 13 	sts	0x138C, r21
     910:	40 93 8b 13 	sts	0x138B, r20
     914:	f9 01       	movw	r30, r18
     916:	e8 0f       	add	r30, r24
     918:	f9 1f       	adc	r31, r25
     91a:	80 81       	ld	r24, Z
     91c:	80 93 bb 00 	sts	0x00BB, r24
     920:	85 e8       	ldi	r24, 0x85	; 133
     922:	80 93 bc 00 	sts	0x00BC, r24
     926:	55 c1       	rjmp	.+682    	; 0xbd2 <__vector_39+0x37e>
     928:	84 e9       	ldi	r24, 0x94	; 148
     92a:	80 93 bc 00 	sts	0x00BC, r24
     92e:	e7 e8       	ldi	r30, 0x87	; 135
     930:	f3 e1       	ldi	r31, 0x13	; 19
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	86 83       	std	Z+6, r24	; 0x06
     936:	17 82       	std	Z+7, r1	; 0x07
     938:	10 92 7f 13 	sts	0x137F, r1
     93c:	4a c1       	rjmp	.+660    	; 0xbd2 <__vector_39+0x37e>
     93e:	9e ef       	ldi	r25, 0xFE	; 254
     940:	98 0f       	add	r25, r24
     942:	92 30       	cpi	r25, 0x02	; 2
     944:	38 f5       	brcc	.+78     	; 0x994 <__vector_39+0x140>
     946:	e7 e8       	ldi	r30, 0x87	; 135
     948:	f3 e1       	ldi	r31, 0x13	; 19
     94a:	82 81       	ldd	r24, Z+2	; 0x02
     94c:	93 81       	ldd	r25, Z+3	; 0x03
     94e:	a0 81       	ld	r26, Z
     950:	b1 81       	ldd	r27, Z+1	; 0x01
     952:	a8 0f       	add	r26, r24
     954:	b9 1f       	adc	r27, r25
     956:	11 96       	adiw	r26, 0x01	; 1
     958:	2c 91       	ld	r18, X
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	93 83       	std	Z+3, r25	; 0x03
     95e:	82 83       	std	Z+2, r24	; 0x02
     960:	20 93 bb 00 	sts	0x00BB, r18
     964:	25 e8       	ldi	r18, 0x85	; 133
     966:	20 93 bc 00 	sts	0x00BC, r18
     96a:	01 90       	ld	r0, Z+
     96c:	f0 81       	ld	r31, Z
     96e:	e0 2d       	mov	r30, r0
     970:	24 81       	ldd	r18, Z+4	; 0x04
     972:	35 81       	ldd	r19, Z+5	; 0x05
     974:	28 17       	cp	r18, r24
     976:	39 07       	cpc	r19, r25
     978:	09 f0       	breq	.+2      	; 0x97c <__vector_39+0x128>
     97a:	2b c1       	rjmp	.+598    	; 0xbd2 <__vector_39+0x37e>
     97c:	80 91 8d 13 	lds	r24, 0x138D
     980:	82 30       	cpi	r24, 0x02	; 2
     982:	21 f4       	brne	.+8      	; 0x98c <__vector_39+0x138>
     984:	84 e0       	ldi	r24, 0x04	; 4
     986:	80 93 8d 13 	sts	0x138D, r24
     98a:	23 c1       	rjmp	.+582    	; 0xbd2 <__vector_39+0x37e>
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	80 93 8d 13 	sts	0x138D, r24
     992:	1f c1       	rjmp	.+574    	; 0xbd2 <__vector_39+0x37e>
     994:	85 30       	cpi	r24, 0x05	; 5
     996:	21 f4       	brne	.+8      	; 0x9a0 <__vector_39+0x14c>
     998:	85 ea       	ldi	r24, 0xA5	; 165
     99a:	80 93 bc 00 	sts	0x00BC, r24
     99e:	19 c1       	rjmp	.+562    	; 0xbd2 <__vector_39+0x37e>
     9a0:	dc de       	rcall	.-584    	; 0x75a <twi_master_bus_reset>
     9a2:	8b ef       	ldi	r24, 0xFB	; 251
     9a4:	80 93 8e 13 	sts	0x138E, r24
     9a8:	14 c1       	rjmp	.+552    	; 0xbd2 <__vector_39+0x37e>
     9aa:	d7 de       	rcall	.-594    	; 0x75a <twi_master_bus_reset>
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	80 93 8e 13 	sts	0x138E, r24
     9b2:	0f c1       	rjmp	.+542    	; 0xbd2 <__vector_39+0x37e>
     9b4:	80 91 8d 13 	lds	r24, 0x138D
     9b8:	85 30       	cpi	r24, 0x05	; 5
     9ba:	01 f5       	brne	.+64     	; 0x9fc <__vector_39+0x1a8>
     9bc:	e7 e8       	ldi	r30, 0x87	; 135
     9be:	f3 e1       	ldi	r31, 0x13	; 19
     9c0:	a0 81       	ld	r26, Z
     9c2:	b1 81       	ldd	r27, Z+1	; 0x01
     9c4:	18 96       	adiw	r26, 0x08	; 8
     9c6:	8d 91       	ld	r24, X+
     9c8:	9c 91       	ld	r25, X
     9ca:	19 97       	sbiw	r26, 0x09	; 9
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	24 81       	ldd	r18, Z+4	; 0x04
     9d0:	35 81       	ldd	r19, Z+5	; 0x05
     9d2:	28 17       	cp	r18, r24
     9d4:	39 07       	cpc	r19, r25
     9d6:	49 f4       	brne	.+18     	; 0x9ea <__vector_39+0x196>
     9d8:	ec eb       	ldi	r30, 0xBC	; 188
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	8f 7b       	andi	r24, 0xBF	; 191
     9e0:	80 83       	st	Z, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	85 68       	ori	r24, 0x85	; 133
     9e6:	80 83       	st	Z, r24
     9e8:	f4 c0       	rjmp	.+488    	; 0xbd2 <__vector_39+0x37e>
     9ea:	ec eb       	ldi	r30, 0xBC	; 188
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	80 64       	ori	r24, 0x40	; 64
     9f2:	80 83       	st	Z, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	85 68       	ori	r24, 0x85	; 133
     9f8:	80 83       	st	Z, r24
     9fa:	eb c0       	rjmp	.+470    	; 0xbd2 <__vector_39+0x37e>
     9fc:	ae de       	rcall	.-676    	; 0x75a <twi_master_bus_reset>
     9fe:	8b ef       	ldi	r24, 0xFB	; 251
     a00:	80 93 8e 13 	sts	0x138E, r24
     a04:	e6 c0       	rjmp	.+460    	; 0xbd2 <__vector_39+0x37e>
     a06:	20 91 bb 00 	lds	r18, 0x00BB
     a0a:	80 91 8d 13 	lds	r24, 0x138D
     a0e:	85 30       	cpi	r24, 0x05	; 5
     a10:	69 f5       	brne	.+90     	; 0xa6c <__vector_39+0x218>
     a12:	e7 e8       	ldi	r30, 0x87	; 135
     a14:	f3 e1       	ldi	r31, 0x13	; 19
     a16:	a0 81       	ld	r26, Z
     a18:	b1 81       	ldd	r27, Z+1	; 0x01
     a1a:	16 96       	adiw	r26, 0x06	; 6
     a1c:	6d 91       	ld	r22, X+
     a1e:	7c 91       	ld	r23, X
     a20:	17 97       	sbiw	r26, 0x07	; 7
     a22:	84 81       	ldd	r24, Z+4	; 0x04
     a24:	95 81       	ldd	r25, Z+5	; 0x05
     a26:	ac 01       	movw	r20, r24
     a28:	4f 5f       	subi	r20, 0xFF	; 255
     a2a:	5f 4f       	sbci	r21, 0xFF	; 255
     a2c:	55 83       	std	Z+5, r21	; 0x05
     a2e:	44 83       	std	Z+4, r20	; 0x04
     a30:	fb 01       	movw	r30, r22
     a32:	e8 0f       	add	r30, r24
     a34:	f9 1f       	adc	r31, r25
     a36:	20 83       	st	Z, r18
     a38:	18 96       	adiw	r26, 0x08	; 8
     a3a:	8d 91       	ld	r24, X+
     a3c:	9c 91       	ld	r25, X
     a3e:	19 97       	sbiw	r26, 0x09	; 9
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	48 17       	cp	r20, r24
     a44:	59 07       	cpc	r21, r25
     a46:	48 f4       	brcc	.+18     	; 0xa5a <__vector_39+0x206>
     a48:	ec eb       	ldi	r30, 0xBC	; 188
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	80 64       	ori	r24, 0x40	; 64
     a50:	80 83       	st	Z, r24
     a52:	80 81       	ld	r24, Z
     a54:	85 68       	ori	r24, 0x85	; 133
     a56:	80 83       	st	Z, r24
     a58:	bc c0       	rjmp	.+376    	; 0xbd2 <__vector_39+0x37e>
     a5a:	ec eb       	ldi	r30, 0xBC	; 188
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	8f 7b       	andi	r24, 0xBF	; 191
     a62:	80 83       	st	Z, r24
     a64:	80 81       	ld	r24, Z
     a66:	85 68       	ori	r24, 0x85	; 133
     a68:	80 83       	st	Z, r24
     a6a:	b3 c0       	rjmp	.+358    	; 0xbd2 <__vector_39+0x37e>
     a6c:	76 de       	rcall	.-788    	; 0x75a <twi_master_bus_reset>
     a6e:	8b ef       	ldi	r24, 0xFB	; 251
     a70:	80 93 8e 13 	sts	0x138E, r24
     a74:	ae c0       	rjmp	.+348    	; 0xbd2 <__vector_39+0x37e>
     a76:	20 91 bb 00 	lds	r18, 0x00BB
     a7a:	80 91 8d 13 	lds	r24, 0x138D
     a7e:	85 30       	cpi	r24, 0x05	; 5
     a80:	e1 f4       	brne	.+56     	; 0xaba <__vector_39+0x266>
     a82:	e7 e8       	ldi	r30, 0x87	; 135
     a84:	f3 e1       	ldi	r31, 0x13	; 19
     a86:	a0 81       	ld	r26, Z
     a88:	b1 81       	ldd	r27, Z+1	; 0x01
     a8a:	16 96       	adiw	r26, 0x06	; 6
     a8c:	4d 91       	ld	r20, X+
     a8e:	5c 91       	ld	r21, X
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	95 81       	ldd	r25, Z+5	; 0x05
     a96:	bc 01       	movw	r22, r24
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	75 83       	std	Z+5, r23	; 0x05
     a9e:	64 83       	std	Z+4, r22	; 0x04
     aa0:	da 01       	movw	r26, r20
     aa2:	a8 0f       	add	r26, r24
     aa4:	b9 1f       	adc	r27, r25
     aa6:	2c 93       	st	X, r18
     aa8:	84 e9       	ldi	r24, 0x94	; 148
     aaa:	80 93 bc 00 	sts	0x00BC, r24
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	86 83       	std	Z+6, r24	; 0x06
     ab2:	17 82       	std	Z+7, r1	; 0x07
     ab4:	10 92 7f 13 	sts	0x137F, r1
     ab8:	8c c0       	rjmp	.+280    	; 0xbd2 <__vector_39+0x37e>
     aba:	4f de       	rcall	.-866    	; 0x75a <twi_master_bus_reset>
     abc:	8b ef       	ldi	r24, 0xFB	; 251
     abe:	80 93 8e 13 	sts	0x138E, r24
     ac2:	87 c0       	rjmp	.+270    	; 0xbd2 <__vector_39+0x37e>
     ac4:	e7 e8       	ldi	r30, 0x87	; 135
     ac6:	f3 e1       	ldi	r31, 0x13	; 19
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	86 83       	std	Z+6, r24	; 0x06
     acc:	86 ef       	ldi	r24, 0xF6	; 246
     ace:	87 83       	std	Z+7, r24	; 0x07
     ad0:	10 92 7f 13 	sts	0x137F, r1
     ad4:	7e c0       	rjmp	.+252    	; 0xbd2 <__vector_39+0x37e>
     ad6:	10 92 83 13 	sts	0x1383, r1
     ada:	10 92 82 13 	sts	0x1382, r1
     ade:	e0 e8       	ldi	r30, 0x80	; 128
     ae0:	f3 e1       	ldi	r31, 0x13	; 19
     ae2:	a0 81       	ld	r26, Z
     ae4:	b1 81       	ldd	r27, Z+1	; 0x01
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	ac 01       	movw	r20, r24
     af4:	4f 5f       	subi	r20, 0xFF	; 255
     af6:	5f 4f       	sbci	r21, 0xFF	; 255
     af8:	53 83       	std	Z+3, r21	; 0x03
     afa:	42 83       	std	Z+2, r20	; 0x02
     afc:	d9 01       	movw	r26, r18
     afe:	a8 0f       	add	r26, r24
     b00:	b9 1f       	adc	r27, r25
     b02:	8c 91       	ld	r24, X
     b04:	80 93 bb 00 	sts	0x00BB, r24
     b08:	85 ec       	ldi	r24, 0xC5	; 197
     b0a:	80 93 bc 00 	sts	0x00BC, r24
     b0e:	88 e0       	ldi	r24, 0x08	; 8
     b10:	84 83       	std	Z+4, r24	; 0x04
     b12:	5f c0       	rjmp	.+190    	; 0xbd2 <__vector_39+0x37e>
     b14:	e0 e8       	ldi	r30, 0x80	; 128
     b16:	f3 e1       	ldi	r31, 0x13	; 19
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	84 83       	std	Z+4, r24	; 0x04
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	96 83       	std	Z+6, r25	; 0x06
     b22:	85 83       	std	Z+5, r24	; 0x05
     b24:	85 ec       	ldi	r24, 0xC5	; 197
     b26:	80 93 bc 00 	sts	0x00BC, r24
     b2a:	53 c0       	rjmp	.+166    	; 0xbd2 <__vector_39+0x37e>
     b2c:	e0 e8       	ldi	r30, 0x80	; 128
     b2e:	f3 e1       	ldi	r31, 0x13	; 19
     b30:	13 82       	std	Z+3, r1	; 0x03
     b32:	12 82       	std	Z+2, r1	; 0x02
     b34:	85 ec       	ldi	r24, 0xC5	; 197
     b36:	80 93 bc 00 	sts	0x00BC, r24
     b3a:	88 e0       	ldi	r24, 0x08	; 8
     b3c:	84 83       	std	Z+4, r24	; 0x04
     b3e:	49 c0       	rjmp	.+146    	; 0xbd2 <__vector_39+0x37e>
     b40:	20 91 bb 00 	lds	r18, 0x00BB
     b44:	e0 e8       	ldi	r30, 0x80	; 128
     b46:	f3 e1       	ldi	r31, 0x13	; 19
     b48:	a0 81       	ld	r26, Z
     b4a:	b1 81       	ldd	r27, Z+1	; 0x01
     b4c:	4d 91       	ld	r20, X+
     b4e:	5c 91       	ld	r21, X
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	93 81       	ldd	r25, Z+3	; 0x03
     b54:	bc 01       	movw	r22, r24
     b56:	6f 5f       	subi	r22, 0xFF	; 255
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	73 83       	std	Z+3, r23	; 0x03
     b5c:	62 83       	std	Z+2, r22	; 0x02
     b5e:	da 01       	movw	r26, r20
     b60:	a8 0f       	add	r26, r24
     b62:	b9 1f       	adc	r27, r25
     b64:	2c 93       	st	X, r18
     b66:	85 ec       	ldi	r24, 0xC5	; 197
     b68:	80 93 bc 00 	sts	0x00BC, r24
     b6c:	88 e0       	ldi	r24, 0x08	; 8
     b6e:	84 83       	std	Z+4, r24	; 0x04
     b70:	30 c0       	rjmp	.+96     	; 0xbd2 <__vector_39+0x37e>
     b72:	e0 e8       	ldi	r30, 0x80	; 128
     b74:	f3 e1       	ldi	r31, 0x13	; 19
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	84 83       	std	Z+4, r24	; 0x04
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	96 83       	std	Z+6, r25	; 0x06
     b80:	85 83       	std	Z+5, r24	; 0x05
     b82:	85 ec       	ldi	r24, 0xC5	; 197
     b84:	80 93 bc 00 	sts	0x00BC, r24
     b88:	24 c0       	rjmp	.+72     	; 0xbd2 <__vector_39+0x37e>
     b8a:	e0 e8       	ldi	r30, 0x80	; 128
     b8c:	f3 e1       	ldi	r31, 0x13	; 19
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	84 83       	std	Z+4, r24	; 0x04
     b92:	80 e9       	ldi	r24, 0x90	; 144
     b94:	80 93 bc 00 	sts	0x00BC, r24
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	9f ef       	ldi	r25, 0xFF	; 255
     b9c:	96 83       	std	Z+6, r25	; 0x06
     b9e:	85 83       	std	Z+5, r24	; 0x05
     ba0:	18 c0       	rjmp	.+48     	; 0xbd2 <__vector_39+0x37e>
     ba2:	80 91 7e 13 	lds	r24, 0x137E
     ba6:	81 11       	cpse	r24, r1
     ba8:	09 c0       	rjmp	.+18     	; 0xbbc <__vector_39+0x368>
     baa:	e7 e8       	ldi	r30, 0x87	; 135
     bac:	f3 e1       	ldi	r31, 0x13	; 19
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	86 83       	std	Z+6, r24	; 0x06
     bb2:	8b ef       	ldi	r24, 0xFB	; 251
     bb4:	87 83       	std	Z+7, r24	; 0x07
     bb6:	10 92 7f 13 	sts	0x137F, r1
     bba:	0b c0       	rjmp	.+22     	; 0xbd2 <__vector_39+0x37e>
     bbc:	e0 e8       	ldi	r30, 0x80	; 128
     bbe:	f3 e1       	ldi	r31, 0x13	; 19
     bc0:	8e ef       	ldi	r24, 0xFE	; 254
     bc2:	9f ef       	ldi	r25, 0xFF	; 255
     bc4:	96 83       	std	Z+6, r25	; 0x06
     bc6:	85 83       	std	Z+5, r24	; 0x05
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	84 83       	std	Z+4, r24	; 0x04
     bcc:	85 ec       	ldi	r24, 0xC5	; 197
     bce:	80 93 bc 00 	sts	0x00BC, r24
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	bf 91       	pop	r27
     bd8:	af 91       	pop	r26
     bda:	9f 91       	pop	r25
     bdc:	8f 91       	pop	r24
     bde:	7f 91       	pop	r23
     be0:	6f 91       	pop	r22
     be2:	5f 91       	pop	r21
     be4:	4f 91       	pop	r20
     be6:	3f 91       	pop	r19
     be8:	2f 91       	pop	r18
     bea:	0f 90       	pop	r0
     bec:	0b be       	out	0x3b, r0	; 59
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <usart_putchar>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	8c 01       	movw	r16, r24
     c02:	d6 2f       	mov	r29, r22
     c04:	ca e0       	ldi	r28, 0x0A	; 10
     c06:	0a c0       	rjmp	.+20     	; 0xc1c <usart_putchar+0x24>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 65 21 	call	0x42ca	; 0x42ca <pne_delayms>
     c10:	c1 50       	subi	r28, 0x01	; 1
     c12:	21 f4       	brne	.+8      	; 0xc1c <usart_putchar+0x24>
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	0e 94 77 37 	call	0x6eee	; 0x6eee <fatal_error_to_rf>
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <usart_putchar+0x2c>
     c1c:	f8 01       	movw	r30, r16
     c1e:	90 81       	ld	r25, Z
     c20:	95 ff       	sbrs	r25, 5
     c22:	f2 cf       	rjmp	.-28     	; 0xc08 <usart_putchar+0x10>
     c24:	f8 01       	movw	r30, r16
     c26:	d6 83       	std	Z+6, r29	; 0x06
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	08 95       	ret

00000c34 <usart_set_baudrate>:
     c34:	8f 92       	push	r8
     c36:	9f 92       	push	r9
     c38:	af 92       	push	r10
     c3a:	bf 92       	push	r11
     c3c:	cf 92       	push	r12
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	ec 01       	movw	r28, r24
     c4e:	6a 01       	movw	r12, r20
     c50:	7b 01       	movw	r14, r22
     c52:	b9 01       	movw	r22, r18
     c54:	a8 01       	movw	r20, r16
     c56:	68 94       	set
     c58:	12 f8       	bld	r1, 2
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	16 94       	lsr	r1
     c64:	d1 f7       	brne	.-12     	; 0xc5a <usart_set_baudrate+0x26>
     c66:	d9 01       	movw	r26, r18
     c68:	c8 01       	movw	r24, r16
     c6a:	07 2e       	mov	r0, r23
     c6c:	73 e1       	ldi	r23, 0x13	; 19
     c6e:	b6 95       	lsr	r27
     c70:	a7 95       	ror	r26
     c72:	97 95       	ror	r25
     c74:	87 95       	ror	r24
     c76:	7a 95       	dec	r23
     c78:	d1 f7       	brne	.-12     	; 0xc6e <usart_set_baudrate+0x3a>
     c7a:	70 2d       	mov	r23, r0
     c7c:	e8 81       	ld	r30, Y
     c7e:	e1 ff       	sbrs	r30, 1
     c80:	0b c0       	rjmp	.+22     	; 0xc98 <usart_set_baudrate+0x64>
     c82:	4a 01       	movw	r8, r20
     c84:	5b 01       	movw	r10, r22
     c86:	b6 94       	lsr	r11
     c88:	a7 94       	ror	r10
     c8a:	97 94       	ror	r9
     c8c:	87 94       	ror	r8
     c8e:	b6 95       	lsr	r27
     c90:	a7 95       	ror	r26
     c92:	97 95       	ror	r25
     c94:	87 95       	ror	r24
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <usart_set_baudrate+0x68>
     c98:	4a 01       	movw	r8, r20
     c9a:	5b 01       	movw	r10, r22
     c9c:	8c 14       	cp	r8, r12
     c9e:	9d 04       	cpc	r9, r13
     ca0:	ae 04       	cpc	r10, r14
     ca2:	bf 04       	cpc	r11, r15
     ca4:	78 f1       	brcs	.+94     	; 0xd04 <usart_set_baudrate+0xd0>
     ca6:	c8 16       	cp	r12, r24
     ca8:	d9 06       	cpc	r13, r25
     caa:	ea 06       	cpc	r14, r26
     cac:	fb 06       	cpc	r15, r27
     cae:	60 f1       	brcs	.+88     	; 0xd08 <usart_set_baudrate+0xd4>
     cb0:	88 81       	ld	r24, Y
     cb2:	81 ff       	sbrs	r24, 1
     cb4:	10 c0       	rjmp	.+32     	; 0xcd6 <usart_set_baudrate+0xa2>
     cb6:	cc 0c       	add	r12, r12
     cb8:	dd 1c       	adc	r13, r13
     cba:	ee 1c       	adc	r14, r14
     cbc:	ff 1c       	adc	r15, r15
     cbe:	cb 01       	movw	r24, r22
     cc0:	ba 01       	movw	r22, r20
     cc2:	a7 01       	movw	r20, r14
     cc4:	96 01       	movw	r18, r12
     cc6:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <__udivmodsi4>
     cca:	da 01       	movw	r26, r20
     ccc:	c9 01       	movw	r24, r18
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	a1 09       	sbc	r26, r1
     cd2:	b1 09       	sbc	r27, r1
     cd4:	13 c0       	rjmp	.+38     	; 0xcfc <usart_set_baudrate+0xc8>
     cd6:	c9 01       	movw	r24, r18
     cd8:	b8 01       	movw	r22, r16
     cda:	68 94       	set
     cdc:	13 f8       	bld	r1, 3
     cde:	96 95       	lsr	r25
     ce0:	87 95       	ror	r24
     ce2:	77 95       	ror	r23
     ce4:	67 95       	ror	r22
     ce6:	16 94       	lsr	r1
     ce8:	d1 f7       	brne	.-12     	; 0xcde <usart_set_baudrate+0xaa>
     cea:	a7 01       	movw	r20, r14
     cec:	96 01       	movw	r18, r12
     cee:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <__udivmodsi4>
     cf2:	da 01       	movw	r26, r20
     cf4:	c9 01       	movw	r24, r18
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	a1 09       	sbc	r26, r1
     cfa:	b1 09       	sbc	r27, r1
     cfc:	9d 83       	std	Y+5, r25	; 0x05
     cfe:	8c 83       	std	Y+4, r24	; 0x04
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <usart_set_baudrate+0xd6>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <usart_set_baudrate+0xd6>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	df 90       	pop	r13
     d18:	cf 90       	pop	r12
     d1a:	bf 90       	pop	r11
     d1c:	af 90       	pop	r10
     d1e:	9f 90       	pop	r9
     d20:	8f 90       	pop	r8
     d22:	08 95       	ret

00000d24 <usart_init_rs232>:
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	ec 01       	movw	r28, r24
     d2e:	fb 01       	movw	r30, r22
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	8f 73       	andi	r24, 0x3F	; 63
     d34:	8a 83       	std	Y+2, r24	; 0x02
     d36:	26 81       	ldd	r18, Z+6	; 0x06
     d38:	35 81       	ldd	r19, Z+5	; 0x05
     d3a:	84 81       	ldd	r24, Z+4	; 0x04
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	48 2f       	mov	r20, r24
     d40:	43 70       	andi	r20, 0x03	; 3
     d42:	44 0f       	add	r20, r20
     d44:	99 7f       	andi	r25, 0xF9	; 249
     d46:	94 2b       	or	r25, r20
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	99 81       	ldd	r25, Y+1	; 0x01
     d4c:	84 70       	andi	r24, 0x04	; 4
     d4e:	88 0f       	add	r24, r24
     d50:	88 0f       	add	r24, r24
     d52:	9b 7f       	andi	r25, 0xFB	; 251
     d54:	89 2b       	or	r24, r25
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	8f 7c       	andi	r24, 0xCF	; 207
     d5c:	83 2b       	or	r24, r19
     d5e:	8a 83       	std	Y+2, r24	; 0x02
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	92 2f       	mov	r25, r18
     d64:	99 0f       	add	r25, r25
     d66:	99 0f       	add	r25, r25
     d68:	99 0f       	add	r25, r25
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	89 2b       	or	r24, r25
     d6e:	8a 83       	std	Y+2, r24	; 0x02
     d70:	40 81       	ld	r20, Z
     d72:	51 81       	ldd	r21, Z+1	; 0x01
     d74:	62 81       	ldd	r22, Z+2	; 0x02
     d76:	73 81       	ldd	r23, Z+3	; 0x03
     d78:	00 e0       	ldi	r16, 0x00	; 0
     d7a:	12 e1       	ldi	r17, 0x12	; 18
     d7c:	2a e7       	ldi	r18, 0x7A	; 122
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	ce 01       	movw	r24, r28
     d82:	58 df       	rcall	.-336    	; 0xc34 <usart_set_baudrate>
     d84:	99 81       	ldd	r25, Y+1	; 0x01
     d86:	98 60       	ori	r25, 0x08	; 8
     d88:	99 83       	std	Y+1, r25	; 0x01
     d8a:	99 81       	ldd	r25, Y+1	; 0x01
     d8c:	90 61       	ori	r25, 0x10	; 16
     d8e:	99 83       	std	Y+1, r25	; 0x01
     d90:	99 81       	ldd	r25, Y+1	; 0x01
     d92:	90 68       	ori	r25, 0x80	; 128
     d94:	99 83       	std	Y+1, r25	; 0x01
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <__vector_36>:
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	0b b6       	in	r0, 0x3b	; 59
     dac:	0f 92       	push	r0
     dae:	2f 93       	push	r18
     db0:	3f 93       	push	r19
     db2:	4f 93       	push	r20
     db4:	5f 93       	push	r21
     db6:	6f 93       	push	r22
     db8:	7f 93       	push	r23
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	af 93       	push	r26
     dc0:	bf 93       	push	r27
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
     dc6:	80 91 ce 00 	lds	r24, 0x00CE
     dca:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <pnewels_get_usart>
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0b be       	out	0x3b, r0	; 59
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <appUpdateTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
static void appUpdateTimerHandler(SYS_Timer_t *timer)
{
  //APP_CommandReport();
  if(wps_send_flag == 1)
     df4:	80 91 08 20 	lds	r24, 0x2008
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	21 f4       	brne	.+8      	; 0xe04 <appUpdateTimerHandler+0x10>
  {
	status_report_flag = 1;
     dfc:	80 93 6f 20 	sts	0x206F, r24
	data_update_flag = 1;
     e00:	80 93 09 20 	sts	0x2009, r24
     e04:	08 95       	ret

00000e06 <WDT_Init>:

/*************************************************************************//**
*****************************************************************************/
void WDT_Init(void)
{	
	cli();
     e06:	f8 94       	cli
	wdt_reset();
     e08:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     e0a:	99 e2       	ldi	r25, 0x29	; 41
     e0c:	88 e1       	ldi	r24, 0x18	; 24
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	a8 95       	wdr
     e14:	80 93 60 00 	sts	0x0060, r24
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_8S);
	//WDTCSR = (1<<WDCE)|(1<<WDE);
	sei();
     e1e:	78 94       	sei
     e20:	08 95       	ret

00000e22 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
  SYS_Init();
     e22:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <SYS_Init>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  factory_initialization();
     e26:	0e 94 04 21 	call	0x4208	; 0x4208 <factory_initialization>
  APP_IbLoadSettings();
     e2a:	c4 da       	rcall	.-2680   	; 0x3b4 <APP_IbLoadSettings>
  APP_NwkInit();  
     e2c:	f5 db       	rcall	.-2070   	; 0x618 <APP_NwkInit>

/*************************************************************************//**
*****************************************************************************/
static void appStartUpdateTimer(void)
{
  appUpdateTimer.interval = APP_UPDATE_INTERVAL;
     e2e:	ef e8       	ldi	r30, 0x8F	; 143
     e30:	f3 e1       	ldi	r31, 0x13	; 19
     e32:	80 e1       	ldi	r24, 0x10	; 16
     e34:	97 e2       	ldi	r25, 0x27	; 39
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	86 83       	std	Z+6, r24	; 0x06
     e3c:	97 83       	std	Z+7, r25	; 0x07
     e3e:	a0 87       	std	Z+8, r26	; 0x08
     e40:	b1 87       	std	Z+9, r27	; 0x09
  appUpdateTimer.mode = SYS_TIMER_PERIODIC_MODE;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	82 87       	std	Z+10, r24	; 0x0a
  appUpdateTimer.handler = appUpdateTimerHandler;
     e46:	8a ef       	ldi	r24, 0xFA	; 250
     e48:	96 e0       	ldi	r25, 0x06	; 6
     e4a:	94 87       	std	Z+12, r25	; 0x0c
     e4c:	83 87       	std	Z+11, r24	; 0x0b
  SYS_TimerStart(&appUpdateTimer); //disabled temporary
     e4e:	cf 01       	movw	r24, r30
     e50:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <SYS_TimerStart>
  APP_NwkInit();  
  //APP_GpioInit();
  //APP_CommandInit();
  appStartUpdateTimer();
  
  PNEWELSGpioInit();
     e54:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <PNEWELSGpioInit>
  PNEWELSAppInit();
     e58:	0e 94 23 20 	call	0x4046	; 0x4046 <PNEWELSAppInit>
  systemFlag_check(device_flag); //check whether this is the first time install. If yes, System directly enter WPS mode
     e5c:	80 91 dc 20 	lds	r24, 0x20DC
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <systemFlag_check>
*****************************************************************************/
int main(void)
{
  SYS_Init();
  appInit();
  WDT_Init(); //Enable Watchdog timer
     e66:	cf df       	rcall	.-98     	; 0xe06 <WDT_Init>
  
  //pne_debug_Init(); //disable this to disable the device displaying the signal strength
  ANT_DIV = 0x06; //6 for ceramic, 5 for antenna
     e68:	86 e0       	ldi	r24, 0x06	; 6
     e6a:	80 93 4d 01 	sts	0x014D, r24

  while (1)
  {
    SYS_TaskHandler();	//system service. DO NOT MODIFY or REMOVE
     e6e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <SYS_TaskHandler>
    APP_TaskHandler();	//application service. strongly advised NOT TO MODIFY or REMOVE
    //APP_GpioTaskHandler();
	PNEWELSTaskHandler();	//main program reside here
     e72:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <PNEWELSTaskHandler>
	//pne_debug_display();
	//wdt_reset();	//reset watchdog timer. If the timer not reset after 8 seconds the system will reset.
	
  }
     e76:	fb cf       	rjmp	.-10     	; 0xe6e <main+0x4c>

00000e78 <__vector_1>:
	/* Clear the INTn interrupt flag */
	ext_int_clear_flag(pin);

	/* Enable the interrupt */
	ext_int_enable(pin);
}
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	0b b6       	in	r0, 0x3b	; 59
     e84:	0f 92       	push	r0
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
     e9e:	e0 91 ae 13 	lds	r30, 0x13AE
     ea2:	f0 91 af 13 	lds	r31, 0x13AF
     ea6:	30 97       	sbiw	r30, 0x00	; 0
     ea8:	09 f0       	breq	.+2      	; 0xeac <__vector_1+0x34>
     eaa:	19 95       	eicall
     eac:	ff 91       	pop	r31
     eae:	ef 91       	pop	r30
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	0f 90       	pop	r0
     ec6:	0b be       	out	0x3b, r0	; 59
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_2>:
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	0b b6       	in	r0, 0x3b	; 59
     ede:	0f 92       	push	r0
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
     ef8:	e0 91 ac 13 	lds	r30, 0x13AC
     efc:	f0 91 ad 13 	lds	r31, 0x13AD
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	09 f0       	breq	.+2      	; 0xf06 <__vector_2+0x34>
     f04:	19 95       	eicall
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0b be       	out	0x3b, r0	; 59
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_3>:
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	0b b6       	in	r0, 0x3b	; 59
     f38:	0f 92       	push	r0
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
     f52:	e0 91 aa 13 	lds	r30, 0x13AA
     f56:	f0 91 ab 13 	lds	r31, 0x13AB
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_3+0x34>
     f5e:	19 95       	eicall
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	0f 90       	pop	r0
     f82:	1f 90       	pop	r1
     f84:	18 95       	reti

00000f86 <__vector_4>:
     f86:	1f 92       	push	r1
     f88:	0f 92       	push	r0
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	0f 92       	push	r0
     f8e:	11 24       	eor	r1, r1
     f90:	0b b6       	in	r0, 0x3b	; 59
     f92:	0f 92       	push	r0
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	ef 93       	push	r30
     faa:	ff 93       	push	r31
     fac:	e0 91 a8 13 	lds	r30, 0x13A8
     fb0:	f0 91 a9 13 	lds	r31, 0x13A9
     fb4:	30 97       	sbiw	r30, 0x00	; 0
     fb6:	09 f0       	breq	.+2      	; 0xfba <__vector_4+0x34>
     fb8:	19 95       	eicall
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	0f 90       	pop	r0
     fd4:	0b be       	out	0x3b, r0	; 59
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <__vector_5>:
     fe0:	1f 92       	push	r1
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	0b b6       	in	r0, 0x3b	; 59
     fec:	0f 92       	push	r0
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	ef 93       	push	r30
    1004:	ff 93       	push	r31
    1006:	e0 91 a6 13 	lds	r30, 0x13A6
    100a:	f0 91 a7 13 	lds	r31, 0x13A7
    100e:	30 97       	sbiw	r30, 0x00	; 0
    1010:	09 f0       	breq	.+2      	; 0x1014 <__vector_5+0x34>
    1012:	19 95       	eicall
    1014:	ff 91       	pop	r31
    1016:	ef 91       	pop	r30
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	0f 90       	pop	r0
    102e:	0b be       	out	0x3b, r0	; 59
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_6>:
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	0b b6       	in	r0, 0x3b	; 59
    1046:	0f 92       	push	r0
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
    1060:	e0 91 a4 13 	lds	r30, 0x13A4
    1064:	f0 91 a5 13 	lds	r31, 0x13A5
    1068:	30 97       	sbiw	r30, 0x00	; 0
    106a:	09 f0       	breq	.+2      	; 0x106e <__vector_6+0x34>
    106c:	19 95       	eicall
    106e:	ff 91       	pop	r31
    1070:	ef 91       	pop	r30
    1072:	bf 91       	pop	r27
    1074:	af 91       	pop	r26
    1076:	9f 91       	pop	r25
    1078:	8f 91       	pop	r24
    107a:	7f 91       	pop	r23
    107c:	6f 91       	pop	r22
    107e:	5f 91       	pop	r21
    1080:	4f 91       	pop	r20
    1082:	3f 91       	pop	r19
    1084:	2f 91       	pop	r18
    1086:	0f 90       	pop	r0
    1088:	0b be       	out	0x3b, r0	; 59
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_7>:
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	0b b6       	in	r0, 0x3b	; 59
    10a0:	0f 92       	push	r0
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
    10ba:	e0 91 a2 13 	lds	r30, 0x13A2
    10be:	f0 91 a3 13 	lds	r31, 0x13A3
    10c2:	30 97       	sbiw	r30, 0x00	; 0
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_7+0x34>
    10c6:	19 95       	eicall
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0b be       	out	0x3b, r0	; 59
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_8>:
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	0b b6       	in	r0, 0x3b	; 59
    10fa:	0f 92       	push	r0
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
    1114:	e0 91 a0 13 	lds	r30, 0x13A0
    1118:	f0 91 a1 13 	lds	r31, 0x13A1
    111c:	30 97       	sbiw	r30, 0x00	; 0
    111e:	09 f0       	breq	.+2      	; 0x1122 <__vector_8+0x34>
    1120:	19 95       	eicall
    1122:	ff 91       	pop	r31
    1124:	ef 91       	pop	r30
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0b be       	out	0x3b, r0	; 59
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_9>:
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	0b b6       	in	r0, 0x3b	; 59
    1154:	0f 92       	push	r0
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	e0 91 9e 13 	lds	r30, 0x139E
    1172:	f0 91 9f 13 	lds	r31, 0x139F
    1176:	30 97       	sbiw	r30, 0x00	; 0
    1178:	09 f0       	breq	.+2      	; 0x117c <__vector_9+0x34>
    117a:	19 95       	eicall
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0b be       	out	0x3b, r0	; 59
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <__vector_10>:
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	0b b6       	in	r0, 0x3b	; 59
    11ae:	0f 92       	push	r0
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
    11c8:	e0 91 9c 13 	lds	r30, 0x139C
    11cc:	f0 91 9d 13 	lds	r31, 0x139D
    11d0:	30 97       	sbiw	r30, 0x00	; 0
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <__vector_10+0x34>
    11d4:	19 95       	eicall
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0b be       	out	0x3b, r0	; 59
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <ext_int_pcint_clear_flag>:
    11fc:	80 31       	cpi	r24, 0x10	; 16
    11fe:	11 f4       	brne	.+4      	; 0x1204 <ext_int_pcint_clear_flag+0x8>
    1200:	d9 9a       	sbi	0x1b, 1	; 27
    1202:	08 95       	ret
    1204:	d8 9a       	sbi	0x1b, 0	; 27
    1206:	08 95       	ret

00001208 <ext_int_pcint_enable>:
    1208:	80 31       	cpi	r24, 0x10	; 16
    120a:	59 f4       	brne	.+22     	; 0x1222 <ext_int_pcint_enable+0x1a>
    120c:	e8 e6       	ldi	r30, 0x68	; 104
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	82 60       	ori	r24, 0x02	; 2
    1214:	80 83       	st	Z, r24
    1216:	ec e6       	ldi	r30, 0x6C	; 108
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	81 60       	ori	r24, 0x01	; 1
    121e:	80 83       	st	Z, r24
    1220:	08 95       	ret
    1222:	e8 e6       	ldi	r30, 0x68	; 104
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	81 60       	ori	r24, 0x01	; 1
    122a:	80 83       	st	Z, r24
    122c:	eb e6       	ldi	r30, 0x6B	; 107
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	20 81       	ld	r18, Z
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <ext_int_pcint_enable+0x34>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	7a 95       	dec	r23
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <ext_int_pcint_enable+0x30>
    1240:	82 2b       	or	r24, r18
    1242:	80 83       	st	Z, r24
    1244:	08 95       	ret

00001246 <ext_int_pcint_disable>:
    1246:	80 31       	cpi	r24, 0x10	; 16
    1248:	31 f4       	brne	.+12     	; 0x1256 <ext_int_pcint_disable+0x10>
    124a:	ec e6       	ldi	r30, 0x6C	; 108
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8e 7f       	andi	r24, 0xFE	; 254
    1252:	80 83       	st	Z, r24
    1254:	08 95       	ret
    1256:	eb e6       	ldi	r30, 0x6B	; 107
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	20 81       	ld	r18, Z
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <ext_int_pcint_disable+0x20>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	7a 95       	dec	r23
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <ext_int_pcint_disable+0x1c>
    126a:	80 95       	com	r24
    126c:	82 23       	and	r24, r18
    126e:	80 83       	st	Z, r24
    1270:	08 95       	ret

00001272 <ext_int_pcint_init>:

void ext_int_pcint_init(gpio_t gpio_id)
{
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	6b 01       	movw	r12, r22
    127a:	e8 2e       	mov	r14, r24
	/* Disable the interrupt */
	ext_int_pcint_disable(gpio_id);
    127c:	e4 df       	rcall	.-56     	; 0x1246 <ext_int_pcint_disable>

	/* Enable IRQ pin as input */
	/* Enable the pullup for the IRQ pin */
	gpio_in(gpio_id);
    127e:	8e 2d       	mov	r24, r14
    1280:	b6 01       	movw	r22, r12
    1282:	26 d1       	rcall	.+588    	; 0x14d0 <gpio_in>
	gpio_pullup(gpio_id);
    1284:	8e 2d       	mov	r24, r14
    1286:	b6 01       	movw	r22, r12
    1288:	c5 d1       	rcall	.+906    	; 0x1614 <gpio_pullup>

	/* Clear the PCINTn interrupt flag */
	ext_int_pcint_clear_flag(gpio_id);
    128a:	8e 2d       	mov	r24, r14
    128c:	b6 01       	movw	r22, r12
    128e:	b6 df       	rcall	.-148    	; 0x11fc <ext_int_pcint_clear_flag>

	/* Enable the interrupt */
	ext_int_pcint_enable(gpio_id);
    1290:	8e 2d       	mov	r24, r14
    1292:	b6 01       	movw	r22, r12
    1294:	b9 df       	rcall	.-142    	; 0x1208 <ext_int_pcint_enable>
}
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	08 95       	ret

0000129e <ext_int_set_interrupt_callback>:

void ext_int_set_interrupt_callback(gpio_t gpio_id, ext_int_callback_t callback)
{
	interrupt_t ext_int = gpio_id.int_id;
    129e:	98 2f       	mov	r25, r24
	
	if (ext_int == EXT_INT0_PIN) {
    12a0:	81 11       	cpse	r24, r1
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <ext_int_set_interrupt_callback+0x10>
		ext_int_int0_callback = callback;
    12a4:	50 93 af 13 	sts	0x13AF, r21
    12a8:	40 93 ae 13 	sts	0x13AE, r20
    12ac:	08 95       	ret
	} else
	if (ext_int == EXT_INT1_PIN) {
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	29 f4       	brne	.+10     	; 0x12bc <ext_int_set_interrupt_callback+0x1e>
		ext_int_int1_callback = callback;
    12b2:	50 93 ad 13 	sts	0x13AD, r21
    12b6:	40 93 ac 13 	sts	0x13AC, r20
    12ba:	08 95       	ret
	} else
	if (ext_int == EXT_INT2_PIN) {
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	29 f4       	brne	.+10     	; 0x12ca <ext_int_set_interrupt_callback+0x2c>
		ext_int_int2_callback = callback;
    12c0:	50 93 ab 13 	sts	0x13AB, r21
    12c4:	40 93 aa 13 	sts	0x13AA, r20
    12c8:	08 95       	ret
	} else
	if (ext_int == EXT_INT3_PIN) {
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <ext_int_set_interrupt_callback+0x3a>
		ext_int_int3_callback = callback;
    12ce:	50 93 a9 13 	sts	0x13A9, r21
    12d2:	40 93 a8 13 	sts	0x13A8, r20
    12d6:	08 95       	ret
	} else
	if (ext_int == EXT_INT4_PIN) {
    12d8:	84 30       	cpi	r24, 0x04	; 4
    12da:	29 f4       	brne	.+10     	; 0x12e6 <ext_int_set_interrupt_callback+0x48>
		ext_int_int4_callback = callback;
    12dc:	50 93 a7 13 	sts	0x13A7, r21
    12e0:	40 93 a6 13 	sts	0x13A6, r20
    12e4:	08 95       	ret
	} else
	if (ext_int == EXT_INT5_PIN) {
    12e6:	85 30       	cpi	r24, 0x05	; 5
    12e8:	29 f4       	brne	.+10     	; 0x12f4 <ext_int_set_interrupt_callback+0x56>
		ext_int_int5_callback = callback;
    12ea:	50 93 a5 13 	sts	0x13A5, r21
    12ee:	40 93 a4 13 	sts	0x13A4, r20
    12f2:	08 95       	ret
	} else
	if (ext_int == EXT_INT6_PIN) {
    12f4:	86 30       	cpi	r24, 0x06	; 6
    12f6:	29 f4       	brne	.+10     	; 0x1302 <ext_int_set_interrupt_callback+0x64>
		ext_int_int6_callback = callback;
    12f8:	50 93 a3 13 	sts	0x13A3, r21
    12fc:	40 93 a2 13 	sts	0x13A2, r20
    1300:	08 95       	ret
	} else
	if (ext_int == EXT_INT7_PIN) {
    1302:	87 30       	cpi	r24, 0x07	; 7
    1304:	29 f4       	brne	.+10     	; 0x1310 <ext_int_set_interrupt_callback+0x72>
		ext_int_int7_callback = callback;
    1306:	50 93 a1 13 	sts	0x13A1, r21
    130a:	40 93 a0 13 	sts	0x13A0, r20
    130e:	08 95       	ret
	} else
	if (ext_int >= PC_INT0_PIN && ext_int <=PC_INT7_PIN) {
    1310:	88 50       	subi	r24, 0x08	; 8
    1312:	88 30       	cpi	r24, 0x08	; 8
    1314:	28 f4       	brcc	.+10     	; 0x1320 <ext_int_set_interrupt_callback+0x82>
		ext_int_pcint0_callback = callback;
    1316:	50 93 9f 13 	sts	0x139F, r21
    131a:	40 93 9e 13 	sts	0x139E, r20
    131e:	08 95       	ret
	} else
	if (ext_int == PC_INT8_PIN) {
    1320:	90 31       	cpi	r25, 0x10	; 16
    1322:	21 f4       	brne	.+8      	; 0x132c <ext_int_set_interrupt_callback+0x8e>
		ext_int_pcint1_callback = callback;
    1324:	50 93 9d 13 	sts	0x139D, r21
    1328:	40 93 9c 13 	sts	0x139C, r20
    132c:	08 95       	ret

0000132e <gpio_set>:
void gpio_set(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    132e:	62 30       	cpi	r22, 0x02	; 2
    1330:	09 f1       	breq	.+66     	; 0x1374 <gpio_set+0x46>
    1332:	28 f4       	brcc	.+10     	; 0x133e <gpio_set+0x10>
    1334:	66 23       	and	r22, r22
    1336:	41 f0       	breq	.+16     	; 0x1348 <gpio_set+0x1a>
    1338:	61 30       	cpi	r22, 0x01	; 1
    133a:	89 f0       	breq	.+34     	; 0x135e <gpio_set+0x30>
    133c:	08 95       	ret
    133e:	63 30       	cpi	r22, 0x03	; 3
    1340:	21 f1       	breq	.+72     	; 0x138a <gpio_set+0x5c>
    1342:	64 30       	cpi	r22, 0x04	; 4
    1344:	69 f1       	breq	.+90     	; 0x13a0 <gpio_set+0x72>
    1346:	08 95       	ret
	{
		case port_b:
		PORTB |= (1<<pin_id);
    1348:	25 b1       	in	r18, 0x05	; 5
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <gpio_set+0x26>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	7a 95       	dec	r23
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <gpio_set+0x22>
    1358:	82 2b       	or	r24, r18
    135a:	85 b9       	out	0x05, r24	; 5
		break;
    135c:	08 95       	ret
		
		case port_d:
		PORTD |= (1<<pin_id);
    135e:	2b b1       	in	r18, 0x0b	; 11
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <gpio_set+0x3c>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	7a 95       	dec	r23
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <gpio_set+0x38>
    136e:	82 2b       	or	r24, r18
    1370:	8b b9       	out	0x0b, r24	; 11
		break;
    1372:	08 95       	ret
		
		case port_e:
		PORTE |= (1<<pin_id);
    1374:	2e b1       	in	r18, 0x0e	; 14
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <gpio_set+0x52>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	7a 95       	dec	r23
    1382:	e2 f7       	brpl	.-8      	; 0x137c <gpio_set+0x4e>
    1384:	82 2b       	or	r24, r18
    1386:	8e b9       	out	0x0e, r24	; 14
		break;
    1388:	08 95       	ret
		
		case port_f:
		PORTF |= (1<<pin_id);
    138a:	21 b3       	in	r18, 0x11	; 17
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <gpio_set+0x68>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	7a 95       	dec	r23
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <gpio_set+0x64>
    139a:	82 2b       	or	r24, r18
    139c:	81 bb       	out	0x11, r24	; 17
		break;
    139e:	08 95       	ret
		
		case port_g:
		PORTG |= (1<<pin_id);
    13a0:	24 b3       	in	r18, 0x14	; 20
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <gpio_set+0x7e>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	7a 95       	dec	r23
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <gpio_set+0x7a>
    13b0:	82 2b       	or	r24, r18
    13b2:	84 bb       	out	0x14, r24	; 20
    13b4:	08 95       	ret

000013b6 <gpio_clr>:
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	uint8_t temp = 0;
	uint8_t temp1 = 0;
	
	switch (port_id)
    13b6:	62 30       	cpi	r22, 0x02	; 2
    13b8:	19 f1       	breq	.+70     	; 0x1400 <gpio_clr+0x4a>
    13ba:	28 f4       	brcc	.+10     	; 0x13c6 <gpio_clr+0x10>
    13bc:	66 23       	and	r22, r22
    13be:	41 f0       	breq	.+16     	; 0x13d0 <gpio_clr+0x1a>
    13c0:	61 30       	cpi	r22, 0x01	; 1
    13c2:	91 f0       	breq	.+36     	; 0x13e8 <gpio_clr+0x32>
    13c4:	08 95       	ret
    13c6:	63 30       	cpi	r22, 0x03	; 3
    13c8:	39 f1       	breq	.+78     	; 0x1418 <gpio_clr+0x62>
    13ca:	64 30       	cpi	r22, 0x04	; 4
    13cc:	89 f1       	breq	.+98     	; 0x1430 <gpio_clr+0x7a>
    13ce:	08 95       	ret
	{
		case port_b:
		PORTB &= ~(1<<pin_id);
    13d0:	25 b1       	in	r18, 0x05	; 5
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <gpio_clr+0x26>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	7a 95       	dec	r23
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <gpio_clr+0x22>
    13e0:	80 95       	com	r24
    13e2:	82 23       	and	r24, r18
    13e4:	85 b9       	out	0x05, r24	; 5
		break;
    13e6:	08 95       	ret
		
		case port_d:
		PORTD &= ~(1<<pin_id);
    13e8:	2b b1       	in	r18, 0x0b	; 11
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <gpio_clr+0x3e>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	7a 95       	dec	r23
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <gpio_clr+0x3a>
    13f8:	80 95       	com	r24
    13fa:	82 23       	and	r24, r18
    13fc:	8b b9       	out	0x0b, r24	; 11
		break;
    13fe:	08 95       	ret
		
		case port_e:
		temp = (1<<pin_id);
		temp1 = ~(temp);
		PORTE &= temp1;
    1400:	2e b1       	in	r18, 0x0e	; 14
		case port_d:
		PORTD &= ~(1<<pin_id);
		break;
		
		case port_e:
		temp = (1<<pin_id);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <gpio_clr+0x56>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	7a 95       	dec	r23
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <gpio_clr+0x52>
		temp1 = ~(temp);
    1410:	80 95       	com	r24
		PORTE &= temp1;
    1412:	82 23       	and	r24, r18
    1414:	8e b9       	out	0x0e, r24	; 14
		break;
    1416:	08 95       	ret
		
		case port_f:
		PORTF &= ~(1<<pin_id);
    1418:	21 b3       	in	r18, 0x11	; 17
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <gpio_clr+0x6e>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	7a 95       	dec	r23
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <gpio_clr+0x6a>
    1428:	80 95       	com	r24
    142a:	82 23       	and	r24, r18
    142c:	81 bb       	out	0x11, r24	; 17
		break;
    142e:	08 95       	ret
		
		case port_g:
		PORTG &= ~(1<<pin_id);
    1430:	24 b3       	in	r18, 0x14	; 20
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <gpio_clr+0x86>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	7a 95       	dec	r23
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <gpio_clr+0x82>
    1440:	80 95       	com	r24
    1442:	82 23       	and	r24, r18
    1444:	84 bb       	out	0x14, r24	; 20
    1446:	08 95       	ret

00001448 <gpio_toggle>:
void gpio_toggle(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1448:	62 30       	cpi	r22, 0x02	; 2
    144a:	09 f1       	breq	.+66     	; 0x148e <gpio_toggle+0x46>
    144c:	28 f4       	brcc	.+10     	; 0x1458 <gpio_toggle+0x10>
    144e:	66 23       	and	r22, r22
    1450:	41 f0       	breq	.+16     	; 0x1462 <gpio_toggle+0x1a>
    1452:	61 30       	cpi	r22, 0x01	; 1
    1454:	89 f0       	breq	.+34     	; 0x1478 <gpio_toggle+0x30>
    1456:	08 95       	ret
    1458:	63 30       	cpi	r22, 0x03	; 3
    145a:	21 f1       	breq	.+72     	; 0x14a4 <gpio_toggle+0x5c>
    145c:	64 30       	cpi	r22, 0x04	; 4
    145e:	69 f1       	breq	.+90     	; 0x14ba <gpio_toggle+0x72>
    1460:	08 95       	ret
	{
		case port_b:
		PORTB ^= (1 << pin_id);
    1462:	25 b1       	in	r18, 0x05	; 5
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 c0       	rjmp	.+4      	; 0x146e <gpio_toggle+0x26>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	7a 95       	dec	r23
    1470:	e2 f7       	brpl	.-8      	; 0x146a <gpio_toggle+0x22>
    1472:	82 27       	eor	r24, r18
    1474:	85 b9       	out	0x05, r24	; 5
		break;
    1476:	08 95       	ret
		
		case port_d:
		PORTD ^= (1 << pin_id);
    1478:	2b b1       	in	r18, 0x0b	; 11
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <gpio_toggle+0x3c>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	7a 95       	dec	r23
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <gpio_toggle+0x38>
    1488:	82 27       	eor	r24, r18
    148a:	8b b9       	out	0x0b, r24	; 11
		break;
    148c:	08 95       	ret
		
		case port_e:
		PORTE ^= (1 << pin_id);
    148e:	2e b1       	in	r18, 0x0e	; 14
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 c0       	rjmp	.+4      	; 0x149a <gpio_toggle+0x52>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	7a 95       	dec	r23
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <gpio_toggle+0x4e>
    149e:	82 27       	eor	r24, r18
    14a0:	8e b9       	out	0x0e, r24	; 14
		break;
    14a2:	08 95       	ret
		
		case port_f:
		PORTF ^= (1 << pin_id);
    14a4:	21 b3       	in	r18, 0x11	; 17
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <gpio_toggle+0x68>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	7a 95       	dec	r23
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <gpio_toggle+0x64>
    14b4:	82 27       	eor	r24, r18
    14b6:	81 bb       	out	0x11, r24	; 17
		break;
    14b8:	08 95       	ret
		
		case port_g:
		PORTG ^= (1 << pin_id);
    14ba:	24 b3       	in	r18, 0x14	; 20
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <gpio_toggle+0x7e>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	7a 95       	dec	r23
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <gpio_toggle+0x7a>
    14ca:	82 27       	eor	r24, r18
    14cc:	84 bb       	out	0x14, r24	; 20
    14ce:	08 95       	ret

000014d0 <gpio_in>:
void gpio_in(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    14d0:	62 30       	cpi	r22, 0x02	; 2
    14d2:	61 f1       	breq	.+88     	; 0x152c <gpio_in+0x5c>
    14d4:	28 f4       	brcc	.+10     	; 0x14e0 <gpio_in+0x10>
    14d6:	66 23       	and	r22, r22
    14d8:	49 f0       	breq	.+18     	; 0x14ec <gpio_in+0x1c>
    14da:	61 30       	cpi	r22, 0x01	; 1
    14dc:	b9 f0       	breq	.+46     	; 0x150c <gpio_in+0x3c>
    14de:	08 95       	ret
    14e0:	63 30       	cpi	r22, 0x03	; 3
    14e2:	a1 f1       	breq	.+104    	; 0x154c <gpio_in+0x7c>
    14e4:	64 30       	cpi	r22, 0x04	; 4
    14e6:	09 f4       	brne	.+2      	; 0x14ea <gpio_in+0x1a>
    14e8:	41 c0       	rjmp	.+130    	; 0x156c <gpio_in+0x9c>
    14ea:	08 95       	ret
	{
		case port_b:
		DDRB &= ~(1 << pin_id);
    14ec:	24 b1       	in	r18, 0x04	; 4
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <gpio_in+0x28>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	7a 95       	dec	r23
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <gpio_in+0x24>
    14fc:	80 95       	com	r24
    14fe:	98 2f       	mov	r25, r24
    1500:	92 23       	and	r25, r18
    1502:	94 b9       	out	0x04, r25	; 4
		PORTB &= ~(1 << pin_id);
    1504:	95 b1       	in	r25, 0x05	; 5
    1506:	89 23       	and	r24, r25
    1508:	85 b9       	out	0x05, r24	; 5
		break;
    150a:	08 95       	ret
		
		case port_d:
		DDRD &= ~(1 << pin_id);
    150c:	2a b1       	in	r18, 0x0a	; 10
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <gpio_in+0x48>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	7a 95       	dec	r23
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <gpio_in+0x44>
    151c:	80 95       	com	r24
    151e:	98 2f       	mov	r25, r24
    1520:	92 23       	and	r25, r18
    1522:	9a b9       	out	0x0a, r25	; 10
		PORTD &= ~(1 << pin_id);
    1524:	9b b1       	in	r25, 0x0b	; 11
    1526:	89 23       	and	r24, r25
    1528:	8b b9       	out	0x0b, r24	; 11
		break;
    152a:	08 95       	ret
		
		case port_e:
		DDRE &= ~(1 << pin_id);
    152c:	2d b1       	in	r18, 0x0d	; 13
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <gpio_in+0x68>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	7a 95       	dec	r23
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <gpio_in+0x64>
    153c:	80 95       	com	r24
    153e:	98 2f       	mov	r25, r24
    1540:	92 23       	and	r25, r18
    1542:	9d b9       	out	0x0d, r25	; 13
		PORTE &= ~(1 << pin_id);
    1544:	9e b1       	in	r25, 0x0e	; 14
    1546:	89 23       	and	r24, r25
    1548:	8e b9       	out	0x0e, r24	; 14
		break;
    154a:	08 95       	ret
		
		case port_f:
		DDRF &= ~(1 << pin_id);
    154c:	20 b3       	in	r18, 0x10	; 16
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <gpio_in+0x88>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	7a 95       	dec	r23
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <gpio_in+0x84>
    155c:	80 95       	com	r24
    155e:	98 2f       	mov	r25, r24
    1560:	92 23       	and	r25, r18
    1562:	90 bb       	out	0x10, r25	; 16
		PORTF &= ~(1 << pin_id);
    1564:	91 b3       	in	r25, 0x11	; 17
    1566:	89 23       	and	r24, r25
    1568:	81 bb       	out	0x11, r24	; 17
		break;
    156a:	08 95       	ret
		
		case port_g:
		DDRG &= ~(1 << pin_id);
    156c:	23 b3       	in	r18, 0x13	; 19
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <gpio_in+0xa8>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	7a 95       	dec	r23
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <gpio_in+0xa4>
    157c:	80 95       	com	r24
    157e:	98 2f       	mov	r25, r24
    1580:	92 23       	and	r25, r18
    1582:	93 bb       	out	0x13, r25	; 19
		PORTG &= ~(1 << pin_id);
    1584:	94 b3       	in	r25, 0x14	; 20
    1586:	89 23       	and	r24, r25
    1588:	84 bb       	out	0x14, r24	; 20
    158a:	08 95       	ret

0000158c <gpio_out>:
void gpio_out(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    158c:	62 30       	cpi	r22, 0x02	; 2
    158e:	09 f1       	breq	.+66     	; 0x15d2 <gpio_out+0x46>
    1590:	28 f4       	brcc	.+10     	; 0x159c <gpio_out+0x10>
    1592:	66 23       	and	r22, r22
    1594:	41 f0       	breq	.+16     	; 0x15a6 <gpio_out+0x1a>
    1596:	61 30       	cpi	r22, 0x01	; 1
    1598:	89 f0       	breq	.+34     	; 0x15bc <gpio_out+0x30>
    159a:	08 95       	ret
    159c:	63 30       	cpi	r22, 0x03	; 3
    159e:	21 f1       	breq	.+72     	; 0x15e8 <gpio_out+0x5c>
    15a0:	64 30       	cpi	r22, 0x04	; 4
    15a2:	69 f1       	breq	.+90     	; 0x15fe <gpio_out+0x72>
    15a4:	08 95       	ret
	{
		case port_b:
		DDRB |= (1<<pin_id);
    15a6:	24 b1       	in	r18, 0x04	; 4
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <gpio_out+0x26>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	7a 95       	dec	r23
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <gpio_out+0x22>
    15b6:	82 2b       	or	r24, r18
    15b8:	84 b9       	out	0x04, r24	; 4
		break;
    15ba:	08 95       	ret
		
		case port_d:
		DDRD |= (1<<pin_id);
    15bc:	2a b1       	in	r18, 0x0a	; 10
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <gpio_out+0x3c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	7a 95       	dec	r23
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <gpio_out+0x38>
    15cc:	82 2b       	or	r24, r18
    15ce:	8a b9       	out	0x0a, r24	; 10
		break;
    15d0:	08 95       	ret
		
		case port_e:
		DDRE |= (1<<pin_id);
    15d2:	2d b1       	in	r18, 0x0d	; 13
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <gpio_out+0x52>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	7a 95       	dec	r23
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <gpio_out+0x4e>
    15e2:	82 2b       	or	r24, r18
    15e4:	8d b9       	out	0x0d, r24	; 13
		break;
    15e6:	08 95       	ret
		
		case port_f:
		DDRF |= (1<<pin_id);
    15e8:	20 b3       	in	r18, 0x10	; 16
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <gpio_out+0x68>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	7a 95       	dec	r23
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <gpio_out+0x64>
    15f8:	82 2b       	or	r24, r18
    15fa:	80 bb       	out	0x10, r24	; 16
		break;
    15fc:	08 95       	ret
		
		case port_g:
		DDRG |= (1<<pin_id);
    15fe:	23 b3       	in	r18, 0x13	; 19
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 c0       	rjmp	.+4      	; 0x160a <gpio_out+0x7e>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	7a 95       	dec	r23
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <gpio_out+0x7a>
    160e:	82 2b       	or	r24, r18
    1610:	83 bb       	out	0x13, r24	; 19
    1612:	08 95       	ret

00001614 <gpio_pullup>:
void gpio_pullup(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    1614:	62 30       	cpi	r22, 0x02	; 2
    1616:	09 f1       	breq	.+66     	; 0x165a <gpio_pullup+0x46>
    1618:	28 f4       	brcc	.+10     	; 0x1624 <gpio_pullup+0x10>
    161a:	66 23       	and	r22, r22
    161c:	41 f0       	breq	.+16     	; 0x162e <gpio_pullup+0x1a>
    161e:	61 30       	cpi	r22, 0x01	; 1
    1620:	89 f0       	breq	.+34     	; 0x1644 <gpio_pullup+0x30>
    1622:	08 95       	ret
    1624:	63 30       	cpi	r22, 0x03	; 3
    1626:	21 f1       	breq	.+72     	; 0x1670 <gpio_pullup+0x5c>
    1628:	64 30       	cpi	r22, 0x04	; 4
    162a:	69 f1       	breq	.+90     	; 0x1686 <gpio_pullup+0x72>
    162c:	08 95       	ret
	{
		case port_b:
		PORTB |= (1 << pin_id);
    162e:	25 b1       	in	r18, 0x05	; 5
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <gpio_pullup+0x26>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	7a 95       	dec	r23
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <gpio_pullup+0x22>
    163e:	82 2b       	or	r24, r18
    1640:	85 b9       	out	0x05, r24	; 5
		break;
    1642:	08 95       	ret
		
		case port_d:
		PORTD |= (1 << pin_id);
    1644:	2b b1       	in	r18, 0x0b	; 11
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <gpio_pullup+0x3c>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	7a 95       	dec	r23
    1652:	e2 f7       	brpl	.-8      	; 0x164c <gpio_pullup+0x38>
    1654:	82 2b       	or	r24, r18
    1656:	8b b9       	out	0x0b, r24	; 11
		break;
    1658:	08 95       	ret
		
		case port_e:
		PORTE |= (1 << pin_id);
    165a:	2e b1       	in	r18, 0x0e	; 14
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <gpio_pullup+0x52>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	7a 95       	dec	r23
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <gpio_pullup+0x4e>
    166a:	82 2b       	or	r24, r18
    166c:	8e b9       	out	0x0e, r24	; 14
		break;
    166e:	08 95       	ret
		
		case port_f:
		PORTF |= (1 << pin_id);
    1670:	21 b3       	in	r18, 0x11	; 17
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <gpio_pullup+0x68>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	7a 95       	dec	r23
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <gpio_pullup+0x64>
    1680:	82 2b       	or	r24, r18
    1682:	81 bb       	out	0x11, r24	; 17
		break;
    1684:	08 95       	ret
		
		case port_g:
		PORTG |= (1 << pin_id);
    1686:	24 b3       	in	r18, 0x14	; 20
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <gpio_pullup+0x7e>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	7a 95       	dec	r23
    1694:	e2 f7       	brpl	.-8      	; 0x168e <gpio_pullup+0x7a>
    1696:	82 2b       	or	r24, r18
    1698:	84 bb       	out	0x14, r24	; 20
    169a:	08 95       	ret

0000169c <gpio_read>:
uint8_t gpio_read(gpio_t gpio_id)
{
	port_id_t port_id = gpio_id.port_id;
	uint8_t pin_id = gpio_id.pin_id;
	
	switch (port_id)
    169c:	62 30       	cpi	r22, 0x02	; 2
    169e:	e9 f0       	breq	.+58     	; 0x16da <gpio_read+0x3e>
    16a0:	28 f4       	brcc	.+10     	; 0x16ac <gpio_read+0x10>
    16a2:	66 23       	and	r22, r22
    16a4:	41 f0       	breq	.+16     	; 0x16b6 <gpio_read+0x1a>
    16a6:	61 30       	cpi	r22, 0x01	; 1
    16a8:	79 f0       	breq	.+30     	; 0x16c8 <gpio_read+0x2c>
    16aa:	32 c0       	rjmp	.+100    	; 0x1710 <gpio_read+0x74>
    16ac:	63 30       	cpi	r22, 0x03	; 3
    16ae:	f1 f0       	breq	.+60     	; 0x16ec <gpio_read+0x50>
    16b0:	64 30       	cpi	r22, 0x04	; 4
    16b2:	29 f1       	breq	.+74     	; 0x16fe <gpio_read+0x62>
    16b4:	2d c0       	rjmp	.+90     	; 0x1710 <gpio_read+0x74>
	{
		case port_b:
		return (PINB & (1 << pin_id)) != 0;
    16b6:	83 b1       	in	r24, 0x03	; 3
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <gpio_read+0x24>
    16bc:	95 95       	asr	r25
    16be:	87 95       	ror	r24
    16c0:	7a 95       	dec	r23
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <gpio_read+0x20>
    16c4:	81 70       	andi	r24, 0x01	; 1
    16c6:	08 95       	ret
		break;
		
		case port_d:
		return (PIND & (1 << pin_id)) != 0;
    16c8:	89 b1       	in	r24, 0x09	; 9
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <gpio_read+0x36>
    16ce:	95 95       	asr	r25
    16d0:	87 95       	ror	r24
    16d2:	7a 95       	dec	r23
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <gpio_read+0x32>
    16d6:	81 70       	andi	r24, 0x01	; 1
    16d8:	08 95       	ret
		break;
		
		case port_e:
		return (PINE & (1 << pin_id)) != 0;
    16da:	8c b1       	in	r24, 0x0c	; 12
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <gpio_read+0x48>
    16e0:	95 95       	asr	r25
    16e2:	87 95       	ror	r24
    16e4:	7a 95       	dec	r23
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <gpio_read+0x44>
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	08 95       	ret
		break;
		
		case port_f:
		return (PINF & (1 << pin_id)) != 0;
    16ec:	8f b1       	in	r24, 0x0f	; 15
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <gpio_read+0x5a>
    16f2:	95 95       	asr	r25
    16f4:	87 95       	ror	r24
    16f6:	7a 95       	dec	r23
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <gpio_read+0x56>
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	08 95       	ret
		break;
		
		case port_g:
		return (PING & (1 << pin_id)) != 0;
    16fe:	82 b3       	in	r24, 0x12	; 18
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <gpio_read+0x6c>
    1704:	95 95       	asr	r25
    1706:	87 95       	ror	r24
    1708:	7a 95       	dec	r23
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <gpio_read+0x68>
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	08 95       	ret
		
		default:
		break;
	}
	
	return 0;
    1710:	80 e0       	ldi	r24, 0x00	; 0
}
    1712:	08 95       	ret

00001714 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    1714:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	a8 95       	wdr
    171c:	80 91 60 00 	lds	r24, 0x0060
    1720:	88 61       	ori	r24, 0x18	; 24
    1722:	80 93 60 00 	sts	0x0060, r24
    1726:	10 92 60 00 	sts	0x0060, r1
    172a:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    172c:	e1 e6       	ldi	r30, 0x61	; 97
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 e8       	ldi	r24, 0x80	; 128
    1732:	80 83       	st	Z, r24
  CLKPR = 0;
    1734:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    1736:	78 94       	sei

  HAL_TimerInit();
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <HAL_TimerInit>
    173a:	08 95       	ret

0000173c <HAL_Delay>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Delay(uint8_t us)
{
  HAL_TimerDelay(us);
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	16 c0       	rjmp	.+44     	; 0x176c <HAL_TimerDelay>
    1740:	08 95       	ret

00001742 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    1742:	10 92 ea 20 	sts	0x20EA, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    1746:	80 e1       	ldi	r24, 0x10	; 16
    1748:	97 e2       	ldi	r25, 0x27	; 39
    174a:	90 93 a9 00 	sts	0x00A9, r25
    174e:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    1752:	e1 ea       	ldi	r30, 0xA1	; 161
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	88 e0       	ldi	r24, 0x08	; 8
    1758:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    175a:	80 81       	ld	r24, Z
    175c:	82 60       	ori	r24, 0x02	; 2
    175e:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1760:	e2 e7       	ldi	r30, 0x72	; 114
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	82 60       	ori	r24, 0x02	; 2
    1768:	80 83       	st	Z, r24
    176a:	08 95       	ret

0000176c <HAL_TimerDelay>:
*****************************************************************************/
void HAL_TimerDelay(uint16_t us)
{
  PRAGMA(diag_suppress=Pa082);

  OCR4B = TCNT4 + us;
    176c:	20 91 a4 00 	lds	r18, 0x00A4
    1770:	30 91 a5 00 	lds	r19, 0x00A5
    1774:	82 0f       	add	r24, r18
    1776:	93 1f       	adc	r25, r19
    1778:	ea ea       	ldi	r30, 0xAA	; 170
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
  if (OCR4B > OCR4A)
    1780:	20 81       	ld	r18, Z
    1782:	31 81       	ldd	r19, Z+1	; 0x01
    1784:	80 91 a8 00 	lds	r24, 0x00A8
    1788:	90 91 a9 00 	lds	r25, 0x00A9
    178c:	82 17       	cp	r24, r18
    178e:	93 07       	cpc	r25, r19
    1790:	50 f4       	brcc	.+20     	; 0x17a6 <HAL_TimerDelay+0x3a>
    OCR4B -= OCR4A;
    1792:	20 91 a8 00 	lds	r18, 0x00A8
    1796:	30 91 a9 00 	lds	r19, 0x00A9
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	82 1b       	sub	r24, r18
    17a0:	93 0b       	sbc	r25, r19
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	80 83       	st	Z, r24

  TIFR4 = (1 << OCF4B);
    17a6:	84 e0       	ldi	r24, 0x04	; 4
    17a8:	89 bb       	out	0x19, r24	; 25
  while (0 == (TIFR4 & (1 << OCF4B)));
    17aa:	ca 9b       	sbis	0x19, 2	; 25
    17ac:	fe cf       	rjmp	.-4      	; 0x17aa <HAL_TimerDelay+0x3e>

  PRAGMA(diag_default=Pa082);
}
    17ae:	08 95       	ret

000017b0 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	8f 93       	push	r24
  halTimerIrqCount++;
    17bc:	80 91 ea 20 	lds	r24, 0x20EA
    17c0:	8f 5f       	subi	r24, 0xFF	; 255
    17c2:	80 93 ea 20 	sts	0x20EA, r24
}
    17c6:	8f 91       	pop	r24
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    17d2:	eb ee       	ldi	r30, 0xEB	; 235
    17d4:	f0 e2       	ldi	r31, 0x20	; 32
    17d6:	14 82       	std	Z+4, r1	; 0x04
    17d8:	15 82       	std	Z+5, r1	; 0x05
    17da:	11 82       	std	Z+1, r1	; 0x01
    17dc:	10 82       	st	Z, r1
    17de:	17 aa       	std	Z+55, r1	; 0x37
    17e0:	16 aa       	std	Z+54, r1	; 0x36
    17e2:	e1 ef       	ldi	r30, 0xF1	; 241
    17e4:	f0 e2       	ldi	r31, 0x20	; 32
    17e6:	81 e1       	ldi	r24, 0x11	; 17
    17e8:	91 e2       	ldi	r25, 0x21	; 33
    17ea:	11 92       	st	Z+, r1
    17ec:	11 92       	st	Z+, r1
    17ee:	e8 17       	cp	r30, r24
    17f0:	f9 07       	cpc	r31, r25
    17f2:	d9 f7       	brne	.-10     	; 0x17ea <NWK_Init+0x18>
    17f4:	ee d5       	rcall	.+3036   	; 0x23d2 <nwkTxInit>
    17f6:	c3 d1       	rcall	.+902    	; 0x1b7e <nwkRxInit>
    17f8:	14 d1       	rcall	.+552    	; 0x1a22 <nwkFrameInit>
    17fa:	3f d0       	rcall	.+126    	; 0x187a <nwkDataReqInit>
    17fc:	40 c4       	rjmp	.+2176   	; 0x207e <nwkSecurityInit>
    17fe:	08 95       	ret

00001800 <NWK_SetAddr>:
    1800:	90 93 ec 20 	sts	0x20EC, r25
    1804:	80 93 eb 20 	sts	0x20EB, r24
    1808:	e1 c7       	rjmp	.+4034   	; 0x27cc <PHY_SetShortAddr>
    180a:	08 95       	ret

0000180c <NWK_SetPanId>:
    180c:	90 93 ee 20 	sts	0x20EE, r25
    1810:	80 93 ed 20 	sts	0x20ED, r24
    1814:	c9 c7       	rjmp	.+3986   	; 0x27a8 <PHY_SetPanId>
    1816:	08 95       	ret

00001818 <NWK_OpenEndpoint>:
    1818:	e8 2f       	mov	r30, r24
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ef 50       	subi	r30, 0x0F	; 15
    1822:	ff 4d       	sbci	r31, 0xDF	; 223
    1824:	71 83       	std	Z+1, r23	; 0x01
    1826:	60 83       	st	Z, r22
    1828:	08 95       	ret

0000182a <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    182a:	fb d1       	rcall	.+1014   	; 0x1c22 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    182c:	da d6       	rcall	.+3508   	; 0x25e2 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    182e:	4e d0       	rcall	.+156    	; 0x18cc <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
    1830:	83 c4       	rjmp	.+2310   	; 0x2138 <nwkSecurityTaskHandler>
    1832:	08 95       	ret

00001834 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1834:	e0 91 b0 13 	lds	r30, 0x13B0
    1838:	f0 91 b1 13 	lds	r31, 0x13B1
    183c:	30 97       	sbiw	r30, 0x00	; 0
    183e:	d9 f0       	breq	.+54     	; 0x1876 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    1840:	22 81       	ldd	r18, Z+2	; 0x02
    1842:	33 81       	ldd	r19, Z+3	; 0x03
    1844:	28 17       	cp	r18, r24
    1846:	39 07       	cpc	r19, r25
    1848:	89 f4       	brne	.+34     	; 0x186c <nwkDataReqTxConf+0x38>
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <nwkDataReqTxConf+0x22>
    184c:	22 81       	ldd	r18, Z+2	; 0x02
    184e:	33 81       	ldd	r19, Z+3	; 0x03
    1850:	28 17       	cp	r18, r24
    1852:	39 07       	cpc	r19, r25
    1854:	59 f4       	brne	.+22     	; 0x186c <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    1856:	dc 01       	movw	r26, r24
    1858:	ad 57       	subi	r26, 0x7D	; 125
    185a:	bf 4f       	sbci	r27, 0xFF	; 255
    185c:	2c 91       	ld	r18, X
    185e:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    1860:	13 96       	adiw	r26, 0x03	; 3
    1862:	2c 91       	ld	r18, X
    1864:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1866:	22 e0       	ldi	r18, 0x02	; 2
    1868:	24 83       	std	Z+4, r18	; 0x04
      break;
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    186c:	01 90       	ld	r0, Z+
    186e:	f0 81       	ld	r31, Z
    1870:	e0 2d       	mov	r30, r0
    1872:	30 97       	sbiw	r30, 0x00	; 0
    1874:	59 f7       	brne	.-42     	; 0x184c <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    1876:	19 c1       	rjmp	.+562    	; 0x1aaa <nwkFrameFree>
    1878:	08 95       	ret

0000187a <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    187a:	10 92 b1 13 	sts	0x13B1, r1
    187e:	10 92 b0 13 	sts	0x13B0, r1
    1882:	08 95       	ret

00001884 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    1884:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    1886:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    1888:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    188a:	13 82       	std	Z+3, r1	; 0x03
    188c:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    188e:	ab ee       	ldi	r26, 0xEB	; 235
    1890:	b0 e2       	ldi	r27, 0x20	; 32
    1892:	d6 96       	adiw	r26, 0x36	; 54
    1894:	8d 91       	ld	r24, X+
    1896:	9c 91       	ld	r25, X
    1898:	d7 97       	sbiw	r26, 0x37	; 55
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	d7 96       	adiw	r26, 0x37	; 55
    189e:	9c 93       	st	X, r25
    18a0:	8e 93       	st	-X, r24
    18a2:	d6 97       	sbiw	r26, 0x36	; 54

  if (NULL == nwkDataReqQueue)
    18a4:	80 91 b0 13 	lds	r24, 0x13B0
    18a8:	90 91 b1 13 	lds	r25, 0x13B1
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	39 f4       	brne	.+14     	; 0x18be <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    18b0:	11 82       	std	Z+1, r1	; 0x01
    18b2:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    18b4:	f0 93 b1 13 	sts	0x13B1, r31
    18b8:	e0 93 b0 13 	sts	0x13B0, r30
    18bc:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    18c2:	f0 93 b1 13 	sts	0x13B1, r31
    18c6:	e0 93 b0 13 	sts	0x13B0, r30
    18ca:	08 95       	ret

000018cc <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    18d4:	e0 91 b0 13 	lds	r30, 0x13B0
    18d8:	f0 91 b1 13 	lds	r31, 0x13B1
    18dc:	30 97       	sbiw	r30, 0x00	; 0
    18de:	09 f4       	brne	.+2      	; 0x18e2 <nwkDataReqTaskHandler+0x16>
    18e0:	9b c0       	rjmp	.+310    	; 0x1a18 <nwkDataReqTaskHandler+0x14c>
    18e2:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	88 23       	and	r24, r24
    18e8:	21 f0       	breq	.+8      	; 0x18f2 <nwkDataReqTaskHandler+0x26>
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <nwkDataReqTaskHandler+0x24>
    18ee:	6e c0       	rjmp	.+220    	; 0x19cc <nwkDataReqTaskHandler+0x100>
    18f0:	8d c0       	rjmp	.+282    	; 0x1a0c <nwkDataReqTaskHandler+0x140>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    18f2:	a2 d0       	rcall	.+324    	; 0x1a38 <nwkFrameAlloc>
    18f4:	8c 01       	movw	r16, r24
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	21 f4       	brne	.+8      	; 0x1902 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    18fe:	8f 87       	std	Y+15, r24	; 0x0f
    1900:	8b c0       	rjmp	.+278    	; 0x1a18 <nwkDataReqTaskHandler+0x14c>
    return;
  }

  req->frame = frame;
    1902:	9b 83       	std	Y+3, r25	; 0x03
    1904:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    190a:	f8 01       	movw	r30, r16
    190c:	e9 57       	subi	r30, 0x79	; 121
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	8a e1       	ldi	r24, 0x1A	; 26
    1912:	9c e0       	ldi	r25, 0x0C	; 12
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    1918:	31 97       	sbiw	r30, 0x01	; 1
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	82 fb       	bst	r24, 2
    191e:	88 27       	eor	r24, r24
    1920:	80 f9       	bld	r24, 0
    1922:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    1924:	99 85       	ldd	r25, Y+9	; 0x09
    1926:	d8 01       	movw	r26, r16
    1928:	1b 96       	adiw	r26, 0x0b	; 11
    192a:	8c 91       	ld	r24, X
    192c:	1b 97       	sbiw	r26, 0x0b	; 11
    192e:	90 fb       	bst	r25, 0
    1930:	80 f9       	bld	r24, 0
    1932:	1b 96       	adiw	r26, 0x0b	; 11
    1934:	8c 93       	st	X, r24
    1936:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    1938:	99 85       	ldd	r25, Y+9	; 0x09
    193a:	93 fb       	bst	r25, 3
    193c:	99 27       	eor	r25, r25
    193e:	90 f9       	bld	r25, 0
    1940:	90 fb       	bst	r25, 0
    1942:	82 f9       	bld	r24, 2
    1944:	1b 96       	adiw	r26, 0x0b	; 11
    1946:	8c 93       	st	X, r24
    1948:	1b 97       	sbiw	r26, 0x0b	; 11

#ifdef NWK_ENABLE_SECURITY
  frame->header.nwkFcf.security = req->options & NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    194a:	99 85       	ldd	r25, Y+9	; 0x09
    194c:	96 95       	lsr	r25
    194e:	91 70       	andi	r25, 0x01	; 1
    1950:	90 fb       	bst	r25, 0
    1952:	81 f9       	bld	r24, 1
    1954:	1b 96       	adiw	r26, 0x0b	; 11
    1956:	8c 93       	st	X, r24
    1958:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    195a:	eb ee       	ldi	r30, 0xEB	; 235
    195c:	f0 e2       	ldi	r31, 0x20	; 32
    195e:	84 81       	ldd	r24, Z+4	; 0x04
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	84 83       	std	Z+4, r24	; 0x04
    1964:	1c 96       	adiw	r26, 0x0c	; 12
    1966:	8c 93       	st	X, r24
    1968:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	1e 96       	adiw	r26, 0x0e	; 14
    1970:	9c 93       	st	X, r25
    1972:	8e 93       	st	-X, r24
    1974:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	50 96       	adiw	r26, 0x10	; 16
    197c:	9c 93       	st	X, r25
    197e:	8e 93       	st	-X, r24
    1980:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    1982:	88 85       	ldd	r24, Y+8	; 0x08
    1984:	98 2f       	mov	r25, r24
    1986:	9f 70       	andi	r25, 0x0F	; 15
    1988:	51 96       	adiw	r26, 0x11	; 17
    198a:	8c 91       	ld	r24, X
    198c:	51 97       	sbiw	r26, 0x11	; 17
    198e:	80 7f       	andi	r24, 0xF0	; 240
    1990:	89 2b       	or	r24, r25
    1992:	51 96       	adiw	r26, 0x11	; 17
    1994:	8c 93       	st	X, r24
    1996:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    1998:	9f 81       	ldd	r25, Y+7	; 0x07
    199a:	92 95       	swap	r25
    199c:	90 7f       	andi	r25, 0xF0	; 240
    199e:	8f 70       	andi	r24, 0x0F	; 15
    19a0:	89 2b       	or	r24, r25
    19a2:	51 96       	adiw	r26, 0x11	; 17
    19a4:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    19a6:	f8 01       	movw	r30, r16
    19a8:	ef 57       	subi	r30, 0x7F	; 127
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	4c 85       	ldd	r20, Y+12	; 0x0c
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	6a 85       	ldd	r22, Y+10	; 0x0a
    19b2:	7b 85       	ldd	r23, Y+11	; 0x0b
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <memcpy>
  frame->size += req->size;
    19bc:	f8 01       	movw	r30, r16
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    19c2:	89 0f       	add	r24, r25
    19c4:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    19c6:	c8 01       	movw	r24, r16
    19c8:	27 d5       	rcall	.+2638   	; 0x2418 <nwkTxFrame>
    19ca:	26 c0       	rjmp	.+76     	; 0x1a18 <nwkDataReqTaskHandler+0x14c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    19cc:	ce 17       	cp	r28, r30
    19ce:	df 07       	cpc	r29, r31
    19d0:	41 f4       	brne	.+16     	; 0x19e2 <nwkDataReqTaskHandler+0x116>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    19d2:	88 81       	ld	r24, Y
    19d4:	99 81       	ldd	r25, Y+1	; 0x01
    19d6:	90 93 b1 13 	sts	0x13B1, r25
    19da:	80 93 b0 13 	sts	0x13B0, r24
    19de:	0a c0       	rjmp	.+20     	; 0x19f4 <nwkDataReqTaskHandler+0x128>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    19e0:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	c8 17       	cp	r28, r24
    19e8:	d9 07       	cpc	r29, r25
    19ea:	d1 f7       	brne	.-12     	; 0x19e0 <nwkDataReqTaskHandler+0x114>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    19ec:	88 81       	ld	r24, Y
    19ee:	99 81       	ldd	r25, Y+1	; 0x01
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    19f4:	eb ee       	ldi	r30, 0xEB	; 235
    19f6:	f0 e2       	ldi	r31, 0x20	; 32
    19f8:	86 a9       	ldd	r24, Z+54	; 0x36
    19fa:	97 a9       	ldd	r25, Z+55	; 0x37
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	97 ab       	std	Z+55, r25	; 0x37
    1a00:	86 ab       	std	Z+54, r24	; 0x36
  req->confirm(req);
    1a02:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a04:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a06:	ce 01       	movw	r24, r28
    1a08:	19 95       	eicall
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <nwkDataReqTaskHandler+0x14c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1a0c:	09 90       	ld	r0, Y+
    1a0e:	d8 81       	ld	r29, Y
    1a10:	c0 2d       	mov	r28, r0
    1a12:	20 97       	sbiw	r28, 0x00	; 0
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <nwkDataReqTaskHandler+0x14c>
    1a16:	66 cf       	rjmp	.-308    	; 0x18e4 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	08 95       	ret

00001a22 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1a22:	e2 eb       	ldi	r30, 0xB2	; 178
    1a24:	f3 e1       	ldi	r31, 0x13	; 19
    1a26:	86 e6       	ldi	r24, 0x66	; 102
    1a28:	9e e1       	ldi	r25, 0x1E	; 30
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1a2a:	10 82       	st	Z, r1
    1a2c:	e7 57       	subi	r30, 0x77	; 119
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1a30:	e8 17       	cp	r30, r24
    1a32:	f9 07       	cpc	r31, r25
    1a34:	d1 f7       	brne	.-12     	; 0x1a2a <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    1a36:	08 95       	ret

00001a38 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    1a38:	80 91 b2 13 	lds	r24, 0x13B2
    1a3c:	88 23       	and	r24, r24
    1a3e:	59 f0       	breq	.+22     	; 0x1a56 <nwkFrameAlloc+0x1e>
    1a40:	eb e3       	ldi	r30, 0x3B	; 59
    1a42:	f4 e1       	ldi	r31, 0x14	; 20
    1a44:	46 e6       	ldi	r20, 0x66	; 102
    1a46:	5e e1       	ldi	r21, 0x1E	; 30
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	20 81       	ld	r18, Z
    1a50:	21 11       	cpse	r18, r1
    1a52:	22 c0       	rjmp	.+68     	; 0x1a98 <nwkFrameAlloc+0x60>
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <nwkFrameAlloc+0x22>
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1a5a:	49 e8       	ldi	r20, 0x89	; 137
    1a5c:	46 9f       	mul	r20, r22
    1a5e:	90 01       	movw	r18, r0
    1a60:	47 9f       	mul	r20, r23
    1a62:	30 0d       	add	r19, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	c9 01       	movw	r24, r18
    1a68:	8e 54       	subi	r24, 0x4E	; 78
    1a6a:	9c 4e       	sbci	r25, 0xEC	; 236
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	11 92       	st	Z+, r1
    1a70:	4a 95       	dec	r20
    1a72:	e9 f7       	brne	.-6      	; 0x1a6e <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1a74:	40 e1       	ldi	r20, 0x10	; 16
    1a76:	fc 01       	movw	r30, r24
    1a78:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    1a7a:	ef 57       	subi	r30, 0x7F	; 127
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	2c 53       	subi	r18, 0x3C	; 60
    1a80:	3c 4e       	sbci	r19, 0xEC	; 236
    1a82:	31 83       	std	Z+1, r19	; 0x01
    1a84:	20 83       	st	Z, r18
      nwkIb.lock++;
    1a86:	eb ee       	ldi	r30, 0xEB	; 235
    1a88:	f0 e2       	ldi	r31, 0x20	; 32
    1a8a:	26 a9       	ldd	r18, Z+54	; 0x36
    1a8c:	37 a9       	ldd	r19, Z+55	; 0x37
    1a8e:	2f 5f       	subi	r18, 0xFF	; 255
    1a90:	3f 4f       	sbci	r19, 0xFF	; 255
    1a92:	37 ab       	std	Z+55, r19	; 0x37
    1a94:	26 ab       	std	Z+54, r18	; 0x36
      return &nwkFrameFrames[i];
    1a96:	08 95       	ret
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	e7 57       	subi	r30, 0x77	; 119
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1a9e:	e4 17       	cp	r30, r20
    1aa0:	f5 07       	cpc	r31, r21
    1aa2:	a1 f6       	brne	.-88     	; 0x1a4c <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
}
    1aa8:	08 95       	ret

00001aaa <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    1aaa:	fc 01       	movw	r30, r24
    1aac:	10 82       	st	Z, r1
  nwkIb.lock--;
    1aae:	eb ee       	ldi	r30, 0xEB	; 235
    1ab0:	f0 e2       	ldi	r31, 0x20	; 32
    1ab2:	86 a9       	ldd	r24, Z+54	; 0x36
    1ab4:	97 a9       	ldd	r25, Z+55	; 0x37
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	97 ab       	std	Z+55, r25	; 0x37
    1aba:	86 ab       	std	Z+54, r24	; 0x36
    1abc:	08 95       	ret

00001abe <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	41 f0       	breq	.+16     	; 0x1ad2 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e7 57       	subi	r30, 0x77	; 119
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1ac8:	8e e1       	ldi	r24, 0x1E	; 30
    1aca:	e6 36       	cpi	r30, 0x66	; 102
    1acc:	f8 07       	cpc	r31, r24
    1ace:	18 f0       	brcs	.+6      	; 0x1ad6 <nwkFrameNext+0x18>
    1ad0:	15 c0       	rjmp	.+42     	; 0x1afc <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    1ad2:	e2 eb       	ldi	r30, 0xB2	; 178
    1ad4:	f3 e1       	ldi	r31, 0x13	; 19
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1ad6:	80 81       	ld	r24, Z
    1ad8:	88 23       	and	r24, r24
    1ada:	39 f0       	breq	.+14     	; 0x1aea <nwkFrameNext+0x2c>
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <nwkFrameNext+0x26>
    1ade:	80 81       	ld	r24, Z
    1ae0:	88 23       	and	r24, r24
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <nwkFrameNext+0x2c>
      return frame;
    1ae4:	8e 2f       	mov	r24, r30
    1ae6:	9f 2f       	mov	r25, r31
    1ae8:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1aea:	e7 57       	subi	r30, 0x77	; 119
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	8e e1       	ldi	r24, 0x1E	; 30
    1af0:	e6 36       	cpi	r30, 0x66	; 102
    1af2:	f8 07       	cpc	r31, r24
    1af4:	a0 f3       	brcs	.-24     	; 0x1ade <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	08 95       	ret
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
}
    1b00:	08 95       	ret

00001b02 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1b02:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    1b04:	dc 01       	movw	r26, r24
    1b06:	ad 57       	subi	r26, 0x7D	; 125
    1b08:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0a:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1b0c:	ab ee       	ldi	r26, 0xEB	; 235
    1b0e:	b0 e2       	ldi	r27, 0x20	; 32
    1b10:	14 96       	adiw	r26, 0x04	; 4
    1b12:	9c 91       	ld	r25, X
    1b14:	14 97       	sbiw	r26, 0x04	; 4
    1b16:	9f 5f       	subi	r25, 0xFF	; 255
    1b18:	14 96       	adiw	r26, 0x04	; 4
    1b1a:	9c 93       	st	X, r25
    1b1c:	14 97       	sbiw	r26, 0x04	; 4
    1b1e:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    1b20:	8d 91       	ld	r24, X+
    1b22:	9c 91       	ld	r25, X
    1b24:	96 87       	std	Z+14, r25	; 0x0e
    1b26:	85 87       	std	Z+13, r24	; 0x0d
    1b28:	08 95       	ret

00001b2a <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	19 96       	adiw	r26, 0x09	; 9
    1b2e:	2c 91       	ld	r18, X
    1b30:	19 97       	sbiw	r26, 0x09	; 9
    1b32:	22 23       	and	r18, r18
    1b34:	49 f0       	breq	.+18     	; 0x1b48 <nwkRxServiceDataInd+0x1e>
    1b36:	17 96       	adiw	r26, 0x07	; 7
    1b38:	ed 91       	ld	r30, X+
    1b3a:	fc 91       	ld	r31, X
    1b3c:	18 97       	sbiw	r26, 0x08	; 8
    1b3e:	20 81       	ld	r18, Z
    1b40:	21 11       	cpse	r18, r1
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <nwkRxServiceDataInd+0x22>
    1b44:	03 c5       	rjmp	.+2566   	; 0x254c <nwkTxAckReceived>
    1b46:	08 95       	ret
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	08 95       	ret
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	08 95       	ret

00001b50 <nwkRxDuplicateRejectionTimerHandler>:
    1b50:	bc 01       	movw	r22, r24
    1b52:	e8 e7       	ldi	r30, 0x78	; 120
    1b54:	fe e1       	ldi	r31, 0x1E	; 30
    1b56:	2a ea       	ldi	r18, 0xAA	; 170
    1b58:	3e e1       	ldi	r19, 0x1E	; 30
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	51 e0       	ldi	r21, 0x01	; 1
    1b5e:	90 81       	ld	r25, Z
    1b60:	99 23       	and	r25, r25
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <nwkRxDuplicateRejectionTimerHandler+0x1a>
    1b64:	91 50       	subi	r25, 0x01	; 1
    1b66:	90 83       	st	Z, r25
    1b68:	45 2f       	mov	r20, r21
    1b6a:	35 96       	adiw	r30, 0x05	; 5
    1b6c:	e2 17       	cp	r30, r18
    1b6e:	f3 07       	cpc	r31, r19
    1b70:	b1 f7       	brne	.-20     	; 0x1b5e <nwkRxDuplicateRejectionTimerHandler+0xe>
    1b72:	44 23       	and	r20, r20
    1b74:	19 f0       	breq	.+6      	; 0x1b7c <nwkRxDuplicateRejectionTimerHandler+0x2c>
    1b76:	cb 01       	movw	r24, r22
    1b78:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <SYS_TimerStart>
    1b7c:	08 95       	ret

00001b7e <nwkRxInit>:
    1b7e:	e8 e7       	ldi	r30, 0x78	; 120
    1b80:	fe e1       	ldi	r31, 0x1E	; 30
    1b82:	8a ea       	ldi	r24, 0xAA	; 170
    1b84:	9e e1       	ldi	r25, 0x1E	; 30
    1b86:	10 82       	st	Z, r1
    1b88:	35 96       	adiw	r30, 0x05	; 5
    1b8a:	e8 17       	cp	r30, r24
    1b8c:	f9 07       	cpc	r31, r25
    1b8e:	d9 f7       	brne	.-10     	; 0x1b86 <nwkRxInit+0x8>
    1b90:	e6 e6       	ldi	r30, 0x66	; 102
    1b92:	fe e1       	ldi	r31, 0x1E	; 30
    1b94:	84 e6       	ldi	r24, 0x64	; 100
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	86 83       	std	Z+6, r24	; 0x06
    1b9e:	97 83       	std	Z+7, r25	; 0x07
    1ba0:	a0 87       	std	Z+8, r26	; 0x08
    1ba2:	b1 87       	std	Z+9, r27	; 0x09
    1ba4:	12 86       	std	Z+10, r1	; 0x0a
    1ba6:	88 ea       	ldi	r24, 0xA8	; 168
    1ba8:	9d e0       	ldi	r25, 0x0D	; 13
    1baa:	94 87       	std	Z+12, r25	; 0x0c
    1bac:	83 87       	std	Z+11, r24	; 0x0b
    1bae:	65 e9       	ldi	r22, 0x95	; 149
    1bb0:	7d e0       	ldi	r23, 0x0D	; 13
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	31 ce       	rjmp	.-926    	; 0x1818 <NWK_OpenEndpoint>
    1bb6:	08 95       	ret

00001bb8 <PHY_DataInd>:
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	ed 91       	ld	r30, X+
    1bc0:	fc 91       	ld	r31, X
    1bc2:	11 97       	sbiw	r26, 0x01	; 1
    1bc4:	21 81       	ldd	r18, Z+1	; 0x01
    1bc6:	28 38       	cpi	r18, 0x88	; 136
    1bc8:	f9 f4       	brne	.+62     	; 0x1c08 <PHY_DataInd+0x50>
    1bca:	20 81       	ld	r18, Z
    1bcc:	2f 7d       	andi	r18, 0xDF	; 223
    1bce:	21 34       	cpi	r18, 0x41	; 65
    1bd0:	d9 f4       	brne	.+54     	; 0x1c08 <PHY_DataInd+0x50>
    1bd2:	12 96       	adiw	r26, 0x02	; 2
    1bd4:	2c 91       	ld	r18, X
    1bd6:	20 31       	cpi	r18, 0x10	; 16
    1bd8:	b8 f0       	brcs	.+46     	; 0x1c08 <PHY_DataInd+0x50>
    1bda:	ec 01       	movw	r28, r24
    1bdc:	2d df       	rcall	.-422    	; 0x1a38 <nwkFrameAlloc>
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	99 f0       	breq	.+38     	; 0x1c08 <PHY_DataInd+0x50>
    1be2:	20 e2       	ldi	r18, 0x20	; 32
    1be4:	fc 01       	movw	r30, r24
    1be6:	20 83       	st	Z, r18
    1be8:	2a 81       	ldd	r18, Y+2	; 0x02
    1bea:	21 83       	std	Z+1, r18	; 0x01
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	ed 57       	subi	r30, 0x7D	; 125
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	20 83       	st	Z, r18
    1bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf6:	31 96       	adiw	r30, 0x01	; 1
    1bf8:	20 83       	st	Z, r18
    1bfa:	4a 81       	ldd	r20, Y+2	; 0x02
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	68 81       	ld	r22, Y
    1c00:	79 81       	ldd	r23, Y+1	; 0x01
    1c02:	02 96       	adiw	r24, 0x02	; 2
    1c04:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <memcpy>
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <nwkRxDecryptConf>:
#ifdef NWK_ENABLE_SECURITY
/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
  if (status)
    1c0e:	66 23       	and	r22, r22
    1c10:	21 f0       	breq	.+8      	; 0x1c1a <nwkRxDecryptConf+0xc>
    frame->state = NWK_RX_STATE_INDICATE;
    1c12:	22 e2       	ldi	r18, 0x22	; 34
    1c14:	fc 01       	movw	r30, r24
    1c16:	20 83       	st	Z, r18
    1c18:	08 95       	ret
  else
    frame->state = NWK_RX_STATE_FINISH;
    1c1a:	24 e2       	ldi	r18, 0x24	; 36
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
    1c20:	08 95       	ret

00001c22 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1c22:	2f 92       	push	r2
    1c24:	3f 92       	push	r3
    1c26:	4f 92       	push	r4
    1c28:	5f 92       	push	r5
    1c2a:	6f 92       	push	r6
    1c2c:	7f 92       	push	r7
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	2c 97       	sbiw	r28, 0x0c	; 12
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1c56:	00 e0       	ldi	r16, 0x00	; 0
    1c58:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1c5a:	0f 2e       	mov	r0, r31
    1c5c:	f4 e2       	ldi	r31, 0x24	; 36
    1c5e:	df 2e       	mov	r13, r31
    1c60:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1c62:	0f 2e       	mov	r0, r31
    1c64:	fb ee       	ldi	r31, 0xEB	; 235
    1c66:	8f 2e       	mov	r8, r31
    1c68:	f0 e2       	ldi	r31, 0x20	; 32
    1c6a:	9f 2e       	mov	r9, r31
    1c6c:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1c6e:	cc 24       	eor	r12, r12
    1c70:	c3 94       	inc	r12
    1c72:	0f 2e       	mov	r0, r31
    1c74:	f8 e7       	ldi	r31, 0x78	; 120
    1c76:	4f 2e       	mov	r4, r31
    1c78:	fe e1       	ldi	r31, 0x1E	; 30
    1c7a:	5f 2e       	mov	r5, r31
    1c7c:	f0 2d       	mov	r31, r0
    1c7e:	0f 2e       	mov	r0, r31
    1c80:	f4 e7       	ldi	r31, 0x74	; 116
    1c82:	6f 2e       	mov	r6, r31
    1c84:	fe e1       	ldi	r31, 0x1E	; 30
    1c86:	7f 2e       	mov	r7, r31
    1c88:	f0 2d       	mov	r31, r0
    1c8a:	0f 2e       	mov	r0, r31
    1c8c:	f6 ea       	ldi	r31, 0xA6	; 166
    1c8e:	ef 2e       	mov	r14, r31
    1c90:	fe e1       	ldi	r31, 0x1E	; 30
    1c92:	ff 2e       	mov	r15, r31
    1c94:	f0 2d       	mov	r31, r0
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1c96:	31 2c       	mov	r3, r1
    1c98:	21 2c       	mov	r2, r1
    1c9a:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1c9c:	b9 c1       	rjmp	.+882    	; 0x2010 <nwkRxTaskHandler+0x3ee>
  {
    switch (frame->state)
    1c9e:	d5 01       	movw	r26, r10
    1ca0:	8c 91       	ld	r24, X
    1ca2:	81 32       	cpi	r24, 0x21	; 33
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <nwkRxTaskHandler+0x86>
    1ca6:	e1 c0       	rjmp	.+450    	; 0x1e6a <nwkRxTaskHandler+0x248>
    1ca8:	18 f4       	brcc	.+6      	; 0x1cb0 <nwkRxTaskHandler+0x8e>
    1caa:	80 32       	cpi	r24, 0x20	; 32
    1cac:	41 f0       	breq	.+16     	; 0x1cbe <nwkRxTaskHandler+0x9c>
    1cae:	b0 c1       	rjmp	.+864    	; 0x2010 <nwkRxTaskHandler+0x3ee>
    1cb0:	82 32       	cpi	r24, 0x22	; 34
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <nwkRxTaskHandler+0x94>
    1cb4:	de c0       	rjmp	.+444    	; 0x1e72 <nwkRxTaskHandler+0x250>
    1cb6:	84 32       	cpi	r24, 0x24	; 36
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <nwkRxTaskHandler+0x9a>
    1cba:	a8 c1       	rjmp	.+848    	; 0x200c <nwkRxTaskHandler+0x3ea>
    1cbc:	a9 c1       	rjmp	.+850    	; 0x2010 <nwkRxTaskHandler+0x3ee>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    1cbe:	f5 01       	movw	r30, r10
    1cc0:	d0 82       	st	Z, r13

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1cc2:	83 85       	ldd	r24, Z+11	; 0x0b
    1cc4:	83 fd       	sbrc	r24, 3
    1cc6:	a4 c1       	rjmp	.+840    	; 0x2010 <nwkRxTaskHandler+0x3ee>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1cc8:	25 81       	ldd	r18, Z+5	; 0x05
    1cca:	36 81       	ldd	r19, Z+6	; 0x06
    1ccc:	2f 3f       	cpi	r18, 0xFF	; 255
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	c9 f4       	brne	.+50     	; 0x1d04 <nwkRxTaskHandler+0xe2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1cd2:	d5 01       	movw	r26, r10
    1cd4:	1f 96       	adiw	r26, 0x0f	; 15
    1cd6:	2d 91       	ld	r18, X+
    1cd8:	3c 91       	ld	r19, X
    1cda:	50 97       	sbiw	r26, 0x10	; 16
    1cdc:	f4 01       	movw	r30, r8
    1cde:	40 81       	ld	r20, Z
    1ce0:	51 81       	ldd	r21, Z+1	; 0x01
    1ce2:	42 17       	cp	r20, r18
    1ce4:	53 07       	cpc	r21, r19
    1ce6:	21 f0       	breq	.+8      	; 0x1cf0 <nwkRxTaskHandler+0xce>
    1ce8:	2f 3f       	cpi	r18, 0xFF	; 255
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <nwkRxTaskHandler+0xce>
    1cee:	90 c1       	rjmp	.+800    	; 0x2010 <nwkRxTaskHandler+0x3ee>
    {
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
    1cf0:	81 ff       	sbrs	r24, 1
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <nwkRxTaskHandler+0xda>
        frame->state = NWK_RX_STATE_DECRYPT;
    1cf4:	81 e2       	ldi	r24, 0x21	; 33
    1cf6:	d5 01       	movw	r26, r10
    1cf8:	8c 93       	st	X, r24
    1cfa:	8a c1       	rjmp	.+788    	; 0x2010 <nwkRxTaskHandler+0x3ee>
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1cfc:	22 e2       	ldi	r18, 0x22	; 34
    1cfe:	f5 01       	movw	r30, r10
    1d00:	20 83       	st	Z, r18
    1d02:	86 c1       	rjmp	.+780    	; 0x2010 <nwkRxTaskHandler+0x3ee>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1d04:	d5 01       	movw	r26, r10
    1d06:	1f 96       	adiw	r26, 0x0f	; 15
    1d08:	2d 91       	ld	r18, X+
    1d0a:	3c 91       	ld	r19, X
    1d0c:	50 97       	sbiw	r26, 0x10	; 16
    1d0e:	2f 3f       	cpi	r18, 0xFF	; 255
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <nwkRxTaskHandler+0xf4>
    1d14:	84 c1       	rjmp	.+776    	; 0x201e <nwkRxTaskHandler+0x3fc>
    1d16:	80 ff       	sbrs	r24, 0
    1d18:	82 c1       	rjmp	.+772    	; 0x201e <nwkRxTaskHandler+0x3fc>
    1d1a:	7a c1       	rjmp	.+756    	; 0x2010 <nwkRxTaskHandler+0x3ee>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1d1c:	8c 01       	movw	r16, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1d1e:	2c 91       	ld	r18, X
    1d20:	22 23       	and	r18, r18
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <nwkRxTaskHandler+0x104>
    1d24:	57 c0       	rjmp	.+174    	; 0x1dd4 <nwkRxTaskHandler+0x1b2>
    1d26:	20 81       	ld	r18, Z
    1d28:	31 81       	ldd	r19, Z+1	; 0x01
    1d2a:	42 17       	cp	r20, r18
    1d2c:	53 07       	cpc	r21, r19
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <nwkRxTaskHandler+0x110>
    1d30:	52 c0       	rjmp	.+164    	; 0x1dd6 <nwkRxTaskHandler+0x1b4>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1d32:	f5 01       	movw	r30, r10
    1d34:	94 85       	ldd	r25, Z+12	; 0x0c
    1d36:	f8 01       	movw	r30, r16
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	ee 0f       	add	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	e0 0f       	add	r30, r16
    1d42:	f1 1f       	adc	r31, r17
    1d44:	ec 58       	subi	r30, 0x8C	; 140
    1d46:	f1 4e       	sbci	r31, 0xE1	; 225
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	89 1b       	sub	r24, r25

      if (diff < 8)
    1d4c:	88 30       	cpi	r24, 0x08	; 8
    1d4e:	40 f5       	brcc	.+80     	; 0x1da0 <nwkRxTaskHandler+0x17e>
      {
        if (entry->mask & (1 << diff))
    1d50:	f8 01       	movw	r30, r16
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	e0 0f       	add	r30, r16
    1d5c:	f1 1f       	adc	r31, r17
    1d5e:	ec 58       	subi	r30, 0x8C	; 140
    1d60:	f1 4e       	sbci	r31, 0xE1	; 225
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	29 2f       	mov	r18, r25
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	08 2e       	mov	r0, r24
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <nwkRxTaskHandler+0x14e>
    1d6c:	35 95       	asr	r19
    1d6e:	27 95       	ror	r18
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <nwkRxTaskHandler+0x14a>
    1d74:	20 fd       	sbrc	r18, 0
    1d76:	4c c1       	rjmp	.+664    	; 0x2010 <nwkRxTaskHandler+0x3ee>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1d78:	f8 01       	movw	r30, r16
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	0e 0f       	add	r16, r30
    1d84:	1f 1f       	adc	r17, r31
    1d86:	f8 01       	movw	r30, r16
    1d88:	ec 58       	subi	r30, 0x8C	; 140
    1d8a:	f1 4e       	sbci	r31, 0xE1	; 225
    1d8c:	21 e0       	ldi	r18, 0x01	; 1
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <nwkRxTaskHandler+0x174>
    1d92:	22 0f       	add	r18, r18
    1d94:	33 1f       	adc	r19, r19
    1d96:	8a 95       	dec	r24
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <nwkRxTaskHandler+0x170>
    1d9a:	92 2b       	or	r25, r18
    1d9c:	93 83       	std	Z+3, r25	; 0x03
    1d9e:	4f c1       	rjmp	.+670    	; 0x203e <nwkRxTaskHandler+0x41c>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    1da0:	f8 01       	movw	r30, r16
    1da2:	ee 0f       	add	r30, r30
    1da4:	ff 1f       	adc	r31, r31
    1da6:	ee 0f       	add	r30, r30
    1da8:	ff 1f       	adc	r31, r31
    1daa:	0e 0f       	add	r16, r30
    1dac:	1f 1f       	adc	r17, r31
    1dae:	f8 01       	movw	r30, r16
    1db0:	ec 58       	subi	r30, 0x8C	; 140
    1db2:	f1 4e       	sbci	r31, 0xE1	; 225
    1db4:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1db6:	23 81       	ldd	r18, Z+3	; 0x03
    1db8:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    1dba:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
    1dbc:	a9 01       	movw	r20, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <nwkRxTaskHandler+0x1a2>
    1dc0:	44 0f       	add	r20, r20
    1dc2:	55 1f       	adc	r21, r21
    1dc4:	8a 95       	dec	r24
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <nwkRxTaskHandler+0x19e>
    1dc8:	ca 01       	movw	r24, r20
    1dca:	81 60       	ori	r24, 0x01	; 1
    1dcc:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1dce:	8f e1       	ldi	r24, 0x1F	; 31
    1dd0:	84 83       	std	Z+4, r24	; 0x04
    1dd2:	35 c1       	rjmp	.+618    	; 0x203e <nwkRxTaskHandler+0x41c>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1dd4:	bf 01       	movw	r22, r30
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	15 96       	adiw	r26, 0x05	; 5
    1dda:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1ddc:	ee 15       	cp	r30, r14
    1dde:	ff 05       	cpc	r31, r15
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <nwkRxTaskHandler+0x1c2>
    1de2:	9c cf       	rjmp	.-200    	; 0x1d1c <nwkRxTaskHandler+0xfa>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1de4:	61 15       	cp	r22, r1
    1de6:	71 05       	cpc	r23, r1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <nwkRxTaskHandler+0x1ca>
    1dea:	12 c1       	rjmp	.+548    	; 0x2010 <nwkRxTaskHandler+0x3ee>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1dec:	db 01       	movw	r26, r22
    1dee:	11 96       	adiw	r26, 0x01	; 1
    1df0:	5c 93       	st	X, r21
    1df2:	4e 93       	st	-X, r20
  freeEntry->seq = header->nwkSeq;
    1df4:	f5 01       	movw	r30, r10
    1df6:	84 85       	ldd	r24, Z+12	; 0x0c
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	8c 93       	st	X, r24
    1dfc:	12 97       	sbiw	r26, 0x02	; 2
  freeEntry->mask = 1;
    1dfe:	13 96       	adiw	r26, 0x03	; 3
    1e00:	cc 92       	st	X, r12
    1e02:	13 97       	sbiw	r26, 0x03	; 3
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1e04:	8f e1       	ldi	r24, 0x1F	; 31
    1e06:	14 96       	adiw	r26, 0x04	; 4
    1e08:	8c 93       	st	X, r24

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1e0a:	86 e6       	ldi	r24, 0x66	; 102
    1e0c:	9e e1       	ldi	r25, 0x1E	; 30
    1e0e:	e3 d6       	rcall	.+3526   	; 0x2bd6 <SYS_TimerStart>
    1e10:	16 c1       	rjmp	.+556    	; 0x203e <nwkRxTaskHandler+0x41c>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1e12:	d5 01       	movw	r26, r10
    1e14:	1f 96       	adiw	r26, 0x0f	; 15
    1e16:	8d 91       	ld	r24, X+
    1e18:	9c 91       	ld	r25, X
    1e1a:	50 97       	sbiw	r26, 0x10	; 16
    1e1c:	f4 01       	movw	r30, r8
    1e1e:	20 81       	ld	r18, Z
    1e20:	31 81       	ldd	r19, Z+1	; 0x01
    1e22:	28 17       	cp	r18, r24
    1e24:	39 07       	cpc	r19, r25
    1e26:	a1 f0       	breq	.+40     	; 0x1e50 <nwkRxTaskHandler+0x22e>
        0 == header->nwkFcf.linkLocal)
    1e28:	1b 96       	adiw	r26, 0x0b	; 11
    1e2a:	2c 91       	ld	r18, X
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1e2c:	22 fd       	sbrc	r18, 2
    1e2e:	0d c0       	rjmp	.+26     	; 0x1e4a <nwkRxTaskHandler+0x228>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1e30:	c5 01       	movw	r24, r10
    1e32:	47 d3       	rcall	.+1678   	; 0x24c2 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1e34:	d5 01       	movw	r26, r10
    1e36:	1f 96       	adiw	r26, 0x0f	; 15
    1e38:	8d 91       	ld	r24, X+
    1e3a:	9c 91       	ld	r25, X
    1e3c:	50 97       	sbiw	r26, 0x10	; 16
    1e3e:	f4 01       	movw	r30, r8
    1e40:	20 81       	ld	r18, Z
    1e42:	31 81       	ldd	r19, Z+1	; 0x01
    1e44:	28 17       	cp	r18, r24
    1e46:	39 07       	cpc	r19, r25
    1e48:	19 f0       	breq	.+6      	; 0x1e50 <nwkRxTaskHandler+0x22e>
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <nwkRxTaskHandler+0x22e>
    1e4e:	e0 c0       	rjmp	.+448    	; 0x2010 <nwkRxTaskHandler+0x3ee>
    {
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
    1e50:	d5 01       	movw	r26, r10
    1e52:	1b 96       	adiw	r26, 0x0b	; 11
    1e54:	8c 91       	ld	r24, X
    1e56:	1b 97       	sbiw	r26, 0x0b	; 11
    1e58:	81 ff       	sbrs	r24, 1
    1e5a:	03 c0       	rjmp	.+6      	; 0x1e62 <nwkRxTaskHandler+0x240>
        frame->state = NWK_RX_STATE_DECRYPT;
    1e5c:	81 e2       	ldi	r24, 0x21	; 33
    1e5e:	8c 93       	st	X, r24
    1e60:	d7 c0       	rjmp	.+430    	; 0x2010 <nwkRxTaskHandler+0x3ee>
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1e62:	22 e2       	ldi	r18, 0x22	; 34
    1e64:	f5 01       	movw	r30, r10
    1e66:	20 83       	st	Z, r18
    1e68:	d3 c0       	rjmp	.+422    	; 0x2010 <nwkRxTaskHandler+0x3ee>
      } break;

#ifdef NWK_ENABLE_SECURITY
      case NWK_RX_STATE_DECRYPT:
      {
        nwkSecurityProcess(frame, false);
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	c5 01       	movw	r24, r10
    1e6e:	17 d1       	rcall	.+558    	; 0x209e <nwkSecurityProcess>
      } break;
    1e70:	cf c0       	rjmp	.+414    	; 0x2010 <nwkRxTaskHandler+0x3ee>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1e72:	10 92 73 1e 	sts	0x1E73, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1e76:	d5 01       	movw	r26, r10
    1e78:	51 96       	adiw	r26, 0x11	; 17
    1e7a:	2c 91       	ld	r18, X
    1e7c:	51 97       	sbiw	r26, 0x11	; 17
    1e7e:	22 95       	swap	r18
    1e80:	2f 70       	andi	r18, 0x0F	; 15
    1e82:	e2 2f       	mov	r30, r18
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	ef 50       	subi	r30, 0x0F	; 15
    1e8c:	ff 4d       	sbci	r31, 0xDF	; 223
    1e8e:	01 90       	ld	r0, Z+
    1e90:	f0 81       	ld	r31, Z
    1e92:	e0 2d       	mov	r30, r0
    1e94:	30 97       	sbiw	r30, 0x00	; 0
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <nwkRxTaskHandler+0x278>
    1e98:	62 c0       	rjmp	.+196    	; 0x1f5e <nwkRxTaskHandler+0x33c>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    1e9a:	1d 96       	adiw	r26, 0x0d	; 13
    1e9c:	8d 91       	ld	r24, X+
    1e9e:	9c 91       	ld	r25, X
    1ea0:	1e 97       	sbiw	r26, 0x0e	; 14
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1ea6:	1f 96       	adiw	r26, 0x0f	; 15
    1ea8:	4d 91       	ld	r20, X+
    1eaa:	5c 91       	ld	r21, X
    1eac:	50 97       	sbiw	r26, 0x10	; 16
    1eae:	5c 83       	std	Y+4, r21	; 0x04
    1eb0:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1eb2:	51 96       	adiw	r26, 0x11	; 17
    1eb4:	3c 91       	ld	r19, X
    1eb6:	51 97       	sbiw	r26, 0x11	; 17
    1eb8:	3f 70       	andi	r19, 0x0F	; 15
    1eba:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1ebc:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
    1ebe:	af 57       	subi	r26, 0x7F	; 127
    1ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec2:	6d 91       	ld	r22, X+
    1ec4:	7c 91       	ld	r23, X
    1ec6:	79 87       	std	Y+9, r23	; 0x09
    1ec8:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1eca:	95 01       	movw	r18, r10
    1ecc:	2e 5f       	subi	r18, 0xFE	; 254
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	26 1b       	sub	r18, r22
    1ed2:	37 0b       	sbc	r19, r23
    1ed4:	d5 01       	movw	r26, r10
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	3c 91       	ld	r19, X
    1eda:	11 97       	sbiw	r26, 0x01	; 1
    1edc:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
    1ede:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
    1ee0:	ad 57       	subi	r26, 0x7D	; 125
    1ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee4:	2c 91       	ld	r18, X
    1ee6:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	2c 91       	ld	r18, X
    1eec:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1eee:	d5 01       	movw	r26, r10
    1ef0:	1b 96       	adiw	r26, 0x0b	; 11
    1ef2:	2c 91       	ld	r18, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1ef4:	62 2f       	mov	r22, r18
    1ef6:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1ef8:	22 fd       	sbrc	r18, 2
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <nwkRxTaskHandler+0x2de>
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <nwkRxTaskHandler+0x2e0>
    1f00:	30 e2       	ldi	r19, 0x20	; 32
    1f02:	63 2b       	or	r22, r19
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1f04:	23 fd       	sbrc	r18, 3
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <nwkRxTaskHandler+0x2ea>
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <nwkRxTaskHandler+0x2ec>
    1f0c:	30 e4       	ldi	r19, 0x40	; 64
    1f0e:	26 2f       	mov	r18, r22
    1f10:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1f12:	4f 3f       	cpi	r20, 0xFF	; 255
    1f14:	5f 4f       	sbci	r21, 0xFF	; 255
    1f16:	11 f0       	breq	.+4      	; 0x1f1c <nwkRxTaskHandler+0x2fa>
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <nwkRxTaskHandler+0x2fc>
    1f1c:	34 e0       	ldi	r19, 0x04	; 4
    1f1e:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1f20:	d5 01       	movw	r26, r10
    1f22:	19 96       	adiw	r26, 0x09	; 9
    1f24:	4d 91       	ld	r20, X+
    1f26:	5c 91       	ld	r21, X
    1f28:	1a 97       	sbiw	r26, 0x0a	; 10
    1f2a:	84 17       	cp	r24, r20
    1f2c:	95 07       	cpc	r25, r21
    1f2e:	11 f0       	breq	.+4      	; 0x1f34 <nwkRxTaskHandler+0x312>
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <nwkRxTaskHandler+0x314>
    1f34:	98 e0       	ldi	r25, 0x08	; 8
    1f36:	82 2f       	mov	r24, r18
    1f38:	89 2b       	or	r24, r25
    1f3a:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1f3c:	d5 01       	movw	r26, r10
    1f3e:	15 96       	adiw	r26, 0x05	; 5
    1f40:	2d 91       	ld	r18, X+
    1f42:	3c 91       	ld	r19, X
    1f44:	16 97       	sbiw	r26, 0x06	; 6
    1f46:	2f 3f       	cpi	r18, 0xFF	; 255
    1f48:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4a:	11 f0       	breq	.+4      	; 0x1f50 <nwkRxTaskHandler+0x32e>
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	01 c0       	rjmp	.+2      	; 0x1f52 <nwkRxTaskHandler+0x330>
    1f50:	90 e1       	ldi	r25, 0x10	; 16
    1f52:	89 2b       	or	r24, r25
    1f54:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	19 95       	eicall
    1f5c:	01 c0       	rjmp	.+2      	; 0x1f60 <nwkRxTaskHandler+0x33e>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1f60:	f5 01       	movw	r30, r10
    1f62:	93 85       	ldd	r25, Z+11	; 0x0b
    1f64:	90 ff       	sbrs	r25, 0
    ack = false;
    1f66:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1f68:	d5 01       	movw	r26, r10
    1f6a:	17 96       	adiw	r26, 0x07	; 7
    1f6c:	2d 91       	ld	r18, X+
    1f6e:	3c 91       	ld	r19, X
    1f70:	18 97       	sbiw	r26, 0x08	; 8
    1f72:	2f 3f       	cpi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	69 f4       	brne	.+26     	; 0x1f92 <nwkRxTaskHandler+0x370>
    1f78:	f4 01       	movw	r30, r8
    1f7a:	40 81       	ld	r20, Z
    1f7c:	51 81       	ldd	r21, Z+1	; 0x01
    1f7e:	d5 01       	movw	r26, r10
    1f80:	1f 96       	adiw	r26, 0x0f	; 15
    1f82:	2d 91       	ld	r18, X+
    1f84:	3c 91       	ld	r19, X
    1f86:	50 97       	sbiw	r26, 0x10	; 16
    1f88:	42 17       	cp	r20, r18
    1f8a:	53 07       	cpc	r21, r19
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <nwkRxTaskHandler+0x370>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1f8e:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1f90:	8c 2d       	mov	r24, r12

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    1f92:	f5 01       	movw	r30, r10
    1f94:	25 81       	ldd	r18, Z+5	; 0x05
    1f96:	36 81       	ldd	r19, Z+6	; 0x06
    1f98:	2f 3f       	cpi	r18, 0xFF	; 255
    1f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9c:	a1 f1       	breq	.+104    	; 0x2006 <nwkRxTaskHandler+0x3e4>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1f9e:	d4 01       	movw	r26, r8
    1fa0:	2d 91       	ld	r18, X+
    1fa2:	3c 91       	ld	r19, X
    1fa4:	2f 3f       	cpi	r18, 0xFF	; 255
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	71 f1       	breq	.+92     	; 0x2006 <nwkRxTaskHandler+0x3e4>
    ack = false;

  if (ack)
    1faa:	88 23       	and	r24, r24
    1fac:	61 f1       	breq	.+88     	; 0x2006 <nwkRxTaskHandler+0x3e4>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1fae:	44 dd       	rcall	.-1400   	; 0x1a38 <nwkFrameAlloc>
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	41 f1       	breq	.+80     	; 0x2006 <nwkRxTaskHandler+0x3e4>
    return;

  nwkFrameCommandInit(ack);
    1fb6:	a5 dd       	rcall	.-1206   	; 0x1b02 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1fb8:	f8 01       	movw	r30, r16
    1fba:	81 81       	ldd	r24, Z+1	; 0x01
    1fbc:	8d 5f       	subi	r24, 0xFD	; 253
    1fbe:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    1fc0:	e9 57       	subi	r30, 0x79	; 121
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	11 82       	std	Z+1, r1	; 0x01
    1fc6:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1fc8:	d5 01       	movw	r26, r10
    1fca:	1b 96       	adiw	r26, 0x0b	; 11
    1fcc:	8c 91       	ld	r24, X
    1fce:	1b 97       	sbiw	r26, 0x0b	; 11
    1fd0:	86 95       	lsr	r24
    1fd2:	81 70       	andi	r24, 0x01	; 1
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	93 85       	ldd	r25, Z+11	; 0x0b
    1fd8:	80 fb       	bst	r24, 0
    1fda:	91 f9       	bld	r25, 1
    1fdc:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1fde:	1d 96       	adiw	r26, 0x0d	; 13
    1fe0:	8d 91       	ld	r24, X+
    1fe2:	9c 91       	ld	r25, X
    1fe4:	1e 97       	sbiw	r26, 0x0e	; 14
    1fe6:	90 8b       	std	Z+16, r25	; 0x10
    1fe8:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1fea:	ef 57       	subi	r30, 0x7F	; 127
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	01 90       	ld	r0, Z+
    1ff0:	f0 81       	ld	r31, Z
    1ff2:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1ff4:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1ff6:	80 91 73 1e 	lds	r24, 0x1E73
    1ffa:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    1ffc:	1c 96       	adiw	r26, 0x0c	; 12
    1ffe:	8c 91       	ld	r24, X
    2000:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    2002:	c8 01       	movw	r24, r16
    2004:	09 d2       	rcall	.+1042   	; 0x2418 <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    2006:	d5 01       	movw	r26, r10
    2008:	dc 92       	st	X, r13
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <nwkRxTaskHandler+0x3ee>
      } break;
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    200c:	c5 01       	movw	r24, r10
    200e:	4d dd       	rcall	.-1382   	; 0x1aaa <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2010:	c5 01       	movw	r24, r10
    2012:	55 dd       	rcall	.-1366   	; 0x1abe <nwkFrameNext>
    2014:	5c 01       	movw	r10, r24
    2016:	89 2b       	or	r24, r25
    2018:	09 f0       	breq	.+2      	; 0x201c <nwkRxTaskHandler+0x3fa>
    201a:	41 ce       	rjmp	.-894    	; 0x1c9e <nwkRxTaskHandler+0x7c>
    201c:	17 c0       	rjmp	.+46     	; 0x204c <nwkRxTaskHandler+0x42a>
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    201e:	f5 01       	movw	r30, r10
    2020:	45 85       	ldd	r20, Z+13	; 0x0d
    2022:	56 85       	ldd	r21, Z+14	; 0x0e
    2024:	d4 01       	movw	r26, r8
    2026:	8d 91       	ld	r24, X+
    2028:	9c 91       	ld	r25, X
    202a:	84 17       	cp	r24, r20
    202c:	95 07       	cpc	r25, r21
    202e:	81 f3       	breq	.-32     	; 0x2010 <nwkRxTaskHandler+0x3ee>
    2030:	d2 01       	movw	r26, r4
    2032:	f3 01       	movw	r30, r6
    2034:	83 2d       	mov	r24, r3
    2036:	92 2d       	mov	r25, r2
    2038:	63 2d       	mov	r22, r3
    203a:	72 2d       	mov	r23, r2
    203c:	6f ce       	rjmp	.-802    	; 0x1d1c <nwkRxTaskHandler+0xfa>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    203e:	f5 01       	movw	r30, r10
    2040:	87 81       	ldd	r24, Z+7	; 0x07
    2042:	90 85       	ldd	r25, Z+8	; 0x08
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	09 f0       	breq	.+2      	; 0x204a <nwkRxTaskHandler+0x428>
    2048:	f5 ce       	rjmp	.-534    	; 0x1e34 <nwkRxTaskHandler+0x212>
    204a:	e3 ce       	rjmp	.-570    	; 0x1e12 <nwkRxTaskHandler+0x1f0>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    204c:	2c 96       	adiw	r28, 0x0c	; 12
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    2064:	df 90       	pop	r13
    2066:	cf 90       	pop	r12
    2068:	bf 90       	pop	r11
    206a:	af 90       	pop	r10
    206c:	9f 90       	pop	r9
    206e:	8f 90       	pop	r8
    2070:	7f 90       	pop	r7
    2072:	6f 90       	pop	r6
    2074:	5f 90       	pop	r5
    2076:	4f 90       	pop	r4
    2078:	3f 90       	pop	r3
    207a:	2f 90       	pop	r2
    207c:	08 95       	ret

0000207e <nwkSecurityInit>:
/*************************************************************************//**
  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
  nwkSecurityActiveFrames = 0;
    207e:	10 92 bb 1e 	sts	0x1EBB, r1
  nwkSecurityActiveFrame = NULL;
    2082:	10 92 ba 1e 	sts	0x1EBA, r1
    2086:	10 92 b9 1e 	sts	0x1EB9, r1
    208a:	08 95       	ret

0000208c <NWK_SetSecurityKey>:
}

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    208c:	fc 01       	movw	r30, r24
  memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    208e:	90 e1       	ldi	r25, 0x10	; 16
    2090:	a1 e1       	ldi	r26, 0x11	; 17
    2092:	b1 e2       	ldi	r27, 0x21	; 33
    2094:	01 90       	ld	r0, Z+
    2096:	0d 92       	st	X+, r0
    2098:	9a 95       	dec	r25
    209a:	e1 f7       	brne	.-8      	; 0x2094 <NWK_SetSecurityKey+0x8>
    209c:	08 95       	ret

0000209e <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
  if (encrypt)
    209e:	66 23       	and	r22, r22
    20a0:	21 f0       	breq	.+8      	; 0x20aa <nwkSecurityProcess+0xc>
    frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    20a2:	20 e3       	ldi	r18, 0x30	; 48
    20a4:	fc 01       	movw	r30, r24
    20a6:	20 83       	st	Z, r18
    20a8:	03 c0       	rjmp	.+6      	; 0x20b0 <nwkSecurityProcess+0x12>
  else
    frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    20aa:	21 e3       	ldi	r18, 0x31	; 49
    20ac:	fc 01       	movw	r30, r24
    20ae:	20 83       	st	Z, r18
  ++nwkSecurityActiveFrames;
    20b0:	80 91 bb 1e 	lds	r24, 0x1EBB
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	80 93 bb 1e 	sts	0x1EBB, r24
    20ba:	08 95       	ret

000020bc <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
  uint8_t *vector = (uint8_t *)nwkSecurityVector;
  uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    20c0:	c0 91 b9 1e 	lds	r28, 0x1EB9
    20c4:	d0 91 ba 1e 	lds	r29, 0x1EBA
    20c8:	fe 01       	movw	r30, r28
    20ca:	ef 57       	subi	r30, 0x7F	; 127
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	a0 81       	ld	r26, Z
    20d0:	b1 81       	ldd	r27, Z+1	; 0x01
    20d2:	70 91 b7 1e 	lds	r23, 0x1EB7
    20d6:	87 2f       	mov	r24, r23
    20d8:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t block;

  block = (nwkSecuritySize < NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize : NWK_SECURITY_BLOCK_SIZE;
    20da:	60 91 b8 1e 	lds	r22, 0x1EB8
    20de:	26 2f       	mov	r18, r22
    20e0:	61 31       	cpi	r22, 0x11	; 17
    20e2:	08 f0       	brcs	.+2      	; 0x20e6 <SYS_EncryptConf+0x2a>
    20e4:	20 e1       	ldi	r18, 0x10	; 16

  for (uint8_t i = 0; i < block; i++)
    20e6:	22 23       	and	r18, r18
    20e8:	b9 f0       	breq	.+46     	; 0x2118 <SYS_EncryptConf+0x5c>
  {
    text[i] ^= vector[i];

    if (nwkSecurityEncrypt)
    20ea:	30 91 b6 1e 	lds	r19, 0x1EB6
    20ee:	46 ea       	ldi	r20, 0xA6	; 166
    20f0:	5e e1       	ldi	r21, 0x1E	; 30
    20f2:	a8 0f       	add	r26, r24
    20f4:	b9 1f       	adc	r27, r25
    20f6:	fa 01       	movw	r30, r20

  block = (nwkSecuritySize < NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize : NWK_SECURITY_BLOCK_SIZE;

  for (uint8_t i = 0; i < block; i++)
  {
    text[i] ^= vector[i];
    20f8:	90 81       	ld	r25, Z
    20fa:	8c 91       	ld	r24, X
    20fc:	89 27       	eor	r24, r25
    20fe:	8d 93       	st	X+, r24

    if (nwkSecurityEncrypt)
    2100:	33 23       	and	r19, r19
    2102:	11 f0       	breq	.+4      	; 0x2108 <SYS_EncryptConf+0x4c>
      vector[i] = text[i];
    2104:	80 83       	st	Z, r24
    2106:	03 c0       	rjmp	.+6      	; 0x210e <SYS_EncryptConf+0x52>
    else
      vector[i] ^= text[i];
    2108:	90 81       	ld	r25, Z
    210a:	89 27       	eor	r24, r25
    210c:	80 83       	st	Z, r24
    210e:	31 96       	adiw	r30, 0x01	; 1
    2110:	8e 2f       	mov	r24, r30
    2112:	84 1b       	sub	r24, r20
  uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
  uint8_t block;

  block = (nwkSecuritySize < NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize : NWK_SECURITY_BLOCK_SIZE;

  for (uint8_t i = 0; i < block; i++)
    2114:	82 17       	cp	r24, r18
    2116:	80 f3       	brcs	.-32     	; 0x20f8 <SYS_EncryptConf+0x3c>
      vector[i] = text[i];
    else
      vector[i] ^= text[i];
  }

  nwkSecurityOffset += block;
    2118:	72 0f       	add	r23, r18
    211a:	70 93 b7 1e 	sts	0x1EB7, r23
  nwkSecuritySize -= block;
    211e:	62 1b       	sub	r22, r18
    2120:	60 93 b8 1e 	sts	0x1EB8, r22

  if (nwkSecuritySize > 0)
    2124:	66 23       	and	r22, r22
    2126:	19 f0       	breq	.+6      	; 0x212e <SYS_EncryptConf+0x72>
    nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2128:	82 e3       	ldi	r24, 0x32	; 50
    212a:	88 83       	st	Y, r24
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <SYS_EncryptConf+0x76>
  else
    nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    212e:	84 e3       	ldi	r24, 0x34	; 52
    2130:	88 83       	st	Y, r24
}
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <nwkSecurityTaskHandler>:

/*************************************************************************//**
  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
  NwkFrame_t *frame = NULL;

  if (0 == nwkSecurityActiveFrames)
    2140:	80 91 bb 1e 	lds	r24, 0x1EBB
    2144:	88 23       	and	r24, r24
    2146:	09 f4       	brne	.+2      	; 0x214a <nwkSecurityTaskHandler+0x12>
    2148:	e1 c0       	rjmp	.+450    	; 0x230c <nwkSecurityTaskHandler+0x1d4>
    return;

  if (nwkSecurityActiveFrame)
    214a:	e0 91 b9 1e 	lds	r30, 0x1EB9
    214e:	f0 91 ba 1e 	lds	r31, 0x1EBA
    2152:	30 97       	sbiw	r30, 0x00	; 0
    2154:	09 f4       	brne	.+2      	; 0x2158 <nwkSecurityTaskHandler+0x20>
    2156:	d4 c0       	rjmp	.+424    	; 0x2300 <nwkSecurityTaskHandler+0x1c8>
  {
    if (NWK_SECURITY_STATE_CONFIRM == nwkSecurityActiveFrame->state)
    2158:	80 81       	ld	r24, Z
    215a:	84 33       	cpi	r24, 0x34	; 52
    215c:	09 f0       	breq	.+2      	; 0x2160 <nwkSecurityTaskHandler+0x28>
    215e:	54 c0       	rjmp	.+168    	; 0x2208 <nwkSecurityTaskHandler+0xd0>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
  uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2160:	80 91 b7 1e 	lds	r24, 0x1EB7
    2164:	df 01       	movw	r26, r30
    2166:	af 57       	subi	r26, 0x7F	; 127
    2168:	bf 4f       	sbci	r27, 0xFF	; 255
    216a:	cd 91       	ld	r28, X+
    216c:	dc 91       	ld	r29, X
    216e:	c8 0f       	add	r28, r24
    2170:	d1 1d       	adc	r29, r1
  uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2172:	a6 ea       	ldi	r26, 0xA6	; 166
    2174:	be e1       	ldi	r27, 0x1E	; 30
    2176:	14 96       	adiw	r26, 0x04	; 4
    2178:	0d 91       	ld	r16, X+
    217a:	1d 91       	ld	r17, X+
    217c:	2d 91       	ld	r18, X+
    217e:	3c 91       	ld	r19, X
    2180:	17 97       	sbiw	r26, 0x07	; 7
    2182:	4d 91       	ld	r20, X+
    2184:	5d 91       	ld	r21, X+
    2186:	6d 91       	ld	r22, X+
    2188:	7c 91       	ld	r23, X
    218a:	13 97       	sbiw	r26, 0x03	; 3
    218c:	40 27       	eor	r20, r16
    218e:	51 27       	eor	r21, r17
    2190:	62 27       	eor	r22, r18
    2192:	73 27       	eor	r23, r19
    2194:	18 96       	adiw	r26, 0x08	; 8
    2196:	0d 91       	ld	r16, X+
    2198:	1d 91       	ld	r17, X+
    219a:	2d 91       	ld	r18, X+
    219c:	3c 91       	ld	r19, X
    219e:	1b 97       	sbiw	r26, 0x0b	; 11
    21a0:	40 27       	eor	r20, r16
    21a2:	51 27       	eor	r21, r17
    21a4:	62 27       	eor	r22, r18
    21a6:	73 27       	eor	r23, r19
                  nwkSecurityVector[2] ^ nwkSecurityVector[3];
    21a8:	1c 96       	adiw	r26, 0x0c	; 12
    21aa:	8d 91       	ld	r24, X+
    21ac:	9d 91       	ld	r25, X+
    21ae:	0d 90       	ld	r0, X+
    21b0:	bc 91       	ld	r27, X
    21b2:	a0 2d       	mov	r26, r0
    21b4:	48 27       	eor	r20, r24
    21b6:	59 27       	eor	r21, r25
    21b8:	6a 27       	eor	r22, r26
    21ba:	7b 27       	eor	r23, r27
  uint32_t tmic;

  if (nwkSecurityEncrypt)
    21bc:	80 91 b6 1e 	lds	r24, 0x1EB6
    21c0:	88 23       	and	r24, r24
    21c2:	51 f0       	breq	.+20     	; 0x21d8 <nwkSecurityTaskHandler+0xa0>
  {
    memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    21c4:	48 83       	st	Y, r20
    21c6:	59 83       	std	Y+1, r21	; 0x01
    21c8:	6a 83       	std	Y+2, r22	; 0x02
    21ca:	7b 83       	std	Y+3, r23	; 0x03
    nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    21cc:	81 81       	ldd	r24, Z+1	; 0x01
    21ce:	8c 5f       	subi	r24, 0xFC	; 252
    21d0:	81 83       	std	Z+1, r24	; 0x01
    if (NWK_SECURITY_STATE_CONFIRM == nwkSecurityActiveFrame->state)
    {
      bool micStatus = nwkSecurityProcessMic();

      if (nwkSecurityEncrypt)
        nwkTxEncryptConf(nwkSecurityActiveFrame);
    21d2:	cf 01       	movw	r24, r30
    21d4:	df d1       	rcall	.+958    	; 0x2594 <nwkTxEncryptConf>
    21d6:	0e c0       	rjmp	.+28     	; 0x21f4 <nwkSecurityTaskHandler+0xbc>
    return true;
  }
  else
  {
    memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    return vmic == tmic;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	08 81       	ld	r16, Y
    21dc:	19 81       	ldd	r17, Y+1	; 0x01
    21de:	2a 81       	ldd	r18, Y+2	; 0x02
    21e0:	3b 81       	ldd	r19, Y+3	; 0x03
    21e2:	40 17       	cp	r20, r16
    21e4:	51 07       	cpc	r21, r17
    21e6:	62 07       	cpc	r22, r18
    21e8:	73 07       	cpc	r23, r19
    21ea:	09 f0       	breq	.+2      	; 0x21ee <nwkSecurityTaskHandler+0xb6>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
      bool micStatus = nwkSecurityProcessMic();

      if (nwkSecurityEncrypt)
        nwkTxEncryptConf(nwkSecurityActiveFrame);
      else
        nwkRxDecryptConf(nwkSecurityActiveFrame, micStatus);
    21ee:	68 2f       	mov	r22, r24
    21f0:	cf 01       	movw	r24, r30
    21f2:	0d dd       	rcall	.-1510   	; 0x1c0e <nwkRxDecryptConf>

      nwkSecurityActiveFrame = NULL;
    21f4:	10 92 ba 1e 	sts	0x1EBA, r1
    21f8:	10 92 b9 1e 	sts	0x1EB9, r1
      --nwkSecurityActiveFrames;
    21fc:	80 91 bb 1e 	lds	r24, 0x1EBB
    2200:	81 50       	subi	r24, 0x01	; 1
    2202:	80 93 bb 1e 	sts	0x1EBB, r24
    2206:	82 c0       	rjmp	.+260    	; 0x230c <nwkSecurityTaskHandler+0x1d4>
    }
    else if (NWK_SECURITY_STATE_PROCESS == nwkSecurityActiveFrame->state)
    2208:	82 33       	cpi	r24, 0x32	; 50
    220a:	09 f0       	breq	.+2      	; 0x220e <nwkSecurityTaskHandler+0xd6>
    220c:	7f c0       	rjmp	.+254    	; 0x230c <nwkSecurityTaskHandler+0x1d4>
    {
      nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    220e:	83 e3       	ldi	r24, 0x33	; 51
    2210:	80 83       	st	Z, r24
      SYS_EncryptReq((uint8_t *)nwkSecurityVector, (uint8_t *)nwkIb.key);
    2212:	61 e1       	ldi	r22, 0x11	; 17
    2214:	71 e2       	ldi	r23, 0x21	; 33
    2216:	86 ea       	ldi	r24, 0xA6	; 166
    2218:	9e e1       	ldi	r25, 0x1E	; 30
    221a:	1a d4       	rcall	.+2100   	; 0x2a50 <SYS_EncryptReq>
    221c:	77 c0       	rjmp	.+238    	; 0x230c <nwkSecurityTaskHandler+0x1d4>
    return;
  }

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    221e:	dc 01       	movw	r26, r24
    2220:	2c 91       	ld	r18, X
    2222:	20 53       	subi	r18, 0x30	; 48
    2224:	22 30       	cpi	r18, 0x02	; 2
    2226:	08 f0       	brcs	.+2      	; 0x222a <nwkSecurityTaskHandler+0xf2>
    2228:	6d c0       	rjmp	.+218    	; 0x2304 <nwkSecurityTaskHandler+0x1cc>
        NWK_SECURITY_STATE_DECRYPT_PENDING == frame->state)
    {
      nwkSecurityActiveFrame = frame;
    222a:	90 93 ba 1e 	sts	0x1EBA, r25
    222e:	80 93 b9 1e 	sts	0x1EB9, r24
*****************************************************************************/
static void nwkSecurityStart(void)
{
  NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

  nwkSecurityVector[0] = header->nwkSeq;
    2232:	e6 ea       	ldi	r30, 0xA6	; 166
    2234:	fe e1       	ldi	r31, 0x1E	; 30
    2236:	1c 96       	adiw	r26, 0x0c	; 12
    2238:	4c 91       	ld	r20, X
    223a:	1c 97       	sbiw	r26, 0x0c	; 12
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	40 83       	st	Z, r20
    2244:	51 83       	std	Z+1, r21	; 0x01
    2246:	62 83       	std	Z+2, r22	; 0x02
    2248:	73 83       	std	Z+3, r23	; 0x03
  nwkSecurityVector[1] = ((uint32_t)header->nwkDstAddr << 16) | header->nwkDstEndpoint;
    224a:	1f 96       	adiw	r26, 0x0f	; 15
    224c:	4d 91       	ld	r20, X+
    224e:	5c 91       	ld	r21, X
    2250:	50 97       	sbiw	r26, 0x10	; 16
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	ba 01       	movw	r22, r20
    2258:	55 27       	eor	r21, r21
    225a:	44 27       	eor	r20, r20
    225c:	51 96       	adiw	r26, 0x11	; 17
    225e:	2c 91       	ld	r18, X
    2260:	51 97       	sbiw	r26, 0x11	; 17
    2262:	22 95       	swap	r18
    2264:	2f 70       	andi	r18, 0x0F	; 15
    2266:	42 2b       	or	r20, r18
    2268:	44 83       	std	Z+4, r20	; 0x04
    226a:	55 83       	std	Z+5, r21	; 0x05
    226c:	66 83       	std	Z+6, r22	; 0x06
    226e:	77 83       	std	Z+7, r23	; 0x07
  nwkSecurityVector[2] = ((uint32_t)header->nwkSrcAddr << 16) | header->nwkSrcEndpoint;
    2270:	1d 96       	adiw	r26, 0x0d	; 13
    2272:	4d 91       	ld	r20, X+
    2274:	5c 91       	ld	r21, X
    2276:	1e 97       	sbiw	r26, 0x0e	; 14
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	70 e0       	ldi	r23, 0x00	; 0
    227c:	ba 01       	movw	r22, r20
    227e:	55 27       	eor	r21, r21
    2280:	44 27       	eor	r20, r20
    2282:	51 96       	adiw	r26, 0x11	; 17
    2284:	2c 91       	ld	r18, X
    2286:	51 97       	sbiw	r26, 0x11	; 17
    2288:	2f 70       	andi	r18, 0x0F	; 15
    228a:	42 2b       	or	r20, r18
    228c:	40 87       	std	Z+8, r20	; 0x08
    228e:	51 87       	std	Z+9, r21	; 0x09
    2290:	62 87       	std	Z+10, r22	; 0x0a
    2292:	73 87       	std	Z+11, r23	; 0x0b
  nwkSecurityVector[3] = ((uint32_t)header->macDstPanId << 16) | *(uint8_t *)&header->nwkFcf;
    2294:	1b 96       	adiw	r26, 0x0b	; 11
    2296:	2c 91       	ld	r18, X
    2298:	1b 97       	sbiw	r26, 0x0b	; 11
    229a:	15 96       	adiw	r26, 0x05	; 5
    229c:	4d 91       	ld	r20, X+
    229e:	5c 91       	ld	r21, X
    22a0:	16 97       	sbiw	r26, 0x06	; 6
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	ba 01       	movw	r22, r20
    22a8:	55 27       	eor	r21, r21
    22aa:	44 27       	eor	r20, r20
    22ac:	42 2b       	or	r20, r18
    22ae:	44 87       	std	Z+12, r20	; 0x0c
    22b0:	55 87       	std	Z+13, r21	; 0x0d
    22b2:	66 87       	std	Z+14, r22	; 0x0e
    22b4:	77 87       	std	Z+15, r23	; 0x0f

  if (NWK_SECURITY_STATE_DECRYPT_PENDING == nwkSecurityActiveFrame->state)
    22b6:	2c 91       	ld	r18, X
    22b8:	21 33       	cpi	r18, 0x31	; 49
    22ba:	31 f4       	brne	.+12     	; 0x22c8 <nwkSecurityTaskHandler+0x190>
    nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	2c 91       	ld	r18, X
    22c0:	11 97       	sbiw	r26, 0x01	; 1
    22c2:	24 50       	subi	r18, 0x04	; 4
    22c4:	11 96       	adiw	r26, 0x01	; 1
    22c6:	2c 93       	st	X, r18
    22c8:	fc 01       	movw	r30, r24
    22ca:	ef 57       	subi	r30, 0x7F	; 127
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	40 81       	ld	r20, Z
    22d0:	51 81       	ldd	r21, Z+1	; 0x01
    22d2:	9c 01       	movw	r18, r24
    22d4:	2e 5f       	subi	r18, 0xFE	; 254
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	24 1b       	sub	r18, r20
    22da:	35 0b       	sbc	r19, r21
    22dc:	fc 01       	movw	r30, r24
    22de:	31 81       	ldd	r19, Z+1	; 0x01
    22e0:	23 0f       	add	r18, r19

  nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    22e2:	20 93 b8 1e 	sts	0x1EB8, r18
  nwkSecurityOffset = 0;
    22e6:	10 92 b7 1e 	sts	0x1EB7, r1
  nwkSecurityEncrypt = (NWK_SECURITY_STATE_ENCRYPT_PENDING == nwkSecurityActiveFrame->state);
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 81       	ld	r19, Z
    22ee:	30 33       	cpi	r19, 0x30	; 48
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <nwkSecurityTaskHandler+0x1bc>
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	20 93 b6 1e 	sts	0x1EB6, r18

  nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    22f8:	22 e3       	ldi	r18, 0x32	; 50
    22fa:	dc 01       	movw	r26, r24
    22fc:	2c 93       	st	X, r18
    22fe:	06 c0       	rjmp	.+12     	; 0x230c <nwkSecurityTaskHandler+0x1d4>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    }

    return;
  }

  while (NULL != (frame = nwkFrameNext(frame)))
    2304:	dc db       	rcall	.-2120   	; 0x1abe <nwkFrameNext>
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	09 f0       	breq	.+2      	; 0x230c <nwkSecurityTaskHandler+0x1d4>
    230a:	89 cf       	rjmp	.-238    	; 0x221e <nwkSecurityTaskHandler+0xe6>
      nwkSecurityActiveFrame = frame;
      nwkSecurityStart();
      return;
    }
  }
}
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	08 95       	ret

00002316 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    2316:	ef 92       	push	r14
    2318:	ff 92       	push	r15
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	7c 01       	movw	r14, r24
    2322:	10 e0       	ldi	r17, 0x00	; 0
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	01 e0       	ldi	r16, 0x01	; 1
    232a:	c3 e1       	ldi	r28, 0x13	; 19
    232c:	13 c0       	rjmp	.+38     	; 0x2354 <nwkTxDelayTimerHandler+0x3e>
    232e:	fc 01       	movw	r30, r24
    2330:	20 81       	ld	r18, Z
    2332:	21 31       	cpi	r18, 0x11	; 17
    2334:	79 f4       	brne	.+30     	; 0x2354 <nwkTxDelayTimerHandler+0x3e>
    2336:	ec 57       	subi	r30, 0x7C	; 124
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	20 81       	ld	r18, Z
    233c:	31 81       	ldd	r19, Z+1	; 0x01
    233e:	21 50       	subi	r18, 0x01	; 1
    2340:	31 09       	sbc	r19, r1
    2342:	31 83       	std	Z+1, r19	; 0x01
    2344:	20 83       	st	Z, r18
    2346:	23 2b       	or	r18, r19
    2348:	21 f4       	brne	.+8      	; 0x2352 <nwkTxDelayTimerHandler+0x3c>
    234a:	fc 01       	movw	r30, r24
    234c:	c0 83       	st	Z, r28
    234e:	10 2f       	mov	r17, r16
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <nwkTxDelayTimerHandler+0x3e>
    2352:	10 2f       	mov	r17, r16
    2354:	b4 db       	rcall	.-2200   	; 0x1abe <nwkFrameNext>
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	51 f7       	brne	.-44     	; 0x232e <nwkTxDelayTimerHandler+0x18>
    235a:	11 23       	and	r17, r17
    235c:	11 f0       	breq	.+4      	; 0x2362 <nwkTxDelayTimerHandler+0x4c>
    235e:	c7 01       	movw	r24, r14
    2360:	3a d4       	rcall	.+2164   	; 0x2bd6 <SYS_TimerStart>
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	0f 91       	pop	r16
    2368:	ff 90       	pop	r15
    236a:	ef 90       	pop	r14
    236c:	08 95       	ret

0000236e <nwkTxAckWaitTimerHandler>:
    236e:	ef 92       	push	r14
    2370:	ff 92       	push	r15
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	7c 01       	movw	r14, r24
    237c:	10 e0       	ldi	r17, 0x00	; 0
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	01 e0       	ldi	r16, 0x01	; 1
    2384:	d7 e1       	ldi	r29, 0x17	; 23
    2386:	c0 e1       	ldi	r28, 0x10	; 16
    2388:	16 c0       	rjmp	.+44     	; 0x23b6 <nwkTxAckWaitTimerHandler+0x48>
    238a:	fc 01       	movw	r30, r24
    238c:	20 81       	ld	r18, Z
    238e:	26 31       	cpi	r18, 0x16	; 22
    2390:	91 f4       	brne	.+36     	; 0x23b6 <nwkTxAckWaitTimerHandler+0x48>
    2392:	ec 57       	subi	r30, 0x7C	; 124
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	20 81       	ld	r18, Z
    2398:	31 81       	ldd	r19, Z+1	; 0x01
    239a:	21 50       	subi	r18, 0x01	; 1
    239c:	31 09       	sbc	r19, r1
    239e:	31 83       	std	Z+1, r19	; 0x01
    23a0:	20 83       	st	Z, r18
    23a2:	23 2b       	or	r18, r19
    23a4:	39 f4       	brne	.+14     	; 0x23b4 <nwkTxAckWaitTimerHandler+0x46>
    23a6:	fc 01       	movw	r30, r24
    23a8:	d0 83       	st	Z, r29
    23aa:	ed 57       	subi	r30, 0x7D	; 125
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	c0 83       	st	Z, r28
    23b0:	10 2f       	mov	r17, r16
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <nwkTxAckWaitTimerHandler+0x48>
    23b4:	10 2f       	mov	r17, r16
    23b6:	83 db       	rcall	.-2298   	; 0x1abe <nwkFrameNext>
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	39 f7       	brne	.-50     	; 0x238a <nwkTxAckWaitTimerHandler+0x1c>
    23bc:	11 23       	and	r17, r17
    23be:	11 f0       	breq	.+4      	; 0x23c4 <nwkTxAckWaitTimerHandler+0x56>
    23c0:	c7 01       	movw	r24, r14
    23c2:	09 d4       	rcall	.+2066   	; 0x2bd6 <SYS_TimerStart>
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	08 95       	ret

000023d2 <nwkTxInit>:
    23d2:	10 92 d7 1e 	sts	0x1ED7, r1
    23d6:	10 92 d6 1e 	sts	0x1ED6, r1
    23da:	e9 ec       	ldi	r30, 0xC9	; 201
    23dc:	fe e1       	ldi	r31, 0x1E	; 30
    23de:	82 e3       	ldi	r24, 0x32	; 50
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a0 e0       	ldi	r26, 0x00	; 0
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	86 83       	std	Z+6, r24	; 0x06
    23e8:	97 83       	std	Z+7, r25	; 0x07
    23ea:	a0 87       	std	Z+8, r26	; 0x08
    23ec:	b1 87       	std	Z+9, r27	; 0x09
    23ee:	12 86       	std	Z+10, r1	; 0x0a
    23f0:	87 eb       	ldi	r24, 0xB7	; 183
    23f2:	91 e1       	ldi	r25, 0x11	; 17
    23f4:	94 87       	std	Z+12, r25	; 0x0c
    23f6:	83 87       	std	Z+11, r24	; 0x0b
    23f8:	ec eb       	ldi	r30, 0xBC	; 188
    23fa:	fe e1       	ldi	r31, 0x1E	; 30
    23fc:	8a e0       	ldi	r24, 0x0A	; 10
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	86 83       	std	Z+6, r24	; 0x06
    2406:	97 83       	std	Z+7, r25	; 0x07
    2408:	a0 87       	std	Z+8, r26	; 0x08
    240a:	b1 87       	std	Z+9, r27	; 0x09
    240c:	12 86       	std	Z+10, r1	; 0x0a
    240e:	8b e8       	ldi	r24, 0x8B	; 139
    2410:	91 e1       	ldi	r25, 0x11	; 17
    2412:	94 87       	std	Z+12, r25	; 0x0c
    2414:	83 87       	std	Z+11, r24	; 0x0b
    2416:	08 95       	ret

00002418 <nwkTxFrame>:
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	fc 01       	movw	r30, r24
    241e:	dc 01       	movw	r26, r24
    2420:	aa 57       	subi	r26, 0x7A	; 122
    2422:	bf 4f       	sbci	r27, 0xFF	; 255
    2424:	8c 91       	ld	r24, X
    2426:	81 ff       	sbrs	r24, 1
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <nwkTxFrame+0x18>
    242a:	92 e1       	ldi	r25, 0x12	; 18
    242c:	90 83       	st	Z, r25
    242e:	08 c0       	rjmp	.+16     	; 0x2440 <nwkTxFrame+0x28>
    2430:	93 85       	ldd	r25, Z+11	; 0x0b
    2432:	91 ff       	sbrs	r25, 1
    2434:	03 c0       	rjmp	.+6      	; 0x243c <nwkTxFrame+0x24>
    2436:	90 e1       	ldi	r25, 0x10	; 16
    2438:	90 83       	st	Z, r25
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <nwkTxFrame+0x28>
    243c:	92 e1       	ldi	r25, 0x12	; 18
    243e:	90 83       	st	Z, r25
    2440:	df 01       	movw	r26, r30
    2442:	ad 57       	subi	r26, 0x7D	; 125
    2444:	bf 4f       	sbci	r27, 0xFF	; 255
    2446:	1c 92       	st	X, r1
    2448:	80 ff       	sbrs	r24, 0
    244a:	05 c0       	rjmp	.+10     	; 0x2456 <nwkTxFrame+0x3e>
    244c:	8f ef       	ldi	r24, 0xFF	; 255
    244e:	9f ef       	ldi	r25, 0xFF	; 255
    2450:	96 83       	std	Z+6, r25	; 0x06
    2452:	85 83       	std	Z+5, r24	; 0x05
    2454:	06 c0       	rjmp	.+12     	; 0x2462 <nwkTxFrame+0x4a>
    2456:	80 91 ed 20 	lds	r24, 0x20ED
    245a:	90 91 ee 20 	lds	r25, 0x20EE
    245e:	96 83       	std	Z+6, r25	; 0x06
    2460:	85 83       	std	Z+5, r24	; 0x05
    2462:	27 85       	ldd	r18, Z+15	; 0x0f
    2464:	30 89       	ldd	r19, Z+16	; 0x10
    2466:	30 87       	std	Z+8, r19	; 0x08
    2468:	27 83       	std	Z+7, r18	; 0x07
    246a:	ab ee       	ldi	r26, 0xEB	; 235
    246c:	b0 e2       	ldi	r27, 0x20	; 32
    246e:	8d 91       	ld	r24, X+
    2470:	9c 91       	ld	r25, X
    2472:	11 97       	sbiw	r26, 0x01	; 1
    2474:	92 87       	std	Z+10, r25	; 0x0a
    2476:	81 87       	std	Z+9, r24	; 0x09
    2478:	15 96       	adiw	r26, 0x05	; 5
    247a:	8c 91       	ld	r24, X
    247c:	15 97       	sbiw	r26, 0x05	; 5
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	15 96       	adiw	r26, 0x05	; 5
    2482:	8c 93       	st	X, r24
    2484:	84 83       	std	Z+4, r24	; 0x04
    2486:	2f 3f       	cpi	r18, 0xFF	; 255
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	81 f4       	brne	.+32     	; 0x24ac <nwkTxFrame+0x94>
    248c:	ef 01       	movw	r28, r30
    248e:	81 e4       	ldi	r24, 0x41	; 65
    2490:	98 e8       	ldi	r25, 0x88	; 136
    2492:	93 83       	std	Z+3, r25	; 0x03
    2494:	82 83       	std	Z+2, r24	; 0x02
    2496:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <rand>
    249a:	fe 01       	movw	r30, r28
    249c:	ec 57       	subi	r30, 0x7C	; 124
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	87 70       	andi	r24, 0x07	; 7
    24a2:	99 27       	eor	r25, r25
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	08 c0       	rjmp	.+16     	; 0x24bc <nwkTxFrame+0xa4>
    24ac:	81 e6       	ldi	r24, 0x61	; 97
    24ae:	98 e8       	ldi	r25, 0x88	; 136
    24b0:	93 83       	std	Z+3, r25	; 0x03
    24b2:	82 83       	std	Z+2, r24	; 0x02
    24b4:	ec 57       	subi	r30, 0x7C	; 124
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	11 82       	std	Z+1, r1	; 0x01
    24ba:	10 82       	st	Z, r1
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	08 95       	ret

000024c2 <nwkTxBroadcastFrame>:
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	8c 01       	movw	r16, r24
    24cc:	b5 da       	rcall	.-2710   	; 0x1a38 <nwkFrameAlloc>
    24ce:	ec 01       	movw	r28, r24
    24d0:	89 2b       	or	r24, r25
    24d2:	b9 f1       	breq	.+110    	; 0x2542 <nwkTxBroadcastFrame+0x80>
    24d4:	82 e1       	ldi	r24, 0x12	; 18
    24d6:	88 83       	st	Y, r24
    24d8:	f8 01       	movw	r30, r16
    24da:	81 81       	ldd	r24, Z+1	; 0x01
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	fe 01       	movw	r30, r28
    24e0:	ed 57       	subi	r30, 0x7D	; 125
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	10 82       	st	Z, r1
    24e6:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <rand>
    24ea:	fe 01       	movw	r30, r28
    24ec:	ec 57       	subi	r30, 0x7C	; 124
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	87 70       	andi	r24, 0x07	; 7
    24f2:	99 27       	eor	r25, r25
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	80 83       	st	Z, r24
    24fa:	33 96       	adiw	r30, 0x03	; 3
    24fc:	11 82       	std	Z+1, r1	; 0x01
    24fe:	10 82       	st	Z, r1
    2500:	f8 01       	movw	r30, r16
    2502:	41 81       	ldd	r20, Z+1	; 0x01
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	b8 01       	movw	r22, r16
    2508:	6e 5f       	subi	r22, 0xFE	; 254
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	ce 01       	movw	r24, r28
    250e:	02 96       	adiw	r24, 0x02	; 2
    2510:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <memcpy>
    2514:	81 e4       	ldi	r24, 0x41	; 65
    2516:	98 e8       	ldi	r25, 0x88	; 136
    2518:	9b 83       	std	Y+3, r25	; 0x03
    251a:	8a 83       	std	Y+2, r24	; 0x02
    251c:	8f ef       	ldi	r24, 0xFF	; 255
    251e:	9f ef       	ldi	r25, 0xFF	; 255
    2520:	98 87       	std	Y+8, r25	; 0x08
    2522:	8f 83       	std	Y+7, r24	; 0x07
    2524:	f8 01       	movw	r30, r16
    2526:	85 81       	ldd	r24, Z+5	; 0x05
    2528:	96 81       	ldd	r25, Z+6	; 0x06
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	eb ee       	ldi	r30, 0xEB	; 235
    2530:	f0 e2       	ldi	r31, 0x20	; 32
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	9a 87       	std	Y+10, r25	; 0x0a
    2538:	89 87       	std	Y+9, r24	; 0x09
    253a:	85 81       	ldd	r24, Z+5	; 0x05
    253c:	8f 5f       	subi	r24, 0xFF	; 255
    253e:	85 83       	std	Z+5, r24	; 0x05
    2540:	8c 83       	std	Y+4, r24	; 0x04
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	08 95       	ret

0000254c <nwkTxAckReceived>:
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	fc 01       	movw	r30, r24
    2552:	c7 81       	ldd	r28, Z+7	; 0x07
    2554:	d0 85       	ldd	r29, Z+8	; 0x08
    2556:	81 85       	ldd	r24, Z+9	; 0x09
    2558:	83 30       	cpi	r24, 0x03	; 3
    255a:	c1 f4       	brne	.+48     	; 0x258c <nwkTxAckReceived+0x40>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	10 c0       	rjmp	.+32     	; 0x2582 <nwkTxAckReceived+0x36>
    2562:	fc 01       	movw	r30, r24
    2564:	20 81       	ld	r18, Z
    2566:	26 31       	cpi	r18, 0x16	; 22
    2568:	61 f4       	brne	.+24     	; 0x2582 <nwkTxAckReceived+0x36>
    256a:	34 85       	ldd	r19, Z+12	; 0x0c
    256c:	29 81       	ldd	r18, Y+1	; 0x01
    256e:	32 13       	cpse	r19, r18
    2570:	08 c0       	rjmp	.+16     	; 0x2582 <nwkTxAckReceived+0x36>
    2572:	27 e1       	ldi	r18, 0x17	; 23
    2574:	20 83       	st	Z, r18
    2576:	2a 81       	ldd	r18, Y+2	; 0x02
    2578:	ea 57       	subi	r30, 0x7A	; 122
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	20 83       	st	Z, r18
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	06 c0       	rjmp	.+12     	; 0x258e <nwkTxAckReceived+0x42>
    2582:	9d da       	rcall	.-2758   	; 0x1abe <nwkFrameNext>
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	69 f7       	brne	.-38     	; 0x2562 <nwkTxAckReceived+0x16>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	01 c0       	rjmp	.+2      	; 0x258e <nwkTxAckReceived+0x42>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	08 95       	ret

00002594 <nwkTxEncryptConf>:
#ifdef NWK_ENABLE_SECURITY
/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
  frame->state = NWK_TX_STATE_DELAY;
    2594:	22 e1       	ldi	r18, 0x12	; 18
    2596:	fc 01       	movw	r30, r24
    2598:	20 83       	st	Z, r18
    259a:	08 95       	ret

0000259c <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    259c:	e0 91 d6 1e 	lds	r30, 0x1ED6
    25a0:	f0 91 d7 1e 	lds	r31, 0x1ED7

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	21 f0       	breq	.+8      	; 0x25b0 <PHY_DataConf+0x14>
    25a8:	48 f0       	brcs	.+18     	; 0x25bc <PHY_DataConf+0x20>
    25aa:	82 30       	cpi	r24, 0x02	; 2
    25ac:	19 f0       	breq	.+6      	; 0x25b4 <PHY_DataConf+0x18>
    25ae:	04 c0       	rjmp	.+8      	; 0x25b8 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    25b0:	80 e2       	ldi	r24, 0x20	; 32
    25b2:	05 c0       	rjmp	.+10     	; 0x25be <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    25b4:	81 e2       	ldi	r24, 0x21	; 33
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    25bc:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    25be:	df 01       	movw	r26, r30
    25c0:	ad 57       	subi	r26, 0x7D	; 125
    25c2:	bf 4f       	sbci	r27, 0xFF	; 255
    25c4:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    25c6:	85 e1       	ldi	r24, 0x15	; 21
    25c8:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    25ca:	10 92 d7 1e 	sts	0x1ED7, r1
    25ce:	10 92 d6 1e 	sts	0x1ED6, r1
  nwkIb.lock--;
    25d2:	eb ee       	ldi	r30, 0xEB	; 235
    25d4:	f0 e2       	ldi	r31, 0x20	; 32
    25d6:	86 a9       	ldd	r24, Z+54	; 0x36
    25d8:	97 a9       	ldd	r25, Z+55	; 0x37
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	97 ab       	std	Z+55, r25	; 0x37
    25de:	86 ab       	std	Z+54, r24	; 0x36
    25e0:	08 95       	ret

000025e2 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    25e2:	9f 92       	push	r9
    25e4:	af 92       	push	r10
    25e6:	bf 92       	push	r11
    25e8:	cf 92       	push	r12
    25ea:	df 92       	push	r13
    25ec:	ef 92       	push	r14
    25ee:	ff 92       	push	r15
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    25f8:	c0 e0       	ldi	r28, 0x00	; 0
    25fa:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    25fc:	0f 2e       	mov	r0, r31
    25fe:	f4 e1       	ldi	r31, 0x14	; 20
    2600:	af 2e       	mov	r10, r31
    2602:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    2604:	0b ee       	ldi	r16, 0xEB	; 235
    2606:	10 e2       	ldi	r17, 0x20	; 32
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    2608:	0f 2e       	mov	r0, r31
    260a:	f7 e1       	ldi	r31, 0x17	; 23
    260c:	df 2e       	mov	r13, r31
    260e:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    2610:	0f 2e       	mov	r0, r31
    2612:	f6 e1       	ldi	r31, 0x16	; 22
    2614:	9f 2e       	mov	r9, r31
    2616:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    2618:	0f 2e       	mov	r0, r31
    261a:	f5 e1       	ldi	r31, 0x15	; 21
    261c:	ef 2e       	mov	r14, r31
    261e:	f1 2c       	mov	r15, r1
    2620:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2622:	0f 2e       	mov	r0, r31
    2624:	f3 e1       	ldi	r31, 0x13	; 19
    2626:	cf 2e       	mov	r12, r31
    2628:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    262a:	0f 2e       	mov	r0, r31
    262c:	f1 e1       	ldi	r31, 0x11	; 17
    262e:	bf 2e       	mov	r11, r31
    2630:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2632:	64 c0       	rjmp	.+200    	; 0x26fc <nwkTxTaskHandler+0x11a>
  {
    switch (frame->state)
    2634:	88 81       	ld	r24, Y
    2636:	83 31       	cpi	r24, 0x13	; 19
    2638:	f1 f0       	breq	.+60     	; 0x2676 <nwkTxTaskHandler+0x94>
    263a:	28 f4       	brcc	.+10     	; 0x2646 <nwkTxTaskHandler+0x64>
    263c:	80 31       	cpi	r24, 0x10	; 16
    263e:	49 f0       	breq	.+18     	; 0x2652 <nwkTxTaskHandler+0x70>
    2640:	82 31       	cpi	r24, 0x12	; 18
    2642:	59 f0       	breq	.+22     	; 0x265a <nwkTxTaskHandler+0x78>
    2644:	5b c0       	rjmp	.+182    	; 0x26fc <nwkTxTaskHandler+0x11a>
    2646:	85 31       	cpi	r24, 0x15	; 21
    2648:	69 f1       	breq	.+90     	; 0x26a4 <nwkTxTaskHandler+0xc2>
    264a:	87 31       	cpi	r24, 0x17	; 23
    264c:	09 f4       	brne	.+2      	; 0x2650 <nwkTxTaskHandler+0x6e>
    264e:	49 c0       	rjmp	.+146    	; 0x26e2 <nwkTxTaskHandler+0x100>
    2650:	55 c0       	rjmp	.+170    	; 0x26fc <nwkTxTaskHandler+0x11a>
    {
#ifdef NWK_ENABLE_SECURITY
      case NWK_TX_STATE_ENCRYPT:
      {
        nwkSecurityProcess(frame, true);
    2652:	61 e0       	ldi	r22, 0x01	; 1
    2654:	ce 01       	movw	r24, r28
    2656:	23 dd       	rcall	.-1466   	; 0x209e <nwkSecurityProcess>
      } break;
    2658:	51 c0       	rjmp	.+162    	; 0x26fc <nwkTxTaskHandler+0x11a>
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    265a:	fe 01       	movw	r30, r28
    265c:	ec 57       	subi	r30, 0x7C	; 124
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	91 81       	ldd	r25, Z+1	; 0x01
    2664:	89 2b       	or	r24, r25
    2666:	29 f0       	breq	.+10     	; 0x2672 <nwkTxTaskHandler+0x90>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2668:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    266a:	8c eb       	ldi	r24, 0xBC	; 188
    266c:	9e e1       	ldi	r25, 0x1E	; 30
    266e:	b3 d2       	rcall	.+1382   	; 0x2bd6 <SYS_TimerStart>
    2670:	45 c0       	rjmp	.+138    	; 0x26fc <nwkTxTaskHandler+0x11a>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2672:	c8 82       	st	Y, r12
    2674:	43 c0       	rjmp	.+134    	; 0x26fc <nwkTxTaskHandler+0x11a>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    2676:	80 91 d6 1e 	lds	r24, 0x1ED6
    267a:	90 91 d7 1e 	lds	r25, 0x1ED7
    267e:	89 2b       	or	r24, r25
    2680:	09 f0       	breq	.+2      	; 0x2684 <nwkTxTaskHandler+0xa2>
    2682:	3c c0       	rjmp	.+120    	; 0x26fc <nwkTxTaskHandler+0x11a>
        {
          nwkTxPhyActiveFrame = frame;
    2684:	d0 93 d7 1e 	sts	0x1ED7, r29
    2688:	c0 93 d6 1e 	sts	0x1ED6, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    268c:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    268e:	69 81       	ldd	r22, Y+1	; 0x01
    2690:	ce 01       	movw	r24, r28
    2692:	02 96       	adiw	r24, 0x02	; 2
    2694:	ad d0       	rcall	.+346    	; 0x27f0 <PHY_DataReq>
          nwkIb.lock++;
    2696:	f8 01       	movw	r30, r16
    2698:	86 a9       	ldd	r24, Z+54	; 0x36
    269a:	97 a9       	ldd	r25, Z+55	; 0x37
    269c:	01 96       	adiw	r24, 0x01	; 1
    269e:	97 ab       	std	Z+55, r25	; 0x37
    26a0:	86 ab       	std	Z+54, r24	; 0x36
    26a2:	2c c0       	rjmp	.+88     	; 0x26fc <nwkTxTaskHandler+0x11a>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    26a4:	fe 01       	movw	r30, r28
    26a6:	ed 57       	subi	r30, 0x7D	; 125
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	81 11       	cpse	r24, r1
    26ae:	17 c0       	rjmp	.+46     	; 0x26de <nwkTxTaskHandler+0xfc>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    26b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    26b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    26b4:	f8 01       	movw	r30, r16
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	28 17       	cp	r18, r24
    26bc:	39 07       	cpc	r19, r25
    26be:	69 f4       	brne	.+26     	; 0x26da <nwkTxTaskHandler+0xf8>
    26c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    26c2:	80 ff       	sbrs	r24, 0
    26c4:	0a c0       	rjmp	.+20     	; 0x26da <nwkTxTaskHandler+0xf8>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    26c6:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    26c8:	fe 01       	movw	r30, r28
    26ca:	ec 57       	subi	r30, 0x7C	; 124
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	f1 82       	std	Z+1, r15	; 0x01
    26d0:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    26d2:	89 ec       	ldi	r24, 0xC9	; 201
    26d4:	9e e1       	ldi	r25, 0x1E	; 30
    26d6:	7f d2       	rcall	.+1278   	; 0x2bd6 <SYS_TimerStart>
    26d8:	11 c0       	rjmp	.+34     	; 0x26fc <nwkTxTaskHandler+0x11a>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    26da:	d8 82       	st	Y, r13
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <nwkTxTaskHandler+0x11a>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    26de:	d8 82       	st	Y, r13
    26e0:	0d c0       	rjmp	.+26     	; 0x26fc <nwkTxTaskHandler+0x11a>
      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
#endif
        if (NULL == frame->tx.confirm)
    26e2:	fe 01       	movw	r30, r28
    26e4:	e9 57       	subi	r30, 0x79	; 121
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	01 90       	ld	r0, Z+
    26ea:	f0 81       	ld	r31, Z
    26ec:	e0 2d       	mov	r30, r0
    26ee:	30 97       	sbiw	r30, 0x00	; 0
    26f0:	19 f4       	brne	.+6      	; 0x26f8 <nwkTxTaskHandler+0x116>
          nwkFrameFree(frame);
    26f2:	ce 01       	movw	r24, r28
    26f4:	da d9       	rcall	.-3148   	; 0x1aaa <nwkFrameFree>
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <nwkTxTaskHandler+0x11a>
        else
          frame->tx.confirm(frame);
    26f8:	ce 01       	movw	r24, r28
    26fa:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    26fc:	ce 01       	movw	r24, r28
    26fe:	df d9       	rcall	.-3138   	; 0x1abe <nwkFrameNext>
    2700:	ec 01       	movw	r28, r24
    2702:	89 2b       	or	r24, r25
    2704:	09 f0       	breq	.+2      	; 0x2708 <nwkTxTaskHandler+0x126>
    2706:	96 cf       	rjmp	.-212    	; 0x2634 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	df 90       	pop	r13
    2716:	cf 90       	pop	r12
    2718:	bf 90       	pop	r11
    271a:	af 90       	pop	r10
    271c:	9f 90       	pop	r9
    271e:	08 95       	ret

00002720 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    2720:	80 91 d8 1e 	lds	r24, 0x1ED8
    2724:	98 2f       	mov	r25, r24
    2726:	9f 70       	andi	r25, 0x0F	; 15
    2728:	e4 e5       	ldi	r30, 0x54	; 84
    272a:	f1 e0       	ldi	r31, 0x01	; 1
    272c:	80 81       	ld	r24, Z
    272e:	80 7f       	andi	r24, 0xF0	; 240
    2730:	89 2b       	or	r24, r25
    2732:	80 83       	st	Z, r24
    2734:	80 91 d8 1e 	lds	r24, 0x1ED8
    2738:	88 23       	and	r24, r24
    273a:	29 f0       	breq	.+10     	; 0x2746 <phySetChannel+0x26>
    273c:	80 91 d9 1e 	lds	r24, 0x1ED9
    2740:	80 93 53 01 	sts	0x0153, r24
    2744:	08 95       	ret
    2746:	80 91 d9 1e 	lds	r24, 0x1ED9
    274a:	98 2f       	mov	r25, r24
    274c:	9f 71       	andi	r25, 0x1F	; 31
    274e:	e8 e4       	ldi	r30, 0x48	; 72
    2750:	f1 e0       	ldi	r31, 0x01	; 1
    2752:	80 81       	ld	r24, Z
    2754:	80 7e       	andi	r24, 0xE0	; 224
    2756:	89 2b       	or	r24, r25
    2758:	80 83       	st	Z, r24
    275a:	08 95       	ret

0000275c <phyTrxSetState>:
    275c:	93 e0       	ldi	r25, 0x03	; 3
    275e:	90 93 42 01 	sts	0x0142, r25
    2762:	e1 e4       	ldi	r30, 0x41	; 65
    2764:	f1 e0       	ldi	r31, 0x01	; 1
    2766:	90 81       	ld	r25, Z
    2768:	9f 71       	andi	r25, 0x1F	; 31
    276a:	98 30       	cpi	r25, 0x08	; 8
    276c:	e1 f7       	brne	.-8      	; 0x2766 <phyTrxSetState+0xa>
    276e:	80 93 42 01 	sts	0x0142, r24
    2772:	e1 e4       	ldi	r30, 0x41	; 65
    2774:	f1 e0       	ldi	r31, 0x01	; 1
    2776:	90 81       	ld	r25, Z
    2778:	9f 71       	andi	r25, 0x1F	; 31
    277a:	98 13       	cpse	r25, r24
    277c:	fc cf       	rjmp	.-8      	; 0x2776 <phyTrxSetState+0x1a>
    277e:	08 95       	ret

00002780 <phySetRxState>:
    2780:	88 e0       	ldi	r24, 0x08	; 8
    2782:	ec df       	rcall	.-40     	; 0x275c <phyTrxSetState>
    2784:	8f ef       	ldi	r24, 0xFF	; 255
    2786:	80 93 4f 01 	sts	0x014F, r24
    278a:	80 91 da 1e 	lds	r24, 0x1EDA
    278e:	88 23       	and	r24, r24
    2790:	11 f0       	breq	.+4      	; 0x2796 <phySetRxState+0x16>
    2792:	86 e1       	ldi	r24, 0x16	; 22
    2794:	e3 cf       	rjmp	.-58     	; 0x275c <phyTrxSetState>
    2796:	08 95       	ret

00002798 <PHY_SetRxState>:
    2798:	80 93 da 1e 	sts	0x1EDA, r24
    279c:	f1 cf       	rjmp	.-30     	; 0x2780 <phySetRxState>
    279e:	08 95       	ret

000027a0 <PHY_SetChannel>:
    27a0:	80 93 d9 1e 	sts	0x1ED9, r24
    27a4:	bd cf       	rjmp	.-134    	; 0x2720 <phySetChannel>
    27a6:	08 95       	ret

000027a8 <PHY_SetPanId>:
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	1f 92       	push	r1
    27ae:	1f 92       	push	r1
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	80 93 62 01 	sts	0x0162, r24
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	80 93 63 01 	sts	0x0163, r24
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	08 95       	ret

000027cc <PHY_SetShortAddr>:
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	1f 92       	push	r1
    27d2:	1f 92       	push	r1
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	80 93 60 01 	sts	0x0160, r24
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	80 93 61 01 	sts	0x0161, r24
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	08 95       	ret

000027f0 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    27f0:	0f 93       	push	r16
    27f2:	1f 93       	push	r17
    27f4:	cf 93       	push	r28
    27f6:	8c 01       	movw	r16, r24
    27f8:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    27fa:	89 e1       	ldi	r24, 0x19	; 25
    27fc:	af df       	rcall	.-162    	; 0x275c <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    27fe:	8f ef       	ldi	r24, 0xFF	; 255
    2800:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	8c 0f       	add	r24, r28
    2808:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    280c:	cc 23       	and	r28, r28
    280e:	81 f0       	breq	.+32     	; 0x2830 <PHY_DataReq+0x40>
    2810:	f8 01       	movw	r30, r16
    2812:	c1 50       	subi	r28, 0x01	; 1
    2814:	2c 2f       	mov	r18, r28
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	2f 5f       	subi	r18, 0xFF	; 255
    281a:	3f 4f       	sbci	r19, 0xFF	; 255
    281c:	c8 01       	movw	r24, r16
    281e:	82 0f       	add	r24, r18
    2820:	93 1f       	adc	r25, r19
    2822:	a1 e8       	ldi	r26, 0x81	; 129
    2824:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    2826:	21 91       	ld	r18, Z+
    2828:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    282a:	e8 17       	cp	r30, r24
    282c:	f9 07       	cpc	r31, r25
    282e:	d9 f7       	brne	.-10     	; 0x2826 <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    2830:	83 e0       	ldi	r24, 0x03	; 3
    2832:	80 93 5b 1f 	sts	0x1F5B, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	80 93 42 01 	sts	0x0142, r24
}
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	08 95       	ret

00002844 <PHY_RandomReq>:

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
  uint16_t rnd = 0;

  TRX_RPC_REG = 0x00;
    2850:	10 92 56 01 	sts	0x0156, r1

  phyTrxSetState(TRX_CMD_RX_ON);
    2854:	86 e0       	ldi	r24, 0x06	; 6
    2856:	82 df       	rcall	.-252    	; 0x275c <phyTrxSetState>
    2858:	c0 e0       	ldi	r28, 0x00	; 0
    285a:	d0 e0       	ldi	r29, 0x00	; 0
#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
  uint16_t rnd = 0;
    285c:	e1 2c       	mov	r14, r1
    285e:	f1 2c       	mov	r15, r1
  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    2860:	06 e4       	ldi	r16, 0x46	; 70
    2862:	11 e0       	ldi	r17, 0x01	; 1

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	0e 94 9e 0b 	call	0x173c	; 0x173c <HAL_Delay>
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    286a:	f8 01       	movw	r30, r16
    286c:	20 81       	ld	r18, Z
    286e:	22 95       	swap	r18
    2870:	26 95       	lsr	r18
    2872:	27 70       	andi	r18, 0x07	; 7
    2874:	23 70       	andi	r18, 0x03	; 3
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	0c 2e       	mov	r0, r28
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <PHY_RandomReq+0x3c>
    287c:	22 0f       	add	r18, r18
    287e:	33 1f       	adc	r19, r19
    2880:	0a 94       	dec	r0
    2882:	e2 f7       	brpl	.-8      	; 0x287c <PHY_RandomReq+0x38>
    2884:	e2 2a       	or	r14, r18
    2886:	f3 2a       	or	r15, r19
    2888:	22 96       	adiw	r28, 0x02	; 2

  TRX_RPC_REG = 0x00;

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
    288a:	c0 31       	cpi	r28, 0x10	; 16
    288c:	d1 05       	cpc	r29, r1
    288e:	51 f7       	brne	.-44     	; 0x2864 <PHY_RandomReq+0x20>
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
  }

  phyTrxSetState(TRX_CMD_TRX_OFF);
    2890:	88 e0       	ldi	r24, 0x08	; 8
    2892:	64 df       	rcall	.-312    	; 0x275c <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    2894:	8b ee       	ldi	r24, 0xEB	; 235
    2896:	80 93 56 01 	sts	0x0156, r24

  phySetRxState();
    289a:	72 df       	rcall	.-284    	; 0x2780 <phySetRxState>

  return rnd;
}
    289c:	c7 01       	movw	r24, r14
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	08 95       	ret

000028ac <PHY_Init>:
/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  //Rest transceiver
  TRXPR_REG_s.trxrst = 1;
    28ac:	e9 e3       	ldi	r30, 0x39	; 57
    28ae:	f1 e0       	ldi	r31, 0x01	; 1
    28b0:	80 81       	ld	r24, Z
    28b2:	81 60       	ori	r24, 0x01	; 1
    28b4:	80 83       	st	Z, r24

  phyRxState = false;
    28b6:	10 92 da 1e 	sts	0x1EDA, r1
  phyBand = 0;
    28ba:	10 92 d8 1e 	sts	0x1ED8, r1
  phyState = PHY_STATE_IDLE;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	80 93 5b 1f 	sts	0x1F5B, r24

  //off transceiver
  phyTrxSetState(TRX_CMD_TRX_OFF);
    28c4:	88 e0       	ldi	r24, 0x08	; 8
    28c6:	4a df       	rcall	.-364    	; 0x275c <phyTrxSetState>
  //transceiver power reduction mode
  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    28c8:	8b ee       	ldi	r24, 0xEB	; 235
    28ca:	80 93 56 01 	sts	0x0156, r24
  //If this bit is set, the next received frame will be protected and not overwritten by following frames
  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    28ce:	ec e4       	ldi	r30, 0x4C	; 76
    28d0:	f1 e0       	ldi	r31, 0x01	; 1
    28d2:	80 81       	ld	r24, Z
    28d4:	80 68       	ori	r24, 0x80	; 128
    28d6:	80 83       	st	Z, r24

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
    28d8:	b5 df       	rcall	.-150    	; 0x2844 <PHY_RandomReq>
    28da:	80 93 6d 01 	sts	0x016D, r24
    28de:	08 95       	ret

000028e0 <PHY_EncryptReq>:

#ifdef PHY_ENABLE_AES_MODULE
/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	fb 01       	movw	r30, r22
    28e6:	ab 01       	movw	r20, r22
    28e8:	40 5f       	subi	r20, 0xF0	; 240
    28ea:	5f 4f       	sbci	r21, 0xFF	; 255
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    AES_KEY = key[i];
    28ec:	af e3       	ldi	r26, 0x3F	; 63
    28ee:	b1 e0       	ldi	r27, 0x01	; 1
    28f0:	21 91       	ld	r18, Z+
    28f2:	2c 93       	st	X, r18
#ifdef PHY_ENABLE_AES_MODULE
/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    28f4:	e4 17       	cp	r30, r20
    28f6:	f5 07       	cpc	r31, r21
    28f8:	d9 f7       	brne	.-10     	; 0x28f0 <PHY_EncryptReq+0x10>
    AES_KEY = key[i];

  AES_CTRL = (0<<AES_CTRL_DIR) | (0<<AES_CTRL_MODE);
    28fa:	10 92 3c 01 	sts	0x013C, r1
    28fe:	dc 01       	movw	r26, r24
    2900:	9c 01       	movw	r18, r24
    2902:	20 5f       	subi	r18, 0xF0	; 240
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	fc 01       	movw	r30, r24

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    AES_STATE = text[i];
    2908:	ce e3       	ldi	r28, 0x3E	; 62
    290a:	d1 e0       	ldi	r29, 0x01	; 1
    290c:	81 91       	ld	r24, Z+
    290e:	88 83       	st	Y, r24
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    AES_KEY = key[i];

  AES_CTRL = (0<<AES_CTRL_DIR) | (0<<AES_CTRL_MODE);

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    2910:	e2 17       	cp	r30, r18
    2912:	f3 07       	cpc	r31, r19
    2914:	d9 f7       	brne	.-10     	; 0x290c <PHY_EncryptReq+0x2c>
    AES_STATE = text[i];

  AES_CTRL |= (1<<AES_CTRL_REQUEST);
    2916:	ec e3       	ldi	r30, 0x3C	; 60
    2918:	f1 e0       	ldi	r31, 0x01	; 1
    291a:	80 81       	ld	r24, Z
    291c:	80 68       	ori	r24, 0x80	; 128
    291e:	80 83       	st	Z, r24

  while (0 == (AES_STATUS & (1<<AES_STATUS_RY)));
    2920:	ed e3       	ldi	r30, 0x3D	; 61
    2922:	f1 e0       	ldi	r31, 0x01	; 1
    2924:	80 81       	ld	r24, Z
    2926:	80 ff       	sbrs	r24, 0
    2928:	fd cf       	rjmp	.-6      	; 0x2924 <PHY_EncryptReq+0x44>

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    text[i] = AES_STATE;
    292a:	ee e3       	ldi	r30, 0x3E	; 62
    292c:	f1 e0       	ldi	r31, 0x01	; 1
    292e:	80 81       	ld	r24, Z
    2930:	8d 93       	st	X+, r24

  AES_CTRL |= (1<<AES_CTRL_REQUEST);

  while (0 == (AES_STATUS & (1<<AES_STATUS_RY)));

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    2932:	a2 17       	cp	r26, r18
    2934:	b3 07       	cpc	r27, r19
    2936:	d9 f7       	brne	.-10     	; 0x292e <PHY_EncryptReq+0x4e>
    text[i] = AES_STATE;
}
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	08 95       	ret

0000293e <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    293e:	1f 93       	push	r17
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	00 d0       	rcall	.+0      	; 0x2946 <PHY_TaskHandler+0x8>
    2946:	1f 92       	push	r1
    2948:	1f 92       	push	r1
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    294e:	80 91 5b 1f 	lds	r24, 0x1F5B
    2952:	82 30       	cpi	r24, 0x02	; 2
    2954:	09 f4       	brne	.+2      	; 0x2958 <PHY_TaskHandler+0x1a>
    2956:	65 c0       	rjmp	.+202    	; 0x2a22 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2958:	80 91 4f 01 	lds	r24, 0x014F
    295c:	83 ff       	sbrs	r24, 3
    295e:	3e c0       	rjmp	.+124    	; 0x29dc <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    2960:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2964:	6a 2f       	mov	r22, r26
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	ab 01       	movw	r20, r22
    296a:	4f 5f       	subi	r20, 0xFF	; 255
    296c:	5f 4f       	sbci	r21, 0xFF	; 255
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    2974:	fc 01       	movw	r30, r24
    2976:	e0 58       	subi	r30, 0x80	; 128
    2978:	fe 4f       	sbci	r31, 0xFE	; 254
    297a:	30 81       	ld	r19, Z
    297c:	fc 01       	movw	r30, r24
    297e:	e5 52       	subi	r30, 0x25	; 37
    2980:	f1 4e       	sbci	r31, 0xE1	; 225
    2982:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2984:	2f 5f       	subi	r18, 0xFF	; 255
    2986:	82 2f       	mov	r24, r18
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	84 17       	cp	r24, r20
    298c:	95 07       	cpc	r25, r21
    298e:	94 f3       	brlt	.-28     	; 0x2974 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    2990:	8b ed       	ldi	r24, 0xDB	; 219
    2992:	9e e1       	ldi	r25, 0x1E	; 30
    2994:	9a 83       	std	Y+2, r25	; 0x02
    2996:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    2998:	a2 50       	subi	r26, 0x02	; 2
    299a:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    299c:	fb 01       	movw	r30, r22
    299e:	e5 52       	subi	r30, 0x25	; 37
    29a0:	f1 4e       	sbci	r31, 0xE1	; 225
    29a2:	80 81       	ld	r24, Z
    29a4:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    29a6:	80 91 47 01 	lds	r24, 0x0147
    29aa:	8a 55       	subi	r24, 0x5A	; 90
    29ac:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    29ae:	ce 01       	movw	r24, r28
    29b0:	01 96       	adiw	r24, 0x01	; 1
    29b2:	02 d9       	rcall	.-3580   	; 0x1bb8 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    29b4:	e1 e4       	ldi	r30, 0x41	; 65
    29b6:	f1 e0       	ldi	r31, 0x01	; 1
    29b8:	80 81       	ld	r24, Z
    29ba:	8f 71       	andi	r24, 0x1F	; 31
    29bc:	86 31       	cpi	r24, 0x16	; 22
    29be:	e1 f7       	brne	.-8      	; 0x29b8 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    29c0:	ef e4       	ldi	r30, 0x4F	; 79
    29c2:	f1 e0       	ldi	r31, 0x01	; 1
    29c4:	80 81       	ld	r24, Z
    29c6:	88 60       	ori	r24, 0x08	; 8
    29c8:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    29ca:	ec e4       	ldi	r30, 0x4C	; 76
    29cc:	f1 e0       	ldi	r31, 0x01	; 1
    29ce:	80 81       	ld	r24, Z
    29d0:	8f 77       	andi	r24, 0x7F	; 127
    29d2:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    29d4:	80 81       	ld	r24, Z
    29d6:	80 68       	ori	r24, 0x80	; 128
    29d8:	80 83       	st	Z, r24
    29da:	23 c0       	rjmp	.+70     	; 0x2a22 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    29dc:	80 91 4f 01 	lds	r24, 0x014F
    29e0:	86 ff       	sbrs	r24, 6
    29e2:	1f c0       	rjmp	.+62     	; 0x2a22 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    29e4:	80 91 41 01 	lds	r24, 0x0141
    29e8:	8f 71       	andi	r24, 0x1F	; 31
    29ea:	89 31       	cpi	r24, 0x19	; 25
    29ec:	a9 f4       	brne	.+42     	; 0x2a18 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    29ee:	10 91 42 01 	lds	r17, 0x0142
    29f2:	12 95       	swap	r17
    29f4:	16 95       	lsr	r17
    29f6:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    29f8:	49 f0       	breq	.+18     	; 0x2a0c <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    29fa:	13 30       	cpi	r17, 0x03	; 3
    29fc:	21 f0       	breq	.+8      	; 0x2a06 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    29fe:	15 30       	cpi	r17, 0x05	; 5
    2a00:	21 f0       	breq	.+8      	; 0x2a0a <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    2a02:	13 e0       	ldi	r17, 0x03	; 3
    2a04:	03 c0       	rjmp	.+6      	; 0x2a0c <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2a06:	11 e0       	ldi	r17, 0x01	; 1
    2a08:	01 c0       	rjmp	.+2      	; 0x2a0c <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    2a0a:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    2a0c:	b9 de       	rcall	.-654    	; 0x2780 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	80 93 5b 1f 	sts	0x1F5B, r24

      PHY_DataConf(status);
    2a14:	81 2f       	mov	r24, r17
    2a16:	c2 dd       	rcall	.-1148   	; 0x259c <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2a18:	ef e4       	ldi	r30, 0x4F	; 79
    2a1a:	f1 e0       	ldi	r31, 0x01	; 1
    2a1c:	80 81       	ld	r24, Z
    2a1e:	80 64       	ori	r24, 0x40	; 64
    2a20:	80 83       	st	Z, r24
  }
}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	08 95       	ret

00002a34 <SYS_Init>:
/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  //prescaler defined, timer 4 defined
  HAL_Init();
    2a34:	0e 94 8a 0b 	call	0x1714	; 0x1714 <HAL_Init>
  //initialize application timer
  SYS_TimerInit();
    2a38:	72 d0       	rcall	.+228    	; 0x2b1e <SYS_TimerInit>
  //transceiver initialization
  PHY_Init();
    2a3a:	38 df       	rcall	.-400    	; 0x28ac <PHY_Init>
  //mesh network initialization
  NWK_Init();
    2a3c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <NWK_Init>
  PHY_TX_PWR = 0x00; //For maximizing Tx power
    2a40:	10 92 45 01 	sts	0x0145, r1
    2a44:	08 95       	ret

00002a46 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    2a46:	7b df       	rcall	.-266    	; 0x293e <PHY_TaskHandler>
  NWK_TaskHandler();
    2a48:	0e 94 15 0c 	call	0x182a	; 0x182a <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2a4c:	cf c0       	rjmp	.+414    	; 0x2bec <SYS_TimerTaskHandler>
    2a4e:	08 95       	ret

00002a50 <SYS_EncryptReq>:
/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint8_t *text, uint8_t *key)
{
#if SYS_SECURITY_MODE == 0
  PHY_EncryptReq(text, key);
    2a50:	47 df       	rcall	.-370    	; 0x28e0 <PHY_EncryptReq>
  text[3] ^= text[1];
  xtea(&text[2], key);

#endif

  SYS_EncryptConf();
    2a52:	34 cb       	rjmp	.-2456   	; 0x20bc <SYS_EncryptConf>
    2a54:	08 95       	ret

00002a56 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	ec 01       	movw	r28, r24
  if (timers)
    2a60:	80 91 5c 1f 	lds	r24, 0x1F5C
    2a64:	90 91 5d 1f 	lds	r25, 0x1F5D
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <placeTimer+0x18>
    2a6c:	45 c0       	rjmp	.+138    	; 0x2af8 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    2a6e:	4e 81       	ldd	r20, Y+6	; 0x06
    2a70:	5f 81       	ldd	r21, Y+7	; 0x07
    2a72:	68 85       	ldd	r22, Y+8	; 0x08
    2a74:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    2a76:	fc 01       	movw	r30, r24
    2a78:	02 81       	ldd	r16, Z+2	; 0x02
    2a7a:	13 81       	ldd	r17, Z+3	; 0x03
    2a7c:	24 81       	ldd	r18, Z+4	; 0x04
    2a7e:	35 81       	ldd	r19, Z+5	; 0x05
    2a80:	40 17       	cp	r20, r16
    2a82:	51 07       	cpc	r21, r17
    2a84:	62 07       	cpc	r22, r18
    2a86:	73 07       	cpc	r23, r19
    2a88:	60 f0       	brcs	.+24     	; 0x2aa2 <placeTimer+0x4c>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	17 c0       	rjmp	.+46     	; 0x2abc <placeTimer+0x66>
    2a8e:	02 81       	ldd	r16, Z+2	; 0x02
    2a90:	13 81       	ldd	r17, Z+3	; 0x03
    2a92:	24 81       	ldd	r18, Z+4	; 0x04
    2a94:	35 81       	ldd	r19, Z+5	; 0x05
    2a96:	40 17       	cp	r20, r16
    2a98:	51 07       	cpc	r21, r17
    2a9a:	62 07       	cpc	r22, r18
    2a9c:	73 07       	cpc	r23, r19
    2a9e:	68 f4       	brcc	.+26     	; 0x2aba <placeTimer+0x64>
    2aa0:	03 c0       	rjmp	.+6      	; 0x2aa8 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2aa2:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    2aa4:	a0 e0       	ldi	r26, 0x00	; 0
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    2aa8:	04 1b       	sub	r16, r20
    2aaa:	15 0b       	sbc	r17, r21
    2aac:	26 0b       	sbc	r18, r22
    2aae:	37 0b       	sbc	r19, r23
    2ab0:	02 83       	std	Z+2, r16	; 0x02
    2ab2:	13 83       	std	Z+3, r17	; 0x03
    2ab4:	24 83       	std	Z+4, r18	; 0x04
    2ab6:	35 83       	std	Z+5, r19	; 0x05
         break;
    2ab8:	0a c0       	rjmp	.+20     	; 0x2ace <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2aba:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    2abc:	40 1b       	sub	r20, r16
    2abe:	51 0b       	sbc	r21, r17
    2ac0:	62 0b       	sbc	r22, r18
    2ac2:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2ac4:	ed 91       	ld	r30, X+
    2ac6:	fc 91       	ld	r31, X
    2ac8:	11 97       	sbiw	r26, 0x01	; 1
    2aca:	30 97       	sbiw	r30, 0x00	; 0
    2acc:	01 f7       	brne	.-64     	; 0x2a8e <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    2ace:	4a 83       	std	Y+2, r20	; 0x02
    2ad0:	5b 83       	std	Y+3, r21	; 0x03
    2ad2:	6c 83       	std	Y+4, r22	; 0x04
    2ad4:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    2ad6:	10 97       	sbiw	r26, 0x00	; 0
    2ad8:	41 f0       	breq	.+16     	; 0x2aea <placeTimer+0x94>
    {
      timer->next = prev->next;
    2ada:	8d 91       	ld	r24, X+
    2adc:	9c 91       	ld	r25, X
    2ade:	11 97       	sbiw	r26, 0x01	; 1
    2ae0:	99 83       	std	Y+1, r25	; 0x01
    2ae2:	88 83       	st	Y, r24
      prev->next = timer;
    2ae4:	cd 93       	st	X+, r28
    2ae6:	dc 93       	st	X, r29
    2ae8:	15 c0       	rjmp	.+42     	; 0x2b14 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    2aea:	99 83       	std	Y+1, r25	; 0x01
    2aec:	88 83       	st	Y, r24
      timers = timer;
    2aee:	d0 93 5d 1f 	sts	0x1F5D, r29
    2af2:	c0 93 5c 1f 	sts	0x1F5C, r28
    2af6:	0e c0       	rjmp	.+28     	; 0x2b14 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    2af8:	19 82       	std	Y+1, r1	; 0x01
    2afa:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    2afc:	8e 81       	ldd	r24, Y+6	; 0x06
    2afe:	9f 81       	ldd	r25, Y+7	; 0x07
    2b00:	a8 85       	ldd	r26, Y+8	; 0x08
    2b02:	b9 85       	ldd	r27, Y+9	; 0x09
    2b04:	8a 83       	std	Y+2, r24	; 0x02
    2b06:	9b 83       	std	Y+3, r25	; 0x03
    2b08:	ac 83       	std	Y+4, r26	; 0x04
    2b0a:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    2b0c:	d0 93 5d 1f 	sts	0x1F5D, r29
    2b10:	c0 93 5c 1f 	sts	0x1F5C, r28
  }
}
    2b14:	df 91       	pop	r29
    2b16:	cf 91       	pop	r28
    2b18:	1f 91       	pop	r17
    2b1a:	0f 91       	pop	r16
    2b1c:	08 95       	ret

00002b1e <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    2b1e:	10 92 5d 1f 	sts	0x1F5D, r1
    2b22:	10 92 5c 1f 	sts	0x1F5C, r1
    2b26:	08 95       	ret

00002b28 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b2c:	a0 91 5c 1f 	lds	r26, 0x1F5C
    2b30:	b0 91 5d 1f 	lds	r27, 0x1F5D
    2b34:	10 97       	sbiw	r26, 0x00	; 0
    2b36:	91 f1       	breq	.+100    	; 0x2b9c <SYS_TimerStop+0x74>
  {
    if (t == timer)
    2b38:	a8 17       	cp	r26, r24
    2b3a:	b9 07       	cpc	r27, r25
    2b3c:	51 f5       	brne	.+84     	; 0x2b92 <SYS_TimerStop+0x6a>
    2b3e:	0a c0       	rjmp	.+20     	; 0x2b54 <SYS_TimerStop+0x2c>
    2b40:	8e 17       	cp	r24, r30
    2b42:	9f 07       	cpc	r25, r31
    2b44:	29 f5       	brne	.+74     	; 0x2b90 <SYS_TimerStop+0x68>
    {
      if (prev)
    2b46:	10 97       	sbiw	r26, 0x00	; 0
    2b48:	31 f0       	breq	.+12     	; 0x2b56 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    2b4a:	20 81       	ld	r18, Z
    2b4c:	31 81       	ldd	r19, Z+1	; 0x01
    2b4e:	2d 93       	st	X+, r18
    2b50:	3c 93       	st	X, r19
    2b52:	07 c0       	rjmp	.+14     	; 0x2b62 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b54:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    2b56:	20 81       	ld	r18, Z
    2b58:	31 81       	ldd	r19, Z+1	; 0x01
    2b5a:	30 93 5d 1f 	sts	0x1F5D, r19
    2b5e:	20 93 5c 1f 	sts	0x1F5C, r18

      if (t->next)
    2b62:	01 90       	ld	r0, Z+
    2b64:	f0 81       	ld	r31, Z
    2b66:	e0 2d       	mov	r30, r0
    2b68:	30 97       	sbiw	r30, 0x00	; 0
    2b6a:	c1 f0       	breq	.+48     	; 0x2b9c <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    2b6c:	42 81       	ldd	r20, Z+2	; 0x02
    2b6e:	53 81       	ldd	r21, Z+3	; 0x03
    2b70:	64 81       	ldd	r22, Z+4	; 0x04
    2b72:	75 81       	ldd	r23, Z+5	; 0x05
    2b74:	ec 01       	movw	r28, r24
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7a:	ac 81       	ldd	r26, Y+4	; 0x04
    2b7c:	bd 81       	ldd	r27, Y+5	; 0x05
    2b7e:	84 0f       	add	r24, r20
    2b80:	95 1f       	adc	r25, r21
    2b82:	a6 1f       	adc	r26, r22
    2b84:	b7 1f       	adc	r27, r23
    2b86:	82 83       	std	Z+2, r24	; 0x02
    2b88:	93 83       	std	Z+3, r25	; 0x03
    2b8a:	a4 83       	std	Z+4, r26	; 0x04
    2b8c:	b5 83       	std	Z+5, r27	; 0x05
    2b8e:	06 c0       	rjmp	.+12     	; 0x2b9c <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b90:	df 01       	movw	r26, r30
    2b92:	ed 91       	ld	r30, X+
    2b94:	fc 91       	ld	r31, X
    2b96:	11 97       	sbiw	r26, 0x01	; 1
    2b98:	30 97       	sbiw	r30, 0x00	; 0
    2b9a:	91 f6       	brne	.-92     	; 0x2b40 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2ba2:	e0 91 5c 1f 	lds	r30, 0x1F5C
    2ba6:	f0 91 5d 1f 	lds	r31, 0x1F5D
    2baa:	30 97       	sbiw	r30, 0x00	; 0
    2bac:	71 f0       	breq	.+28     	; 0x2bca <SYS_TimerStarted+0x28>
    if (t == timer)
    2bae:	e8 17       	cp	r30, r24
    2bb0:	f9 07       	cpc	r31, r25
    2bb2:	21 f4       	brne	.+8      	; 0x2bbc <SYS_TimerStarted+0x1a>
    2bb4:	0c c0       	rjmp	.+24     	; 0x2bce <SYS_TimerStarted+0x2c>
    2bb6:	8e 17       	cp	r24, r30
    2bb8:	9f 07       	cpc	r25, r31
    2bba:	59 f0       	breq	.+22     	; 0x2bd2 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2bbc:	01 90       	ld	r0, Z+
    2bbe:	f0 81       	ld	r31, Z
    2bc0:	e0 2d       	mov	r30, r0
    2bc2:	30 97       	sbiw	r30, 0x00	; 0
    2bc4:	c1 f7       	brne	.-16     	; 0x2bb6 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	08 95       	ret
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	08 95       	ret
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    2bd4:	08 95       	ret

00002bd6 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    2bdc:	e2 df       	rcall	.-60     	; 0x2ba2 <SYS_TimerStarted>
    2bde:	81 11       	cpse	r24, r1
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <SYS_TimerStart+0x10>
    placeTimer(timer);
    2be2:	ce 01       	movw	r24, r28
    2be4:	38 df       	rcall	.-400    	; 0x2a56 <placeTimer>
}
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	08 95       	ret

00002bec <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2bec:	cf 92       	push	r12
    2bee:	df 92       	push	r13
    2bf0:	ef 92       	push	r14
    2bf2:	ff 92       	push	r15
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    2bf8:	80 91 ea 20 	lds	r24, 0x20EA
    2bfc:	88 23       	and	r24, r24
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <SYS_TimerTaskHandler+0x16>
    2c00:	59 c0       	rjmp	.+178    	; 0x2cb4 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    2c02:	8f b7       	in	r24, 0x3f	; 63
    2c04:	f8 94       	cli
    cnt = halTimerIrqCount;
    2c06:	c0 90 ea 20 	lds	r12, 0x20EA
    halTimerIrqCount = 0;
    2c0a:	10 92 ea 20 	sts	0x20EA, r1
  ATOMIC_SECTION_LEAVE
    2c0e:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    2c10:	d1 2c       	mov	r13, r1
    2c12:	e1 2c       	mov	r14, r1
    2c14:	f1 2c       	mov	r15, r1
    2c16:	cc 0c       	add	r12, r12
    2c18:	dd 1c       	adc	r13, r13
    2c1a:	ee 1c       	adc	r14, r14
    2c1c:	ff 1c       	adc	r15, r15
    2c1e:	d7 01       	movw	r26, r14
    2c20:	c6 01       	movw	r24, r12
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	aa 1f       	adc	r26, r26
    2c28:	bb 1f       	adc	r27, r27
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	aa 1f       	adc	r26, r26
    2c30:	bb 1f       	adc	r27, r27
    2c32:	c8 0e       	add	r12, r24
    2c34:	d9 1e       	adc	r13, r25
    2c36:	ea 1e       	adc	r14, r26
    2c38:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    2c3a:	c0 91 5c 1f 	lds	r28, 0x1F5C
    2c3e:	d0 91 5d 1f 	lds	r29, 0x1F5D
    2c42:	20 97       	sbiw	r28, 0x00	; 0
    2c44:	b9 f1       	breq	.+110    	; 0x2cb4 <SYS_TimerTaskHandler+0xc8>
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	ac 81       	ldd	r26, Y+4	; 0x04
    2c4c:	bd 81       	ldd	r27, Y+5	; 0x05
    2c4e:	c8 16       	cp	r12, r24
    2c50:	d9 06       	cpc	r13, r25
    2c52:	ea 06       	cpc	r14, r26
    2c54:	fb 06       	cpc	r15, r27
    2c56:	10 f1       	brcs	.+68     	; 0x2c9c <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    2c58:	c8 1a       	sub	r12, r24
    2c5a:	d9 0a       	sbc	r13, r25
    2c5c:	ea 0a       	sbc	r14, r26
    2c5e:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    2c60:	88 81       	ld	r24, Y
    2c62:	99 81       	ldd	r25, Y+1	; 0x01
    2c64:	90 93 5d 1f 	sts	0x1F5D, r25
    2c68:	80 93 5c 1f 	sts	0x1F5C, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    2c6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	11 f4       	brne	.+4      	; 0x2c76 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    2c72:	ce 01       	movw	r24, r28
    2c74:	f0 de       	rcall	.-544    	; 0x2a56 <placeTimer>
    timer->handler(timer);
    2c76:	eb 85       	ldd	r30, Y+11	; 0x0b
    2c78:	fc 85       	ldd	r31, Y+12	; 0x0c
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    2c7e:	c0 91 5c 1f 	lds	r28, 0x1F5C
    2c82:	d0 91 5d 1f 	lds	r29, 0x1F5D
    2c86:	20 97       	sbiw	r28, 0x00	; 0
    2c88:	a9 f0       	breq	.+42     	; 0x2cb4 <SYS_TimerTaskHandler+0xc8>
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8e:	ac 81       	ldd	r26, Y+4	; 0x04
    2c90:	bd 81       	ldd	r27, Y+5	; 0x05
    2c92:	c8 16       	cp	r12, r24
    2c94:	d9 06       	cpc	r13, r25
    2c96:	ea 06       	cpc	r14, r26
    2c98:	fb 06       	cpc	r15, r27
    2c9a:	f0 f6       	brcc	.-68     	; 0x2c58 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca0:	ac 81       	ldd	r26, Y+4	; 0x04
    2ca2:	bd 81       	ldd	r27, Y+5	; 0x05
    2ca4:	8c 19       	sub	r24, r12
    2ca6:	9d 09       	sbc	r25, r13
    2ca8:	ae 09       	sbc	r26, r14
    2caa:	bf 09       	sbc	r27, r15
    2cac:	8a 83       	std	Y+2, r24	; 0x02
    2cae:	9b 83       	std	Y+3, r25	; 0x03
    2cb0:	ac 83       	std	Y+4, r26	; 0x04
    2cb2:	bd 83       	std	Y+5, r27	; 0x05
}
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	ff 90       	pop	r15
    2cba:	ef 90       	pop	r14
    2cbc:	df 90       	pop	r13
    2cbe:	cf 90       	pop	r12
    2cc0:	08 95       	ret

00002cc2 <errorTimerStatusHandler>:
	else
	{
		int_to_ascii((uint8_t)data);
		send_usart_char("\r\n");
	}
}
    2cc2:	80 91 4a 20 	lds	r24, 0x204A
    2cc6:	8f 5f       	subi	r24, 0xFF	; 255
    2cc8:	80 93 4a 20 	sts	0x204A, r24
    2ccc:	88 23       	and	r24, r24
    2cce:	19 f0       	breq	.+6      	; 0x2cd6 <errorTimerStatusHandler+0x14>
    2cd0:	10 92 4a 20 	sts	0x204A, r1
    2cd4:	08 95       	ret
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	80 93 6f 20 	sts	0x206F, r24
    2cdc:	08 95       	ret

00002cde <appLEDIntervalTimerHandler>:
    2cde:	84 e7       	ldi	r24, 0x74	; 116
    2ce0:	90 e2       	ldi	r25, 0x20	; 32
    2ce2:	79 cf       	rjmp	.-270    	; 0x2bd6 <SYS_TimerStart>
    2ce4:	08 95       	ret

00002ce6 <appWPSActivationTimerHandler>:
    2ce6:	80 91 2c 20 	lds	r24, 0x202C
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	81 f4       	brne	.+32     	; 0x2d0e <appWPSActivationTimerHandler+0x28>
    2cee:	85 eb       	ldi	r24, 0xB5	; 181
    2cf0:	90 e2       	ldi	r25, 0x20	; 32
    2cf2:	1a df       	rcall	.-460    	; 0x2b28 <SYS_TimerStop>
    2cf4:	84 e0       	ldi	r24, 0x04	; 4
    2cf6:	80 93 36 20 	sts	0x2036, r24
    2cfa:	10 92 31 20 	sts	0x2031, r1
    2cfe:	10 92 30 20 	sts	0x2030, r1
    2d02:	0e 94 85 02 	call	0x50a	; 0x50a <APP_IbLoadSettings_WPS>
    2d06:	86 ec       	ldi	r24, 0xC6	; 198
    2d08:	90 e2       	ldi	r25, 0x20	; 32
    2d0a:	65 cf       	rjmp	.-310    	; 0x2bd6 <SYS_TimerStart>
    2d0c:	08 95       	ret
    2d0e:	81 11       	cpse	r24, r1
    2d10:	10 c0       	rjmp	.+32     	; 0x2d32 <appWPSActivationTimerHandler+0x4c>
    2d12:	85 eb       	ldi	r24, 0xB5	; 181
    2d14:	90 e2       	ldi	r25, 0x20	; 32
    2d16:	08 df       	rcall	.-496    	; 0x2b28 <SYS_TimerStop>
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	80 93 36 20 	sts	0x2036, r24
    2d1e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <APP_IbLoadSettings>
    2d22:	0e 94 0c 03 	call	0x618	; 0x618 <APP_NwkInit>
    2d26:	86 ec       	ldi	r24, 0xC6	; 198
    2d28:	90 e2       	ldi	r25, 0x20	; 32
    2d2a:	fe de       	rcall	.-516    	; 0x2b28 <SYS_TimerStop>
    2d2c:	8d e0       	ldi	r24, 0x0D	; 13
    2d2e:	90 e2       	ldi	r25, 0x20	; 32
    2d30:	fb ce       	rjmp	.-522    	; 0x2b28 <SYS_TimerStop>
    2d32:	08 95       	ret

00002d34 <appWPSRequestTimerHandler>:
    2d34:	8e e5       	ldi	r24, 0x5E	; 94
    2d36:	9f e1       	ldi	r25, 0x1F	; 31
    2d38:	0c 94 22 37 	jmp	0x6e44	; 0x6e44 <request_to_RF>
    2d3c:	08 95       	ret

00002d3e <errorTimerWpsHandler>:
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	80 93 08 20 	sts	0x2008, r24
    2d44:	80 e4       	ldi	r24, 0x40	; 64
    2d46:	92 e0       	ldi	r25, 0x02	; 2
    2d48:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <send_usart_char>
    2d4c:	08 95       	ret

00002d4e <appLEDTimerHandler>:
    2d4e:	80 91 db 1f 	lds	r24, 0x1FDB
    2d52:	82 30       	cpi	r24, 0x02	; 2
    2d54:	08 f0       	brcs	.+2      	; 0x2d58 <appLEDTimerHandler+0xa>
    2d56:	6a c0       	rjmp	.+212    	; 0x2e2c <appLEDTimerHandler+0xde>
    2d58:	80 91 f2 1f 	lds	r24, 0x1FF2
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	49 f0       	breq	.+18     	; 0x2d72 <appLEDTimerHandler+0x24>
    2d60:	18 f4       	brcc	.+6      	; 0x2d68 <appLEDTimerHandler+0x1a>
    2d62:	81 30       	cpi	r24, 0x01	; 1
    2d64:	c9 f1       	breq	.+114    	; 0x2dd8 <appLEDTimerHandler+0x8a>
    2d66:	49 c0       	rjmp	.+146    	; 0x2dfa <appLEDTimerHandler+0xac>
    2d68:	85 30       	cpi	r24, 0x05	; 5
    2d6a:	a1 f0       	breq	.+40     	; 0x2d94 <appLEDTimerHandler+0x46>
    2d6c:	86 30       	cpi	r24, 0x06	; 6
    2d6e:	19 f1       	breq	.+70     	; 0x2db6 <appLEDTimerHandler+0x68>
    2d70:	44 c0       	rjmp	.+136    	; 0x2dfa <appLEDTimerHandler+0xac>
    2d72:	60 91 4b 20 	lds	r22, 0x204B
    2d76:	70 91 4c 20 	lds	r23, 0x204C
    2d7a:	80 91 4d 20 	lds	r24, 0x204D
    2d7e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    2d82:	60 91 29 20 	lds	r22, 0x2029
    2d86:	70 91 2a 20 	lds	r23, 0x202A
    2d8a:	80 91 2b 20 	lds	r24, 0x202B
    2d8e:	0e 94 24 0a 	call	0x1448	; 0x1448 <gpio_toggle>
    2d92:	43 c0       	rjmp	.+134    	; 0x2e1a <appLEDTimerHandler+0xcc>
    2d94:	60 91 29 20 	lds	r22, 0x2029
    2d98:	70 91 2a 20 	lds	r23, 0x202A
    2d9c:	80 91 2b 20 	lds	r24, 0x202B
    2da0:	0e 94 24 0a 	call	0x1448	; 0x1448 <gpio_toggle>
    2da4:	60 91 4b 20 	lds	r22, 0x204B
    2da8:	70 91 4c 20 	lds	r23, 0x204C
    2dac:	80 91 4d 20 	lds	r24, 0x204D
    2db0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    2db4:	32 c0       	rjmp	.+100    	; 0x2e1a <appLEDTimerHandler+0xcc>
    2db6:	60 91 29 20 	lds	r22, 0x2029
    2dba:	70 91 2a 20 	lds	r23, 0x202A
    2dbe:	80 91 2b 20 	lds	r24, 0x202B
    2dc2:	0e 94 24 0a 	call	0x1448	; 0x1448 <gpio_toggle>
    2dc6:	60 91 4b 20 	lds	r22, 0x204B
    2dca:	70 91 4c 20 	lds	r23, 0x204C
    2dce:	80 91 4d 20 	lds	r24, 0x204D
    2dd2:	0e 94 24 0a 	call	0x1448	; 0x1448 <gpio_toggle>
    2dd6:	21 c0       	rjmp	.+66     	; 0x2e1a <appLEDTimerHandler+0xcc>
    2dd8:	60 91 29 20 	lds	r22, 0x2029
    2ddc:	70 91 2a 20 	lds	r23, 0x202A
    2de0:	80 91 2b 20 	lds	r24, 0x202B
    2de4:	0e 94 24 0a 	call	0x1448	; 0x1448 <gpio_toggle>
    2de8:	60 91 4b 20 	lds	r22, 0x204B
    2dec:	70 91 4c 20 	lds	r23, 0x204C
    2df0:	80 91 4d 20 	lds	r24, 0x204D
    2df4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    2df8:	10 c0       	rjmp	.+32     	; 0x2e1a <appLEDTimerHandler+0xcc>
    2dfa:	60 91 29 20 	lds	r22, 0x2029
    2dfe:	70 91 2a 20 	lds	r23, 0x202A
    2e02:	80 91 2b 20 	lds	r24, 0x202B
    2e06:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    2e0a:	60 91 4b 20 	lds	r22, 0x204B
    2e0e:	70 91 4c 20 	lds	r23, 0x204C
    2e12:	80 91 4d 20 	lds	r24, 0x204D
    2e16:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    2e1a:	80 91 db 1f 	lds	r24, 0x1FDB
    2e1e:	8f 5f       	subi	r24, 0xFF	; 255
    2e20:	80 93 db 1f 	sts	0x1FDB, r24
    2e24:	84 e7       	ldi	r24, 0x74	; 116
    2e26:	90 e2       	ldi	r25, 0x20	; 32
    2e28:	d6 de       	rcall	.-596    	; 0x2bd6 <SYS_TimerStart>
    2e2a:	15 c0       	rjmp	.+42     	; 0x2e56 <appLEDTimerHandler+0x108>
    2e2c:	60 91 29 20 	lds	r22, 0x2029
    2e30:	70 91 2a 20 	lds	r23, 0x202A
    2e34:	80 91 2b 20 	lds	r24, 0x202B
    2e38:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    2e3c:	60 91 4b 20 	lds	r22, 0x204B
    2e40:	70 91 4c 20 	lds	r23, 0x204C
    2e44:	80 91 4d 20 	lds	r24, 0x204D
    2e48:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    2e4c:	10 92 db 1f 	sts	0x1FDB, r1
    2e50:	8e e4       	ldi	r24, 0x4E	; 78
    2e52:	90 e2       	ldi	r25, 0x20	; 32
    2e54:	c0 de       	rcall	.-640    	; 0x2bd6 <SYS_TimerStart>
    2e56:	a8 95       	wdr
    2e58:	08 95       	ret

00002e5a <PNEWELSGpioInit>:
    2e5a:	ef 92       	push	r14
    2e5c:	ff 92       	push	r15
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	e1 e8       	ldi	r30, 0x81	; 129
    2e68:	f0 e2       	ldi	r31, 0x20	; 32
    2e6a:	10 82       	st	Z, r1
    2e6c:	0f 2e       	mov	r0, r31
    2e6e:	f3 e0       	ldi	r31, 0x03	; 3
    2e70:	ff 2e       	mov	r15, r31
    2e72:	f0 2d       	mov	r31, r0
    2e74:	f1 82       	std	Z+1, r15	; 0x01
    2e76:	8b e0       	ldi	r24, 0x0B	; 11
    2e78:	82 83       	std	Z+2, r24	; 0x02
    2e7a:	60 91 81 20 	lds	r22, 0x2081
    2e7e:	70 91 82 20 	lds	r23, 0x2082
    2e82:	80 91 83 20 	lds	r24, 0x2083
    2e86:	4d ed       	ldi	r20, 0xDD	; 221
    2e88:	5b e1       	ldi	r21, 0x1B	; 27
    2e8a:	0e 94 4f 09 	call	0x129e	; 0x129e <ext_int_set_interrupt_callback>
    2e8e:	60 91 81 20 	lds	r22, 0x2081
    2e92:	70 91 82 20 	lds	r23, 0x2082
    2e96:	80 91 83 20 	lds	r24, 0x2083
    2e9a:	0e 94 39 09 	call	0x1272	; 0x1272 <ext_int_pcint_init>
    2e9e:	ea e1       	ldi	r30, 0x1A	; 26
    2ea0:	f0 e2       	ldi	r31, 0x20	; 32
    2ea2:	10 82       	st	Z, r1
    2ea4:	c2 e0       	ldi	r28, 0x02	; 2
    2ea6:	c1 83       	std	Z+1, r28	; 0x01
    2ea8:	8a e0       	ldi	r24, 0x0A	; 10
    2eaa:	82 83       	std	Z+2, r24	; 0x02
    2eac:	60 91 1a 20 	lds	r22, 0x201A
    2eb0:	70 91 1b 20 	lds	r23, 0x201B
    2eb4:	80 91 1c 20 	lds	r24, 0x201C
    2eb8:	0e 94 39 09 	call	0x1272	; 0x1272 <ext_int_pcint_init>
    2ebc:	ed e1       	ldi	r30, 0x1D	; 29
    2ebe:	f0 e2       	ldi	r31, 0x20	; 32
    2ec0:	10 82       	st	Z, r1
    2ec2:	d1 e0       	ldi	r29, 0x01	; 1
    2ec4:	d1 83       	std	Z+1, r29	; 0x01
    2ec6:	89 e0       	ldi	r24, 0x09	; 9
    2ec8:	82 83       	std	Z+2, r24	; 0x02
    2eca:	60 91 1d 20 	lds	r22, 0x201D
    2ece:	70 91 1e 20 	lds	r23, 0x201E
    2ed2:	80 91 1f 20 	lds	r24, 0x201F
    2ed6:	0e 94 39 09 	call	0x1272	; 0x1272 <ext_int_pcint_init>
    2eda:	e3 ec       	ldi	r30, 0xC3	; 195
    2edc:	f0 e2       	ldi	r31, 0x20	; 32
    2ede:	10 82       	st	Z, r1
    2ee0:	11 82       	std	Z+1, r1	; 0x01
    2ee2:	88 e0       	ldi	r24, 0x08	; 8
    2ee4:	82 83       	std	Z+2, r24	; 0x02
    2ee6:	60 91 c3 20 	lds	r22, 0x20C3
    2eea:	70 91 c4 20 	lds	r23, 0x20C4
    2eee:	80 91 c5 20 	lds	r24, 0x20C5
    2ef2:	0e 94 39 09 	call	0x1272	; 0x1272 <ext_int_pcint_init>
    2ef6:	e0 e7       	ldi	r30, 0x70	; 112
    2ef8:	f0 e2       	ldi	r31, 0x20	; 32
    2efa:	d0 83       	st	Z, r29
    2efc:	68 94       	set
    2efe:	ee 24       	eor	r14, r14
    2f00:	e2 f8       	bld	r14, 2
    2f02:	e1 82       	std	Z+1, r14	; 0x01
    2f04:	60 91 70 20 	lds	r22, 0x2070
    2f08:	70 91 71 20 	lds	r23, 0x2071
    2f0c:	80 91 72 20 	lds	r24, 0x2072
    2f10:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <gpio_in>
    2f14:	60 91 70 20 	lds	r22, 0x2070
    2f18:	70 91 71 20 	lds	r23, 0x2071
    2f1c:	80 91 72 20 	lds	r24, 0x2072
    2f20:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gpio_pullup>
    2f24:	e9 e2       	ldi	r30, 0x29	; 41
    2f26:	f0 e2       	ldi	r31, 0x20	; 32
    2f28:	c0 83       	st	Z, r28
    2f2a:	05 e0       	ldi	r16, 0x05	; 5
    2f2c:	01 83       	std	Z+1, r16	; 0x01
    2f2e:	60 91 29 20 	lds	r22, 0x2029
    2f32:	70 91 2a 20 	lds	r23, 0x202A
    2f36:	80 91 2b 20 	lds	r24, 0x202B
    2f3a:	0e 94 c6 0a 	call	0x158c	; 0x158c <gpio_out>
    2f3e:	eb e4       	ldi	r30, 0x4B	; 75
    2f40:	f0 e2       	ldi	r31, 0x20	; 32
    2f42:	c0 83       	st	Z, r28
    2f44:	17 e0       	ldi	r17, 0x07	; 7
    2f46:	11 83       	std	Z+1, r17	; 0x01
    2f48:	60 91 4b 20 	lds	r22, 0x204B
    2f4c:	70 91 4c 20 	lds	r23, 0x204C
    2f50:	80 91 4d 20 	lds	r24, 0x204D
    2f54:	0e 94 c6 0a 	call	0x158c	; 0x158c <gpio_out>
    2f58:	ed e5       	ldi	r30, 0x5D	; 93
    2f5a:	f0 e2       	ldi	r31, 0x20	; 32
    2f5c:	c0 83       	st	Z, r28
    2f5e:	e1 82       	std	Z+1, r14	; 0x01
    2f60:	60 91 5d 20 	lds	r22, 0x205D
    2f64:	70 91 5e 20 	lds	r23, 0x205E
    2f68:	80 91 5f 20 	lds	r24, 0x205F
    2f6c:	0e 94 c6 0a 	call	0x158c	; 0x158c <gpio_out>
    2f70:	ed e2       	ldi	r30, 0x2D	; 45
    2f72:	f0 e2       	ldi	r31, 0x20	; 32
    2f74:	c0 83       	st	Z, r28
    2f76:	f1 82       	std	Z+1, r15	; 0x01
    2f78:	60 91 2d 20 	lds	r22, 0x202D
    2f7c:	70 91 2e 20 	lds	r23, 0x202E
    2f80:	80 91 2f 20 	lds	r24, 0x202F
    2f84:	0e 94 c6 0a 	call	0x158c	; 0x158c <gpio_out>
    2f88:	00 93 0b 20 	sts	0x200B, r16
    2f8c:	60 91 0a 20 	lds	r22, 0x200A
    2f90:	70 91 0b 20 	lds	r23, 0x200B
    2f94:	80 91 0c 20 	lds	r24, 0x200C
    2f98:	0e 94 c6 0a 	call	0x158c	; 0x158c <gpio_out>
    2f9c:	0f 2e       	mov	r0, r31
    2f9e:	f6 e0       	ldi	r31, 0x06	; 6
    2fa0:	ff 2e       	mov	r15, r31
    2fa2:	f0 2d       	mov	r31, r0
    2fa4:	f0 92 df 20 	sts	0x20DF, r15
    2fa8:	60 91 de 20 	lds	r22, 0x20DE
    2fac:	70 91 df 20 	lds	r23, 0x20DF
    2fb0:	80 91 e0 20 	lds	r24, 0x20E0
    2fb4:	0e 94 c6 0a 	call	0x158c	; 0x158c <gpio_out>
    2fb8:	10 93 e5 20 	sts	0x20E5, r17
    2fbc:	60 91 e4 20 	lds	r22, 0x20E4
    2fc0:	70 91 e5 20 	lds	r23, 0x20E5
    2fc4:	80 91 e6 20 	lds	r24, 0x20E6
    2fc8:	0e 94 c6 0a 	call	0x158c	; 0x158c <gpio_out>
    2fcc:	e8 ed       	ldi	r30, 0xD8	; 216
    2fce:	f0 e2       	ldi	r31, 0x20	; 32
    2fd0:	c0 83       	st	Z, r28
    2fd2:	11 82       	std	Z+1, r1	; 0x01
    2fd4:	60 91 d8 20 	lds	r22, 0x20D8
    2fd8:	70 91 d9 20 	lds	r23, 0x20D9
    2fdc:	80 91 da 20 	lds	r24, 0x20DA
    2fe0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <gpio_in>
    2fe4:	60 91 d8 20 	lds	r22, 0x20D8
    2fe8:	70 91 d9 20 	lds	r23, 0x20D9
    2fec:	80 91 da 20 	lds	r24, 0x20DA
    2ff0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gpio_pullup>
    2ff4:	e3 ed       	ldi	r30, 0xD3	; 211
    2ff6:	f0 e2       	ldi	r31, 0x20	; 32
    2ff8:	c0 83       	st	Z, r28
    2ffa:	d1 83       	std	Z+1, r29	; 0x01
    2ffc:	60 91 d3 20 	lds	r22, 0x20D3
    3000:	70 91 d4 20 	lds	r23, 0x20D4
    3004:	80 91 d5 20 	lds	r24, 0x20D5
    3008:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <gpio_in>
    300c:	60 91 d3 20 	lds	r22, 0x20D3
    3010:	70 91 d4 20 	lds	r23, 0x20D4
    3014:	80 91 d5 20 	lds	r24, 0x20D5
    3018:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gpio_pullup>
    301c:	e6 e2       	ldi	r30, 0x26	; 38
    301e:	f0 e2       	ldi	r31, 0x20	; 32
    3020:	c0 83       	st	Z, r28
    3022:	c1 83       	std	Z+1, r28	; 0x01
    3024:	60 91 26 20 	lds	r22, 0x2026
    3028:	70 91 27 20 	lds	r23, 0x2027
    302c:	80 91 28 20 	lds	r24, 0x2028
    3030:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <gpio_in>
    3034:	60 91 26 20 	lds	r22, 0x2026
    3038:	70 91 27 20 	lds	r23, 0x2027
    303c:	80 91 28 20 	lds	r24, 0x2028
    3040:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gpio_pullup>
    3044:	e4 e8       	ldi	r30, 0x84	; 132
    3046:	f0 e2       	ldi	r31, 0x20	; 32
    3048:	d0 83       	st	Z, r29
    304a:	01 83       	std	Z+1, r16	; 0x01
    304c:	60 91 84 20 	lds	r22, 0x2084
    3050:	70 91 85 20 	lds	r23, 0x2085
    3054:	80 91 86 20 	lds	r24, 0x2086
    3058:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <gpio_in>
    305c:	60 91 84 20 	lds	r22, 0x2084
    3060:	70 91 85 20 	lds	r23, 0x2085
    3064:	80 91 86 20 	lds	r24, 0x2086
    3068:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gpio_pullup>
    306c:	ec ed       	ldi	r30, 0xDC	; 220
    306e:	ff e1       	ldi	r31, 0x1F	; 31
    3070:	d0 83       	st	Z, r29
    3072:	f1 82       	std	Z+1, r15	; 0x01
    3074:	60 91 dc 1f 	lds	r22, 0x1FDC
    3078:	70 91 dd 1f 	lds	r23, 0x1FDD
    307c:	80 91 de 1f 	lds	r24, 0x1FDE
    3080:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <gpio_in>
    3084:	60 91 dc 1f 	lds	r22, 0x1FDC
    3088:	70 91 dd 1f 	lds	r23, 0x1FDD
    308c:	80 91 de 1f 	lds	r24, 0x1FDE
    3090:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gpio_pullup>
    3094:	e3 e3       	ldi	r30, 0x33	; 51
    3096:	f0 e2       	ldi	r31, 0x20	; 32
    3098:	d0 83       	st	Z, r29
    309a:	11 83       	std	Z+1, r17	; 0x01
    309c:	60 91 33 20 	lds	r22, 0x2033
    30a0:	70 91 34 20 	lds	r23, 0x2034
    30a4:	80 91 35 20 	lds	r24, 0x2035
    30a8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <gpio_in>
    30ac:	60 91 33 20 	lds	r22, 0x2033
    30b0:	70 91 34 20 	lds	r23, 0x2034
    30b4:	80 91 35 20 	lds	r24, 0x2035
    30b8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gpio_pullup>
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	ff 90       	pop	r15
    30c6:	ef 90       	pop	r14
    30c8:	08 95       	ret

000030ca <pneOperationMode>:
    30ca:	0f 93       	push	r16
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	80 91 36 20 	lds	r24, 0x2036
    30d4:	82 30       	cpi	r24, 0x02	; 2
    30d6:	09 f4       	brne	.+2      	; 0x30da <pneOperationMode+0x10>
    30d8:	f1 c1       	rjmp	.+994    	; 0x34bc <pneOperationMode+0x3f2>
    30da:	30 f4       	brcc	.+12     	; 0x30e8 <pneOperationMode+0x1e>
    30dc:	88 23       	and	r24, r24
    30de:	09 f4       	brne	.+2      	; 0x30e2 <pneOperationMode+0x18>
    30e0:	6e c0       	rjmp	.+220    	; 0x31be <pneOperationMode+0xf4>
    30e2:	81 30       	cpi	r24, 0x01	; 1
    30e4:	51 f0       	breq	.+20     	; 0x30fa <pneOperationMode+0x30>
    30e6:	34 c3       	rjmp	.+1640   	; 0x3750 <pneOperationMode+0x686>
    30e8:	84 30       	cpi	r24, 0x04	; 4
    30ea:	09 f4       	brne	.+2      	; 0x30ee <pneOperationMode+0x24>
    30ec:	81 c2       	rjmp	.+1282   	; 0x35f0 <pneOperationMode+0x526>
    30ee:	08 f4       	brcc	.+2      	; 0x30f2 <pneOperationMode+0x28>
    30f0:	36 c1       	rjmp	.+620    	; 0x335e <pneOperationMode+0x294>
    30f2:	85 30       	cpi	r24, 0x05	; 5
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <pneOperationMode+0x2e>
    30f6:	3f c2       	rjmp	.+1150   	; 0x3576 <pneOperationMode+0x4ac>
    30f8:	2b c3       	rjmp	.+1622   	; 0x3750 <pneOperationMode+0x686>
    30fa:	10 92 2c 20 	sts	0x202C, r1
    30fe:	c1 e0       	ldi	r28, 0x01	; 1
    3100:	c0 93 08 20 	sts	0x2008, r28
    3104:	60 91 0a 20 	lds	r22, 0x200A
    3108:	70 91 0b 20 	lds	r23, 0x200B
    310c:	80 91 0c 20 	lds	r24, 0x200C
    3110:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    3114:	e0 ee       	ldi	r30, 0xE0	; 224
    3116:	ff e1       	ldi	r31, 0x1F	; 31
    3118:	13 86       	std	Z+11, r1	; 0x0b
    311a:	c3 8b       	std	Z+19, r28	; 0x13
    311c:	85 e0       	ldi	r24, 0x05	; 5
    311e:	82 8b       	std	Z+18, r24	; 0x12
    3120:	c1 8b       	std	Z+17, r28	; 0x11
    3122:	84 ef       	ldi	r24, 0xF4	; 244
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	a0 e0       	ldi	r26, 0x00	; 0
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	80 93 7a 20 	sts	0x207A, r24
    312e:	90 93 7b 20 	sts	0x207B, r25
    3132:	a0 93 7c 20 	sts	0x207C, r26
    3136:	b0 93 7d 20 	sts	0x207D, r27
    313a:	88 ee       	ldi	r24, 0xE8	; 232
    313c:	93 e0       	ldi	r25, 0x03	; 3
    313e:	a0 e0       	ldi	r26, 0x00	; 0
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	80 93 54 20 	sts	0x2054, r24
    3146:	90 93 55 20 	sts	0x2055, r25
    314a:	a0 93 56 20 	sts	0x2056, r26
    314e:	b0 93 57 20 	sts	0x2057, r27
    3152:	80 81       	ld	r24, Z
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	81 f4       	brne	.+32     	; 0x3178 <pneOperationMode+0xae>
    3158:	80 91 73 20 	lds	r24, 0x2073
    315c:	81 11       	cpse	r24, r1
    315e:	0c c0       	rjmp	.+24     	; 0x3178 <pneOperationMode+0xae>
    3160:	60 91 5d 20 	lds	r22, 0x205D
    3164:	70 91 5e 20 	lds	r23, 0x205E
    3168:	80 91 5f 20 	lds	r24, 0x205F
    316c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    3170:	81 11       	cpse	r24, r1
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <pneOperationMode+0xae>
    3174:	10 92 36 20 	sts	0x2036, r1
    3178:	80 91 e8 1f 	lds	r24, 0x1FE8
    317c:	81 30       	cpi	r24, 0x01	; 1
    317e:	21 f0       	breq	.+8      	; 0x3188 <pneOperationMode+0xbe>
    3180:	80 91 e3 1f 	lds	r24, 0x1FE3
    3184:	81 30       	cpi	r24, 0x01	; 1
    3186:	11 f4       	brne	.+4      	; 0x318c <pneOperationMode+0xc2>
    3188:	10 92 36 20 	sts	0x2036, r1
    318c:	80 91 e4 1f 	lds	r24, 0x1FE4
    3190:	81 30       	cpi	r24, 0x01	; 1
    3192:	19 f4       	brne	.+6      	; 0x319a <pneOperationMode+0xd0>
    3194:	85 e0       	ldi	r24, 0x05	; 5
    3196:	80 93 36 20 	sts	0x2036, r24
    319a:	80 91 e9 1f 	lds	r24, 0x1FE9
    319e:	81 30       	cpi	r24, 0x01	; 1
    31a0:	19 f4       	brne	.+6      	; 0x31a8 <pneOperationMode+0xde>
    31a2:	82 e0       	ldi	r24, 0x02	; 2
    31a4:	80 93 36 20 	sts	0x2036, r24
    31a8:	80 91 ea 1f 	lds	r24, 0x1FEA
    31ac:	81 30       	cpi	r24, 0x01	; 1
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <pneOperationMode+0xe8>
    31b0:	cf c2       	rjmp	.+1438   	; 0x3750 <pneOperationMode+0x686>
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	80 93 36 20 	sts	0x2036, r24
    31b8:	10 92 61 20 	sts	0x2061, r1
    31bc:	c9 c2       	rjmp	.+1426   	; 0x3750 <pneOperationMode+0x686>
    31be:	80 91 61 20 	lds	r24, 0x2061
    31c2:	81 30       	cpi	r24, 0x01	; 1
    31c4:	31 f4       	brne	.+12     	; 0x31d2 <pneOperationMode+0x108>
    31c6:	80 91 61 20 	lds	r24, 0x2061
    31ca:	8f 5f       	subi	r24, 0xFF	; 255
    31cc:	80 93 61 20 	sts	0x2061, r24
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <pneOperationMode+0x10c>
    31d2:	10 92 61 20 	sts	0x2061, r1
    31d6:	10 92 2c 20 	sts	0x202C, r1
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	80 93 08 20 	sts	0x2008, r24
    31e0:	e0 ee       	ldi	r30, 0xE0	; 224
    31e2:	ff e1       	ldi	r31, 0x1F	; 31
    31e4:	82 8b       	std	Z+18, r24	; 0x12
    31e6:	8a ef       	ldi	r24, 0xFA	; 250
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	a0 e0       	ldi	r26, 0x00	; 0
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	80 93 7a 20 	sts	0x207A, r24
    31f2:	90 93 7b 20 	sts	0x207B, r25
    31f6:	a0 93 7c 20 	sts	0x207C, r26
    31fa:	b0 93 7d 20 	sts	0x207D, r27
    31fe:	84 ef       	ldi	r24, 0xF4	; 244
    3200:	91 e0       	ldi	r25, 0x01	; 1
    3202:	a0 e0       	ldi	r26, 0x00	; 0
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	80 93 54 20 	sts	0x2054, r24
    320a:	90 93 55 20 	sts	0x2055, r25
    320e:	a0 93 56 20 	sts	0x2056, r26
    3212:	b0 93 57 20 	sts	0x2057, r27
    3216:	80 89       	ldd	r24, Z+16	; 0x10
    3218:	81 30       	cpi	r24, 0x01	; 1
    321a:	21 f0       	breq	.+8      	; 0x3224 <pneOperationMode+0x15a>
    321c:	80 91 f1 1f 	lds	r24, 0x1FF1
    3220:	81 11       	cpse	r24, r1
    3222:	14 c0       	rjmp	.+40     	; 0x324c <pneOperationMode+0x182>
    3224:	60 91 0a 20 	lds	r22, 0x200A
    3228:	70 91 0b 20 	lds	r23, 0x200B
    322c:	80 91 0c 20 	lds	r24, 0x200C
    3230:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    3234:	10 92 eb 1f 	sts	0x1FEB, r1
    3238:	80 91 b3 20 	lds	r24, 0x20B3
    323c:	81 11       	cpse	r24, r1
    323e:	06 c0       	rjmp	.+12     	; 0x324c <pneOperationMode+0x182>
    3240:	87 e0       	ldi	r24, 0x07	; 7
    3242:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	80 93 b3 20 	sts	0x20B3, r24
    324c:	80 91 f0 1f 	lds	r24, 0x1FF0
    3250:	81 11       	cpse	r24, r1
    3252:	0f c0       	rjmp	.+30     	; 0x3272 <pneOperationMode+0x1a8>
    3254:	80 91 f1 1f 	lds	r24, 0x1FF1
    3258:	81 30       	cpi	r24, 0x01	; 1
    325a:	59 f4       	brne	.+22     	; 0x3272 <pneOperationMode+0x1a8>
    325c:	60 91 0a 20 	lds	r22, 0x200A
    3260:	70 91 0b 20 	lds	r23, 0x200B
    3264:	80 91 0c 20 	lds	r24, 0x200C
    3268:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	80 93 eb 1f 	sts	0x1FEB, r24
    3272:	80 91 d6 20 	lds	r24, 0x20D6
    3276:	81 11       	cpse	r24, r1
    3278:	06 c0       	rjmp	.+12     	; 0x3286 <pneOperationMode+0x1bc>
    327a:	84 e0       	ldi	r24, 0x04	; 4
    327c:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	80 93 d6 20 	sts	0x20D6, r24
    3286:	80 91 ea 1f 	lds	r24, 0x1FEA
    328a:	81 30       	cpi	r24, 0x01	; 1
    328c:	29 f4       	brne	.+10     	; 0x3298 <pneOperationMode+0x1ce>
    328e:	83 e0       	ldi	r24, 0x03	; 3
    3290:	80 93 36 20 	sts	0x2036, r24
    3294:	10 92 d6 20 	sts	0x20D6, r1
    3298:	80 91 ff 1f 	lds	r24, 0x1FFF
    329c:	81 11       	cpse	r24, r1
    329e:	16 c0       	rjmp	.+44     	; 0x32cc <pneOperationMode+0x202>
    32a0:	80 91 e0 1f 	lds	r24, 0x1FE0
    32a4:	81 11       	cpse	r24, r1
    32a6:	2a c0       	rjmp	.+84     	; 0x32fc <pneOperationMode+0x232>
    32a8:	80 91 e8 1f 	lds	r24, 0x1FE8
    32ac:	81 11       	cpse	r24, r1
    32ae:	26 c0       	rjmp	.+76     	; 0x32fc <pneOperationMode+0x232>
    32b0:	80 91 e3 1f 	lds	r24, 0x1FE3
    32b4:	81 11       	cpse	r24, r1
    32b6:	22 c0       	rjmp	.+68     	; 0x32fc <pneOperationMode+0x232>
    32b8:	85 e0       	ldi	r24, 0x05	; 5
    32ba:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    32be:	10 92 d6 20 	sts	0x20D6, r1
    32c2:	10 92 b3 20 	sts	0x20B3, r1
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	80 93 36 20 	sts	0x2036, r24
    32cc:	80 91 ff 1f 	lds	r24, 0x1FFF
    32d0:	81 30       	cpi	r24, 0x01	; 1
    32d2:	a1 f4       	brne	.+40     	; 0x32fc <pneOperationMode+0x232>
    32d4:	80 91 e8 1f 	lds	r24, 0x1FE8
    32d8:	81 30       	cpi	r24, 0x01	; 1
    32da:	81 f4       	brne	.+32     	; 0x32fc <pneOperationMode+0x232>
    32dc:	60 91 5d 20 	lds	r22, 0x205D
    32e0:	70 91 5e 20 	lds	r23, 0x205E
    32e4:	80 91 5f 20 	lds	r24, 0x205F
    32e8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    32ec:	e0 ee       	ldi	r30, 0xE0	; 224
    32ee:	ff e1       	ldi	r31, 0x1F	; 31
    32f0:	10 86       	std	Z+8, r1	; 0x08
    32f2:	13 82       	std	Z+3, r1	; 0x03
    32f4:	81 85       	ldd	r24, Z+9	; 0x09
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	69 f5       	brne	.+90     	; 0x3354 <pneOperationMode+0x28a>
    32fa:	04 c0       	rjmp	.+8      	; 0x3304 <pneOperationMode+0x23a>
    32fc:	80 91 e9 1f 	lds	r24, 0x1FE9
    3300:	81 30       	cpi	r24, 0x01	; 1
    3302:	11 f4       	brne	.+4      	; 0x3308 <pneOperationMode+0x23e>
    3304:	10 92 e9 1f 	sts	0x1FE9, r1
    3308:	80 91 e3 1f 	lds	r24, 0x1FE3
    330c:	81 30       	cpi	r24, 0x01	; 1
    330e:	11 f5       	brne	.+68     	; 0x3354 <pneOperationMode+0x28a>
    3310:	80 91 e4 1f 	lds	r24, 0x1FE4
    3314:	81 30       	cpi	r24, 0x01	; 1
    3316:	f1 f4       	brne	.+60     	; 0x3354 <pneOperationMode+0x28a>
    3318:	80 91 47 20 	lds	r24, 0x2047
    331c:	90 91 48 20 	lds	r25, 0x2048
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	90 93 48 20 	sts	0x2048, r25
    3326:	80 93 47 20 	sts	0x2047, r24
    332a:	89 3e       	cpi	r24, 0xE9	; 233
    332c:	9d 4f       	sbci	r25, 0xFD	; 253
    332e:	08 f4       	brcc	.+2      	; 0x3332 <pneOperationMode+0x268>
    3330:	0f c2       	rjmp	.+1054   	; 0x3750 <pneOperationMode+0x686>
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	90 e1       	ldi	r25, 0x10	; 16
    3336:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <readE2prom>
    333a:	08 2f       	mov	r16, r24
    333c:	03 60       	ori	r16, 0x03	; 3
    333e:	00 93 df 1f 	sts	0x1FDF, r16
    3342:	20 e1       	ldi	r18, 0x10	; 16
    3344:	42 e0       	ldi	r20, 0x02	; 2
    3346:	65 e4       	ldi	r22, 0x45	; 69
    3348:	8e ea       	ldi	r24, 0xAE	; 174
    334a:	0e 94 52 22 	call	0x44a4	; 0x44a4 <PNEWELSE2promWrite>
    334e:	0e 94 8e 33 	call	0x671c	; 0x671c <reboot_to_rf>
    3352:	fe c1       	rjmp	.+1020   	; 0x3750 <pneOperationMode+0x686>
    3354:	10 92 48 20 	sts	0x2048, r1
    3358:	10 92 47 20 	sts	0x2047, r1
    335c:	f9 c1       	rjmp	.+1010   	; 0x3750 <pneOperationMode+0x686>
    335e:	c0 ee       	ldi	r28, 0xE0	; 224
    3360:	df e1       	ldi	r29, 0x1F	; 31
    3362:	83 e0       	ldi	r24, 0x03	; 3
    3364:	8a 8b       	std	Y+18, r24	; 0x12
    3366:	60 91 0a 20 	lds	r22, 0x200A
    336a:	70 91 0b 20 	lds	r23, 0x200B
    336e:	80 91 0c 20 	lds	r24, 0x200C
    3372:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	8b 87       	std	Y+11, r24	; 0x0b
    337a:	10 92 2c 20 	sts	0x202C, r1
    337e:	80 93 08 20 	sts	0x2008, r24
    3382:	80 91 d6 20 	lds	r24, 0x20D6
    3386:	81 11       	cpse	r24, r1
    3388:	11 c0       	rjmp	.+34     	; 0x33ac <pneOperationMode+0x2e2>
    338a:	82 e0       	ldi	r24, 0x02	; 2
    338c:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	80 93 d6 20 	sts	0x20D6, r24
    3396:	84 e6       	ldi	r24, 0x64	; 100
    3398:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <pend_to_rf>
    339c:	60 91 5d 20 	lds	r22, 0x205D
    33a0:	70 91 5e 20 	lds	r23, 0x205E
    33a4:	80 91 5f 20 	lds	r24, 0x205F
    33a8:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
    33ac:	80 91 ff 1f 	lds	r24, 0x1FFF
    33b0:	81 30       	cpi	r24, 0x01	; 1
    33b2:	49 f5       	brne	.+82     	; 0x3406 <pneOperationMode+0x33c>
    33b4:	83 e0       	ldi	r24, 0x03	; 3
    33b6:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    33ba:	62 e0       	ldi	r22, 0x02	; 2
    33bc:	81 e6       	ldi	r24, 0x61	; 97
    33be:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <test_completed>
    33c2:	10 92 d6 20 	sts	0x20D6, r1
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	80 93 61 20 	sts	0x2061, r24
    33cc:	10 92 36 20 	sts	0x2036, r1
    33d0:	c0 ee       	ldi	r28, 0xE0	; 224
    33d2:	df e1       	ldi	r29, 0x1F	; 31
    33d4:	1a 86       	std	Y+10, r1	; 0x0a
    33d6:	60 91 5d 20 	lds	r22, 0x205D
    33da:	70 91 5e 20 	lds	r23, 0x205E
    33de:	80 91 5f 20 	lds	r24, 0x205F
    33e2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    33e6:	1b 86       	std	Y+11, r1	; 0x0b
    33e8:	60 91 c3 20 	lds	r22, 0x20C3
    33ec:	70 91 c4 20 	lds	r23, 0x20C4
    33f0:	80 91 c5 20 	lds	r24, 0x20C5
    33f4:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    33f8:	91 e0       	ldi	r25, 0x01	; 1
    33fa:	81 11       	cpse	r24, r1
    33fc:	01 c0       	rjmp	.+2      	; 0x3400 <pneOperationMode+0x336>
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	90 93 e0 1f 	sts	0x1FE0, r25
    3404:	a5 c1       	rjmp	.+842    	; 0x3750 <pneOperationMode+0x686>
    3406:	80 91 f0 1f 	lds	r24, 0x1FF0
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	49 f5       	brne	.+82     	; 0x3460 <pneOperationMode+0x396>
    340e:	83 e0       	ldi	r24, 0x03	; 3
    3410:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    3414:	62 e0       	ldi	r22, 0x02	; 2
    3416:	8e e6       	ldi	r24, 0x6E	; 110
    3418:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <test_completed>
    341c:	10 92 d6 20 	sts	0x20D6, r1
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	80 93 61 20 	sts	0x2061, r24
    3426:	80 93 36 20 	sts	0x2036, r24
    342a:	c0 ee       	ldi	r28, 0xE0	; 224
    342c:	df e1       	ldi	r29, 0x1F	; 31
    342e:	1a 86       	std	Y+10, r1	; 0x0a
    3430:	60 91 5d 20 	lds	r22, 0x205D
    3434:	70 91 5e 20 	lds	r23, 0x205E
    3438:	80 91 5f 20 	lds	r24, 0x205F
    343c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    3440:	1b 86       	std	Y+11, r1	; 0x0b
    3442:	60 91 c3 20 	lds	r22, 0x20C3
    3446:	70 91 c4 20 	lds	r23, 0x20C4
    344a:	80 91 c5 20 	lds	r24, 0x20C5
    344e:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    3452:	91 e0       	ldi	r25, 0x01	; 1
    3454:	81 11       	cpse	r24, r1
    3456:	01 c0       	rjmp	.+2      	; 0x345a <pneOperationMode+0x390>
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	90 93 e0 1f 	sts	0x1FE0, r25
    345e:	78 c1       	rjmp	.+752    	; 0x3750 <pneOperationMode+0x686>
    3460:	80 91 ea 1f 	lds	r24, 0x1FEA
    3464:	81 30       	cpi	r24, 0x01	; 1
    3466:	09 f4       	brne	.+2      	; 0x346a <pneOperationMode+0x3a0>
    3468:	73 c1       	rjmp	.+742    	; 0x3750 <pneOperationMode+0x686>
    346a:	83 e0       	ldi	r24, 0x03	; 3
    346c:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    3470:	62 e0       	ldi	r22, 0x02	; 2
    3472:	83 e7       	ldi	r24, 0x73	; 115
    3474:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <test_completed>
    3478:	10 92 d6 20 	sts	0x20D6, r1
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	80 93 61 20 	sts	0x2061, r24
    3482:	80 93 36 20 	sts	0x2036, r24
    3486:	c0 ee       	ldi	r28, 0xE0	; 224
    3488:	df e1       	ldi	r29, 0x1F	; 31
    348a:	1a 86       	std	Y+10, r1	; 0x0a
    348c:	60 91 5d 20 	lds	r22, 0x205D
    3490:	70 91 5e 20 	lds	r23, 0x205E
    3494:	80 91 5f 20 	lds	r24, 0x205F
    3498:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
    349c:	1b 86       	std	Y+11, r1	; 0x0b
    349e:	60 91 c3 20 	lds	r22, 0x20C3
    34a2:	70 91 c4 20 	lds	r23, 0x20C4
    34a6:	80 91 c5 20 	lds	r24, 0x20C5
    34aa:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    34ae:	91 e0       	ldi	r25, 0x01	; 1
    34b0:	81 11       	cpse	r24, r1
    34b2:	01 c0       	rjmp	.+2      	; 0x34b6 <pneOperationMode+0x3ec>
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	90 93 e0 1f 	sts	0x1FE0, r25
    34ba:	4a c1       	rjmp	.+660    	; 0x3750 <pneOperationMode+0x686>
    34bc:	e0 ee       	ldi	r30, 0xE0	; 224
    34be:	ff e1       	ldi	r31, 0x1F	; 31
    34c0:	84 e0       	ldi	r24, 0x04	; 4
    34c2:	82 8b       	std	Z+18, r24	; 0x12
    34c4:	10 92 2c 20 	sts	0x202C, r1
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	80 93 08 20 	sts	0x2008, r24
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	83 8b       	std	Z+19, r24	; 0x13
    34d2:	80 91 d6 20 	lds	r24, 0x20D6
    34d6:	81 11       	cpse	r24, r1
    34d8:	08 c0       	rjmp	.+16     	; 0x34ea <pneOperationMode+0x420>
    34da:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	80 93 d6 20 	sts	0x20D6, r24
    34e4:	83 e6       	ldi	r24, 0x63	; 99
    34e6:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <pend_to_rf>
    34ea:	80 91 e0 1f 	lds	r24, 0x1FE0
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	a9 f4       	brne	.+42     	; 0x351c <pneOperationMode+0x452>
    34f2:	80 91 73 20 	lds	r24, 0x2073
    34f6:	81 11       	cpse	r24, r1
    34f8:	11 c0       	rjmp	.+34     	; 0x351c <pneOperationMode+0x452>
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    3500:	62 e0       	ldi	r22, 0x02	; 2
    3502:	81 e6       	ldi	r24, 0x61	; 97
    3504:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <test_completed>
    3508:	10 92 d6 20 	sts	0x20D6, r1
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	80 93 61 20 	sts	0x2061, r24
    3512:	80 93 36 20 	sts	0x2036, r24
    3516:	10 92 e9 1f 	sts	0x1FE9, r1
    351a:	1a c1       	rjmp	.+564    	; 0x3750 <pneOperationMode+0x686>
    351c:	80 91 da 1f 	lds	r24, 0x1FDA
    3520:	90 91 e1 1f 	lds	r25, 0x1FE1
    3524:	98 17       	cp	r25, r24
    3526:	88 f0       	brcs	.+34     	; 0x354a <pneOperationMode+0x480>
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    352e:	62 e0       	ldi	r22, 0x02	; 2
    3530:	8e e6       	ldi	r24, 0x6E	; 110
    3532:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <test_completed>
    3536:	10 92 d6 20 	sts	0x20D6, r1
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	80 93 61 20 	sts	0x2061, r24
    3540:	80 93 36 20 	sts	0x2036, r24
    3544:	10 92 e9 1f 	sts	0x1FE9, r1
    3548:	03 c1       	rjmp	.+518    	; 0x3750 <pneOperationMode+0x686>
    354a:	80 91 e9 1f 	lds	r24, 0x1FE9
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	09 f4       	brne	.+2      	; 0x3554 <pneOperationMode+0x48a>
    3552:	fe c0       	rjmp	.+508    	; 0x3750 <pneOperationMode+0x686>
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	0e 94 0d 23 	call	0x461a	; 0x461a <store>
    355a:	62 e0       	ldi	r22, 0x02	; 2
    355c:	83 e7       	ldi	r24, 0x73	; 115
    355e:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <test_completed>
    3562:	10 92 d6 20 	sts	0x20D6, r1
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	80 93 61 20 	sts	0x2061, r24
    356c:	80 93 36 20 	sts	0x2036, r24
    3570:	10 92 e9 1f 	sts	0x1FE9, r1
    3574:	ed c0       	rjmp	.+474    	; 0x3750 <pneOperationMode+0x686>
    3576:	80 91 2c 20 	lds	r24, 0x202C
    357a:	81 11       	cpse	r24, r1
    357c:	08 c0       	rjmp	.+16     	; 0x358e <pneOperationMode+0x4c4>
    357e:	85 eb       	ldi	r24, 0xB5	; 181
    3580:	90 e2       	ldi	r25, 0x20	; 32
    3582:	29 db       	rcall	.-2478   	; 0x2bd6 <SYS_TimerStart>
    3584:	80 91 2c 20 	lds	r24, 0x202C
    3588:	8f 5f       	subi	r24, 0xFF	; 255
    358a:	80 93 2c 20 	sts	0x202C, r24
    358e:	80 91 46 20 	lds	r24, 0x2046
    3592:	89 30       	cpi	r24, 0x09	; 9
    3594:	80 f0       	brcs	.+32     	; 0x35b6 <pneOperationMode+0x4ec>
    3596:	60 91 1a 20 	lds	r22, 0x201A
    359a:	70 91 1b 20 	lds	r23, 0x201B
    359e:	80 91 1c 20 	lds	r24, 0x201C
    35a2:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    35a6:	91 e0       	ldi	r25, 0x01	; 1
    35a8:	81 11       	cpse	r24, r1
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	90 93 e4 1f 	sts	0x1FE4, r25
    35b0:	10 92 46 20 	sts	0x2046, r1
    35b4:	03 c0       	rjmp	.+6      	; 0x35bc <pneOperationMode+0x4f2>
    35b6:	8f 5f       	subi	r24, 0xFF	; 255
    35b8:	80 93 46 20 	sts	0x2046, r24
    35bc:	80 91 e4 1f 	lds	r24, 0x1FE4
    35c0:	81 11       	cpse	r24, r1
    35c2:	08 c0       	rjmp	.+16     	; 0x35d4 <pneOperationMode+0x50a>
    35c4:	85 eb       	ldi	r24, 0xB5	; 181
    35c6:	90 e2       	ldi	r25, 0x20	; 32
    35c8:	af da       	rcall	.-2722   	; 0x2b28 <SYS_TimerStop>
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	80 93 36 20 	sts	0x2036, r24
    35d0:	10 92 2c 20 	sts	0x202C, r1
    35d4:	80 91 e0 1f 	lds	r24, 0x1FE0
    35d8:	81 30       	cpi	r24, 0x01	; 1
    35da:	09 f0       	breq	.+2      	; 0x35de <pneOperationMode+0x514>
    35dc:	b9 c0       	rjmp	.+370    	; 0x3750 <pneOperationMode+0x686>
    35de:	80 91 73 20 	lds	r24, 0x2073
    35e2:	81 11       	cpse	r24, r1
    35e4:	b5 c0       	rjmp	.+362    	; 0x3750 <pneOperationMode+0x686>
    35e6:	10 92 36 20 	sts	0x2036, r1
    35ea:	10 92 2c 20 	sts	0x202C, r1
    35ee:	b0 c0       	rjmp	.+352    	; 0x3750 <pneOperationMode+0x686>
    35f0:	8d e7       	ldi	r24, 0x7D	; 125
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	a0 e0       	ldi	r26, 0x00	; 0
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	80 93 7a 20 	sts	0x207A, r24
    35fc:	90 93 7b 20 	sts	0x207B, r25
    3600:	a0 93 7c 20 	sts	0x207C, r26
    3604:	b0 93 7d 20 	sts	0x207D, r27
    3608:	8a ef       	ldi	r24, 0xFA	; 250
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a0 e0       	ldi	r26, 0x00	; 0
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	80 93 54 20 	sts	0x2054, r24
    3614:	90 93 55 20 	sts	0x2055, r25
    3618:	a0 93 56 20 	sts	0x2056, r26
    361c:	b0 93 57 20 	sts	0x2057, r27
    3620:	10 92 08 20 	sts	0x2008, r1
    3624:	82 e0       	ldi	r24, 0x02	; 2
    3626:	80 93 f2 1f 	sts	0x1FF2, r24
    362a:	80 91 c2 20 	lds	r24, 0x20C2
    362e:	81 30       	cpi	r24, 0x01	; 1
    3630:	31 f0       	breq	.+12     	; 0x363e <pneOperationMode+0x574>
    3632:	c0 f1       	brcs	.+112    	; 0x36a4 <pneOperationMode+0x5da>
    3634:	82 30       	cpi	r24, 0x02	; 2
    3636:	51 f0       	breq	.+20     	; 0x364c <pneOperationMode+0x582>
    3638:	83 30       	cpi	r24, 0x03	; 3
    363a:	89 f0       	breq	.+34     	; 0x365e <pneOperationMode+0x594>
    363c:	30 c0       	rjmp	.+96     	; 0x369e <pneOperationMode+0x5d4>
    363e:	86 ec       	ldi	r24, 0xC6	; 198
    3640:	90 e2       	ldi	r25, 0x20	; 32
    3642:	72 da       	rcall	.-2844   	; 0x2b28 <SYS_TimerStop>
    3644:	82 e0       	ldi	r24, 0x02	; 2
    3646:	80 93 c2 20 	sts	0x20C2, r24
    364a:	2c c0       	rjmp	.+88     	; 0x36a4 <pneOperationMode+0x5da>
    364c:	60 e1       	ldi	r22, 0x10	; 16
    364e:	8e e5       	ldi	r24, 0x5E	; 94
    3650:	9f e1       	ldi	r25, 0x1F	; 31
    3652:	0e 94 34 37 	call	0x6e68	; 0x6e68 <WPS_OK_Alert>
    3656:	83 e0       	ldi	r24, 0x03	; 3
    3658:	80 93 c2 20 	sts	0x20C2, r24
    365c:	23 c0       	rjmp	.+70     	; 0x36a4 <pneOperationMode+0x5da>
    365e:	80 91 30 20 	lds	r24, 0x2030
    3662:	90 91 31 20 	lds	r25, 0x2031
    3666:	81 35       	cpi	r24, 0x51	; 81
    3668:	23 ec       	ldi	r18, 0xC3	; 195
    366a:	92 07       	cpc	r25, r18
    366c:	90 f0       	brcs	.+36     	; 0x3692 <pneOperationMode+0x5c8>
    366e:	80 91 dc 20 	lds	r24, 0x20DC
    3672:	81 ff       	sbrs	r24, 1
    3674:	0b c0       	rjmp	.+22     	; 0x368c <pneOperationMode+0x5c2>
    3676:	80 91 dc 20 	lds	r24, 0x20DC
    367a:	8d 7f       	andi	r24, 0xFD	; 253
    367c:	80 93 dc 20 	sts	0x20DC, r24
    3680:	60 91 dc 20 	lds	r22, 0x20DC
    3684:	82 e0       	ldi	r24, 0x02	; 2
    3686:	90 e1       	ldi	r25, 0x10	; 16
    3688:	0e 94 50 31 	call	0x62a0	; 0x62a0 <writeE2prom>
    368c:	0e 94 8e 33 	call	0x671c	; 0x671c <reboot_to_rf>
    3690:	09 c0       	rjmp	.+18     	; 0x36a4 <pneOperationMode+0x5da>
    3692:	01 96       	adiw	r24, 0x01	; 1
    3694:	90 93 31 20 	sts	0x2031, r25
    3698:	80 93 30 20 	sts	0x2030, r24
    369c:	03 c0       	rjmp	.+6      	; 0x36a4 <pneOperationMode+0x5da>
    369e:	88 e0       	ldi	r24, 0x08	; 8
    36a0:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    36a4:	80 91 46 20 	lds	r24, 0x2046
    36a8:	89 30       	cpi	r24, 0x09	; 9
    36aa:	f0 f0       	brcs	.+60     	; 0x36e8 <pneOperationMode+0x61e>
    36ac:	60 91 1a 20 	lds	r22, 0x201A
    36b0:	70 91 1b 20 	lds	r23, 0x201B
    36b4:	80 91 1c 20 	lds	r24, 0x201C
    36b8:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    36bc:	91 e0       	ldi	r25, 0x01	; 1
    36be:	81 11       	cpse	r24, r1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	90 93 e4 1f 	sts	0x1FE4, r25
    36c6:	60 91 c3 20 	lds	r22, 0x20C3
    36ca:	70 91 c4 20 	lds	r23, 0x20C4
    36ce:	80 91 c5 20 	lds	r24, 0x20C5
    36d2:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    36d6:	91 e0       	ldi	r25, 0x01	; 1
    36d8:	81 11       	cpse	r24, r1
    36da:	01 c0       	rjmp	.+2      	; 0x36de <pneOperationMode+0x614>
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	90 93 e0 1f 	sts	0x1FE0, r25
    36e2:	10 92 46 20 	sts	0x2046, r1
    36e6:	03 c0       	rjmp	.+6      	; 0x36ee <pneOperationMode+0x624>
    36e8:	8f 5f       	subi	r24, 0xFF	; 255
    36ea:	80 93 46 20 	sts	0x2046, r24
    36ee:	80 91 e4 1f 	lds	r24, 0x1FE4
    36f2:	81 30       	cpi	r24, 0x01	; 1
    36f4:	51 f4       	brne	.+20     	; 0x370a <pneOperationMode+0x640>
    36f6:	80 91 2c 20 	lds	r24, 0x202C
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	91 f4       	brne	.+36     	; 0x3722 <pneOperationMode+0x658>
    36fe:	85 eb       	ldi	r24, 0xB5	; 181
    3700:	90 e2       	ldi	r25, 0x20	; 32
    3702:	69 da       	rcall	.-2862   	; 0x2bd6 <SYS_TimerStart>
    3704:	10 92 2c 20 	sts	0x202C, r1
    3708:	0c c0       	rjmp	.+24     	; 0x3722 <pneOperationMode+0x658>
    370a:	81 11       	cpse	r24, r1
    370c:	0a c0       	rjmp	.+20     	; 0x3722 <pneOperationMode+0x658>
    370e:	80 91 2c 20 	lds	r24, 0x202C
    3712:	81 11       	cpse	r24, r1
    3714:	03 c0       	rjmp	.+6      	; 0x371c <pneOperationMode+0x652>
    3716:	85 eb       	ldi	r24, 0xB5	; 181
    3718:	90 e2       	ldi	r25, 0x20	; 32
    371a:	06 da       	rcall	.-3060   	; 0x2b28 <SYS_TimerStop>
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	80 93 2c 20 	sts	0x202C, r24
    3722:	80 91 e0 1f 	lds	r24, 0x1FE0
    3726:	81 30       	cpi	r24, 0x01	; 1
    3728:	99 f4       	brne	.+38     	; 0x3750 <pneOperationMode+0x686>
    372a:	80 91 73 20 	lds	r24, 0x2073
    372e:	81 11       	cpse	r24, r1
    3730:	0f c0       	rjmp	.+30     	; 0x3750 <pneOperationMode+0x686>
    3732:	10 92 c2 20 	sts	0x20C2, r1
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	80 93 36 20 	sts	0x2036, r24
    373c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <APP_IbLoadSettings>
    3740:	0e 94 0c 03 	call	0x618	; 0x618 <APP_NwkInit>
    3744:	8d e0       	ldi	r24, 0x0D	; 13
    3746:	90 e2       	ldi	r25, 0x20	; 32
    3748:	ef d9       	rcall	.-3106   	; 0x2b28 <SYS_TimerStop>
    374a:	86 ec       	ldi	r24, 0xC6	; 198
    374c:	90 e2       	ldi	r25, 0x20	; 32
    374e:	ec d9       	rcall	.-3112   	; 0x2b28 <SYS_TimerStop>
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	0f 91       	pop	r16
    3756:	08 95       	ret

00003758 <pneOutgoingData>:
    3758:	80 91 6f 20 	lds	r24, 0x206F
    375c:	88 23       	and	r24, r24
    375e:	71 f0       	breq	.+28     	; 0x377c <pneOutgoingData+0x24>
    3760:	80 91 61 20 	lds	r24, 0x2061
    3764:	88 23       	and	r24, r24
    3766:	19 f0       	breq	.+6      	; 0x376e <pneOutgoingData+0x16>
    3768:	10 92 61 20 	sts	0x2061, r1
    376c:	02 c0       	rjmp	.+4      	; 0x3772 <pneOutgoingData+0x1a>
    376e:	0e 94 57 34 	call	0x68ae	; 0x68ae <status_send_to_rf>
    3772:	88 e3       	ldi	r24, 0x38	; 56
    3774:	90 e2       	ldi	r25, 0x20	; 32
    3776:	2f da       	rcall	.-2978   	; 0x2bd6 <SYS_TimerStart>
    3778:	10 92 6f 20 	sts	0x206F, r1
    377c:	08 95       	ret

0000377e <manual_btn_handler>:
    377e:	80 91 ea 1f 	lds	r24, 0x1FEA
    3782:	81 11       	cpse	r24, r1
    3784:	19 c0       	rjmp	.+50     	; 0x37b8 <manual_btn_handler+0x3a>
    3786:	80 91 e8 1f 	lds	r24, 0x1FE8
    378a:	81 30       	cpi	r24, 0x01	; 1
    378c:	21 f0       	breq	.+8      	; 0x3796 <manual_btn_handler+0x18>
    378e:	80 91 e3 1f 	lds	r24, 0x1FE3
    3792:	81 30       	cpi	r24, 0x01	; 1
    3794:	49 f4       	brne	.+18     	; 0x37a8 <manual_btn_handler+0x2a>
    3796:	60 91 5d 20 	lds	r22, 0x205D
    379a:	70 91 5e 20 	lds	r23, 0x205E
    379e:	80 91 5f 20 	lds	r24, 0x205F
    37a2:	0c 94 97 09 	jmp	0x132e	; 0x132e <gpio_set>
    37a6:	08 95       	ret
    37a8:	60 91 5d 20 	lds	r22, 0x205D
    37ac:	70 91 5e 20 	lds	r23, 0x205E
    37b0:	80 91 5f 20 	lds	r24, 0x205F
    37b4:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <gpio_clr>
    37b8:	08 95       	ret

000037ba <manual_btn_isr>:
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	80 93 e1 20 	sts	0x20E1, r24
    37c0:	de cf       	rjmp	.-68     	; 0x377e <manual_btn_handler>
    37c2:	08 95       	ret

000037c4 <pneGetStatus>:
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	80 91 09 20 	lds	r24, 0x2009
    37cc:	88 23       	and	r24, r24
    37ce:	09 f4       	brne	.+2      	; 0x37d2 <pneGetStatus+0xe>
    37d0:	60 c0       	rjmp	.+192    	; 0x3892 <pneGetStatus+0xce>
    37d2:	0e 94 56 38 	call	0x70ac	; 0x70ac <pneBatteryAverage>
    37d6:	c0 ee       	ldi	r28, 0xE0	; 224
    37d8:	df e1       	ldi	r29, 0x1F	; 31
    37da:	89 83       	std	Y+1, r24	; 0x01
    37dc:	ba d6       	rcall	.+3444   	; 0x4552 <PNEWELSTemperatureRead>
    37de:	8e 83       	std	Y+6, r24	; 0x06
    37e0:	80 ef       	ldi	r24, 0xF0	; 240
    37e2:	8f 87       	std	Y+15, r24	; 0x0f
    37e4:	10 92 09 20 	sts	0x2009, r1
    37e8:	eb e7       	ldi	r30, 0x7B	; 123
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
    37ee:	87 7f       	andi	r24, 0xF7	; 247
    37f0:	80 83       	st	Z, r24
    37f2:	81 e6       	ldi	r24, 0x61	; 97
    37f4:	80 93 7c 00 	sts	0x007C, r24
    37f8:	ea e7       	ldi	r30, 0x7A	; 122
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	80 81       	ld	r24, Z
    37fe:	80 64       	ori	r24, 0x40	; 64
    3800:	80 83       	st	Z, r24
    3802:	80 81       	ld	r24, Z
    3804:	86 fd       	sbrc	r24, 6
    3806:	fd cf       	rjmp	.-6      	; 0x3802 <pneGetStatus+0x3e>
    3808:	80 91 79 00 	lds	r24, 0x0079
    380c:	24 e2       	ldi	r18, 0x24	; 36
    380e:	82 9f       	mul	r24, r18
    3810:	c0 01       	movw	r24, r0
    3812:	11 24       	eor	r1, r1
    3814:	6f ef       	ldi	r22, 0xFF	; 255
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__divmodhi4>
    381c:	60 93 e2 1f 	sts	0x1FE2, r22
    3820:	60 91 d8 20 	lds	r22, 0x20D8
    3824:	70 91 d9 20 	lds	r23, 0x20D9
    3828:	80 91 da 20 	lds	r24, 0x20DA
    382c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    3830:	91 e0       	ldi	r25, 0x01	; 1
    3832:	81 11       	cpse	r24, r1
    3834:	01 c0       	rjmp	.+2      	; 0x3838 <pneGetStatus+0x74>
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	90 93 ff 1f 	sts	0x1FFF, r25
    383c:	20 91 e1 1f 	lds	r18, 0x1FE1
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	80 91 d7 20 	lds	r24, 0x20D7
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	0a 97       	sbiw	r24, 0x0a	; 10
    384a:	28 17       	cp	r18, r24
    384c:	39 07       	cpc	r19, r25
    384e:	34 f4       	brge	.+12     	; 0x385c <pneGetStatus+0x98>
    3850:	e0 ee       	ldi	r30, 0xE0	; 224
    3852:	ff e1       	ldi	r31, 0x1F	; 31
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	80 8b       	std	Z+16, r24	; 0x10
    3858:	11 8a       	std	Z+17, r1	; 0x11
    385a:	0d c0       	rjmp	.+26     	; 0x3876 <pneGetStatus+0xb2>
    385c:	80 91 d7 20 	lds	r24, 0x20D7
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0a 96       	adiw	r24, 0x0a	; 10
    3864:	28 17       	cp	r18, r24
    3866:	39 07       	cpc	r19, r25
    3868:	1c f0       	brlt	.+6      	; 0x3870 <pneGetStatus+0xac>
    386a:	10 92 f0 1f 	sts	0x1FF0, r1
    386e:	03 c0       	rjmp	.+6      	; 0x3876 <pneGetStatus+0xb2>
    3870:	82 e0       	ldi	r24, 0x02	; 2
    3872:	80 93 f0 1f 	sts	0x1FF0, r24
    3876:	80 91 e6 1f 	lds	r24, 0x1FE6
    387a:	8d 33       	cpi	r24, 0x3D	; 61
    387c:	18 f0       	brcs	.+6      	; 0x3884 <pneGetStatus+0xc0>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3884:	80 91 e1 1f 	lds	r24, 0x1FE1
    3888:	85 36       	cpi	r24, 0x65	; 101
    388a:	18 f4       	brcc	.+6      	; 0x3892 <pneGetStatus+0xce>
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3892:	80 91 49 20 	lds	r24, 0x2049
    3896:	81 30       	cpi	r24, 0x01	; 1
    3898:	29 f0       	breq	.+10     	; 0x38a4 <pneGetStatus+0xe0>
    389a:	80 91 e1 20 	lds	r24, 0x20E1
    389e:	81 30       	cpi	r24, 0x01	; 1
    38a0:	09 f0       	breq	.+2      	; 0x38a4 <pneGetStatus+0xe0>
    38a2:	b4 c0       	rjmp	.+360    	; 0x3a0c <pneGetStatus+0x248>
    38a4:	80 91 46 20 	lds	r24, 0x2046
    38a8:	89 30       	cpi	r24, 0x09	; 9
    38aa:	08 f4       	brcc	.+2      	; 0x38ae <pneGetStatus+0xea>
    38ac:	ac c0       	rjmp	.+344    	; 0x3a06 <pneGetStatus+0x242>
    38ae:	60 91 81 20 	lds	r22, 0x2081
    38b2:	70 91 82 20 	lds	r23, 0x2082
    38b6:	80 91 83 20 	lds	r24, 0x2083
    38ba:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    38be:	91 e0       	ldi	r25, 0x01	; 1
    38c0:	81 11       	cpse	r24, r1
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	90 93 e3 1f 	sts	0x1FE3, r25
    38c8:	5a df       	rcall	.-332    	; 0x377e <manual_btn_handler>
    38ca:	60 91 1a 20 	lds	r22, 0x201A
    38ce:	70 91 1b 20 	lds	r23, 0x201B
    38d2:	80 91 1c 20 	lds	r24, 0x201C
    38d6:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    38da:	91 e0       	ldi	r25, 0x01	; 1
    38dc:	81 11       	cpse	r24, r1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	90 93 e4 1f 	sts	0x1FE4, r25
    38e4:	60 91 1d 20 	lds	r22, 0x201D
    38e8:	70 91 1e 20 	lds	r23, 0x201E
    38ec:	80 91 1f 20 	lds	r24, 0x201F
    38f0:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	81 11       	cpse	r24, r1
    38f8:	01 c0       	rjmp	.+2      	; 0x38fc <pneGetStatus+0x138>
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	90 93 e5 1f 	sts	0x1FE5, r25
    3900:	60 91 c3 20 	lds	r22, 0x20C3
    3904:	70 91 c4 20 	lds	r23, 0x20C4
    3908:	80 91 c5 20 	lds	r24, 0x20C5
    390c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    3910:	91 e0       	ldi	r25, 0x01	; 1
    3912:	81 11       	cpse	r24, r1
    3914:	01 c0       	rjmp	.+2      	; 0x3918 <pneGetStatus+0x154>
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	90 93 e0 1f 	sts	0x1FE0, r25
    391c:	60 91 d8 20 	lds	r22, 0x20D8
    3920:	70 91 d9 20 	lds	r23, 0x20D9
    3924:	80 91 da 20 	lds	r24, 0x20DA
    3928:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    392c:	91 e0       	ldi	r25, 0x01	; 1
    392e:	81 11       	cpse	r24, r1
    3930:	01 c0       	rjmp	.+2      	; 0x3934 <pneGetStatus+0x170>
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	90 93 ff 1f 	sts	0x1FFF, r25
    3938:	60 91 d3 20 	lds	r22, 0x20D3
    393c:	70 91 d4 20 	lds	r23, 0x20D4
    3940:	80 91 d5 20 	lds	r24, 0x20D5
    3944:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    3948:	91 e0       	ldi	r25, 0x01	; 1
    394a:	81 11       	cpse	r24, r1
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	90 93 00 20 	sts	0x2000, r25
    3952:	60 91 26 20 	lds	r22, 0x2026
    3956:	70 91 27 20 	lds	r23, 0x2027
    395a:	80 91 28 20 	lds	r24, 0x2028
    395e:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    3962:	91 e0       	ldi	r25, 0x01	; 1
    3964:	81 11       	cpse	r24, r1
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	90 93 01 20 	sts	0x2001, r25
    396c:	60 91 84 20 	lds	r22, 0x2084
    3970:	70 91 85 20 	lds	r23, 0x2085
    3974:	80 91 86 20 	lds	r24, 0x2086
    3978:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    397c:	91 e0       	ldi	r25, 0x01	; 1
    397e:	81 11       	cpse	r24, r1
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	90 93 02 20 	sts	0x2002, r25
    3986:	60 91 dc 1f 	lds	r22, 0x1FDC
    398a:	70 91 dd 1f 	lds	r23, 0x1FDD
    398e:	80 91 de 1f 	lds	r24, 0x1FDE
    3992:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    3996:	91 e0       	ldi	r25, 0x01	; 1
    3998:	81 11       	cpse	r24, r1
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	90 93 03 20 	sts	0x2003, r25
    39a0:	60 91 33 20 	lds	r22, 0x2033
    39a4:	70 91 34 20 	lds	r23, 0x2034
    39a8:	80 91 35 20 	lds	r24, 0x2035
    39ac:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    39b2:	81 11       	cpse	r24, r1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	90 93 04 20 	sts	0x2004, r25
    39ba:	80 91 e8 1f 	lds	r24, 0x1FE8
    39be:	81 30       	cpi	r24, 0x01	; 1
    39c0:	21 f0       	breq	.+8      	; 0x39ca <pneGetStatus+0x206>
    39c2:	80 91 e3 1f 	lds	r24, 0x1FE3
    39c6:	81 30       	cpi	r24, 0x01	; 1
    39c8:	39 f4       	brne	.+14     	; 0x39d8 <pneGetStatus+0x214>
    39ca:	80 91 e0 1f 	lds	r24, 0x1FE0
    39ce:	81 11       	cpse	r24, r1
    39d0:	03 c0       	rjmp	.+6      	; 0x39d8 <pneGetStatus+0x214>
    39d2:	85 e0       	ldi	r24, 0x05	; 5
    39d4:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    39d8:	10 92 49 20 	sts	0x2049, r1
    39dc:	10 92 46 20 	sts	0x2046, r1
    39e0:	80 91 e0 1f 	lds	r24, 0x1FE0
    39e4:	81 11       	cpse	r24, r1
    39e6:	06 c0       	rjmp	.+12     	; 0x39f4 <pneGetStatus+0x230>
    39e8:	80 91 ff 1f 	lds	r24, 0x1FFF
    39ec:	81 11       	cpse	r24, r1
    39ee:	02 c0       	rjmp	.+4      	; 0x39f4 <pneGetStatus+0x230>
    39f0:	10 92 73 20 	sts	0x2073, r1
    39f4:	80 91 e1 20 	lds	r24, 0x20E1
    39f8:	81 30       	cpi	r24, 0x01	; 1
    39fa:	41 f4       	brne	.+16     	; 0x3a0c <pneGetStatus+0x248>
    39fc:	80 93 6f 20 	sts	0x206F, r24
    3a00:	10 92 e1 20 	sts	0x20E1, r1
    3a04:	03 c0       	rjmp	.+6      	; 0x3a0c <pneGetStatus+0x248>
    3a06:	8f 5f       	subi	r24, 0xFF	; 255
    3a08:	80 93 46 20 	sts	0x2046, r24
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	08 95       	ret

00003a12 <PNEWELSTaskHandler>:
    3a12:	d8 de       	rcall	.-592    	; 0x37c4 <pneGetStatus>
    3a14:	5a db       	rcall	.-2380   	; 0x30ca <pneOperationMode>
    3a16:	a0 ce       	rjmp	.-704    	; 0x3758 <pneOutgoingData>
    3a18:	08 95       	ret

00003a1a <pneIncomingData>:
    3a1a:	8f 92       	push	r8
    3a1c:	9f 92       	push	r9
    3a1e:	af 92       	push	r10
    3a20:	bf 92       	push	r11
    3a22:	ff 92       	push	r15
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	29 97       	sbiw	r28, 0x09	; 9
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	8c 01       	movw	r16, r24
    3a3e:	f6 2e       	mov	r15, r22
    3a40:	0e 94 8d 03 	call	0x71a	; 0x71a <pneVerify_received>
    3a44:	80 93 28 21 	sts	0x2128, r24
    3a48:	88 23       	and	r24, r24
    3a4a:	09 f4       	brne	.+2      	; 0x3a4e <pneIncomingData+0x34>
    3a4c:	cd c2       	rjmp	.+1434   	; 0x3fe8 <pneIncomingData+0x5ce>
    3a4e:	48 e0       	ldi	r20, 0x08	; 8
    3a50:	50 e0       	ldi	r21, 0x00	; 0
    3a52:	62 e5       	ldi	r22, 0x52	; 82
    3a54:	72 e0       	ldi	r23, 0x02	; 2
    3a56:	c8 01       	movw	r24, r16
    3a58:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3a5c:	89 2b       	or	r24, r25
    3a5e:	a1 f4       	brne	.+40     	; 0x3a88 <pneIncomingData+0x6e>
    3a60:	80 91 36 20 	lds	r24, 0x2036
    3a64:	81 11       	cpse	r24, r1
    3a66:	0a c0       	rjmp	.+20     	; 0x3a7c <pneIncomingData+0x62>
    3a68:	80 91 e8 1f 	lds	r24, 0x1FE8
    3a6c:	81 30       	cpi	r24, 0x01	; 1
    3a6e:	31 f4       	brne	.+12     	; 0x3a7c <pneIncomingData+0x62>
    3a70:	83 e0       	ldi	r24, 0x03	; 3
    3a72:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3a76:	ff 24       	eor	r15, r15
    3a78:	f3 94       	inc	r15
    3a7a:	ba c2       	rjmp	.+1396   	; 0x3ff0 <pneIncomingData+0x5d6>
    3a7c:	0e 94 7d 34 	call	0x68fa	; 0x68fa <emergency_on_to_rf>
    3a80:	7e de       	rcall	.-772    	; 0x377e <manual_btn_handler>
    3a82:	ff 24       	eor	r15, r15
    3a84:	f3 94       	inc	r15
    3a86:	b4 c2       	rjmp	.+1384   	; 0x3ff0 <pneIncomingData+0x5d6>
    3a88:	48 e0       	ldi	r20, 0x08	; 8
    3a8a:	50 e0       	ldi	r21, 0x00	; 0
    3a8c:	6b e5       	ldi	r22, 0x5B	; 91
    3a8e:	72 e0       	ldi	r23, 0x02	; 2
    3a90:	c8 01       	movw	r24, r16
    3a92:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3a96:	89 2b       	or	r24, r25
    3a98:	a1 f4       	brne	.+40     	; 0x3ac2 <pneIncomingData+0xa8>
    3a9a:	80 91 36 20 	lds	r24, 0x2036
    3a9e:	81 30       	cpi	r24, 0x01	; 1
    3aa0:	51 f4       	brne	.+20     	; 0x3ab6 <pneIncomingData+0x9c>
    3aa2:	80 91 e8 1f 	lds	r24, 0x1FE8
    3aa6:	81 11       	cpse	r24, r1
    3aa8:	06 c0       	rjmp	.+12     	; 0x3ab6 <pneIncomingData+0x9c>
    3aaa:	83 e0       	ldi	r24, 0x03	; 3
    3aac:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3ab0:	ff 24       	eor	r15, r15
    3ab2:	f3 94       	inc	r15
    3ab4:	9d c2       	rjmp	.+1338   	; 0x3ff0 <pneIncomingData+0x5d6>
    3ab6:	0e 94 87 34 	call	0x690e	; 0x690e <emergency_off_to_rf>
    3aba:	61 de       	rcall	.-830    	; 0x377e <manual_btn_handler>
    3abc:	ff 24       	eor	r15, r15
    3abe:	f3 94       	inc	r15
    3ac0:	97 c2       	rjmp	.+1326   	; 0x3ff0 <pneIncomingData+0x5d6>
    3ac2:	48 e0       	ldi	r20, 0x08	; 8
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	64 e6       	ldi	r22, 0x64	; 100
    3ac8:	72 e0       	ldi	r23, 0x02	; 2
    3aca:	c8 01       	movw	r24, r16
    3acc:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3ad0:	89 2b       	or	r24, r25
    3ad2:	09 f0       	breq	.+2      	; 0x3ad6 <pneIncomingData+0xbc>
    3ad4:	50 c0       	rjmp	.+160    	; 0x3b76 <pneIncomingData+0x15c>
    3ad6:	2f e0       	ldi	r18, 0x0F	; 15
    3ad8:	2f 15       	cp	r18, r15
    3ada:	30 f0       	brcs	.+12     	; 0x3ae8 <pneIncomingData+0xce>
    3adc:	84 e0       	ldi	r24, 0x04	; 4
    3ade:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3ae2:	ff 24       	eor	r15, r15
    3ae4:	f3 94       	inc	r15
    3ae6:	84 c2       	rjmp	.+1288   	; 0x3ff0 <pneIncomingData+0x5d6>
    3ae8:	6e ef       	ldi	r22, 0xFE	; 254
    3aea:	6f 0d       	add	r22, r15
    3aec:	c8 01       	movw	r24, r16
    3aee:	0e 94 38 37 	call	0x6e70	; 0x6e70 <crc_verify>
    3af2:	f8 2e       	mov	r15, r24
    3af4:	88 23       	and	r24, r24
    3af6:	09 f4       	brne	.+2      	; 0x3afa <pneIncomingData+0xe0>
    3af8:	79 c2       	rjmp	.+1266   	; 0x3fec <pneIncomingData+0x5d2>
    3afa:	f8 01       	movw	r30, r16
    3afc:	21 85       	ldd	r18, Z+9	; 0x09
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	20 53       	subi	r18, 0x30	; 48
    3b02:	31 09       	sbc	r19, r1
    3b04:	88 ee       	ldi	r24, 0xE8	; 232
    3b06:	93 e0       	ldi	r25, 0x03	; 3
    3b08:	28 9f       	mul	r18, r24
    3b0a:	a0 01       	movw	r20, r0
    3b0c:	29 9f       	mul	r18, r25
    3b0e:	50 0d       	add	r21, r0
    3b10:	38 9f       	mul	r19, r24
    3b12:	50 0d       	add	r21, r0
    3b14:	11 24       	eor	r1, r1
    3b16:	22 85       	ldd	r18, Z+10	; 0x0a
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	20 53       	subi	r18, 0x30	; 48
    3b1c:	31 09       	sbc	r19, r1
    3b1e:	64 e6       	ldi	r22, 0x64	; 100
    3b20:	62 9f       	mul	r22, r18
    3b22:	c0 01       	movw	r24, r0
    3b24:	63 9f       	mul	r22, r19
    3b26:	90 0d       	add	r25, r0
    3b28:	11 24       	eor	r1, r1
    3b2a:	84 0f       	add	r24, r20
    3b2c:	95 1f       	adc	r25, r21
    3b2e:	24 85       	ldd	r18, Z+12	; 0x0c
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	20 53       	subi	r18, 0x30	; 48
    3b34:	31 09       	sbc	r19, r1
    3b36:	ac 01       	movw	r20, r24
    3b38:	42 0f       	add	r20, r18
    3b3a:	53 1f       	adc	r21, r19
    3b3c:	23 85       	ldd	r18, Z+11	; 0x0b
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	20 53       	subi	r18, 0x30	; 48
    3b42:	31 09       	sbc	r19, r1
    3b44:	c9 01       	movw	r24, r18
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	22 0f       	add	r18, r18
    3b4c:	33 1f       	adc	r19, r19
    3b4e:	22 0f       	add	r18, r18
    3b50:	33 1f       	adc	r19, r19
    3b52:	22 0f       	add	r18, r18
    3b54:	33 1f       	adc	r19, r19
    3b56:	28 0f       	add	r18, r24
    3b58:	39 1f       	adc	r19, r25
    3b5a:	ca 01       	movw	r24, r20
    3b5c:	82 0f       	add	r24, r18
    3b5e:	93 1f       	adc	r25, r19
    3b60:	8d 3f       	cpi	r24, 0xFD	; 253
    3b62:	ff e0       	ldi	r31, 0x0F	; 15
    3b64:	9f 07       	cpc	r25, r31
    3b66:	20 f0       	brcs	.+8      	; 0x3b70 <pneIncomingData+0x156>
    3b68:	84 e0       	ldi	r24, 0x04	; 4
    3b6a:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3b6e:	40 c2       	rjmp	.+1152   	; 0x3ff0 <pneIncomingData+0x5d6>
    3b70:	0e 94 90 34 	call	0x6920	; 0x6920 <eeprom_to_rf>
    3b74:	3d c2       	rjmp	.+1146   	; 0x3ff0 <pneIncomingData+0x5d6>
    3b76:	48 e0       	ldi	r20, 0x08	; 8
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	6d e6       	ldi	r22, 0x6D	; 109
    3b7c:	72 e0       	ldi	r23, 0x02	; 2
    3b7e:	c8 01       	movw	r24, r16
    3b80:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3b84:	89 2b       	or	r24, r25
    3b86:	81 f4       	brne	.+32     	; 0x3ba8 <pneIncomingData+0x18e>
    3b88:	80 91 36 20 	lds	r24, 0x2036
    3b8c:	81 11       	cpse	r24, r1
    3b8e:	06 c0       	rjmp	.+12     	; 0x3b9c <pneIncomingData+0x182>
    3b90:	83 e0       	ldi	r24, 0x03	; 3
    3b92:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3b96:	ff 24       	eor	r15, r15
    3b98:	f3 94       	inc	r15
    3b9a:	2a c2       	rjmp	.+1108   	; 0x3ff0 <pneIncomingData+0x5d6>
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	80 93 e9 1f 	sts	0x1FE9, r24
    3ba2:	ff 24       	eor	r15, r15
    3ba4:	f3 94       	inc	r15
    3ba6:	24 c2       	rjmp	.+1096   	; 0x3ff0 <pneIncomingData+0x5d6>
    3ba8:	48 e0       	ldi	r20, 0x08	; 8
    3baa:	50 e0       	ldi	r21, 0x00	; 0
    3bac:	66 e7       	ldi	r22, 0x76	; 118
    3bae:	72 e0       	ldi	r23, 0x02	; 2
    3bb0:	c8 01       	movw	r24, r16
    3bb2:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3bb6:	89 2b       	or	r24, r25
    3bb8:	79 f4       	brne	.+30     	; 0x3bd8 <pneIncomingData+0x1be>
    3bba:	80 91 36 20 	lds	r24, 0x2036
    3bbe:	81 11       	cpse	r24, r1
    3bc0:	06 c0       	rjmp	.+12     	; 0x3bce <pneIncomingData+0x1b4>
    3bc2:	83 e0       	ldi	r24, 0x03	; 3
    3bc4:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3bc8:	ff 24       	eor	r15, r15
    3bca:	f3 94       	inc	r15
    3bcc:	11 c2       	rjmp	.+1058   	; 0x3ff0 <pneIncomingData+0x5d6>
    3bce:	10 92 e9 1f 	sts	0x1FE9, r1
    3bd2:	ff 24       	eor	r15, r15
    3bd4:	f3 94       	inc	r15
    3bd6:	0c c2       	rjmp	.+1048   	; 0x3ff0 <pneIncomingData+0x5d6>
    3bd8:	48 e0       	ldi	r20, 0x08	; 8
    3bda:	50 e0       	ldi	r21, 0x00	; 0
    3bdc:	6f e7       	ldi	r22, 0x7F	; 127
    3bde:	72 e0       	ldi	r23, 0x02	; 2
    3be0:	c8 01       	movw	r24, r16
    3be2:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3be6:	89 2b       	or	r24, r25
    3be8:	81 f4       	brne	.+32     	; 0x3c0a <pneIncomingData+0x1f0>
    3bea:	80 91 36 20 	lds	r24, 0x2036
    3bee:	81 11       	cpse	r24, r1
    3bf0:	06 c0       	rjmp	.+12     	; 0x3bfe <pneIncomingData+0x1e4>
    3bf2:	83 e0       	ldi	r24, 0x03	; 3
    3bf4:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3bf8:	ff 24       	eor	r15, r15
    3bfa:	f3 94       	inc	r15
    3bfc:	f9 c1       	rjmp	.+1010   	; 0x3ff0 <pneIncomingData+0x5d6>
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	80 93 ea 1f 	sts	0x1FEA, r24
    3c04:	ff 24       	eor	r15, r15
    3c06:	f3 94       	inc	r15
    3c08:	f3 c1       	rjmp	.+998    	; 0x3ff0 <pneIncomingData+0x5d6>
    3c0a:	48 e0       	ldi	r20, 0x08	; 8
    3c0c:	50 e0       	ldi	r21, 0x00	; 0
    3c0e:	68 e8       	ldi	r22, 0x88	; 136
    3c10:	72 e0       	ldi	r23, 0x02	; 2
    3c12:	c8 01       	movw	r24, r16
    3c14:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3c18:	89 2b       	or	r24, r25
    3c1a:	79 f4       	brne	.+30     	; 0x3c3a <pneIncomingData+0x220>
    3c1c:	80 91 36 20 	lds	r24, 0x2036
    3c20:	81 11       	cpse	r24, r1
    3c22:	06 c0       	rjmp	.+12     	; 0x3c30 <pneIncomingData+0x216>
    3c24:	83 e0       	ldi	r24, 0x03	; 3
    3c26:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3c2a:	ff 24       	eor	r15, r15
    3c2c:	f3 94       	inc	r15
    3c2e:	e0 c1       	rjmp	.+960    	; 0x3ff0 <pneIncomingData+0x5d6>
    3c30:	10 92 ea 1f 	sts	0x1FEA, r1
    3c34:	ff 24       	eor	r15, r15
    3c36:	f3 94       	inc	r15
    3c38:	db c1       	rjmp	.+950    	; 0x3ff0 <pneIncomingData+0x5d6>
    3c3a:	48 e0       	ldi	r20, 0x08	; 8
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	61 e9       	ldi	r22, 0x91	; 145
    3c40:	72 e0       	ldi	r23, 0x02	; 2
    3c42:	c8 01       	movw	r24, r16
    3c44:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3c48:	89 2b       	or	r24, r25
    3c4a:	09 f0       	breq	.+2      	; 0x3c4e <pneIncomingData+0x234>
    3c4c:	92 c0       	rjmp	.+292    	; 0x3d72 <pneIncomingData+0x358>
    3c4e:	23 e1       	ldi	r18, 0x13	; 19
    3c50:	2f 15       	cp	r18, r15
    3c52:	30 f0       	brcs	.+12     	; 0x3c60 <pneIncomingData+0x246>
    3c54:	86 e0       	ldi	r24, 0x06	; 6
    3c56:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3c5a:	ff 24       	eor	r15, r15
    3c5c:	f3 94       	inc	r15
    3c5e:	c8 c1       	rjmp	.+912    	; 0x3ff0 <pneIncomingData+0x5d6>
    3c60:	6e ef       	ldi	r22, 0xFE	; 254
    3c62:	6f 0d       	add	r22, r15
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 38 37 	call	0x6e70	; 0x6e70 <crc_verify>
    3c6a:	f8 2e       	mov	r15, r24
    3c6c:	88 23       	and	r24, r24
    3c6e:	09 f4       	brne	.+2      	; 0x3c72 <pneIncomingData+0x258>
    3c70:	7a c0       	rjmp	.+244    	; 0x3d66 <pneIncomingData+0x34c>
    3c72:	f8 01       	movw	r30, r16
    3c74:	a1 85       	ldd	r26, Z+9	; 0x09
    3c76:	b0 e0       	ldi	r27, 0x00	; 0
    3c78:	d0 97       	sbiw	r26, 0x30	; 48
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	3a ec       	ldi	r19, 0xCA	; 202
    3c7e:	4a e9       	ldi	r20, 0x9A	; 154
    3c80:	5b e3       	ldi	r21, 0x3B	; 59
    3c82:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__mulshisi3>
    3c86:	4b 01       	movw	r8, r22
    3c88:	5c 01       	movw	r10, r24
    3c8a:	a2 85       	ldd	r26, Z+10	; 0x0a
    3c8c:	b0 e0       	ldi	r27, 0x00	; 0
    3c8e:	d0 97       	sbiw	r26, 0x30	; 48
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	31 ee       	ldi	r19, 0xE1	; 225
    3c94:	45 ef       	ldi	r20, 0xF5	; 245
    3c96:	55 e0       	ldi	r21, 0x05	; 5
    3c98:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__mulshisi3>
    3c9c:	86 0e       	add	r8, r22
    3c9e:	97 1e       	adc	r9, r23
    3ca0:	a8 1e       	adc	r10, r24
    3ca2:	b9 1e       	adc	r11, r25
    3ca4:	82 89       	ldd	r24, Z+18	; 0x12
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	c0 97       	sbiw	r24, 0x30	; 48
    3caa:	09 2e       	mov	r0, r25
    3cac:	00 0c       	add	r0, r0
    3cae:	aa 0b       	sbc	r26, r26
    3cb0:	bb 0b       	sbc	r27, r27
    3cb2:	88 0e       	add	r8, r24
    3cb4:	99 1e       	adc	r9, r25
    3cb6:	aa 1e       	adc	r10, r26
    3cb8:	bb 1e       	adc	r11, r27
    3cba:	a3 85       	ldd	r26, Z+11	; 0x0b
    3cbc:	b0 e0       	ldi	r27, 0x00	; 0
    3cbe:	d0 97       	sbiw	r26, 0x30	; 48
    3cc0:	20 e8       	ldi	r18, 0x80	; 128
    3cc2:	36 e9       	ldi	r19, 0x96	; 150
    3cc4:	48 e9       	ldi	r20, 0x98	; 152
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__mulshisi3>
    3ccc:	86 0e       	add	r8, r22
    3cce:	97 1e       	adc	r9, r23
    3cd0:	a8 1e       	adc	r10, r24
    3cd2:	b9 1e       	adc	r11, r25
    3cd4:	a4 85       	ldd	r26, Z+12	; 0x0c
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	d0 97       	sbiw	r26, 0x30	; 48
    3cda:	20 e4       	ldi	r18, 0x40	; 64
    3cdc:	32 e4       	ldi	r19, 0x42	; 66
    3cde:	4f e0       	ldi	r20, 0x0F	; 15
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__mulshisi3>
    3ce6:	86 0e       	add	r8, r22
    3ce8:	97 1e       	adc	r9, r23
    3cea:	a8 1e       	adc	r10, r24
    3cec:	b9 1e       	adc	r11, r25
    3cee:	a5 85       	ldd	r26, Z+13	; 0x0d
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	d0 97       	sbiw	r26, 0x30	; 48
    3cf4:	20 ea       	ldi	r18, 0xA0	; 160
    3cf6:	36 e8       	ldi	r19, 0x86	; 134
    3cf8:	41 e0       	ldi	r20, 0x01	; 1
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__mulshisi3>
    3d00:	86 0e       	add	r8, r22
    3d02:	97 1e       	adc	r9, r23
    3d04:	a8 1e       	adc	r10, r24
    3d06:	b9 1e       	adc	r11, r25
    3d08:	a6 85       	ldd	r26, Z+14	; 0x0e
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	d0 97       	sbiw	r26, 0x30	; 48
    3d0e:	20 e1       	ldi	r18, 0x10	; 16
    3d10:	37 e2       	ldi	r19, 0x27	; 39
    3d12:	0e 94 e3 4d 	call	0x9bc6	; 0x9bc6 <__usmulhisi3>
    3d16:	86 0e       	add	r8, r22
    3d18:	97 1e       	adc	r9, r23
    3d1a:	a8 1e       	adc	r10, r24
    3d1c:	b9 1e       	adc	r11, r25
    3d1e:	a7 85       	ldd	r26, Z+15	; 0x0f
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	d0 97       	sbiw	r26, 0x30	; 48
    3d24:	28 ee       	ldi	r18, 0xE8	; 232
    3d26:	33 e0       	ldi	r19, 0x03	; 3
    3d28:	0e 94 e3 4d 	call	0x9bc6	; 0x9bc6 <__usmulhisi3>
    3d2c:	86 0e       	add	r8, r22
    3d2e:	97 1e       	adc	r9, r23
    3d30:	a8 1e       	adc	r10, r24
    3d32:	b9 1e       	adc	r11, r25
    3d34:	a0 89       	ldd	r26, Z+16	; 0x10
    3d36:	b0 e0       	ldi	r27, 0x00	; 0
    3d38:	d0 97       	sbiw	r26, 0x30	; 48
    3d3a:	24 e6       	ldi	r18, 0x64	; 100
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	0e 94 e3 4d 	call	0x9bc6	; 0x9bc6 <__usmulhisi3>
    3d42:	86 0e       	add	r8, r22
    3d44:	97 1e       	adc	r9, r23
    3d46:	a8 1e       	adc	r10, r24
    3d48:	b9 1e       	adc	r11, r25
    3d4a:	a1 89       	ldd	r26, Z+17	; 0x11
    3d4c:	b0 e0       	ldi	r27, 0x00	; 0
    3d4e:	d0 97       	sbiw	r26, 0x30	; 48
    3d50:	2a e0       	ldi	r18, 0x0A	; 10
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	0e 94 e3 4d 	call	0x9bc6	; 0x9bc6 <__usmulhisi3>
    3d58:	68 0d       	add	r22, r8
    3d5a:	79 1d       	adc	r23, r9
    3d5c:	8a 1d       	adc	r24, r10
    3d5e:	9b 1d       	adc	r25, r11
    3d60:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <time_to_rf>
    3d64:	45 c1       	rjmp	.+650    	; 0x3ff0 <pneIncomingData+0x5d6>
    3d66:	87 e0       	ldi	r24, 0x07	; 7
    3d68:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3d6c:	ff 24       	eor	r15, r15
    3d6e:	f3 94       	inc	r15
    3d70:	3f c1       	rjmp	.+638    	; 0x3ff0 <pneIncomingData+0x5d6>
    3d72:	48 e0       	ldi	r20, 0x08	; 8
    3d74:	50 e0       	ldi	r21, 0x00	; 0
    3d76:	6a e9       	ldi	r22, 0x9A	; 154
    3d78:	72 e0       	ldi	r23, 0x02	; 2
    3d7a:	c8 01       	movw	r24, r16
    3d7c:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3d80:	89 2b       	or	r24, r25
    3d82:	39 f4       	brne	.+14     	; 0x3d92 <pneIncomingData+0x378>
    3d84:	88 e3       	ldi	r24, 0x38	; 56
    3d86:	90 e2       	ldi	r25, 0x20	; 32
    3d88:	0e 94 94 15 	call	0x2b28	; 0x2b28 <SYS_TimerStop>
    3d8c:	ff 24       	eor	r15, r15
    3d8e:	f3 94       	inc	r15
    3d90:	2f c1       	rjmp	.+606    	; 0x3ff0 <pneIncomingData+0x5d6>
    3d92:	48 e0       	ldi	r20, 0x08	; 8
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	63 ea       	ldi	r22, 0xA3	; 163
    3d98:	72 e0       	ldi	r23, 0x02	; 2
    3d9a:	c8 01       	movw	r24, r16
    3d9c:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3da0:	89 2b       	or	r24, r25
    3da2:	29 f4       	brne	.+10     	; 0x3dae <pneIncomingData+0x394>
    3da4:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <clr_rom_to_rf>
    3da8:	ff 24       	eor	r15, r15
    3daa:	f3 94       	inc	r15
    3dac:	21 c1       	rjmp	.+578    	; 0x3ff0 <pneIncomingData+0x5d6>
    3dae:	48 e0       	ldi	r20, 0x08	; 8
    3db0:	50 e0       	ldi	r21, 0x00	; 0
    3db2:	6c ea       	ldi	r22, 0xAC	; 172
    3db4:	72 e0       	ldi	r23, 0x02	; 2
    3db6:	c8 01       	movw	r24, r16
    3db8:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3dbc:	89 2b       	or	r24, r25
    3dbe:	29 f4       	brne	.+10     	; 0x3dca <pneIncomingData+0x3b0>
    3dc0:	0e 94 8e 33 	call	0x671c	; 0x671c <reboot_to_rf>
    3dc4:	ff 24       	eor	r15, r15
    3dc6:	f3 94       	inc	r15
    3dc8:	13 c1       	rjmp	.+550    	; 0x3ff0 <pneIncomingData+0x5d6>
    3dca:	48 e0       	ldi	r20, 0x08	; 8
    3dcc:	50 e0       	ldi	r21, 0x00	; 0
    3dce:	65 eb       	ldi	r22, 0xB5	; 181
    3dd0:	72 e0       	ldi	r23, 0x02	; 2
    3dd2:	c8 01       	movw	r24, r16
    3dd4:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3dd8:	89 2b       	or	r24, r25
    3dda:	29 f4       	brne	.+10     	; 0x3de6 <pneIncomingData+0x3cc>
    3ddc:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <info_to_rf>
    3de0:	ff 24       	eor	r15, r15
    3de2:	f3 94       	inc	r15
    3de4:	05 c1       	rjmp	.+522    	; 0x3ff0 <pneIncomingData+0x5d6>
    3de6:	48 e0       	ldi	r20, 0x08	; 8
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	6e eb       	ldi	r22, 0xBE	; 190
    3dec:	72 e0       	ldi	r23, 0x02	; 2
    3dee:	c8 01       	movw	r24, r16
    3df0:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3df4:	89 2b       	or	r24, r25
    3df6:	71 f5       	brne	.+92     	; 0x3e54 <pneIncomingData+0x43a>
    3df8:	f1 e1       	ldi	r31, 0x11	; 17
    3dfa:	ff 15       	cp	r31, r15
    3dfc:	30 f0       	brcs	.+12     	; 0x3e0a <pneIncomingData+0x3f0>
    3dfe:	84 e0       	ldi	r24, 0x04	; 4
    3e00:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3e04:	ff 24       	eor	r15, r15
    3e06:	f3 94       	inc	r15
    3e08:	f3 c0       	rjmp	.+486    	; 0x3ff0 <pneIncomingData+0x5d6>
    3e0a:	6e ef       	ldi	r22, 0xFE	; 254
    3e0c:	6f 0d       	add	r22, r15
    3e0e:	c8 01       	movw	r24, r16
    3e10:	0e 94 38 37 	call	0x6e70	; 0x6e70 <crc_verify>
    3e14:	f8 2e       	mov	r15, r24
    3e16:	88 23       	and	r24, r24
    3e18:	b9 f0       	breq	.+46     	; 0x3e48 <pneIncomingData+0x42e>
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	01 96       	adiw	r24, 0x01	; 1
    3e1e:	26 e0       	ldi	r18, 0x06	; 6
    3e20:	fc 01       	movw	r30, r24
    3e22:	11 92       	st	Z+, r1
    3e24:	2a 95       	dec	r18
    3e26:	e9 f7       	brne	.-6      	; 0x3e22 <pneIncomingData+0x408>
    3e28:	f8 01       	movw	r30, r16
    3e2a:	21 85       	ldd	r18, Z+9	; 0x09
    3e2c:	29 83       	std	Y+1, r18	; 0x01
    3e2e:	22 85       	ldd	r18, Z+10	; 0x0a
    3e30:	2a 83       	std	Y+2, r18	; 0x02
    3e32:	23 85       	ldd	r18, Z+11	; 0x0b
    3e34:	2b 83       	std	Y+3, r18	; 0x03
    3e36:	24 85       	ldd	r18, Z+12	; 0x0c
    3e38:	2c 83       	std	Y+4, r18	; 0x04
    3e3a:	25 85       	ldd	r18, Z+13	; 0x0d
    3e3c:	2d 83       	std	Y+5, r18	; 0x05
    3e3e:	26 85       	ldd	r18, Z+14	; 0x0e
    3e40:	2e 83       	std	Y+6, r18	; 0x06
    3e42:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <change_id_to_rf>
    3e46:	d4 c0       	rjmp	.+424    	; 0x3ff0 <pneIncomingData+0x5d6>
    3e48:	84 e0       	ldi	r24, 0x04	; 4
    3e4a:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3e4e:	ff 24       	eor	r15, r15
    3e50:	f3 94       	inc	r15
    3e52:	ce c0       	rjmp	.+412    	; 0x3ff0 <pneIncomingData+0x5d6>
    3e54:	48 e0       	ldi	r20, 0x08	; 8
    3e56:	50 e0       	ldi	r21, 0x00	; 0
    3e58:	67 ec       	ldi	r22, 0xC7	; 199
    3e5a:	72 e0       	ldi	r23, 0x02	; 2
    3e5c:	c8 01       	movw	r24, r16
    3e5e:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3e62:	89 2b       	or	r24, r25
    3e64:	09 f5       	brne	.+66     	; 0x3ea8 <pneIncomingData+0x48e>
    3e66:	fd e0       	ldi	r31, 0x0D	; 13
    3e68:	ff 15       	cp	r31, r15
    3e6a:	30 f0       	brcs	.+12     	; 0x3e78 <pneIncomingData+0x45e>
    3e6c:	8b e0       	ldi	r24, 0x0B	; 11
    3e6e:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3e72:	ff 24       	eor	r15, r15
    3e74:	f3 94       	inc	r15
    3e76:	bc c0       	rjmp	.+376    	; 0x3ff0 <pneIncomingData+0x5d6>
    3e78:	6e ef       	ldi	r22, 0xFE	; 254
    3e7a:	6f 0d       	add	r22, r15
    3e7c:	c8 01       	movw	r24, r16
    3e7e:	0e 94 38 37 	call	0x6e70	; 0x6e70 <crc_verify>
    3e82:	f8 2e       	mov	r15, r24
    3e84:	88 23       	and	r24, r24
    3e86:	51 f0       	breq	.+20     	; 0x3e9c <pneIncomingData+0x482>
    3e88:	f8 01       	movw	r30, r16
    3e8a:	81 85       	ldd	r24, Z+9	; 0x09
    3e8c:	89 83       	std	Y+1, r24	; 0x01
    3e8e:	82 85       	ldd	r24, Z+10	; 0x0a
    3e90:	8a 83       	std	Y+2, r24	; 0x02
    3e92:	ce 01       	movw	r24, r28
    3e94:	01 96       	adiw	r24, 0x01	; 1
    3e96:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <battery_threshold_to_rf>
    3e9a:	aa c0       	rjmp	.+340    	; 0x3ff0 <pneIncomingData+0x5d6>
    3e9c:	84 e0       	ldi	r24, 0x04	; 4
    3e9e:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3ea2:	ff 24       	eor	r15, r15
    3ea4:	f3 94       	inc	r15
    3ea6:	a4 c0       	rjmp	.+328    	; 0x3ff0 <pneIncomingData+0x5d6>
    3ea8:	48 e0       	ldi	r20, 0x08	; 8
    3eaa:	50 e0       	ldi	r21, 0x00	; 0
    3eac:	60 ed       	ldi	r22, 0xD0	; 208
    3eae:	72 e0       	ldi	r23, 0x02	; 2
    3eb0:	c8 01       	movw	r24, r16
    3eb2:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3eb6:	89 2b       	or	r24, r25
    3eb8:	a1 f4       	brne	.+40     	; 0x3ee2 <pneIncomingData+0x4c8>
    3eba:	85 eb       	ldi	r24, 0xB5	; 181
    3ebc:	90 e2       	ldi	r25, 0x20	; 32
    3ebe:	0e 94 94 15 	call	0x2b28	; 0x2b28 <SYS_TimerStop>
    3ec2:	84 e0       	ldi	r24, 0x04	; 4
    3ec4:	80 93 36 20 	sts	0x2036, r24
    3ec8:	10 92 31 20 	sts	0x2031, r1
    3ecc:	10 92 30 20 	sts	0x2030, r1
    3ed0:	0e 94 85 02 	call	0x50a	; 0x50a <APP_IbLoadSettings_WPS>
    3ed4:	86 ec       	ldi	r24, 0xC6	; 198
    3ed6:	90 e2       	ldi	r25, 0x20	; 32
    3ed8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <SYS_TimerStart>
    3edc:	ff 24       	eor	r15, r15
    3ede:	f3 94       	inc	r15
    3ee0:	87 c0       	rjmp	.+270    	; 0x3ff0 <pneIncomingData+0x5d6>
    3ee2:	48 e0       	ldi	r20, 0x08	; 8
    3ee4:	50 e0       	ldi	r21, 0x00	; 0
    3ee6:	69 ed       	ldi	r22, 0xD9	; 217
    3ee8:	72 e0       	ldi	r23, 0x02	; 2
    3eea:	c8 01       	movw	r24, r16
    3eec:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3ef0:	89 2b       	or	r24, r25
    3ef2:	49 f4       	brne	.+18     	; 0x3f06 <pneIncomingData+0x4ec>
    3ef4:	80 e2       	ldi	r24, 0x20	; 32
    3ef6:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <last_1_log>
    3efa:	80 e2       	ldi	r24, 0x20	; 32
    3efc:	0e 94 12 36 	call	0x6c24	; 0x6c24 <last_2_log>
    3f00:	ff 24       	eor	r15, r15
    3f02:	f3 94       	inc	r15
    3f04:	75 c0       	rjmp	.+234    	; 0x3ff0 <pneIncomingData+0x5d6>
    3f06:	48 e0       	ldi	r20, 0x08	; 8
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	62 ee       	ldi	r22, 0xE2	; 226
    3f0c:	72 e0       	ldi	r23, 0x02	; 2
    3f0e:	c8 01       	movw	r24, r16
    3f10:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3f14:	89 2b       	or	r24, r25
    3f16:	29 f4       	brne	.+10     	; 0x3f22 <pneIncomingData+0x508>
    3f18:	0e 94 d1 36 	call	0x6da2	; 0x6da2 <dump_log_to_rf>
    3f1c:	ff 24       	eor	r15, r15
    3f1e:	f3 94       	inc	r15
    3f20:	67 c0       	rjmp	.+206    	; 0x3ff0 <pneIncomingData+0x5d6>
    3f22:	48 e0       	ldi	r20, 0x08	; 8
    3f24:	50 e0       	ldi	r21, 0x00	; 0
    3f26:	6b ee       	ldi	r22, 0xEB	; 235
    3f28:	72 e0       	ldi	r23, 0x02	; 2
    3f2a:	c8 01       	movw	r24, r16
    3f2c:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3f30:	89 2b       	or	r24, r25
    3f32:	29 f4       	brne	.+10     	; 0x3f3e <pneIncomingData+0x524>
    3f34:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <stress_test>
    3f38:	ff 24       	eor	r15, r15
    3f3a:	f3 94       	inc	r15
    3f3c:	59 c0       	rjmp	.+178    	; 0x3ff0 <pneIncomingData+0x5d6>
    3f3e:	48 e0       	ldi	r20, 0x08	; 8
    3f40:	50 e0       	ldi	r21, 0x00	; 0
    3f42:	64 ef       	ldi	r22, 0xF4	; 244
    3f44:	72 e0       	ldi	r23, 0x02	; 2
    3f46:	c8 01       	movw	r24, r16
    3f48:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <memcmp>
    3f4c:	89 2b       	or	r24, r25
    3f4e:	09 f0       	breq	.+2      	; 0x3f52 <pneIncomingData+0x538>
    3f50:	45 c0       	rjmp	.+138    	; 0x3fdc <pneIncomingData+0x5c2>
    3f52:	fb e1       	ldi	r31, 0x1B	; 27
    3f54:	ff 15       	cp	r31, r15
    3f56:	30 f0       	brcs	.+12     	; 0x3f64 <pneIncomingData+0x54a>
    3f58:	88 e0       	ldi	r24, 0x08	; 8
    3f5a:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3f5e:	ff 24       	eor	r15, r15
    3f60:	f3 94       	inc	r15
    3f62:	46 c0       	rjmp	.+140    	; 0x3ff0 <pneIncomingData+0x5d6>
    3f64:	6e ef       	ldi	r22, 0xFE	; 254
    3f66:	6f 0d       	add	r22, r15
    3f68:	c8 01       	movw	r24, r16
    3f6a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <crc_verify>
    3f6e:	f8 2e       	mov	r15, r24
    3f70:	88 23       	and	r24, r24
    3f72:	71 f1       	breq	.+92     	; 0x3fd0 <pneIncomingData+0x5b6>
    3f74:	d8 01       	movw	r26, r16
    3f76:	19 96       	adiw	r26, 0x09	; 9
    3f78:	ee e5       	ldi	r30, 0x5E	; 94
    3f7a:	ff e1       	ldi	r31, 0x1F	; 31
    3f7c:	cf 01       	movw	r24, r30
    3f7e:	80 5f       	subi	r24, 0xF0	; 240
    3f80:	2d 91       	ld	r18, X+
    3f82:	91 91       	ld	r25, Z+
    3f84:	29 17       	cp	r18, r25
    3f86:	29 f0       	breq	.+10     	; 0x3f92 <pneIncomingData+0x578>
    3f88:	89 e0       	ldi	r24, 0x09	; 9
    3f8a:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3f8e:	f1 2c       	mov	r15, r1
    3f90:	2f c0       	rjmp	.+94     	; 0x3ff0 <pneIncomingData+0x5d6>
    3f92:	8e 13       	cpse	r24, r30
    3f94:	f5 cf       	rjmp	.-22     	; 0x3f80 <pneIncomingData+0x566>
    3f96:	ce 01       	movw	r24, r28
    3f98:	01 96       	adiw	r24, 0x01	; 1
    3f9a:	29 e0       	ldi	r18, 0x09	; 9
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	11 92       	st	Z+, r1
    3fa0:	2a 95       	dec	r18
    3fa2:	e9 f7       	brne	.-6      	; 0x3f9e <pneIncomingData+0x584>
    3fa4:	f8 01       	movw	r30, r16
    3fa6:	23 8d       	ldd	r18, Z+27	; 0x1b
    3fa8:	29 83       	std	Y+1, r18	; 0x01
    3faa:	24 8d       	ldd	r18, Z+28	; 0x1c
    3fac:	2a 83       	std	Y+2, r18	; 0x02
    3fae:	25 8d       	ldd	r18, Z+29	; 0x1d
    3fb0:	2b 83       	std	Y+3, r18	; 0x03
    3fb2:	26 8d       	ldd	r18, Z+30	; 0x1e
    3fb4:	2c 83       	std	Y+4, r18	; 0x04
    3fb6:	27 8d       	ldd	r18, Z+31	; 0x1f
    3fb8:	2d 83       	std	Y+5, r18	; 0x05
    3fba:	20 a1       	ldd	r18, Z+32	; 0x20
    3fbc:	2e 83       	std	Y+6, r18	; 0x06
    3fbe:	0e 94 8f 33 	call	0x671e	; 0x671e <WPS_pairing>
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	80 93 c2 20 	sts	0x20C2, r24
    3fc8:	88 ee       	ldi	r24, 0xE8	; 232
    3fca:	93 e0       	ldi	r25, 0x03	; 3
    3fcc:	7e d1       	rcall	.+764    	; 0x42ca <pne_delayms>
    3fce:	10 c0       	rjmp	.+32     	; 0x3ff0 <pneIncomingData+0x5d6>
    3fd0:	8a e0       	ldi	r24, 0x0A	; 10
    3fd2:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3fd6:	ff 24       	eor	r15, r15
    3fd8:	f3 94       	inc	r15
    3fda:	0a c0       	rjmp	.+20     	; 0x3ff0 <pneIncomingData+0x5d6>
    3fdc:	8b e0       	ldi	r24, 0x0B	; 11
    3fde:	0e 94 bb 34 	call	0x6976	; 0x6976 <error_to_rf>
    3fe2:	ff 24       	eor	r15, r15
    3fe4:	f3 94       	inc	r15
    3fe6:	04 c0       	rjmp	.+8      	; 0x3ff0 <pneIncomingData+0x5d6>
    3fe8:	f1 2c       	mov	r15, r1
    3fea:	02 c0       	rjmp	.+4      	; 0x3ff0 <pneIncomingData+0x5d6>
    3fec:	ff 24       	eor	r15, r15
    3fee:	f3 94       	inc	r15
    3ff0:	8f 2d       	mov	r24, r15
    3ff2:	29 96       	adiw	r28, 0x09	; 9
    3ff4:	0f b6       	in	r0, 0x3f	; 63
    3ff6:	f8 94       	cli
    3ff8:	de bf       	out	0x3e, r29	; 62
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	ff 90       	pop	r15
    4008:	bf 90       	pop	r11
    400a:	af 90       	pop	r10
    400c:	9f 90       	pop	r9
    400e:	8f 90       	pop	r8
    4010:	08 95       	ret

00004012 <getUID>:

/*************************************************************************//**
*****************************************************************************/

void getUID()
{
    4012:	0f 93       	push	r16
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	1f 92       	push	r1
    401a:	1f 92       	push	r1
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
	uint8_t serial_addr[2] = {0x00, 0x08};
    4020:	19 82       	std	Y+1, r1	; 0x01
    4022:	88 e0       	ldi	r24, 0x08	; 8
    4024:	8a 83       	std	Y+2, r24	; 0x02
		
	pne_APP_TwiInit(0xBF);
    4026:	8f eb       	ldi	r24, 0xBF	; 191
    4028:	64 d1       	rcall	.+712    	; 0x42f2 <pne_APP_TwiInit>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, UID, 16);
    402a:	00 e1       	ldi	r16, 0x10	; 16
    402c:	2e e5       	ldi	r18, 0x5E	; 94
    402e:	3f e1       	ldi	r19, 0x1F	; 31
    4030:	4f eb       	ldi	r20, 0xBF	; 191
    4032:	62 e0       	ldi	r22, 0x02	; 2
    4034:	ce 01       	movw	r24, r28
    4036:	01 96       	adiw	r24, 0x01	; 1
    4038:	dd d1       	rcall	.+954    	; 0x43f4 <pne_APP_TwiReceive>
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	df 91       	pop	r29
    4040:	cf 91       	pop	r28
    4042:	0f 91       	pop	r16
    4044:	08 95       	ret

00004046 <PNEWELSAppInit>:
	gpio_in(INPUT_LED_DRV2);
	gpio_pullup(INPUT_LED_DRV2);
}

void PNEWELSAppInit(void)
{
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
	initialize_flag = 1;
    404c:	c1 e0       	ldi	r28, 0x01	; 1
    404e:	c0 93 49 20 	sts	0x2049, r28
	installation_flag = 1;
    4052:	c0 93 73 20 	sts	0x2073, r28
	data_update_flag = 1;
    4056:	c0 93 09 20 	sts	0x2009, r28
	status_report_flag = 1;
    405a:	c0 93 6f 20 	sts	0x206F, r28
	interrupt_flag = 1;
    405e:	c0 93 e1 20 	sts	0x20E1, r28
	debouncing_delay = 0;
    4062:	10 92 46 20 	sts	0x2046, r1
	LED_flag = 0;
    4066:	10 92 db 1f 	sts	0x1FDB, r1
	wps_flag = 0;
    406a:	10 92 2c 20 	sts	0x202C, r1
	do_once = 0;
    406e:	10 92 d6 20 	sts	0x20D6, r1
	operation_seq = off_emergency_light;
    4072:	c0 93 36 20 	sts	0x2036, r28
	current_state_emergency_light = 0;
    4076:	10 92 e7 20 	sts	0x20E7, r1
	memory_address_incr = 0;
    407a:	10 92 e9 20 	sts	0x20E9, r1
    407e:	10 92 e8 20 	sts	0x20E8, r1
	error_count_status = 0;
    4082:	10 92 4a 20 	sts	0x204A, r1
	error_count_wps = 0;
    4086:	10 92 32 20 	sts	0x2032, r1
	wps_send_flag = 1;
    408a:	c0 93 08 20 	sts	0x2008, r28
	battery_low_once = 0;
    408e:	10 92 b3 20 	sts	0x20B3, r1
	WPS_STATUS = WPS_init;
    4092:	10 92 c2 20 	sts	0x20C2, r1
	rf_flag = 0;
    4096:	10 92 61 20 	sts	0x2061, r1
	countdown = 0;
    409a:	10 92 48 20 	sts	0x2048, r1
    409e:	10 92 47 20 	sts	0x2047, r1
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    40a2:	87 e8       	ldi	r24, 0x87	; 135
    40a4:	80 93 7a 00 	sts	0x007A, r24
	//do_once_stop_wps_timer = 0;
	
	adc_init(ADC_PRESCALER_DIV128);
	timer2_init();
    40a8:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <timer2_init>
	memoryCounter_init();
    40ac:	9c d2       	rcall	.+1336   	; 0x45e6 <memoryCounter_init>
		.baudrate = USART_SERIAL_EXAMPLE_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    40ae:	64 e0       	ldi	r22, 0x04	; 4
    40b0:	72 e0       	ldi	r23, 0x02	; 2
    40b2:	88 ec       	ldi	r24, 0xC8	; 200
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	0e 94 92 06 	call	0xd24	; 0xd24 <usart_init_rs232>
	
	/*Software timer declaration*/
	appLEDTimer.interval = STANDBY_TIMER;
    40ba:	e4 e7       	ldi	r30, 0x74	; 116
    40bc:	f0 e2       	ldi	r31, 0x20	; 32
    40be:	84 ef       	ldi	r24, 0xF4	; 244
    40c0:	91 e0       	ldi	r25, 0x01	; 1
    40c2:	a0 e0       	ldi	r26, 0x00	; 0
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	86 83       	std	Z+6, r24	; 0x06
    40c8:	97 83       	std	Z+7, r25	; 0x07
    40ca:	a0 87       	std	Z+8, r26	; 0x08
    40cc:	b1 87       	std	Z+9, r27	; 0x09
	appLEDTimer.mode = SYS_TIMER_INTERVAL_MODE;
    40ce:	12 86       	std	Z+10, r1	; 0x0a
	appLEDTimer.handler = appLEDTimerHandler;
    40d0:	87 ea       	ldi	r24, 0xA7	; 167
    40d2:	96 e1       	ldi	r25, 0x16	; 22
    40d4:	94 87       	std	Z+12, r25	; 0x0c
    40d6:	83 87       	std	Z+11, r24	; 0x0b
	SYS_TimerStart(&appLEDTimer);
    40d8:	cf 01       	movw	r24, r30
    40da:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <SYS_TimerStart>
	
	appLEDIntervalTimer.interval = STANDBY_INTERVAL_TIMER;
    40de:	ee e4       	ldi	r30, 0x4E	; 78
    40e0:	f0 e2       	ldi	r31, 0x20	; 32
    40e2:	88 ee       	ldi	r24, 0xE8	; 232
    40e4:	93 e0       	ldi	r25, 0x03	; 3
    40e6:	a0 e0       	ldi	r26, 0x00	; 0
    40e8:	b0 e0       	ldi	r27, 0x00	; 0
    40ea:	86 83       	std	Z+6, r24	; 0x06
    40ec:	97 83       	std	Z+7, r25	; 0x07
    40ee:	a0 87       	std	Z+8, r26	; 0x08
    40f0:	b1 87       	std	Z+9, r27	; 0x09
	appLEDIntervalTimer.mode = SYS_TIMER_INTERVAL_MODE;
    40f2:	12 86       	std	Z+10, r1	; 0x0a
	appLEDIntervalTimer.handler = appLEDIntervalTimerHandler;
    40f4:	8f e6       	ldi	r24, 0x6F	; 111
    40f6:	96 e1       	ldi	r25, 0x16	; 22
    40f8:	94 87       	std	Z+12, r25	; 0x0c
    40fa:	83 87       	std	Z+11, r24	; 0x0b
	
	error_timer_status.interval = rand()%400+100;
    40fc:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <rand>
    4100:	e8 e3       	ldi	r30, 0x38	; 56
    4102:	f0 e2       	ldi	r31, 0x20	; 32
    4104:	00 e9       	ldi	r16, 0x90	; 144
    4106:	11 e0       	ldi	r17, 0x01	; 1
    4108:	b8 01       	movw	r22, r16
    410a:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__divmodhi4>
    410e:	8c 59       	subi	r24, 0x9C	; 156
    4110:	9f 4f       	sbci	r25, 0xFF	; 255
    4112:	09 2e       	mov	r0, r25
    4114:	00 0c       	add	r0, r0
    4116:	aa 0b       	sbc	r26, r26
    4118:	bb 0b       	sbc	r27, r27
    411a:	86 83       	std	Z+6, r24	; 0x06
    411c:	97 83       	std	Z+7, r25	; 0x07
    411e:	a0 87       	std	Z+8, r26	; 0x08
    4120:	b1 87       	std	Z+9, r27	; 0x09
	error_timer_status.mode = SYS_TIMER_INTERVAL_MODE;
    4122:	12 86       	std	Z+10, r1	; 0x0a
	error_timer_status.handler = errorTimerStatusHandler;
    4124:	81 e6       	ldi	r24, 0x61	; 97
    4126:	96 e1       	ldi	r25, 0x16	; 22
    4128:	94 87       	std	Z+12, r25	; 0x0c
    412a:	83 87       	std	Z+11, r24	; 0x0b
	
	error_timer_wps.interval = rand()%400+100;
    412c:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <rand>
    4130:	ed e0       	ldi	r30, 0x0D	; 13
    4132:	f0 e2       	ldi	r31, 0x20	; 32
    4134:	b8 01       	movw	r22, r16
    4136:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__divmodhi4>
    413a:	8c 59       	subi	r24, 0x9C	; 156
    413c:	9f 4f       	sbci	r25, 0xFF	; 255
    413e:	09 2e       	mov	r0, r25
    4140:	00 0c       	add	r0, r0
    4142:	aa 0b       	sbc	r26, r26
    4144:	bb 0b       	sbc	r27, r27
    4146:	86 83       	std	Z+6, r24	; 0x06
    4148:	97 83       	std	Z+7, r25	; 0x07
    414a:	a0 87       	std	Z+8, r26	; 0x08
    414c:	b1 87       	std	Z+9, r27	; 0x09
	error_timer_wps.mode = SYS_TIMER_INTERVAL_MODE;
    414e:	12 86       	std	Z+10, r1	; 0x0a
	error_timer_wps.handler = errorTimerWpsHandler;
    4150:	8f e9       	ldi	r24, 0x9F	; 159
    4152:	96 e1       	ldi	r25, 0x16	; 22
    4154:	94 87       	std	Z+12, r25	; 0x0c
    4156:	83 87       	std	Z+11, r24	; 0x0b
	/*SYS_TimerStart(&error_timer_wps);*/
	
	appWPSRequestTimer.interval = WPS_REQUEST_TIMER;
    4158:	e6 ec       	ldi	r30, 0xC6	; 198
    415a:	f0 e2       	ldi	r31, 0x20	; 32
    415c:	88 e8       	ldi	r24, 0x88	; 136
    415e:	93 e1       	ldi	r25, 0x13	; 19
    4160:	a0 e0       	ldi	r26, 0x00	; 0
    4162:	b0 e0       	ldi	r27, 0x00	; 0
    4164:	86 83       	std	Z+6, r24	; 0x06
    4166:	97 83       	std	Z+7, r25	; 0x07
    4168:	a0 87       	std	Z+8, r26	; 0x08
    416a:	b1 87       	std	Z+9, r27	; 0x09
	appWPSRequestTimer.mode = SYS_TIMER_PERIODIC_MODE;
    416c:	c2 87       	std	Z+10, r28	; 0x0a
	appWPSRequestTimer.handler = appWPSRequestTimerHandler;
    416e:	2a e9       	ldi	r18, 0x9A	; 154
    4170:	36 e1       	ldi	r19, 0x16	; 22
    4172:	34 87       	std	Z+12, r19	; 0x0c
    4174:	23 87       	std	Z+11, r18	; 0x0b
	/*SYS_TimerStart(&appWPSRequestTimer);*/
	
	appWPSActivationTimer.interval = WPS_REQUEST_TIMER;
    4176:	e5 eb       	ldi	r30, 0xB5	; 181
    4178:	f0 e2       	ldi	r31, 0x20	; 32
    417a:	86 83       	std	Z+6, r24	; 0x06
    417c:	97 83       	std	Z+7, r25	; 0x07
    417e:	a0 87       	std	Z+8, r26	; 0x08
    4180:	b1 87       	std	Z+9, r27	; 0x09
	appWPSActivationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4182:	12 86       	std	Z+10, r1	; 0x0a
	appWPSActivationTimer.handler = appWPSActivationTimerHandler;
    4184:	83 e7       	ldi	r24, 0x73	; 115
    4186:	96 e1       	ldi	r25, 0x16	; 22
    4188:	94 87       	std	Z+12, r25	; 0x0c
    418a:	83 87       	std	Z+11, r24	; 0x0b
	
	pneBatteryAverage_init(); //get average battery reading
    418c:	0e 94 2c 38 	call	0x7058	; 0x7058 <pneBatteryAverage_init>
	getUID(); //retrieve UID
    4190:	40 df       	rcall	.-384    	; 0x4012 <getUID>
	
	/*Factory Status*/
	if(gpio_read(FACTORY_BTN) ? 0 : 1)
    4192:	60 91 70 20 	lds	r22, 0x2070
    4196:	70 91 71 20 	lds	r23, 0x2071
    419a:	80 91 72 20 	lds	r24, 0x2072
    419e:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    41a2:	81 11       	cpse	r24, r1
    41a4:	08 c0       	rjmp	.+16     	; 0x41b6 <PNEWELSAppInit+0x170>
	{
		PNEWELS_Buffer.IsFactory = STATUS_FACTORY_OK;
    41a6:	e0 ee       	ldi	r30, 0xE0	; 224
    41a8:	ff e1       	ldi	r31, 0x1F	; 31
    41aa:	17 82       	std	Z+7, r1	; 0x07
		PNEWELS_Buffer.mode_Next = MODE_FACTORY;
    41ac:	86 e0       	ldi	r24, 0x06	; 6
    41ae:	83 8b       	std	Z+19, r24	; 0x13
		factory_mode();
    41b0:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <factory_mode>
    41b4:	03 c0       	rjmp	.+6      	; 0x41bc <PNEWELSAppInit+0x176>
	}
	else
	{
		PNEWELS_Buffer.IsFactory = STATUS_FACTORY_NOK;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	80 93 e7 1f 	sts	0x1FE7, r24
	}
}
    41bc:	cf 91       	pop	r28
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	08 95       	ret

000041c4 <systemFlag_check>:
	//PNEWELSE2promWrite(0xAE, 'E', 01, 41, 0xFF); //reset flag
}

void systemFlag_check()
{
	if(device_flag & (1<<AC_FLAG))
    41c4:	80 91 dc 20 	lds	r24, 0x20DC
    41c8:	81 ff       	sbrs	r24, 1
    41ca:	0e c0       	rjmp	.+28     	; 0x41e8 <systemFlag_check+0x24>
	{
		operation_seq = wps_state;
    41cc:	84 e0       	ldi	r24, 0x04	; 4
    41ce:	80 93 36 20 	sts	0x2036, r24
		reboot_countdown = 0;
    41d2:	10 92 31 20 	sts	0x2031, r1
    41d6:	10 92 30 20 	sts	0x2030, r1
		APP_IbLoadSettings_WPS(); //load temporary setting
    41da:	0e 94 85 02 	call	0x50a	; 0x50a <APP_IbLoadSettings_WPS>
		SYS_TimerStart(&appWPSRequestTimer); //start requesting data
    41de:	86 ec       	ldi	r24, 0xC6	; 198
    41e0:	90 e2       	ldi	r25, 0x20	; 32
    41e2:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <SYS_TimerStart>
    41e6:	08 95       	ret
	}
	else operation_seq = off_emergency_light;
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	80 93 36 20 	sts	0x2036, r24
    41ee:	08 95       	ret

000041f0 <write_factory_default>:
	//device_flag = (device_flag & ~(1<<AC_FLAG)); //write the flag
	//writeE2prom(FLAG,device_flag);
}

void write_factory_default(uint16_t address, uint8_t factory_default)
{
    41f0:	0f 93       	push	r16
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, factory_default); //set device address default value (LSB)
    41f2:	06 2f       	mov	r16, r22
    41f4:	29 2f       	mov	r18, r25
    41f6:	48 2f       	mov	r20, r24
    41f8:	65 e4       	ldi	r22, 0x45	; 69
    41fa:	8e ea       	ldi	r24, 0xAE	; 174
    41fc:	53 d1       	rcall	.+678    	; 0x44a4 <PNEWELSE2promWrite>
	pne_delayms(10);
    41fe:	8a e0       	ldi	r24, 0x0A	; 10
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	63 d0       	rcall	.+198    	; 0x42ca <pne_delayms>
	
    4204:	0f 91       	pop	r16
    4206:	08 95       	ret

00004208 <factory_initialization>:
#include "memoryConfig.h"
#include "appIb.h"

void factory_initialization()
{
	device_flag = readE2prom(FLAG); //read flag form EEPROM
    4208:	82 e0       	ldi	r24, 0x02	; 2
    420a:	90 e1       	ldi	r25, 0x10	; 16
    420c:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <readE2prom>
    4210:	80 93 dc 20 	sts	0x20DC, r24
	batt_low = readE2prom(BATTERY_LOW);
    4214:	84 e0       	ldi	r24, 0x04	; 4
    4216:	90 e1       	ldi	r25, 0x10	; 16
    4218:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <readE2prom>
    421c:	80 93 d7 20 	sts	0x20D7, r24
	batt_max = readE2prom(BATTERY_MAX);
    4220:	83 e0       	ldi	r24, 0x03	; 3
    4222:	90 e1       	ldi	r25, 0x10	; 16
    4224:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <readE2prom>
    4228:	80 93 da 1f 	sts	0x1FDA, r24
	if(device_flag & (1<<FACTORY_FLAG))  //check whether this is the first time boot, or hard reset was commenced.
    422c:	80 91 dc 20 	lds	r24, 0x20DC
    4230:	80 ff       	sbrs	r24, 0
    4232:	2e c0       	rjmp	.+92     	; 0x4290 <factory_initialization+0x88>
	{
		write_factory_default(DEVICE_ADDRESS_L,ADDRESS_DEFAULT_L);
    4234:	61 e0       	ldi	r22, 0x01	; 1
    4236:	8c ef       	ldi	r24, 0xFC	; 252
    4238:	9f e0       	ldi	r25, 0x0F	; 15
    423a:	da df       	rcall	.-76     	; 0x41f0 <write_factory_default>
		write_factory_default(DEVICE_ADDRESS_H,ADDRESS_DEFAULT_H); //set device address default value (MSB)
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	8d ef       	ldi	r24, 0xFD	; 253
    4240:	9f e0       	ldi	r25, 0x0F	; 15
    4242:	d6 df       	rcall	.-84     	; 0x41f0 <write_factory_default>
		
		write_factory_default(DEVICE_CHANNEL_L,CHANNEL_DEFAULT_L); //set device channel default value (LSB)
    4244:	60 e1       	ldi	r22, 0x10	; 16
    4246:	8e ef       	ldi	r24, 0xFE	; 254
    4248:	9f e0       	ldi	r25, 0x0F	; 15
    424a:	d2 df       	rcall	.-92     	; 0x41f0 <write_factory_default>
		write_factory_default(DEVICE_CHANNEL_H,CHANNEL_DEFAULT_H); //set device channel default value (MSB)
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	8f ef       	ldi	r24, 0xFF	; 255
    4250:	9f e0       	ldi	r25, 0x0F	; 15
    4252:	ce df       	rcall	.-100    	; 0x41f0 <write_factory_default>
		
		write_factory_default(DEVICE_PAN_L,PAN_DEFAULT_L); //set device PAN default value (LSB)
    4254:	64 e3       	ldi	r22, 0x34	; 52
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	90 e1       	ldi	r25, 0x10	; 16
    425a:	ca df       	rcall	.-108    	; 0x41f0 <write_factory_default>
		write_factory_default(DEVICE_PAN_H,PAN_DEFAULT_H); //set device PAN default value (MSB)
    425c:	62 e1       	ldi	r22, 0x12	; 18
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	90 e1       	ldi	r25, 0x10	; 16
    4262:	c6 df       	rcall	.-116    	; 0x41f0 <write_factory_default>
		
		write_factory_default(BATTERY_MAX,BATTERY_MAX_THRESH);
    4264:	6f e8       	ldi	r22, 0x8F	; 143
    4266:	83 e0       	ldi	r24, 0x03	; 3
    4268:	90 e1       	ldi	r25, 0x10	; 16
    426a:	c2 df       	rcall	.-124    	; 0x41f0 <write_factory_default>
		write_factory_default(BATTERY_LOW,BATTERY_LOW_THRESH);
    426c:	66 e6       	ldi	r22, 0x66	; 102
    426e:	84 e0       	ldi	r24, 0x04	; 4
    4270:	90 e1       	ldi	r25, 0x10	; 16
    4272:	be df       	rcall	.-132    	; 0x41f0 <write_factory_default>
		
		clre2prom(); //wipe all log file
    4274:	9c d1       	rcall	.+824    	; 0x45ae <clre2prom>
//		write_factory_default(GROUP_ID, GROUP_DEFAULT); //set Group ID default Value
//		write_factory_default(ZONE_ID, ZONE_DEFAULT); //set Zone ID default Value
//		write_factory_default(NODE_ID, NODE_DEFAULT); //set Node ID default value
		
		device_flag = (device_flag & ~(1<<FACTORY_FLAG));
    4276:	80 91 dc 20 	lds	r24, 0x20DC
    427a:	8e 7f       	andi	r24, 0xFE	; 254
    427c:	80 93 dc 20 	sts	0x20DC, r24
		
		write_factory_default(FLAG, device_flag); //set Factory flag
    4280:	60 91 dc 20 	lds	r22, 0x20DC
    4284:	82 e0       	ldi	r24, 0x02	; 2
    4286:	90 e1       	ldi	r25, 0x10	; 16
    4288:	b3 df       	rcall	.-154    	; 0x41f0 <write_factory_default>
		pne_delayms(10);
    428a:	8a e0       	ldi	r24, 0x0A	; 10
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	1d c0       	rjmp	.+58     	; 0x42ca <pne_delayms>
    4290:	08 95       	ret

00004292 <rf_init>:
#include <string.h>
#include "pne_appDelay.h"
#include "pne_rf_processor.h"

uint16_t rf_init(uint16_t address, uint16_t app_type)
{
    4292:	1f 93       	push	r17
    4294:	cf 93       	push	r28
    4296:	df 93       	push	r29
    4298:	d8 2f       	mov	r29, r24
    429a:	19 2f       	mov	r17, r25
	uint8_t cache[2] = {0};
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
		
	cache[0] = PNEWELSE2promRead(0xAF,'E',memory_address_low+1,memory_address_high);
    429c:	41 e0       	ldi	r20, 0x01	; 1
    429e:	48 0f       	add	r20, r24
    42a0:	29 2f       	mov	r18, r25
    42a2:	65 e4       	ldi	r22, 0x45	; 69
    42a4:	8f ea       	ldi	r24, 0xAF	; 175
    42a6:	29 d1       	rcall	.+594    	; 0x44fa <PNEWELSE2promRead>
    42a8:	c8 2f       	mov	r28, r24
	cache[1] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    42aa:	21 2f       	mov	r18, r17
    42ac:	4d 2f       	mov	r20, r29
    42ae:	65 e4       	ldi	r22, 0x45	; 69
    42b0:	8f ea       	ldi	r24, 0xAF	; 175
    42b2:	23 d1       	rcall	.+582    	; 0x44fa <PNEWELSE2promRead>
	app_type = cache[0];
    42b4:	2c 2f       	mov	r18, r28
    42b6:	30 e0       	ldi	r19, 0x00	; 0
	app_type = app_type << 8;
    42b8:	32 2f       	mov	r19, r18
    42ba:	22 27       	eor	r18, r18
	app_type |= cache[1];
	return app_type;
    42bc:	a9 01       	movw	r20, r18
    42be:	48 2b       	or	r20, r24
    42c0:	ca 01       	movw	r24, r20
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	1f 91       	pop	r17
    42c8:	08 95       	ret

000042ca <pne_delayms>:

#include "pne_appDelay.h"

void pne_delayms(uint16_t milisecond)
{
	uint16_t microsecond = milisecond * 1000;
    42ca:	28 ee       	ldi	r18, 0xE8	; 232
    42cc:	33 e0       	ldi	r19, 0x03	; 3
    42ce:	ac 01       	movw	r20, r24
    42d0:	42 9f       	mul	r20, r18
    42d2:	c0 01       	movw	r24, r0
    42d4:	43 9f       	mul	r20, r19
    42d6:	90 0d       	add	r25, r0
    42d8:	52 9f       	mul	r21, r18
    42da:	90 0d       	add	r25, r0
    42dc:	11 24       	eor	r1, r1
	
	for (int i=0; i<microsecond; i++)
    42de:	00 97       	sbiw	r24, 0x00	; 0
    42e0:	39 f0       	breq	.+14     	; 0x42f0 <pne_delayms+0x26>
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	2f 5f       	subi	r18, 0xFF	; 255
    42e8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ea:	28 17       	cp	r18, r24
    42ec:	39 07       	cpc	r19, r25
    42ee:	d9 f7       	brne	.-10     	; 0x42e6 <pne_delayms+0x1c>
    42f0:	08 95       	ret

000042f2 <pne_APP_TwiInit>:
#include "memoryConfig.h"


//Functions
void pne_APP_TwiInit(uint8_t slave_bus_address)
{	
    42f2:	0f 93       	push	r16
    42f4:	1f 93       	push	r17
    42f6:	cf 93       	push	r28
    42f8:	df 93       	push	r29
    42fa:	00 d0       	rcall	.+0      	; 0x42fc <pne_APP_TwiInit+0xa>
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <pne_APP_TwiInit+0xc>
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
	//TWI Declaration
	twi_master_options_t opt =
    4302:	be 01       	movw	r22, r28
    4304:	6f 5f       	subi	r22, 0xFF	; 255
    4306:	7f 4f       	sbci	r23, 0xFF	; 255
    4308:	96 e0       	ldi	r25, 0x06	; 6
    430a:	fb 01       	movw	r30, r22
    430c:	11 92       	st	Z+, r1
    430e:	9a 95       	dec	r25
    4310:	e9 f7       	brne	.-6      	; 0x430c <pne_APP_TwiInit+0x1a>
    4312:	08 e4       	ldi	r16, 0x48	; 72
    4314:	18 ee       	ldi	r17, 0xE8	; 232
    4316:	21 e0       	ldi	r18, 0x01	; 1
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	09 83       	std	Y+1, r16	; 0x01
    431c:	1a 83       	std	Y+2, r17	; 0x02
    431e:	2b 83       	std	Y+3, r18	; 0x03
    4320:	3c 83       	std	Y+4, r19	; 0x04
    4322:	8e 83       	std	Y+6, r24	; 0x06
	{
		.speed = TWI_SPEED_HZ,
		.chip  = slave_bus_address,
	};
	opt .baud_reg = TWI_CLOCK_RATE(F_CPU, opt.speed);
    4324:	88 e1       	ldi	r24, 0x18	; 24
    4326:	8d 83       	std	Y+5, r24	; 0x05
	twi_master_init(TWI_EXAMPLE,&opt);
    4328:	88 eb       	ldi	r24, 0xB8	; 184
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	0e 94 17 04 	call	0x82e	; 0x82e <twi_master_init>
}
    4330:	26 96       	adiw	r28, 0x06	; 6
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	f8 94       	cli
    4336:	de bf       	out	0x3e, r29	; 62
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	df 91       	pop	r29
    433e:	cf 91       	pop	r28
    4340:	1f 91       	pop	r17
    4342:	0f 91       	pop	r16
    4344:	08 95       	ret

00004346 <pne_APP_TwiSend>:

AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
    4346:	ef 92       	push	r14
    4348:	ff 92       	push	r15
    434a:	0f 93       	push	r16
    434c:	1f 93       	push	r17
    434e:	cf 93       	push	r28
    4350:	df 93       	push	r29
    4352:	cd b7       	in	r28, 0x3d	; 61
    4354:	de b7       	in	r29, 0x3e	; 62
    4356:	2a 97       	sbiw	r28, 0x0a	; 10
    4358:	0f b6       	in	r0, 0x3f	; 63
    435a:	f8 94       	cli
    435c:	de bf       	out	0x3e, r29	; 62
    435e:	0f be       	out	0x3f, r0	; 63
    4360:	cd bf       	out	0x3d, r28	; 61
    4362:	f9 01       	movw	r30, r18
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_WRITE_SUCCESS;
	
	twi_package_t temperature_packet =
    4364:	9e 01       	movw	r18, r28
    4366:	2f 5f       	subi	r18, 0xFF	; 255
    4368:	3f 4f       	sbci	r19, 0xFF	; 255
    436a:	79 01       	movw	r14, r18
    436c:	2a e0       	ldi	r18, 0x0A	; 10
    436e:	d7 01       	movw	r26, r14
    4370:	1d 92       	st	X+, r1
    4372:	2a 95       	dec	r18
    4374:	e9 f7       	brne	.-6      	; 0x4370 <pne_APP_TwiSend+0x2a>
    4376:	49 83       	std	Y+1, r20	; 0x01
	{
		.addr[0]      = slave_mem_addr[0],               /* TWI slave memory address data */
    4378:	dc 01       	movw	r26, r24
    437a:	3c 91       	ld	r19, X
AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_WRITE_SUCCESS;
	
	twi_package_t temperature_packet =
    437c:	3a 83       	std	Y+2, r19	; 0x02
    437e:	46 2f       	mov	r20, r22
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	5e 83       	std	Y+6, r21	; 0x06
    4384:	4d 83       	std	Y+5, r20	; 0x05
    4386:	f8 87       	std	Y+8, r31	; 0x08
    4388:	ef 83       	std	Y+7, r30	; 0x07
    438a:	10 e0       	ldi	r17, 0x00	; 0
    438c:	1a 87       	std	Y+10, r17	; 0x0a
    438e:	09 87       	std	Y+9, r16	; 0x09
		.chip         = slave_bus_address,               /* TWI slave bus address */
		.buffer       = (void *)test_pattern,            /* transfer data source buffer */
		.length       = test_pattern_length              /* transfer data size (bytes) */
	};
	
	if (slave_mem_addr_length == 1)
    4390:	61 30       	cpi	r22, 0x01	; 1
    4392:	c9 f0       	breq	.+50     	; 0x43c6 <pne_APP_TwiSend+0x80>
	{
		temperature_packet.addr[0] = slave_mem_addr[0];
	}
	else if (slave_mem_addr_length == 2)
    4394:	62 30       	cpi	r22, 0x02	; 2
    4396:	29 f4       	brne	.+10     	; 0x43a2 <pne_APP_TwiSend+0x5c>
	{
		temperature_packet.addr[0] = slave_mem_addr[1];
    4398:	11 96       	adiw	r26, 0x01	; 1
    439a:	8c 91       	ld	r24, X
    439c:	8a 83       	std	Y+2, r24	; 0x02
		temperature_packet.addr[1] = slave_mem_addr[0];
    439e:	3b 83       	std	Y+3, r19	; 0x03
    43a0:	12 c0       	rjmp	.+36     	; 0x43c6 <pne_APP_TwiSend+0x80>
	}
	else if (slave_mem_addr_length == 3)
    43a2:	63 30       	cpi	r22, 0x03	; 3
    43a4:	81 f4       	brne	.+32     	; 0x43c6 <pne_APP_TwiSend+0x80>
	{
		temperature_packet.addr[0] = slave_mem_addr[0];
		temperature_packet.addr[1] = slave_mem_addr[1];
    43a6:	fc 01       	movw	r30, r24
    43a8:	21 81       	ldd	r18, Z+1	; 0x01
    43aa:	2b 83       	std	Y+3, r18	; 0x03
		temperature_packet.addr[2] = slave_mem_addr[2];
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	8c 83       	std	Y+4, r24	; 0x04
    43b0:	0a c0       	rjmp	.+20     	; 0x43c6 <pne_APP_TwiSend+0x80>
	}
	
	while(twi_master_write(TWI_EXAMPLE,&temperature_packet) != TWI_SUCCESS)
	{
		pne_delayms(1);
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	89 df       	rcall	.-238    	; 0x42ca <pne_delayms>
    43b8:	11 50       	subi	r17, 0x01	; 1
		count++;
		if (count == 10)
    43ba:	31 f4       	brne	.+12     	; 0x43c8 <pne_APP_TwiSend+0x82>
		{
			count = 0;
			status = APP_PNEWELS_TWI_WRITE_FAIL;
			fatal_error_to_rf(twi_fatal_error);
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	0e 94 77 37 	call	0x6eee	; 0x6eee <fatal_error_to_rf>
		pne_delayms(1);
		count++;
		if (count == 10)
		{
			count = 0;
			status = APP_PNEWELS_TWI_WRITE_FAIL;
    43c2:	81 e0       	ldi	r24, 0x01	; 1
			fatal_error_to_rf(twi_fatal_error);
			break;
    43c4:	0a c0       	rjmp	.+20     	; 0x43da <pne_APP_TwiSend+0x94>
	opt .baud_reg = TWI_CLOCK_RATE(F_CPU, opt.speed);
	twi_master_init(TWI_EXAMPLE,&opt);
}

AppPNEWELS_TWIStatus_t pne_APP_TwiSend(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *test_pattern, uint8_t test_pattern_length)
{
    43c6:	1a e0       	ldi	r17, 0x0A	; 10
		temperature_packet.addr[0] = slave_mem_addr[0];
		temperature_packet.addr[1] = slave_mem_addr[1];
		temperature_packet.addr[2] = slave_mem_addr[2];
	}
	
	while(twi_master_write(TWI_EXAMPLE,&temperature_packet) != TWI_SUCCESS)
    43c8:	be 01       	movw	r22, r28
    43ca:	6f 5f       	subi	r22, 0xFF	; 255
    43cc:	7f 4f       	sbci	r23, 0xFF	; 255
    43ce:	88 eb       	ldi	r24, 0xB8	; 184
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	0e 94 b6 03 	call	0x76c	; 0x76c <twi_master_write>
    43d6:	81 11       	cpse	r24, r1
    43d8:	ec cf       	rjmp	.-40     	; 0x43b2 <pne_APP_TwiSend+0x6c>
			break;
		}
	}
	
	return status;
}
    43da:	2a 96       	adiw	r28, 0x0a	; 10
    43dc:	0f b6       	in	r0, 0x3f	; 63
    43de:	f8 94       	cli
    43e0:	de bf       	out	0x3e, r29	; 62
    43e2:	0f be       	out	0x3f, r0	; 63
    43e4:	cd bf       	out	0x3d, r28	; 61
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	1f 91       	pop	r17
    43ec:	0f 91       	pop	r16
    43ee:	ff 90       	pop	r15
    43f0:	ef 90       	pop	r14
    43f2:	08 95       	ret

000043f4 <pne_APP_TwiReceive>:

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
    43f4:	ef 92       	push	r14
    43f6:	ff 92       	push	r15
    43f8:	0f 93       	push	r16
    43fa:	1f 93       	push	r17
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
    4404:	2a 97       	sbiw	r28, 0x0a	; 10
    4406:	0f b6       	in	r0, 0x3f	; 63
    4408:	f8 94       	cli
    440a:	de bf       	out	0x3e, r29	; 62
    440c:	0f be       	out	0x3f, r0	; 63
    440e:	cd bf       	out	0x3d, r28	; 61
    4410:	f9 01       	movw	r30, r18
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
	
	twi_package_t packet_received =
    4412:	9e 01       	movw	r18, r28
    4414:	2f 5f       	subi	r18, 0xFF	; 255
    4416:	3f 4f       	sbci	r19, 0xFF	; 255
    4418:	79 01       	movw	r14, r18
    441a:	2a e0       	ldi	r18, 0x0A	; 10
    441c:	d7 01       	movw	r26, r14
    441e:	1d 92       	st	X+, r1
    4420:	2a 95       	dec	r18
    4422:	e9 f7       	brne	.-6      	; 0x441e <pne_APP_TwiReceive+0x2a>
    4424:	49 83       	std	Y+1, r20	; 0x01
	{
		.addr[0]      = slave_mem_addr[0],               /* TWI slave memory address data */
    4426:	dc 01       	movw	r26, r24
    4428:	3c 91       	ld	r19, X
AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
	
	twi_package_t packet_received =
    442a:	3a 83       	std	Y+2, r19	; 0x02
    442c:	46 2f       	mov	r20, r22
    442e:	50 e0       	ldi	r21, 0x00	; 0
    4430:	5e 83       	std	Y+6, r21	; 0x06
    4432:	4d 83       	std	Y+5, r20	; 0x05
    4434:	f8 87       	std	Y+8, r31	; 0x08
    4436:	ef 83       	std	Y+7, r30	; 0x07
    4438:	10 e0       	ldi	r17, 0x00	; 0
    443a:	1a 87       	std	Y+10, r17	; 0x0a
    443c:	09 87       	std	Y+9, r16	; 0x09
		.chip         = slave_bus_address,               /* TWI slave bus address */
		.buffer       = data_received,                   /* transfer data source buffer */
		.length       = data_received_length             /* transfer data size (bytes) */
	};
	
	if (slave_mem_addr_length == 1)
    443e:	61 30       	cpi	r22, 0x01	; 1
    4440:	c9 f0       	breq	.+50     	; 0x4474 <pne_APP_TwiReceive+0x80>
	{
		packet_received.addr[0] = slave_mem_addr[0];
	}
	else if (slave_mem_addr_length == 2)
    4442:	62 30       	cpi	r22, 0x02	; 2
    4444:	29 f4       	brne	.+10     	; 0x4450 <pne_APP_TwiReceive+0x5c>
	{
		packet_received.addr[0] = slave_mem_addr[1];
    4446:	11 96       	adiw	r26, 0x01	; 1
    4448:	8c 91       	ld	r24, X
    444a:	8a 83       	std	Y+2, r24	; 0x02
		packet_received.addr[1] = slave_mem_addr[0];
    444c:	3b 83       	std	Y+3, r19	; 0x03
    444e:	12 c0       	rjmp	.+36     	; 0x4474 <pne_APP_TwiReceive+0x80>
	}
	else if (slave_mem_addr_length == 3)
    4450:	63 30       	cpi	r22, 0x03	; 3
    4452:	81 f4       	brne	.+32     	; 0x4474 <pne_APP_TwiReceive+0x80>
	{
		packet_received.addr[0] = slave_mem_addr[0];
		packet_received.addr[1] = slave_mem_addr[1];
    4454:	fc 01       	movw	r30, r24
    4456:	21 81       	ldd	r18, Z+1	; 0x01
    4458:	2b 83       	std	Y+3, r18	; 0x03
		packet_received.addr[2] = slave_mem_addr[2];
    445a:	82 81       	ldd	r24, Z+2	; 0x02
    445c:	8c 83       	std	Y+4, r24	; 0x04
    445e:	0a c0       	rjmp	.+20     	; 0x4474 <pne_APP_TwiReceive+0x80>
		
	}
	
	while(twi_master_read(TWI_EXAMPLE,&packet_received) != TWI_SUCCESS)
	{
		pne_delayms(1);
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	32 df       	rcall	.-412    	; 0x42ca <pne_delayms>
    4466:	11 50       	subi	r17, 0x01	; 1
		count++;
		if (count == 10)
    4468:	31 f4       	brne	.+12     	; 0x4476 <pne_APP_TwiReceive+0x82>
		{
			count = 0;
			status = APP_PNEWELS_TWI_READ_FAIL;
			fatal_error_to_rf(twi_fatal_error);
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	0e 94 77 37 	call	0x6eee	; 0x6eee <fatal_error_to_rf>
		pne_delayms(1);
		count++;
		if (count == 10)
		{
			count = 0;
			status = APP_PNEWELS_TWI_READ_FAIL;
    4470:	83 e0       	ldi	r24, 0x03	; 3
			fatal_error_to_rf(twi_fatal_error);
			break;
    4472:	0b c0       	rjmp	.+22     	; 0x448a <pne_APP_TwiReceive+0x96>
	
	return status;
}

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
    4474:	1a e0       	ldi	r17, 0x0A	; 10
	else
	{
		
	}
	
	while(twi_master_read(TWI_EXAMPLE,&packet_received) != TWI_SUCCESS)
    4476:	be 01       	movw	r22, r28
    4478:	6f 5f       	subi	r22, 0xFF	; 255
    447a:	7f 4f       	sbci	r23, 0xFF	; 255
    447c:	88 eb       	ldi	r24, 0xB8	; 184
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <twi_master_read>
    4484:	81 11       	cpse	r24, r1
    4486:	ec cf       	rjmp	.-40     	; 0x4460 <pne_APP_TwiReceive+0x6c>
}

AppPNEWELS_TWIStatus_t pne_APP_TwiReceive(uint8_t *slave_mem_addr, uint8_t slave_mem_addr_length, uint8_t slave_bus_address, uint8_t *data_received, uint8_t data_received_length)
{
	uint8_t count = 0;
	AppPNEWELS_TWIStatus_t status = APP_PNEWELS_TWI_READ_SUCCESS;
    4488:	82 e0       	ldi	r24, 0x02	; 2
			break;
		}
	}
	
	return status;
}
    448a:	2a 96       	adiw	r28, 0x0a	; 10
    448c:	0f b6       	in	r0, 0x3f	; 63
    448e:	f8 94       	cli
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	cd bf       	out	0x3d, r28	; 61
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	1f 91       	pop	r17
    449c:	0f 91       	pop	r16
    449e:	ff 90       	pop	r15
    44a0:	ef 90       	pop	r14
    44a2:	08 95       	ret

000044a4 <PNEWELSE2promWrite>:
	

}

void PNEWELSE2promWrite(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2, uint8_t memory_data)
{
    44a4:	ff 92       	push	r15
    44a6:	0f 93       	push	r16
    44a8:	1f 93       	push	r17
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	00 d0       	rcall	.+0      	; 0x44b0 <PNEWELSE2promWrite+0xc>
    44b0:	cd b7       	in	r28, 0x3d	; 61
    44b2:	de b7       	in	r29, 0x3e	; 62
    44b4:	18 2f       	mov	r17, r24
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
    44b6:	65 34       	cpi	r22, 0x45	; 69
    44b8:	19 f0       	breq	.+6      	; 0x44c0 <PNEWELSE2promWrite+0x1c>
	{
		e2prom_address_length = 2;
	}
	else
	{
		e2prom_address_length = 1;
    44ba:	ff 24       	eor	r15, r15
    44bc:	f3 94       	inc	r15
    44be:	03 c0       	rjmp	.+6      	; 0x44c6 <PNEWELSE2promWrite+0x22>
void PNEWELSE2promWrite(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2, uint8_t memory_data)
{
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
	{
		e2prom_address_length = 2;
    44c0:	68 94       	set
    44c2:	ff 24       	eor	r15, r15
    44c4:	f1 f8       	bld	r15, 1
	else
	{
		e2prom_address_length = 1;
	}
	uint8_t e2prom_write_address = address;
	uint8_t e2prom_address[2] =
    44c6:	49 83       	std	Y+1, r20	; 0x01
    44c8:	2a 83       	std	Y+2, r18	; 0x02
	{
		memory_loc_1,
		memory_loc_2,
	};
	uint8_t write_data[1] =
    44ca:	0b 83       	std	Y+3, r16	; 0x03
	{
		memory_data,
	};
	
	pne_APP_TwiInit(e2prom_write_address);
    44cc:	81 2f       	mov	r24, r17
    44ce:	11 df       	rcall	.-478    	; 0x42f2 <pne_APP_TwiInit>
	
	pne_APP_TwiSend(e2prom_address, e2prom_address_length, e2prom_write_address, write_data, 1);
    44d0:	01 e0       	ldi	r16, 0x01	; 1
    44d2:	9e 01       	movw	r18, r28
    44d4:	2d 5f       	subi	r18, 0xFD	; 253
    44d6:	3f 4f       	sbci	r19, 0xFF	; 255
    44d8:	41 2f       	mov	r20, r17
    44da:	6f 2d       	mov	r22, r15
    44dc:	ce 01       	movw	r24, r28
    44de:	01 96       	adiw	r24, 0x01	; 1
    44e0:	32 df       	rcall	.-412    	; 0x4346 <pne_APP_TwiSend>
	pne_delayms(5);
    44e2:	85 e0       	ldi	r24, 0x05	; 5
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	f1 de       	rcall	.-542    	; 0x42ca <pne_delayms>
}
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	df 91       	pop	r29
    44f0:	cf 91       	pop	r28
    44f2:	1f 91       	pop	r17
    44f4:	0f 91       	pop	r16
    44f6:	ff 90       	pop	r15
    44f8:	08 95       	ret

000044fa <PNEWELSE2promRead>:

uint8_t PNEWELSE2promRead(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2)
{
    44fa:	ff 92       	push	r15
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	00 d0       	rcall	.+0      	; 0x4506 <PNEWELSE2promRead+0xc>
    4506:	1f 92       	push	r1
    4508:	cd b7       	in	r28, 0x3d	; 61
    450a:	de b7       	in	r29, 0x3e	; 62
    450c:	18 2f       	mov	r17, r24
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
    450e:	65 34       	cpi	r22, 0x45	; 69
    4510:	19 f0       	breq	.+6      	; 0x4518 <PNEWELSE2promRead+0x1e>
	{
		e2prom_address_length = 2;
	}
	else
	{
		e2prom_address_length = 1;
    4512:	ff 24       	eor	r15, r15
    4514:	f3 94       	inc	r15
    4516:	03 c0       	rjmp	.+6      	; 0x451e <PNEWELSE2promRead+0x24>
uint8_t PNEWELSE2promRead(uint8_t address, char in_ex_type, uint8_t memory_loc_1, uint8_t memory_loc_2)
{
	uint8_t e2prom_address_length = 0;
	if (in_ex_type == 'E')
	{
		e2prom_address_length = 2;
    4518:	68 94       	set
    451a:	ff 24       	eor	r15, r15
    451c:	f1 f8       	bld	r15, 1
	else
	{
		e2prom_address_length = 1;
	}
	uint8_t e2prom_read_address = address;
	uint8_t e2prom_address[2] =
    451e:	49 83       	std	Y+1, r20	; 0x01
    4520:	2a 83       	std	Y+2, r18	; 0x02
	{
		memory_loc_1,
		memory_loc_2,
	};
	uint8_t read_data[2] = {0,0};
    4522:	1b 82       	std	Y+3, r1	; 0x03
    4524:	1c 82       	std	Y+4, r1	; 0x04
	
	pne_APP_TwiInit(e2prom_read_address);
    4526:	81 2f       	mov	r24, r17
    4528:	e4 de       	rcall	.-568    	; 0x42f2 <pne_APP_TwiInit>
	
	pne_APP_TwiReceive(e2prom_address, e2prom_address_length, e2prom_read_address, read_data, 1);
    452a:	01 e0       	ldi	r16, 0x01	; 1
    452c:	9e 01       	movw	r18, r28
    452e:	2d 5f       	subi	r18, 0xFD	; 253
    4530:	3f 4f       	sbci	r19, 0xFF	; 255
    4532:	41 2f       	mov	r20, r17
    4534:	6f 2d       	mov	r22, r15
    4536:	ce 01       	movw	r24, r28
    4538:	01 96       	adiw	r24, 0x01	; 1
    453a:	5c df       	rcall	.-328    	; 0x43f4 <pne_APP_TwiReceive>
	
	return read_data[0];
}
    453c:	8b 81       	ldd	r24, Y+3	; 0x03
    453e:	0f 90       	pop	r0
    4540:	0f 90       	pop	r0
    4542:	0f 90       	pop	r0
    4544:	0f 90       	pop	r0
    4546:	df 91       	pop	r29
    4548:	cf 91       	pop	r28
    454a:	1f 91       	pop	r17
    454c:	0f 91       	pop	r16
    454e:	ff 90       	pop	r15
    4550:	08 95       	ret

00004552 <PNEWELSTemperatureRead>:

uint8_t PNEWELSTemperatureRead(void)
{
    4552:	0f 93       	push	r16
    4554:	cf 93       	push	r28
    4556:	df 93       	push	r29
    4558:	00 d0       	rcall	.+0      	; 0x455a <PNEWELSTemperatureRead+0x8>
    455a:	1f 92       	push	r1
    455c:	cd b7       	in	r28, 0x3d	; 61
    455e:	de b7       	in	r29, 0x3e	; 62
	uint8_t temperature_write_address = 0x90;
	uint8_t temperature_read_address = 0x91;
	uint8_t temperature_register[2] =
    4560:	19 82       	std	Y+1, r1	; 0x01
    4562:	1a 82       	std	Y+2, r1	; 0x02
	{
		0x00,
		0x00,
	};
	uint8_t data_received[2] = {0, 0};
    4564:	1b 82       	std	Y+3, r1	; 0x03
    4566:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t data = 0;
	
	pne_APP_TwiInit(temperature_write_address);
    4568:	80 e9       	ldi	r24, 0x90	; 144
    456a:	c3 de       	rcall	.-634    	; 0x42f2 <pne_APP_TwiInit>
	
	if (pne_APP_TwiSend(temperature_register, 1, temperature_write_address, 0, 0) == APP_PNEWELS_TWI_WRITE_SUCCESS)
    456c:	00 e0       	ldi	r16, 0x00	; 0
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	40 e9       	ldi	r20, 0x90	; 144
    4574:	61 e0       	ldi	r22, 0x01	; 1
    4576:	ce 01       	movw	r24, r28
    4578:	01 96       	adiw	r24, 0x01	; 1
    457a:	e5 de       	rcall	.-566    	; 0x4346 <pne_APP_TwiSend>
    457c:	81 11       	cpse	r24, r1
    457e:	09 c0       	rjmp	.+18     	; 0x4592 <PNEWELSTemperatureRead+0x40>
	{
		pne_APP_TwiReceive(temperature_register, 1, temperature_read_address, data_received, 2);
    4580:	02 e0       	ldi	r16, 0x02	; 2
    4582:	9e 01       	movw	r18, r28
    4584:	2d 5f       	subi	r18, 0xFD	; 253
    4586:	3f 4f       	sbci	r19, 0xFF	; 255
    4588:	41 e9       	ldi	r20, 0x91	; 145
    458a:	61 e0       	ldi	r22, 0x01	; 1
    458c:	ce 01       	movw	r24, r28
    458e:	01 96       	adiw	r24, 0x01	; 1
    4590:	31 df       	rcall	.-414    	; 0x43f4 <pne_APP_TwiReceive>
	}
	
	data = (data_received[0]<<1) / 2;
    4592:	8b 81       	ldd	r24, Y+3	; 0x03
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	88 0f       	add	r24, r24
    4598:	99 1f       	adc	r25, r25
    459a:	95 95       	asr	r25
    459c:	87 95       	ror	r24

	return data;
}
    459e:	0f 90       	pop	r0
    45a0:	0f 90       	pop	r0
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	0f 91       	pop	r16
    45ac:	08 95       	ret

000045ae <clre2prom>:

void clre2prom()
{
    45ae:	0f 93       	push	r16
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    45b4:	c0 e0       	ldi	r28, 0x00	; 0
    45b6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0xFF);
    45b8:	0f ef       	ldi	r16, 0xFF	; 255
    45ba:	2d 2f       	mov	r18, r29
    45bc:	4c 2f       	mov	r20, r28
    45be:	65 e4       	ldi	r22, 0x45	; 69
    45c0:	8e ea       	ldi	r24, 0xAE	; 174
    45c2:	70 df       	rcall	.-288    	; 0x44a4 <PNEWELSE2promWrite>
		pne_delayms(10);
    45c4:	8a e0       	ldi	r24, 0x0A	; 10
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	80 de       	rcall	.-768    	; 0x42ca <pne_delayms>
		wdt_reset();
    45ca:	a8 95       	wdr
void clre2prom()
{
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    45cc:	21 96       	adiw	r28, 0x01	; 1
    45ce:	cc 3f       	cpi	r28, 0xFC	; 252
    45d0:	8f e0       	ldi	r24, 0x0F	; 15
    45d2:	d8 07       	cpc	r29, r24
    45d4:	89 f7       	brne	.-30     	; 0x45b8 <clre2prom+0xa>
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0xFF);
		pne_delayms(10);
		wdt_reset();
	}
	
	memory_address_incr = 0;
    45d6:	10 92 e9 20 	sts	0x20E9, r1
    45da:	10 92 e8 20 	sts	0x20E8, r1
}
    45de:	df 91       	pop	r29
    45e0:	cf 91       	pop	r28
    45e2:	0f 91       	pop	r16
    45e4:	08 95       	ret

000045e6 <memoryCounter_init>:

void memoryCounter_init()
{
    45e6:	cf 93       	push	r28
    45e8:	df 93       	push	r29
	uint8_t cache = 0;
	for (uint16_t counter = 0; counter<4092; counter = counter + 11)
    45ea:	c0 e0       	ldi	r28, 0x00	; 0
    45ec:	d0 e0       	ldi	r29, 0x00	; 0
	{
		cache = readE2prom(counter);
    45ee:	ce 01       	movw	r24, r28
    45f0:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <readE2prom>
		if(cache == 0xFF)
    45f4:	8f 3f       	cpi	r24, 0xFF	; 255
    45f6:	29 f4       	brne	.+10     	; 0x4602 <memoryCounter_init+0x1c>
		{
			memory_address_incr = counter;
    45f8:	d0 93 e9 20 	sts	0x20E9, r29
    45fc:	c0 93 e8 20 	sts	0x20E8, r28
			break;
    4600:	05 c0       	rjmp	.+10     	; 0x460c <memoryCounter_init+0x26>
}

void memoryCounter_init()
{
	uint8_t cache = 0;
	for (uint16_t counter = 0; counter<4092; counter = counter + 11)
    4602:	2b 96       	adiw	r28, 0x0b	; 11
    4604:	cc 3f       	cpi	r28, 0xFC	; 252
    4606:	8f e0       	ldi	r24, 0x0F	; 15
    4608:	d8 07       	cpc	r29, r24
    460a:	89 f7       	brne	.-30     	; 0x45ee <memoryCounter_init+0x8>
		{
			memory_address_incr = counter;
			break;
		}
	}
}
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	08 95       	ret

00004612 <memoryCounter_save>:

void memoryCounter_save(uint16_t log_counter)
{
	writeE2prom(log_counter, 0xFF);
    4612:	6f ef       	ldi	r22, 0xFF	; 255
    4614:	0c 94 50 31 	jmp	0x62a0	; 0x62a0 <writeE2prom>
    4618:	08 95       	ret

0000461a <store>:
	
	return status;
}

void store(store_seq_t seq)
{
    461a:	2f 92       	push	r2
    461c:	3f 92       	push	r3
    461e:	4f 92       	push	r4
    4620:	5f 92       	push	r5
    4622:	6f 92       	push	r6
    4624:	7f 92       	push	r7
    4626:	8f 92       	push	r8
    4628:	9f 92       	push	r9
    462a:	af 92       	push	r10
    462c:	bf 92       	push	r11
    462e:	cf 92       	push	r12
    4630:	df 92       	push	r13
    4632:	ef 92       	push	r14
    4634:	ff 92       	push	r15
    4636:	0f 93       	push	r16
    4638:	1f 93       	push	r17
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
    4642:	6e 97       	sbiw	r28, 0x1e	; 30
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	de bf       	out	0x3e, r29	; 62
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	cd bf       	out	0x3d, r28	; 61
	uint8_t time_4_byte = 0;
	uint8_t status_byte1 = 0;
	uint8_t status_byte2 = 0;
	uint8_t status_byte3 = 0;

	if (seq == charge_start)
    464e:	81 11       	cpse	r24, r1
    4650:	3f c0       	rjmp	.+126    	; 0x46d0 <store+0xb6>
	{
		if (memory_address_incr >= 4092)
    4652:	80 91 e8 20 	lds	r24, 0x20E8
    4656:	90 91 e9 20 	lds	r25, 0x20E9
    465a:	8c 3f       	cpi	r24, 0xFC	; 252
    465c:	9f 40       	sbci	r25, 0x0F	; 15
    465e:	20 f0       	brcs	.+8      	; 0x4668 <store+0x4e>
		{
			memory_address_incr = 0;
    4660:	10 92 e9 20 	sts	0x20E9, r1
    4664:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4668:	40 91 e8 20 	lds	r20, 0x20E8
    466c:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    4670:	03 e4       	ldi	r16, 0x43	; 67
    4672:	65 e4       	ldi	r22, 0x45	; 69
    4674:	8e ea       	ldi	r24, 0xAE	; 174
    4676:	16 df       	rcall	.-468    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4678:	80 91 e8 20 	lds	r24, 0x20E8
    467c:	90 91 e9 20 	lds	r25, 0x20E9
    4680:	01 96       	adiw	r24, 0x01	; 1
    4682:	90 93 e9 20 	sts	0x20E9, r25
    4686:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    468a:	8a e0       	ldi	r24, 0x0A	; 10
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	1d de       	rcall	.-966    	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    4690:	80 91 e8 20 	lds	r24, 0x20E8
    4694:	90 91 e9 20 	lds	r25, 0x20E9
    4698:	8c 3f       	cpi	r24, 0xFC	; 252
    469a:	9f 40       	sbci	r25, 0x0F	; 15
    469c:	20 f0       	brcs	.+8      	; 0x46a6 <store+0x8c>
		{
			memory_address_incr = 0;
    469e:	10 92 e9 20 	sts	0x20E9, r1
    46a2:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    46a6:	40 91 e8 20 	lds	r20, 0x20E8
    46aa:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    46ae:	03 e5       	ldi	r16, 0x53	; 83
    46b0:	65 e4       	ldi	r22, 0x45	; 69
    46b2:	8e ea       	ldi	r24, 0xAE	; 174
    46b4:	f7 de       	rcall	.-530    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    46b6:	80 91 e8 20 	lds	r24, 0x20E8
    46ba:	90 91 e9 20 	lds	r25, 0x20E9
    46be:	01 96       	adiw	r24, 0x01	; 1
    46c0:	90 93 e9 20 	sts	0x20E9, r25
    46c4:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    46c8:	8a e0       	ldi	r24, 0x0A	; 10
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	fe dd       	rcall	.-1028   	; 0x42ca <pne_delayms>
    46ce:	0c c2       	rjmp	.+1048   	; 0x4ae8 <store+0x4ce>
	}
	else if (seq == charge_end)
    46d0:	81 30       	cpi	r24, 0x01	; 1
    46d2:	09 f0       	breq	.+2      	; 0x46d6 <store+0xbc>
    46d4:	3f c0       	rjmp	.+126    	; 0x4754 <store+0x13a>
	{
		if (memory_address_incr >= 4092)
    46d6:	80 91 e8 20 	lds	r24, 0x20E8
    46da:	90 91 e9 20 	lds	r25, 0x20E9
    46de:	8c 3f       	cpi	r24, 0xFC	; 252
    46e0:	9f 40       	sbci	r25, 0x0F	; 15
    46e2:	20 f0       	brcs	.+8      	; 0x46ec <store+0xd2>
		{
			memory_address_incr = 0;
    46e4:	10 92 e9 20 	sts	0x20E9, r1
    46e8:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    46ec:	40 91 e8 20 	lds	r20, 0x20E8
    46f0:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    46f4:	03 e4       	ldi	r16, 0x43	; 67
    46f6:	65 e4       	ldi	r22, 0x45	; 69
    46f8:	8e ea       	ldi	r24, 0xAE	; 174
    46fa:	d4 de       	rcall	.-600    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    46fc:	80 91 e8 20 	lds	r24, 0x20E8
    4700:	90 91 e9 20 	lds	r25, 0x20E9
    4704:	01 96       	adiw	r24, 0x01	; 1
    4706:	90 93 e9 20 	sts	0x20E9, r25
    470a:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    470e:	8a e0       	ldi	r24, 0x0A	; 10
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	db dd       	rcall	.-1098   	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    4714:	80 91 e8 20 	lds	r24, 0x20E8
    4718:	90 91 e9 20 	lds	r25, 0x20E9
    471c:	8c 3f       	cpi	r24, 0xFC	; 252
    471e:	9f 40       	sbci	r25, 0x0F	; 15
    4720:	20 f0       	brcs	.+8      	; 0x472a <store+0x110>
		{
			memory_address_incr = 0;
    4722:	10 92 e9 20 	sts	0x20E9, r1
    4726:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    472a:	40 91 e8 20 	lds	r20, 0x20E8
    472e:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    4732:	05 e4       	ldi	r16, 0x45	; 69
    4734:	65 e4       	ldi	r22, 0x45	; 69
    4736:	8e ea       	ldi	r24, 0xAE	; 174
    4738:	b5 de       	rcall	.-662    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    473a:	80 91 e8 20 	lds	r24, 0x20E8
    473e:	90 91 e9 20 	lds	r25, 0x20E9
    4742:	01 96       	adiw	r24, 0x01	; 1
    4744:	90 93 e9 20 	sts	0x20E9, r25
    4748:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    474c:	8a e0       	ldi	r24, 0x0A	; 10
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	bc dd       	rcall	.-1160   	; 0x42ca <pne_delayms>
    4752:	ca c1       	rjmp	.+916    	; 0x4ae8 <store+0x4ce>
	}
	else if (seq == discharge_start)
    4754:	82 30       	cpi	r24, 0x02	; 2
    4756:	09 f0       	breq	.+2      	; 0x475a <store+0x140>
    4758:	3f c0       	rjmp	.+126    	; 0x47d8 <store+0x1be>
	{
		if (memory_address_incr >= 4092)
    475a:	80 91 e8 20 	lds	r24, 0x20E8
    475e:	90 91 e9 20 	lds	r25, 0x20E9
    4762:	8c 3f       	cpi	r24, 0xFC	; 252
    4764:	9f 40       	sbci	r25, 0x0F	; 15
    4766:	20 f0       	brcs	.+8      	; 0x4770 <store+0x156>
		{
			memory_address_incr = 0;
    4768:	10 92 e9 20 	sts	0x20E9, r1
    476c:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4770:	40 91 e8 20 	lds	r20, 0x20E8
    4774:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    4778:	04 e4       	ldi	r16, 0x44	; 68
    477a:	65 e4       	ldi	r22, 0x45	; 69
    477c:	8e ea       	ldi	r24, 0xAE	; 174
    477e:	92 de       	rcall	.-732    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4780:	80 91 e8 20 	lds	r24, 0x20E8
    4784:	90 91 e9 20 	lds	r25, 0x20E9
    4788:	01 96       	adiw	r24, 0x01	; 1
    478a:	90 93 e9 20 	sts	0x20E9, r25
    478e:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    4792:	8a e0       	ldi	r24, 0x0A	; 10
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	99 dd       	rcall	.-1230   	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    4798:	80 91 e8 20 	lds	r24, 0x20E8
    479c:	90 91 e9 20 	lds	r25, 0x20E9
    47a0:	8c 3f       	cpi	r24, 0xFC	; 252
    47a2:	9f 40       	sbci	r25, 0x0F	; 15
    47a4:	20 f0       	brcs	.+8      	; 0x47ae <store+0x194>
		{
			memory_address_incr = 0;
    47a6:	10 92 e9 20 	sts	0x20E9, r1
    47aa:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    47ae:	40 91 e8 20 	lds	r20, 0x20E8
    47b2:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    47b6:	03 e5       	ldi	r16, 0x53	; 83
    47b8:	65 e4       	ldi	r22, 0x45	; 69
    47ba:	8e ea       	ldi	r24, 0xAE	; 174
    47bc:	73 de       	rcall	.-794    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    47be:	80 91 e8 20 	lds	r24, 0x20E8
    47c2:	90 91 e9 20 	lds	r25, 0x20E9
    47c6:	01 96       	adiw	r24, 0x01	; 1
    47c8:	90 93 e9 20 	sts	0x20E9, r25
    47cc:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    47d0:	8a e0       	ldi	r24, 0x0A	; 10
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	7a dd       	rcall	.-1292   	; 0x42ca <pne_delayms>
    47d6:	88 c1       	rjmp	.+784    	; 0x4ae8 <store+0x4ce>
	}
	else if (seq == discharge_end)
    47d8:	83 30       	cpi	r24, 0x03	; 3
    47da:	09 f0       	breq	.+2      	; 0x47de <store+0x1c4>
    47dc:	3f c0       	rjmp	.+126    	; 0x485c <store+0x242>
	{
		if (memory_address_incr >= 4092)
    47de:	80 91 e8 20 	lds	r24, 0x20E8
    47e2:	90 91 e9 20 	lds	r25, 0x20E9
    47e6:	8c 3f       	cpi	r24, 0xFC	; 252
    47e8:	9f 40       	sbci	r25, 0x0F	; 15
    47ea:	20 f0       	brcs	.+8      	; 0x47f4 <store+0x1da>
		{
			memory_address_incr = 0;
    47ec:	10 92 e9 20 	sts	0x20E9, r1
    47f0:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    47f4:	40 91 e8 20 	lds	r20, 0x20E8
    47f8:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    47fc:	04 e4       	ldi	r16, 0x44	; 68
    47fe:	65 e4       	ldi	r22, 0x45	; 69
    4800:	8e ea       	ldi	r24, 0xAE	; 174
    4802:	50 de       	rcall	.-864    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4804:	80 91 e8 20 	lds	r24, 0x20E8
    4808:	90 91 e9 20 	lds	r25, 0x20E9
    480c:	01 96       	adiw	r24, 0x01	; 1
    480e:	90 93 e9 20 	sts	0x20E9, r25
    4812:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    4816:	8a e0       	ldi	r24, 0x0A	; 10
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	57 dd       	rcall	.-1362   	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    481c:	80 91 e8 20 	lds	r24, 0x20E8
    4820:	90 91 e9 20 	lds	r25, 0x20E9
    4824:	8c 3f       	cpi	r24, 0xFC	; 252
    4826:	9f 40       	sbci	r25, 0x0F	; 15
    4828:	20 f0       	brcs	.+8      	; 0x4832 <store+0x218>
		{
			memory_address_incr = 0;
    482a:	10 92 e9 20 	sts	0x20E9, r1
    482e:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4832:	40 91 e8 20 	lds	r20, 0x20E8
    4836:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    483a:	05 e4       	ldi	r16, 0x45	; 69
    483c:	65 e4       	ldi	r22, 0x45	; 69
    483e:	8e ea       	ldi	r24, 0xAE	; 174
    4840:	31 de       	rcall	.-926    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4842:	80 91 e8 20 	lds	r24, 0x20E8
    4846:	90 91 e9 20 	lds	r25, 0x20E9
    484a:	01 96       	adiw	r24, 0x01	; 1
    484c:	90 93 e9 20 	sts	0x20E9, r25
    4850:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    4854:	8a e0       	ldi	r24, 0x0A	; 10
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	38 dd       	rcall	.-1424   	; 0x42ca <pne_delayms>
    485a:	46 c1       	rjmp	.+652    	; 0x4ae8 <store+0x4ce>
	}
	else if (seq == emergency_start)
    485c:	84 30       	cpi	r24, 0x04	; 4
    485e:	09 f0       	breq	.+2      	; 0x4862 <store+0x248>
    4860:	3f c0       	rjmp	.+126    	; 0x48e0 <store+0x2c6>
	{
		if (memory_address_incr >= 4092)
    4862:	80 91 e8 20 	lds	r24, 0x20E8
    4866:	90 91 e9 20 	lds	r25, 0x20E9
    486a:	8c 3f       	cpi	r24, 0xFC	; 252
    486c:	9f 40       	sbci	r25, 0x0F	; 15
    486e:	20 f0       	brcs	.+8      	; 0x4878 <store+0x25e>
		{
			memory_address_incr = 0;
    4870:	10 92 e9 20 	sts	0x20E9, r1
    4874:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4878:	40 91 e8 20 	lds	r20, 0x20E8
    487c:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    4880:	05 e4       	ldi	r16, 0x45	; 69
    4882:	65 e4       	ldi	r22, 0x45	; 69
    4884:	8e ea       	ldi	r24, 0xAE	; 174
    4886:	0e de       	rcall	.-996    	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4888:	80 91 e8 20 	lds	r24, 0x20E8
    488c:	90 91 e9 20 	lds	r25, 0x20E9
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	90 93 e9 20 	sts	0x20E9, r25
    4896:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    489a:	8a e0       	ldi	r24, 0x0A	; 10
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	15 dd       	rcall	.-1494   	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    48a0:	80 91 e8 20 	lds	r24, 0x20E8
    48a4:	90 91 e9 20 	lds	r25, 0x20E9
    48a8:	8c 3f       	cpi	r24, 0xFC	; 252
    48aa:	9f 40       	sbci	r25, 0x0F	; 15
    48ac:	20 f0       	brcs	.+8      	; 0x48b6 <store+0x29c>
		{
			memory_address_incr = 0;
    48ae:	10 92 e9 20 	sts	0x20E9, r1
    48b2:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    48b6:	40 91 e8 20 	lds	r20, 0x20E8
    48ba:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x53);
    48be:	03 e5       	ldi	r16, 0x53	; 83
    48c0:	65 e4       	ldi	r22, 0x45	; 69
    48c2:	8e ea       	ldi	r24, 0xAE	; 174
    48c4:	ef dd       	rcall	.-1058   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    48c6:	80 91 e8 20 	lds	r24, 0x20E8
    48ca:	90 91 e9 20 	lds	r25, 0x20E9
    48ce:	01 96       	adiw	r24, 0x01	; 1
    48d0:	90 93 e9 20 	sts	0x20E9, r25
    48d4:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    48d8:	8a e0       	ldi	r24, 0x0A	; 10
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	f6 dc       	rcall	.-1556   	; 0x42ca <pne_delayms>
    48de:	04 c1       	rjmp	.+520    	; 0x4ae8 <store+0x4ce>
	}
	else if (seq == emergency_end)
    48e0:	85 30       	cpi	r24, 0x05	; 5
    48e2:	09 f0       	breq	.+2      	; 0x48e6 <store+0x2cc>
    48e4:	3f c0       	rjmp	.+126    	; 0x4964 <store+0x34a>
	{
		if (memory_address_incr >= 4092)
    48e6:	80 91 e8 20 	lds	r24, 0x20E8
    48ea:	90 91 e9 20 	lds	r25, 0x20E9
    48ee:	8c 3f       	cpi	r24, 0xFC	; 252
    48f0:	9f 40       	sbci	r25, 0x0F	; 15
    48f2:	20 f0       	brcs	.+8      	; 0x48fc <store+0x2e2>
		{
			memory_address_incr = 0;
    48f4:	10 92 e9 20 	sts	0x20E9, r1
    48f8:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    48fc:	40 91 e8 20 	lds	r20, 0x20E8
    4900:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    4904:	05 e4       	ldi	r16, 0x45	; 69
    4906:	65 e4       	ldi	r22, 0x45	; 69
    4908:	8e ea       	ldi	r24, 0xAE	; 174
    490a:	cc dd       	rcall	.-1128   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    490c:	80 91 e8 20 	lds	r24, 0x20E8
    4910:	90 91 e9 20 	lds	r25, 0x20E9
    4914:	01 96       	adiw	r24, 0x01	; 1
    4916:	90 93 e9 20 	sts	0x20E9, r25
    491a:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    491e:	8a e0       	ldi	r24, 0x0A	; 10
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	d3 dc       	rcall	.-1626   	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    4924:	80 91 e8 20 	lds	r24, 0x20E8
    4928:	90 91 e9 20 	lds	r25, 0x20E9
    492c:	8c 3f       	cpi	r24, 0xFC	; 252
    492e:	9f 40       	sbci	r25, 0x0F	; 15
    4930:	20 f0       	brcs	.+8      	; 0x493a <store+0x320>
		{
			memory_address_incr = 0;
    4932:	10 92 e9 20 	sts	0x20E9, r1
    4936:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    493a:	40 91 e8 20 	lds	r20, 0x20E8
    493e:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x45);
    4942:	05 e4       	ldi	r16, 0x45	; 69
    4944:	65 e4       	ldi	r22, 0x45	; 69
    4946:	8e ea       	ldi	r24, 0xAE	; 174
    4948:	ad dd       	rcall	.-1190   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    494a:	80 91 e8 20 	lds	r24, 0x20E8
    494e:	90 91 e9 20 	lds	r25, 0x20E9
    4952:	01 96       	adiw	r24, 0x01	; 1
    4954:	90 93 e9 20 	sts	0x20E9, r25
    4958:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    495c:	8a e0       	ldi	r24, 0x0A	; 10
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	b4 dc       	rcall	.-1688   	; 0x42ca <pne_delayms>
    4962:	c2 c0       	rjmp	.+388    	; 0x4ae8 <store+0x4ce>
	}
	else if (seq == battery_charged)
    4964:	86 30       	cpi	r24, 0x06	; 6
    4966:	09 f0       	breq	.+2      	; 0x496a <store+0x350>
    4968:	3f c0       	rjmp	.+126    	; 0x49e8 <store+0x3ce>
	{
		if (memory_address_incr >= 4092)
    496a:	80 91 e8 20 	lds	r24, 0x20E8
    496e:	90 91 e9 20 	lds	r25, 0x20E9
    4972:	8c 3f       	cpi	r24, 0xFC	; 252
    4974:	9f 40       	sbci	r25, 0x0F	; 15
    4976:	20 f0       	brcs	.+8      	; 0x4980 <store+0x366>
		{
			memory_address_incr = 0;
    4978:	10 92 e9 20 	sts	0x20E9, r1
    497c:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4980:	40 91 e8 20 	lds	r20, 0x20E8
    4984:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x42);
    4988:	02 e4       	ldi	r16, 0x42	; 66
    498a:	65 e4       	ldi	r22, 0x45	; 69
    498c:	8e ea       	ldi	r24, 0xAE	; 174
    498e:	8a dd       	rcall	.-1260   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4990:	80 91 e8 20 	lds	r24, 0x20E8
    4994:	90 91 e9 20 	lds	r25, 0x20E9
    4998:	01 96       	adiw	r24, 0x01	; 1
    499a:	90 93 e9 20 	sts	0x20E9, r25
    499e:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    49a2:	8a e0       	ldi	r24, 0x0A	; 10
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	91 dc       	rcall	.-1758   	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    49a8:	80 91 e8 20 	lds	r24, 0x20E8
    49ac:	90 91 e9 20 	lds	r25, 0x20E9
    49b0:	8c 3f       	cpi	r24, 0xFC	; 252
    49b2:	9f 40       	sbci	r25, 0x0F	; 15
    49b4:	20 f0       	brcs	.+8      	; 0x49be <store+0x3a4>
		{
			memory_address_incr = 0;
    49b6:	10 92 e9 20 	sts	0x20E9, r1
    49ba:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    49be:	40 91 e8 20 	lds	r20, 0x20E8
    49c2:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x43);
    49c6:	03 e4       	ldi	r16, 0x43	; 67
    49c8:	65 e4       	ldi	r22, 0x45	; 69
    49ca:	8e ea       	ldi	r24, 0xAE	; 174
    49cc:	6b dd       	rcall	.-1322   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    49ce:	80 91 e8 20 	lds	r24, 0x20E8
    49d2:	90 91 e9 20 	lds	r25, 0x20E9
    49d6:	01 96       	adiw	r24, 0x01	; 1
    49d8:	90 93 e9 20 	sts	0x20E9, r25
    49dc:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    49e0:	8a e0       	ldi	r24, 0x0A	; 10
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	72 dc       	rcall	.-1820   	; 0x42ca <pne_delayms>
    49e6:	80 c0       	rjmp	.+256    	; 0x4ae8 <store+0x4ce>
	}
	else if (seq == battery_discharged)
    49e8:	87 30       	cpi	r24, 0x07	; 7
    49ea:	09 f0       	breq	.+2      	; 0x49ee <store+0x3d4>
    49ec:	3f c0       	rjmp	.+126    	; 0x4a6c <store+0x452>
	{
		if (memory_address_incr >= 4092)
    49ee:	80 91 e8 20 	lds	r24, 0x20E8
    49f2:	90 91 e9 20 	lds	r25, 0x20E9
    49f6:	8c 3f       	cpi	r24, 0xFC	; 252
    49f8:	9f 40       	sbci	r25, 0x0F	; 15
    49fa:	20 f0       	brcs	.+8      	; 0x4a04 <store+0x3ea>
		{
			memory_address_incr = 0;
    49fc:	10 92 e9 20 	sts	0x20E9, r1
    4a00:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a04:	40 91 e8 20 	lds	r20, 0x20E8
    4a08:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x42);
    4a0c:	02 e4       	ldi	r16, 0x42	; 66
    4a0e:	65 e4       	ldi	r22, 0x45	; 69
    4a10:	8e ea       	ldi	r24, 0xAE	; 174
    4a12:	48 dd       	rcall	.-1392   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4a14:	80 91 e8 20 	lds	r24, 0x20E8
    4a18:	90 91 e9 20 	lds	r25, 0x20E9
    4a1c:	01 96       	adiw	r24, 0x01	; 1
    4a1e:	90 93 e9 20 	sts	0x20E9, r25
    4a22:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    4a26:	8a e0       	ldi	r24, 0x0A	; 10
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	4f dc       	rcall	.-1890   	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    4a2c:	80 91 e8 20 	lds	r24, 0x20E8
    4a30:	90 91 e9 20 	lds	r25, 0x20E9
    4a34:	8c 3f       	cpi	r24, 0xFC	; 252
    4a36:	9f 40       	sbci	r25, 0x0F	; 15
    4a38:	20 f0       	brcs	.+8      	; 0x4a42 <store+0x428>
		{
			memory_address_incr = 0;
    4a3a:	10 92 e9 20 	sts	0x20E9, r1
    4a3e:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a42:	40 91 e8 20 	lds	r20, 0x20E8
    4a46:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x44);
    4a4a:	04 e4       	ldi	r16, 0x44	; 68
    4a4c:	65 e4       	ldi	r22, 0x45	; 69
    4a4e:	8e ea       	ldi	r24, 0xAE	; 174
    4a50:	29 dd       	rcall	.-1454   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4a52:	80 91 e8 20 	lds	r24, 0x20E8
    4a56:	90 91 e9 20 	lds	r25, 0x20E9
    4a5a:	01 96       	adiw	r24, 0x01	; 1
    4a5c:	90 93 e9 20 	sts	0x20E9, r25
    4a60:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    4a64:	8a e0       	ldi	r24, 0x0A	; 10
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	30 dc       	rcall	.-1952   	; 0x42ca <pne_delayms>
    4a6a:	3e c0       	rjmp	.+124    	; 0x4ae8 <store+0x4ce>
	}
	else
	{
		if (memory_address_incr >= 4092)
    4a6c:	80 91 e8 20 	lds	r24, 0x20E8
    4a70:	90 91 e9 20 	lds	r25, 0x20E9
    4a74:	8c 3f       	cpi	r24, 0xFC	; 252
    4a76:	9f 40       	sbci	r25, 0x0F	; 15
    4a78:	20 f0       	brcs	.+8      	; 0x4a82 <store+0x468>
		{
			memory_address_incr = 0;
    4a7a:	10 92 e9 20 	sts	0x20E9, r1
    4a7e:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4a82:	40 91 e8 20 	lds	r20, 0x20E8
    4a86:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x4E);
    4a8a:	0e e4       	ldi	r16, 0x4E	; 78
    4a8c:	65 e4       	ldi	r22, 0x45	; 69
    4a8e:	8e ea       	ldi	r24, 0xAE	; 174
    4a90:	09 dd       	rcall	.-1518   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4a92:	80 91 e8 20 	lds	r24, 0x20E8
    4a96:	90 91 e9 20 	lds	r25, 0x20E9
    4a9a:	01 96       	adiw	r24, 0x01	; 1
    4a9c:	90 93 e9 20 	sts	0x20E9, r25
    4aa0:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    4aa4:	8a e0       	ldi	r24, 0x0A	; 10
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	10 dc       	rcall	.-2016   	; 0x42ca <pne_delayms>
		if (memory_address_incr >= 4092)
    4aaa:	80 91 e8 20 	lds	r24, 0x20E8
    4aae:	90 91 e9 20 	lds	r25, 0x20E9
    4ab2:	8c 3f       	cpi	r24, 0xFC	; 252
    4ab4:	9f 40       	sbci	r25, 0x0F	; 15
    4ab6:	20 f0       	brcs	.+8      	; 0x4ac0 <store+0x4a6>
		{
			memory_address_incr = 0;
    4ab8:	10 92 e9 20 	sts	0x20E9, r1
    4abc:	10 92 e8 20 	sts	0x20E8, r1
		}
		memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4ac0:	40 91 e8 20 	lds	r20, 0x20E8
    4ac4:	20 91 e9 20 	lds	r18, 0x20E9
		memory_address_low = (memory_address_incr & 0x00FF);
		PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, 0x4E);
    4ac8:	0e e4       	ldi	r16, 0x4E	; 78
    4aca:	65 e4       	ldi	r22, 0x45	; 69
    4acc:	8e ea       	ldi	r24, 0xAE	; 174
    4ace:	ea dc       	rcall	.-1580   	; 0x44a4 <PNEWELSE2promWrite>
		memory_address_incr++;
    4ad0:	80 91 e8 20 	lds	r24, 0x20E8
    4ad4:	90 91 e9 20 	lds	r25, 0x20E9
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	90 93 e9 20 	sts	0x20E9, r25
    4ade:	80 93 e8 20 	sts	0x20E8, r24
		pne_delayms(10);
    4ae2:	8a e0       	ldi	r24, 0x0A	; 10
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	f1 db       	rcall	.-2078   	; 0x42ca <pne_delayms>
	}
	
	current_state_emergency_light = PNEWELS_Buffer.IsOutputEmergencyLED;
    4ae8:	80 91 eb 1f 	lds	r24, 0x1FEB
    4aec:	80 93 e7 20 	sts	0x20E7, r24
	current_time = get_timestamp();
    4af0:	0e 94 23 38 	call	0x7046	; 0x7046 <get_timestamp>
    4af4:	6b 01       	movw	r12, r22
    4af6:	7c 01       	movw	r14, r24
	time_4_byte = ((current_time & 0xFF000000) >> 24);
    4af8:	4f 2d       	mov	r20, r15
    4afa:	55 27       	eor	r21, r21
    4afc:	66 27       	eor	r22, r22
    4afe:	77 27       	eor	r23, r23
	time_3_byte = ((current_time & 0x00FF0000) >> 16);
    4b00:	4e 2c       	mov	r4, r14
	time_2_byte = ((current_time & 0x0000FF00) >> 8);
    4b02:	8d 2c       	mov	r8, r13
	time_1_byte = (current_time & 0x000000FF);
	status_byte1 = ((PNEWELS_Buffer.BUTTON_WPS & 0x01) | ((PNEWELS_Buffer.BUTTON_MANUAL & 0x01) << 1) | ((PNEWELS_Buffer.IsFactory & 0x01) << 2) | ((PNEWELS_Buffer.STATUS_VCHARGE & 0x01) << 3) | ((PNEWELS_Buffer.TEMP_ALARM & 0x01) << 4) | ((PNEWELS_Buffer.IsBatt & 0x01) << 5) | ((PNEWELS_Buffer.soft_manual & 0x01) << 6) | ((PNEWELS_Buffer.STATUS_AC & 0x01) << 7));
    4b04:	a0 91 ff 1f 	lds	r26, 0x1FFF
    4b08:	e0 e8       	ldi	r30, 0x80	; 128
    4b0a:	ae 9f       	mul	r26, r30
    4b0c:	d0 01       	movw	r26, r0
    4b0e:	11 24       	eor	r1, r1
    4b10:	80 91 e4 1f 	lds	r24, 0x1FE4
    4b14:	81 70       	andi	r24, 0x01	; 1
    4b16:	a8 2b       	or	r26, r24
    4b18:	80 91 e3 1f 	lds	r24, 0x1FE3
    4b1c:	81 70       	andi	r24, 0x01	; 1
    4b1e:	89 83       	std	Y+1, r24	; 0x01
    4b20:	1a 82       	std	Y+2, r1	; 0x02
    4b22:	89 81       	ldd	r24, Y+1	; 0x01
    4b24:	9a 81       	ldd	r25, Y+2	; 0x02
    4b26:	88 0f       	add	r24, r24
    4b28:	99 1f       	adc	r25, r25
    4b2a:	9a 2f       	mov	r25, r26
    4b2c:	98 2b       	or	r25, r24
    4b2e:	80 91 e7 1f 	lds	r24, 0x1FE7
    4b32:	80 fb       	bst	r24, 0
    4b34:	22 24       	eor	r2, r2
    4b36:	20 f8       	bld	r2, 0
    4b38:	31 2c       	mov	r3, r1
    4b3a:	22 0c       	add	r2, r2
    4b3c:	33 1c       	adc	r3, r3
    4b3e:	22 0c       	add	r2, r2
    4b40:	33 1c       	adc	r3, r3
    4b42:	29 2a       	or	r2, r25
    4b44:	a0 ee       	ldi	r26, 0xE0	; 224
    4b46:	bf e1       	ldi	r27, 0x1F	; 31
    4b48:	8c 91       	ld	r24, X
    4b4a:	81 70       	andi	r24, 0x01	; 1
    4b4c:	8b 83       	std	Y+3, r24	; 0x03
    4b4e:	1c 82       	std	Y+4, r1	; 0x04
    4b50:	eb 81       	ldd	r30, Y+3	; 0x03
    4b52:	fc 81       	ldd	r31, Y+4	; 0x04
    4b54:	ee 0f       	add	r30, r30
    4b56:	ff 1f       	adc	r31, r31
    4b58:	ee 0f       	add	r30, r30
    4b5a:	ff 1f       	adc	r31, r31
    4b5c:	ee 0f       	add	r30, r30
    4b5e:	ff 1f       	adc	r31, r31
    4b60:	82 2d       	mov	r24, r2
    4b62:	8e 2b       	or	r24, r30
    4b64:	90 91 e5 1f 	lds	r25, 0x1FE5
    4b68:	91 70       	andi	r25, 0x01	; 1
    4b6a:	9d 83       	std	Y+5, r25	; 0x05
    4b6c:	1e 82       	std	Y+6, r1	; 0x06
    4b6e:	2d 81       	ldd	r18, Y+5	; 0x05
    4b70:	3e 81       	ldd	r19, Y+6	; 0x06
    4b72:	22 95       	swap	r18
    4b74:	32 95       	swap	r19
    4b76:	30 7f       	andi	r19, 0xF0	; 240
    4b78:	32 27       	eor	r19, r18
    4b7a:	20 7f       	andi	r18, 0xF0	; 240
    4b7c:	32 27       	eor	r19, r18
    4b7e:	28 2e       	mov	r2, r24
    4b80:	22 2a       	or	r2, r18
    4b82:	80 91 f0 1f 	lds	r24, 0x1FF0
    4b86:	81 70       	andi	r24, 0x01	; 1
    4b88:	8f 83       	std	Y+7, r24	; 0x07
    4b8a:	18 86       	std	Y+8, r1	; 0x08
    4b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    4b8e:	98 85       	ldd	r25, Y+8	; 0x08
    4b90:	88 0f       	add	r24, r24
    4b92:	99 1f       	adc	r25, r25
    4b94:	82 95       	swap	r24
    4b96:	92 95       	swap	r25
    4b98:	90 7f       	andi	r25, 0xF0	; 240
    4b9a:	98 27       	eor	r25, r24
    4b9c:	80 7f       	andi	r24, 0xF0	; 240
    4b9e:	98 27       	eor	r25, r24
    4ba0:	82 29       	or	r24, r2
    4ba2:	90 91 e8 1f 	lds	r25, 0x1FE8
    4ba6:	91 70       	andi	r25, 0x01	; 1
    4ba8:	99 87       	std	Y+9, r25	; 0x09
    4baa:	1a 86       	std	Y+10, r1	; 0x0a
    4bac:	29 84       	ldd	r2, Y+9	; 0x09
    4bae:	3a 84       	ldd	r3, Y+10	; 0x0a
    4bb0:	00 24       	eor	r0, r0
    4bb2:	36 94       	lsr	r3
    4bb4:	27 94       	ror	r2
    4bb6:	07 94       	ror	r0
    4bb8:	36 94       	lsr	r3
    4bba:	27 94       	ror	r2
    4bbc:	07 94       	ror	r0
    4bbe:	32 2c       	mov	r3, r2
    4bc0:	20 2c       	mov	r2, r0
    4bc2:	28 2a       	or	r2, r24
	status_byte2 = ((PNEWELS_Buffer.mode & 0x07) | ((PNEWELS_Buffer.IsOutputEmergencyLED & 0x01) << 3) | ((PNEWELS_Buffer.IsOutputDisableCharging & 0x01) << 4) | ((PNEWELS_Buffer.oled0 & 0x01) << 5) | ((PNEWELS_Buffer.oled1 & 0x01) << 6) | ((PNEWELS_Buffer.oled2 & 0x01) << 7));
    4bc4:	a0 91 07 20 	lds	r26, 0x2007
    4bc8:	e0 e8       	ldi	r30, 0x80	; 128
    4bca:	ae 9f       	mul	r26, r30
    4bcc:	d0 01       	movw	r26, r0
    4bce:	11 24       	eor	r1, r1
    4bd0:	80 91 f2 1f 	lds	r24, 0x1FF2
    4bd4:	87 70       	andi	r24, 0x07	; 7
    4bd6:	8a 2b       	or	r24, r26
    4bd8:	90 91 eb 1f 	lds	r25, 0x1FEB
    4bdc:	91 70       	andi	r25, 0x01	; 1
    4bde:	9b 87       	std	Y+11, r25	; 0x0b
    4be0:	1c 86       	std	Y+12, r1	; 0x0c
    4be2:	eb 85       	ldd	r30, Y+11	; 0x0b
    4be4:	fc 85       	ldd	r31, Y+12	; 0x0c
    4be6:	ee 0f       	add	r30, r30
    4be8:	ff 1f       	adc	r31, r31
    4bea:	ee 0f       	add	r30, r30
    4bec:	ff 1f       	adc	r31, r31
    4bee:	ee 0f       	add	r30, r30
    4bf0:	ff 1f       	adc	r31, r31
    4bf2:	8e 2b       	or	r24, r30
    4bf4:	90 91 ee 1f 	lds	r25, 0x1FEE
    4bf8:	91 70       	andi	r25, 0x01	; 1
    4bfa:	9d 87       	std	Y+13, r25	; 0x0d
    4bfc:	1e 86       	std	Y+14, r1	; 0x0e
    4bfe:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c00:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c02:	22 95       	swap	r18
    4c04:	32 95       	swap	r19
    4c06:	30 7f       	andi	r19, 0xF0	; 240
    4c08:	32 27       	eor	r19, r18
    4c0a:	20 7f       	andi	r18, 0xF0	; 240
    4c0c:	32 27       	eor	r19, r18
    4c0e:	28 2b       	or	r18, r24
    4c10:	80 91 05 20 	lds	r24, 0x2005
    4c14:	81 70       	andi	r24, 0x01	; 1
    4c16:	8f 87       	std	Y+15, r24	; 0x0f
    4c18:	18 8a       	std	Y+16, r1	; 0x10
    4c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c1c:	98 89       	ldd	r25, Y+16	; 0x10
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	82 95       	swap	r24
    4c24:	92 95       	swap	r25
    4c26:	90 7f       	andi	r25, 0xF0	; 240
    4c28:	98 27       	eor	r25, r24
    4c2a:	80 7f       	andi	r24, 0xF0	; 240
    4c2c:	98 27       	eor	r25, r24
    4c2e:	82 2b       	or	r24, r18
    4c30:	90 91 06 20 	lds	r25, 0x2006
    4c34:	91 70       	andi	r25, 0x01	; 1
    4c36:	99 8b       	std	Y+17, r25	; 0x11
    4c38:	1a 8a       	std	Y+18, r1	; 0x12
    4c3a:	29 89       	ldd	r18, Y+17	; 0x11
    4c3c:	3a 89       	ldd	r19, Y+18	; 0x12
    4c3e:	00 24       	eor	r0, r0
    4c40:	36 95       	lsr	r19
    4c42:	27 95       	ror	r18
    4c44:	07 94       	ror	r0
    4c46:	36 95       	lsr	r19
    4c48:	27 95       	ror	r18
    4c4a:	07 94       	ror	r0
    4c4c:	32 2f       	mov	r19, r18
    4c4e:	20 2d       	mov	r18, r0
    4c50:	18 2f       	mov	r17, r24
    4c52:	12 2b       	or	r17, r18
	status_byte3 = ((PNEWELS_Buffer.led_ch1 & 0x01) | ((PNEWELS_Buffer.led_ch2 & 0x01) << 1) | ((PNEWELS_Buffer.led_drv0 & 0x01) << 2) | ((PNEWELS_Buffer.led_drv1 & 0x01) << 3) | ((PNEWELS_Buffer.led_drv2 & 0x01) << 4) | ((PNEWELS_Buffer.soft_charge & 0x01) << 5) | ((PNEWELS_Buffer.soft_discharge & 0x01) << 6));
    4c54:	80 91 01 20 	lds	r24, 0x2001
    4c58:	81 70       	andi	r24, 0x01	; 1
    4c5a:	8b 8b       	std	Y+19, r24	; 0x13
    4c5c:	1c 8a       	std	Y+20, r1	; 0x14
    4c5e:	eb 89       	ldd	r30, Y+19	; 0x13
    4c60:	fc 89       	ldd	r31, Y+20	; 0x14
    4c62:	ee 0f       	add	r30, r30
    4c64:	ff 1f       	adc	r31, r31
    4c66:	80 91 02 20 	lds	r24, 0x2002
    4c6a:	81 70       	andi	r24, 0x01	; 1
    4c6c:	8d 8b       	std	Y+21, r24	; 0x15
    4c6e:	1e 8a       	std	Y+22, r1	; 0x16
    4c70:	8d 89       	ldd	r24, Y+21	; 0x15
    4c72:	9e 89       	ldd	r25, Y+22	; 0x16
    4c74:	88 0f       	add	r24, r24
    4c76:	99 1f       	adc	r25, r25
    4c78:	88 0f       	add	r24, r24
    4c7a:	99 1f       	adc	r25, r25
    4c7c:	8e 2b       	or	r24, r30
    4c7e:	e0 91 00 20 	lds	r30, 0x2000
    4c82:	e1 70       	andi	r30, 0x01	; 1
    4c84:	8e 2b       	or	r24, r30
    4c86:	90 91 03 20 	lds	r25, 0x2003
    4c8a:	91 70       	andi	r25, 0x01	; 1
    4c8c:	9f 8b       	std	Y+23, r25	; 0x17
    4c8e:	18 8e       	std	Y+24, r1	; 0x18
    4c90:	ef 89       	ldd	r30, Y+23	; 0x17
    4c92:	f8 8d       	ldd	r31, Y+24	; 0x18
    4c94:	ee 0f       	add	r30, r30
    4c96:	ff 1f       	adc	r31, r31
    4c98:	ee 0f       	add	r30, r30
    4c9a:	ff 1f       	adc	r31, r31
    4c9c:	ee 0f       	add	r30, r30
    4c9e:	ff 1f       	adc	r31, r31
    4ca0:	8e 2b       	or	r24, r30
    4ca2:	90 91 04 20 	lds	r25, 0x2004
    4ca6:	91 70       	andi	r25, 0x01	; 1
    4ca8:	99 8f       	std	Y+25, r25	; 0x19
    4caa:	1a 8e       	std	Y+26, r1	; 0x1a
    4cac:	29 8d       	ldd	r18, Y+25	; 0x19
    4cae:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4cb0:	22 95       	swap	r18
    4cb2:	32 95       	swap	r19
    4cb4:	30 7f       	andi	r19, 0xF0	; 240
    4cb6:	32 27       	eor	r19, r18
    4cb8:	20 7f       	andi	r18, 0xF0	; 240
    4cba:	32 27       	eor	r19, r18
    4cbc:	28 2b       	or	r18, r24
    4cbe:	80 91 e9 1f 	lds	r24, 0x1FE9
    4cc2:	81 70       	andi	r24, 0x01	; 1
    4cc4:	8b 8f       	std	Y+27, r24	; 0x1b
    4cc6:	1c 8e       	std	Y+28, r1	; 0x1c
    4cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ccc:	88 0f       	add	r24, r24
    4cce:	99 1f       	adc	r25, r25
    4cd0:	82 95       	swap	r24
    4cd2:	92 95       	swap	r25
    4cd4:	90 7f       	andi	r25, 0xF0	; 240
    4cd6:	98 27       	eor	r25, r24
    4cd8:	80 7f       	andi	r24, 0xF0	; 240
    4cda:	98 27       	eor	r25, r24
    4cdc:	82 2b       	or	r24, r18
    4cde:	90 91 ea 1f 	lds	r25, 0x1FEA
    4ce2:	91 70       	andi	r25, 0x01	; 1
    4ce4:	9d 8f       	std	Y+29, r25	; 0x1d
    4ce6:	1e 8e       	std	Y+30, r1	; 0x1e
    4ce8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4cea:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4cec:	00 24       	eor	r0, r0
    4cee:	36 95       	lsr	r19
    4cf0:	27 95       	ror	r18
    4cf2:	07 94       	ror	r0
    4cf4:	36 95       	lsr	r19
    4cf6:	27 95       	ror	r18
    4cf8:	07 94       	ror	r0
    4cfa:	32 2f       	mov	r19, r18
    4cfc:	20 2d       	mov	r18, r0
    4cfe:	38 2e       	mov	r3, r24
    4d00:	32 2a       	or	r3, r18
		
	if (memory_address_incr >= 4092)
    4d02:	80 91 e8 20 	lds	r24, 0x20E8
    4d06:	90 91 e9 20 	lds	r25, 0x20E9
    4d0a:	8c 3f       	cpi	r24, 0xFC	; 252
    4d0c:	9f 40       	sbci	r25, 0x0F	; 15
    4d0e:	20 f0       	brcs	.+8      	; 0x4d18 <store+0x6fe>
	{
		memory_address_incr = 0;
    4d10:	10 92 e9 20 	sts	0x20E9, r1
    4d14:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4d18:	80 91 e8 20 	lds	r24, 0x20E8
    4d1c:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_4_byte);
    4d20:	04 2f       	mov	r16, r20
    4d22:	48 2f       	mov	r20, r24
    4d24:	65 e4       	ldi	r22, 0x45	; 69
    4d26:	8e ea       	ldi	r24, 0xAE	; 174
    4d28:	bd db       	rcall	.-2182   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4d2a:	80 91 e8 20 	lds	r24, 0x20E8
    4d2e:	90 91 e9 20 	lds	r25, 0x20E9
    4d32:	01 96       	adiw	r24, 0x01	; 1
    4d34:	90 93 e9 20 	sts	0x20E9, r25
    4d38:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4d3c:	8a e0       	ldi	r24, 0x0A	; 10
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	c4 da       	rcall	.-2680   	; 0x42ca <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4d42:	80 91 e8 20 	lds	r24, 0x20E8
    4d46:	90 91 e9 20 	lds	r25, 0x20E9
    4d4a:	8c 3f       	cpi	r24, 0xFC	; 252
    4d4c:	9f 40       	sbci	r25, 0x0F	; 15
    4d4e:	20 f0       	brcs	.+8      	; 0x4d58 <store+0x73e>
	{
		memory_address_incr = 0;
    4d50:	10 92 e9 20 	sts	0x20E9, r1
    4d54:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4d58:	40 91 e8 20 	lds	r20, 0x20E8
    4d5c:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_3_byte);
    4d60:	04 2d       	mov	r16, r4
    4d62:	65 e4       	ldi	r22, 0x45	; 69
    4d64:	8e ea       	ldi	r24, 0xAE	; 174
    4d66:	9e db       	rcall	.-2244   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4d68:	80 91 e8 20 	lds	r24, 0x20E8
    4d6c:	90 91 e9 20 	lds	r25, 0x20E9
    4d70:	01 96       	adiw	r24, 0x01	; 1
    4d72:	90 93 e9 20 	sts	0x20E9, r25
    4d76:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4d7a:	8a e0       	ldi	r24, 0x0A	; 10
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	a5 da       	rcall	.-2742   	; 0x42ca <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4d80:	80 91 e8 20 	lds	r24, 0x20E8
    4d84:	90 91 e9 20 	lds	r25, 0x20E9
    4d88:	8c 3f       	cpi	r24, 0xFC	; 252
    4d8a:	9f 40       	sbci	r25, 0x0F	; 15
    4d8c:	20 f0       	brcs	.+8      	; 0x4d96 <store+0x77c>
	{
		memory_address_incr = 0;
    4d8e:	10 92 e9 20 	sts	0x20E9, r1
    4d92:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4d96:	40 91 e8 20 	lds	r20, 0x20E8
    4d9a:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_2_byte);
    4d9e:	08 2d       	mov	r16, r8
    4da0:	65 e4       	ldi	r22, 0x45	; 69
    4da2:	8e ea       	ldi	r24, 0xAE	; 174
    4da4:	7f db       	rcall	.-2306   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4da6:	80 91 e8 20 	lds	r24, 0x20E8
    4daa:	90 91 e9 20 	lds	r25, 0x20E9
    4dae:	01 96       	adiw	r24, 0x01	; 1
    4db0:	90 93 e9 20 	sts	0x20E9, r25
    4db4:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4db8:	8a e0       	ldi	r24, 0x0A	; 10
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	86 da       	rcall	.-2804   	; 0x42ca <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4dbe:	80 91 e8 20 	lds	r24, 0x20E8
    4dc2:	90 91 e9 20 	lds	r25, 0x20E9
    4dc6:	8c 3f       	cpi	r24, 0xFC	; 252
    4dc8:	9f 40       	sbci	r25, 0x0F	; 15
    4dca:	20 f0       	brcs	.+8      	; 0x4dd4 <store+0x7ba>
	{
		memory_address_incr = 0;
    4dcc:	10 92 e9 20 	sts	0x20E9, r1
    4dd0:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4dd4:	40 91 e8 20 	lds	r20, 0x20E8
    4dd8:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, time_1_byte);
    4ddc:	0c 2d       	mov	r16, r12
    4dde:	65 e4       	ldi	r22, 0x45	; 69
    4de0:	8e ea       	ldi	r24, 0xAE	; 174
    4de2:	60 db       	rcall	.-2368   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4de4:	80 91 e8 20 	lds	r24, 0x20E8
    4de8:	90 91 e9 20 	lds	r25, 0x20E9
    4dec:	01 96       	adiw	r24, 0x01	; 1
    4dee:	90 93 e9 20 	sts	0x20E9, r25
    4df2:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4df6:	8a e0       	ldi	r24, 0x0A	; 10
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	67 da       	rcall	.-2866   	; 0x42ca <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4dfc:	80 91 e8 20 	lds	r24, 0x20E8
    4e00:	90 91 e9 20 	lds	r25, 0x20E9
    4e04:	8c 3f       	cpi	r24, 0xFC	; 252
    4e06:	9f 40       	sbci	r25, 0x0F	; 15
    4e08:	20 f0       	brcs	.+8      	; 0x4e12 <store+0x7f8>
	{
		memory_address_incr = 0;
    4e0a:	10 92 e9 20 	sts	0x20E9, r1
    4e0e:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4e12:	40 91 e8 20 	lds	r20, 0x20E8
    4e16:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, PNEWELS_Buffer.V_BATT);
    4e1a:	00 91 e1 1f 	lds	r16, 0x1FE1
    4e1e:	65 e4       	ldi	r22, 0x45	; 69
    4e20:	8e ea       	ldi	r24, 0xAE	; 174
    4e22:	40 db       	rcall	.-2432   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4e24:	80 91 e8 20 	lds	r24, 0x20E8
    4e28:	90 91 e9 20 	lds	r25, 0x20E9
    4e2c:	01 96       	adiw	r24, 0x01	; 1
    4e2e:	90 93 e9 20 	sts	0x20E9, r25
    4e32:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4e36:	8a e0       	ldi	r24, 0x0A	; 10
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	47 da       	rcall	.-2930   	; 0x42ca <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4e3c:	80 91 e8 20 	lds	r24, 0x20E8
    4e40:	90 91 e9 20 	lds	r25, 0x20E9
    4e44:	8c 3f       	cpi	r24, 0xFC	; 252
    4e46:	9f 40       	sbci	r25, 0x0F	; 15
    4e48:	20 f0       	brcs	.+8      	; 0x4e52 <store+0x838>
	{
		memory_address_incr = 0;
    4e4a:	10 92 e9 20 	sts	0x20E9, r1
    4e4e:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4e52:	40 91 e8 20 	lds	r20, 0x20E8
    4e56:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, PNEWELS_Buffer.temperature);
    4e5a:	00 91 e6 1f 	lds	r16, 0x1FE6
    4e5e:	65 e4       	ldi	r22, 0x45	; 69
    4e60:	8e ea       	ldi	r24, 0xAE	; 174
    4e62:	20 db       	rcall	.-2496   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4e64:	80 91 e8 20 	lds	r24, 0x20E8
    4e68:	90 91 e9 20 	lds	r25, 0x20E9
    4e6c:	01 96       	adiw	r24, 0x01	; 1
    4e6e:	90 93 e9 20 	sts	0x20E9, r25
    4e72:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4e76:	8a e0       	ldi	r24, 0x0A	; 10
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	27 da       	rcall	.-2994   	; 0x42ca <pne_delayms>
		
	if (memory_address_incr >= 4092)
    4e7c:	80 91 e8 20 	lds	r24, 0x20E8
    4e80:	90 91 e9 20 	lds	r25, 0x20E9
    4e84:	8c 3f       	cpi	r24, 0xFC	; 252
    4e86:	9f 40       	sbci	r25, 0x0F	; 15
    4e88:	20 f0       	brcs	.+8      	; 0x4e92 <store+0x878>
	{
		memory_address_incr = 0;
    4e8a:	10 92 e9 20 	sts	0x20E9, r1
    4e8e:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4e92:	40 91 e8 20 	lds	r20, 0x20E8
    4e96:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte1);
    4e9a:	02 2d       	mov	r16, r2
    4e9c:	65 e4       	ldi	r22, 0x45	; 69
    4e9e:	8e ea       	ldi	r24, 0xAE	; 174
    4ea0:	01 db       	rcall	.-2558   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4ea2:	80 91 e8 20 	lds	r24, 0x20E8
    4ea6:	90 91 e9 20 	lds	r25, 0x20E9
    4eaa:	01 96       	adiw	r24, 0x01	; 1
    4eac:	90 93 e9 20 	sts	0x20E9, r25
    4eb0:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4eb4:	8a e0       	ldi	r24, 0x0A	; 10
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	08 da       	rcall	.-3056   	; 0x42ca <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4eba:	80 91 e8 20 	lds	r24, 0x20E8
    4ebe:	90 91 e9 20 	lds	r25, 0x20E9
    4ec2:	8c 3f       	cpi	r24, 0xFC	; 252
    4ec4:	9f 40       	sbci	r25, 0x0F	; 15
    4ec6:	20 f0       	brcs	.+8      	; 0x4ed0 <store+0x8b6>
	{
		memory_address_incr = 0;
    4ec8:	10 92 e9 20 	sts	0x20E9, r1
    4ecc:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4ed0:	40 91 e8 20 	lds	r20, 0x20E8
    4ed4:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte2);
    4ed8:	01 2f       	mov	r16, r17
    4eda:	65 e4       	ldi	r22, 0x45	; 69
    4edc:	8e ea       	ldi	r24, 0xAE	; 174
    4ede:	e2 da       	rcall	.-2620   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4ee0:	80 91 e8 20 	lds	r24, 0x20E8
    4ee4:	90 91 e9 20 	lds	r25, 0x20E9
    4ee8:	01 96       	adiw	r24, 0x01	; 1
    4eea:	90 93 e9 20 	sts	0x20E9, r25
    4eee:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4ef2:	8a e0       	ldi	r24, 0x0A	; 10
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	e9 d9       	rcall	.-3118   	; 0x42ca <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4ef8:	80 91 e8 20 	lds	r24, 0x20E8
    4efc:	90 91 e9 20 	lds	r25, 0x20E9
    4f00:	8c 3f       	cpi	r24, 0xFC	; 252
    4f02:	9f 40       	sbci	r25, 0x0F	; 15
    4f04:	20 f0       	brcs	.+8      	; 0x4f0e <store+0x8f4>
	{
		memory_address_incr = 0;
    4f06:	10 92 e9 20 	sts	0x20E9, r1
    4f0a:	10 92 e8 20 	sts	0x20E8, r1
	}
	memory_address_high = ((memory_address_incr & 0xFF00) >> 8);
    4f0e:	40 91 e8 20 	lds	r20, 0x20E8
    4f12:	20 91 e9 20 	lds	r18, 0x20E9
	memory_address_low = (memory_address_incr & 0x00FF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, status_byte3);
    4f16:	03 2d       	mov	r16, r3
    4f18:	65 e4       	ldi	r22, 0x45	; 69
    4f1a:	8e ea       	ldi	r24, 0xAE	; 174
    4f1c:	c3 da       	rcall	.-2682   	; 0x44a4 <PNEWELSE2promWrite>
	memory_address_incr++;
    4f1e:	80 91 e8 20 	lds	r24, 0x20E8
    4f22:	90 91 e9 20 	lds	r25, 0x20E9
    4f26:	01 96       	adiw	r24, 0x01	; 1
    4f28:	90 93 e9 20 	sts	0x20E9, r25
    4f2c:	80 93 e8 20 	sts	0x20E8, r24
	pne_delayms(10);
    4f30:	8a e0       	ldi	r24, 0x0A	; 10
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	ca d9       	rcall	.-3180   	; 0x42ca <pne_delayms>
	
	if (memory_address_incr >= 4092)
    4f36:	80 91 e8 20 	lds	r24, 0x20E8
    4f3a:	90 91 e9 20 	lds	r25, 0x20E9
    4f3e:	8c 3f       	cpi	r24, 0xFC	; 252
    4f40:	9f 40       	sbci	r25, 0x0F	; 15
    4f42:	20 f0       	brcs	.+8      	; 0x4f4c <store+0x932>
	{
		memory_address_incr = 0;
    4f44:	10 92 e9 20 	sts	0x20E9, r1
    4f48:	10 92 e8 20 	sts	0x20E8, r1
	}
	memoryCounter_save(memory_address_incr);
    4f4c:	80 91 e8 20 	lds	r24, 0x20E8
    4f50:	90 91 e9 20 	lds	r25, 0x20E9
    4f54:	5e db       	rcall	.-2372   	; 0x4612 <memoryCounter_save>
	pne_delayms(10);
    4f56:	8a e0       	ldi	r24, 0x0A	; 10
    4f58:	90 e0       	ldi	r25, 0x00	; 0
    4f5a:	b7 d9       	rcall	.-3218   	; 0x42ca <pne_delayms>
	

}
    4f5c:	6e 96       	adiw	r28, 0x1e	; 30
    4f5e:	0f b6       	in	r0, 0x3f	; 63
    4f60:	f8 94       	cli
    4f62:	de bf       	out	0x3e, r29	; 62
    4f64:	0f be       	out	0x3f, r0	; 63
    4f66:	cd bf       	out	0x3d, r28	; 61
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	0f 91       	pop	r16
    4f70:	ff 90       	pop	r15
    4f72:	ef 90       	pop	r14
    4f74:	df 90       	pop	r13
    4f76:	cf 90       	pop	r12
    4f78:	bf 90       	pop	r11
    4f7a:	af 90       	pop	r10
    4f7c:	9f 90       	pop	r9
    4f7e:	8f 90       	pop	r8
    4f80:	7f 90       	pop	r7
    4f82:	6f 90       	pop	r6
    4f84:	5f 90       	pop	r5
    4f86:	4f 90       	pop	r4
    4f88:	3f 90       	pop	r3
    4f8a:	2f 90       	pop	r2
    4f8c:	08 95       	ret

00004f8e <send_usart_char>:
	while (tx_buf[i] != 0x00)
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
		i++;
	}
}
    4f8e:	0f 93       	push	r16
    4f90:	1f 93       	push	r17
    4f92:	cf 93       	push	r28
    4f94:	fc 01       	movw	r30, r24
    4f96:	60 81       	ld	r22, Z
    4f98:	66 23       	and	r22, r22
    4f9a:	69 f0       	breq	.+26     	; 0x4fb6 <send_usart_char+0x28>
    4f9c:	8c 01       	movw	r16, r24
    4f9e:	c0 e0       	ldi	r28, 0x00	; 0
    4fa0:	88 ec       	ldi	r24, 0xC8	; 200
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <usart_putchar>
    4fa8:	cf 5f       	subi	r28, 0xFF	; 255
    4faa:	f8 01       	movw	r30, r16
    4fac:	ec 0f       	add	r30, r28
    4fae:	f1 1d       	adc	r31, r1
    4fb0:	60 81       	ld	r22, Z
    4fb2:	61 11       	cpse	r22, r1
    4fb4:	f5 cf       	rjmp	.-22     	; 0x4fa0 <send_usart_char+0x12>
    4fb6:	cf 91       	pop	r28
    4fb8:	1f 91       	pop	r17
    4fba:	0f 91       	pop	r16
    4fbc:	08 95       	ret

00004fbe <pnewels_get_usart>:
    4fbe:	90 91 b4 20 	lds	r25, 0x20B4
    4fc2:	99 23       	and	r25, r25
    4fc4:	19 f0       	breq	.+6      	; 0x4fcc <pnewels_get_usart+0xe>
    4fc6:	91 30       	cpi	r25, 0x01	; 1
    4fc8:	b9 f0       	breq	.+46     	; 0x4ff8 <pnewels_get_usart+0x3a>
    4fca:	08 95       	ret
    4fcc:	e2 e6       	ldi	r30, 0x62	; 98
    4fce:	f0 e2       	ldi	r31, 0x20	; 32
    4fd0:	2f e6       	ldi	r18, 0x6F	; 111
    4fd2:	30 e2       	ldi	r19, 0x20	; 32
    4fd4:	90 e2       	ldi	r25, 0x20	; 32
    4fd6:	91 93       	st	Z+, r25
    4fd8:	e2 17       	cp	r30, r18
    4fda:	f3 07       	cpc	r31, r19
    4fdc:	e1 f7       	brne	.-8      	; 0x4fd6 <pnewels_get_usart+0x18>
    4fde:	8b 35       	cpi	r24, 0x5B	; 91
    4fe0:	21 f4       	brne	.+8      	; 0x4fea <pnewels_get_usart+0x2c>
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	80 93 b4 20 	sts	0x20B4, r24
    4fe8:	08 95       	ret
    4fea:	8d 35       	cpi	r24, 0x5D	; 93
    4fec:	19 f5       	brne	.+70     	; 0x5034 <pnewels_get_usart+0x76>
    4fee:	10 92 45 20 	sts	0x2045, r1
    4ff2:	10 92 b4 20 	sts	0x20B4, r1
    4ff6:	08 95       	ret
    4ff8:	8d 35       	cpi	r24, 0x5D	; 93
    4ffa:	41 f4       	brne	.+16     	; 0x500c <pnewels_get_usart+0x4e>
    4ffc:	10 92 45 20 	sts	0x2045, r1
    5000:	10 92 b4 20 	sts	0x20B4, r1
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	80 93 21 20 	sts	0x2021, r24
    500a:	08 95       	ret
    500c:	90 91 45 20 	lds	r25, 0x2045
    5010:	9d 30       	cpi	r25, 0x0D	; 13
    5012:	48 f4       	brcc	.+18     	; 0x5026 <pnewels_get_usart+0x68>
    5014:	e9 2f       	mov	r30, r25
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	ee 59       	subi	r30, 0x9E	; 158
    501a:	ff 4d       	sbci	r31, 0xDF	; 223
    501c:	80 83       	st	Z, r24
    501e:	9f 5f       	subi	r25, 0xFF	; 255
    5020:	90 93 45 20 	sts	0x2045, r25
    5024:	08 95       	ret
    5026:	10 92 45 20 	sts	0x2045, r1
    502a:	10 92 b4 20 	sts	0x20B4, r1
    502e:	8d ef       	ldi	r24, 0xFD	; 253
    5030:	92 e0       	ldi	r25, 0x02	; 2
    5032:	ad cf       	rjmp	.-166    	; 0x4f8e <send_usart_char>
    5034:	08 95       	ret

00005036 <int_to_ascii>:


//---------- side function for factory mode ----------//
void int_to_ascii(uint8_t number)
{
    5036:	cf 93       	push	r28
    5038:	c8 2f       	mov	r28, r24
	uint8_t display;
	
	display = ((number>>4) & 0x0F);
    503a:	68 2f       	mov	r22, r24
    503c:	62 95       	swap	r22
    503e:	6f 70       	andi	r22, 0x0F	; 15
	if (display > 9)
    5040:	6a 30       	cpi	r22, 0x0A	; 10
    5042:	10 f0       	brcs	.+4      	; 0x5048 <int_to_ascii+0x12>
	{
		display = display + 0x37;
    5044:	69 5c       	subi	r22, 0xC9	; 201
    5046:	01 c0       	rjmp	.+2      	; 0x504a <int_to_ascii+0x14>
	}
	else
	{
		display = display + 0x30;
    5048:	60 5d       	subi	r22, 0xD0	; 208
	}
	usart_putchar(USART_SERIAL_EXAMPLE, display);
    504a:	88 ec       	ldi	r24, 0xC8	; 200
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <usart_putchar>
	
	display = ((number) & 0x0F);
    5052:	cf 70       	andi	r28, 0x0F	; 15
	if (display > 9)
    5054:	ca 30       	cpi	r28, 0x0A	; 10
    5056:	18 f0       	brcs	.+6      	; 0x505e <int_to_ascii+0x28>
	{
		display = display + 0x37;
    5058:	67 e3       	ldi	r22, 0x37	; 55
    505a:	6c 0f       	add	r22, r28
    505c:	02 c0       	rjmp	.+4      	; 0x5062 <int_to_ascii+0x2c>
	}
	else
	{
		display = display + 0x30;
    505e:	60 e3       	ldi	r22, 0x30	; 48
    5060:	6c 0f       	add	r22, r28
	}
	usart_putchar(USART_SERIAL_EXAMPLE, display);
    5062:	88 ec       	ldi	r24, 0xC8	; 200
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <usart_putchar>
}
    506a:	cf 91       	pop	r28
    506c:	08 95       	ret

0000506e <optionSelect>:
}

uint8_t optionSelect()
{
	/*char real_command[3] = "123";*/
	flag = 0;
    506e:	10 92 21 20 	sts	0x2021, r1
	
	switch(commamd[0])
    5072:	e0 91 62 20 	lds	r30, 0x2062
    5076:	8e 2f       	mov	r24, r30
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	fc 01       	movw	r30, r24
    507c:	f1 97       	sbiw	r30, 0x31	; 49
    507e:	e9 30       	cpi	r30, 0x09	; 9
    5080:	f1 05       	cpc	r31, r1
    5082:	b0 f4       	brcc	.+44     	; 0x50b0 <optionSelect+0x42>
    5084:	88 27       	eor	r24, r24
    5086:	ed 59       	subi	r30, 0x9D	; 157
    5088:	fe 4f       	sbci	r31, 0xFE	; 254
    508a:	8f 4f       	sbci	r24, 0xFF	; 255
    508c:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <__tablejump2__>
		case '1':
			return 1;
		break;
		
		case '2':
			return 2;
    5090:	82 e0       	ldi	r24, 0x02	; 2
    5092:	08 95       	ret
		break;
		
		case '3':
			return 3;
    5094:	83 e0       	ldi	r24, 0x03	; 3
    5096:	08 95       	ret
		break;
		
		case '4':
			return 4;
    5098:	84 e0       	ldi	r24, 0x04	; 4
    509a:	08 95       	ret
		break;
		
		case '5':
			return 5;
    509c:	85 e0       	ldi	r24, 0x05	; 5
    509e:	08 95       	ret
		break;
		
		case '6':
			return 6;
    50a0:	86 e0       	ldi	r24, 0x06	; 6
    50a2:	08 95       	ret
		break;
		
		case '7':
			return 7;
    50a4:	87 e0       	ldi	r24, 0x07	; 7
    50a6:	08 95       	ret
		break;
		
		case '8':
			return 8;
    50a8:	88 e0       	ldi	r24, 0x08	; 8
    50aa:	08 95       	ret
		break;
		
		case '9':
			return 9;
    50ac:	89 e0       	ldi	r24, 0x09	; 9
    50ae:	08 95       	ret
		break;
		
		default:
			send_usart_char("Invalid command\r\n");
    50b0:	8d e1       	ldi	r24, 0x1D	; 29
    50b2:	93 e0       	ldi	r25, 0x03	; 3
    50b4:	6c df       	rcall	.-296    	; 0x4f8e <send_usart_char>
		break;
			
	}
		return idle;
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
			return 1;
    50ba:	81 e0       	ldi	r24, 0x01	; 1
			send_usart_char("Invalid command\r\n");
		break;
			
	}
		return idle;
}
    50bc:	08 95       	ret

000050be <configSelect>:
}

uint8_t configSelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    50be:	10 92 21 20 	sts	0x2021, r1
	
	switch(commamd[0])
    50c2:	80 91 62 20 	lds	r24, 0x2062
    50c6:	81 33       	cpi	r24, 0x31	; 49
    50c8:	a1 f0       	breq	.+40     	; 0x50f2 <configSelect+0x34>
    50ca:	18 f4       	brcc	.+6      	; 0x50d2 <configSelect+0x14>
    50cc:	80 33       	cpi	r24, 0x30	; 48
    50ce:	51 f0       	breq	.+20     	; 0x50e4 <configSelect+0x26>
    50d0:	0b c0       	rjmp	.+22     	; 0x50e8 <configSelect+0x2a>
    50d2:	82 33       	cpi	r24, 0x32	; 50
    50d4:	19 f0       	breq	.+6      	; 0x50dc <configSelect+0x1e>
    50d6:	83 33       	cpi	r24, 0x33	; 51
    50d8:	19 f0       	breq	.+6      	; 0x50e0 <configSelect+0x22>
    50da:	06 c0       	rjmp	.+12     	; 0x50e8 <configSelect+0x2a>
		case '1':
			return config_DeviceADDR;
		break;
		
		case '2':
			return config_DeviceCH;
    50dc:	82 e0       	ldi	r24, 0x02	; 2
    50de:	08 95       	ret
		break;
		
		case '3':
			return config_DevicePAN;
    50e0:	83 e0       	ldi	r24, 0x03	; 3
    50e2:	08 95       	ret
		break;
		
		case '0':
			return config_exit;
    50e4:	84 e0       	ldi	r24, 0x04	; 4
    50e6:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    50e8:	8d e1       	ldi	r24, 0x1D	; 29
    50ea:	93 e0       	ldi	r25, 0x03	; 3
    50ec:	50 df       	rcall	.-352    	; 0x4f8e <send_usart_char>
			return config_idle;
    50ee:	85 e0       	ldi	r24, 0x05	; 5
    50f0:	08 95       	ret
// 		case '3':
// 			return config_NodeID;
// 		break;
		
		case '1':
			return config_DeviceADDR;
    50f2:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		
			
	}
}
    50f4:	08 95       	ret

000050f6 <send_usart_const_char>:
		}
	}
}

void send_usart_const_char(const char *tx_buf)
{
    50f6:	0f 93       	push	r16
    50f8:	1f 93       	push	r17
    50fa:	cf 93       	push	r28
	uint8_t i =0;
	
	while (tx_buf[i] != 0x00)
    50fc:	fc 01       	movw	r30, r24
    50fe:	60 81       	ld	r22, Z
    5100:	66 23       	and	r22, r22
    5102:	69 f0       	breq	.+26     	; 0x511e <send_usart_const_char+0x28>
    5104:	8c 01       	movw	r16, r24
    5106:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
    5108:	88 ec       	ldi	r24, 0xC8	; 200
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <usart_putchar>
		i++;
    5110:	cf 5f       	subi	r28, 0xFF	; 255

void send_usart_const_char(const char *tx_buf)
{
	uint8_t i =0;
	
	while (tx_buf[i] != 0x00)
    5112:	f8 01       	movw	r30, r16
    5114:	ec 0f       	add	r30, r28
    5116:	f1 1d       	adc	r31, r1
    5118:	60 81       	ld	r22, Z
    511a:	61 11       	cpse	r22, r1
    511c:	f5 cf       	rjmp	.-22     	; 0x5108 <send_usart_const_char+0x12>
	{
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
		i++;
	}
}
    511e:	cf 91       	pop	r28
    5120:	1f 91       	pop	r17
    5122:	0f 91       	pop	r16
    5124:	08 95       	ret

00005126 <send_operation_info>:

void send_operation_info(const char *name, uint8_t data)
{
    5126:	cf 93       	push	r28
    5128:	c6 2f       	mov	r28, r22
	send_usart_const_char(name);
    512a:	e5 df       	rcall	.-54     	; 0x50f6 <send_usart_const_char>
	send_usart_char(" changed to ");
    512c:	8f e2       	ldi	r24, 0x2F	; 47
    512e:	93 e0       	ldi	r25, 0x03	; 3
    5130:	2e df       	rcall	.-420    	; 0x4f8e <send_usart_char>
	int_to_ascii(data);
    5132:	8c 2f       	mov	r24, r28
    5134:	80 df       	rcall	.-256    	; 0x5036 <int_to_ascii>
	/*send_usart_char("\r\n");*/
}
    5136:	cf 91       	pop	r28
    5138:	08 95       	ret

0000513a <config_read_input>:
			
	}
}

void config_read_input(uint16_t address, char data_length, const char *name)
{
    513a:	9f 92       	push	r9
    513c:	af 92       	push	r10
    513e:	bf 92       	push	r11
    5140:	cf 92       	push	r12
    5142:	df 92       	push	r13
    5144:	ef 92       	push	r14
    5146:	ff 92       	push	r15
    5148:	0f 93       	push	r16
    514a:	1f 93       	push	r17
    514c:	cf 93       	push	r28
    514e:	df 93       	push	r29
    5150:	f6 2e       	mov	r15, r22
    5152:	6a 01       	movw	r12, r20
	uint8_t data_short = 0;
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
    5154:	21 e0       	ldi	r18, 0x01	; 1
    5156:	20 93 87 20 	sts	0x2087, r18
	flag = 0;
    515a:	10 92 21 20 	sts	0x2021, r1
	uint8_t memory_address_low = (address & 0xFF);
    515e:	18 2f       	mov	r17, r24
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
    5160:	b9 2e       	mov	r11, r25
		{
			switch(data_length)
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    5162:	c2 e6       	ldi	r28, 0x62	; 98
    5164:	d0 e2       	ldi	r29, 0x20	; 32
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
    5166:	aa 24       	eor	r10, r10
    5168:	a3 94       	inc	r10
    516a:	a8 0e       	add	r10, r24
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
	flag = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	while(config_waiting_input == 1)
    516c:	5b c0       	rjmp	.+182    	; 0x5224 <config_read_input+0xea>
	{
		if(flag == 1)
    516e:	30 91 21 20 	lds	r19, 0x2021
    5172:	31 30       	cpi	r19, 0x01	; 1
    5174:	e1 f7       	brne	.-8      	; 0x516e <config_read_input+0x34>
		{
			switch(data_length)
    5176:	81 e3       	ldi	r24, 0x31	; 49
    5178:	f8 16       	cp	r15, r24
    517a:	21 f0       	breq	.+8      	; 0x5184 <config_read_input+0x4a>
    517c:	82 e3       	ldi	r24, 0x32	; 50
    517e:	f8 16       	cp	r15, r24
    5180:	f1 f0       	breq	.+60     	; 0x51be <config_read_input+0x84>
    5182:	4d c0       	rjmp	.+154    	; 0x521e <config_read_input+0xe4>
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    5184:	88 81       	ld	r24, Y
    5186:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <ascii_to_hex>
    518a:	e8 2e       	mov	r14, r24
					cache[1] = ascii_to_hex(commamd[1]);
    518c:	89 81       	ldd	r24, Y+1	; 0x01
    518e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <ascii_to_hex>
		{
			switch(data_length)
			{
				case '1':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    5192:	ee 0c       	add	r14, r14
    5194:	ee 0c       	add	r14, r14
    5196:	ee 0c       	add	r14, r14
    5198:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
    519a:	e8 2a       	or	r14, r24
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, data_short);
    519c:	0e 2d       	mov	r16, r14
    519e:	2b 2d       	mov	r18, r11
    51a0:	41 2f       	mov	r20, r17
    51a2:	65 e4       	ldi	r22, 0x45	; 69
    51a4:	8e ea       	ldi	r24, 0xAE	; 174
    51a6:	7e d9       	rcall	.-3332   	; 0x44a4 <PNEWELSE2promWrite>
					send_operation_info(name, data_short);
    51a8:	6e 2d       	mov	r22, r14
    51aa:	c6 01       	movw	r24, r12
    51ac:	bc df       	rcall	.-136    	; 0x5126 <send_operation_info>
					pne_delayms(10);
    51ae:	8a e0       	ldi	r24, 0x0A	; 10
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	8b d8       	rcall	.-3818   	; 0x42ca <pne_delayms>

					config_waiting_input = 0;
    51b4:	10 92 87 20 	sts	0x2087, r1
					flag = 0;
    51b8:	10 92 21 20 	sts	0x2021, r1
				}
				break;
    51bc:	33 c0       	rjmp	.+102    	; 0x5224 <config_read_input+0xea>
				
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    51be:	88 81       	ld	r24, Y
    51c0:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <ascii_to_hex>
    51c4:	e8 2e       	mov	r14, r24
					cache[1] = ascii_to_hex(commamd[1]);
    51c6:	89 81       	ldd	r24, Y+1	; 0x01
    51c8:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <ascii_to_hex>
				}
				break;
				
				case '2':
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
    51cc:	ee 0c       	add	r14, r14
    51ce:	ee 0c       	add	r14, r14
    51d0:	ee 0c       	add	r14, r14
    51d2:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
    51d4:	e8 2a       	or	r14, r24
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
    51d6:	0e 2d       	mov	r16, r14
    51d8:	2b 2d       	mov	r18, r11
    51da:	4a 2d       	mov	r20, r10
    51dc:	65 e4       	ldi	r22, 0x45	; 69
    51de:	8e ea       	ldi	r24, 0xAE	; 174
    51e0:	61 d9       	rcall	.-3390   	; 0x44a4 <PNEWELSE2promWrite>
					cache[0] = ascii_to_hex(commamd[2])<<4;
    51e2:	8a 81       	ldd	r24, Y+2	; 0x02
    51e4:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <ascii_to_hex>
    51e8:	98 2e       	mov	r9, r24
					cache[1] = ascii_to_hex(commamd[3]);
    51ea:	8b 81       	ldd	r24, Y+3	; 0x03
    51ec:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <ascii_to_hex>
    51f0:	08 2f       	mov	r16, r24
					send_operation_info(name, data_short);
    51f2:	6e 2d       	mov	r22, r14
    51f4:	c6 01       	movw	r24, r12
    51f6:	97 df       	rcall	.-210    	; 0x5126 <send_operation_info>
				{
					cache[0] = ascii_to_hex(commamd[0])<<4;
					cache[1] = ascii_to_hex(commamd[1]);
					data_short = cache[0] | cache[1];
					PNEWELSE2promWrite(0xAE, 'E', memory_address_low + 1, memory_address_high, data_short);
					cache[0] = ascii_to_hex(commamd[2])<<4;
    51f8:	e9 2c       	mov	r14, r9
    51fa:	ee 0c       	add	r14, r14
    51fc:	ee 0c       	add	r14, r14
    51fe:	ee 0c       	add	r14, r14
    5200:	ee 0c       	add	r14, r14
					cache[1] = ascii_to_hex(commamd[3]);
					send_operation_info(name, data_short);
					data_short = cache[0] | cache[1];
    5202:	e0 2a       	or	r14, r16
					PNEWELSE2promWrite(0xAF, 'E', memory_address_low , memory_address_high, data_short);
    5204:	0e 2d       	mov	r16, r14
    5206:	2b 2d       	mov	r18, r11
    5208:	41 2f       	mov	r20, r17
    520a:	65 e4       	ldi	r22, 0x45	; 69
    520c:	8f ea       	ldi	r24, 0xAF	; 175
    520e:	4a d9       	rcall	.-3436   	; 0x44a4 <PNEWELSE2promWrite>
					int_to_ascii(data_short);
    5210:	8e 2d       	mov	r24, r14
    5212:	11 df       	rcall	.-478    	; 0x5036 <int_to_ascii>
					config_waiting_input = 0;
    5214:	10 92 87 20 	sts	0x2087, r1
					flag = 0;
    5218:	10 92 21 20 	sts	0x2021, r1
				}
				break;
    521c:	03 c0       	rjmp	.+6      	; 0x5224 <config_read_input+0xea>
				
				default:
					send_usart_char("Critical Error! Please contact manufacturer.");
    521e:	8c e3       	ldi	r24, 0x3C	; 60
    5220:	93 e0       	ldi	r25, 0x03	; 3
    5222:	b5 de       	rcall	.-662    	; 0x4f8e <send_usart_char>
	uint8_t cache[2] = {0};
	config_waiting_input = 1;
	flag = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	while(config_waiting_input == 1)
    5224:	30 91 87 20 	lds	r19, 0x2087
    5228:	31 30       	cpi	r19, 0x01	; 1
    522a:	09 f4       	brne	.+2      	; 0x522e <config_read_input+0xf4>
    522c:	a0 cf       	rjmp	.-192    	; 0x516e <config_read_input+0x34>
		else
		{
			
		}
	}
}
    522e:	df 91       	pop	r29
    5230:	cf 91       	pop	r28
    5232:	1f 91       	pop	r17
    5234:	0f 91       	pop	r16
    5236:	ff 90       	pop	r15
    5238:	ef 90       	pop	r14
    523a:	df 90       	pop	r13
    523c:	cf 90       	pop	r12
    523e:	bf 90       	pop	r11
    5240:	af 90       	pop	r10
    5242:	9f 90       	pop	r9
    5244:	08 95       	ret

00005246 <pneConfiguration>:
	usart_putchar(USART_SERIAL_EXAMPLE, display);
}

void pneConfiguration()
{
	switch(config_state)
    5246:	80 91 22 20 	lds	r24, 0x2022
    524a:	82 30       	cpi	r24, 0x02	; 2
    524c:	51 f1       	breq	.+84     	; 0x52a2 <pneConfiguration+0x5c>
    524e:	28 f4       	brcc	.+10     	; 0x525a <pneConfiguration+0x14>
    5250:	88 23       	and	r24, r24
    5252:	59 f0       	breq	.+22     	; 0x526a <pneConfiguration+0x24>
    5254:	81 30       	cpi	r24, 0x01	; 1
    5256:	c9 f0       	breq	.+50     	; 0x528a <pneConfiguration+0x44>
    5258:	41 c0       	rjmp	.+130    	; 0x52dc <pneConfiguration+0x96>
    525a:	84 30       	cpi	r24, 0x04	; 4
    525c:	09 f4       	brne	.+2      	; 0x5260 <pneConfiguration+0x1a>
    525e:	39 c0       	rjmp	.+114    	; 0x52d2 <pneConfiguration+0x8c>
    5260:	60 f1       	brcs	.+88     	; 0x52ba <pneConfiguration+0x74>
    5262:	85 30       	cpi	r24, 0x05	; 5
    5264:	09 f4       	brne	.+2      	; 0x5268 <pneConfiguration+0x22>
    5266:	3f c0       	rjmp	.+126    	; 0x52e6 <pneConfiguration+0xa0>
    5268:	39 c0       	rjmp	.+114    	; 0x52dc <pneConfiguration+0x96>
	{
		case config_startup_message:
		{
			send_usart_char("\r\n\r\nConfiguration mode. Select an option:\r\n\r\n");
    526a:	89 e6       	ldi	r24, 0x69	; 105
    526c:	93 e0       	ldi	r25, 0x03	; 3
    526e:	8f de       	rcall	.-738    	; 0x4f8e <send_usart_char>
/*			send_usart_char("1. Change Group ID\r\n");*/
			send_usart_char("1. Change Device Address\r\n2. Change Device Channel\r\n3. Change Device PAN ID\r\n");
    5270:	87 e9       	ldi	r24, 0x97	; 151
    5272:	93 e0       	ldi	r25, 0x03	; 3
    5274:	8c de       	rcall	.-744    	; 0x4f8e <send_usart_char>
			send_usart_char("0. Exit configuration mode\r\n");
    5276:	8a e0       	ldi	r24, 0x0A	; 10
    5278:	96 e0       	ldi	r25, 0x06	; 6
    527a:	89 de       	rcall	.-750    	; 0x4f8e <send_usart_char>
			configuration_flag = 1;
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	80 93 5b 20 	sts	0x205B, r24
			config_state = config_idle;
    5282:	85 e0       	ldi	r24, 0x05	; 5
    5284:	80 93 22 20 	sts	0x2022, r24
		}
		break;
    5288:	08 95       	ret
// 		}
// 		break;
		
		case config_DeviceADDR:
		{
			send_usart_char("Enter new device address: \r\n");
    528a:	85 ee       	ldi	r24, 0xE5	; 229
    528c:	93 e0       	ldi	r25, 0x03	; 3
    528e:	7f de       	rcall	.-770    	; 0x4f8e <send_usart_char>
			config_read_input(DEVICE_ADDRESS_L, '2', deviceADDR_display);
    5290:	46 e6       	ldi	r20, 0x66	; 102
    5292:	58 e0       	ldi	r21, 0x08	; 8
    5294:	62 e3       	ldi	r22, 0x32	; 50
    5296:	8c ef       	ldi	r24, 0xFC	; 252
    5298:	9f e0       	ldi	r25, 0x0F	; 15
    529a:	4f df       	rcall	.-354    	; 0x513a <config_read_input>
			config_state = config_startup_message;
    529c:	10 92 22 20 	sts	0x2022, r1
		}
		break;
    52a0:	08 95       	ret
		
		case config_DeviceCH:
		{
			send_usart_char("Enter new device channel: \r\n");
    52a2:	82 e0       	ldi	r24, 0x02	; 2
    52a4:	94 e0       	ldi	r25, 0x04	; 4
    52a6:	73 de       	rcall	.-794    	; 0x4f8e <send_usart_char>
			config_read_input(DEVICE_CHANNEL_L, '2', deviceCH_display);
    52a8:	47 e5       	ldi	r20, 0x57	; 87
    52aa:	58 e0       	ldi	r21, 0x08	; 8
    52ac:	62 e3       	ldi	r22, 0x32	; 50
    52ae:	8e ef       	ldi	r24, 0xFE	; 254
    52b0:	9f e0       	ldi	r25, 0x0F	; 15
    52b2:	43 df       	rcall	.-378    	; 0x513a <config_read_input>
			config_state = config_startup_message;
    52b4:	10 92 22 20 	sts	0x2022, r1
		}
		break;
    52b8:	08 95       	ret
		
		case config_DevicePAN:
		{
			send_usart_char("Enter new device PAN ID: \r\n");
    52ba:	8f e1       	ldi	r24, 0x1F	; 31
    52bc:	94 e0       	ldi	r25, 0x04	; 4
    52be:	67 de       	rcall	.-818    	; 0x4f8e <send_usart_char>
			config_read_input(DEVICE_PAN_L, '2', devicePAN_display);
    52c0:	49 e4       	ldi	r20, 0x49	; 73
    52c2:	58 e0       	ldi	r21, 0x08	; 8
    52c4:	62 e3       	ldi	r22, 0x32	; 50
    52c6:	80 e0       	ldi	r24, 0x00	; 0
    52c8:	90 e1       	ldi	r25, 0x10	; 16
    52ca:	37 df       	rcall	.-402    	; 0x513a <config_read_input>
			config_state = config_startup_message;
    52cc:	10 92 22 20 	sts	0x2022, r1
		}
		break;
    52d0:	08 95       	ret
		case config_idle:
		break;
		
		case config_exit:
		{
			configuration_flag = 0;
    52d2:	10 92 5b 20 	sts	0x205B, r1
			send_usart_char("Exiting config mode");
    52d6:	8b e3       	ldi	r24, 0x3B	; 59
    52d8:	94 e0       	ldi	r25, 0x04	; 4
    52da:	59 de       	rcall	.-846    	; 0x4f8e <send_usart_char>
			option_select = option_message;
			config_state = config_startup_message;
		}
		default:
			option_select = option_message;
    52dc:	89 e0       	ldi	r24, 0x09	; 9
    52de:	80 93 37 20 	sts	0x2037, r24
			config_state = config_startup_message;
    52e2:	10 92 22 20 	sts	0x2022, r1
    52e6:	08 95       	ret

000052e8 <resetSelect>:


uint8_t resetSelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    52e8:	10 92 21 20 	sts	0x2021, r1
	
	switch(commamd[0])
    52ec:	80 91 62 20 	lds	r24, 0x2062
    52f0:	82 33       	cpi	r24, 0x32	; 50
    52f2:	61 f0       	breq	.+24     	; 0x530c <resetSelect+0x24>
    52f4:	28 f4       	brcc	.+10     	; 0x5300 <resetSelect+0x18>
    52f6:	80 33       	cpi	r24, 0x30	; 48
    52f8:	89 f0       	breq	.+34     	; 0x531c <resetSelect+0x34>
    52fa:	81 33       	cpi	r24, 0x31	; 49
    52fc:	b1 f0       	breq	.+44     	; 0x532a <resetSelect+0x42>
    52fe:	10 c0       	rjmp	.+32     	; 0x5320 <resetSelect+0x38>
    5300:	84 33       	cpi	r24, 0x34	; 52
    5302:	41 f0       	breq	.+16     	; 0x5314 <resetSelect+0x2c>
    5304:	28 f0       	brcs	.+10     	; 0x5310 <resetSelect+0x28>
    5306:	85 33       	cpi	r24, 0x35	; 53
    5308:	39 f0       	breq	.+14     	; 0x5318 <resetSelect+0x30>
    530a:	0a c0       	rjmp	.+20     	; 0x5320 <resetSelect+0x38>
		case '1':
		return reset_all;
		break;
		
		case '2':
		return reset_bit0;
    530c:	82 e0       	ldi	r24, 0x02	; 2
    530e:	08 95       	ret
		break;
		
		case '3':
		return reset_bit1;
    5310:	83 e0       	ldi	r24, 0x03	; 3
    5312:	08 95       	ret
		break;
		
		case '4':
		return reset_read_status;
    5314:	84 e0       	ldi	r24, 0x04	; 4
    5316:	08 95       	ret
		break;

		case '5':
		return reset_set_flag;
    5318:	85 e0       	ldi	r24, 0x05	; 5
    531a:	08 95       	ret
		break;
		
		case '0':
		return reset_exit;
    531c:	87 e0       	ldi	r24, 0x07	; 7
    531e:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    5320:	8d e1       	ldi	r24, 0x1D	; 29
    5322:	93 e0       	ldi	r25, 0x03	; 3
    5324:	34 de       	rcall	.-920    	; 0x4f8e <send_usart_char>
			return reset_idle;
    5326:	86 e0       	ldi	r24, 0x06	; 6
    5328:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
		return reset_all;
    532a:	81 e0       	ldi	r24, 0x01	; 1
			return reset_idle;
		}
		break;
				
	}
}
    532c:	08 95       	ret

0000532e <testMode>:

void testMode()
{
    532e:	df 92       	push	r13
    5330:	ef 92       	push	r14
    5332:	ff 92       	push	r15
    5334:	0f 93       	push	r16
    5336:	1f 93       	push	r17
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
	uint8_t button_status_factory6;
	uint8_t button_status_factory7;
	uint8_t button_status_factory8;
	uint8_t button_status_factory9;
	
	switch(button)
    533c:	80 91 23 20 	lds	r24, 0x2023
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	8a 30       	cpi	r24, 0x0A	; 10
    5344:	91 05       	cpc	r25, r1
    5346:	08 f0       	brcs	.+2      	; 0x534a <testMode+0x1c>
    5348:	ef c5       	rjmp	.+3038   	; 0x5f28 <testMode+0xbfa>
    534a:	fc 01       	movw	r30, r24
    534c:	88 27       	eor	r24, r24
    534e:	e4 59       	subi	r30, 0x94	; 148
    5350:	fe 4f       	sbci	r31, 0xFE	; 254
    5352:	8f 4f       	sbci	r24, 0xFF	; 255
    5354:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <__tablejump2__>
	{
		case button1:
		{
			gpio_clr(STATUS_LED_1);
    5358:	60 91 29 20 	lds	r22, 0x2029
    535c:	70 91 2a 20 	lds	r23, 0x202A
    5360:	80 91 2b 20 	lds	r24, 0x202B
    5364:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
			gpio_clr(STATUS_LED_2);
    5368:	60 91 4b 20 	lds	r22, 0x204B
    536c:	70 91 4c 20 	lds	r23, 0x204C
    5370:	80 91 4d 20 	lds	r24, 0x204D
    5374:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
			gpio_clr(CHARGING_DISABLE);
    5378:	60 91 5d 20 	lds	r22, 0x205D
    537c:	70 91 5e 20 	lds	r23, 0x205E
    5380:	80 91 5f 20 	lds	r24, 0x205F
    5384:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
			gpio_clr(EMER_LIGHT_EN);
    5388:	60 91 2d 20 	lds	r22, 0x202D
    538c:	70 91 2e 20 	lds	r23, 0x202E
    5390:	80 91 2f 20 	lds	r24, 0x202F
    5394:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
			gpio_clr(OUT_LED_CH0);
    5398:	60 91 0a 20 	lds	r22, 0x200A
    539c:	70 91 0b 20 	lds	r23, 0x200B
    53a0:	80 91 0c 20 	lds	r24, 0x200C
    53a4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
			gpio_clr(OUT_LED_CH1);
    53a8:	60 91 de 20 	lds	r22, 0x20DE
    53ac:	70 91 df 20 	lds	r23, 0x20DF
    53b0:	80 91 e0 20 	lds	r24, 0x20E0
    53b4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
			gpio_clr(OUT_LED_CH2);
    53b8:	60 91 e4 20 	lds	r22, 0x20E4
    53bc:	70 91 e5 20 	lds	r23, 0x20E5
    53c0:	80 91 e6 20 	lds	r24, 0x20E6
    53c4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
			
			send_usart_char("\r\nIO Switch ");
    53c8:	8f e4       	ldi	r24, 0x4F	; 79
    53ca:	94 e0       	ldi	r25, 0x04	; 4
    53cc:	e0 dd       	rcall	.-1088   	; 0x4f8e <send_usart_char>
			send_usart_char("1");
    53ce:	8e e7       	ldi	r24, 0x7E	; 126
    53d0:	97 e0       	ldi	r25, 0x07	; 7
    53d2:	dd dd       	rcall	.-1094   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
    53d4:	60 91 d8 20 	lds	r22, 0x20D8
    53d8:	70 91 d9 20 	lds	r23, 0x20D9
    53dc:	80 91 da 20 	lds	r24, 0x20DA
    53e0:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    53e4:	88 23       	and	r24, r24
    53e6:	51 f0       	breq	.+20     	; 0x53fc <testMode+0xce>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
    53e8:	60 91 d8 20 	lds	r22, 0x20D8
    53ec:	70 91 d9 20 	lds	r23, 0x20D9
    53f0:	80 91 da 20 	lds	r24, 0x20DA
    53f4:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("1");
			
			button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			
			while(button_status_factory != 1)
    53f8:	81 11       	cpse	r24, r1
    53fa:	f6 cf       	rjmp	.-20     	; 0x53e8 <testMode+0xba>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    53fc:	60 91 d3 20 	lds	r22, 0x20D3
    5400:	70 91 d4 20 	lds	r23, 0x20D4
    5404:	80 91 d5 20 	lds	r24, 0x20D5
    5408:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    540c:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    540e:	60 91 26 20 	lds	r22, 0x2026
    5412:	70 91 27 20 	lds	r23, 0x2027
    5416:	80 91 28 20 	lds	r24, 0x2028
    541a:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    541e:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5420:	60 91 84 20 	lds	r22, 0x2084
    5424:	70 91 85 20 	lds	r23, 0x2085
    5428:	80 91 86 20 	lds	r24, 0x2086
    542c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5430:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5432:	60 91 dc 1f 	lds	r22, 0x1FDC
    5436:	70 91 dd 1f 	lds	r23, 0x1FDD
    543a:	80 91 de 1f 	lds	r24, 0x1FDE
    543e:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5442:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5444:	60 91 33 20 	lds	r22, 0x2033
    5448:	70 91 34 20 	lds	r23, 0x2034
    544c:	80 91 35 20 	lds	r24, 0x2035
    5450:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5454:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5456:	60 91 1a 20 	lds	r22, 0x201A
    545a:	70 91 1b 20 	lds	r23, 0x201B
    545e:	80 91 1c 20 	lds	r24, 0x201C
    5462:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5466:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5468:	60 91 c3 20 	lds	r22, 0x20C3
    546c:	70 91 c4 20 	lds	r23, 0x20C4
    5470:	80 91 c5 20 	lds	r24, 0x20C5
    5474:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5478:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    547a:	60 91 81 20 	lds	r22, 0x2081
    547e:	70 91 82 20 	lds	r23, 0x2082
    5482:	80 91 83 20 	lds	r24, 0x2083
    5486:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    548a:	21 e0       	ldi	r18, 0x01	; 1
    548c:	d1 10       	cpse	r13, r1
    548e:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5490:	91 e0       	ldi	r25, 0x01	; 1
    5492:	e1 10       	cpse	r14, r1
    5494:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5496:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(AC_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5498:	91 e0       	ldi	r25, 0x01	; 1
    549a:	f1 10       	cpse	r15, r1
    549c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    549e:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    54a0:	21 e0       	ldi	r18, 0x01	; 1
    54a2:	01 11       	cpse	r16, r1
    54a4:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54a6:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    54a8:	91 e0       	ldi	r25, 0x01	; 1
    54aa:	11 11       	cpse	r17, r1
    54ac:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54ae:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    54b0:	21 e0       	ldi	r18, 0x01	; 1
    54b2:	d1 11       	cpse	r29, r1
    54b4:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54b6:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    54b8:	91 e0       	ldi	r25, 0x01	; 1
    54ba:	c1 11       	cpse	r28, r1
    54bc:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54be:	92 2b       	or	r25, r18
    54c0:	29 f4       	brne	.+10     	; 0x54cc <testMode+0x19e>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    54c2:	91 e0       	ldi	r25, 0x01	; 1
    54c4:	81 11       	cpse	r24, r1
    54c6:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    54c8:	99 23       	and	r25, r25
    54ca:	49 f0       	breq	.+18     	; 0x54de <testMode+0x1b0>
			{
				send_usart_char(" ------FAIL");
    54cc:	8c e5       	ldi	r24, 0x5C	; 92
    54ce:	94 e0       	ldi	r25, 0x04	; 4
    54d0:	5e dd       	rcall	.-1348   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    54d2:	88 e6       	ldi	r24, 0x68	; 104
    54d4:	94 e0       	ldi	r25, 0x04	; 4
    54d6:	5b dd       	rcall	.-1354   	; 0x4f8e <send_usart_char>
				button = button1;
    54d8:	10 92 23 20 	sts	0x2023, r1
    54dc:	25 c5       	rjmp	.+2634   	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_set(STATUS_LED_1);
    54de:	60 91 29 20 	lds	r22, 0x2029
    54e2:	70 91 2a 20 	lds	r23, 0x202A
    54e6:	80 91 2b 20 	lds	r24, 0x202B
    54ea:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				send_usart_char(" ------PASS");
    54ee:	85 e8       	ldi	r24, 0x85	; 133
    54f0:	94 e0       	ldi	r25, 0x04	; 4
    54f2:	4d dd       	rcall	.-1382   	; 0x4f8e <send_usart_char>
				button = button2;
    54f4:	81 e0       	ldi	r24, 0x01	; 1
    54f6:	80 93 23 20 	sts	0x2023, r24
    54fa:	16 c5       	rjmp	.+2604   	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button2:
		{
			send_usart_char("\r\nIO Switch ");
    54fc:	8f e4       	ldi	r24, 0x4F	; 79
    54fe:	94 e0       	ldi	r25, 0x04	; 4
    5500:	46 dd       	rcall	.-1396   	; 0x4f8e <send_usart_char>
			send_usart_char("2");
    5502:	81 e9       	ldi	r24, 0x91	; 145
    5504:	94 e0       	ldi	r25, 0x04	; 4
    5506:	43 dd       	rcall	.-1402   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5508:	60 91 d3 20 	lds	r22, 0x20D3
    550c:	70 91 d4 20 	lds	r23, 0x20D4
    5510:	80 91 d5 20 	lds	r24, 0x20D5
    5514:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    5518:	88 23       	and	r24, r24
    551a:	51 f0       	breq	.+20     	; 0x5530 <testMode+0x202>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    551c:	60 91 d3 20 	lds	r22, 0x20D3
    5520:	70 91 d4 20 	lds	r23, 0x20D4
    5524:	80 91 d5 20 	lds	r24, 0x20D5
    5528:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("2");
			
			button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			
			while(button_status_factory != 1)
    552c:	81 11       	cpse	r24, r1
    552e:	f6 cf       	rjmp	.-20     	; 0x551c <testMode+0x1ee>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5530:	60 91 d8 20 	lds	r22, 0x20D8
    5534:	70 91 d9 20 	lds	r23, 0x20D9
    5538:	80 91 da 20 	lds	r24, 0x20DA
    553c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5540:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5542:	60 91 26 20 	lds	r22, 0x2026
    5546:	70 91 27 20 	lds	r23, 0x2027
    554a:	80 91 28 20 	lds	r24, 0x2028
    554e:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5552:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5554:	60 91 84 20 	lds	r22, 0x2084
    5558:	70 91 85 20 	lds	r23, 0x2085
    555c:	80 91 86 20 	lds	r24, 0x2086
    5560:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5564:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5566:	60 91 dc 1f 	lds	r22, 0x1FDC
    556a:	70 91 dd 1f 	lds	r23, 0x1FDD
    556e:	80 91 de 1f 	lds	r24, 0x1FDE
    5572:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5576:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5578:	60 91 33 20 	lds	r22, 0x2033
    557c:	70 91 34 20 	lds	r23, 0x2034
    5580:	80 91 35 20 	lds	r24, 0x2035
    5584:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5588:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    558a:	60 91 1a 20 	lds	r22, 0x201A
    558e:	70 91 1b 20 	lds	r23, 0x201B
    5592:	80 91 1c 20 	lds	r24, 0x201C
    5596:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    559a:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    559c:	60 91 c3 20 	lds	r22, 0x20C3
    55a0:	70 91 c4 20 	lds	r23, 0x20C4
    55a4:	80 91 c5 20 	lds	r24, 0x20C5
    55a8:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    55ac:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    55ae:	60 91 81 20 	lds	r22, 0x2081
    55b2:	70 91 82 20 	lds	r23, 0x2082
    55b6:	80 91 83 20 	lds	r24, 0x2083
    55ba:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    55be:	21 e0       	ldi	r18, 0x01	; 1
    55c0:	d1 10       	cpse	r13, r1
    55c2:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    55c4:	91 e0       	ldi	r25, 0x01	; 1
    55c6:	e1 10       	cpse	r14, r1
    55c8:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55ca:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    55cc:	91 e0       	ldi	r25, 0x01	; 1
    55ce:	f1 10       	cpse	r15, r1
    55d0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55d2:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    55d4:	21 e0       	ldi	r18, 0x01	; 1
    55d6:	01 11       	cpse	r16, r1
    55d8:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55da:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    55dc:	91 e0       	ldi	r25, 0x01	; 1
    55de:	11 11       	cpse	r17, r1
    55e0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55e2:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    55e4:	21 e0       	ldi	r18, 0x01	; 1
    55e6:	d1 11       	cpse	r29, r1
    55e8:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55ea:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    55ec:	91 e0       	ldi	r25, 0x01	; 1
    55ee:	c1 11       	cpse	r28, r1
    55f0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55f2:	92 2b       	or	r25, r18
    55f4:	29 f4       	brne	.+10     	; 0x5600 <testMode+0x2d2>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    55f6:	91 e0       	ldi	r25, 0x01	; 1
    55f8:	81 11       	cpse	r24, r1
    55fa:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    55fc:	99 23       	and	r25, r25
    55fe:	49 f0       	breq	.+18     	; 0x5612 <testMode+0x2e4>
			{
				send_usart_char(" ------FAIL");
    5600:	8c e5       	ldi	r24, 0x5C	; 92
    5602:	94 e0       	ldi	r25, 0x04	; 4
    5604:	c4 dc       	rcall	.-1656   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5606:	88 e6       	ldi	r24, 0x68	; 104
    5608:	94 e0       	ldi	r25, 0x04	; 4
    560a:	c1 dc       	rcall	.-1662   	; 0x4f8e <send_usart_char>
				button = button1;
    560c:	10 92 23 20 	sts	0x2023, r1
    5610:	8b c4       	rjmp	.+2326   	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_set(STATUS_LED_2);
    5612:	60 91 4b 20 	lds	r22, 0x204B
    5616:	70 91 4c 20 	lds	r23, 0x204C
    561a:	80 91 4d 20 	lds	r24, 0x204D
    561e:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				send_usart_char(" ------PASS");
    5622:	85 e8       	ldi	r24, 0x85	; 133
    5624:	94 e0       	ldi	r25, 0x04	; 4
    5626:	b3 dc       	rcall	.-1690   	; 0x4f8e <send_usart_char>
				button = button3;
    5628:	82 e0       	ldi	r24, 0x02	; 2
    562a:	80 93 23 20 	sts	0x2023, r24
    562e:	7c c4       	rjmp	.+2296   	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button3:
		{
			send_usart_char("\r\nIO Switch ");
    5630:	8f e4       	ldi	r24, 0x4F	; 79
    5632:	94 e0       	ldi	r25, 0x04	; 4
    5634:	ac dc       	rcall	.-1704   	; 0x4f8e <send_usart_char>
			send_usart_char("3");
    5636:	8e e3       	ldi	r24, 0x3E	; 62
    5638:	92 e0       	ldi	r25, 0x02	; 2
    563a:	a9 dc       	rcall	.-1710   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    563c:	60 91 26 20 	lds	r22, 0x2026
    5640:	70 91 27 20 	lds	r23, 0x2027
    5644:	80 91 28 20 	lds	r24, 0x2028
    5648:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    564c:	88 23       	and	r24, r24
    564e:	51 f0       	breq	.+20     	; 0x5664 <testMode+0x336>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5650:	60 91 26 20 	lds	r22, 0x2026
    5654:	70 91 27 20 	lds	r23, 0x2027
    5658:	80 91 28 20 	lds	r24, 0x2028
    565c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("3");
			
			button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			
			while(button_status_factory != 1)
    5660:	81 11       	cpse	r24, r1
    5662:	f6 cf       	rjmp	.-20     	; 0x5650 <testMode+0x322>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5664:	60 91 d8 20 	lds	r22, 0x20D8
    5668:	70 91 d9 20 	lds	r23, 0x20D9
    566c:	80 91 da 20 	lds	r24, 0x20DA
    5670:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5674:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5676:	60 91 d3 20 	lds	r22, 0x20D3
    567a:	70 91 d4 20 	lds	r23, 0x20D4
    567e:	80 91 d5 20 	lds	r24, 0x20D5
    5682:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5686:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5688:	60 91 84 20 	lds	r22, 0x2084
    568c:	70 91 85 20 	lds	r23, 0x2085
    5690:	80 91 86 20 	lds	r24, 0x2086
    5694:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5698:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    569a:	60 91 dc 1f 	lds	r22, 0x1FDC
    569e:	70 91 dd 1f 	lds	r23, 0x1FDD
    56a2:	80 91 de 1f 	lds	r24, 0x1FDE
    56a6:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    56aa:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    56ac:	60 91 33 20 	lds	r22, 0x2033
    56b0:	70 91 34 20 	lds	r23, 0x2034
    56b4:	80 91 35 20 	lds	r24, 0x2035
    56b8:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    56bc:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    56be:	60 91 1a 20 	lds	r22, 0x201A
    56c2:	70 91 1b 20 	lds	r23, 0x201B
    56c6:	80 91 1c 20 	lds	r24, 0x201C
    56ca:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    56ce:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    56d0:	60 91 c3 20 	lds	r22, 0x20C3
    56d4:	70 91 c4 20 	lds	r23, 0x20C4
    56d8:	80 91 c5 20 	lds	r24, 0x20C5
    56dc:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    56e0:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    56e2:	60 91 81 20 	lds	r22, 0x2081
    56e6:	70 91 82 20 	lds	r23, 0x2082
    56ea:	80 91 83 20 	lds	r24, 0x2083
    56ee:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    56f2:	21 e0       	ldi	r18, 0x01	; 1
    56f4:	d1 10       	cpse	r13, r1
    56f6:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    56f8:	91 e0       	ldi	r25, 0x01	; 1
    56fa:	e1 10       	cpse	r14, r1
    56fc:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    56fe:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5700:	91 e0       	ldi	r25, 0x01	; 1
    5702:	f1 10       	cpse	r15, r1
    5704:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5706:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5708:	21 e0       	ldi	r18, 0x01	; 1
    570a:	01 11       	cpse	r16, r1
    570c:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    570e:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5710:	91 e0       	ldi	r25, 0x01	; 1
    5712:	11 11       	cpse	r17, r1
    5714:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5716:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5718:	21 e0       	ldi	r18, 0x01	; 1
    571a:	d1 11       	cpse	r29, r1
    571c:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    571e:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5720:	91 e0       	ldi	r25, 0x01	; 1
    5722:	c1 11       	cpse	r28, r1
    5724:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5726:	92 2b       	or	r25, r18
    5728:	29 f4       	brne	.+10     	; 0x5734 <testMode+0x406>
			button_status_factory4 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    572a:	91 e0       	ldi	r25, 0x01	; 1
    572c:	81 11       	cpse	r24, r1
    572e:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5730:	99 23       	and	r25, r25
    5732:	49 f0       	breq	.+18     	; 0x5746 <testMode+0x418>
			{
				send_usart_char(" ------FAIL");
    5734:	8c e5       	ldi	r24, 0x5C	; 92
    5736:	94 e0       	ldi	r25, 0x04	; 4
    5738:	2a dc       	rcall	.-1964   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    573a:	88 e6       	ldi	r24, 0x68	; 104
    573c:	94 e0       	ldi	r25, 0x04	; 4
    573e:	27 dc       	rcall	.-1970   	; 0x4f8e <send_usart_char>
				button = button1;
    5740:	10 92 23 20 	sts	0x2023, r1
    5744:	f1 c3       	rjmp	.+2018   	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_set(CHARGING_DISABLE);
    5746:	60 91 5d 20 	lds	r22, 0x205D
    574a:	70 91 5e 20 	lds	r23, 0x205E
    574e:	80 91 5f 20 	lds	r24, 0x205F
    5752:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				send_usart_char(" ------PASS");
    5756:	85 e8       	ldi	r24, 0x85	; 133
    5758:	94 e0       	ldi	r25, 0x04	; 4
    575a:	19 dc       	rcall	.-1998   	; 0x4f8e <send_usart_char>
				button = button4;
    575c:	83 e0       	ldi	r24, 0x03	; 3
    575e:	80 93 23 20 	sts	0x2023, r24
    5762:	e2 c3       	rjmp	.+1988   	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button4:
		{
			send_usart_char("\r\nIO Switch ");
    5764:	8f e4       	ldi	r24, 0x4F	; 79
    5766:	94 e0       	ldi	r25, 0x04	; 4
    5768:	12 dc       	rcall	.-2012   	; 0x4f8e <send_usart_char>
			send_usart_char("4");
    576a:	83 e9       	ldi	r24, 0x93	; 147
    576c:	94 e0       	ldi	r25, 0x04	; 4
    576e:	0f dc       	rcall	.-2018   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5770:	60 91 84 20 	lds	r22, 0x2084
    5774:	70 91 85 20 	lds	r23, 0x2085
    5778:	80 91 86 20 	lds	r24, 0x2086
    577c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    5780:	88 23       	and	r24, r24
    5782:	51 f0       	breq	.+20     	; 0x5798 <testMode+0x46a>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5784:	60 91 84 20 	lds	r22, 0x2084
    5788:	70 91 85 20 	lds	r23, 0x2085
    578c:	80 91 86 20 	lds	r24, 0x2086
    5790:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("4");
			
			button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			
			while(button_status_factory != 1)
    5794:	81 11       	cpse	r24, r1
    5796:	f6 cf       	rjmp	.-20     	; 0x5784 <testMode+0x456>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5798:	60 91 d8 20 	lds	r22, 0x20D8
    579c:	70 91 d9 20 	lds	r23, 0x20D9
    57a0:	80 91 da 20 	lds	r24, 0x20DA
    57a4:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    57a8:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    57aa:	60 91 d3 20 	lds	r22, 0x20D3
    57ae:	70 91 d4 20 	lds	r23, 0x20D4
    57b2:	80 91 d5 20 	lds	r24, 0x20D5
    57b6:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    57ba:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    57bc:	60 91 26 20 	lds	r22, 0x2026
    57c0:	70 91 27 20 	lds	r23, 0x2027
    57c4:	80 91 28 20 	lds	r24, 0x2028
    57c8:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    57cc:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    57ce:	60 91 dc 1f 	lds	r22, 0x1FDC
    57d2:	70 91 dd 1f 	lds	r23, 0x1FDD
    57d6:	80 91 de 1f 	lds	r24, 0x1FDE
    57da:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    57de:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    57e0:	60 91 33 20 	lds	r22, 0x2033
    57e4:	70 91 34 20 	lds	r23, 0x2034
    57e8:	80 91 35 20 	lds	r24, 0x2035
    57ec:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    57f0:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    57f2:	60 91 1a 20 	lds	r22, 0x201A
    57f6:	70 91 1b 20 	lds	r23, 0x201B
    57fa:	80 91 1c 20 	lds	r24, 0x201C
    57fe:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5802:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5804:	60 91 c3 20 	lds	r22, 0x20C3
    5808:	70 91 c4 20 	lds	r23, 0x20C4
    580c:	80 91 c5 20 	lds	r24, 0x20C5
    5810:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5814:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5816:	60 91 81 20 	lds	r22, 0x2081
    581a:	70 91 82 20 	lds	r23, 0x2082
    581e:	80 91 83 20 	lds	r24, 0x2083
    5822:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5826:	21 e0       	ldi	r18, 0x01	; 1
    5828:	d1 10       	cpse	r13, r1
    582a:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    582c:	91 e0       	ldi	r25, 0x01	; 1
    582e:	e1 10       	cpse	r14, r1
    5830:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5832:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5834:	91 e0       	ldi	r25, 0x01	; 1
    5836:	f1 10       	cpse	r15, r1
    5838:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    583a:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    583c:	21 e0       	ldi	r18, 0x01	; 1
    583e:	01 11       	cpse	r16, r1
    5840:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5842:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5844:	91 e0       	ldi	r25, 0x01	; 1
    5846:	11 11       	cpse	r17, r1
    5848:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    584a:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    584c:	21 e0       	ldi	r18, 0x01	; 1
    584e:	d1 11       	cpse	r29, r1
    5850:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5852:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5854:	91 e0       	ldi	r25, 0x01	; 1
    5856:	c1 11       	cpse	r28, r1
    5858:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    585a:	92 2b       	or	r25, r18
    585c:	29 f4       	brne	.+10     	; 0x5868 <testMode+0x53a>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    585e:	91 e0       	ldi	r25, 0x01	; 1
    5860:	81 11       	cpse	r24, r1
    5862:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5864:	99 23       	and	r25, r25
    5866:	49 f0       	breq	.+18     	; 0x587a <testMode+0x54c>
			{
				send_usart_char(" ------FAIL");
    5868:	8c e5       	ldi	r24, 0x5C	; 92
    586a:	94 e0       	ldi	r25, 0x04	; 4
    586c:	90 db       	rcall	.-2272   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    586e:	88 e6       	ldi	r24, 0x68	; 104
    5870:	94 e0       	ldi	r25, 0x04	; 4
    5872:	8d db       	rcall	.-2278   	; 0x4f8e <send_usart_char>
				button = button1;
    5874:	10 92 23 20 	sts	0x2023, r1
    5878:	57 c3       	rjmp	.+1710   	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_set(EMER_LIGHT_EN);
    587a:	60 91 2d 20 	lds	r22, 0x202D
    587e:	70 91 2e 20 	lds	r23, 0x202E
    5882:	80 91 2f 20 	lds	r24, 0x202F
    5886:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				send_usart_char(" ------PASS");
    588a:	85 e8       	ldi	r24, 0x85	; 133
    588c:	94 e0       	ldi	r25, 0x04	; 4
    588e:	7f db       	rcall	.-2306   	; 0x4f8e <send_usart_char>
				button = button5;
    5890:	84 e0       	ldi	r24, 0x04	; 4
    5892:	80 93 23 20 	sts	0x2023, r24
    5896:	48 c3       	rjmp	.+1680   	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button5:
		{
			send_usart_char("\r\nIO Switch ");
    5898:	8f e4       	ldi	r24, 0x4F	; 79
    589a:	94 e0       	ldi	r25, 0x04	; 4
    589c:	78 db       	rcall	.-2320   	; 0x4f8e <send_usart_char>
			send_usart_char("5");
    589e:	85 e9       	ldi	r24, 0x95	; 149
    58a0:	94 e0       	ldi	r25, 0x04	; 4
    58a2:	75 db       	rcall	.-2326   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    58a4:	60 91 dc 1f 	lds	r22, 0x1FDC
    58a8:	70 91 dd 1f 	lds	r23, 0x1FDD
    58ac:	80 91 de 1f 	lds	r24, 0x1FDE
    58b0:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    58b4:	88 23       	and	r24, r24
    58b6:	51 f0       	breq	.+20     	; 0x58cc <testMode+0x59e>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    58b8:	60 91 dc 1f 	lds	r22, 0x1FDC
    58bc:	70 91 dd 1f 	lds	r23, 0x1FDD
    58c0:	80 91 de 1f 	lds	r24, 0x1FDE
    58c4:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("5");
			
			button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			
			while(button_status_factory != 1)
    58c8:	81 11       	cpse	r24, r1
    58ca:	f6 cf       	rjmp	.-20     	; 0x58b8 <testMode+0x58a>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    58cc:	60 91 d8 20 	lds	r22, 0x20D8
    58d0:	70 91 d9 20 	lds	r23, 0x20D9
    58d4:	80 91 da 20 	lds	r24, 0x20DA
    58d8:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    58dc:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    58de:	60 91 d3 20 	lds	r22, 0x20D3
    58e2:	70 91 d4 20 	lds	r23, 0x20D4
    58e6:	80 91 d5 20 	lds	r24, 0x20D5
    58ea:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    58ee:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    58f0:	60 91 26 20 	lds	r22, 0x2026
    58f4:	70 91 27 20 	lds	r23, 0x2027
    58f8:	80 91 28 20 	lds	r24, 0x2028
    58fc:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5900:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5902:	60 91 84 20 	lds	r22, 0x2084
    5906:	70 91 85 20 	lds	r23, 0x2085
    590a:	80 91 86 20 	lds	r24, 0x2086
    590e:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5912:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5914:	60 91 33 20 	lds	r22, 0x2033
    5918:	70 91 34 20 	lds	r23, 0x2034
    591c:	80 91 35 20 	lds	r24, 0x2035
    5920:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5924:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5926:	60 91 1a 20 	lds	r22, 0x201A
    592a:	70 91 1b 20 	lds	r23, 0x201B
    592e:	80 91 1c 20 	lds	r24, 0x201C
    5932:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5936:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5938:	60 91 c3 20 	lds	r22, 0x20C3
    593c:	70 91 c4 20 	lds	r23, 0x20C4
    5940:	80 91 c5 20 	lds	r24, 0x20C5
    5944:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5948:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    594a:	60 91 81 20 	lds	r22, 0x2081
    594e:	70 91 82 20 	lds	r23, 0x2082
    5952:	80 91 83 20 	lds	r24, 0x2083
    5956:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    595a:	21 e0       	ldi	r18, 0x01	; 1
    595c:	d1 10       	cpse	r13, r1
    595e:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5960:	91 e0       	ldi	r25, 0x01	; 1
    5962:	e1 10       	cpse	r14, r1
    5964:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5966:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5968:	91 e0       	ldi	r25, 0x01	; 1
    596a:	f1 10       	cpse	r15, r1
    596c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    596e:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5970:	21 e0       	ldi	r18, 0x01	; 1
    5972:	01 11       	cpse	r16, r1
    5974:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5976:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5978:	91 e0       	ldi	r25, 0x01	; 1
    597a:	11 11       	cpse	r17, r1
    597c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    597e:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5980:	21 e0       	ldi	r18, 0x01	; 1
    5982:	d1 11       	cpse	r29, r1
    5984:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5986:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5988:	91 e0       	ldi	r25, 0x01	; 1
    598a:	c1 11       	cpse	r28, r1
    598c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    598e:	92 2b       	or	r25, r18
    5990:	29 f4       	brne	.+10     	; 0x599c <testMode+0x66e>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5992:	91 e0       	ldi	r25, 0x01	; 1
    5994:	81 11       	cpse	r24, r1
    5996:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5998:	99 23       	and	r25, r25
    599a:	49 f0       	breq	.+18     	; 0x59ae <testMode+0x680>
			{
				send_usart_char(" ------FAIL");
    599c:	8c e5       	ldi	r24, 0x5C	; 92
    599e:	94 e0       	ldi	r25, 0x04	; 4
    59a0:	f6 da       	rcall	.-2580   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    59a2:	88 e6       	ldi	r24, 0x68	; 104
    59a4:	94 e0       	ldi	r25, 0x04	; 4
    59a6:	f3 da       	rcall	.-2586   	; 0x4f8e <send_usart_char>
				button = button1;
    59a8:	10 92 23 20 	sts	0x2023, r1
    59ac:	bd c2       	rjmp	.+1402   	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH0);
    59ae:	60 91 0a 20 	lds	r22, 0x200A
    59b2:	70 91 0b 20 	lds	r23, 0x200B
    59b6:	80 91 0c 20 	lds	r24, 0x200C
    59ba:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				send_usart_char(" ------PASS");
    59be:	85 e8       	ldi	r24, 0x85	; 133
    59c0:	94 e0       	ldi	r25, 0x04	; 4
    59c2:	e5 da       	rcall	.-2614   	; 0x4f8e <send_usart_char>
				button = button6;
    59c4:	85 e0       	ldi	r24, 0x05	; 5
    59c6:	80 93 23 20 	sts	0x2023, r24
    59ca:	ae c2       	rjmp	.+1372   	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button6:
		{
			send_usart_char("\r\nIO Switch ");
    59cc:	8f e4       	ldi	r24, 0x4F	; 79
    59ce:	94 e0       	ldi	r25, 0x04	; 4
    59d0:	de da       	rcall	.-2628   	; 0x4f8e <send_usart_char>
			send_usart_char("6");
    59d2:	87 e9       	ldi	r24, 0x97	; 151
    59d4:	94 e0       	ldi	r25, 0x04	; 4
    59d6:	db da       	rcall	.-2634   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    59d8:	60 91 33 20 	lds	r22, 0x2033
    59dc:	70 91 34 20 	lds	r23, 0x2034
    59e0:	80 91 35 20 	lds	r24, 0x2035
    59e4:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    59e8:	88 23       	and	r24, r24
    59ea:	51 f0       	breq	.+20     	; 0x5a00 <testMode+0x6d2>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    59ec:	60 91 33 20 	lds	r22, 0x2033
    59f0:	70 91 34 20 	lds	r23, 0x2034
    59f4:	80 91 35 20 	lds	r24, 0x2035
    59f8:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("6");
			
			button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			
			while(button_status_factory != 1)
    59fc:	81 11       	cpse	r24, r1
    59fe:	f6 cf       	rjmp	.-20     	; 0x59ec <testMode+0x6be>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5a00:	60 91 d8 20 	lds	r22, 0x20D8
    5a04:	70 91 d9 20 	lds	r23, 0x20D9
    5a08:	80 91 da 20 	lds	r24, 0x20DA
    5a0c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5a10:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5a12:	60 91 d3 20 	lds	r22, 0x20D3
    5a16:	70 91 d4 20 	lds	r23, 0x20D4
    5a1a:	80 91 d5 20 	lds	r24, 0x20D5
    5a1e:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5a22:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5a24:	60 91 26 20 	lds	r22, 0x2026
    5a28:	70 91 27 20 	lds	r23, 0x2027
    5a2c:	80 91 28 20 	lds	r24, 0x2028
    5a30:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5a34:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5a36:	60 91 84 20 	lds	r22, 0x2084
    5a3a:	70 91 85 20 	lds	r23, 0x2085
    5a3e:	80 91 86 20 	lds	r24, 0x2086
    5a42:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5a46:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5a48:	60 91 dc 1f 	lds	r22, 0x1FDC
    5a4c:	70 91 dd 1f 	lds	r23, 0x1FDD
    5a50:	80 91 de 1f 	lds	r24, 0x1FDE
    5a54:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5a58:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5a5a:	60 91 1a 20 	lds	r22, 0x201A
    5a5e:	70 91 1b 20 	lds	r23, 0x201B
    5a62:	80 91 1c 20 	lds	r24, 0x201C
    5a66:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5a6a:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5a6c:	60 91 c3 20 	lds	r22, 0x20C3
    5a70:	70 91 c4 20 	lds	r23, 0x20C4
    5a74:	80 91 c5 20 	lds	r24, 0x20C5
    5a78:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5a7c:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5a7e:	60 91 81 20 	lds	r22, 0x2081
    5a82:	70 91 82 20 	lds	r23, 0x2082
    5a86:	80 91 83 20 	lds	r24, 0x2083
    5a8a:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5a8e:	21 e0       	ldi	r18, 0x01	; 1
    5a90:	d1 10       	cpse	r13, r1
    5a92:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5a94:	91 e0       	ldi	r25, 0x01	; 1
    5a96:	e1 10       	cpse	r14, r1
    5a98:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5a9a:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5a9c:	91 e0       	ldi	r25, 0x01	; 1
    5a9e:	f1 10       	cpse	r15, r1
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5aa2:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5aa4:	21 e0       	ldi	r18, 0x01	; 1
    5aa6:	01 11       	cpse	r16, r1
    5aa8:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5aaa:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5aac:	91 e0       	ldi	r25, 0x01	; 1
    5aae:	11 11       	cpse	r17, r1
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5ab2:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
    5ab4:	21 e0       	ldi	r18, 0x01	; 1
    5ab6:	d1 11       	cpse	r29, r1
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5aba:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5abc:	91 e0       	ldi	r25, 0x01	; 1
    5abe:	c1 11       	cpse	r28, r1
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5ac2:	92 2b       	or	r25, r18
    5ac4:	29 f4       	brne	.+10     	; 0x5ad0 <testMode+0x7a2>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5ac6:	91 e0       	ldi	r25, 0x01	; 1
    5ac8:	81 11       	cpse	r24, r1
    5aca:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5acc:	99 23       	and	r25, r25
    5ace:	49 f0       	breq	.+18     	; 0x5ae2 <testMode+0x7b4>
			{
				send_usart_char(" ------FAIL");
    5ad0:	8c e5       	ldi	r24, 0x5C	; 92
    5ad2:	94 e0       	ldi	r25, 0x04	; 4
    5ad4:	5c da       	rcall	.-2888   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5ad6:	88 e6       	ldi	r24, 0x68	; 104
    5ad8:	94 e0       	ldi	r25, 0x04	; 4
    5ada:	59 da       	rcall	.-2894   	; 0x4f8e <send_usart_char>
				button = button1;
    5adc:	10 92 23 20 	sts	0x2023, r1
    5ae0:	23 c2       	rjmp	.+1094   	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH1);
    5ae2:	60 91 de 20 	lds	r22, 0x20DE
    5ae6:	70 91 df 20 	lds	r23, 0x20DF
    5aea:	80 91 e0 20 	lds	r24, 0x20E0
    5aee:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				send_usart_char(" ------PASS");
    5af2:	85 e8       	ldi	r24, 0x85	; 133
    5af4:	94 e0       	ldi	r25, 0x04	; 4
    5af6:	4b da       	rcall	.-2922   	; 0x4f8e <send_usart_char>
				button = button7;
    5af8:	86 e0       	ldi	r24, 0x06	; 6
    5afa:	80 93 23 20 	sts	0x2023, r24
    5afe:	14 c2       	rjmp	.+1064   	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button7:
		{
			send_usart_char("\r\nIO Switch ");
    5b00:	8f e4       	ldi	r24, 0x4F	; 79
    5b02:	94 e0       	ldi	r25, 0x04	; 4
    5b04:	44 da       	rcall	.-2936   	; 0x4f8e <send_usart_char>
			send_usart_char("7");
    5b06:	89 e9       	ldi	r24, 0x99	; 153
    5b08:	94 e0       	ldi	r25, 0x04	; 4
    5b0a:	41 da       	rcall	.-2942   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
    5b0c:	60 91 1a 20 	lds	r22, 0x201A
    5b10:	70 91 1b 20 	lds	r23, 0x201B
    5b14:	80 91 1c 20 	lds	r24, 0x201C
    5b18:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    5b1c:	88 23       	and	r24, r24
    5b1e:	51 f0       	breq	.+20     	; 0x5b34 <testMode+0x806>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
    5b20:	60 91 1a 20 	lds	r22, 0x201A
    5b24:	70 91 1b 20 	lds	r23, 0x201B
    5b28:	80 91 1c 20 	lds	r24, 0x201C
    5b2c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("7");
			
			button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			
			while(button_status_factory != 1)
    5b30:	81 11       	cpse	r24, r1
    5b32:	f6 cf       	rjmp	.-20     	; 0x5b20 <testMode+0x7f2>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5b34:	60 91 d8 20 	lds	r22, 0x20D8
    5b38:	70 91 d9 20 	lds	r23, 0x20D9
    5b3c:	80 91 da 20 	lds	r24, 0x20DA
    5b40:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5b44:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5b46:	60 91 d3 20 	lds	r22, 0x20D3
    5b4a:	70 91 d4 20 	lds	r23, 0x20D4
    5b4e:	80 91 d5 20 	lds	r24, 0x20D5
    5b52:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5b56:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5b58:	60 91 26 20 	lds	r22, 0x2026
    5b5c:	70 91 27 20 	lds	r23, 0x2027
    5b60:	80 91 28 20 	lds	r24, 0x2028
    5b64:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5b68:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5b6a:	60 91 84 20 	lds	r22, 0x2084
    5b6e:	70 91 85 20 	lds	r23, 0x2085
    5b72:	80 91 86 20 	lds	r24, 0x2086
    5b76:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5b7a:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5b7c:	60 91 dc 1f 	lds	r22, 0x1FDC
    5b80:	70 91 dd 1f 	lds	r23, 0x1FDD
    5b84:	80 91 de 1f 	lds	r24, 0x1FDE
    5b88:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5b8c:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5b8e:	60 91 33 20 	lds	r22, 0x2033
    5b92:	70 91 34 20 	lds	r23, 0x2034
    5b96:	80 91 35 20 	lds	r24, 0x2035
    5b9a:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5b9e:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5ba0:	60 91 c3 20 	lds	r22, 0x20C3
    5ba4:	70 91 c4 20 	lds	r23, 0x20C4
    5ba8:	80 91 c5 20 	lds	r24, 0x20C5
    5bac:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5bb0:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5bb2:	60 91 81 20 	lds	r22, 0x2081
    5bb6:	70 91 82 20 	lds	r23, 0x2082
    5bba:	80 91 83 20 	lds	r24, 0x2083
    5bbe:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5bc2:	21 e0       	ldi	r18, 0x01	; 1
    5bc4:	d1 10       	cpse	r13, r1
    5bc6:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5bc8:	91 e0       	ldi	r25, 0x01	; 1
    5bca:	e1 10       	cpse	r14, r1
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5bce:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(WPS_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5bd0:	91 e0       	ldi	r25, 0x01	; 1
    5bd2:	f1 10       	cpse	r15, r1
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5bd6:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5bd8:	21 e0       	ldi	r18, 0x01	; 1
    5bda:	01 11       	cpse	r16, r1
    5bdc:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5bde:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5be0:	91 e0       	ldi	r25, 0x01	; 1
    5be2:	11 11       	cpse	r17, r1
    5be4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5be6:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5be8:	21 e0       	ldi	r18, 0x01	; 1
    5bea:	d1 11       	cpse	r29, r1
    5bec:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5bee:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5bf0:	91 e0       	ldi	r25, 0x01	; 1
    5bf2:	c1 11       	cpse	r28, r1
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5bf6:	92 2b       	or	r25, r18
    5bf8:	29 f4       	brne	.+10     	; 0x5c04 <testMode+0x8d6>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5bfa:	91 e0       	ldi	r25, 0x01	; 1
    5bfc:	81 11       	cpse	r24, r1
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5c00:	99 23       	and	r25, r25
    5c02:	49 f0       	breq	.+18     	; 0x5c16 <testMode+0x8e8>
			{
				send_usart_char(" ------FAIL");
    5c04:	8c e5       	ldi	r24, 0x5C	; 92
    5c06:	94 e0       	ldi	r25, 0x04	; 4
    5c08:	c2 d9       	rcall	.-3196   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5c0a:	88 e6       	ldi	r24, 0x68	; 104
    5c0c:	94 e0       	ldi	r25, 0x04	; 4
    5c0e:	bf d9       	rcall	.-3202   	; 0x4f8e <send_usart_char>
				button = button1;
    5c10:	10 92 23 20 	sts	0x2023, r1
    5c14:	89 c1       	rjmp	.+786    	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_set(OUT_LED_CH2);
    5c16:	60 91 e4 20 	lds	r22, 0x20E4
    5c1a:	70 91 e5 20 	lds	r23, 0x20E5
    5c1e:	80 91 e6 20 	lds	r24, 0x20E6
    5c22:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				send_usart_char(" ------PASS");
    5c26:	85 e8       	ldi	r24, 0x85	; 133
    5c28:	94 e0       	ldi	r25, 0x04	; 4
    5c2a:	b1 d9       	rcall	.-3230   	; 0x4f8e <send_usart_char>
				button = button8;
    5c2c:	87 e0       	ldi	r24, 0x07	; 7
    5c2e:	80 93 23 20 	sts	0x2023, r24
    5c32:	7a c1       	rjmp	.+756    	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button8:
		{
			send_usart_char("\r\nIO Switch ");
    5c34:	8f e4       	ldi	r24, 0x4F	; 79
    5c36:	94 e0       	ldi	r25, 0x04	; 4
    5c38:	aa d9       	rcall	.-3244   	; 0x4f8e <send_usart_char>
			send_usart_char("8");
    5c3a:	87 e3       	ldi	r24, 0x37	; 55
    5c3c:	92 e0       	ldi	r25, 0x02	; 2
    5c3e:	a7 d9       	rcall	.-3250   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5c40:	60 91 c3 20 	lds	r22, 0x20C3
    5c44:	70 91 c4 20 	lds	r23, 0x20C4
    5c48:	80 91 c5 20 	lds	r24, 0x20C5
    5c4c:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    5c50:	88 23       	and	r24, r24
    5c52:	51 f0       	breq	.+20     	; 0x5c68 <testMode+0x93a>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5c54:	60 91 c3 20 	lds	r22, 0x20C3
    5c58:	70 91 c4 20 	lds	r23, 0x20C4
    5c5c:	80 91 c5 20 	lds	r24, 0x20C5
    5c60:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("8");
			
			button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			while(button_status_factory != 1)
    5c64:	81 11       	cpse	r24, r1
    5c66:	f6 cf       	rjmp	.-20     	; 0x5c54 <testMode+0x926>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5c68:	60 91 d8 20 	lds	r22, 0x20D8
    5c6c:	70 91 d9 20 	lds	r23, 0x20D9
    5c70:	80 91 da 20 	lds	r24, 0x20DA
    5c74:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5c78:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5c7a:	60 91 d3 20 	lds	r22, 0x20D3
    5c7e:	70 91 d4 20 	lds	r23, 0x20D4
    5c82:	80 91 d5 20 	lds	r24, 0x20D5
    5c86:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5c8a:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5c8c:	60 91 26 20 	lds	r22, 0x2026
    5c90:	70 91 27 20 	lds	r23, 0x2027
    5c94:	80 91 28 20 	lds	r24, 0x2028
    5c98:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5c9c:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5c9e:	60 91 84 20 	lds	r22, 0x2084
    5ca2:	70 91 85 20 	lds	r23, 0x2085
    5ca6:	80 91 86 20 	lds	r24, 0x2086
    5caa:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5cae:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5cb0:	60 91 dc 1f 	lds	r22, 0x1FDC
    5cb4:	70 91 dd 1f 	lds	r23, 0x1FDD
    5cb8:	80 91 de 1f 	lds	r24, 0x1FDE
    5cbc:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5cc0:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5cc2:	60 91 33 20 	lds	r22, 0x2033
    5cc6:	70 91 34 20 	lds	r23, 0x2034
    5cca:	80 91 35 20 	lds	r24, 0x2035
    5cce:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5cd2:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5cd4:	60 91 1a 20 	lds	r22, 0x201A
    5cd8:	70 91 1b 20 	lds	r23, 0x201B
    5cdc:	80 91 1c 20 	lds	r24, 0x201C
    5ce0:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5ce4:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5ce6:	60 91 81 20 	lds	r22, 0x2081
    5cea:	70 91 82 20 	lds	r23, 0x2082
    5cee:	80 91 83 20 	lds	r24, 0x2083
    5cf2:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5cf6:	21 e0       	ldi	r18, 0x01	; 1
    5cf8:	d1 10       	cpse	r13, r1
    5cfa:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5cfc:	91 e0       	ldi	r25, 0x01	; 1
    5cfe:	e1 10       	cpse	r14, r1
    5d00:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5d02:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(VCHARGE_STAT) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5d04:	91 e0       	ldi	r25, 0x01	; 1
    5d06:	f1 10       	cpse	r15, r1
    5d08:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5d0a:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5d0c:	21 e0       	ldi	r18, 0x01	; 1
    5d0e:	01 11       	cpse	r16, r1
    5d10:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5d12:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5d14:	91 e0       	ldi	r25, 0x01	; 1
    5d16:	11 11       	cpse	r17, r1
    5d18:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5d1a:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5d1c:	21 e0       	ldi	r18, 0x01	; 1
    5d1e:	d1 11       	cpse	r29, r1
    5d20:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5d22:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5d24:	91 e0       	ldi	r25, 0x01	; 1
    5d26:	c1 11       	cpse	r28, r1
    5d28:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5d2a:	92 2b       	or	r25, r18
    5d2c:	29 f4       	brne	.+10     	; 0x5d38 <testMode+0xa0a>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(MANUAL_BTN) ? 0 : 1;
    5d2e:	91 e0       	ldi	r25, 0x01	; 1
    5d30:	81 11       	cpse	r24, r1
    5d32:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5d34:	99 23       	and	r25, r25
    5d36:	49 f0       	breq	.+18     	; 0x5d4a <testMode+0xa1c>
			{
				send_usart_char(" ------FAIL");
    5d38:	8c e5       	ldi	r24, 0x5C	; 92
    5d3a:	94 e0       	ldi	r25, 0x04	; 4
    5d3c:	28 d9       	rcall	.-3504   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5d3e:	88 e6       	ldi	r24, 0x68	; 104
    5d40:	94 e0       	ldi	r25, 0x04	; 4
    5d42:	25 d9       	rcall	.-3510   	; 0x4f8e <send_usart_char>
				button = button1;
    5d44:	10 92 23 20 	sts	0x2023, r1
    5d48:	ef c0       	rjmp	.+478    	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_clr(OUT_LED_CH0);
    5d4a:	60 91 0a 20 	lds	r22, 0x200A
    5d4e:	70 91 0b 20 	lds	r23, 0x200B
    5d52:	80 91 0c 20 	lds	r24, 0x200C
    5d56:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
				gpio_clr(OUT_LED_CH1);
    5d5a:	60 91 de 20 	lds	r22, 0x20DE
    5d5e:	70 91 df 20 	lds	r23, 0x20DF
    5d62:	80 91 e0 20 	lds	r24, 0x20E0
    5d66:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
				gpio_clr(OUT_LED_CH2);
    5d6a:	60 91 e4 20 	lds	r22, 0x20E4
    5d6e:	70 91 e5 20 	lds	r23, 0x20E5
    5d72:	80 91 e6 20 	lds	r24, 0x20E6
    5d76:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
				send_usart_char(" ------PASS");
    5d7a:	85 e8       	ldi	r24, 0x85	; 133
    5d7c:	94 e0       	ldi	r25, 0x04	; 4
    5d7e:	07 d9       	rcall	.-3570   	; 0x4f8e <send_usart_char>
				button = button9;
    5d80:	88 e0       	ldi	r24, 0x08	; 8
    5d82:	80 93 23 20 	sts	0x2023, r24
    5d86:	d0 c0       	rjmp	.+416    	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button9:
		{
			send_usart_char("\r\nIO Switch ");
    5d88:	8f e4       	ldi	r24, 0x4F	; 79
    5d8a:	94 e0       	ldi	r25, 0x04	; 4
    5d8c:	00 d9       	rcall	.-3584   	; 0x4f8e <send_usart_char>
			send_usart_char("9");
    5d8e:	8b e9       	ldi	r24, 0x9B	; 155
    5d90:	94 e0       	ldi	r25, 0x04	; 4
    5d92:	fd d8       	rcall	.-3590   	; 0x4f8e <send_usart_char>
			
			button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
    5d94:	60 91 81 20 	lds	r22, 0x2081
    5d98:	70 91 82 20 	lds	r23, 0x2082
    5d9c:	80 91 83 20 	lds	r24, 0x2083
    5da0:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			
			while(button_status_factory != 1)
    5da4:	88 23       	and	r24, r24
    5da6:	51 f0       	breq	.+20     	; 0x5dbc <testMode+0xa8e>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
    5da8:	60 91 81 20 	lds	r22, 0x2081
    5dac:	70 91 82 20 	lds	r23, 0x2082
    5db0:	80 91 83 20 	lds	r24, 0x2083
    5db4:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			send_usart_char("\r\nIO Switch ");
			send_usart_char("9");
			
			button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			
			while(button_status_factory != 1)
    5db8:	81 11       	cpse	r24, r1
    5dba:	f6 cf       	rjmp	.-20     	; 0x5da8 <testMode+0xa7a>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5dbc:	60 91 d8 20 	lds	r22, 0x20D8
    5dc0:	70 91 d9 20 	lds	r23, 0x20D9
    5dc4:	80 91 da 20 	lds	r24, 0x20DA
    5dc8:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5dcc:	e8 2e       	mov	r14, r24
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5dce:	60 91 d3 20 	lds	r22, 0x20D3
    5dd2:	70 91 d4 20 	lds	r23, 0x20D4
    5dd6:	80 91 d5 20 	lds	r24, 0x20D5
    5dda:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5dde:	d8 2e       	mov	r13, r24
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5de0:	60 91 26 20 	lds	r22, 0x2026
    5de4:	70 91 27 20 	lds	r23, 0x2027
    5de8:	80 91 28 20 	lds	r24, 0x2028
    5dec:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5df0:	f8 2e       	mov	r15, r24
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5df2:	60 91 84 20 	lds	r22, 0x2084
    5df6:	70 91 85 20 	lds	r23, 0x2085
    5dfa:	80 91 86 20 	lds	r24, 0x2086
    5dfe:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5e02:	08 2f       	mov	r16, r24
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5e04:	60 91 dc 1f 	lds	r22, 0x1FDC
    5e08:	70 91 dd 1f 	lds	r23, 0x1FDD
    5e0c:	80 91 de 1f 	lds	r24, 0x1FDE
    5e10:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5e14:	18 2f       	mov	r17, r24
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5e16:	60 91 33 20 	lds	r22, 0x2033
    5e1a:	70 91 34 20 	lds	r23, 0x2034
    5e1e:	80 91 35 20 	lds	r24, 0x2035
    5e22:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5e26:	d8 2f       	mov	r29, r24
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5e28:	60 91 1a 20 	lds	r22, 0x201A
    5e2c:	70 91 1b 20 	lds	r23, 0x201B
    5e30:	80 91 1c 20 	lds	r24, 0x201C
    5e34:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
    5e38:	c8 2f       	mov	r28, r24
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5e3a:	60 91 c3 20 	lds	r22, 0x20C3
    5e3e:	70 91 c4 20 	lds	r23, 0x20C4
    5e42:	80 91 c5 20 	lds	r24, 0x20C5
    5e46:	0e 94 4e 0b 	call	0x169c	; 0x169c <gpio_read>
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
    5e4a:	21 e0       	ldi	r18, 0x01	; 1
    5e4c:	d1 10       	cpse	r13, r1
    5e4e:	20 e0       	ldi	r18, 0x00	; 0
			while(button_status_factory != 1)
			{
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
    5e50:	91 e0       	ldi	r25, 0x01	; 1
    5e52:	e1 10       	cpse	r14, r1
    5e54:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e56:	29 2b       	or	r18, r25
				button_status_factory = gpio_read(MANUAL_BTN) ? 0 : 1;
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
    5e58:	91 e0       	ldi	r25, 0x01	; 1
    5e5a:	f1 10       	cpse	r15, r1
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e5e:	92 2b       	or	r25, r18
			}
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
    5e60:	21 e0       	ldi	r18, 0x01	; 1
    5e62:	01 11       	cpse	r16, r1
    5e64:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e66:	29 2b       	or	r18, r25
			
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
    5e68:	91 e0       	ldi	r25, 0x01	; 1
    5e6a:	11 11       	cpse	r17, r1
    5e6c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e6e:	92 2b       	or	r25, r18
			button_status_factory2 = gpio_read(AC_STAT) ? 0 : 1;
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
    5e70:	21 e0       	ldi	r18, 0x01	; 1
    5e72:	d1 11       	cpse	r29, r1
    5e74:	20 e0       	ldi	r18, 0x00	; 0
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e76:	29 2b       	or	r18, r25
			button_status_factory3 = gpio_read(INPUT_LED_CH1) ? 0 : 1;
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
    5e78:	91 e0       	ldi	r25, 0x01	; 1
    5e7a:	c1 11       	cpse	r28, r1
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e7e:	92 2b       	or	r25, r18
    5e80:	29 f4       	brne	.+10     	; 0x5e8c <testMode+0xb5e>
			button_status_factory4 = gpio_read(INPUT_LED_CH2) ? 0 : 1;
			button_status_factory5 = gpio_read(INPUT_LED_DRV0) ? 0 : 1;
			button_status_factory6 = gpio_read(INPUT_LED_DRV1) ? 0 : 1;
			button_status_factory7 = gpio_read(INPUT_LED_DRV2) ? 0 : 1;
			button_status_factory8 = gpio_read(WPS_BTN) ? 0 : 1;
			button_status_factory9 = gpio_read(VCHARGE_STAT) ? 0 : 1;
    5e82:	91 e0       	ldi	r25, 0x01	; 1
    5e84:	81 11       	cpse	r24, r1
    5e86:	90 e0       	ldi	r25, 0x00	; 0
			
			if ((button_status_factory2 | button_status_factory3 | button_status_factory4 | button_status_factory5 | button_status_factory6 | button_status_factory7 | button_status_factory8 | button_status_factory9) != 0)
    5e88:	99 23       	and	r25, r25
    5e8a:	49 f0       	breq	.+18     	; 0x5e9e <testMode+0xb70>
			{
				send_usart_char(" ------FAIL");
    5e8c:	8c e5       	ldi	r24, 0x5C	; 92
    5e8e:	94 e0       	ldi	r25, 0x04	; 4
    5e90:	7e d8       	rcall	.-3844   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\nMultiple Input Turn On ...");
    5e92:	88 e6       	ldi	r24, 0x68	; 104
    5e94:	94 e0       	ldi	r25, 0x04	; 4
    5e96:	7b d8       	rcall	.-3850   	; 0x4f8e <send_usart_char>
				button = button1;
    5e98:	10 92 23 20 	sts	0x2023, r1
    5e9c:	45 c0       	rjmp	.+138    	; 0x5f28 <testMode+0xbfa>
			}
			else
			{
				gpio_clr(STATUS_LED_1);
    5e9e:	60 91 29 20 	lds	r22, 0x2029
    5ea2:	70 91 2a 20 	lds	r23, 0x202A
    5ea6:	80 91 2b 20 	lds	r24, 0x202B
    5eaa:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
				gpio_clr(STATUS_LED_2);
    5eae:	60 91 4b 20 	lds	r22, 0x204B
    5eb2:	70 91 4c 20 	lds	r23, 0x204C
    5eb6:	80 91 4d 20 	lds	r24, 0x204D
    5eba:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
				gpio_clr(CHARGING_DISABLE);
    5ebe:	60 91 5d 20 	lds	r22, 0x205D
    5ec2:	70 91 5e 20 	lds	r23, 0x205E
    5ec6:	80 91 5f 20 	lds	r24, 0x205F
    5eca:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
				gpio_clr(EMER_LIGHT_EN);
    5ece:	60 91 2d 20 	lds	r22, 0x202D
    5ed2:	70 91 2e 20 	lds	r23, 0x202E
    5ed6:	80 91 2f 20 	lds	r24, 0x202F
    5eda:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_clr>
				gpio_set(OUT_LED_CH0);
    5ede:	60 91 0a 20 	lds	r22, 0x200A
    5ee2:	70 91 0b 20 	lds	r23, 0x200B
    5ee6:	80 91 0c 20 	lds	r24, 0x200C
    5eea:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				gpio_set(OUT_LED_CH1);
    5eee:	60 91 de 20 	lds	r22, 0x20DE
    5ef2:	70 91 df 20 	lds	r23, 0x20DF
    5ef6:	80 91 e0 20 	lds	r24, 0x20E0
    5efa:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				gpio_set(OUT_LED_CH2);
    5efe:	60 91 e4 20 	lds	r22, 0x20E4
    5f02:	70 91 e5 20 	lds	r23, 0x20E5
    5f06:	80 91 e6 20 	lds	r24, 0x20E6
    5f0a:	0e 94 97 09 	call	0x132e	; 0x132e <gpio_set>
				send_usart_char(" ------PASS");
    5f0e:	85 e8       	ldi	r24, 0x85	; 133
    5f10:	94 e0       	ldi	r25, 0x04	; 4
    5f12:	3d d8       	rcall	.-3974   	; 0x4f8e <send_usart_char>
				send_usart_char("\r\n------ Test Finished ------\r\n------ Successful ------");
    5f14:	8d e9       	ldi	r24, 0x9D	; 157
    5f16:	94 e0       	ldi	r25, 0x04	; 4
    5f18:	3a d8       	rcall	.-3980   	; 0x4f8e <send_usart_char>
				button = button10;
    5f1a:	89 e0       	ldi	r24, 0x09	; 9
    5f1c:	80 93 23 20 	sts	0x2023, r24
    5f20:	03 c0       	rjmp	.+6      	; 0x5f28 <testMode+0xbfa>
		}
		break;
		
		case button10:
		{
			option_select = option_message;
    5f22:	89 e0       	ldi	r24, 0x09	; 9
    5f24:	80 93 37 20 	sts	0x2037, r24
		}
		break;
	}

}
    5f28:	df 91       	pop	r29
    5f2a:	cf 91       	pop	r28
    5f2c:	1f 91       	pop	r17
    5f2e:	0f 91       	pop	r16
    5f30:	ff 90       	pop	r15
    5f32:	ef 90       	pop	r14
    5f34:	df 90       	pop	r13
    5f36:	08 95       	ret

00005f38 <dump_eeprom>:

void dump_eeprom()
{
    5f38:	0f 93       	push	r16
    5f3a:	1f 93       	push	r17
    5f3c:	cf 93       	push	r28
    5f3e:	df 93       	push	r29
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
    5f40:	c0 e0       	ldi	r28, 0x00	; 0
    5f42:	d0 e0       	ldi	r29, 0x00	; 0

}

void dump_eeprom()
{
	uint8_t block = 0;
    5f44:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
	{
		if(block == 32)
		{
			send_usart_char("\r\n");
			block = 0;
    5f46:	00 e0       	ldi	r16, 0x00	; 0
    5f48:	06 c0       	rjmp	.+12     	; 0x5f56 <dump_eeprom+0x1e>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
	{
		if(block == 32)
    5f4a:	10 32       	cpi	r17, 0x20	; 32
    5f4c:	21 f4       	brne	.+8      	; 0x5f56 <dump_eeprom+0x1e>
		{
			send_usart_char("\r\n");
    5f4e:	8a e6       	ldi	r24, 0x6A	; 106
    5f50:	96 e0       	ldi	r25, 0x06	; 6
    5f52:	1d d8       	rcall	.-4038   	; 0x4f8e <send_usart_char>
			block = 0;
    5f54:	10 2f       	mov	r17, r16
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		int_to_ascii(PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high));
    5f56:	2d 2f       	mov	r18, r29
    5f58:	4c 2f       	mov	r20, r28
    5f5a:	65 e4       	ldi	r22, 0x45	; 69
    5f5c:	8f ea       	ldi	r24, 0xAF	; 175
    5f5e:	0e 94 7d 22 	call	0x44fa	; 0x44fa <PNEWELSE2promRead>
    5f62:	69 d8       	rcall	.-3886   	; 0x5036 <int_to_ascii>
		send_usart_char(" ");
    5f64:	8c ef       	ldi	r24, 0xFC	; 252
    5f66:	94 e0       	ldi	r25, 0x04	; 4
    5f68:	12 d8       	rcall	.-4060   	; 0x4f8e <send_usart_char>
		pne_delayms(5);
    5f6a:	85 e0       	ldi	r24, 0x05	; 5
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	0e 94 65 21 	call	0x42ca	; 0x42ca <pne_delayms>
		block++;
    5f72:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<8192; tmpi++)
    5f74:	21 96       	adiw	r28, 0x01	; 1
    5f76:	c1 15       	cp	r28, r1
    5f78:	80 e2       	ldi	r24, 0x20	; 32
    5f7a:	d8 07       	cpc	r29, r24
    5f7c:	31 f7       	brne	.-52     	; 0x5f4a <dump_eeprom+0x12>
		send_usart_char(" ");
		pne_delayms(5);
		block++;
		
	}
	option_select = option_message;
    5f7e:	89 e0       	ldi	r24, 0x09	; 9
    5f80:	80 93 37 20 	sts	0x2037, r24
}
    5f84:	df 91       	pop	r29
    5f86:	cf 91       	pop	r28
    5f88:	1f 91       	pop	r17
    5f8a:	0f 91       	pop	r16
    5f8c:	08 95       	ret

00005f8e <readE2prom>:
uint8_t readE2prom(uint16_t address)
{
	uint8_t cache = 0;
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	cache = PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high);
    5f8e:	29 2f       	mov	r18, r25
    5f90:	48 2f       	mov	r20, r24
    5f92:	65 e4       	ldi	r22, 0x45	; 69
    5f94:	8f ea       	ldi	r24, 0xAF	; 175
    5f96:	0c 94 7d 22 	jmp	0x44fa	; 0x44fa <PNEWELSE2promRead>
	return cache;
}
    5f9a:	08 95       	ret

00005f9c <pneDisplayInfo>:
	}
		return idle;
}

void pneDisplayInfo()
{
    5f9c:	ef 92       	push	r14
    5f9e:	ff 92       	push	r15
    5fa0:	0f 93       	push	r16
    5fa2:	1f 93       	push	r17
    5fa4:	cf 93       	push	r28
    5fa6:	df 93       	push	r29
    5fa8:	cd b7       	in	r28, 0x3d	; 61
    5faa:	de b7       	in	r29, 0x3e	; 62
    5fac:	62 97       	sbiw	r28, 0x12	; 18
    5fae:	0f b6       	in	r0, 0x3f	; 63
    5fb0:	f8 94       	cli
    5fb2:	de bf       	out	0x3e, r29	; 62
    5fb4:	0f be       	out	0x3f, r0	; 63
    5fb6:	cd bf       	out	0x3d, r28	; 61
	uint8_t cache[2]={0};
		
	send_usart_char("Device information:\r\n");
    5fb8:	85 ed       	ldi	r24, 0xD5	; 213
    5fba:	94 e0       	ldi	r25, 0x04	; 4
    5fbc:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
	send_usart_char("\r\nPAN ID (Zone)\t: ");
    5fc0:	8b ee       	ldi	r24, 0xEB	; 235
    5fc2:	94 e0       	ldi	r25, 0x04	; 4
    5fc4:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
	cache[0] = readE2prom(DEVICE_PAN_H);
    5fc8:	81 e0       	ldi	r24, 0x01	; 1
    5fca:	90 e1       	ldi	r25, 0x10	; 16
    5fcc:	e0 df       	rcall	.-64     	; 0x5f8e <readE2prom>
    5fce:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_PAN_L);
    5fd0:	80 e0       	ldi	r24, 0x00	; 0
    5fd2:	90 e1       	ldi	r25, 0x10	; 16
    5fd4:	dc df       	rcall	.-72     	; 0x5f8e <readE2prom>
	PNEWELS_Buffer.devicePAN = cache[0];
    5fd6:	21 2f       	mov	r18, r17
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.devicePAN = PNEWELS_Buffer.devicePAN << 8;
    5fda:	32 2f       	mov	r19, r18
    5fdc:	22 27       	eor	r18, r18
	PNEWELS_Buffer.devicePAN |= cache[1];
    5fde:	a9 01       	movw	r20, r18
    5fe0:	48 2b       	or	r20, r24
    5fe2:	ca 01       	movw	r24, r20
    5fe4:	0f 2e       	mov	r0, r31
    5fe6:	f0 ee       	ldi	r31, 0xE0	; 224
    5fe8:	ef 2e       	mov	r14, r31
    5fea:	ff e1       	ldi	r31, 0x1F	; 31
    5fec:	ff 2e       	mov	r15, r31
    5fee:	f0 2d       	mov	r31, r0
    5ff0:	f7 01       	movw	r30, r14
    5ff2:	96 8f       	std	Z+30, r25	; 0x1e
    5ff4:	85 8f       	std	Z+29, r24	; 0x1d
	int_to_ascii((uint8_t)(PNEWELS_Buffer.devicePAN>>8));
    5ff6:	89 2f       	mov	r24, r25
    5ff8:	1e d8       	rcall	.-4036   	; 0x5036 <int_to_ascii>
	int_to_ascii((uint8_t)PNEWELS_Buffer.devicePAN);
    5ffa:	f7 01       	movw	r30, r14
    5ffc:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ffe:	1b d8       	rcall	.-4042   	; 0x5036 <int_to_ascii>
	
// 	send_usart_char("\r\nNode ID\t\t: ");
// 	PNEWELS_Buffer.nodeID = readE2prom(NODE_ID);
// 	int_to_ascii(PNEWELS_Buffer.nodeID);
	
	send_usart_char("\r\nDevice address\t: ");
    6000:	8e ef       	ldi	r24, 0xFE	; 254
    6002:	94 e0       	ldi	r25, 0x04	; 4
    6004:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
	cache[0] = readE2prom(DEVICE_ADDRESS_H);
    6008:	8d ef       	ldi	r24, 0xFD	; 253
    600a:	9f e0       	ldi	r25, 0x0F	; 15
    600c:	c0 df       	rcall	.-128    	; 0x5f8e <readE2prom>
    600e:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_ADDRESS_L);
    6010:	8c ef       	ldi	r24, 0xFC	; 252
    6012:	9f e0       	ldi	r25, 0x0F	; 15
    6014:	bc df       	rcall	.-136    	; 0x5f8e <readE2prom>
	PNEWELS_Buffer.deviceAddress = cache[0];
    6016:	21 2f       	mov	r18, r17
    6018:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.deviceAddress = PNEWELS_Buffer.deviceAddress << 8;
    601a:	32 2f       	mov	r19, r18
    601c:	22 27       	eor	r18, r18
	PNEWELS_Buffer.deviceAddress |= cache[1];
    601e:	a9 01       	movw	r20, r18
    6020:	48 2b       	or	r20, r24
    6022:	ca 01       	movw	r24, r20
    6024:	f7 01       	movw	r30, r14
    6026:	94 8f       	std	Z+28, r25	; 0x1c
    6028:	83 8f       	std	Z+27, r24	; 0x1b
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress>>8));
    602a:	89 2f       	mov	r24, r25
    602c:	04 d8       	rcall	.-4088   	; 0x5036 <int_to_ascii>
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress));
    602e:	f7 01       	movw	r30, r14
    6030:	83 8d       	ldd	r24, Z+27	; 0x1b
    6032:	01 d8       	rcall	.-4094   	; 0x5036 <int_to_ascii>
	
	send_usart_char("\r\nDevice channel\t: ");
    6034:	82 e1       	ldi	r24, 0x12	; 18
    6036:	95 e0       	ldi	r25, 0x05	; 5
    6038:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
	cache[0] = readE2prom(DEVICE_CHANNEL_H);
    603c:	8f ef       	ldi	r24, 0xFF	; 255
    603e:	9f e0       	ldi	r25, 0x0F	; 15
    6040:	a6 df       	rcall	.-180    	; 0x5f8e <readE2prom>
    6042:	18 2f       	mov	r17, r24
	cache[1] = readE2prom(DEVICE_CHANNEL_L);
    6044:	8e ef       	ldi	r24, 0xFE	; 254
    6046:	9f e0       	ldi	r25, 0x0F	; 15
    6048:	a2 df       	rcall	.-188    	; 0x5f8e <readE2prom>
	PNEWELS_Buffer.deviceAddress = cache[0];
    604a:	21 2f       	mov	r18, r17
    604c:	30 e0       	ldi	r19, 0x00	; 0
	PNEWELS_Buffer.deviceAddress = PNEWELS_Buffer.deviceAddress << 8;
    604e:	32 2f       	mov	r19, r18
    6050:	22 27       	eor	r18, r18
	PNEWELS_Buffer.deviceAddress |= cache[1];
    6052:	a9 01       	movw	r20, r18
    6054:	48 2b       	or	r20, r24
    6056:	ca 01       	movw	r24, r20
    6058:	f7 01       	movw	r30, r14
    605a:	94 8f       	std	Z+28, r25	; 0x1c
    605c:	83 8f       	std	Z+27, r24	; 0x1b
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress>>8));
    605e:	89 2f       	mov	r24, r25
    6060:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
	int_to_ascii((uint8_t)(PNEWELS_Buffer.deviceAddress));
    6064:	f7 01       	movw	r30, r14
    6066:	83 8d       	ldd	r24, Z+27	; 0x1b
    6068:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
	
	//Read EEPROM and display serial number
	uint8_t serial_addr[2] = {0x00, 0x08};
    606c:	19 82       	std	Y+1, r1	; 0x01
    606e:	88 e0       	ldi	r24, 0x08	; 8
    6070:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t serial_no[16] = {0};
    6072:	7e 01       	movw	r14, r28
    6074:	f3 e0       	ldi	r31, 0x03	; 3
    6076:	ef 0e       	add	r14, r31
    6078:	f1 1c       	adc	r15, r1
    607a:	80 e1       	ldi	r24, 0x10	; 16
    607c:	f7 01       	movw	r30, r14
    607e:	11 92       	st	Z+, r1
    6080:	8a 95       	dec	r24
    6082:	e9 f7       	brne	.-6      	; 0x607e <pneDisplayInfo+0xe2>
								
	pne_APP_TwiInit(0xBF);
    6084:	8f eb       	ldi	r24, 0xBF	; 191
    6086:	0e 94 79 21 	call	0x42f2	; 0x42f2 <pne_APP_TwiInit>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, serial_no, 16);
    608a:	00 e1       	ldi	r16, 0x10	; 16
    608c:	97 01       	movw	r18, r14
    608e:	4f eb       	ldi	r20, 0xBF	; 191
    6090:	62 e0       	ldi	r22, 0x02	; 2
    6092:	ce 01       	movw	r24, r28
    6094:	01 96       	adiw	r24, 0x01	; 1
    6096:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <pne_APP_TwiReceive>
	send_usart_char("\r\nSerial Number   : ");
    609a:	86 e2       	ldi	r24, 0x26	; 38
    609c:	95 e0       	ldi	r25, 0x05	; 5
    609e:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
    60a2:	87 01       	movw	r16, r14
    60a4:	7e 01       	movw	r14, r28
    60a6:	f2 e1       	ldi	r31, 0x12	; 18
    60a8:	ef 0e       	add	r14, r31
    60aa:	f1 1c       	adc	r15, r1
							
	uint8_t compare = 0;
							
	for (compare=0; compare<15; compare++)
	{
		int_to_ascii(serial_no[compare]);
    60ac:	f8 01       	movw	r30, r16
    60ae:	81 91       	ld	r24, Z+
    60b0:	8f 01       	movw	r16, r30
    60b2:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
		usart_putchar(USART_SERIAL_EXAMPLE, 0x2E);
    60b6:	6e e2       	ldi	r22, 0x2E	; 46
    60b8:	88 ec       	ldi	r24, 0xC8	; 200
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <usart_putchar>
	pne_APP_TwiReceive(serial_addr, 2, 0xBF, serial_no, 16);
	send_usart_char("\r\nSerial Number   : ");
							
	uint8_t compare = 0;
							
	for (compare=0; compare<15; compare++)
    60c0:	0e 15       	cp	r16, r14
    60c2:	1f 05       	cpc	r17, r15
    60c4:	99 f7       	brne	.-26     	; 0x60ac <pneDisplayInfo+0x110>
	{
		int_to_ascii(serial_no[compare]);
		usart_putchar(USART_SERIAL_EXAMPLE, 0x2E);
	}
							
	int_to_ascii(serial_no[15]);
    60c6:	8a 89       	ldd	r24, Y+18	; 0x12
    60c8:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
							
	//Read ADC
	uint8_t battery_voltage = pneBatteryAverage();
    60cc:	ef d7       	rcall	.+4062   	; 0x70ac <pneBatteryAverage>
    60ce:	08 2f       	mov	r16, r24
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    60d0:	eb e7       	ldi	r30, 0x7B	; 123
    60d2:	f0 e0       	ldi	r31, 0x00	; 0
    60d4:	90 81       	ld	r25, Z
    60d6:	97 7f       	andi	r25, 0xF7	; 247
    60d8:	90 83       	st	Z, r25
	}

	ADMUX
		= ((uint8_t)input &
    60da:	81 e6       	ldi	r24, 0x61	; 97
    60dc:	80 93 7c 00 	sts	0x007C, r24
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    60e0:	ea e7       	ldi	r30, 0x7A	; 122
    60e2:	f0 e0       	ldi	r31, 0x00	; 0
    60e4:	90 81       	ld	r25, Z
    60e6:	90 64       	ori	r25, 0x40	; 64
    60e8:	90 83       	st	Z, r25

	while ((ADCSRA & (1 << ADSC))) {
    60ea:	90 81       	ld	r25, Z
    60ec:	96 fd       	sbrc	r25, 6
    60ee:	fd cf       	rjmp	.-6      	; 0x60ea <pneDisplayInfo+0x14e>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    60f0:	10 91 79 00 	lds	r17, 0x0079
	uint8_t battery_capacity = adc_read_8bit(ADC_EMER_LIGHT_INPUT, ADC_VREF);
							
	send_usart_char("\r\nBattery Voltage : ");
    60f4:	8b e3       	ldi	r24, 0x3B	; 59
    60f6:	95 e0       	ldi	r25, 0x05	; 5
    60f8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
	int_to_ascii(battery_voltage);
    60fc:	80 2f       	mov	r24, r16
    60fe:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
	send_usart_char("\r\nBattery Capacity: ");
    6102:	80 e5       	ldi	r24, 0x50	; 80
    6104:	95 e0       	ldi	r25, 0x05	; 5
    6106:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
	int_to_ascii(battery_capacity);
    610a:	81 2f       	mov	r24, r17
    610c:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
	
	option_select = option_message;
    6110:	89 e0       	ldi	r24, 0x09	; 9
    6112:	80 93 37 20 	sts	0x2037, r24
}
    6116:	62 96       	adiw	r28, 0x12	; 18
    6118:	0f b6       	in	r0, 0x3f	; 63
    611a:	f8 94       	cli
    611c:	de bf       	out	0x3e, r29	; 62
    611e:	0f be       	out	0x3f, r0	; 63
    6120:	cd bf       	out	0x3d, r28	; 61
    6122:	df 91       	pop	r29
    6124:	cf 91       	pop	r28
    6126:	1f 91       	pop	r17
    6128:	0f 91       	pop	r16
    612a:	ff 90       	pop	r15
    612c:	ef 90       	pop	r14
    612e:	08 95       	ret

00006130 <resetFlag>:
	int_to_ascii(data);
	/*send_usart_char("\r\n");*/
}

void resetFlag()
{
    6130:	0f 93       	push	r16
	
	uint8_t memory_address_low = (FLAG & 0xFF);
	uint8_t memory_address_high = ((FLAG >> 8) & 0xFF);
	
	switch(reset_state)
    6132:	80 91 b2 20 	lds	r24, 0x20B2
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	88 30       	cpi	r24, 0x08	; 8
    613a:	91 05       	cpc	r25, r1
    613c:	08 f0       	brcs	.+2      	; 0x6140 <resetFlag+0x10>
    613e:	73 c0       	rjmp	.+230    	; 0x6226 <resetFlag+0xf6>
    6140:	fc 01       	movw	r30, r24
    6142:	88 27       	eor	r24, r24
    6144:	ea 58       	subi	r30, 0x8A	; 138
    6146:	fe 4f       	sbci	r31, 0xFE	; 254
    6148:	8f 4f       	sbci	r24, 0xFF	; 255
    614a:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <__tablejump2__>
	{
		case reset_startup_message:
		{
			send_usart_char("\r\n\r\nFlag reset mode. Select an option:\r\n\r\n");
    614e:	85 e6       	ldi	r24, 0x65	; 101
    6150:	95 e0       	ldi	r25, 0x05	; 5
    6152:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			send_usart_char("1. Reset all flag\r\n2. Reset Factory flag (bit0)\r\n3. Reset AC Power flag (bit1)\r\n");
    6156:	80 e9       	ldi	r24, 0x90	; 144
    6158:	95 e0       	ldi	r25, 0x05	; 5
    615a:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			send_usart_char("4. Read system flag status\r\n5. Set flag\r\n0. Exit configuration mode\r\n");
    615e:	81 ee       	ldi	r24, 0xE1	; 225
    6160:	95 e0       	ldi	r25, 0x05	; 5
    6162:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			reset_option_flag = 1;
    6166:	81 e0       	ldi	r24, 0x01	; 1
    6168:	80 93 25 20 	sts	0x2025, r24
			reset_state = reset_idle;
    616c:	86 e0       	ldi	r24, 0x06	; 6
    616e:	80 93 b2 20 	sts	0x20B2, r24
		}
		break;
    6172:	60 c0       	rjmp	.+192    	; 0x6234 <resetFlag+0x104>
		
		case reset_all:
		{
 			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,0xFF);
    6174:	0f ef       	ldi	r16, 0xFF	; 255
    6176:	20 e1       	ldi	r18, 0x10	; 16
    6178:	42 e0       	ldi	r20, 0x02	; 2
    617a:	65 e4       	ldi	r22, 0x45	; 69
    617c:	8e ea       	ldi	r24, 0xAE	; 174
    617e:	0e 94 52 22 	call	0x44a4	; 0x44a4 <PNEWELSE2promWrite>
			pne_delayms(10);
    6182:	8a e0       	ldi	r24, 0x0A	; 10
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	0e 94 65 21 	call	0x42ca	; 0x42ca <pne_delayms>
			reset_state = reset_startup_message;
    618a:	10 92 b2 20 	sts	0x20B2, r1
		}
		break;
    618e:	52 c0       	rjmp	.+164    	; 0x6234 <resetFlag+0x104>
		
		case reset_bit0:
		{
			reset_cache = readE2prom(FLAG);
    6190:	82 e0       	ldi	r24, 0x02	; 2
    6192:	90 e1       	ldi	r25, 0x10	; 16
    6194:	fc de       	rcall	.-520    	; 0x5f8e <readE2prom>
			reset_cache = (reset_cache | 0x01); 
    6196:	08 2f       	mov	r16, r24
    6198:	01 60       	ori	r16, 0x01	; 1
    619a:	00 93 df 1f 	sts	0x1FDF, r16
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    619e:	20 e1       	ldi	r18, 0x10	; 16
    61a0:	42 e0       	ldi	r20, 0x02	; 2
    61a2:	65 e4       	ldi	r22, 0x45	; 69
    61a4:	8e ea       	ldi	r24, 0xAE	; 174
    61a6:	0e 94 52 22 	call	0x44a4	; 0x44a4 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    61aa:	10 92 b2 20 	sts	0x20B2, r1
		}
		break;
    61ae:	42 c0       	rjmp	.+132    	; 0x6234 <resetFlag+0x104>
		
		case reset_bit1:
		{
			reset_cache = readE2prom(FLAG);
    61b0:	82 e0       	ldi	r24, 0x02	; 2
    61b2:	90 e1       	ldi	r25, 0x10	; 16
    61b4:	ec de       	rcall	.-552    	; 0x5f8e <readE2prom>
			reset_cache = (reset_cache | 0x02); 
    61b6:	08 2f       	mov	r16, r24
    61b8:	02 60       	ori	r16, 0x02	; 2
    61ba:	00 93 df 1f 	sts	0x1FDF, r16
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    61be:	20 e1       	ldi	r18, 0x10	; 16
    61c0:	42 e0       	ldi	r20, 0x02	; 2
    61c2:	65 e4       	ldi	r22, 0x45	; 69
    61c4:	8e ea       	ldi	r24, 0xAE	; 174
    61c6:	0e 94 52 22 	call	0x44a4	; 0x44a4 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    61ca:	10 92 b2 20 	sts	0x20B2, r1
		}
		break;
    61ce:	32 c0       	rjmp	.+100    	; 0x6234 <resetFlag+0x104>
		
		case reset_read_status:
		{
			reset_cache = readE2prom(FLAG);
    61d0:	82 e0       	ldi	r24, 0x02	; 2
    61d2:	90 e1       	ldi	r25, 0x10	; 16
    61d4:	dc de       	rcall	.-584    	; 0x5f8e <readE2prom>
    61d6:	80 93 df 1f 	sts	0x1FDF, r24
			send_usart_char("\r\nSystem Flag: ");
    61da:	87 e2       	ldi	r24, 0x27	; 39
    61dc:	96 e0       	ldi	r25, 0x06	; 6
    61de:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			int_to_ascii(reset_cache);
    61e2:	80 91 df 1f 	lds	r24, 0x1FDF
    61e6:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
			send_usart_char("\r\n");
    61ea:	8a e6       	ldi	r24, 0x6A	; 106
    61ec:	96 e0       	ldi	r25, 0x06	; 6
    61ee:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			reset_state = reset_startup_message;
    61f2:	10 92 b2 20 	sts	0x20B2, r1
		}
		break;
    61f6:	1e c0       	rjmp	.+60     	; 0x6234 <resetFlag+0x104>

		case reset_set_flag:
		{
			reset_cache = 0xFC;
    61f8:	8c ef       	ldi	r24, 0xFC	; 252
    61fa:	80 93 df 1f 	sts	0x1FDF, r24
			PNEWELSE2promWrite(0xAE,'E',memory_address_low,memory_address_high,reset_cache);
    61fe:	0c ef       	ldi	r16, 0xFC	; 252
    6200:	20 e1       	ldi	r18, 0x10	; 16
    6202:	42 e0       	ldi	r20, 0x02	; 2
    6204:	65 e4       	ldi	r22, 0x45	; 69
    6206:	8e ea       	ldi	r24, 0xAE	; 174
    6208:	0e 94 52 22 	call	0x44a4	; 0x44a4 <PNEWELSE2promWrite>
			reset_state = reset_startup_message;
    620c:	10 92 b2 20 	sts	0x20B2, r1
		}
		break;
    6210:	11 c0       	rjmp	.+34     	; 0x6234 <resetFlag+0x104>
		case reset_idle:
		break;
		
		case reset_exit:
		{
			reset_option_flag = 0;
    6212:	10 92 25 20 	sts	0x2025, r1
			option_select = option_message;
    6216:	89 e0       	ldi	r24, 0x09	; 9
    6218:	80 93 37 20 	sts	0x2037, r24
			config_state = config_startup_message;
    621c:	10 92 22 20 	sts	0x2022, r1
			reset_state = reset_startup_message;
    6220:	10 92 b2 20 	sts	0x20B2, r1
			break;
    6224:	07 c0       	rjmp	.+14     	; 0x6234 <resetFlag+0x104>
		}
		default:
		option_select = option_message;
    6226:	89 e0       	ldi	r24, 0x09	; 9
    6228:	80 93 37 20 	sts	0x2037, r24
		config_state = config_startup_message;
    622c:	10 92 22 20 	sts	0x2022, r1
		reset_state = reset_startup_message;
    6230:	10 92 b2 20 	sts	0x20B2, r1
		break;
		
	}
}
    6234:	0f 91       	pop	r16
    6236:	08 95       	ret

00006238 <dump_log_file>:
	cache = PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high);
	return cache;
}

void dump_log_file()
{
    6238:	0f 93       	push	r16
    623a:	1f 93       	push	r17
    623c:	cf 93       	push	r28
    623e:	df 93       	push	r29
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6240:	c0 e0       	ldi	r28, 0x00	; 0
    6242:	d0 e0       	ldi	r29, 0x00	; 0
	return cache;
}

void dump_log_file()
{
	uint8_t block = 0;
    6244:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(block == 11)
		{
			send_usart_char("\r\n");
			block = 0;
    6246:	00 e0       	ldi	r16, 0x00	; 0
    6248:	07 c0       	rjmp	.+14     	; 0x6258 <dump_log_file+0x20>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(block == 11)
    624a:	1b 30       	cpi	r17, 0x0B	; 11
    624c:	29 f4       	brne	.+10     	; 0x6258 <dump_log_file+0x20>
		{
			send_usart_char("\r\n");
    624e:	8a e6       	ldi	r24, 0x6A	; 106
    6250:	96 e0       	ldi	r25, 0x06	; 6
    6252:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			block = 0;
    6256:	10 2f       	mov	r17, r16
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		int_to_ascii(PNEWELSE2promRead(0xAF, 'E', memory_address_low, memory_address_high));
    6258:	2d 2f       	mov	r18, r29
    625a:	4c 2f       	mov	r20, r28
    625c:	65 e4       	ldi	r22, 0x45	; 69
    625e:	8f ea       	ldi	r24, 0xAF	; 175
    6260:	0e 94 7d 22 	call	0x44fa	; 0x44fa <PNEWELSE2promRead>
    6264:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
		send_usart_char(" ");
    6268:	8c ef       	ldi	r24, 0xFC	; 252
    626a:	94 e0       	ldi	r25, 0x04	; 4
    626c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
		pne_delayms(5);
    6270:	85 e0       	ldi	r24, 0x05	; 5
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	0e 94 65 21 	call	0x42ca	; 0x42ca <pne_delayms>
		block++;
    6278:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t block = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    627a:	21 96       	adiw	r28, 0x01	; 1
    627c:	cc 3f       	cpi	r28, 0xFC	; 252
    627e:	8f e0       	ldi	r24, 0x0F	; 15
    6280:	d8 07       	cpc	r29, r24
    6282:	19 f7       	brne	.-58     	; 0x624a <dump_log_file+0x12>
		send_usart_char(" ");
		pne_delayms(5);
		block++;
		
	}
	option_select = option_message;
    6284:	89 e0       	ldi	r24, 0x09	; 9
    6286:	80 93 37 20 	sts	0x2037, r24
}
    628a:	df 91       	pop	r29
    628c:	cf 91       	pop	r28
    628e:	1f 91       	pop	r17
    6290:	0f 91       	pop	r16
    6292:	08 95       	ret

00006294 <erase_memory>:

void erase_memory()
{
	clre2prom();
    6294:	0e 94 d7 22 	call	0x45ae	; 0x45ae <clre2prom>
	option_select = option_message;
    6298:	89 e0       	ldi	r24, 0x09	; 9
    629a:	80 93 37 20 	sts	0x2037, r24
    629e:	08 95       	ret

000062a0 <writeE2prom>:
}

void writeE2prom(uint16_t address, uint8_t data)
{
    62a0:	0f 93       	push	r16
	uint8_t memory_address_low = (address & 0xFF);
	uint8_t memory_address_high = ((address >> 8) & 0xFF);
	PNEWELSE2promWrite(0xAE, 'E', memory_address_low, memory_address_high, data);
    62a2:	06 2f       	mov	r16, r22
    62a4:	29 2f       	mov	r18, r25
    62a6:	48 2f       	mov	r20, r24
    62a8:	65 e4       	ldi	r22, 0x45	; 69
    62aa:	8e ea       	ldi	r24, 0xAE	; 174
    62ac:	0e 94 52 22 	call	0x44a4	; 0x44a4 <PNEWELSE2promWrite>
	pne_delayms(10);
    62b0:	8a e0       	ldi	r24, 0x0A	; 10
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	0e 94 65 21 	call	0x42ca	; 0x42ca <pne_delayms>
}
    62b8:	0f 91       	pop	r16
    62ba:	08 95       	ret

000062bc <battery_config>:

void battery_config()
{	
	switch(battery_state)
    62bc:	80 91 dd 20 	lds	r24, 0x20DD
    62c0:	82 30       	cpi	r24, 0x02	; 2
    62c2:	79 f1       	breq	.+94     	; 0x6322 <battery_config+0x66>
    62c4:	28 f4       	brcc	.+10     	; 0x62d0 <battery_config+0x14>
    62c6:	88 23       	and	r24, r24
    62c8:	59 f0       	breq	.+22     	; 0x62e0 <battery_config+0x24>
    62ca:	81 30       	cpi	r24, 0x01	; 1
    62cc:	e1 f0       	breq	.+56     	; 0x6306 <battery_config+0x4a>
    62ce:	66 c0       	rjmp	.+204    	; 0x639c <battery_config+0xe0>
    62d0:	84 30       	cpi	r24, 0x04	; 4
    62d2:	09 f4       	brne	.+2      	; 0x62d6 <battery_config+0x1a>
    62d4:	6a c0       	rjmp	.+212    	; 0x63aa <battery_config+0xee>
    62d6:	98 f1       	brcs	.+102    	; 0x633e <battery_config+0x82>
    62d8:	85 30       	cpi	r24, 0x05	; 5
    62da:	09 f4       	brne	.+2      	; 0x62de <battery_config+0x22>
    62dc:	55 c0       	rjmp	.+170    	; 0x6388 <battery_config+0xcc>
    62de:	5e c0       	rjmp	.+188    	; 0x639c <battery_config+0xe0>
	{
		case battery_startup_message:
		{
			send_usart_char("\r\n\r\nBattery Configuration Mode. Select an option:\r\n\r\n");
    62e0:	87 e3       	ldi	r24, 0x37	; 55
    62e2:	96 e0       	ldi	r25, 0x06	; 6
    62e4:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			send_usart_char("1. Set Battery Low Threshold\r\n2. Set Battery Max Threshold\r\n");
    62e8:	8d e6       	ldi	r24, 0x6D	; 109
    62ea:	96 e0       	ldi	r25, 0x06	; 6
    62ec:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			send_usart_char("3. Display Battery Threshold\r\n0. Exit\r\n");
    62f0:	8a ea       	ldi	r24, 0xAA	; 170
    62f2:	96 e0       	ldi	r25, 0x06	; 6
    62f4:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			battery_option_flag = 1;
    62f8:	81 e0       	ldi	r24, 0x01	; 1
    62fa:	80 93 24 20 	sts	0x2024, r24
			battery_state = battery_idle;
    62fe:	84 e0       	ldi	r24, 0x04	; 4
    6300:	80 93 dd 20 	sts	0x20DD, r24
		}
		break;
    6304:	08 95       	ret
		
		case batteryLow:
		{
			send_usart_char("Enter battery low threshold value (00-FF): \r\n");
    6306:	82 ed       	ldi	r24, 0xD2	; 210
    6308:	96 e0       	ldi	r25, 0x06	; 6
    630a:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			config_read_input(BATTERY_LOW, '1', batteryLOW_display);
    630e:	43 e3       	ldi	r20, 0x33	; 51
    6310:	58 e0       	ldi	r21, 0x08	; 8
    6312:	61 e3       	ldi	r22, 0x31	; 49
    6314:	84 e0       	ldi	r24, 0x04	; 4
    6316:	90 e1       	ldi	r25, 0x10	; 16
    6318:	0e 94 9d 28 	call	0x513a	; 0x513a <config_read_input>
			battery_state = battery_startup_message;
    631c:	10 92 dd 20 	sts	0x20DD, r1
		}
		break;
    6320:	08 95       	ret
		
		case batteryMax:
		{
			send_usart_char("Enter battery max threshold value (00-FF): \r\n");
    6322:	80 e0       	ldi	r24, 0x00	; 0
    6324:	97 e0       	ldi	r25, 0x07	; 7
    6326:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			config_read_input(BATTERY_MAX, '1', batteryMAX_display);
    632a:	4d e1       	ldi	r20, 0x1D	; 29
    632c:	58 e0       	ldi	r21, 0x08	; 8
    632e:	61 e3       	ldi	r22, 0x31	; 49
    6330:	83 e0       	ldi	r24, 0x03	; 3
    6332:	90 e1       	ldi	r25, 0x10	; 16
    6334:	0e 94 9d 28 	call	0x513a	; 0x513a <config_read_input>
			battery_state = battery_startup_message;
    6338:	10 92 dd 20 	sts	0x20DD, r1
		}
		break;
    633c:	08 95       	ret
		
		case batteryStatus:
		{
			battery_cache = readE2prom(BATTERY_LOW);
    633e:	84 e0       	ldi	r24, 0x04	; 4
    6340:	90 e1       	ldi	r25, 0x10	; 16
    6342:	25 de       	rcall	.-950    	; 0x5f8e <readE2prom>
    6344:	80 93 e2 20 	sts	0x20E2, r24
			send_usart_char("\r\nBattery Low Threshold: ");
    6348:	8e e2       	ldi	r24, 0x2E	; 46
    634a:	97 e0       	ldi	r25, 0x07	; 7
    634c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			int_to_ascii(battery_cache);
    6350:	80 91 e2 20 	lds	r24, 0x20E2
    6354:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
			send_usart_char("\r\n");
    6358:	8a e6       	ldi	r24, 0x6A	; 106
    635a:	96 e0       	ldi	r25, 0x06	; 6
    635c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			battery_cache = readE2prom(BATTERY_MAX);
    6360:	83 e0       	ldi	r24, 0x03	; 3
    6362:	90 e1       	ldi	r25, 0x10	; 16
    6364:	14 de       	rcall	.-984    	; 0x5f8e <readE2prom>
    6366:	80 93 e2 20 	sts	0x20E2, r24
			send_usart_char("\r\nBattery MAX Threshold: ");
    636a:	88 e4       	ldi	r24, 0x48	; 72
    636c:	97 e0       	ldi	r25, 0x07	; 7
    636e:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			int_to_ascii(battery_cache);
    6372:	80 91 e2 20 	lds	r24, 0x20E2
    6376:	0e 94 1b 28 	call	0x5036	; 0x5036 <int_to_ascii>
			send_usart_char("\r\n");
    637a:	8a e6       	ldi	r24, 0x6A	; 106
    637c:	96 e0       	ldi	r25, 0x06	; 6
    637e:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			battery_state = battery_startup_message;
    6382:	10 92 dd 20 	sts	0x20DD, r1
		}
		break;
    6386:	08 95       	ret
		case battery_idle:
		break;
		
		case battery_exit:
		{
			battery_option_flag = 0;
    6388:	10 92 24 20 	sts	0x2024, r1
			option_select = option_message;
    638c:	89 e0       	ldi	r24, 0x09	; 9
    638e:	80 93 37 20 	sts	0x2037, r24
			config_state = config_startup_message;
    6392:	10 92 22 20 	sts	0x2022, r1
			battery_state = battery_startup_message;
    6396:	10 92 dd 20 	sts	0x20DD, r1
			break;
    639a:	08 95       	ret
		}
		default:
		option_select = option_message;
    639c:	89 e0       	ldi	r24, 0x09	; 9
    639e:	80 93 37 20 	sts	0x2037, r24
		config_state = config_startup_message;
    63a2:	10 92 22 20 	sts	0x2022, r1
		battery_state = battery_startup_message;
    63a6:	10 92 dd 20 	sts	0x20DD, r1
    63aa:	08 95       	ret

000063ac <batterySelect>:


uint8_t batterySelect()
{
	//uint8_t real_command[6] = "123456";
	flag = 0;
    63ac:	10 92 21 20 	sts	0x2021, r1
	
	switch(commamd[0])
    63b0:	80 91 62 20 	lds	r24, 0x2062
    63b4:	81 33       	cpi	r24, 0x31	; 49
    63b6:	a9 f0       	breq	.+42     	; 0x63e2 <batterySelect+0x36>
    63b8:	18 f4       	brcc	.+6      	; 0x63c0 <batterySelect+0x14>
    63ba:	80 33       	cpi	r24, 0x30	; 48
    63bc:	51 f0       	breq	.+20     	; 0x63d2 <batterySelect+0x26>
    63be:	0b c0       	rjmp	.+22     	; 0x63d6 <batterySelect+0x2a>
    63c0:	82 33       	cpi	r24, 0x32	; 50
    63c2:	19 f0       	breq	.+6      	; 0x63ca <batterySelect+0x1e>
    63c4:	83 33       	cpi	r24, 0x33	; 51
    63c6:	19 f0       	breq	.+6      	; 0x63ce <batterySelect+0x22>
    63c8:	06 c0       	rjmp	.+12     	; 0x63d6 <batterySelect+0x2a>
		case '1':
		return batteryLow;
		break;
		
		case '2':
		return batteryMax;
    63ca:	82 e0       	ldi	r24, 0x02	; 2
    63cc:	08 95       	ret
		break;
		
		case '3':
		return batteryStatus;
    63ce:	83 e0       	ldi	r24, 0x03	; 3
    63d0:	08 95       	ret
		break;
		
		case '0':
		return battery_exit;
    63d2:	85 e0       	ldi	r24, 0x05	; 5
    63d4:	08 95       	ret
		break;
		
		default:
		{
			send_usart_char("Invalid command\r\n");
    63d6:	8d e1       	ldi	r24, 0x1D	; 29
    63d8:	93 e0       	ldi	r25, 0x03	; 3
    63da:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
			return  battery_idle;
    63de:	84 e0       	ldi	r24, 0x04	; 4
    63e0:	08 95       	ret
	flag = 0;
	
	switch(commamd[0])
	{
		case '1':
		return batteryLow;
    63e2:	81 e0       	ldi	r24, 0x01	; 1
			return  battery_idle;
		}
		break;
		
	}
    63e4:	08 95       	ret

000063e6 <factory_mode>:
#include "appBattery.h"

//---------- main routine for factory mode ----------//
void factory_mode(void)
{
	configuration_flag = 0; 
    63e6:	10 92 5b 20 	sts	0x205B, r1
	reset_option_flag = 0;
    63ea:	10 92 25 20 	sts	0x2025, r1
	config_waiting_input = 0;
    63ee:	10 92 87 20 	sts	0x2087, r1
	flag = 0;
    63f2:	10 92 21 20 	sts	0x2021, r1
	count_usart = 0;
    63f6:	10 92 45 20 	sts	0x2045, r1
	usart_state = Usart_start;
    63fa:	10 92 b4 20 	sts	0x20B4, r1
	factory_state = factory_startup_message;
    63fe:	10 92 db 20 	sts	0x20DB, r1
	factory_command = groupID_command;
    6402:	10 92 20 20 	sts	0x2020, r1
	config_state = config_startup_message;
    6406:	10 92 22 20 	sts	0x2022, r1
	reset_state = reset_startup_message;
    640a:	10 92 b2 20 	sts	0x20B2, r1
	config_command = groupID_config;
    640e:	10 92 e3 20 	sts	0x20E3, r1
	button = button1;
    6412:	10 92 23 20 	sts	0x2023, r1
	option_select = option_message;
    6416:	89 e0       	ldi	r24, 0x09	; 9
    6418:	80 93 37 20 	sts	0x2037, r24
	battery_option_flag = 0;
    641c:	10 92 24 20 	sts	0x2024, r1
	battery_state = battery_startup_message;
    6420:	10 92 dd 20 	sts	0x20DD, r1
    6424:	e2 e6       	ldi	r30, 0x62	; 98
    6426:	f0 e2       	ldi	r31, 0x20	; 32
    6428:	8f e6       	ldi	r24, 0x6F	; 111
    642a:	90 e2       	ldi	r25, 0x20	; 32
	
	for (uint8_t i=0; i<max_command_length; i++)
	{
		commamd[i] = 0;
    642c:	11 92       	st	Z+, r1
	button = button1;
	option_select = option_message;
	battery_option_flag = 0;
	battery_state = battery_startup_message;
	
	for (uint8_t i=0; i<max_command_length; i++)
    642e:	e8 17       	cp	r30, r24
    6430:	f9 07       	cpc	r31, r25
    6432:	e1 f7       	brne	.-8      	; 0x642c <factory_mode+0x46>
	}


	while (1)
	{
		if(flag == 1)
    6434:	80 91 21 20 	lds	r24, 0x2021
    6438:	81 30       	cpi	r24, 0x01	; 1
    643a:	f1 f4       	brne	.+60     	; 0x6478 <factory_mode+0x92>
		{
			if(configuration_flag == 1)
    643c:	80 91 5b 20 	lds	r24, 0x205B
    6440:	81 30       	cpi	r24, 0x01	; 1
    6442:	29 f4       	brne	.+10     	; 0x644e <factory_mode+0x68>
				config_state = configSelect();
    6444:	0e 94 5f 28 	call	0x50be	; 0x50be <configSelect>
    6448:	80 93 22 20 	sts	0x2022, r24
    644c:	15 c0       	rjmp	.+42     	; 0x6478 <factory_mode+0x92>
			else if(reset_option_flag == 1)
    644e:	80 91 25 20 	lds	r24, 0x2025
    6452:	81 30       	cpi	r24, 0x01	; 1
    6454:	29 f4       	brne	.+10     	; 0x6460 <factory_mode+0x7a>
				reset_state = resetSelect();
    6456:	0e 94 74 29 	call	0x52e8	; 0x52e8 <resetSelect>
    645a:	80 93 b2 20 	sts	0x20B2, r24
    645e:	0c c0       	rjmp	.+24     	; 0x6478 <factory_mode+0x92>
			else if(battery_option_flag == 1)
    6460:	80 91 24 20 	lds	r24, 0x2024
    6464:	81 30       	cpi	r24, 0x01	; 1
    6466:	21 f4       	brne	.+8      	; 0x6470 <factory_mode+0x8a>
				battery_state = batterySelect();
    6468:	a1 df       	rcall	.-190    	; 0x63ac <batterySelect>
    646a:	80 93 dd 20 	sts	0x20DD, r24
    646e:	04 c0       	rjmp	.+8      	; 0x6478 <factory_mode+0x92>
			else option_select = optionSelect();
    6470:	0e 94 37 28 	call	0x506e	; 0x506e <optionSelect>
    6474:	80 93 37 20 	sts	0x2037, r24
		}
		
		switch(option_select)
    6478:	e0 91 37 20 	lds	r30, 0x2037
    647c:	8e 2f       	mov	r24, r30
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	fc 01       	movw	r30, r24
    6482:	31 97       	sbiw	r30, 0x01	; 1
    6484:	e9 30       	cpi	r30, 0x09	; 9
    6486:	f1 05       	cpc	r31, r1
    6488:	a8 f6       	brcc	.-86     	; 0x6434 <factory_mode+0x4e>
    648a:	88 27       	eor	r24, r24
    648c:	e2 58       	subi	r30, 0x82	; 130
    648e:	fe 4f       	sbci	r31, 0xFE	; 254
    6490:	8f 4f       	sbci	r24, 0xFF	; 255
    6492:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <__tablejump2__>
		{
			case config:
				pneConfiguration();
    6496:	0e 94 23 29 	call	0x5246	; 0x5246 <pneConfiguration>
			break;
    649a:	cc cf       	rjmp	.-104    	; 0x6434 <factory_mode+0x4e>
			
			case display_info:
				pneDisplayInfo();
    649c:	7f dd       	rcall	.-1282   	; 0x5f9c <pneDisplayInfo>
			break;
    649e:	ca cf       	rjmp	.-108    	; 0x6434 <factory_mode+0x4e>
			
			case reset_flag:
				resetFlag();
    64a0:	47 de       	rcall	.-882    	; 0x6130 <resetFlag>
			break;
    64a2:	c8 cf       	rjmp	.-112    	; 0x6434 <factory_mode+0x4e>
			
			case option_message:
			{
				//Welcome Message	
				send_usart_char("\r\n\r\n\r\nPNEWELS ");
    64a4:	82 e6       	ldi	r24, 0x62	; 98
    64a6:	97 e0       	ldi	r25, 0x07	; 7
    64a8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
				send_usart_char(version);
    64ac:	81 e7       	ldi	r24, 0x71	; 113
    64ae:	97 e0       	ldi	r25, 0x07	; 7
    64b0:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
				send_usart_char(" ");
    64b4:	8c ef       	ldi	r24, 0xFC	; 252
    64b6:	94 e0       	ldi	r25, 0x04	; 4
    64b8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
				send_usart_char(version_date);
    64bc:	80 e8       	ldi	r24, 0x80	; 128
    64be:	97 e0       	ldi	r25, 0x07	; 7
    64c0:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
				send_usart_char("\r\n");
    64c4:	8a e6       	ldi	r24, 0x6A	; 106
    64c6:	96 e0       	ldi	r25, 0x06	; 6
    64c8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
				send_usart_char("1. Configuration\r\n2. Display info\r\n3. Test mode\r\n4. Reset device flag\r\n");
    64cc:	85 e8       	ldi	r24, 0x85	; 133
    64ce:	97 e0       	ldi	r25, 0x07	; 7
    64d0:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
				send_usart_char("5. Dump Memory\r\n6. Dump Log Files\r\n7. Format Memory\r\n8. Battery Configuration\r\n");
    64d4:	8d ec       	ldi	r24, 0xCD	; 205
    64d6:	97 e0       	ldi	r25, 0x07	; 7
    64d8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <send_usart_char>
				option_select = idle;
    64dc:	10 92 37 20 	sts	0x2037, r1
			}
			break;
    64e0:	a9 cf       	rjmp	.-174    	; 0x6434 <factory_mode+0x4e>
			
			case test_mode:
				testMode();
    64e2:	0e 94 97 29 	call	0x532e	; 0x532e <testMode>
			break;
    64e6:	a6 cf       	rjmp	.-180    	; 0x6434 <factory_mode+0x4e>
			
			case dump_memory:
				dump_eeprom();
    64e8:	27 dd       	rcall	.-1458   	; 0x5f38 <dump_eeprom>
			break;
    64ea:	a4 cf       	rjmp	.-184    	; 0x6434 <factory_mode+0x4e>
			
			case dump_log:
				dump_log_file();
    64ec:	a5 de       	rcall	.-694    	; 0x6238 <dump_log_file>
			break;
    64ee:	a2 cf       	rjmp	.-188    	; 0x6434 <factory_mode+0x4e>

			case wipe_memory:
				erase_memory();
    64f0:	d1 de       	rcall	.-606    	; 0x6294 <erase_memory>
			break;
    64f2:	a0 cf       	rjmp	.-192    	; 0x6434 <factory_mode+0x4e>
			
			case battery_set:
				battery_config();
    64f4:	e3 de       	rcall	.-570    	; 0x62bc <battery_config>
			break;	
    64f6:	9e cf       	rjmp	.-196    	; 0x6434 <factory_mode+0x4e>

000064f8 <packet_data>:
void charge_to_rf()
{
	uint16_t address = memory_address_incr - 11;
	eeprom_to_rf(address);
	address = memory_address_incr - 22;
	eeprom_to_rf(address);
    64f8:	2f 92       	push	r2
    64fa:	3f 92       	push	r3
    64fc:	4f 92       	push	r4
    64fe:	5f 92       	push	r5
    6500:	6f 92       	push	r6
    6502:	7f 92       	push	r7
    6504:	8f 92       	push	r8
    6506:	9f 92       	push	r9
    6508:	af 92       	push	r10
    650a:	bf 92       	push	r11
    650c:	cf 92       	push	r12
    650e:	df 92       	push	r13
    6510:	ef 92       	push	r14
    6512:	ff 92       	push	r15
    6514:	0f 93       	push	r16
    6516:	1f 93       	push	r17
    6518:	cf 93       	push	r28
    651a:	df 93       	push	r29
    651c:	cd b7       	in	r28, 0x3d	; 61
    651e:	de b7       	in	r29, 0x3e	; 62
    6520:	28 97       	sbiw	r28, 0x08	; 8
    6522:	0f b6       	in	r0, 0x3f	; 63
    6524:	f8 94       	cli
    6526:	de bf       	out	0x3e, r29	; 62
    6528:	0f be       	out	0x3f, r0	; 63
    652a:	cd bf       	out	0x3d, r28	; 61
    652c:	e0 ee       	ldi	r30, 0xE0	; 224
    652e:	ff e1       	ldi	r31, 0x1F	; 31
    6530:	c7 8c       	ldd	r12, Z+31	; 0x1f
    6532:	20 e8       	ldi	r18, 0x80	; 128
    6534:	c2 9e       	mul	r12, r18
    6536:	60 01       	movw	r12, r0
    6538:	11 24       	eor	r1, r1
    653a:	d4 80       	ldd	r13, Z+4	; 0x04
    653c:	8d 2d       	mov	r24, r13
    653e:	81 70       	andi	r24, 0x01	; 1
    6540:	c8 2a       	or	r12, r24
    6542:	d3 80       	ldd	r13, Z+3	; 0x03
    6544:	d0 fa       	bst	r13, 0
    6546:	ee 24       	eor	r14, r14
    6548:	e0 f8       	bld	r14, 0
    654a:	f1 2c       	mov	r15, r1
    654c:	ee 0c       	add	r14, r14
    654e:	ff 1c       	adc	r15, r15
    6550:	ec 28       	or	r14, r12
    6552:	f7 80       	ldd	r15, Z+7	; 0x07
    6554:	0f 2d       	mov	r16, r15
    6556:	01 70       	andi	r16, 0x01	; 1
    6558:	10 e0       	ldi	r17, 0x00	; 0
    655a:	00 0f       	add	r16, r16
    655c:	11 1f       	adc	r17, r17
    655e:	00 0f       	add	r16, r16
    6560:	11 1f       	adc	r17, r17
    6562:	e0 2a       	or	r14, r16
    6564:	10 81       	ld	r17, Z
    6566:	11 70       	andi	r17, 0x01	; 1
    6568:	1f 83       	std	Y+7, r17	; 0x07
    656a:	18 86       	std	Y+8, r1	; 0x08
    656c:	0f 81       	ldd	r16, Y+7	; 0x07
    656e:	18 85       	ldd	r17, Y+8	; 0x08
    6570:	00 0f       	add	r16, r16
    6572:	11 1f       	adc	r17, r17
    6574:	00 0f       	add	r16, r16
    6576:	11 1f       	adc	r17, r17
    6578:	00 0f       	add	r16, r16
    657a:	11 1f       	adc	r17, r17
    657c:	e0 2a       	or	r14, r16
    657e:	15 81       	ldd	r17, Z+5	; 0x05
    6580:	a1 2f       	mov	r26, r17
    6582:	a1 70       	andi	r26, 0x01	; 1
    6584:	b0 e0       	ldi	r27, 0x00	; 0
    6586:	a2 95       	swap	r26
    6588:	b2 95       	swap	r27
    658a:	b0 7f       	andi	r27, 0xF0	; 240
    658c:	ba 27       	eor	r27, r26
    658e:	a0 7f       	andi	r26, 0xF0	; 240
    6590:	ba 27       	eor	r27, r26
    6592:	ea 2a       	or	r14, r26
    6594:	a0 89       	ldd	r26, Z+16	; 0x10
    6596:	6a 2f       	mov	r22, r26
    6598:	61 70       	andi	r22, 0x01	; 1
    659a:	70 e0       	ldi	r23, 0x00	; 0
    659c:	66 0f       	add	r22, r22
    659e:	77 1f       	adc	r23, r23
    65a0:	62 95       	swap	r22
    65a2:	72 95       	swap	r23
    65a4:	70 7f       	andi	r23, 0xF0	; 240
    65a6:	76 27       	eor	r23, r22
    65a8:	60 7f       	andi	r22, 0xF0	; 240
    65aa:	76 27       	eor	r23, r22
    65ac:	6e 29       	or	r22, r14
    65ae:	70 85       	ldd	r23, Z+8	; 0x08
    65b0:	47 2f       	mov	r20, r23
    65b2:	41 70       	andi	r20, 0x01	; 1
    65b4:	50 e0       	ldi	r21, 0x00	; 0
    65b6:	00 24       	eor	r0, r0
    65b8:	56 95       	lsr	r21
    65ba:	47 95       	ror	r20
    65bc:	07 94       	ror	r0
    65be:	56 95       	lsr	r21
    65c0:	47 95       	ror	r20
    65c2:	07 94       	ror	r0
    65c4:	54 2f       	mov	r21, r20
    65c6:	40 2d       	mov	r20, r0
    65c8:	46 2b       	or	r20, r22
    65ca:	40 93 d4 1f 	sts	0x1FD4, r20
    65ce:	47 a1       	ldd	r20, Z+39	; 0x27
    65d0:	90 e8       	ldi	r25, 0x80	; 128
    65d2:	49 9f       	mul	r20, r25
    65d4:	a0 01       	movw	r20, r0
    65d6:	11 24       	eor	r1, r1
    65d8:	52 89       	ldd	r21, Z+18	; 0x12
    65da:	57 70       	andi	r21, 0x07	; 7
    65dc:	45 2b       	or	r20, r21
    65de:	53 85       	ldd	r21, Z+11	; 0x0b
    65e0:	25 2f       	mov	r18, r21
    65e2:	21 70       	andi	r18, 0x01	; 1
    65e4:	30 e0       	ldi	r19, 0x00	; 0
    65e6:	22 0f       	add	r18, r18
    65e8:	33 1f       	adc	r19, r19
    65ea:	22 0f       	add	r18, r18
    65ec:	33 1f       	adc	r19, r19
    65ee:	22 0f       	add	r18, r18
    65f0:	33 1f       	adc	r19, r19
    65f2:	24 2b       	or	r18, r20
    65f4:	36 85       	ldd	r19, Z+14	; 0x0e
    65f6:	83 2f       	mov	r24, r19
    65f8:	81 70       	andi	r24, 0x01	; 1
    65fa:	90 e0       	ldi	r25, 0x00	; 0
    65fc:	82 95       	swap	r24
    65fe:	92 95       	swap	r25
    6600:	90 7f       	andi	r25, 0xF0	; 240
    6602:	98 27       	eor	r25, r24
    6604:	80 7f       	andi	r24, 0xF0	; 240
    6606:	98 27       	eor	r25, r24
    6608:	82 2b       	or	r24, r18
    660a:	95 a1       	ldd	r25, Z+37	; 0x25
    660c:	90 fb       	bst	r25, 0
    660e:	aa 24       	eor	r10, r10
    6610:	a0 f8       	bld	r10, 0
    6612:	b1 2c       	mov	r11, r1
    6614:	aa 0c       	add	r10, r10
    6616:	bb 1c       	adc	r11, r11
    6618:	aa 0c       	add	r10, r10
    661a:	bb 1c       	adc	r11, r11
    661c:	aa 0c       	add	r10, r10
    661e:	bb 1c       	adc	r11, r11
    6620:	aa 0c       	add	r10, r10
    6622:	bb 1c       	adc	r11, r11
    6624:	aa 0c       	add	r10, r10
    6626:	bb 1c       	adc	r11, r11
    6628:	a8 2a       	or	r10, r24
    662a:	86 a1       	ldd	r24, Z+38	; 0x26
    662c:	80 fb       	bst	r24, 0
    662e:	88 24       	eor	r8, r8
    6630:	80 f8       	bld	r8, 0
    6632:	91 2c       	mov	r9, r1
    6634:	00 24       	eor	r0, r0
    6636:	96 94       	lsr	r9
    6638:	87 94       	ror	r8
    663a:	07 94       	ror	r0
    663c:	96 94       	lsr	r9
    663e:	87 94       	ror	r8
    6640:	07 94       	ror	r0
    6642:	98 2c       	mov	r9, r8
    6644:	80 2c       	mov	r8, r0
    6646:	8a 28       	or	r8, r10
    6648:	80 92 d3 1f 	sts	0x1FD3, r8
    664c:	81 a1       	ldd	r24, Z+33	; 0x21
    664e:	80 fb       	bst	r24, 0
    6650:	66 24       	eor	r6, r6
    6652:	60 f8       	bld	r6, 0
    6654:	71 2c       	mov	r7, r1
    6656:	66 0c       	add	r6, r6
    6658:	77 1c       	adc	r7, r7
    665a:	82 a1       	ldd	r24, Z+34	; 0x22
    665c:	80 fb       	bst	r24, 0
    665e:	44 24       	eor	r4, r4
    6660:	40 f8       	bld	r4, 0
    6662:	51 2c       	mov	r5, r1
    6664:	44 0c       	add	r4, r4
    6666:	55 1c       	adc	r5, r5
    6668:	44 0c       	add	r4, r4
    666a:	55 1c       	adc	r5, r5
    666c:	46 28       	or	r4, r6
    666e:	80 a1       	ldd	r24, Z+32	; 0x20
    6670:	81 70       	andi	r24, 0x01	; 1
    6672:	48 2a       	or	r4, r24
    6674:	83 a1       	ldd	r24, Z+35	; 0x23
    6676:	80 fb       	bst	r24, 0
    6678:	22 24       	eor	r2, r2
    667a:	20 f8       	bld	r2, 0
    667c:	31 2c       	mov	r3, r1
    667e:	22 0c       	add	r2, r2
    6680:	33 1c       	adc	r3, r3
    6682:	22 0c       	add	r2, r2
    6684:	33 1c       	adc	r3, r3
    6686:	22 0c       	add	r2, r2
    6688:	33 1c       	adc	r3, r3
    668a:	24 28       	or	r2, r4
    668c:	84 a1       	ldd	r24, Z+36	; 0x24
    668e:	81 70       	andi	r24, 0x01	; 1
    6690:	89 83       	std	Y+1, r24	; 0x01
    6692:	1a 82       	std	Y+2, r1	; 0x02
    6694:	49 81       	ldd	r20, Y+1	; 0x01
    6696:	5a 81       	ldd	r21, Y+2	; 0x02
    6698:	42 95       	swap	r20
    669a:	52 95       	swap	r21
    669c:	50 7f       	andi	r21, 0xF0	; 240
    669e:	54 27       	eor	r21, r20
    66a0:	40 7f       	andi	r20, 0xF0	; 240
    66a2:	54 27       	eor	r21, r20
    66a4:	82 2d       	mov	r24, r2
    66a6:	84 2b       	or	r24, r20
    66a8:	91 85       	ldd	r25, Z+9	; 0x09
    66aa:	91 70       	andi	r25, 0x01	; 1
    66ac:	9b 83       	std	Y+3, r25	; 0x03
    66ae:	1c 82       	std	Y+4, r1	; 0x04
    66b0:	2b 81       	ldd	r18, Y+3	; 0x03
    66b2:	3c 81       	ldd	r19, Y+4	; 0x04
    66b4:	22 0f       	add	r18, r18
    66b6:	33 1f       	adc	r19, r19
    66b8:	22 95       	swap	r18
    66ba:	32 95       	swap	r19
    66bc:	30 7f       	andi	r19, 0xF0	; 240
    66be:	32 27       	eor	r19, r18
    66c0:	20 7f       	andi	r18, 0xF0	; 240
    66c2:	32 27       	eor	r19, r18
    66c4:	28 2b       	or	r18, r24
    66c6:	82 85       	ldd	r24, Z+10	; 0x0a
    66c8:	81 70       	andi	r24, 0x01	; 1
    66ca:	8d 83       	std	Y+5, r24	; 0x05
    66cc:	1e 82       	std	Y+6, r1	; 0x06
    66ce:	8d 81       	ldd	r24, Y+5	; 0x05
    66d0:	9e 81       	ldd	r25, Y+6	; 0x06
    66d2:	00 24       	eor	r0, r0
    66d4:	96 95       	lsr	r25
    66d6:	87 95       	ror	r24
    66d8:	07 94       	ror	r0
    66da:	96 95       	lsr	r25
    66dc:	87 95       	ror	r24
    66de:	07 94       	ror	r0
    66e0:	98 2f       	mov	r25, r24
    66e2:	80 2d       	mov	r24, r0
    66e4:	82 2b       	or	r24, r18
    66e6:	80 93 d2 1f 	sts	0x1FD2, r24
    66ea:	28 96       	adiw	r28, 0x08	; 8
    66ec:	0f b6       	in	r0, 0x3f	; 63
    66ee:	f8 94       	cli
    66f0:	de bf       	out	0x3e, r29	; 62
    66f2:	0f be       	out	0x3f, r0	; 63
    66f4:	cd bf       	out	0x3d, r28	; 61
    66f6:	df 91       	pop	r29
    66f8:	cf 91       	pop	r28
    66fa:	1f 91       	pop	r17
    66fc:	0f 91       	pop	r16
    66fe:	ff 90       	pop	r15
    6700:	ef 90       	pop	r14
    6702:	df 90       	pop	r13
    6704:	cf 90       	pop	r12
    6706:	bf 90       	pop	r11
    6708:	af 90       	pop	r10
    670a:	9f 90       	pop	r9
    670c:	8f 90       	pop	r8
    670e:	7f 90       	pop	r7
    6710:	6f 90       	pop	r6
    6712:	5f 90       	pop	r5
    6714:	4f 90       	pop	r4
    6716:	3f 90       	pop	r3
    6718:	2f 90       	pop	r2
    671a:	08 95       	ret

0000671c <reboot_to_rf>:
    671c:	ff cf       	rjmp	.-2      	; 0x671c <reboot_to_rf>

0000671e <WPS_pairing>:
    671e:	cf 93       	push	r28
    6720:	df 93       	push	r29
    6722:	ec 01       	movw	r28, r24
    6724:	68 81       	ld	r22, Y
    6726:	8d ef       	ldi	r24, 0xFD	; 253
    6728:	9f e0       	ldi	r25, 0x0F	; 15
    672a:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
    672e:	69 81       	ldd	r22, Y+1	; 0x01
    6730:	8c ef       	ldi	r24, 0xFC	; 252
    6732:	9f e0       	ldi	r25, 0x0F	; 15
    6734:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
    6738:	6a 81       	ldd	r22, Y+2	; 0x02
    673a:	8f ef       	ldi	r24, 0xFF	; 255
    673c:	9f e0       	ldi	r25, 0x0F	; 15
    673e:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
    6742:	6b 81       	ldd	r22, Y+3	; 0x03
    6744:	8e ef       	ldi	r24, 0xFE	; 254
    6746:	9f e0       	ldi	r25, 0x0F	; 15
    6748:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
    674c:	6c 81       	ldd	r22, Y+4	; 0x04
    674e:	81 e0       	ldi	r24, 0x01	; 1
    6750:	90 e1       	ldi	r25, 0x10	; 16
    6752:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
    6756:	6d 81       	ldd	r22, Y+5	; 0x05
    6758:	80 e0       	ldi	r24, 0x00	; 0
    675a:	90 e1       	ldi	r25, 0x10	; 16
    675c:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
    6760:	df 91       	pop	r29
    6762:	cf 91       	pop	r28
    6764:	08 95       	ret

00006766 <send_to_rf>:
    6766:	af 92       	push	r10
    6768:	bf 92       	push	r11
    676a:	cf 92       	push	r12
    676c:	df 92       	push	r13
    676e:	ef 92       	push	r14
    6770:	ff 92       	push	r15
    6772:	0f 93       	push	r16
    6774:	1f 93       	push	r17
    6776:	cf 93       	push	r28
    6778:	df 93       	push	r29
    677a:	6c 01       	movw	r12, r24
    677c:	f6 2e       	mov	r15, r22
    677e:	5a 01       	movw	r10, r20
    6780:	0e 94 4f 03 	call	0x69e	; 0x69e <APP_NwkGetBuffer>
    6784:	ec 01       	movw	r28, r24
    6786:	00 97       	sbiw	r24, 0x00	; 0
    6788:	09 f4       	brne	.+2      	; 0x678c <send_to_rf+0x26>
    678a:	86 c0       	rjmp	.+268    	; 0x6898 <send_to_rf+0x132>
    678c:	80 58       	subi	r24, 0x80	; 128
    678e:	9f 4f       	sbci	r25, 0xFF	; 255
    6790:	dc 01       	movw	r26, r24
    6792:	1c 92       	st	X, r1
    6794:	8e 01       	movw	r16, r28
    6796:	0d 5e       	subi	r16, 0xED	; 237
    6798:	1f 4f       	sbci	r17, 0xFF	; 255
    679a:	28 e0       	ldi	r18, 0x08	; 8
    679c:	f5 01       	movw	r30, r10
    679e:	d8 01       	movw	r26, r16
    67a0:	01 90       	ld	r0, Z+
    67a2:	0d 92       	st	X+, r0
    67a4:	2a 95       	dec	r18
    67a6:	e1 f7       	brne	.-8      	; 0x67a0 <send_to_rf+0x3a>
    67a8:	28 e0       	ldi	r18, 0x08	; 8
    67aa:	fc 01       	movw	r30, r24
    67ac:	20 83       	st	Z, r18
    67ae:	ff 20       	and	r15, r15
    67b0:	89 f1       	breq	.+98     	; 0x6814 <send_to_rf+0xae>
    67b2:	56 01       	movw	r10, r12
    67b4:	6f ef       	ldi	r22, 0xFF	; 255
    67b6:	6f 0d       	add	r22, r15
    67b8:	70 e0       	ldi	r23, 0x00	; 0
    67ba:	6f 5f       	subi	r22, 0xFF	; 255
    67bc:	7f 4f       	sbci	r23, 0xFF	; 255
    67be:	6c 0d       	add	r22, r12
    67c0:	7d 1d       	adc	r23, r13
    67c2:	fc 01       	movw	r30, r24
    67c4:	0f 2e       	mov	r0, r31
    67c6:	fb e5       	ldi	r31, 0x5B	; 91
    67c8:	df 2e       	mov	r13, r31
    67ca:	f0 2d       	mov	r31, r0
    67cc:	0f 2e       	mov	r0, r31
    67ce:	fd e5       	ldi	r31, 0x5D	; 93
    67d0:	ef 2e       	mov	r14, r31
    67d2:	f0 2d       	mov	r31, r0
    67d4:	90 81       	ld	r25, Z
    67d6:	9e 01       	movw	r18, r28
    67d8:	29 0f       	add	r18, r25
    67da:	31 1d       	adc	r19, r1
    67dc:	d9 01       	movw	r26, r18
    67de:	53 96       	adiw	r26, 0x13	; 19
    67e0:	dc 92       	st	X, r13
    67e2:	22 e0       	ldi	r18, 0x02	; 2
    67e4:	29 0f       	add	r18, r25
    67e6:	20 83       	st	Z, r18
    67e8:	d5 01       	movw	r26, r10
    67ea:	3d 91       	ld	r19, X+
    67ec:	5d 01       	movw	r10, r26
    67ee:	81 e0       	ldi	r24, 0x01	; 1
    67f0:	89 0f       	add	r24, r25
    67f2:	ae 01       	movw	r20, r28
    67f4:	48 0f       	add	r20, r24
    67f6:	51 1d       	adc	r21, r1
    67f8:	da 01       	movw	r26, r20
    67fa:	53 96       	adiw	r26, 0x13	; 19
    67fc:	3c 93       	st	X, r19
    67fe:	9d 5f       	subi	r25, 0xFD	; 253
    6800:	90 83       	st	Z, r25
    6802:	ce 01       	movw	r24, r28
    6804:	82 0f       	add	r24, r18
    6806:	91 1d       	adc	r25, r1
    6808:	dc 01       	movw	r26, r24
    680a:	53 96       	adiw	r26, 0x13	; 19
    680c:	ec 92       	st	X, r14
    680e:	a6 16       	cp	r10, r22
    6810:	b7 06       	cpc	r11, r23
    6812:	01 f7       	brne	.-64     	; 0x67d4 <send_to_rf+0x6e>
    6814:	c3 d4       	rcall	.+2438   	; 0x719c <crcInit>
    6816:	6e 01       	movw	r12, r28
    6818:	b0 e8       	ldi	r27, 0x80	; 128
    681a:	cb 0e       	add	r12, r27
    681c:	d1 1c       	adc	r13, r1
    681e:	f6 01       	movw	r30, r12
    6820:	b0 80       	ld	r11, Z
    6822:	81 e0       	ldi	r24, 0x01	; 1
    6824:	8b 0d       	add	r24, r11
    6826:	80 83       	st	Z, r24
    6828:	8f 2d       	mov	r24, r15
    682a:	90 e0       	ldi	r25, 0x00	; 0
    682c:	7c 01       	movw	r14, r24
    682e:	f8 e0       	ldi	r31, 0x08	; 8
    6830:	ef 0e       	add	r14, r31
    6832:	f1 1c       	adc	r15, r1
    6834:	88 0f       	add	r24, r24
    6836:	99 1f       	adc	r25, r25
    6838:	e8 0e       	add	r14, r24
    683a:	f9 1e       	adc	r15, r25
    683c:	b7 01       	movw	r22, r14
    683e:	c8 01       	movw	r24, r16
    6840:	ca d4       	rcall	.+2452   	; 0x71d6 <crcFast>
    6842:	fe 01       	movw	r30, r28
    6844:	eb 0d       	add	r30, r11
    6846:	f1 1d       	adc	r31, r1
    6848:	93 8b       	std	Z+19, r25	; 0x13
    684a:	d6 01       	movw	r26, r12
    684c:	bc 90       	ld	r11, X
    684e:	81 e0       	ldi	r24, 0x01	; 1
    6850:	8b 0d       	add	r24, r11
    6852:	8c 93       	st	X, r24
    6854:	b7 01       	movw	r22, r14
    6856:	c8 01       	movw	r24, r16
    6858:	be d4       	rcall	.+2428   	; 0x71d6 <crcFast>
    685a:	fe 01       	movw	r30, r28
    685c:	eb 0d       	add	r30, r11
    685e:	f1 1d       	adc	r31, r1
    6860:	83 8b       	std	Z+19, r24	; 0x13
    6862:	f6 01       	movw	r30, r12
    6864:	60 81       	ld	r22, Z
    6866:	70 e0       	ldi	r23, 0x00	; 0
    6868:	26 e0       	ldi	r18, 0x06	; 6
    686a:	30 e0       	ldi	r19, 0x00	; 0
    686c:	49 e3       	ldi	r20, 0x39	; 57
    686e:	52 e0       	ldi	r21, 0x02	; 2
    6870:	c8 01       	movw	r24, r16
    6872:	0e 94 68 4d 	call	0x9ad0	; 0x9ad0 <pnesign>
    6876:	d6 01       	movw	r26, r12
    6878:	2c 91       	ld	r18, X
    687a:	fe 01       	movw	r30, r28
    687c:	e2 0f       	add	r30, r18
    687e:	f1 1d       	adc	r31, r1
    6880:	93 8b       	std	Z+19, r25	; 0x13
    6882:	92 e0       	ldi	r25, 0x02	; 2
    6884:	92 0f       	add	r25, r18
    6886:	9c 93       	st	X, r25
    6888:	2f 5f       	subi	r18, 0xFF	; 255
    688a:	fe 01       	movw	r30, r28
    688c:	e2 0f       	add	r30, r18
    688e:	f1 1d       	adc	r31, r1
    6890:	83 8b       	std	Z+19, r24	; 0x13
    6892:	ce 01       	movw	r24, r28
    6894:	0e 94 7e 03 	call	0x6fc	; 0x6fc <APP_NwkSendBuffer>
    6898:	df 91       	pop	r29
    689a:	cf 91       	pop	r28
    689c:	1f 91       	pop	r17
    689e:	0f 91       	pop	r16
    68a0:	ff 90       	pop	r15
    68a2:	ef 90       	pop	r14
    68a4:	df 90       	pop	r13
    68a6:	cf 90       	pop	r12
    68a8:	bf 90       	pop	r11
    68aa:	af 90       	pop	r10
    68ac:	08 95       	ret

000068ae <status_send_to_rf>:
    68ae:	cf 93       	push	r28
    68b0:	df 93       	push	r29
    68b2:	22 de       	rcall	.-956    	; 0x64f8 <packet_data>
    68b4:	ce e6       	ldi	r28, 0x6E	; 110
    68b6:	df e1       	ldi	r29, 0x1F	; 31
    68b8:	80 91 d4 1f 	lds	r24, 0x1FD4
    68bc:	88 83       	st	Y, r24
    68be:	80 91 d3 1f 	lds	r24, 0x1FD3
    68c2:	89 83       	std	Y+1, r24	; 0x01
    68c4:	80 91 d2 1f 	lds	r24, 0x1FD2
    68c8:	8a 83       	std	Y+2, r24	; 0x02
    68ca:	e0 ee       	ldi	r30, 0xE0	; 224
    68cc:	ff e1       	ldi	r31, 0x1F	; 31
    68ce:	86 81       	ldd	r24, Z+6	; 0x06
    68d0:	8b 83       	std	Y+3, r24	; 0x03
    68d2:	81 81       	ldd	r24, Z+1	; 0x01
    68d4:	8c 83       	std	Y+4, r24	; 0x04
    68d6:	82 81       	ldd	r24, Z+2	; 0x02
    68d8:	8d 83       	std	Y+5, r24	; 0x05
    68da:	b5 d3       	rcall	.+1898   	; 0x7046 <get_timestamp>
    68dc:	9e 83       	std	Y+6, r25	; 0x06
    68de:	b3 d3       	rcall	.+1894   	; 0x7046 <get_timestamp>
    68e0:	8f 83       	std	Y+7, r24	; 0x07
    68e2:	b1 d3       	rcall	.+1890   	; 0x7046 <get_timestamp>
    68e4:	78 87       	std	Y+8, r23	; 0x08
    68e6:	af d3       	rcall	.+1886   	; 0x7046 <get_timestamp>
    68e8:	69 87       	std	Y+9, r22	; 0x09
    68ea:	45 e7       	ldi	r20, 0x75	; 117
    68ec:	58 e0       	ldi	r21, 0x08	; 8
    68ee:	6a e0       	ldi	r22, 0x0A	; 10
    68f0:	ce 01       	movw	r24, r28
    68f2:	39 df       	rcall	.-398    	; 0x6766 <send_to_rf>
    68f4:	df 91       	pop	r29
    68f6:	cf 91       	pop	r28
    68f8:	08 95       	ret

000068fa <emergency_on_to_rf>:
    68fa:	81 e0       	ldi	r24, 0x01	; 1
    68fc:	80 93 e8 1f 	sts	0x1FE8, r24
    6900:	4e e7       	ldi	r20, 0x7E	; 126
    6902:	58 e0       	ldi	r21, 0x08	; 8
    6904:	60 e0       	ldi	r22, 0x00	; 0
    6906:	8e e6       	ldi	r24, 0x6E	; 110
    6908:	9f e1       	ldi	r25, 0x1F	; 31
    690a:	2d cf       	rjmp	.-422    	; 0x6766 <send_to_rf>
    690c:	08 95       	ret

0000690e <emergency_off_to_rf>:
    690e:	10 92 e8 1f 	sts	0x1FE8, r1
    6912:	4e e7       	ldi	r20, 0x7E	; 126
    6914:	58 e0       	ldi	r21, 0x08	; 8
    6916:	60 e0       	ldi	r22, 0x00	; 0
    6918:	8e e6       	ldi	r24, 0x6E	; 110
    691a:	9f e1       	ldi	r25, 0x1F	; 31
    691c:	24 cf       	rjmp	.-440    	; 0x6766 <send_to_rf>
    691e:	08 95       	ret

00006920 <eeprom_to_rf>:
    6920:	ef 92       	push	r14
    6922:	ff 92       	push	r15
    6924:	0f 93       	push	r16
    6926:	1f 93       	push	r17
    6928:	cf 93       	push	r28
    692a:	df 93       	push	r29
    692c:	ec 01       	movw	r28, r24
    692e:	0e e6       	ldi	r16, 0x6E	; 110
    6930:	1f e1       	ldi	r17, 0x1F	; 31
    6932:	7c 01       	movw	r14, r24
    6934:	8b e0       	ldi	r24, 0x0B	; 11
    6936:	e8 0e       	add	r14, r24
    6938:	f1 1c       	adc	r15, r1
    693a:	2d 2f       	mov	r18, r29
    693c:	4c 2f       	mov	r20, r28
    693e:	65 e4       	ldi	r22, 0x45	; 69
    6940:	8f ea       	ldi	r24, 0xAF	; 175
    6942:	0e 94 7d 22 	call	0x44fa	; 0x44fa <PNEWELSE2promRead>
    6946:	f8 01       	movw	r30, r16
    6948:	81 93       	st	Z+, r24
    694a:	8f 01       	movw	r16, r30
    694c:	21 96       	adiw	r28, 0x01	; 1
    694e:	8a e0       	ldi	r24, 0x0A	; 10
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	0e 94 65 21 	call	0x42ca	; 0x42ca <pne_delayms>
    6956:	ce 15       	cp	r28, r14
    6958:	df 05       	cpc	r29, r15
    695a:	79 f7       	brne	.-34     	; 0x693a <eeprom_to_rf+0x1a>
    695c:	44 e6       	ldi	r20, 0x64	; 100
    695e:	52 e0       	ldi	r21, 0x02	; 2
    6960:	6b e0       	ldi	r22, 0x0B	; 11
    6962:	8e e6       	ldi	r24, 0x6E	; 110
    6964:	9f e1       	ldi	r25, 0x1F	; 31
    6966:	ff de       	rcall	.-514    	; 0x6766 <send_to_rf>
    6968:	df 91       	pop	r29
    696a:	cf 91       	pop	r28
    696c:	1f 91       	pop	r17
    696e:	0f 91       	pop	r16
    6970:	ff 90       	pop	r15
    6972:	ef 90       	pop	r14
    6974:	08 95       	ret

00006976 <error_to_rf>:
	send_to_rf(data_to_rf, 11, "[rd rom]");
}

void error_to_rf(uint8_t alert_type)
{
	switch(alert_type)
    6976:	90 e0       	ldi	r25, 0x00	; 0
    6978:	8c 30       	cpi	r24, 0x0C	; 12
    697a:	91 05       	cpc	r25, r1
    697c:	08 f0       	brcs	.+2      	; 0x6980 <error_to_rf+0xa>
    697e:	7d c0       	rjmp	.+250    	; 0x6a7a <error_to_rf+0x104>
    6980:	fc 01       	movw	r30, r24
    6982:	88 27       	eor	r24, r24
    6984:	e9 57       	subi	r30, 0x79	; 121
    6986:	fe 4f       	sbci	r31, 0xFE	; 254
    6988:	8f 4f       	sbci	r24, 0xFF	; 255
    698a:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <__tablejump2__>
	{
		case temperature_alert:
			data_to_rf[0] = temperature_alert;
    698e:	10 92 6e 1f 	sts	0x1F6E, r1
			send_to_rf(data_to_rf,1,"[error!]");
    6992:	47 e8       	ldi	r20, 0x87	; 135
    6994:	58 e0       	ldi	r21, 0x08	; 8
    6996:	61 e0       	ldi	r22, 0x01	; 1
    6998:	8e e6       	ldi	r24, 0x6E	; 110
    699a:	9f e1       	ldi	r25, 0x1F	; 31
    699c:	e4 ce       	rjmp	.-568    	; 0x6766 <send_to_rf>
			break;
    699e:	08 95       	ret
			
		case battery_dead_alert:
			data_to_rf[0] = battery_dead_alert;
    69a0:	81 e0       	ldi	r24, 0x01	; 1
    69a2:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69a6:	47 e8       	ldi	r20, 0x87	; 135
    69a8:	58 e0       	ldi	r21, 0x08	; 8
    69aa:	61 e0       	ldi	r22, 0x01	; 1
    69ac:	8e e6       	ldi	r24, 0x6E	; 110
    69ae:	9f e1       	ldi	r25, 0x1F	; 31
    69b0:	da ce       	rjmp	.-588    	; 0x6766 <send_to_rf>
			break;
    69b2:	08 95       	ret
			
		case conflicted_command:
			data_to_rf[0] = conflicted_command;
    69b4:	83 e0       	ldi	r24, 0x03	; 3
    69b6:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69ba:	47 e8       	ldi	r20, 0x87	; 135
    69bc:	58 e0       	ldi	r21, 0x08	; 8
    69be:	61 e0       	ldi	r22, 0x01	; 1
    69c0:	8e e6       	ldi	r24, 0x6E	; 110
    69c2:	9f e1       	ldi	r25, 0x1F	; 31
    69c4:	d0 ce       	rjmp	.-608    	; 0x6766 <send_to_rf>
			break;
    69c6:	08 95       	ret
		
		case battery_wrong_alert:
			data_to_rf[0] = battery_wrong_alert;
    69c8:	82 e0       	ldi	r24, 0x02	; 2
    69ca:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69ce:	47 e8       	ldi	r20, 0x87	; 135
    69d0:	58 e0       	ldi	r21, 0x08	; 8
    69d2:	61 e0       	ldi	r22, 0x01	; 1
    69d4:	8e e6       	ldi	r24, 0x6E	; 110
    69d6:	9f e1       	ldi	r25, 0x1F	; 31
    69d8:	c6 ce       	rjmp	.-628    	; 0x6766 <send_to_rf>
			break;
    69da:	08 95       	ret
			
		case read_eeprom_error:
			data_to_rf[0] = read_eeprom_error;
    69dc:	84 e0       	ldi	r24, 0x04	; 4
    69de:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69e2:	47 e8       	ldi	r20, 0x87	; 135
    69e4:	58 e0       	ldi	r21, 0x08	; 8
    69e6:	61 e0       	ldi	r22, 0x01	; 1
    69e8:	8e e6       	ldi	r24, 0x6E	; 110
    69ea:	9f e1       	ldi	r25, 0x1F	; 31
    69ec:	bc ce       	rjmp	.-648    	; 0x6766 <send_to_rf>
			break;
    69ee:	08 95       	ret
			
		case hardware_error:
			data_to_rf[0] = hardware_error;
    69f0:	85 e0       	ldi	r24, 0x05	; 5
    69f2:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    69f6:	47 e8       	ldi	r20, 0x87	; 135
    69f8:	58 e0       	ldi	r21, 0x08	; 8
    69fa:	61 e0       	ldi	r22, 0x01	; 1
    69fc:	8e e6       	ldi	r24, 0x6E	; 110
    69fe:	9f e1       	ldi	r25, 0x1F	; 31
    6a00:	b2 ce       	rjmp	.-668    	; 0x6766 <send_to_rf>
			break;
    6a02:	08 95       	ret
			
		case time_invalid_data_size:
			data_to_rf[0] = time_invalid_data_size;
    6a04:	86 e0       	ldi	r24, 0x06	; 6
    6a06:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6a0a:	47 e8       	ldi	r20, 0x87	; 135
    6a0c:	58 e0       	ldi	r21, 0x08	; 8
    6a0e:	61 e0       	ldi	r22, 0x01	; 1
    6a10:	8e e6       	ldi	r24, 0x6E	; 110
    6a12:	9f e1       	ldi	r25, 0x1F	; 31
    6a14:	a8 ce       	rjmp	.-688    	; 0x6766 <send_to_rf>
			break;
    6a16:	08 95       	ret
		
		case time_crc_error:
			data_to_rf[0] = time_crc_error;
    6a18:	87 e0       	ldi	r24, 0x07	; 7
    6a1a:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6a1e:	47 e8       	ldi	r20, 0x87	; 135
    6a20:	58 e0       	ldi	r21, 0x08	; 8
    6a22:	61 e0       	ldi	r22, 0x01	; 1
    6a24:	8e e6       	ldi	r24, 0x6E	; 110
    6a26:	9f e1       	ldi	r25, 0x1F	; 31
    6a28:	9e ce       	rjmp	.-708    	; 0x6766 <send_to_rf>
			break;
    6a2a:	08 95       	ret
		
		case wps_invalid_data_size:
			data_to_rf[0] = wps_invalid_data_size;
    6a2c:	88 e0       	ldi	r24, 0x08	; 8
    6a2e:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6a32:	47 e8       	ldi	r20, 0x87	; 135
    6a34:	58 e0       	ldi	r21, 0x08	; 8
    6a36:	61 e0       	ldi	r22, 0x01	; 1
    6a38:	8e e6       	ldi	r24, 0x6E	; 110
    6a3a:	9f e1       	ldi	r25, 0x1F	; 31
    6a3c:	94 ce       	rjmp	.-728    	; 0x6766 <send_to_rf>
			break;
    6a3e:	08 95       	ret
			
		case invalid_command_error:
			data_to_rf[0] = invalid_command_error;
    6a40:	8b e0       	ldi	r24, 0x0B	; 11
    6a42:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6a46:	47 e8       	ldi	r20, 0x87	; 135
    6a48:	58 e0       	ldi	r21, 0x08	; 8
    6a4a:	61 e0       	ldi	r22, 0x01	; 1
    6a4c:	8e e6       	ldi	r24, 0x6E	; 110
    6a4e:	9f e1       	ldi	r25, 0x1F	; 31
    6a50:	8a ce       	rjmp	.-748    	; 0x6766 <send_to_rf>
			break;
    6a52:	08 95       	ret
			
		case wps_invalid_UID:
			data_to_rf[0] = wps_invalid_UID;
    6a54:	89 e0       	ldi	r24, 0x09	; 9
    6a56:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6a5a:	47 e8       	ldi	r20, 0x87	; 135
    6a5c:	58 e0       	ldi	r21, 0x08	; 8
    6a5e:	61 e0       	ldi	r22, 0x01	; 1
    6a60:	8e e6       	ldi	r24, 0x6E	; 110
    6a62:	9f e1       	ldi	r25, 0x1F	; 31
    6a64:	80 ce       	rjmp	.-768    	; 0x6766 <send_to_rf>
			break;
    6a66:	08 95       	ret
			
		case wps_crc_error:
			data_to_rf[0] = wps_crc_error;
    6a68:	8a e0       	ldi	r24, 0x0A	; 10
    6a6a:	80 93 6e 1f 	sts	0x1F6E, r24
			send_to_rf(data_to_rf,1,"[error!]");
    6a6e:	47 e8       	ldi	r20, 0x87	; 135
    6a70:	58 e0       	ldi	r21, 0x08	; 8
    6a72:	61 e0       	ldi	r22, 0x01	; 1
    6a74:	8e e6       	ldi	r24, 0x6E	; 110
    6a76:	9f e1       	ldi	r25, 0x1F	; 31
    6a78:	76 ce       	rjmp	.-788    	; 0x6766 <send_to_rf>
    6a7a:	08 95       	ret

00006a7c <pend_to_rf>:
	}
}

void pend_to_rf(char pend_type)
{
	switch(pend_type)
    6a7c:	83 36       	cpi	r24, 0x63	; 99
    6a7e:	19 f0       	breq	.+6      	; 0x6a86 <pend_to_rf+0xa>
    6a80:	84 36       	cpi	r24, 0x64	; 100
    6a82:	41 f0       	breq	.+16     	; 0x6a94 <pend_to_rf+0x18>
    6a84:	08 95       	ret
	{
		case 'c':
			send_to_rf(data_to_rf, 0, "[chrgng]");
    6a86:	40 e9       	ldi	r20, 0x90	; 144
    6a88:	58 e0       	ldi	r21, 0x08	; 8
    6a8a:	60 e0       	ldi	r22, 0x00	; 0
    6a8c:	8e e6       	ldi	r24, 0x6E	; 110
    6a8e:	9f e1       	ldi	r25, 0x1F	; 31
    6a90:	6a ce       	rjmp	.-812    	; 0x6766 <send_to_rf>
		break;
    6a92:	08 95       	ret
		case 'd':
			send_to_rf(data_to_rf, 0, "[dschrg]");
    6a94:	49 e9       	ldi	r20, 0x99	; 153
    6a96:	58 e0       	ldi	r21, 0x08	; 8
    6a98:	60 e0       	ldi	r22, 0x00	; 0
    6a9a:	8e e6       	ldi	r24, 0x6E	; 110
    6a9c:	9f e1       	ldi	r25, 0x1F	; 31
    6a9e:	63 ce       	rjmp	.-826    	; 0x6766 <send_to_rf>
    6aa0:	08 95       	ret

00006aa2 <time_to_rf>:
	eeprom_to_rf(address);
}

void time_to_rf(uint32_t time)
{
	set_timestamp(time);
    6aa2:	c8 d2       	rcall	.+1424   	; 0x7034 <set_timestamp>
	send_to_rf(data_to_rf, 0, "[timech]");
    6aa4:	41 e9       	ldi	r20, 0x91	; 145
    6aa6:	52 e0       	ldi	r21, 0x02	; 2
    6aa8:	60 e0       	ldi	r22, 0x00	; 0
    6aaa:	8e e6       	ldi	r24, 0x6E	; 110
    6aac:	9f e1       	ldi	r25, 0x1F	; 31
    6aae:	5b ce       	rjmp	.-842    	; 0x6766 <send_to_rf>
    6ab0:	08 95       	ret

00006ab2 <clr_rom_to_rf>:
}

void clr_rom_to_rf()
{
	clre2prom();
    6ab2:	0e 94 d7 22 	call	0x45ae	; 0x45ae <clre2prom>
	send_to_rf(data_to_rf, 0, "[clrrom]");
    6ab6:	43 ea       	ldi	r20, 0xA3	; 163
    6ab8:	52 e0       	ldi	r21, 0x02	; 2
    6aba:	60 e0       	ldi	r22, 0x00	; 0
    6abc:	8e e6       	ldi	r24, 0x6E	; 110
    6abe:	9f e1       	ldi	r25, 0x1F	; 31
    6ac0:	52 ce       	rjmp	.-860    	; 0x6766 <send_to_rf>
    6ac2:	08 95       	ret

00006ac4 <info_to_rf>:
		//after a while this will reset the system when watchdog enabled
	}
}

void info_to_rf()
{
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
/*	data_to_rf[0] = readE2prom(GROUP_ID); //group*/
// 	data_to_rf[1] = readE2prom(ZONE_ID); //zone
// 	data_to_rf[2] = readE2prom(NODE_ID); //node
	data_to_rf[0] = readE2prom(DEVICE_ADDRESS_H); //address MSB
    6ac8:	8d ef       	ldi	r24, 0xFD	; 253
    6aca:	9f e0       	ldi	r25, 0x0F	; 15
    6acc:	60 da       	rcall	.-2880   	; 0x5f8e <readE2prom>
    6ace:	ce e6       	ldi	r28, 0x6E	; 110
    6ad0:	df e1       	ldi	r29, 0x1F	; 31
    6ad2:	88 83       	st	Y, r24
	data_to_rf[1] = readE2prom(DEVICE_ADDRESS_L); //address LSB
    6ad4:	8c ef       	ldi	r24, 0xFC	; 252
    6ad6:	9f e0       	ldi	r25, 0x0F	; 15
    6ad8:	5a da       	rcall	.-2892   	; 0x5f8e <readE2prom>
    6ada:	89 83       	std	Y+1, r24	; 0x01
	data_to_rf[2] = readE2prom(DEVICE_CHANNEL_H); //channel MSB
    6adc:	8f ef       	ldi	r24, 0xFF	; 255
    6ade:	9f e0       	ldi	r25, 0x0F	; 15
    6ae0:	56 da       	rcall	.-2900   	; 0x5f8e <readE2prom>
    6ae2:	8a 83       	std	Y+2, r24	; 0x02
	data_to_rf[3] = readE2prom(DEVICE_CHANNEL_L); //channel LSB
    6ae4:	8e ef       	ldi	r24, 0xFE	; 254
    6ae6:	9f e0       	ldi	r25, 0x0F	; 15
    6ae8:	52 da       	rcall	.-2908   	; 0x5f8e <readE2prom>
    6aea:	8b 83       	std	Y+3, r24	; 0x03
	data_to_rf[4] = readE2prom(DEVICE_PAN_H); //pan id MSB
    6aec:	81 e0       	ldi	r24, 0x01	; 1
    6aee:	90 e1       	ldi	r25, 0x10	; 16
    6af0:	4e da       	rcall	.-2916   	; 0x5f8e <readE2prom>
    6af2:	8c 83       	std	Y+4, r24	; 0x04
	data_to_rf[5] = readE2prom(DEVICE_PAN_L); //pan id LSB
    6af4:	80 e0       	ldi	r24, 0x00	; 0
    6af6:	90 e1       	ldi	r25, 0x10	; 16
    6af8:	4a da       	rcall	.-2924   	; 0x5f8e <readE2prom>
    6afa:	8d 83       	std	Y+5, r24	; 0x05
	send_to_rf(data_to_rf, 6, "[infoid]");
    6afc:	45 eb       	ldi	r20, 0xB5	; 181
    6afe:	52 e0       	ldi	r21, 0x02	; 2
    6b00:	66 e0       	ldi	r22, 0x06	; 6
    6b02:	ce 01       	movw	r24, r28
    6b04:	30 de       	rcall	.-928    	; 0x6766 <send_to_rf>
}
    6b06:	df 91       	pop	r29
    6b08:	cf 91       	pop	r28
    6b0a:	08 95       	ret

00006b0c <change_id_to_rf>:

void change_id_to_rf(uint8_t *data)
{
    6b0c:	cf 93       	push	r28
    6b0e:	df 93       	push	r29
    6b10:	ec 01       	movw	r28, r24
/*	write_factory_default(GROUP_ID,data[0]);*/
// 	write_factory_default(ZONE_ID,data[1]);
// 	write_factory_default(NODE_ID,data[2]);
	write_factory_default(DEVICE_ADDRESS_H,data[0]);
    6b12:	68 81       	ld	r22, Y
    6b14:	8d ef       	ldi	r24, 0xFD	; 253
    6b16:	9f e0       	ldi	r25, 0x0F	; 15
    6b18:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
	write_factory_default(DEVICE_ADDRESS_L,data[1]);
    6b1c:	69 81       	ldd	r22, Y+1	; 0x01
    6b1e:	8c ef       	ldi	r24, 0xFC	; 252
    6b20:	9f e0       	ldi	r25, 0x0F	; 15
    6b22:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
	write_factory_default(DEVICE_CHANNEL_H,data[2]);
    6b26:	6a 81       	ldd	r22, Y+2	; 0x02
    6b28:	8f ef       	ldi	r24, 0xFF	; 255
    6b2a:	9f e0       	ldi	r25, 0x0F	; 15
    6b2c:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
	write_factory_default(DEVICE_CHANNEL_L,data[3]);
    6b30:	6b 81       	ldd	r22, Y+3	; 0x03
    6b32:	8e ef       	ldi	r24, 0xFE	; 254
    6b34:	9f e0       	ldi	r25, 0x0F	; 15
    6b36:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
	write_factory_default(DEVICE_PAN_H,data[4]);
    6b3a:	6c 81       	ldd	r22, Y+4	; 0x04
    6b3c:	81 e0       	ldi	r24, 0x01	; 1
    6b3e:	90 e1       	ldi	r25, 0x10	; 16
    6b40:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
	write_factory_default(DEVICE_PAN_L,data[5]);
    6b44:	6d 81       	ldd	r22, Y+5	; 0x05
    6b46:	80 e0       	ldi	r24, 0x00	; 0
    6b48:	90 e1       	ldi	r25, 0x10	; 16
    6b4a:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
	send_to_rf(data_to_rf, 0, "[chngid]");
    6b4e:	4e eb       	ldi	r20, 0xBE	; 190
    6b50:	52 e0       	ldi	r21, 0x02	; 2
    6b52:	60 e0       	ldi	r22, 0x00	; 0
    6b54:	8e e6       	ldi	r24, 0x6E	; 110
    6b56:	9f e1       	ldi	r25, 0x1F	; 31
    6b58:	06 de       	rcall	.-1012   	; 0x6766 <send_to_rf>
}
    6b5a:	df 91       	pop	r29
    6b5c:	cf 91       	pop	r28
    6b5e:	08 95       	ret

00006b60 <battery_threshold_to_rf>:

void battery_threshold_to_rf(uint8_t *data)
{
    6b60:	cf 93       	push	r28
    6b62:	df 93       	push	r29
    6b64:	ec 01       	movw	r28, r24
	write_factory_default(BATTERY_LOW,data[0]);
    6b66:	68 81       	ld	r22, Y
    6b68:	84 e0       	ldi	r24, 0x04	; 4
    6b6a:	90 e1       	ldi	r25, 0x10	; 16
    6b6c:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
	write_factory_default(BATTERY_MAX,data[1]);
    6b70:	69 81       	ldd	r22, Y+1	; 0x01
    6b72:	83 e0       	ldi	r24, 0x03	; 3
    6b74:	90 e1       	ldi	r25, 0x10	; 16
    6b76:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <write_factory_default>
	send_to_rf(data_to_rf, 0, "[batlvl]");
    6b7a:	47 ec       	ldi	r20, 0xC7	; 199
    6b7c:	52 e0       	ldi	r21, 0x02	; 2
    6b7e:	60 e0       	ldi	r22, 0x00	; 0
    6b80:	8e e6       	ldi	r24, 0x6E	; 110
    6b82:	9f e1       	ldi	r25, 0x1F	; 31
    6b84:	f0 dd       	rcall	.-1056   	; 0x6766 <send_to_rf>
}
    6b86:	df 91       	pop	r29
    6b88:	cf 91       	pop	r28
    6b8a:	08 95       	ret

00006b8c <last_1_log>:

void last_1_log(char type)
{
    6b8c:	ff 92       	push	r15
    6b8e:	0f 93       	push	r16
    6b90:	1f 93       	push	r17
    6b92:	cf 93       	push	r28
    6b94:	df 93       	push	r29
    6b96:	f8 2e       	mov	r15, r24
    6b98:	0e e6       	ldi	r16, 0x6E	; 110
    6b9a:	1f e1       	ldi	r17, 0x1F	; 31
    6b9c:	c0 e0       	ldi	r28, 0x00	; 0
    6b9e:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t memory_address_low = 0;
  uint8_t memory_address_high = 0;
  for (uint8_t i=0; i<11; i++)
  {
    memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    6ba0:	40 91 e8 20 	lds	r20, 0x20E8
    6ba4:	50 91 e9 20 	lds	r21, 0x20E9
    6ba8:	9a 01       	movw	r18, r20
    6baa:	26 51       	subi	r18, 0x16	; 22
    6bac:	31 09       	sbc	r19, r1
    6bae:	2c 0f       	add	r18, r28
    6bb0:	3d 1f       	adc	r19, r29
    6bb2:	46 51       	subi	r20, 0x16	; 22
    memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    6bb4:	4c 0f       	add	r20, r28
    data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6bb6:	23 2f       	mov	r18, r19
    6bb8:	65 e4       	ldi	r22, 0x45	; 69
    6bba:	8f ea       	ldi	r24, 0xAF	; 175
    6bbc:	0e 94 7d 22 	call	0x44fa	; 0x44fa <PNEWELSE2promRead>
    6bc0:	f8 01       	movw	r30, r16
    6bc2:	81 93       	st	Z+, r24
    6bc4:	8f 01       	movw	r16, r30
    6bc6:	21 96       	adiw	r28, 0x01	; 1

void last_1_log(char type)
{
  uint8_t memory_address_low = 0;
  uint8_t memory_address_high = 0;
  for (uint8_t i=0; i<11; i++)
    6bc8:	cb 30       	cpi	r28, 0x0B	; 11
    6bca:	d1 05       	cpc	r29, r1
    6bcc:	49 f7       	brne	.-46     	; 0x6ba0 <last_1_log+0x14>
    memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    /*pne_delayms(10);*/
  }
  switch(type)
    6bce:	fe e6       	ldi	r31, 0x6E	; 110
    6bd0:	ff 16       	cp	r15, r31
    6bd2:	39 f0       	breq	.+14     	; 0x6be2 <last_1_log+0x56>
    6bd4:	83 e7       	ldi	r24, 0x73	; 115
    6bd6:	f8 16       	cp	r15, r24
    6bd8:	91 f0       	breq	.+36     	; 0x6bfe <last_1_log+0x72>
    6bda:	e1 e6       	ldi	r30, 0x61	; 97
    6bdc:	fe 12       	cpse	r15, r30
    6bde:	16 c0       	rjmp	.+44     	; 0x6c0c <last_1_log+0x80>
    6be0:	07 c0       	rjmp	.+14     	; 0x6bf0 <last_1_log+0x64>
  {
	  case 'n':
		send_to_rf(data_to_rf, 6, "[1stnml]"); //temporary reduce the sent data to 6 only in order to reduce bandwidth usage. Default value is 11
    6be2:	42 ea       	ldi	r20, 0xA2	; 162
    6be4:	58 e0       	ldi	r21, 0x08	; 8
    6be6:	66 e0       	ldi	r22, 0x06	; 6
    6be8:	8e e6       	ldi	r24, 0x6E	; 110
    6bea:	9f e1       	ldi	r25, 0x1F	; 31
    6bec:	bc dd       	rcall	.-1160   	; 0x6766 <send_to_rf>
		break;
    6bee:	14 c0       	rjmp	.+40     	; 0x6c18 <last_1_log+0x8c>
	  case 'a':
		send_to_rf(data_to_rf, 6, "[1staci]");
    6bf0:	4b ea       	ldi	r20, 0xAB	; 171
    6bf2:	58 e0       	ldi	r21, 0x08	; 8
    6bf4:	66 e0       	ldi	r22, 0x06	; 6
    6bf6:	8e e6       	ldi	r24, 0x6E	; 110
    6bf8:	9f e1       	ldi	r25, 0x1F	; 31
    6bfa:	b5 dd       	rcall	.-1174   	; 0x6766 <send_to_rf>
		break;
    6bfc:	0d c0       	rjmp	.+26     	; 0x6c18 <last_1_log+0x8c>
	  case 's':
		send_to_rf(data_to_rf, 6, "[1stsft]");
    6bfe:	44 eb       	ldi	r20, 0xB4	; 180
    6c00:	58 e0       	ldi	r21, 0x08	; 8
    6c02:	66 e0       	ldi	r22, 0x06	; 6
    6c04:	8e e6       	ldi	r24, 0x6E	; 110
    6c06:	9f e1       	ldi	r25, 0x1F	; 31
    6c08:	ae dd       	rcall	.-1188   	; 0x6766 <send_to_rf>
		break;
    6c0a:	06 c0       	rjmp	.+12     	; 0x6c18 <last_1_log+0x8c>
	  default:
		send_to_rf(data_to_rf, 11, "[1stlog]");
    6c0c:	4d eb       	ldi	r20, 0xBD	; 189
    6c0e:	58 e0       	ldi	r21, 0x08	; 8
    6c10:	6b e0       	ldi	r22, 0x0B	; 11
    6c12:	8e e6       	ldi	r24, 0x6E	; 110
    6c14:	9f e1       	ldi	r25, 0x1F	; 31
    6c16:	a7 dd       	rcall	.-1202   	; 0x6766 <send_to_rf>
		break;
  }
}
    6c18:	df 91       	pop	r29
    6c1a:	cf 91       	pop	r28
    6c1c:	1f 91       	pop	r17
    6c1e:	0f 91       	pop	r16
    6c20:	ff 90       	pop	r15
    6c22:	08 95       	ret

00006c24 <last_2_log>:


void last_2_log(char type)
{
    6c24:	ff 92       	push	r15
    6c26:	0f 93       	push	r16
    6c28:	1f 93       	push	r17
    6c2a:	cf 93       	push	r28
    6c2c:	df 93       	push	r29
    6c2e:	f8 2e       	mov	r15, r24
    6c30:	0e e6       	ldi	r16, 0x6E	; 110
    6c32:	1f e1       	ldi	r17, 0x1F	; 31
    6c34:	c0 e0       	ldi	r28, 0x00	; 0
    6c36:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	for (uint8_t i=0; i<11; i++)
	{
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
    6c38:	40 91 e8 20 	lds	r20, 0x20E8
    6c3c:	50 91 e9 20 	lds	r21, 0x20E9
    6c40:	9a 01       	movw	r18, r20
    6c42:	2b 50       	subi	r18, 0x0B	; 11
    6c44:	31 09       	sbc	r19, r1
    6c46:	2c 0f       	add	r18, r28
    6c48:	3d 1f       	adc	r19, r29
    6c4a:	4b 50       	subi	r20, 0x0B	; 11
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
    6c4c:	4c 0f       	add	r20, r28
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6c4e:	23 2f       	mov	r18, r19
    6c50:	65 e4       	ldi	r22, 0x45	; 69
    6c52:	8f ea       	ldi	r24, 0xAF	; 175
    6c54:	0e 94 7d 22 	call	0x44fa	; 0x44fa <PNEWELSE2promRead>
    6c58:	f8 01       	movw	r30, r16
    6c5a:	81 93       	st	Z+, r24
    6c5c:	8f 01       	movw	r16, r30
    6c5e:	21 96       	adiw	r28, 0x01	; 1

void last_2_log(char type)
{
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	for (uint8_t i=0; i<11; i++)
    6c60:	cb 30       	cpi	r28, 0x0B	; 11
    6c62:	d1 05       	cpc	r29, r1
    6c64:	49 f7       	brne	.-46     	; 0x6c38 <last_2_log+0x14>
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		/*pne_delayms(10);*/
	}
	switch(type)
    6c66:	fe e6       	ldi	r31, 0x6E	; 110
    6c68:	ff 16       	cp	r15, r31
    6c6a:	39 f0       	breq	.+14     	; 0x6c7a <last_2_log+0x56>
    6c6c:	83 e7       	ldi	r24, 0x73	; 115
    6c6e:	f8 16       	cp	r15, r24
    6c70:	91 f0       	breq	.+36     	; 0x6c96 <last_2_log+0x72>
    6c72:	e1 e6       	ldi	r30, 0x61	; 97
    6c74:	fe 12       	cpse	r15, r30
    6c76:	16 c0       	rjmp	.+44     	; 0x6ca4 <last_2_log+0x80>
    6c78:	07 c0       	rjmp	.+14     	; 0x6c88 <last_2_log+0x64>
	{
		case 'n':
			send_to_rf(data_to_rf, 6, "[2ndnml]");
    6c7a:	46 ec       	ldi	r20, 0xC6	; 198
    6c7c:	58 e0       	ldi	r21, 0x08	; 8
    6c7e:	66 e0       	ldi	r22, 0x06	; 6
    6c80:	8e e6       	ldi	r24, 0x6E	; 110
    6c82:	9f e1       	ldi	r25, 0x1F	; 31
    6c84:	70 dd       	rcall	.-1312   	; 0x6766 <send_to_rf>
			break;
    6c86:	14 c0       	rjmp	.+40     	; 0x6cb0 <last_2_log+0x8c>
		case 'a':
			send_to_rf(data_to_rf, 6, "[2ndaci]");
    6c88:	4f ec       	ldi	r20, 0xCF	; 207
    6c8a:	58 e0       	ldi	r21, 0x08	; 8
    6c8c:	66 e0       	ldi	r22, 0x06	; 6
    6c8e:	8e e6       	ldi	r24, 0x6E	; 110
    6c90:	9f e1       	ldi	r25, 0x1F	; 31
    6c92:	69 dd       	rcall	.-1326   	; 0x6766 <send_to_rf>
			break;
    6c94:	0d c0       	rjmp	.+26     	; 0x6cb0 <last_2_log+0x8c>
		case 's':
			send_to_rf(data_to_rf, 6, "[2ndsft]");
    6c96:	48 ed       	ldi	r20, 0xD8	; 216
    6c98:	58 e0       	ldi	r21, 0x08	; 8
    6c9a:	66 e0       	ldi	r22, 0x06	; 6
    6c9c:	8e e6       	ldi	r24, 0x6E	; 110
    6c9e:	9f e1       	ldi	r25, 0x1F	; 31
    6ca0:	62 dd       	rcall	.-1340   	; 0x6766 <send_to_rf>
			break;
    6ca2:	06 c0       	rjmp	.+12     	; 0x6cb0 <last_2_log+0x8c>
		default:
			send_to_rf(data_to_rf, 11, "[2ndlog]");
    6ca4:	41 ee       	ldi	r20, 0xE1	; 225
    6ca6:	58 e0       	ldi	r21, 0x08	; 8
    6ca8:	6b e0       	ldi	r22, 0x0B	; 11
    6caa:	8e e6       	ldi	r24, 0x6E	; 110
    6cac:	9f e1       	ldi	r25, 0x1F	; 31
    6cae:	5b dd       	rcall	.-1354   	; 0x6766 <send_to_rf>
			break;
	}
}
    6cb0:	df 91       	pop	r29
    6cb2:	cf 91       	pop	r28
    6cb4:	1f 91       	pop	r17
    6cb6:	0f 91       	pop	r16
    6cb8:	ff 90       	pop	r15
    6cba:	08 95       	ret

00006cbc <test_completed>:

void test_completed(char type, uint8_t retry)
{
    6cbc:	df 92       	push	r13
    6cbe:	ef 92       	push	r14
    6cc0:	ff 92       	push	r15
    6cc2:	0f 93       	push	r16
    6cc4:	cf 93       	push	r28
    6cc6:	df 93       	push	r29
    6cc8:	08 2f       	mov	r16, r24
    6cca:	d6 2e       	mov	r13, r22
    6ccc:	0f 2e       	mov	r0, r31
    6cce:	fe e6       	ldi	r31, 0x6E	; 110
    6cd0:	ef 2e       	mov	r14, r31
    6cd2:	ff e1       	ldi	r31, 0x1F	; 31
    6cd4:	ff 2e       	mov	r15, r31
    6cd6:	f0 2d       	mov	r31, r0
    6cd8:	c0 e0       	ldi	r28, 0x00	; 0
    6cda:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t memory_address_high = 0;
	uint8_t data_counter = 0;
	uint8_t counter = 0;
	for (uint8_t i=0; i<6; i++) //For the start of the test. Only retrieve the time portion. Fork of last_2_log function
	{
		memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
    6cdc:	40 91 e8 20 	lds	r20, 0x20E8
    6ce0:	50 91 e9 20 	lds	r21, 0x20E9
    6ce4:	ca 01       	movw	r24, r20
    6ce6:	46 97       	sbiw	r24, 0x16	; 22
    6ce8:	8c 0f       	add	r24, r28
    6cea:	9d 1f       	adc	r25, r29
    6cec:	46 51       	subi	r20, 0x16	; 22
		memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
    6cee:	4c 0f       	add	r20, r28
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6cf0:	29 2f       	mov	r18, r25
    6cf2:	65 e4       	ldi	r22, 0x45	; 69
    6cf4:	8f ea       	ldi	r24, 0xAF	; 175
    6cf6:	0e 94 7d 22 	call	0x44fa	; 0x44fa <PNEWELSE2promRead>
    6cfa:	f7 01       	movw	r30, r14
    6cfc:	81 93       	st	Z+, r24
    6cfe:	7f 01       	movw	r14, r30
    6d00:	21 96       	adiw	r28, 0x01	; 1
{
	uint8_t memory_address_low = 0;
	uint8_t memory_address_high = 0;
	uint8_t data_counter = 0;
	uint8_t counter = 0;
	for (uint8_t i=0; i<6; i++) //For the start of the test. Only retrieve the time portion. Fork of last_2_log function
    6d02:	c6 30       	cpi	r28, 0x06	; 6
    6d04:	d1 05       	cpc	r29, r1
    6d06:	51 f7       	brne	.-44     	; 0x6cdc <test_completed+0x20>
    6d08:	0f 2e       	mov	r0, r31
    6d0a:	f4 e7       	ldi	r31, 0x74	; 116
    6d0c:	ef 2e       	mov	r14, r31
    6d0e:	ff e1       	ldi	r31, 0x1F	; 31
    6d10:	ff 2e       	mov	r15, r31
    6d12:	f0 2d       	mov	r31, r0
    6d14:	c0 e0       	ldi	r28, 0x00	; 0
    6d16:	d0 e0       	ldi	r29, 0x00	; 0
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	for (uint8_t i=0; i<6; i++) //For the end of the test. Only retrieve the time portion
	{
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
    6d18:	40 91 e8 20 	lds	r20, 0x20E8
    6d1c:	50 91 e9 20 	lds	r21, 0x20E9
    6d20:	ca 01       	movw	r24, r20
    6d22:	0b 97       	sbiw	r24, 0x0b	; 11
    6d24:	8c 0f       	add	r24, r28
    6d26:	9d 1f       	adc	r25, r29
    6d28:	4b 50       	subi	r20, 0x0B	; 11
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
    6d2a:	4c 0f       	add	r20, r28
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6d2c:	29 2f       	mov	r18, r25
    6d2e:	65 e4       	ldi	r22, 0x45	; 69
    6d30:	8f ea       	ldi	r24, 0xAF	; 175
    6d32:	0e 94 7d 22 	call	0x44fa	; 0x44fa <PNEWELSE2promRead>
    6d36:	f7 01       	movw	r30, r14
    6d38:	81 93       	st	Z+, r24
    6d3a:	7f 01       	movw	r14, r30
    6d3c:	21 96       	adiw	r28, 0x01	; 1
		memory_address_high = (((memory_address_incr-22+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-22+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	for (uint8_t i=0; i<6; i++) //For the end of the test. Only retrieve the time portion
    6d3e:	c6 30       	cpi	r28, 0x06	; 6
    6d40:	d1 05       	cpc	r29, r1
    6d42:	51 f7       	brne	.-44     	; 0x6d18 <test_completed+0x5c>
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	while(counter < retry)
    6d44:	dd 20       	and	r13, r13
    6d46:	31 f1       	breq	.+76     	; 0x6d94 <test_completed+0xd8>
    6d48:	c0 e0       	ldi	r28, 0x00	; 0
	{
		switch(type)
    6d4a:	0e 36       	cpi	r16, 0x6E	; 110
    6d4c:	29 f0       	breq	.+10     	; 0x6d58 <test_completed+0x9c>
    6d4e:	03 37       	cpi	r16, 0x73	; 115
    6d50:	89 f0       	breq	.+34     	; 0x6d74 <test_completed+0xb8>
    6d52:	01 36       	cpi	r16, 0x61	; 97
    6d54:	b1 f4       	brne	.+44     	; 0x6d82 <test_completed+0xc6>
    6d56:	07 c0       	rjmp	.+14     	; 0x6d66 <test_completed+0xaa>
		{
			case 'n':
			send_to_rf(data_to_rf, data_counter, "[tstend]");
    6d58:	4a ee       	ldi	r20, 0xEA	; 234
    6d5a:	58 e0       	ldi	r21, 0x08	; 8
    6d5c:	6c e0       	ldi	r22, 0x0C	; 12
    6d5e:	8e e6       	ldi	r24, 0x6E	; 110
    6d60:	9f e1       	ldi	r25, 0x1F	; 31
    6d62:	01 dd       	rcall	.-1534   	; 0x6766 <send_to_rf>
			break;
    6d64:	14 c0       	rjmp	.+40     	; 0x6d8e <test_completed+0xd2>
			case 'a':
			send_to_rf(data_to_rf, data_counter, "[tstaci]");
    6d66:	43 ef       	ldi	r20, 0xF3	; 243
    6d68:	58 e0       	ldi	r21, 0x08	; 8
    6d6a:	6c e0       	ldi	r22, 0x0C	; 12
    6d6c:	8e e6       	ldi	r24, 0x6E	; 110
    6d6e:	9f e1       	ldi	r25, 0x1F	; 31
    6d70:	fa dc       	rcall	.-1548   	; 0x6766 <send_to_rf>
			break;
    6d72:	0d c0       	rjmp	.+26     	; 0x6d8e <test_completed+0xd2>
			case 's':
			send_to_rf(data_to_rf, data_counter, "[tststp]");
    6d74:	4c ef       	ldi	r20, 0xFC	; 252
    6d76:	58 e0       	ldi	r21, 0x08	; 8
    6d78:	6c e0       	ldi	r22, 0x0C	; 12
    6d7a:	8e e6       	ldi	r24, 0x6E	; 110
    6d7c:	9f e1       	ldi	r25, 0x1F	; 31
    6d7e:	f3 dc       	rcall	.-1562   	; 0x6766 <send_to_rf>
			break;
    6d80:	06 c0       	rjmp	.+12     	; 0x6d8e <test_completed+0xd2>
			default:
			send_to_rf(data_to_rf, data_counter, "[tstend]");
    6d82:	4a ee       	ldi	r20, 0xEA	; 234
    6d84:	58 e0       	ldi	r21, 0x08	; 8
    6d86:	6c e0       	ldi	r22, 0x0C	; 12
    6d88:	8e e6       	ldi	r24, 0x6E	; 110
    6d8a:	9f e1       	ldi	r25, 0x1F	; 31
    6d8c:	ec dc       	rcall	.-1576   	; 0x6766 <send_to_rf>
			break;
		}
		counter++;
    6d8e:	cf 5f       	subi	r28, 0xFF	; 255
		memory_address_high = (((memory_address_incr-11+i) & 0xFF00) >> 8);
		memory_address_low = ((memory_address_incr-11+i) & 0x00FF);
		data_to_rf[data_counter] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		data_counter++;
	}
	while(counter < retry)
    6d90:	cd 11       	cpse	r28, r13
    6d92:	db cf       	rjmp	.-74     	; 0x6d4a <test_completed+0x8e>
	}
	
/*	send_to_rf(data_to_rf, data_counter + 1, "[tstend]");*/
// 	pne_delayms(10);
// 	send_to_rf(data_to_rf, data_counter + 1, "[tstend]");
}
    6d94:	df 91       	pop	r29
    6d96:	cf 91       	pop	r28
    6d98:	0f 91       	pop	r16
    6d9a:	ff 90       	pop	r15
    6d9c:	ef 90       	pop	r14
    6d9e:	df 90       	pop	r13
    6da0:	08 95       	ret

00006da2 <dump_log_to_rf>:

/*---------This is experimental function----------------*/
void dump_log_to_rf()
{
    6da2:	0f 93       	push	r16
    6da4:	1f 93       	push	r17
    6da6:	cf 93       	push	r28
    6da8:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6daa:	c0 e0       	ldi	r28, 0x00	; 0
    6dac:	d0 e0       	ldi	r29, 0x00	; 0
}

/*---------This is experimental function----------------*/
void dump_log_to_rf()
{
	uint8_t i = 0;
    6dae:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(i == 11)
		{
			send_to_rf(data_to_rf, 11, "[dumpmm]");
			i = 0;
    6db0:	00 e0       	ldi	r16, 0x00	; 0
    6db2:	09 c0       	rjmp	.+18     	; 0x6dc6 <dump_log_to_rf+0x24>
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
	{
		if(i == 11)
    6db4:	1b 30       	cpi	r17, 0x0B	; 11
    6db6:	39 f4       	brne	.+14     	; 0x6dc6 <dump_log_to_rf+0x24>
		{
			send_to_rf(data_to_rf, 11, "[dumpmm]");
    6db8:	45 e0       	ldi	r20, 0x05	; 5
    6dba:	59 e0       	ldi	r21, 0x09	; 9
    6dbc:	6b e0       	ldi	r22, 0x0B	; 11
    6dbe:	8e e6       	ldi	r24, 0x6E	; 110
    6dc0:	9f e1       	ldi	r25, 0x1F	; 31
    6dc2:	d1 dc       	rcall	.-1630   	; 0x6766 <send_to_rf>
			i = 0;
    6dc4:	10 2f       	mov	r17, r16
			/*pne_delayms(10);*/
		}
		memory_address_low = (tmpi & 0xFF);
		memory_address_high = ((tmpi >> 8) & 0xFF);
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
    6dc6:	2d 2f       	mov	r18, r29
    6dc8:	4c 2f       	mov	r20, r28
    6dca:	65 e4       	ldi	r22, 0x45	; 69
    6dcc:	8f ea       	ldi	r24, 0xAF	; 175
    6dce:	0e 94 7d 22 	call	0x44fa	; 0x44fa <PNEWELSE2promRead>
    6dd2:	e1 2f       	mov	r30, r17
    6dd4:	f0 e0       	ldi	r31, 0x00	; 0
    6dd6:	e2 59       	subi	r30, 0x92	; 146
    6dd8:	f0 4e       	sbci	r31, 0xE0	; 224
    6dda:	80 83       	st	Z, r24
		pne_delayms(10);
    6ddc:	8a e0       	ldi	r24, 0x0A	; 10
    6dde:	90 e0       	ldi	r25, 0x00	; 0
    6de0:	0e 94 65 21 	call	0x42ca	; 0x42ca <pne_delayms>
		i++;
    6de4:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t i = 0;
	uint8_t memory_address_high = 0;
	uint8_t memory_address_low = 0;
	
	for (uint16_t tmpi=0; tmpi<4092; tmpi++)
    6de6:	21 96       	adiw	r28, 0x01	; 1
    6de8:	cc 3f       	cpi	r28, 0xFC	; 252
    6dea:	8f e0       	ldi	r24, 0x0F	; 15
    6dec:	d8 07       	cpc	r29, r24
    6dee:	11 f7       	brne	.-60     	; 0x6db4 <dump_log_to_rf+0x12>
		data_to_rf[i] = PNEWELSE2promRead(0xAF,'E',memory_address_low,memory_address_high);
		pne_delayms(10);
		i++;
		
	}
}
    6df0:	df 91       	pop	r29
    6df2:	cf 91       	pop	r28
    6df4:	1f 91       	pop	r17
    6df6:	0f 91       	pop	r16
    6df8:	08 95       	ret

00006dfa <stress_test>:
//---------End of Experimental function-----------------*/
/*---------This is experimental function----------------*/
void stress_test()
{
    6dfa:	ef 92       	push	r14
    6dfc:	ff 92       	push	r15
    6dfe:	1f 93       	push	r17
    6e00:	cf 93       	push	r28
    6e02:	df 93       	push	r29
	for(uint8_t u = 0; u<20; u++)
    6e04:	10 e0       	ldi	r17, 0x00	; 0
    6e06:	0f 2e       	mov	r0, r31
    6e08:	fe e6       	ldi	r31, 0x6E	; 110
    6e0a:	ef 2e       	mov	r14, r31
    6e0c:	ff e1       	ldi	r31, 0x1F	; 31
    6e0e:	ff 2e       	mov	r15, r31
    6e10:	f0 2d       	mov	r31, r0
    6e12:	cd e8       	ldi	r28, 0x8D	; 141
    6e14:	df e1       	ldi	r29, 0x1F	; 31
    6e16:	0e c0       	rjmp	.+28     	; 0x6e34 <stress_test+0x3a>
	{
		for(uint16_t i = 0; i<31; i++)
		{
			data_to_rf[i] = 0;
    6e18:	11 92       	st	Z+, r1
/*---------This is experimental function----------------*/
void stress_test()
{
	for(uint8_t u = 0; u<20; u++)
	{
		for(uint16_t i = 0; i<31; i++)
    6e1a:	ec 17       	cp	r30, r28
    6e1c:	fd 07       	cpc	r31, r29
    6e1e:	e1 f7       	brne	.-8      	; 0x6e18 <stress_test+0x1e>
		{
			data_to_rf[i] = 0;
		}
		data_to_rf[31] = u;
    6e20:	f7 01       	movw	r30, r14
    6e22:	17 8f       	std	Z+31, r17	; 0x1f
		send_to_rf(data_to_rf,32,"[stress]");
    6e24:	4b ee       	ldi	r20, 0xEB	; 235
    6e26:	52 e0       	ldi	r21, 0x02	; 2
    6e28:	60 e2       	ldi	r22, 0x20	; 32
    6e2a:	c7 01       	movw	r24, r14
    6e2c:	9c dc       	rcall	.-1736   	; 0x6766 <send_to_rf>
}
//---------End of Experimental function-----------------*/
/*---------This is experimental function----------------*/
void stress_test()
{
	for(uint8_t u = 0; u<20; u++)
    6e2e:	1f 5f       	subi	r17, 0xFF	; 255
    6e30:	14 31       	cpi	r17, 0x14	; 20
    6e32:	11 f0       	breq	.+4      	; 0x6e38 <stress_test+0x3e>
    6e34:	f7 01       	movw	r30, r14
    6e36:	f0 cf       	rjmp	.-32     	; 0x6e18 <stress_test+0x1e>
			data_to_rf[i] = 0;
		}
		data_to_rf[31] = u;
		send_to_rf(data_to_rf,32,"[stress]");
	}
}
    6e38:	df 91       	pop	r29
    6e3a:	cf 91       	pop	r28
    6e3c:	1f 91       	pop	r17
    6e3e:	ff 90       	pop	r15
    6e40:	ef 90       	pop	r14
    6e42:	08 95       	ret

00006e44 <request_to_RF>:
//---------End of Experimental function-----------------*/
void request_to_RF(uint8_t *RFU_UID)
{
    6e44:	fc 01       	movw	r30, r24
    6e46:	ae e6       	ldi	r26, 0x6E	; 110
    6e48:	bf e1       	ldi	r27, 0x1F	; 31
    6e4a:	9c 01       	movw	r18, r24
    6e4c:	20 5f       	subi	r18, 0xF0	; 240
    6e4e:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i = 0; i<max_UID_length; i++)
	{
		data_to_rf[i] = RFU_UID[i];
    6e50:	81 91       	ld	r24, Z+
    6e52:	8d 93       	st	X+, r24
	}
}
//---------End of Experimental function-----------------*/
void request_to_RF(uint8_t *RFU_UID)
{
	for(uint8_t i = 0; i<max_UID_length; i++)
    6e54:	e2 17       	cp	r30, r18
    6e56:	f3 07       	cpc	r31, r19
    6e58:	d9 f7       	brne	.-10     	; 0x6e50 <request_to_RF+0xc>
	{
		data_to_rf[i] = RFU_UID[i];
	}
	send_to_rf(data_to_rf, max_UID_length, "[requid]");
    6e5a:	4e e0       	ldi	r20, 0x0E	; 14
    6e5c:	59 e0       	ldi	r21, 0x09	; 9
    6e5e:	60 e1       	ldi	r22, 0x10	; 16
    6e60:	8e e6       	ldi	r24, 0x6E	; 110
    6e62:	9f e1       	ldi	r25, 0x1F	; 31
    6e64:	80 cc       	rjmp	.-1792   	; 0x6766 <send_to_rf>
    6e66:	08 95       	ret

00006e68 <WPS_OK_Alert>:
	/*send_to_rf(data_to_rf, 0, "[chngid]");*/
}

void WPS_OK_Alert(uint8_t *data, uint8_t size)
{
	send_to_rf(data,size,"[pairok]");
    6e68:	47 e1       	ldi	r20, 0x17	; 23
    6e6a:	59 e0       	ldi	r21, 0x09	; 9
    6e6c:	7c cc       	rjmp	.-1800   	; 0x6766 <send_to_rf>
    6e6e:	08 95       	ret

00006e70 <crc_verify>:
}


//crc verification routine
bool crc_verify(uint8_t *data, uint8_t size)
{
    6e70:	df 92       	push	r13
    6e72:	ef 92       	push	r14
    6e74:	ff 92       	push	r15
    6e76:	0f 93       	push	r16
    6e78:	1f 93       	push	r17
    6e7a:	cf 93       	push	r28
    6e7c:	df 93       	push	r29
    6e7e:	8c 01       	movw	r16, r24
    6e80:	c6 2f       	mov	r28, r22
	uint8_t crc_upper = 0;
	uint8_t crc_lower = 0;
	crc_upper = data[size-2]; //crc_upper = (ascii_to_hex(data[size-4])*0x10 + ascii_to_hex(data[size-3]));
    6e82:	9c 01       	movw	r18, r24
    6e84:	26 0f       	add	r18, r22
    6e86:	31 1d       	adc	r19, r1
    6e88:	f9 01       	movw	r30, r18
    6e8a:	32 97       	sbiw	r30, 0x02	; 2
    6e8c:	e0 80       	ld	r14, Z
	crc_lower = data[size-1]; //crc_lower = (ascii_to_hex(data[size-1])*0x10 + ascii_to_hex(data[size-1]));
    6e8e:	31 96       	adiw	r30, 0x01	; 1
    6e90:	d0 80       	ld	r13, Z
	uint8_t crc_upper_internal = 0;
	uint8_t crc_lower_internal = 0;
	uint8_t data_length = size-2; //uint8_t data_length = size-4;
	crcInit();
    6e92:	84 d1       	rcall	.+776    	; 0x719c <crcInit>
	uint8_t crc_lower = 0;
	crc_upper = data[size-2]; //crc_upper = (ascii_to_hex(data[size-4])*0x10 + ascii_to_hex(data[size-3]));
	crc_lower = data[size-1]; //crc_lower = (ascii_to_hex(data[size-1])*0x10 + ascii_to_hex(data[size-1]));
	uint8_t crc_upper_internal = 0;
	uint8_t crc_lower_internal = 0;
	uint8_t data_length = size-2; //uint8_t data_length = size-4;
    6e94:	c2 50       	subi	r28, 0x02	; 2
	crcInit();
	crc_upper_internal = ((crcFast(data, (data_length)) & 0xFF00) >> 8);
    6e96:	d0 e0       	ldi	r29, 0x00	; 0
    6e98:	be 01       	movw	r22, r28
    6e9a:	c8 01       	movw	r24, r16
    6e9c:	9c d1       	rcall	.+824    	; 0x71d6 <crcFast>
    6e9e:	f9 2e       	mov	r15, r25
	crc_lower_internal = (crcFast(data, (data_length)) & 0x00FF);
    6ea0:	be 01       	movw	r22, r28
    6ea2:	c8 01       	movw	r24, r16
    6ea4:	98 d1       	rcall	.+816    	; 0x71d6 <crcFast>
    6ea6:	98 2f       	mov	r25, r24
	if ((crc_upper_internal == crc_upper) && (crc_lower_internal == crc_lower))
    6ea8:	ef 10       	cpse	r14, r15
    6eaa:	05 c0       	rjmp	.+10     	; 0x6eb6 <crc_verify+0x46>
    6eac:	81 e0       	ldi	r24, 0x01	; 1
    6eae:	d9 16       	cp	r13, r25
    6eb0:	19 f0       	breq	.+6      	; 0x6eb8 <crc_verify+0x48>
    6eb2:	80 e0       	ldi	r24, 0x00	; 0
    6eb4:	01 c0       	rjmp	.+2      	; 0x6eb8 <crc_verify+0x48>
	{
		
		return true;
	}

	return false;	
    6eb6:	80 e0       	ldi	r24, 0x00	; 0
}
    6eb8:	df 91       	pop	r29
    6eba:	cf 91       	pop	r28
    6ebc:	1f 91       	pop	r17
    6ebe:	0f 91       	pop	r16
    6ec0:	ff 90       	pop	r15
    6ec2:	ef 90       	pop	r14
    6ec4:	df 90       	pop	r13
    6ec6:	08 95       	ret

00006ec8 <ascii_to_hex>:

//ascii to hex conversion routine
uint8_t ascii_to_hex(uint8_t data)
{
	uint8_t return_data = 0;
	if ((data<=0x39) && (data>=0x30))
    6ec8:	90 ed       	ldi	r25, 0xD0	; 208
    6eca:	98 0f       	add	r25, r24
    6ecc:	9a 30       	cpi	r25, 0x0A	; 10
    6ece:	08 f0       	brcs	.+2      	; 0x6ed2 <ascii_to_hex+0xa>


//ascii to hex conversion routine
uint8_t ascii_to_hex(uint8_t data)
{
	uint8_t return_data = 0;
    6ed0:	90 e0       	ldi	r25, 0x00	; 0
	if ((data<=0x39) && (data>=0x30))
	{
		return_data = data - 0x30;
	}
	if ((data<=0x5A) && (data>=0x41))
    6ed2:	2f eb       	ldi	r18, 0xBF	; 191
    6ed4:	28 0f       	add	r18, r24
    6ed6:	2a 31       	cpi	r18, 0x1A	; 26
    6ed8:	10 f4       	brcc	.+4      	; 0x6ede <ascii_to_hex+0x16>
	{
		return_data = data - 0x37;
    6eda:	99 ec       	ldi	r25, 0xC9	; 201
    6edc:	98 0f       	add	r25, r24
	}
	if ((data<=0x66) && (data>=0x61))
    6ede:	2f e9       	ldi	r18, 0x9F	; 159
    6ee0:	28 0f       	add	r18, r24
    6ee2:	26 30       	cpi	r18, 0x06	; 6
    6ee4:	10 f4       	brcc	.+4      	; 0x6eea <ascii_to_hex+0x22>
	{
		return_data = data - 0x57;
    6ee6:	99 ea       	ldi	r25, 0xA9	; 169
    6ee8:	98 0f       	add	r25, r24
	}
	return return_data;
}
    6eea:	89 2f       	mov	r24, r25
    6eec:	08 95       	ret

00006eee <fatal_error_to_rf>:


//fatal error routine
void fatal_error_to_rf(fatal_error_t error)
{
	if (error == adc_fatal_error)
    6eee:	81 11       	cpse	r24, r1
    6ef0:	0a c0       	rjmp	.+20     	; 0x6f06 <fatal_error_to_rf+0x18>
	{
		data_to_rf[0] = adc_fatal_error+1;
    6ef2:	81 e0       	ldi	r24, 0x01	; 1
    6ef4:	80 93 6e 1f 	sts	0x1F6E, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6ef8:	40 e2       	ldi	r20, 0x20	; 32
    6efa:	59 e0       	ldi	r21, 0x09	; 9
    6efc:	61 e0       	ldi	r22, 0x01	; 1
    6efe:	8e e6       	ldi	r24, 0x6E	; 110
    6f00:	9f e1       	ldi	r25, 0x1F	; 31
    6f02:	31 cc       	rjmp	.-1950   	; 0x6766 <send_to_rf>
    6f04:	08 95       	ret
	}
	else if (error == twi_fatal_error)
    6f06:	81 30       	cpi	r24, 0x01	; 1
    6f08:	51 f4       	brne	.+20     	; 0x6f1e <fatal_error_to_rf+0x30>
	{
		data_to_rf[0] = twi_fatal_error+1;
    6f0a:	82 e0       	ldi	r24, 0x02	; 2
    6f0c:	80 93 6e 1f 	sts	0x1F6E, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6f10:	40 e2       	ldi	r20, 0x20	; 32
    6f12:	59 e0       	ldi	r21, 0x09	; 9
    6f14:	61 e0       	ldi	r22, 0x01	; 1
    6f16:	8e e6       	ldi	r24, 0x6E	; 110
    6f18:	9f e1       	ldi	r25, 0x1F	; 31
    6f1a:	25 cc       	rjmp	.-1974   	; 0x6766 <send_to_rf>
    6f1c:	08 95       	ret
	}
	else if (error == usart_fatal_error)
    6f1e:	82 30       	cpi	r24, 0x02	; 2
    6f20:	51 f4       	brne	.+20     	; 0x6f36 <fatal_error_to_rf+0x48>
	{
		data_to_rf[0] = usart_fatal_error+1;
    6f22:	83 e0       	ldi	r24, 0x03	; 3
    6f24:	80 93 6e 1f 	sts	0x1F6E, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6f28:	40 e2       	ldi	r20, 0x20	; 32
    6f2a:	59 e0       	ldi	r21, 0x09	; 9
    6f2c:	61 e0       	ldi	r22, 0x01	; 1
    6f2e:	8e e6       	ldi	r24, 0x6E	; 110
    6f30:	9f e1       	ldi	r25, 0x1F	; 31
    6f32:	19 cc       	rjmp	.-1998   	; 0x6766 <send_to_rf>
    6f34:	08 95       	ret
	}
	else
	{
		data_to_rf[0] = timer2_fatal_error+1;
    6f36:	84 e0       	ldi	r24, 0x04	; 4
    6f38:	80 93 6e 1f 	sts	0x1F6E, r24
		send_to_rf(data_to_rf,1,"[ferror]");
    6f3c:	40 e2       	ldi	r20, 0x20	; 32
    6f3e:	59 e0       	ldi	r21, 0x09	; 9
    6f40:	61 e0       	ldi	r22, 0x01	; 1
    6f42:	8e e6       	ldi	r24, 0x6E	; 110
    6f44:	9f e1       	ldi	r25, 0x1F	; 31
    6f46:	0f cc       	rjmp	.-2018   	; 0x6766 <send_to_rf>
    6f48:	08 95       	ret

00006f4a <__vector_23>:
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
		date_out->month++;
	}
	date_out->date = day_number;
}
    6f4a:	1f 92       	push	r1
    6f4c:	0f 92       	push	r0
    6f4e:	0f b6       	in	r0, 0x3f	; 63
    6f50:	0f 92       	push	r0
    6f52:	11 24       	eor	r1, r1
    6f54:	8f 93       	push	r24
    6f56:	9f 93       	push	r25
    6f58:	af 93       	push	r26
    6f5a:	bf 93       	push	r27
    6f5c:	80 91 d5 1f 	lds	r24, 0x1FD5
    6f60:	8f 5f       	subi	r24, 0xFF	; 255
    6f62:	80 93 d5 1f 	sts	0x1FD5, r24
    6f66:	8e 31       	cpi	r24, 0x1E	; 30
    6f68:	a8 f0       	brcs	.+42     	; 0x6f94 <__vector_23+0x4a>
    6f6a:	80 91 d6 1f 	lds	r24, 0x1FD6
    6f6e:	90 91 d7 1f 	lds	r25, 0x1FD7
    6f72:	a0 91 d8 1f 	lds	r26, 0x1FD8
    6f76:	b0 91 d9 1f 	lds	r27, 0x1FD9
    6f7a:	01 96       	adiw	r24, 0x01	; 1
    6f7c:	a1 1d       	adc	r26, r1
    6f7e:	b1 1d       	adc	r27, r1
    6f80:	80 93 d6 1f 	sts	0x1FD6, r24
    6f84:	90 93 d7 1f 	sts	0x1FD7, r25
    6f88:	a0 93 d8 1f 	sts	0x1FD8, r26
    6f8c:	b0 93 d9 1f 	sts	0x1FD9, r27
    6f90:	10 92 d5 1f 	sts	0x1FD5, r1
    6f94:	bf 91       	pop	r27
    6f96:	af 91       	pop	r26
    6f98:	9f 91       	pop	r25
    6f9a:	8f 91       	pop	r24
    6f9c:	0f 90       	pop	r0
    6f9e:	0f be       	out	0x3f, r0	; 63
    6fa0:	0f 90       	pop	r0
    6fa2:	1f 90       	pop	r1
    6fa4:	18 95       	reti

00006fa6 <__vector_15>:
    6fa6:	1f 92       	push	r1
    6fa8:	0f 92       	push	r0
    6faa:	0f b6       	in	r0, 0x3f	; 63
    6fac:	0f 92       	push	r0
    6fae:	11 24       	eor	r1, r1
    6fb0:	8f 93       	push	r24
    6fb2:	9f 93       	push	r25
    6fb4:	af 93       	push	r26
    6fb6:	bf 93       	push	r27
    6fb8:	80 91 d6 1f 	lds	r24, 0x1FD6
    6fbc:	90 91 d7 1f 	lds	r25, 0x1FD7
    6fc0:	a0 91 d8 1f 	lds	r26, 0x1FD8
    6fc4:	b0 91 d9 1f 	lds	r27, 0x1FD9
    6fc8:	01 96       	adiw	r24, 0x01	; 1
    6fca:	a1 1d       	adc	r26, r1
    6fcc:	b1 1d       	adc	r27, r1
    6fce:	80 93 d6 1f 	sts	0x1FD6, r24
    6fd2:	90 93 d7 1f 	sts	0x1FD7, r25
    6fd6:	a0 93 d8 1f 	sts	0x1FD8, r26
    6fda:	b0 93 d9 1f 	sts	0x1FD9, r27
    6fde:	bf 91       	pop	r27
    6fe0:	af 91       	pop	r26
    6fe2:	9f 91       	pop	r25
    6fe4:	8f 91       	pop	r24
    6fe6:	0f 90       	pop	r0
    6fe8:	0f be       	out	0x3f, r0	; 63
    6fea:	0f 90       	pop	r0
    6fec:	1f 90       	pop	r1
    6fee:	18 95       	reti

00006ff0 <timer2_init>:
    6ff0:	f8 94       	cli
    6ff2:	10 92 70 00 	sts	0x0070, r1
    6ff6:	e6 eb       	ldi	r30, 0xB6	; 182
    6ff8:	f0 e0       	ldi	r31, 0x00	; 0
    6ffa:	80 81       	ld	r24, Z
    6ffc:	80 62       	ori	r24, 0x20	; 32
    6ffe:	80 83       	st	Z, r24
    7000:	10 92 b2 00 	sts	0x00B2, r1
    7004:	10 92 b0 00 	sts	0x00B0, r1
    7008:	85 e0       	ldi	r24, 0x05	; 5
    700a:	80 93 b1 00 	sts	0x00B1, r24
    700e:	80 81       	ld	r24, Z
    7010:	83 70       	andi	r24, 0x03	; 3
    7012:	83 30       	cpi	r24, 0x03	; 3
    7014:	e1 f3       	breq	.-8      	; 0x700e <timer2_init+0x1e>
    7016:	10 92 b2 00 	sts	0x00B2, r1
    701a:	10 92 b0 00 	sts	0x00B0, r1
    701e:	85 e0       	ldi	r24, 0x05	; 5
    7020:	80 93 b1 00 	sts	0x00B1, r24
    7024:	17 ba       	out	0x17, r1	; 23
    7026:	e0 e7       	ldi	r30, 0x70	; 112
    7028:	f0 e0       	ldi	r31, 0x00	; 0
    702a:	80 81       	ld	r24, Z
    702c:	81 60       	ori	r24, 0x01	; 1
    702e:	80 83       	st	Z, r24
    7030:	78 94       	sei
    7032:	08 95       	ret

00007034 <set_timestamp>:

void set_timestamp(uint32_t timestamp)
{
	timestamp_internal = timestamp;
    7034:	60 93 d6 1f 	sts	0x1FD6, r22
    7038:	70 93 d7 1f 	sts	0x1FD7, r23
    703c:	80 93 d8 1f 	sts	0x1FD8, r24
    7040:	90 93 d9 1f 	sts	0x1FD9, r25
    7044:	08 95       	ret

00007046 <get_timestamp>:
}

uint32_t get_timestamp(void)
{
	return timestamp_internal;
    7046:	60 91 d6 1f 	lds	r22, 0x1FD6
    704a:	70 91 d7 1f 	lds	r23, 0x1FD7
    704e:	80 91 d8 1f 	lds	r24, 0x1FD8
    7052:	90 91 d9 1f 	lds	r25, 0x1FD9
    7056:	08 95       	ret

00007058 <pneBatteryAverage_init>:
#include "PNE_Factory.h"



void pneBatteryAverage_init()
{
    7058:	0f 93       	push	r16
    705a:	1f 93       	push	r17
    705c:	cf 93       	push	r28
    705e:	df 93       	push	r29
	battery_counter = 0;
    7060:	10 92 29 21 	sts	0x2129, r1
    7064:	a3 e2       	ldi	r26, 0x23	; 35
    7066:	b1 e2       	ldi	r27, 0x21	; 33
    7068:	68 e2       	ldi	r22, 0x28	; 40
    706a:	71 e2       	ldi	r23, 0x21	; 33
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    706c:	0b e7       	ldi	r16, 0x7B	; 123
    706e:	10 e0       	ldi	r17, 0x00	; 0
	}

	ADMUX
		= ((uint8_t)input &
    7070:	4c e7       	ldi	r20, 0x7C	; 124
    7072:	50 e0       	ldi	r21, 0x00	; 0
    7074:	90 e6       	ldi	r25, 0x60	; 96
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    7076:	ea e7       	ldi	r30, 0x7A	; 122
    7078:	f0 e0       	ldi	r31, 0x00	; 0
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    707a:	29 e7       	ldi	r18, 0x79	; 121
    707c:	30 e0       	ldi	r19, 0x00	; 0
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    707e:	e8 01       	movw	r28, r16
    7080:	88 81       	ld	r24, Y
    7082:	87 7f       	andi	r24, 0xF7	; 247
    7084:	88 83       	st	Y, r24
	}

	ADMUX
		= ((uint8_t)input &
    7086:	ea 01       	movw	r28, r20
    7088:	98 83       	st	Y, r25
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    708a:	80 81       	ld	r24, Z
    708c:	80 64       	ori	r24, 0x40	; 64
    708e:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
    7090:	80 81       	ld	r24, Z
    7092:	86 fd       	sbrc	r24, 6
    7094:	fd cf       	rjmp	.-6      	; 0x7090 <pneBatteryAverage_init+0x38>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    7096:	e9 01       	movw	r28, r18
    7098:	88 81       	ld	r24, Y
	uint8_t i=0;
		
	for(i=0; i<5; i++)
	{
		battery_average[i] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);
    709a:	8d 93       	st	X+, r24
void pneBatteryAverage_init()
{
	battery_counter = 0;
	uint8_t i=0;
		
	for(i=0; i<5; i++)
    709c:	a6 17       	cp	r26, r22
    709e:	b7 07       	cpc	r27, r23
    70a0:	71 f7       	brne	.-36     	; 0x707e <pneBatteryAverage_init+0x26>
	{
		battery_average[i] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);
		//int_to_ascii(battery_average[i]);
	}
}
    70a2:	df 91       	pop	r29
    70a4:	cf 91       	pop	r28
    70a6:	1f 91       	pop	r17
    70a8:	0f 91       	pop	r16
    70aa:	08 95       	ret

000070ac <pneBatteryAverage>:

uint8_t pneBatteryAverage()
{
	if(battery_counter > 5)
    70ac:	80 91 29 21 	lds	r24, 0x2129
    70b0:	86 30       	cpi	r24, 0x06	; 6
    70b2:	10 f0       	brcs	.+4      	; 0x70b8 <pneBatteryAverage+0xc>
	{
		battery_counter = 0;
    70b4:	10 92 29 21 	sts	0x2129, r1
	}
	
	battery_average[battery_counter] = adc_read_8bit(ADC_BATTERY_INPUT, ADC_VREF);//*18*10/255;
    70b8:	a0 91 29 21 	lds	r26, 0x2129
    70bc:	b0 e0       	ldi	r27, 0x00	; 0
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    70be:	eb e7       	ldi	r30, 0x7B	; 123
    70c0:	f0 e0       	ldi	r31, 0x00	; 0
    70c2:	80 81       	ld	r24, Z
    70c4:	87 7f       	andi	r24, 0xF7	; 247
    70c6:	80 83       	st	Z, r24
	}

	ADMUX
		= ((uint8_t)input &
    70c8:	80 e6       	ldi	r24, 0x60	; 96
    70ca:	80 93 7c 00 	sts	0x007C, r24
			ADC_MUX_MASK) | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref | ADC_ADJUSTMENT_LEFT;
#endif
	ADCSRA |= (1 << ADSC);
    70ce:	ea e7       	ldi	r30, 0x7A	; 122
    70d0:	f0 e0       	ldi	r31, 0x00	; 0
    70d2:	80 81       	ld	r24, Z
    70d4:	80 64       	ori	r24, 0x40	; 64
    70d6:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
    70d8:	80 81       	ld	r24, Z
    70da:	86 fd       	sbrc	r24, 6
    70dc:	fd cf       	rjmp	.-6      	; 0x70d8 <pneBatteryAverage+0x2c>
			//fatal_error_to_rf(adc_fatal_error);
			//break;
		//}
	}

	return ADCH;
    70de:	80 91 79 00 	lds	r24, 0x0079
    70e2:	e3 e2       	ldi	r30, 0x23	; 35
    70e4:	f1 e2       	ldi	r31, 0x21	; 33
    70e6:	ad 5d       	subi	r26, 0xDD	; 221
    70e8:	be 4d       	sbci	r27, 0xDE	; 222
    70ea:	8c 93       	st	X, r24
	battery_counter++;
    70ec:	80 91 29 21 	lds	r24, 0x2129
    70f0:	8f 5f       	subi	r24, 0xFF	; 255
    70f2:	80 93 29 21 	sts	0x2129, r24
	
	return (battery_average[0]+battery_average[1]+battery_average[2]+battery_average[3]+battery_average[4])/5;
    70f6:	20 81       	ld	r18, Z
    70f8:	81 81       	ldd	r24, Z+1	; 0x01
    70fa:	90 e0       	ldi	r25, 0x00	; 0
    70fc:	82 0f       	add	r24, r18
    70fe:	91 1d       	adc	r25, r1
    7100:	22 81       	ldd	r18, Z+2	; 0x02
    7102:	82 0f       	add	r24, r18
    7104:	91 1d       	adc	r25, r1
    7106:	23 81       	ldd	r18, Z+3	; 0x03
    7108:	82 0f       	add	r24, r18
    710a:	91 1d       	adc	r25, r1
    710c:	24 81       	ldd	r18, Z+4	; 0x04
    710e:	82 0f       	add	r24, r18
    7110:	91 1d       	adc	r25, r1
    7112:	65 e0       	ldi	r22, 0x05	; 5
    7114:	70 e0       	ldi	r23, 0x00	; 0
    7116:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__divmodhi4>
    711a:	86 2f       	mov	r24, r22
}
    711c:	08 95       	ret

0000711e <reflect>:
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
    711e:	8f 92       	push	r8
    7120:	9f 92       	push	r9
    7122:	af 92       	push	r10
    7124:	bf 92       	push	r11
    7126:	cf 92       	push	r12
    7128:	df 92       	push	r13
    712a:	ef 92       	push	r14
    712c:	ff 92       	push	r15
    712e:	cf 93       	push	r28
    7130:	df 93       	push	r29
    7132:	44 23       	and	r20, r20
    7134:	19 f1       	breq	.+70     	; 0x717c <reflect+0x5e>
    7136:	e4 2f       	mov	r30, r20
    7138:	f0 e0       	ldi	r31, 0x00	; 0
    713a:	31 97       	sbiw	r30, 0x01	; 1
    713c:	20 e0       	ldi	r18, 0x00	; 0
    713e:	81 2c       	mov	r8, r1
    7140:	91 2c       	mov	r9, r1
    7142:	54 01       	movw	r10, r8
    7144:	c1 e0       	ldi	r28, 0x01	; 1
    7146:	d0 e0       	ldi	r29, 0x00	; 0
    7148:	60 ff       	sbrs	r22, 0
    714a:	0f c0       	rjmp	.+30     	; 0x716a <reflect+0x4c>
    714c:	6e 01       	movw	r12, r28
    714e:	0e 2e       	mov	r0, r30
    7150:	02 c0       	rjmp	.+4      	; 0x7156 <reflect+0x38>
    7152:	cc 0c       	add	r12, r12
    7154:	dd 1c       	adc	r13, r13
    7156:	0a 94       	dec	r0
    7158:	e2 f7       	brpl	.-8      	; 0x7152 <reflect+0x34>
    715a:	0d 2c       	mov	r0, r13
    715c:	00 0c       	add	r0, r0
    715e:	ee 08       	sbc	r14, r14
    7160:	ff 08       	sbc	r15, r15
    7162:	8c 28       	or	r8, r12
    7164:	9d 28       	or	r9, r13
    7166:	ae 28       	or	r10, r14
    7168:	bf 28       	or	r11, r15
    716a:	96 95       	lsr	r25
    716c:	87 95       	ror	r24
    716e:	77 95       	ror	r23
    7170:	67 95       	ror	r22
    7172:	2f 5f       	subi	r18, 0xFF	; 255
    7174:	31 97       	sbiw	r30, 0x01	; 1
    7176:	24 13       	cpse	r18, r20
    7178:	e7 cf       	rjmp	.-50     	; 0x7148 <reflect+0x2a>
    717a:	03 c0       	rjmp	.+6      	; 0x7182 <reflect+0x64>
    717c:	81 2c       	mov	r8, r1
    717e:	91 2c       	mov	r9, r1
    7180:	54 01       	movw	r10, r8
    7182:	c5 01       	movw	r24, r10
    7184:	b4 01       	movw	r22, r8
    7186:	df 91       	pop	r29
    7188:	cf 91       	pop	r28
    718a:	ff 90       	pop	r15
    718c:	ef 90       	pop	r14
    718e:	df 90       	pop	r13
    7190:	cf 90       	pop	r12
    7192:	bf 90       	pop	r11
    7194:	af 90       	pop	r10
    7196:	9f 90       	pop	r9
    7198:	8f 90       	pop	r8
    719a:	08 95       	ret

0000719c <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
    719c:	ea e2       	ldi	r30, 0x2A	; 42
    719e:	f1 e2       	ldi	r31, 0x21	; 33


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    71a0:	40 e0       	ldi	r20, 0x00	; 0
    71a2:	50 e0       	ldi	r21, 0x00	; 0
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
    71a4:	38 e0       	ldi	r19, 0x08	; 8
    71a6:	94 2f       	mov	r25, r20
    71a8:	88 27       	eor	r24, r24
    71aa:	23 2f       	mov	r18, r19
        for (bit = 8; bit > 0; --bit)
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
    71ac:	99 23       	and	r25, r25
    71ae:	34 f4       	brge	.+12     	; 0x71bc <crcInit+0x20>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
    71b0:	88 0f       	add	r24, r24
    71b2:	99 1f       	adc	r25, r25
    71b4:	65 e0       	ldi	r22, 0x05	; 5
    71b6:	86 27       	eor	r24, r22
    71b8:	90 58       	subi	r25, 0x80	; 128
    71ba:	02 c0       	rjmp	.+4      	; 0x71c0 <crcInit+0x24>
            }
            else
            {
                remainder = (remainder << 1);
    71bc:	88 0f       	add	r24, r24
    71be:	99 1f       	adc	r25, r25
    71c0:	21 50       	subi	r18, 0x01	; 1
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
    71c2:	a1 f7       	brne	.-24     	; 0x71ac <crcInit+0x10>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    71c4:	81 93       	st	Z+, r24
    71c6:	91 93       	st	Z+, r25


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    71c8:	4f 5f       	subi	r20, 0xFF	; 255
    71ca:	5f 4f       	sbci	r21, 0xFF	; 255
    71cc:	41 15       	cp	r20, r1
    71ce:	81 e0       	ldi	r24, 0x01	; 1
    71d0:	58 07       	cpc	r21, r24
    71d2:	49 f7       	brne	.-46     	; 0x71a6 <crcInit+0xa>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
    71d4:	08 95       	ret

000071d6 <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    71d6:	ef 92       	push	r14
    71d8:	ff 92       	push	r15
    71da:	0f 93       	push	r16
    71dc:	1f 93       	push	r17
    71de:	cf 93       	push	r28
    71e0:	df 93       	push	r29


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    71e2:	16 16       	cp	r1, r22
    71e4:	17 06       	cpc	r1, r23
    71e6:	fc f4       	brge	.+62     	; 0x7226 <crcFast+0x50>
    71e8:	7c 01       	movw	r14, r24
    71ea:	8c 01       	movw	r16, r24
    71ec:	06 0f       	add	r16, r22
    71ee:	17 1f       	adc	r17, r23
    71f0:	c0 e0       	ldi	r28, 0x00	; 0
    71f2:	d0 e0       	ldi	r29, 0x00	; 0
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
    71f4:	f7 01       	movw	r30, r14
    71f6:	61 91       	ld	r22, Z+
    71f8:	7f 01       	movw	r14, r30
    71fa:	70 e0       	ldi	r23, 0x00	; 0
    71fc:	80 e0       	ldi	r24, 0x00	; 0
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	48 e0       	ldi	r20, 0x08	; 8
    7202:	8d df       	rcall	.-230    	; 0x711e <reflect>
    7204:	6d 27       	eor	r22, r29
  		remainder = crcTable[data] ^ (remainder << 8);
    7206:	e6 2f       	mov	r30, r22
    7208:	f0 e0       	ldi	r31, 0x00	; 0
    720a:	ee 0f       	add	r30, r30
    720c:	ff 1f       	adc	r31, r31
    720e:	e6 5d       	subi	r30, 0xD6	; 214
    7210:	fe 4d       	sbci	r31, 0xDE	; 222
    7212:	80 81       	ld	r24, Z
    7214:	91 81       	ldd	r25, Z+1	; 0x01
    7216:	dc 2f       	mov	r29, r28
    7218:	cc 27       	eor	r28, r28
    721a:	c8 27       	eor	r28, r24
    721c:	d9 27       	eor	r29, r25


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    721e:	e0 16       	cp	r14, r16
    7220:	f1 06       	cpc	r15, r17
    7222:	41 f7       	brne	.-48     	; 0x71f4 <crcFast+0x1e>
    7224:	02 c0       	rjmp	.+4      	; 0x722a <crcFast+0x54>
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    crc	           remainder = INITIAL_REMAINDER;
    7226:	c0 e0       	ldi	r28, 0x00	; 0
    7228:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
    722a:	be 01       	movw	r22, r28
    722c:	80 e0       	ldi	r24, 0x00	; 0
    722e:	90 e0       	ldi	r25, 0x00	; 0
    7230:	40 e1       	ldi	r20, 0x10	; 16
    7232:	75 df       	rcall	.-278    	; 0x711e <reflect>

}   /* crcFast() */
    7234:	cb 01       	movw	r24, r22
    7236:	df 91       	pop	r29
    7238:	cf 91       	pop	r28
    723a:	1f 91       	pop	r17
    723c:	0f 91       	pop	r16
    723e:	ff 90       	pop	r15
    7240:	ef 90       	pop	r14
    7242:	08 95       	ret

00007244 <md5_process>:
 */
void md5_hmac_reset( md5_context *ctx )
{
    md5_starts( ctx );
    md5_update( ctx, ctx->ipad, 64 );
}
    7244:	2f 92       	push	r2
    7246:	3f 92       	push	r3
    7248:	4f 92       	push	r4
    724a:	5f 92       	push	r5
    724c:	6f 92       	push	r6
    724e:	7f 92       	push	r7
    7250:	8f 92       	push	r8
    7252:	9f 92       	push	r9
    7254:	af 92       	push	r10
    7256:	bf 92       	push	r11
    7258:	cf 92       	push	r12
    725a:	df 92       	push	r13
    725c:	ef 92       	push	r14
    725e:	ff 92       	push	r15
    7260:	0f 93       	push	r16
    7262:	1f 93       	push	r17
    7264:	cf 93       	push	r28
    7266:	df 93       	push	r29
    7268:	cd b7       	in	r28, 0x3d	; 61
    726a:	de b7       	in	r29, 0x3e	; 62
    726c:	c0 55       	subi	r28, 0x50	; 80
    726e:	d1 09       	sbc	r29, r1
    7270:	0f b6       	in	r0, 0x3f	; 63
    7272:	f8 94       	cli
    7274:	de bf       	out	0x3e, r29	; 62
    7276:	0f be       	out	0x3f, r0	; 63
    7278:	cd bf       	out	0x3d, r28	; 61
    727a:	1c 01       	movw	r2, r24
    727c:	fb 01       	movw	r30, r22
    727e:	21 81       	ldd	r18, Z+1	; 0x01
    7280:	82 81       	ldd	r24, Z+2	; 0x02
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	a0 e0       	ldi	r26, 0x00	; 0
    7286:	b0 e0       	ldi	r27, 0x00	; 0
    7288:	dc 01       	movw	r26, r24
    728a:	99 27       	eor	r25, r25
    728c:	88 27       	eor	r24, r24
    728e:	92 2b       	or	r25, r18
    7290:	20 81       	ld	r18, Z
    7292:	6c 01       	movw	r12, r24
    7294:	7d 01       	movw	r14, r26
    7296:	c2 2a       	or	r12, r18
    7298:	23 81       	ldd	r18, Z+3	; 0x03
    729a:	b7 01       	movw	r22, r14
    729c:	a6 01       	movw	r20, r12
    729e:	72 2b       	or	r23, r18
    72a0:	49 87       	std	Y+9, r20	; 0x09
    72a2:	5a 87       	std	Y+10, r21	; 0x0a
    72a4:	6b 87       	std	Y+11, r22	; 0x0b
    72a6:	7c 87       	std	Y+12, r23	; 0x0c
    72a8:	85 81       	ldd	r24, Z+5	; 0x05
    72aa:	86 80       	ldd	r8, Z+6	; 0x06
    72ac:	91 2c       	mov	r9, r1
    72ae:	a1 2c       	mov	r10, r1
    72b0:	b1 2c       	mov	r11, r1
    72b2:	54 01       	movw	r10, r8
    72b4:	99 24       	eor	r9, r9
    72b6:	88 24       	eor	r8, r8
    72b8:	98 2a       	or	r9, r24
    72ba:	84 81       	ldd	r24, Z+4	; 0x04
    72bc:	88 2a       	or	r8, r24
    72be:	87 81       	ldd	r24, Z+7	; 0x07
    72c0:	75 01       	movw	r14, r10
    72c2:	64 01       	movw	r12, r8
    72c4:	f8 2a       	or	r15, r24
    72c6:	cd 86       	std	Y+13, r12	; 0x0d
    72c8:	de 86       	std	Y+14, r13	; 0x0e
    72ca:	ef 86       	std	Y+15, r14	; 0x0f
    72cc:	f8 8a       	std	Y+16, r15	; 0x10
    72ce:	81 85       	ldd	r24, Z+9	; 0x09
    72d0:	82 84       	ldd	r8, Z+10	; 0x0a
    72d2:	91 2c       	mov	r9, r1
    72d4:	a1 2c       	mov	r10, r1
    72d6:	b1 2c       	mov	r11, r1
    72d8:	54 01       	movw	r10, r8
    72da:	99 24       	eor	r9, r9
    72dc:	88 24       	eor	r8, r8
    72de:	98 2a       	or	r9, r24
    72e0:	80 85       	ldd	r24, Z+8	; 0x08
    72e2:	88 2a       	or	r8, r24
    72e4:	83 85       	ldd	r24, Z+11	; 0x0b
    72e6:	85 01       	movw	r16, r10
    72e8:	74 01       	movw	r14, r8
    72ea:	18 2b       	or	r17, r24
    72ec:	e9 8a       	std	Y+17, r14	; 0x11
    72ee:	fa 8a       	std	Y+18, r15	; 0x12
    72f0:	0b 8b       	std	Y+19, r16	; 0x13
    72f2:	1c 8b       	std	Y+20, r17	; 0x14
    72f4:	85 85       	ldd	r24, Z+13	; 0x0d
    72f6:	06 85       	ldd	r16, Z+14	; 0x0e
    72f8:	10 e0       	ldi	r17, 0x00	; 0
    72fa:	20 e0       	ldi	r18, 0x00	; 0
    72fc:	30 e0       	ldi	r19, 0x00	; 0
    72fe:	98 01       	movw	r18, r16
    7300:	11 27       	eor	r17, r17
    7302:	00 27       	eor	r16, r16
    7304:	18 2b       	or	r17, r24
    7306:	84 85       	ldd	r24, Z+12	; 0x0c
    7308:	08 2b       	or	r16, r24
    730a:	87 85       	ldd	r24, Z+15	; 0x0f
    730c:	b9 01       	movw	r22, r18
    730e:	a8 01       	movw	r20, r16
    7310:	78 2b       	or	r23, r24
    7312:	4d 8b       	std	Y+21, r20	; 0x15
    7314:	5e 8b       	std	Y+22, r21	; 0x16
    7316:	6f 8b       	std	Y+23, r22	; 0x17
    7318:	78 8f       	std	Y+24, r23	; 0x18
    731a:	81 89       	ldd	r24, Z+17	; 0x11
    731c:	82 88       	ldd	r8, Z+18	; 0x12
    731e:	91 2c       	mov	r9, r1
    7320:	a1 2c       	mov	r10, r1
    7322:	b1 2c       	mov	r11, r1
    7324:	54 01       	movw	r10, r8
    7326:	99 24       	eor	r9, r9
    7328:	88 24       	eor	r8, r8
    732a:	98 2a       	or	r9, r24
    732c:	80 89       	ldd	r24, Z+16	; 0x10
    732e:	88 2a       	or	r8, r24
    7330:	83 89       	ldd	r24, Z+19	; 0x13
    7332:	75 01       	movw	r14, r10
    7334:	64 01       	movw	r12, r8
    7336:	f8 2a       	or	r15, r24
    7338:	c9 8e       	std	Y+25, r12	; 0x19
    733a:	da 8e       	std	Y+26, r13	; 0x1a
    733c:	eb 8e       	std	Y+27, r14	; 0x1b
    733e:	fc 8e       	std	Y+28, r15	; 0x1c
    7340:	85 89       	ldd	r24, Z+21	; 0x15
    7342:	06 89       	ldd	r16, Z+22	; 0x16
    7344:	10 e0       	ldi	r17, 0x00	; 0
    7346:	20 e0       	ldi	r18, 0x00	; 0
    7348:	30 e0       	ldi	r19, 0x00	; 0
    734a:	98 01       	movw	r18, r16
    734c:	11 27       	eor	r17, r17
    734e:	00 27       	eor	r16, r16
    7350:	18 2b       	or	r17, r24
    7352:	84 89       	ldd	r24, Z+20	; 0x14
    7354:	08 2b       	or	r16, r24
    7356:	87 89       	ldd	r24, Z+23	; 0x17
    7358:	b9 01       	movw	r22, r18
    735a:	a8 01       	movw	r20, r16
    735c:	78 2b       	or	r23, r24
    735e:	4d 8f       	std	Y+29, r20	; 0x1d
    7360:	5e 8f       	std	Y+30, r21	; 0x1e
    7362:	6f 8f       	std	Y+31, r22	; 0x1f
    7364:	78 a3       	std	Y+32, r23	; 0x20
    7366:	81 8d       	ldd	r24, Z+25	; 0x19
    7368:	82 8c       	ldd	r8, Z+26	; 0x1a
    736a:	91 2c       	mov	r9, r1
    736c:	a1 2c       	mov	r10, r1
    736e:	b1 2c       	mov	r11, r1
    7370:	54 01       	movw	r10, r8
    7372:	99 24       	eor	r9, r9
    7374:	88 24       	eor	r8, r8
    7376:	98 2a       	or	r9, r24
    7378:	80 8d       	ldd	r24, Z+24	; 0x18
    737a:	88 2a       	or	r8, r24
    737c:	83 8d       	ldd	r24, Z+27	; 0x1b
    737e:	75 01       	movw	r14, r10
    7380:	64 01       	movw	r12, r8
    7382:	f8 2a       	or	r15, r24
    7384:	c9 a2       	std	Y+33, r12	; 0x21
    7386:	da a2       	std	Y+34, r13	; 0x22
    7388:	eb a2       	std	Y+35, r14	; 0x23
    738a:	fc a2       	std	Y+36, r15	; 0x24
    738c:	85 8d       	ldd	r24, Z+29	; 0x1d
    738e:	06 8d       	ldd	r16, Z+30	; 0x1e
    7390:	10 e0       	ldi	r17, 0x00	; 0
    7392:	20 e0       	ldi	r18, 0x00	; 0
    7394:	30 e0       	ldi	r19, 0x00	; 0
    7396:	98 01       	movw	r18, r16
    7398:	11 27       	eor	r17, r17
    739a:	00 27       	eor	r16, r16
    739c:	18 2b       	or	r17, r24
    739e:	84 8d       	ldd	r24, Z+28	; 0x1c
    73a0:	08 2b       	or	r16, r24
    73a2:	87 8d       	ldd	r24, Z+31	; 0x1f
    73a4:	b9 01       	movw	r22, r18
    73a6:	a8 01       	movw	r20, r16
    73a8:	78 2b       	or	r23, r24
    73aa:	4d a3       	std	Y+37, r20	; 0x25
    73ac:	5e a3       	std	Y+38, r21	; 0x26
    73ae:	6f a3       	std	Y+39, r22	; 0x27
    73b0:	78 a7       	std	Y+40, r23	; 0x28
    73b2:	81 a1       	ldd	r24, Z+33	; 0x21
    73b4:	82 a0       	ldd	r8, Z+34	; 0x22
    73b6:	91 2c       	mov	r9, r1
    73b8:	a1 2c       	mov	r10, r1
    73ba:	b1 2c       	mov	r11, r1
    73bc:	54 01       	movw	r10, r8
    73be:	99 24       	eor	r9, r9
    73c0:	88 24       	eor	r8, r8
    73c2:	98 2a       	or	r9, r24
    73c4:	80 a1       	ldd	r24, Z+32	; 0x20
    73c6:	88 2a       	or	r8, r24
    73c8:	83 a1       	ldd	r24, Z+35	; 0x23
    73ca:	75 01       	movw	r14, r10
    73cc:	64 01       	movw	r12, r8
    73ce:	f8 2a       	or	r15, r24
    73d0:	c9 a6       	std	Y+41, r12	; 0x29
    73d2:	da a6       	std	Y+42, r13	; 0x2a
    73d4:	eb a6       	std	Y+43, r14	; 0x2b
    73d6:	fc a6       	std	Y+44, r15	; 0x2c
    73d8:	85 a1       	ldd	r24, Z+37	; 0x25
    73da:	c6 a0       	ldd	r12, Z+38	; 0x26
    73dc:	d1 2c       	mov	r13, r1
    73de:	e1 2c       	mov	r14, r1
    73e0:	f1 2c       	mov	r15, r1
    73e2:	76 01       	movw	r14, r12
    73e4:	dd 24       	eor	r13, r13
    73e6:	cc 24       	eor	r12, r12
    73e8:	d8 2a       	or	r13, r24
    73ea:	84 a1       	ldd	r24, Z+36	; 0x24
    73ec:	c8 2a       	or	r12, r24
    73ee:	87 a1       	ldd	r24, Z+39	; 0x27
    73f0:	97 01       	movw	r18, r14
    73f2:	86 01       	movw	r16, r12
    73f4:	38 2b       	or	r19, r24
    73f6:	0d a7       	std	Y+45, r16	; 0x2d
    73f8:	1e a7       	std	Y+46, r17	; 0x2e
    73fa:	2f a7       	std	Y+47, r18	; 0x2f
    73fc:	38 ab       	std	Y+48, r19	; 0x30
    73fe:	81 a5       	ldd	r24, Z+41	; 0x29
    7400:	02 a5       	ldd	r16, Z+42	; 0x2a
    7402:	10 e0       	ldi	r17, 0x00	; 0
    7404:	20 e0       	ldi	r18, 0x00	; 0
    7406:	30 e0       	ldi	r19, 0x00	; 0
    7408:	98 01       	movw	r18, r16
    740a:	11 27       	eor	r17, r17
    740c:	00 27       	eor	r16, r16
    740e:	18 2b       	or	r17, r24
    7410:	80 a5       	ldd	r24, Z+40	; 0x28
    7412:	08 2b       	or	r16, r24
    7414:	83 a5       	ldd	r24, Z+43	; 0x2b
    7416:	b9 01       	movw	r22, r18
    7418:	a8 01       	movw	r20, r16
    741a:	78 2b       	or	r23, r24
    741c:	49 ab       	std	Y+49, r20	; 0x31
    741e:	5a ab       	std	Y+50, r21	; 0x32
    7420:	6b ab       	std	Y+51, r22	; 0x33
    7422:	7c ab       	std	Y+52, r23	; 0x34
    7424:	85 a5       	ldd	r24, Z+45	; 0x2d
    7426:	46 a5       	ldd	r20, Z+46	; 0x2e
    7428:	50 e0       	ldi	r21, 0x00	; 0
    742a:	60 e0       	ldi	r22, 0x00	; 0
    742c:	70 e0       	ldi	r23, 0x00	; 0
    742e:	ba 01       	movw	r22, r20
    7430:	55 27       	eor	r21, r21
    7432:	44 27       	eor	r20, r20
    7434:	58 2b       	or	r21, r24
    7436:	84 a5       	ldd	r24, Z+44	; 0x2c
    7438:	48 2b       	or	r20, r24
    743a:	87 a5       	ldd	r24, Z+47	; 0x2f
    743c:	6a 01       	movw	r12, r20
    743e:	7b 01       	movw	r14, r22
    7440:	f8 2a       	or	r15, r24
    7442:	cd aa       	std	Y+53, r12	; 0x35
    7444:	de aa       	std	Y+54, r13	; 0x36
    7446:	ef aa       	std	Y+55, r14	; 0x37
    7448:	f8 ae       	std	Y+56, r15	; 0x38
    744a:	81 a9       	ldd	r24, Z+49	; 0x31
    744c:	02 a9       	ldd	r16, Z+50	; 0x32
    744e:	10 e0       	ldi	r17, 0x00	; 0
    7450:	20 e0       	ldi	r18, 0x00	; 0
    7452:	30 e0       	ldi	r19, 0x00	; 0
    7454:	98 01       	movw	r18, r16
    7456:	11 27       	eor	r17, r17
    7458:	00 27       	eor	r16, r16
    745a:	18 2b       	or	r17, r24
    745c:	80 a9       	ldd	r24, Z+48	; 0x30
    745e:	08 2b       	or	r16, r24
    7460:	83 a9       	ldd	r24, Z+51	; 0x33
    7462:	b9 01       	movw	r22, r18
    7464:	a8 01       	movw	r20, r16
    7466:	78 2b       	or	r23, r24
    7468:	49 af       	std	Y+57, r20	; 0x39
    746a:	5a af       	std	Y+58, r21	; 0x3a
    746c:	6b af       	std	Y+59, r22	; 0x3b
    746e:	7c af       	std	Y+60, r23	; 0x3c
    7470:	85 a9       	ldd	r24, Z+53	; 0x35
    7472:	86 a8       	ldd	r8, Z+54	; 0x36
    7474:	91 2c       	mov	r9, r1
    7476:	a1 2c       	mov	r10, r1
    7478:	b1 2c       	mov	r11, r1
    747a:	54 01       	movw	r10, r8
    747c:	99 24       	eor	r9, r9
    747e:	88 24       	eor	r8, r8
    7480:	98 2a       	or	r9, r24
    7482:	84 a9       	ldd	r24, Z+52	; 0x34
    7484:	88 2a       	or	r8, r24
    7486:	87 a9       	ldd	r24, Z+55	; 0x37
    7488:	75 01       	movw	r14, r10
    748a:	64 01       	movw	r12, r8
    748c:	f8 2a       	or	r15, r24
    748e:	21 96       	adiw	r28, 0x01	; 1
    7490:	cc ae       	std	Y+60, r12	; 0x3c
    7492:	dd ae       	std	Y+61, r13	; 0x3d
    7494:	ee ae       	std	Y+62, r14	; 0x3e
    7496:	ff ae       	std	Y+63, r15	; 0x3f
    7498:	21 97       	sbiw	r28, 0x01	; 1
    749a:	81 ad       	ldd	r24, Z+57	; 0x39
    749c:	02 ad       	ldd	r16, Z+58	; 0x3a
    749e:	10 e0       	ldi	r17, 0x00	; 0
    74a0:	20 e0       	ldi	r18, 0x00	; 0
    74a2:	30 e0       	ldi	r19, 0x00	; 0
    74a4:	98 01       	movw	r18, r16
    74a6:	11 27       	eor	r17, r17
    74a8:	00 27       	eor	r16, r16
    74aa:	18 2b       	or	r17, r24
    74ac:	80 ad       	ldd	r24, Z+56	; 0x38
    74ae:	08 2b       	or	r16, r24
    74b0:	83 ad       	ldd	r24, Z+59	; 0x3b
    74b2:	b9 01       	movw	r22, r18
    74b4:	a8 01       	movw	r20, r16
    74b6:	78 2b       	or	r23, r24
    74b8:	25 96       	adiw	r28, 0x05	; 5
    74ba:	4c af       	std	Y+60, r20	; 0x3c
    74bc:	5d af       	std	Y+61, r21	; 0x3d
    74be:	6e af       	std	Y+62, r22	; 0x3e
    74c0:	7f af       	std	Y+63, r23	; 0x3f
    74c2:	25 97       	sbiw	r28, 0x05	; 5
    74c4:	85 ad       	ldd	r24, Z+61	; 0x3d
    74c6:	46 ad       	ldd	r20, Z+62	; 0x3e
    74c8:	50 e0       	ldi	r21, 0x00	; 0
    74ca:	60 e0       	ldi	r22, 0x00	; 0
    74cc:	70 e0       	ldi	r23, 0x00	; 0
    74ce:	ba 01       	movw	r22, r20
    74d0:	55 27       	eor	r21, r21
    74d2:	44 27       	eor	r20, r20
    74d4:	58 2b       	or	r21, r24
    74d6:	84 ad       	ldd	r24, Z+60	; 0x3c
    74d8:	48 2b       	or	r20, r24
    74da:	87 ad       	ldd	r24, Z+63	; 0x3f
    74dc:	6a 01       	movw	r12, r20
    74de:	7b 01       	movw	r14, r22
    74e0:	f8 2a       	or	r15, r24
    74e2:	29 96       	adiw	r28, 0x09	; 9
    74e4:	cc ae       	std	Y+60, r12	; 0x3c
    74e6:	dd ae       	std	Y+61, r13	; 0x3d
    74e8:	ee ae       	std	Y+62, r14	; 0x3e
    74ea:	ff ae       	std	Y+63, r15	; 0x3f
    74ec:	29 97       	sbiw	r28, 0x09	; 9
    74ee:	d1 01       	movw	r26, r2
    74f0:	18 96       	adiw	r26, 0x08	; 8
    74f2:	ed 90       	ld	r14, X+
    74f4:	fd 90       	ld	r15, X+
    74f6:	0d 91       	ld	r16, X+
    74f8:	1c 91       	ld	r17, X
    74fa:	1b 97       	sbiw	r26, 0x0b	; 11
    74fc:	61 96       	adiw	r28, 0x11	; 17
    74fe:	ec ae       	std	Y+60, r14	; 0x3c
    7500:	fd ae       	std	Y+61, r15	; 0x3d
    7502:	0e af       	std	Y+62, r16	; 0x3e
    7504:	1f af       	std	Y+63, r17	; 0x3f
    7506:	61 97       	sbiw	r28, 0x11	; 17
    7508:	1c 96       	adiw	r26, 0x0c	; 12
    750a:	cd 90       	ld	r12, X+
    750c:	dd 90       	ld	r13, X+
    750e:	ed 90       	ld	r14, X+
    7510:	fc 90       	ld	r15, X
    7512:	1f 97       	sbiw	r26, 0x0f	; 15
    7514:	c9 82       	std	Y+1, r12	; 0x01
    7516:	da 82       	std	Y+2, r13	; 0x02
    7518:	eb 82       	std	Y+3, r14	; 0x03
    751a:	fc 82       	std	Y+4, r15	; 0x04
    751c:	50 96       	adiw	r26, 0x10	; 16
    751e:	cd 90       	ld	r12, X+
    7520:	dd 90       	ld	r13, X+
    7522:	ed 90       	ld	r14, X+
    7524:	fc 90       	ld	r15, X
    7526:	53 97       	sbiw	r26, 0x13	; 19
    7528:	cd 82       	std	Y+5, r12	; 0x05
    752a:	de 82       	std	Y+6, r13	; 0x06
    752c:	ef 82       	std	Y+7, r14	; 0x07
    752e:	f8 86       	std	Y+8, r15	; 0x08
    7530:	54 96       	adiw	r26, 0x14	; 20
    7532:	cd 90       	ld	r12, X+
    7534:	dd 90       	ld	r13, X+
    7536:	ed 90       	ld	r14, X+
    7538:	fc 90       	ld	r15, X
    753a:	57 97       	sbiw	r26, 0x17	; 23
    753c:	2d 96       	adiw	r28, 0x0d	; 13
    753e:	cc ae       	std	Y+60, r12	; 0x3c
    7540:	dd ae       	std	Y+61, r13	; 0x3d
    7542:	ee ae       	std	Y+62, r14	; 0x3e
    7544:	ff ae       	std	Y+63, r15	; 0x3f
    7546:	2d 97       	sbiw	r28, 0x0d	; 13
    7548:	61 96       	adiw	r28, 0x11	; 17
    754a:	4c ad       	ldd	r20, Y+60	; 0x3c
    754c:	5d ad       	ldd	r21, Y+61	; 0x3d
    754e:	6e ad       	ldd	r22, Y+62	; 0x3e
    7550:	7f ad       	ldd	r23, Y+63	; 0x3f
    7552:	61 97       	sbiw	r28, 0x11	; 17
    7554:	48 58       	subi	r20, 0x88	; 136
    7556:	5b 45       	sbci	r21, 0x5B	; 91
    7558:	65 49       	sbci	r22, 0x95	; 149
    755a:	78 42       	sbci	r23, 0x28	; 40
    755c:	d7 01       	movw	r26, r14
    755e:	c6 01       	movw	r24, r12
    7560:	cd 80       	ldd	r12, Y+5	; 0x05
    7562:	de 80       	ldd	r13, Y+6	; 0x06
    7564:	ef 80       	ldd	r14, Y+7	; 0x07
    7566:	f8 84       	ldd	r15, Y+8	; 0x08
    7568:	8c 25       	eor	r24, r12
    756a:	9d 25       	eor	r25, r13
    756c:	ae 25       	eor	r26, r14
    756e:	bf 25       	eor	r27, r15
    7570:	e9 80       	ldd	r14, Y+1	; 0x01
    7572:	fa 80       	ldd	r15, Y+2	; 0x02
    7574:	0b 81       	ldd	r16, Y+3	; 0x03
    7576:	1c 81       	ldd	r17, Y+4	; 0x04
    7578:	8e 21       	and	r24, r14
    757a:	9f 21       	and	r25, r15
    757c:	a0 23       	and	r26, r16
    757e:	b1 23       	and	r27, r17
    7580:	2d 96       	adiw	r28, 0x0d	; 13
    7582:	0c ad       	ldd	r16, Y+60	; 0x3c
    7584:	1d ad       	ldd	r17, Y+61	; 0x3d
    7586:	2e ad       	ldd	r18, Y+62	; 0x3e
    7588:	3f ad       	ldd	r19, Y+63	; 0x3f
    758a:	2d 97       	sbiw	r28, 0x0d	; 13
    758c:	80 27       	eor	r24, r16
    758e:	91 27       	eor	r25, r17
    7590:	a2 27       	eor	r26, r18
    7592:	b3 27       	eor	r27, r19
    7594:	84 0f       	add	r24, r20
    7596:	95 1f       	adc	r25, r21
    7598:	a6 1f       	adc	r26, r22
    759a:	b7 1f       	adc	r27, r23
    759c:	29 85       	ldd	r18, Y+9	; 0x09
    759e:	3a 85       	ldd	r19, Y+10	; 0x0a
    75a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    75a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    75a4:	82 0f       	add	r24, r18
    75a6:	93 1f       	adc	r25, r19
    75a8:	a4 1f       	adc	r26, r20
    75aa:	b5 1f       	adc	r27, r21
    75ac:	8c 01       	movw	r16, r24
    75ae:	9d 01       	movw	r18, r26
    75b0:	00 0f       	add	r16, r16
    75b2:	11 1f       	adc	r17, r17
    75b4:	22 1f       	adc	r18, r18
    75b6:	33 1f       	adc	r19, r19
    75b8:	00 0f       	add	r16, r16
    75ba:	11 1f       	adc	r17, r17
    75bc:	22 1f       	adc	r18, r18
    75be:	33 1f       	adc	r19, r19
    75c0:	00 0f       	add	r16, r16
    75c2:	11 1f       	adc	r17, r17
    75c4:	22 1f       	adc	r18, r18
    75c6:	33 1f       	adc	r19, r19
    75c8:	00 0f       	add	r16, r16
    75ca:	11 1f       	adc	r17, r17
    75cc:	22 1f       	adc	r18, r18
    75ce:	33 1f       	adc	r19, r19
    75d0:	00 0f       	add	r16, r16
    75d2:	11 1f       	adc	r17, r17
    75d4:	22 1f       	adc	r18, r18
    75d6:	33 1f       	adc	r19, r19
    75d8:	00 0f       	add	r16, r16
    75da:	11 1f       	adc	r17, r17
    75dc:	22 1f       	adc	r18, r18
    75de:	33 1f       	adc	r19, r19
    75e0:	00 0f       	add	r16, r16
    75e2:	11 1f       	adc	r17, r17
    75e4:	22 1f       	adc	r18, r18
    75e6:	33 1f       	adc	r19, r19
    75e8:	07 2e       	mov	r0, r23
    75ea:	79 e1       	ldi	r23, 0x19	; 25
    75ec:	b6 95       	lsr	r27
    75ee:	a7 95       	ror	r26
    75f0:	97 95       	ror	r25
    75f2:	87 95       	ror	r24
    75f4:	7a 95       	dec	r23
    75f6:	d1 f7       	brne	.-12     	; 0x75ec <md5_process+0x3a8>
    75f8:	70 2d       	mov	r23, r0
    75fa:	80 2b       	or	r24, r16
    75fc:	91 2b       	or	r25, r17
    75fe:	a2 2b       	or	r26, r18
    7600:	b3 2b       	or	r27, r19
    7602:	49 81       	ldd	r20, Y+1	; 0x01
    7604:	5a 81       	ldd	r21, Y+2	; 0x02
    7606:	6b 81       	ldd	r22, Y+3	; 0x03
    7608:	7c 81       	ldd	r23, Y+4	; 0x04
    760a:	84 0f       	add	r24, r20
    760c:	95 1f       	adc	r25, r21
    760e:	a6 1f       	adc	r26, r22
    7610:	b7 1f       	adc	r27, r23
    7612:	2d 96       	adiw	r28, 0x0d	; 13
    7614:	0c ad       	ldd	r16, Y+60	; 0x3c
    7616:	1d ad       	ldd	r17, Y+61	; 0x3d
    7618:	2e ad       	ldd	r18, Y+62	; 0x3e
    761a:	3f ad       	ldd	r19, Y+63	; 0x3f
    761c:	2d 97       	sbiw	r28, 0x0d	; 13
    761e:	0a 5a       	subi	r16, 0xAA	; 170
    7620:	18 44       	sbci	r17, 0x48	; 72
    7622:	28 43       	sbci	r18, 0x38	; 56
    7624:	37 41       	sbci	r19, 0x17	; 23
    7626:	4d 85       	ldd	r20, Y+13	; 0x0d
    7628:	5e 85       	ldd	r21, Y+14	; 0x0e
    762a:	6f 85       	ldd	r22, Y+15	; 0x0f
    762c:	78 89       	ldd	r23, Y+16	; 0x10
    762e:	40 0f       	add	r20, r16
    7630:	51 1f       	adc	r21, r17
    7632:	62 1f       	adc	r22, r18
    7634:	73 1f       	adc	r23, r19
    7636:	0d 81       	ldd	r16, Y+5	; 0x05
    7638:	1e 81       	ldd	r17, Y+6	; 0x06
    763a:	2f 81       	ldd	r18, Y+7	; 0x07
    763c:	38 85       	ldd	r19, Y+8	; 0x08
    763e:	c9 80       	ldd	r12, Y+1	; 0x01
    7640:	da 80       	ldd	r13, Y+2	; 0x02
    7642:	eb 80       	ldd	r14, Y+3	; 0x03
    7644:	fc 80       	ldd	r15, Y+4	; 0x04
    7646:	0c 25       	eor	r16, r12
    7648:	1d 25       	eor	r17, r13
    764a:	2e 25       	eor	r18, r14
    764c:	3f 25       	eor	r19, r15
    764e:	08 23       	and	r16, r24
    7650:	19 23       	and	r17, r25
    7652:	2a 23       	and	r18, r26
    7654:	3b 23       	and	r19, r27
    7656:	cd 80       	ldd	r12, Y+5	; 0x05
    7658:	de 80       	ldd	r13, Y+6	; 0x06
    765a:	ef 80       	ldd	r14, Y+7	; 0x07
    765c:	f8 84       	ldd	r15, Y+8	; 0x08
    765e:	0c 25       	eor	r16, r12
    7660:	1d 25       	eor	r17, r13
    7662:	2e 25       	eor	r18, r14
    7664:	3f 25       	eor	r19, r15
    7666:	04 0f       	add	r16, r20
    7668:	15 1f       	adc	r17, r21
    766a:	26 1f       	adc	r18, r22
    766c:	37 1f       	adc	r19, r23
    766e:	b9 01       	movw	r22, r18
    7670:	a8 01       	movw	r20, r16
    7672:	03 2e       	mov	r0, r19
    7674:	3c e0       	ldi	r19, 0x0C	; 12
    7676:	44 0f       	add	r20, r20
    7678:	55 1f       	adc	r21, r21
    767a:	66 1f       	adc	r22, r22
    767c:	77 1f       	adc	r23, r23
    767e:	3a 95       	dec	r19
    7680:	d1 f7       	brne	.-12     	; 0x7676 <md5_process+0x432>
    7682:	30 2d       	mov	r19, r0
    7684:	0f 2e       	mov	r0, r31
    7686:	f4 e1       	ldi	r31, 0x14	; 20
    7688:	36 95       	lsr	r19
    768a:	27 95       	ror	r18
    768c:	17 95       	ror	r17
    768e:	07 95       	ror	r16
    7690:	fa 95       	dec	r31
    7692:	d1 f7       	brne	.-12     	; 0x7688 <md5_process+0x444>
    7694:	f0 2d       	mov	r31, r0
    7696:	04 2b       	or	r16, r20
    7698:	15 2b       	or	r17, r21
    769a:	26 2b       	or	r18, r22
    769c:	37 2b       	or	r19, r23
    769e:	08 0f       	add	r16, r24
    76a0:	19 1f       	adc	r17, r25
    76a2:	2a 1f       	adc	r18, r26
    76a4:	3b 1f       	adc	r19, r27
    76a6:	46 01       	movw	r8, r12
    76a8:	57 01       	movw	r10, r14
    76aa:	45 e2       	ldi	r20, 0x25	; 37
    76ac:	84 1a       	sub	r8, r20
    76ae:	4f e8       	ldi	r20, 0x8F	; 143
    76b0:	94 0a       	sbc	r9, r20
    76b2:	4f ed       	ldi	r20, 0xDF	; 223
    76b4:	a4 0a       	sbc	r10, r20
    76b6:	4b ed       	ldi	r20, 0xDB	; 219
    76b8:	b4 0a       	sbc	r11, r20
    76ba:	49 89       	ldd	r20, Y+17	; 0x11
    76bc:	5a 89       	ldd	r21, Y+18	; 0x12
    76be:	6b 89       	ldd	r22, Y+19	; 0x13
    76c0:	7c 89       	ldd	r23, Y+20	; 0x14
    76c2:	48 0d       	add	r20, r8
    76c4:	59 1d       	adc	r21, r9
    76c6:	6a 1d       	adc	r22, r10
    76c8:	7b 1d       	adc	r23, r11
    76ca:	89 80       	ldd	r8, Y+1	; 0x01
    76cc:	9a 80       	ldd	r9, Y+2	; 0x02
    76ce:	ab 80       	ldd	r10, Y+3	; 0x03
    76d0:	bc 80       	ldd	r11, Y+4	; 0x04
    76d2:	88 26       	eor	r8, r24
    76d4:	99 26       	eor	r9, r25
    76d6:	aa 26       	eor	r10, r26
    76d8:	bb 26       	eor	r11, r27
    76da:	80 22       	and	r8, r16
    76dc:	91 22       	and	r9, r17
    76de:	a2 22       	and	r10, r18
    76e0:	b3 22       	and	r11, r19
    76e2:	c9 80       	ldd	r12, Y+1	; 0x01
    76e4:	da 80       	ldd	r13, Y+2	; 0x02
    76e6:	eb 80       	ldd	r14, Y+3	; 0x03
    76e8:	fc 80       	ldd	r15, Y+4	; 0x04
    76ea:	8c 24       	eor	r8, r12
    76ec:	9d 24       	eor	r9, r13
    76ee:	ae 24       	eor	r10, r14
    76f0:	bf 24       	eor	r11, r15
    76f2:	84 0e       	add	r8, r20
    76f4:	95 1e       	adc	r9, r21
    76f6:	a6 1e       	adc	r10, r22
    76f8:	b7 1e       	adc	r11, r23
    76fa:	b5 01       	movw	r22, r10
    76fc:	a4 01       	movw	r20, r8
    76fe:	03 2e       	mov	r0, r19
    7700:	3f e0       	ldi	r19, 0x0F	; 15
    7702:	76 95       	lsr	r23
    7704:	67 95       	ror	r22
    7706:	57 95       	ror	r21
    7708:	47 95       	ror	r20
    770a:	3a 95       	dec	r19
    770c:	d1 f7       	brne	.-12     	; 0x7702 <md5_process+0x4be>
    770e:	30 2d       	mov	r19, r0
    7710:	07 2e       	mov	r0, r23
    7712:	71 e1       	ldi	r23, 0x11	; 17
    7714:	88 0c       	add	r8, r8
    7716:	99 1c       	adc	r9, r9
    7718:	aa 1c       	adc	r10, r10
    771a:	bb 1c       	adc	r11, r11
    771c:	7a 95       	dec	r23
    771e:	d1 f7       	brne	.-12     	; 0x7714 <md5_process+0x4d0>
    7720:	70 2d       	mov	r23, r0
    7722:	84 2a       	or	r8, r20
    7724:	95 2a       	or	r9, r21
    7726:	a6 2a       	or	r10, r22
    7728:	b7 2a       	or	r11, r23
    772a:	80 0e       	add	r8, r16
    772c:	91 1e       	adc	r9, r17
    772e:	a2 1e       	adc	r10, r18
    7730:	b3 1e       	adc	r11, r19
    7732:	42 e1       	ldi	r20, 0x12	; 18
    7734:	c4 1a       	sub	r12, r20
    7736:	41 e3       	ldi	r20, 0x31	; 49
    7738:	d4 0a       	sbc	r13, r20
    773a:	42 e4       	ldi	r20, 0x42	; 66
    773c:	e4 0a       	sbc	r14, r20
    773e:	4e e3       	ldi	r20, 0x3E	; 62
    7740:	f4 0a       	sbc	r15, r20
    7742:	4d 89       	ldd	r20, Y+21	; 0x15
    7744:	5e 89       	ldd	r21, Y+22	; 0x16
    7746:	6f 89       	ldd	r22, Y+23	; 0x17
    7748:	78 8d       	ldd	r23, Y+24	; 0x18
    774a:	4c 0d       	add	r20, r12
    774c:	5d 1d       	adc	r21, r13
    774e:	6e 1d       	adc	r22, r14
    7750:	7f 1d       	adc	r23, r15
    7752:	68 01       	movw	r12, r16
    7754:	79 01       	movw	r14, r18
    7756:	c8 26       	eor	r12, r24
    7758:	d9 26       	eor	r13, r25
    775a:	ea 26       	eor	r14, r26
    775c:	fb 26       	eor	r15, r27
    775e:	c8 20       	and	r12, r8
    7760:	d9 20       	and	r13, r9
    7762:	ea 20       	and	r14, r10
    7764:	fb 20       	and	r15, r11
    7766:	c8 26       	eor	r12, r24
    7768:	d9 26       	eor	r13, r25
    776a:	ea 26       	eor	r14, r26
    776c:	fb 26       	eor	r15, r27
    776e:	c4 0e       	add	r12, r20
    7770:	d5 1e       	adc	r13, r21
    7772:	e6 1e       	adc	r14, r22
    7774:	f7 1e       	adc	r15, r23
    7776:	b7 01       	movw	r22, r14
    7778:	a6 01       	movw	r20, r12
    777a:	03 2e       	mov	r0, r19
    777c:	3a e0       	ldi	r19, 0x0A	; 10
    777e:	76 95       	lsr	r23
    7780:	67 95       	ror	r22
    7782:	57 95       	ror	r21
    7784:	47 95       	ror	r20
    7786:	3a 95       	dec	r19
    7788:	d1 f7       	brne	.-12     	; 0x777e <md5_process+0x53a>
    778a:	30 2d       	mov	r19, r0
    778c:	0b 2e       	mov	r0, r27
    778e:	b6 e1       	ldi	r27, 0x16	; 22
    7790:	cc 0c       	add	r12, r12
    7792:	dd 1c       	adc	r13, r13
    7794:	ee 1c       	adc	r14, r14
    7796:	ff 1c       	adc	r15, r15
    7798:	ba 95       	dec	r27
    779a:	d1 f7       	brne	.-12     	; 0x7790 <md5_process+0x54c>
    779c:	b0 2d       	mov	r27, r0
    779e:	c4 2a       	or	r12, r20
    77a0:	d5 2a       	or	r13, r21
    77a2:	e6 2a       	or	r14, r22
    77a4:	f7 2a       	or	r15, r23
    77a6:	c8 0c       	add	r12, r8
    77a8:	d9 1c       	adc	r13, r9
    77aa:	ea 1c       	adc	r14, r10
    77ac:	fb 1c       	adc	r15, r11
    77ae:	49 8d       	ldd	r20, Y+25	; 0x19
    77b0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    77b2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    77b4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    77b6:	41 55       	subi	r20, 0x51	; 81
    77b8:	50 4f       	sbci	r21, 0xF0	; 240
    77ba:	63 48       	sbci	r22, 0x83	; 131
    77bc:	7a 40       	sbci	r23, 0x0A	; 10
    77be:	84 0f       	add	r24, r20
    77c0:	95 1f       	adc	r25, r21
    77c2:	a6 1f       	adc	r26, r22
    77c4:	b7 1f       	adc	r27, r23
    77c6:	b5 01       	movw	r22, r10
    77c8:	a4 01       	movw	r20, r8
    77ca:	40 27       	eor	r20, r16
    77cc:	51 27       	eor	r21, r17
    77ce:	62 27       	eor	r22, r18
    77d0:	73 27       	eor	r23, r19
    77d2:	4c 21       	and	r20, r12
    77d4:	5d 21       	and	r21, r13
    77d6:	6e 21       	and	r22, r14
    77d8:	7f 21       	and	r23, r15
    77da:	40 27       	eor	r20, r16
    77dc:	51 27       	eor	r21, r17
    77de:	62 27       	eor	r22, r18
    77e0:	73 27       	eor	r23, r19
    77e2:	84 0f       	add	r24, r20
    77e4:	95 1f       	adc	r25, r21
    77e6:	a6 1f       	adc	r26, r22
    77e8:	b7 1f       	adc	r27, r23
    77ea:	2c 01       	movw	r4, r24
    77ec:	3d 01       	movw	r6, r26
    77ee:	44 0c       	add	r4, r4
    77f0:	55 1c       	adc	r5, r5
    77f2:	66 1c       	adc	r6, r6
    77f4:	77 1c       	adc	r7, r7
    77f6:	44 0c       	add	r4, r4
    77f8:	55 1c       	adc	r5, r5
    77fa:	66 1c       	adc	r6, r6
    77fc:	77 1c       	adc	r7, r7
    77fe:	44 0c       	add	r4, r4
    7800:	55 1c       	adc	r5, r5
    7802:	66 1c       	adc	r6, r6
    7804:	77 1c       	adc	r7, r7
    7806:	44 0c       	add	r4, r4
    7808:	55 1c       	adc	r5, r5
    780a:	66 1c       	adc	r6, r6
    780c:	77 1c       	adc	r7, r7
    780e:	44 0c       	add	r4, r4
    7810:	55 1c       	adc	r5, r5
    7812:	66 1c       	adc	r6, r6
    7814:	77 1c       	adc	r7, r7
    7816:	44 0c       	add	r4, r4
    7818:	55 1c       	adc	r5, r5
    781a:	66 1c       	adc	r6, r6
    781c:	77 1c       	adc	r7, r7
    781e:	44 0c       	add	r4, r4
    7820:	55 1c       	adc	r5, r5
    7822:	66 1c       	adc	r6, r6
    7824:	77 1c       	adc	r7, r7
    7826:	07 2e       	mov	r0, r23
    7828:	79 e1       	ldi	r23, 0x19	; 25
    782a:	b6 95       	lsr	r27
    782c:	a7 95       	ror	r26
    782e:	97 95       	ror	r25
    7830:	87 95       	ror	r24
    7832:	7a 95       	dec	r23
    7834:	d1 f7       	brne	.-12     	; 0x782a <md5_process+0x5e6>
    7836:	70 2d       	mov	r23, r0
    7838:	84 29       	or	r24, r4
    783a:	95 29       	or	r25, r5
    783c:	a6 29       	or	r26, r6
    783e:	b7 29       	or	r27, r7
    7840:	8c 0d       	add	r24, r12
    7842:	9d 1d       	adc	r25, r13
    7844:	ae 1d       	adc	r26, r14
    7846:	bf 1d       	adc	r27, r15
    7848:	4d 8d       	ldd	r20, Y+29	; 0x1d
    784a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    784c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    784e:	78 a1       	ldd	r23, Y+32	; 0x20
    7850:	46 5d       	subi	r20, 0xD6	; 214
    7852:	59 43       	sbci	r21, 0x39	; 57
    7854:	68 47       	sbci	r22, 0x78	; 120
    7856:	78 4b       	sbci	r23, 0xB8	; 184
    7858:	04 0f       	add	r16, r20
    785a:	15 1f       	adc	r17, r21
    785c:	26 1f       	adc	r18, r22
    785e:	37 1f       	adc	r19, r23
    7860:	b7 01       	movw	r22, r14
    7862:	a6 01       	movw	r20, r12
    7864:	48 25       	eor	r20, r8
    7866:	59 25       	eor	r21, r9
    7868:	6a 25       	eor	r22, r10
    786a:	7b 25       	eor	r23, r11
    786c:	48 23       	and	r20, r24
    786e:	59 23       	and	r21, r25
    7870:	6a 23       	and	r22, r26
    7872:	7b 23       	and	r23, r27
    7874:	48 25       	eor	r20, r8
    7876:	59 25       	eor	r21, r9
    7878:	6a 25       	eor	r22, r10
    787a:	7b 25       	eor	r23, r11
    787c:	04 0f       	add	r16, r20
    787e:	15 1f       	adc	r17, r21
    7880:	26 1f       	adc	r18, r22
    7882:	37 1f       	adc	r19, r23
    7884:	b9 01       	movw	r22, r18
    7886:	a8 01       	movw	r20, r16
    7888:	03 2e       	mov	r0, r19
    788a:	3c e0       	ldi	r19, 0x0C	; 12
    788c:	44 0f       	add	r20, r20
    788e:	55 1f       	adc	r21, r21
    7890:	66 1f       	adc	r22, r22
    7892:	77 1f       	adc	r23, r23
    7894:	3a 95       	dec	r19
    7896:	d1 f7       	brne	.-12     	; 0x788c <md5_process+0x648>
    7898:	30 2d       	mov	r19, r0
    789a:	0f 2e       	mov	r0, r31
    789c:	f4 e1       	ldi	r31, 0x14	; 20
    789e:	36 95       	lsr	r19
    78a0:	27 95       	ror	r18
    78a2:	17 95       	ror	r17
    78a4:	07 95       	ror	r16
    78a6:	fa 95       	dec	r31
    78a8:	d1 f7       	brne	.-12     	; 0x789e <md5_process+0x65a>
    78aa:	f0 2d       	mov	r31, r0
    78ac:	04 2b       	or	r16, r20
    78ae:	15 2b       	or	r17, r21
    78b0:	26 2b       	or	r18, r22
    78b2:	37 2b       	or	r19, r23
    78b4:	08 0f       	add	r16, r24
    78b6:	19 1f       	adc	r17, r25
    78b8:	2a 1f       	adc	r18, r26
    78ba:	3b 1f       	adc	r19, r27
    78bc:	49 a1       	ldd	r20, Y+33	; 0x21
    78be:	5a a1       	ldd	r21, Y+34	; 0x22
    78c0:	6b a1       	ldd	r22, Y+35	; 0x23
    78c2:	7c a1       	ldd	r23, Y+36	; 0x24
    78c4:	4d 5e       	subi	r20, 0xED	; 237
    78c6:	59 4b       	sbci	r21, 0xB9	; 185
    78c8:	6f 4c       	sbci	r22, 0xCF	; 207
    78ca:	77 45       	sbci	r23, 0x57	; 87
    78cc:	84 0e       	add	r8, r20
    78ce:	95 1e       	adc	r9, r21
    78d0:	a6 1e       	adc	r10, r22
    78d2:	b7 1e       	adc	r11, r23
    78d4:	ac 01       	movw	r20, r24
    78d6:	bd 01       	movw	r22, r26
    78d8:	4c 25       	eor	r20, r12
    78da:	5d 25       	eor	r21, r13
    78dc:	6e 25       	eor	r22, r14
    78de:	7f 25       	eor	r23, r15
    78e0:	40 23       	and	r20, r16
    78e2:	51 23       	and	r21, r17
    78e4:	62 23       	and	r22, r18
    78e6:	73 23       	and	r23, r19
    78e8:	4c 25       	eor	r20, r12
    78ea:	5d 25       	eor	r21, r13
    78ec:	6e 25       	eor	r22, r14
    78ee:	7f 25       	eor	r23, r15
    78f0:	84 0e       	add	r8, r20
    78f2:	95 1e       	adc	r9, r21
    78f4:	a6 1e       	adc	r10, r22
    78f6:	b7 1e       	adc	r11, r23
    78f8:	b5 01       	movw	r22, r10
    78fa:	a4 01       	movw	r20, r8
    78fc:	03 2e       	mov	r0, r19
    78fe:	3f e0       	ldi	r19, 0x0F	; 15
    7900:	76 95       	lsr	r23
    7902:	67 95       	ror	r22
    7904:	57 95       	ror	r21
    7906:	47 95       	ror	r20
    7908:	3a 95       	dec	r19
    790a:	d1 f7       	brne	.-12     	; 0x7900 <md5_process+0x6bc>
    790c:	30 2d       	mov	r19, r0
    790e:	07 2e       	mov	r0, r23
    7910:	71 e1       	ldi	r23, 0x11	; 17
    7912:	88 0c       	add	r8, r8
    7914:	99 1c       	adc	r9, r9
    7916:	aa 1c       	adc	r10, r10
    7918:	bb 1c       	adc	r11, r11
    791a:	7a 95       	dec	r23
    791c:	d1 f7       	brne	.-12     	; 0x7912 <md5_process+0x6ce>
    791e:	70 2d       	mov	r23, r0
    7920:	84 2a       	or	r8, r20
    7922:	95 2a       	or	r9, r21
    7924:	a6 2a       	or	r10, r22
    7926:	b7 2a       	or	r11, r23
    7928:	80 0e       	add	r8, r16
    792a:	91 1e       	adc	r9, r17
    792c:	a2 1e       	adc	r10, r18
    792e:	b3 1e       	adc	r11, r19
    7930:	4d a1       	ldd	r20, Y+37	; 0x25
    7932:	5e a1       	ldd	r21, Y+38	; 0x26
    7934:	6f a1       	ldd	r22, Y+39	; 0x27
    7936:	78 a5       	ldd	r23, Y+40	; 0x28
    7938:	4f 5f       	subi	r20, 0xFF	; 255
    793a:	5a 46       	sbci	r21, 0x6A	; 106
    793c:	69 4b       	sbci	r22, 0xB9	; 185
    793e:	72 40       	sbci	r23, 0x02	; 2
    7940:	c4 0e       	add	r12, r20
    7942:	d5 1e       	adc	r13, r21
    7944:	e6 1e       	adc	r14, r22
    7946:	f7 1e       	adc	r15, r23
    7948:	b9 01       	movw	r22, r18
    794a:	a8 01       	movw	r20, r16
    794c:	48 27       	eor	r20, r24
    794e:	59 27       	eor	r21, r25
    7950:	6a 27       	eor	r22, r26
    7952:	7b 27       	eor	r23, r27
    7954:	48 21       	and	r20, r8
    7956:	59 21       	and	r21, r9
    7958:	6a 21       	and	r22, r10
    795a:	7b 21       	and	r23, r11
    795c:	48 27       	eor	r20, r24
    795e:	59 27       	eor	r21, r25
    7960:	6a 27       	eor	r22, r26
    7962:	7b 27       	eor	r23, r27
    7964:	c4 0e       	add	r12, r20
    7966:	d5 1e       	adc	r13, r21
    7968:	e6 1e       	adc	r14, r22
    796a:	f7 1e       	adc	r15, r23
    796c:	b7 01       	movw	r22, r14
    796e:	a6 01       	movw	r20, r12
    7970:	03 2e       	mov	r0, r19
    7972:	3a e0       	ldi	r19, 0x0A	; 10
    7974:	76 95       	lsr	r23
    7976:	67 95       	ror	r22
    7978:	57 95       	ror	r21
    797a:	47 95       	ror	r20
    797c:	3a 95       	dec	r19
    797e:	d1 f7       	brne	.-12     	; 0x7974 <md5_process+0x730>
    7980:	30 2d       	mov	r19, r0
    7982:	0b 2e       	mov	r0, r27
    7984:	b6 e1       	ldi	r27, 0x16	; 22
    7986:	cc 0c       	add	r12, r12
    7988:	dd 1c       	adc	r13, r13
    798a:	ee 1c       	adc	r14, r14
    798c:	ff 1c       	adc	r15, r15
    798e:	ba 95       	dec	r27
    7990:	d1 f7       	brne	.-12     	; 0x7986 <md5_process+0x742>
    7992:	b0 2d       	mov	r27, r0
    7994:	c4 2a       	or	r12, r20
    7996:	d5 2a       	or	r13, r21
    7998:	e6 2a       	or	r14, r22
    799a:	f7 2a       	or	r15, r23
    799c:	c8 0c       	add	r12, r8
    799e:	d9 1c       	adc	r13, r9
    79a0:	ea 1c       	adc	r14, r10
    79a2:	fb 1c       	adc	r15, r11
    79a4:	49 a5       	ldd	r20, Y+41	; 0x29
    79a6:	5a a5       	ldd	r21, Y+42	; 0x2a
    79a8:	6b a5       	ldd	r22, Y+43	; 0x2b
    79aa:	7c a5       	ldd	r23, Y+44	; 0x2c
    79ac:	48 52       	subi	r20, 0x28	; 40
    79ae:	57 46       	sbci	r21, 0x67	; 103
    79b0:	6f 47       	sbci	r22, 0x7F	; 127
    79b2:	76 49       	sbci	r23, 0x96	; 150
    79b4:	84 0f       	add	r24, r20
    79b6:	95 1f       	adc	r25, r21
    79b8:	a6 1f       	adc	r26, r22
    79ba:	b7 1f       	adc	r27, r23
    79bc:	b5 01       	movw	r22, r10
    79be:	a4 01       	movw	r20, r8
    79c0:	40 27       	eor	r20, r16
    79c2:	51 27       	eor	r21, r17
    79c4:	62 27       	eor	r22, r18
    79c6:	73 27       	eor	r23, r19
    79c8:	4c 21       	and	r20, r12
    79ca:	5d 21       	and	r21, r13
    79cc:	6e 21       	and	r22, r14
    79ce:	7f 21       	and	r23, r15
    79d0:	2a 01       	movw	r4, r20
    79d2:	3b 01       	movw	r6, r22
    79d4:	40 26       	eor	r4, r16
    79d6:	51 26       	eor	r5, r17
    79d8:	62 26       	eor	r6, r18
    79da:	73 26       	eor	r7, r19
    79dc:	ac 01       	movw	r20, r24
    79de:	bd 01       	movw	r22, r26
    79e0:	44 0d       	add	r20, r4
    79e2:	55 1d       	adc	r21, r5
    79e4:	66 1d       	adc	r22, r6
    79e6:	77 1d       	adc	r23, r7
    79e8:	2a 01       	movw	r4, r20
    79ea:	3b 01       	movw	r6, r22
    79ec:	44 0c       	add	r4, r4
    79ee:	55 1c       	adc	r5, r5
    79f0:	66 1c       	adc	r6, r6
    79f2:	77 1c       	adc	r7, r7
    79f4:	44 0c       	add	r4, r4
    79f6:	55 1c       	adc	r5, r5
    79f8:	66 1c       	adc	r6, r6
    79fa:	77 1c       	adc	r7, r7
    79fc:	44 0c       	add	r4, r4
    79fe:	55 1c       	adc	r5, r5
    7a00:	66 1c       	adc	r6, r6
    7a02:	77 1c       	adc	r7, r7
    7a04:	44 0c       	add	r4, r4
    7a06:	55 1c       	adc	r5, r5
    7a08:	66 1c       	adc	r6, r6
    7a0a:	77 1c       	adc	r7, r7
    7a0c:	44 0c       	add	r4, r4
    7a0e:	55 1c       	adc	r5, r5
    7a10:	66 1c       	adc	r6, r6
    7a12:	77 1c       	adc	r7, r7
    7a14:	44 0c       	add	r4, r4
    7a16:	55 1c       	adc	r5, r5
    7a18:	66 1c       	adc	r6, r6
    7a1a:	77 1c       	adc	r7, r7
    7a1c:	44 0c       	add	r4, r4
    7a1e:	55 1c       	adc	r5, r5
    7a20:	66 1c       	adc	r6, r6
    7a22:	77 1c       	adc	r7, r7
    7a24:	03 2e       	mov	r0, r19
    7a26:	39 e1       	ldi	r19, 0x19	; 25
    7a28:	76 95       	lsr	r23
    7a2a:	67 95       	ror	r22
    7a2c:	57 95       	ror	r21
    7a2e:	47 95       	ror	r20
    7a30:	3a 95       	dec	r19
    7a32:	d1 f7       	brne	.-12     	; 0x7a28 <md5_process+0x7e4>
    7a34:	30 2d       	mov	r19, r0
    7a36:	44 29       	or	r20, r4
    7a38:	55 29       	or	r21, r5
    7a3a:	66 29       	or	r22, r6
    7a3c:	77 29       	or	r23, r7
    7a3e:	4c 0d       	add	r20, r12
    7a40:	5d 1d       	adc	r21, r13
    7a42:	6e 1d       	adc	r22, r14
    7a44:	7f 1d       	adc	r23, r15
    7a46:	8d a5       	ldd	r24, Y+45	; 0x2d
    7a48:	9e a5       	ldd	r25, Y+46	; 0x2e
    7a4a:	af a5       	ldd	r26, Y+47	; 0x2f
    7a4c:	b8 a9       	ldd	r27, Y+48	; 0x30
    7a4e:	81 55       	subi	r24, 0x51	; 81
    7a50:	98 40       	sbci	r25, 0x08	; 8
    7a52:	ab 4b       	sbci	r26, 0xBB	; 187
    7a54:	b4 47       	sbci	r27, 0x74	; 116
    7a56:	08 0f       	add	r16, r24
    7a58:	19 1f       	adc	r17, r25
    7a5a:	2a 1f       	adc	r18, r26
    7a5c:	3b 1f       	adc	r19, r27
    7a5e:	d7 01       	movw	r26, r14
    7a60:	c6 01       	movw	r24, r12
    7a62:	88 25       	eor	r24, r8
    7a64:	99 25       	eor	r25, r9
    7a66:	aa 25       	eor	r26, r10
    7a68:	bb 25       	eor	r27, r11
    7a6a:	84 23       	and	r24, r20
    7a6c:	95 23       	and	r25, r21
    7a6e:	a6 23       	and	r26, r22
    7a70:	b7 23       	and	r27, r23
    7a72:	88 25       	eor	r24, r8
    7a74:	99 25       	eor	r25, r9
    7a76:	aa 25       	eor	r26, r10
    7a78:	bb 25       	eor	r27, r11
    7a7a:	08 0f       	add	r16, r24
    7a7c:	19 1f       	adc	r17, r25
    7a7e:	2a 1f       	adc	r18, r26
    7a80:	3b 1f       	adc	r19, r27
    7a82:	d9 01       	movw	r26, r18
    7a84:	c8 01       	movw	r24, r16
    7a86:	07 2e       	mov	r0, r23
    7a88:	7c e0       	ldi	r23, 0x0C	; 12
    7a8a:	88 0f       	add	r24, r24
    7a8c:	99 1f       	adc	r25, r25
    7a8e:	aa 1f       	adc	r26, r26
    7a90:	bb 1f       	adc	r27, r27
    7a92:	7a 95       	dec	r23
    7a94:	d1 f7       	brne	.-12     	; 0x7a8a <md5_process+0x846>
    7a96:	70 2d       	mov	r23, r0
    7a98:	0f 2e       	mov	r0, r31
    7a9a:	f4 e1       	ldi	r31, 0x14	; 20
    7a9c:	36 95       	lsr	r19
    7a9e:	27 95       	ror	r18
    7aa0:	17 95       	ror	r17
    7aa2:	07 95       	ror	r16
    7aa4:	fa 95       	dec	r31
    7aa6:	d1 f7       	brne	.-12     	; 0x7a9c <md5_process+0x858>
    7aa8:	f0 2d       	mov	r31, r0
    7aaa:	08 2b       	or	r16, r24
    7aac:	19 2b       	or	r17, r25
    7aae:	2a 2b       	or	r18, r26
    7ab0:	3b 2b       	or	r19, r27
    7ab2:	04 0f       	add	r16, r20
    7ab4:	15 1f       	adc	r17, r21
    7ab6:	26 1f       	adc	r18, r22
    7ab8:	37 1f       	adc	r19, r23
    7aba:	89 a9       	ldd	r24, Y+49	; 0x31
    7abc:	9a a9       	ldd	r25, Y+50	; 0x32
    7abe:	ab a9       	ldd	r26, Y+51	; 0x33
    7ac0:	bc a9       	ldd	r27, Y+52	; 0x34
    7ac2:	8f 54       	subi	r24, 0x4F	; 79
    7ac4:	94 4a       	sbci	r25, 0xA4	; 164
    7ac6:	a1 09       	sbc	r26, r1
    7ac8:	b1 09       	sbc	r27, r1
    7aca:	88 0e       	add	r8, r24
    7acc:	99 1e       	adc	r9, r25
    7ace:	aa 1e       	adc	r10, r26
    7ad0:	bb 1e       	adc	r11, r27
    7ad2:	db 01       	movw	r26, r22
    7ad4:	ca 01       	movw	r24, r20
    7ad6:	8c 25       	eor	r24, r12
    7ad8:	9d 25       	eor	r25, r13
    7ada:	ae 25       	eor	r26, r14
    7adc:	bf 25       	eor	r27, r15
    7ade:	80 23       	and	r24, r16
    7ae0:	91 23       	and	r25, r17
    7ae2:	a2 23       	and	r26, r18
    7ae4:	b3 23       	and	r27, r19
    7ae6:	8c 25       	eor	r24, r12
    7ae8:	9d 25       	eor	r25, r13
    7aea:	ae 25       	eor	r26, r14
    7aec:	bf 25       	eor	r27, r15
    7aee:	88 0e       	add	r8, r24
    7af0:	99 1e       	adc	r9, r25
    7af2:	aa 1e       	adc	r10, r26
    7af4:	bb 1e       	adc	r11, r27
    7af6:	d5 01       	movw	r26, r10
    7af8:	c4 01       	movw	r24, r8
    7afa:	07 2e       	mov	r0, r23
    7afc:	7f e0       	ldi	r23, 0x0F	; 15
    7afe:	b6 95       	lsr	r27
    7b00:	a7 95       	ror	r26
    7b02:	97 95       	ror	r25
    7b04:	87 95       	ror	r24
    7b06:	7a 95       	dec	r23
    7b08:	d1 f7       	brne	.-12     	; 0x7afe <md5_process+0x8ba>
    7b0a:	70 2d       	mov	r23, r0
    7b0c:	07 2e       	mov	r0, r23
    7b0e:	71 e1       	ldi	r23, 0x11	; 17
    7b10:	88 0c       	add	r8, r8
    7b12:	99 1c       	adc	r9, r9
    7b14:	aa 1c       	adc	r10, r10
    7b16:	bb 1c       	adc	r11, r11
    7b18:	7a 95       	dec	r23
    7b1a:	d1 f7       	brne	.-12     	; 0x7b10 <md5_process+0x8cc>
    7b1c:	70 2d       	mov	r23, r0
    7b1e:	88 2a       	or	r8, r24
    7b20:	99 2a       	or	r9, r25
    7b22:	aa 2a       	or	r10, r26
    7b24:	bb 2a       	or	r11, r27
    7b26:	80 0e       	add	r8, r16
    7b28:	91 1e       	adc	r9, r17
    7b2a:	a2 1e       	adc	r10, r18
    7b2c:	b3 1e       	adc	r11, r19
    7b2e:	8d a9       	ldd	r24, Y+53	; 0x35
    7b30:	9e a9       	ldd	r25, Y+54	; 0x36
    7b32:	af a9       	ldd	r26, Y+55	; 0x37
    7b34:	b8 ad       	ldd	r27, Y+56	; 0x38
    7b36:	82 54       	subi	r24, 0x42	; 66
    7b38:	98 42       	sbci	r25, 0x28	; 40
    7b3a:	a3 4a       	sbci	r26, 0xA3	; 163
    7b3c:	b6 47       	sbci	r27, 0x76	; 118
    7b3e:	c8 0e       	add	r12, r24
    7b40:	d9 1e       	adc	r13, r25
    7b42:	ea 1e       	adc	r14, r26
    7b44:	fb 1e       	adc	r15, r27
    7b46:	d9 01       	movw	r26, r18
    7b48:	c8 01       	movw	r24, r16
    7b4a:	84 27       	eor	r24, r20
    7b4c:	95 27       	eor	r25, r21
    7b4e:	a6 27       	eor	r26, r22
    7b50:	b7 27       	eor	r27, r23
    7b52:	88 21       	and	r24, r8
    7b54:	99 21       	and	r25, r9
    7b56:	aa 21       	and	r26, r10
    7b58:	bb 21       	and	r27, r11
    7b5a:	2c 01       	movw	r4, r24
    7b5c:	3d 01       	movw	r6, r26
    7b5e:	44 26       	eor	r4, r20
    7b60:	55 26       	eor	r5, r21
    7b62:	66 26       	eor	r6, r22
    7b64:	77 26       	eor	r7, r23
    7b66:	d7 01       	movw	r26, r14
    7b68:	c6 01       	movw	r24, r12
    7b6a:	84 0d       	add	r24, r4
    7b6c:	95 1d       	adc	r25, r5
    7b6e:	a6 1d       	adc	r26, r6
    7b70:	b7 1d       	adc	r27, r7
    7b72:	2c 01       	movw	r4, r24
    7b74:	3d 01       	movw	r6, r26
    7b76:	03 2e       	mov	r0, r19
    7b78:	3a e0       	ldi	r19, 0x0A	; 10
    7b7a:	76 94       	lsr	r7
    7b7c:	67 94       	ror	r6
    7b7e:	57 94       	ror	r5
    7b80:	47 94       	ror	r4
    7b82:	3a 95       	dec	r19
    7b84:	d1 f7       	brne	.-12     	; 0x7b7a <md5_process+0x936>
    7b86:	30 2d       	mov	r19, r0
    7b88:	07 2e       	mov	r0, r23
    7b8a:	76 e1       	ldi	r23, 0x16	; 22
    7b8c:	88 0f       	add	r24, r24
    7b8e:	99 1f       	adc	r25, r25
    7b90:	aa 1f       	adc	r26, r26
    7b92:	bb 1f       	adc	r27, r27
    7b94:	7a 95       	dec	r23
    7b96:	d1 f7       	brne	.-12     	; 0x7b8c <md5_process+0x948>
    7b98:	70 2d       	mov	r23, r0
    7b9a:	84 29       	or	r24, r4
    7b9c:	95 29       	or	r25, r5
    7b9e:	a6 29       	or	r26, r6
    7ba0:	b7 29       	or	r27, r7
    7ba2:	88 0d       	add	r24, r8
    7ba4:	99 1d       	adc	r25, r9
    7ba6:	aa 1d       	adc	r26, r10
    7ba8:	bb 1d       	adc	r27, r11
    7baa:	c9 ac       	ldd	r12, Y+57	; 0x39
    7bac:	da ac       	ldd	r13, Y+58	; 0x3a
    7bae:	eb ac       	ldd	r14, Y+59	; 0x3b
    7bb0:	fc ac       	ldd	r15, Y+60	; 0x3c
    7bb2:	ee ed       	ldi	r30, 0xDE	; 222
    7bb4:	ce 1a       	sub	r12, r30
    7bb6:	ee ee       	ldi	r30, 0xEE	; 238
    7bb8:	de 0a       	sbc	r13, r30
    7bba:	ef e6       	ldi	r30, 0x6F	; 111
    7bbc:	ee 0a       	sbc	r14, r30
    7bbe:	e4 e9       	ldi	r30, 0x94	; 148
    7bc0:	fe 0a       	sbc	r15, r30
    7bc2:	4c 0d       	add	r20, r12
    7bc4:	5d 1d       	adc	r21, r13
    7bc6:	6e 1d       	adc	r22, r14
    7bc8:	7f 1d       	adc	r23, r15
    7bca:	75 01       	movw	r14, r10
    7bcc:	64 01       	movw	r12, r8
    7bce:	c0 26       	eor	r12, r16
    7bd0:	d1 26       	eor	r13, r17
    7bd2:	e2 26       	eor	r14, r18
    7bd4:	f3 26       	eor	r15, r19
    7bd6:	c8 22       	and	r12, r24
    7bd8:	d9 22       	and	r13, r25
    7bda:	ea 22       	and	r14, r26
    7bdc:	fb 22       	and	r15, r27
    7bde:	c0 26       	eor	r12, r16
    7be0:	d1 26       	eor	r13, r17
    7be2:	e2 26       	eor	r14, r18
    7be4:	f3 26       	eor	r15, r19
    7be6:	4c 0d       	add	r20, r12
    7be8:	5d 1d       	adc	r21, r13
    7bea:	6e 1d       	adc	r22, r14
    7bec:	7f 1d       	adc	r23, r15
    7bee:	6a 01       	movw	r12, r20
    7bf0:	7b 01       	movw	r14, r22
    7bf2:	cc 0c       	add	r12, r12
    7bf4:	dd 1c       	adc	r13, r13
    7bf6:	ee 1c       	adc	r14, r14
    7bf8:	ff 1c       	adc	r15, r15
    7bfa:	cc 0c       	add	r12, r12
    7bfc:	dd 1c       	adc	r13, r13
    7bfe:	ee 1c       	adc	r14, r14
    7c00:	ff 1c       	adc	r15, r15
    7c02:	cc 0c       	add	r12, r12
    7c04:	dd 1c       	adc	r13, r13
    7c06:	ee 1c       	adc	r14, r14
    7c08:	ff 1c       	adc	r15, r15
    7c0a:	cc 0c       	add	r12, r12
    7c0c:	dd 1c       	adc	r13, r13
    7c0e:	ee 1c       	adc	r14, r14
    7c10:	ff 1c       	adc	r15, r15
    7c12:	cc 0c       	add	r12, r12
    7c14:	dd 1c       	adc	r13, r13
    7c16:	ee 1c       	adc	r14, r14
    7c18:	ff 1c       	adc	r15, r15
    7c1a:	cc 0c       	add	r12, r12
    7c1c:	dd 1c       	adc	r13, r13
    7c1e:	ee 1c       	adc	r14, r14
    7c20:	ff 1c       	adc	r15, r15
    7c22:	cc 0c       	add	r12, r12
    7c24:	dd 1c       	adc	r13, r13
    7c26:	ee 1c       	adc	r14, r14
    7c28:	ff 1c       	adc	r15, r15
    7c2a:	03 2e       	mov	r0, r19
    7c2c:	39 e1       	ldi	r19, 0x19	; 25
    7c2e:	76 95       	lsr	r23
    7c30:	67 95       	ror	r22
    7c32:	57 95       	ror	r21
    7c34:	47 95       	ror	r20
    7c36:	3a 95       	dec	r19
    7c38:	d1 f7       	brne	.-12     	; 0x7c2e <md5_process+0x9ea>
    7c3a:	30 2d       	mov	r19, r0
    7c3c:	4c 29       	or	r20, r12
    7c3e:	5d 29       	or	r21, r13
    7c40:	6e 29       	or	r22, r14
    7c42:	7f 29       	or	r23, r15
    7c44:	48 0f       	add	r20, r24
    7c46:	59 1f       	adc	r21, r25
    7c48:	6a 1f       	adc	r22, r26
    7c4a:	7b 1f       	adc	r23, r27
    7c4c:	21 96       	adiw	r28, 0x01	; 1
    7c4e:	cc ac       	ldd	r12, Y+60	; 0x3c
    7c50:	dd ac       	ldd	r13, Y+61	; 0x3d
    7c52:	ee ac       	ldd	r14, Y+62	; 0x3e
    7c54:	ff ac       	ldd	r15, Y+63	; 0x3f
    7c56:	21 97       	sbiw	r28, 0x01	; 1
    7c58:	fd e6       	ldi	r31, 0x6D	; 109
    7c5a:	cf 1a       	sub	r12, r31
    7c5c:	fe e8       	ldi	r31, 0x8E	; 142
    7c5e:	df 0a       	sbc	r13, r31
    7c60:	f7 e6       	ldi	r31, 0x67	; 103
    7c62:	ef 0a       	sbc	r14, r31
    7c64:	f2 e0       	ldi	r31, 0x02	; 2
    7c66:	ff 0a       	sbc	r15, r31
    7c68:	0c 0d       	add	r16, r12
    7c6a:	1d 1d       	adc	r17, r13
    7c6c:	2e 1d       	adc	r18, r14
    7c6e:	3f 1d       	adc	r19, r15
    7c70:	6c 01       	movw	r12, r24
    7c72:	7d 01       	movw	r14, r26
    7c74:	c8 24       	eor	r12, r8
    7c76:	d9 24       	eor	r13, r9
    7c78:	ea 24       	eor	r14, r10
    7c7a:	fb 24       	eor	r15, r11
    7c7c:	c4 22       	and	r12, r20
    7c7e:	d5 22       	and	r13, r21
    7c80:	e6 22       	and	r14, r22
    7c82:	f7 22       	and	r15, r23
    7c84:	c8 24       	eor	r12, r8
    7c86:	d9 24       	eor	r13, r9
    7c88:	ea 24       	eor	r14, r10
    7c8a:	fb 24       	eor	r15, r11
    7c8c:	0c 0d       	add	r16, r12
    7c8e:	1d 1d       	adc	r17, r13
    7c90:	2e 1d       	adc	r18, r14
    7c92:	3f 1d       	adc	r19, r15
    7c94:	68 01       	movw	r12, r16
    7c96:	79 01       	movw	r14, r18
    7c98:	0b 2e       	mov	r0, r27
    7c9a:	bc e0       	ldi	r27, 0x0C	; 12
    7c9c:	cc 0c       	add	r12, r12
    7c9e:	dd 1c       	adc	r13, r13
    7ca0:	ee 1c       	adc	r14, r14
    7ca2:	ff 1c       	adc	r15, r15
    7ca4:	ba 95       	dec	r27
    7ca6:	d1 f7       	brne	.-12     	; 0x7c9c <md5_process+0xa58>
    7ca8:	b0 2d       	mov	r27, r0
    7caa:	0f 2e       	mov	r0, r31
    7cac:	f4 e1       	ldi	r31, 0x14	; 20
    7cae:	36 95       	lsr	r19
    7cb0:	27 95       	ror	r18
    7cb2:	17 95       	ror	r17
    7cb4:	07 95       	ror	r16
    7cb6:	fa 95       	dec	r31
    7cb8:	d1 f7       	brne	.-12     	; 0x7cae <md5_process+0xa6a>
    7cba:	f0 2d       	mov	r31, r0
    7cbc:	0c 29       	or	r16, r12
    7cbe:	1d 29       	or	r17, r13
    7cc0:	2e 29       	or	r18, r14
    7cc2:	3f 29       	or	r19, r15
    7cc4:	04 0f       	add	r16, r20
    7cc6:	15 1f       	adc	r17, r21
    7cc8:	26 1f       	adc	r18, r22
    7cca:	37 1f       	adc	r19, r23
    7ccc:	25 96       	adiw	r28, 0x05	; 5
    7cce:	cc ac       	ldd	r12, Y+60	; 0x3c
    7cd0:	dd ac       	ldd	r13, Y+61	; 0x3d
    7cd2:	ee ac       	ldd	r14, Y+62	; 0x3e
    7cd4:	ff ac       	ldd	r15, Y+63	; 0x3f
    7cd6:	25 97       	sbiw	r28, 0x05	; 5
    7cd8:	e2 e7       	ldi	r30, 0x72	; 114
    7cda:	ce 1a       	sub	r12, r30
    7cdc:	ec eb       	ldi	r30, 0xBC	; 188
    7cde:	de 0a       	sbc	r13, r30
    7ce0:	e6 e8       	ldi	r30, 0x86	; 134
    7ce2:	ee 0a       	sbc	r14, r30
    7ce4:	e9 e5       	ldi	r30, 0x59	; 89
    7ce6:	fe 0a       	sbc	r15, r30
    7ce8:	8c 0c       	add	r8, r12
    7cea:	9d 1c       	adc	r9, r13
    7cec:	ae 1c       	adc	r10, r14
    7cee:	bf 1c       	adc	r11, r15
    7cf0:	6a 01       	movw	r12, r20
    7cf2:	7b 01       	movw	r14, r22
    7cf4:	c8 26       	eor	r12, r24
    7cf6:	d9 26       	eor	r13, r25
    7cf8:	ea 26       	eor	r14, r26
    7cfa:	fb 26       	eor	r15, r27
    7cfc:	c0 22       	and	r12, r16
    7cfe:	d1 22       	and	r13, r17
    7d00:	e2 22       	and	r14, r18
    7d02:	f3 22       	and	r15, r19
    7d04:	c8 26       	eor	r12, r24
    7d06:	d9 26       	eor	r13, r25
    7d08:	ea 26       	eor	r14, r26
    7d0a:	fb 26       	eor	r15, r27
    7d0c:	8c 0c       	add	r8, r12
    7d0e:	9d 1c       	adc	r9, r13
    7d10:	ae 1c       	adc	r10, r14
    7d12:	bf 1c       	adc	r11, r15
    7d14:	75 01       	movw	r14, r10
    7d16:	64 01       	movw	r12, r8
    7d18:	0b 2e       	mov	r0, r27
    7d1a:	bf e0       	ldi	r27, 0x0F	; 15
    7d1c:	f6 94       	lsr	r15
    7d1e:	e7 94       	ror	r14
    7d20:	d7 94       	ror	r13
    7d22:	c7 94       	ror	r12
    7d24:	ba 95       	dec	r27
    7d26:	d1 f7       	brne	.-12     	; 0x7d1c <md5_process+0xad8>
    7d28:	b0 2d       	mov	r27, r0
    7d2a:	07 2e       	mov	r0, r23
    7d2c:	71 e1       	ldi	r23, 0x11	; 17
    7d2e:	88 0c       	add	r8, r8
    7d30:	99 1c       	adc	r9, r9
    7d32:	aa 1c       	adc	r10, r10
    7d34:	bb 1c       	adc	r11, r11
    7d36:	7a 95       	dec	r23
    7d38:	d1 f7       	brne	.-12     	; 0x7d2e <md5_process+0xaea>
    7d3a:	70 2d       	mov	r23, r0
    7d3c:	8c 28       	or	r8, r12
    7d3e:	9d 28       	or	r9, r13
    7d40:	ae 28       	or	r10, r14
    7d42:	bf 28       	or	r11, r15
    7d44:	80 0e       	add	r8, r16
    7d46:	91 1e       	adc	r9, r17
    7d48:	a2 1e       	adc	r10, r18
    7d4a:	b3 1e       	adc	r11, r19
    7d4c:	29 96       	adiw	r28, 0x09	; 9
    7d4e:	cc ac       	ldd	r12, Y+60	; 0x3c
    7d50:	dd ac       	ldd	r13, Y+61	; 0x3d
    7d52:	ee ac       	ldd	r14, Y+62	; 0x3e
    7d54:	ff ac       	ldd	r15, Y+63	; 0x3f
    7d56:	29 97       	sbiw	r28, 0x09	; 9
    7d58:	ff ed       	ldi	r31, 0xDF	; 223
    7d5a:	cf 1a       	sub	r12, r31
    7d5c:	f7 ef       	ldi	r31, 0xF7	; 247
    7d5e:	df 0a       	sbc	r13, r31
    7d60:	fb e4       	ldi	r31, 0x4B	; 75
    7d62:	ef 0a       	sbc	r14, r31
    7d64:	f6 eb       	ldi	r31, 0xB6	; 182
    7d66:	ff 0a       	sbc	r15, r31
    7d68:	8c 0d       	add	r24, r12
    7d6a:	9d 1d       	adc	r25, r13
    7d6c:	ae 1d       	adc	r26, r14
    7d6e:	bf 1d       	adc	r27, r15
    7d70:	68 01       	movw	r12, r16
    7d72:	79 01       	movw	r14, r18
    7d74:	c4 26       	eor	r12, r20
    7d76:	d5 26       	eor	r13, r21
    7d78:	e6 26       	eor	r14, r22
    7d7a:	f7 26       	eor	r15, r23
    7d7c:	c8 20       	and	r12, r8
    7d7e:	d9 20       	and	r13, r9
    7d80:	ea 20       	and	r14, r10
    7d82:	fb 20       	and	r15, r11
    7d84:	c4 26       	eor	r12, r20
    7d86:	d5 26       	eor	r13, r21
    7d88:	e6 26       	eor	r14, r22
    7d8a:	f7 26       	eor	r15, r23
    7d8c:	8c 0d       	add	r24, r12
    7d8e:	9d 1d       	adc	r25, r13
    7d90:	ae 1d       	adc	r26, r14
    7d92:	bf 1d       	adc	r27, r15
    7d94:	6c 01       	movw	r12, r24
    7d96:	7d 01       	movw	r14, r26
    7d98:	0b 2e       	mov	r0, r27
    7d9a:	ba e0       	ldi	r27, 0x0A	; 10
    7d9c:	f6 94       	lsr	r15
    7d9e:	e7 94       	ror	r14
    7da0:	d7 94       	ror	r13
    7da2:	c7 94       	ror	r12
    7da4:	ba 95       	dec	r27
    7da6:	d1 f7       	brne	.-12     	; 0x7d9c <md5_process+0xb58>
    7da8:	b0 2d       	mov	r27, r0
    7daa:	07 2e       	mov	r0, r23
    7dac:	76 e1       	ldi	r23, 0x16	; 22
    7dae:	88 0f       	add	r24, r24
    7db0:	99 1f       	adc	r25, r25
    7db2:	aa 1f       	adc	r26, r26
    7db4:	bb 1f       	adc	r27, r27
    7db6:	7a 95       	dec	r23
    7db8:	d1 f7       	brne	.-12     	; 0x7dae <md5_process+0xb6a>
    7dba:	70 2d       	mov	r23, r0
    7dbc:	8c 29       	or	r24, r12
    7dbe:	9d 29       	or	r25, r13
    7dc0:	ae 29       	or	r26, r14
    7dc2:	bf 29       	or	r27, r15
    7dc4:	88 0d       	add	r24, r8
    7dc6:	99 1d       	adc	r25, r9
    7dc8:	aa 1d       	adc	r26, r10
    7dca:	bb 1d       	adc	r27, r11
    7dcc:	cd 84       	ldd	r12, Y+13	; 0x0d
    7dce:	de 84       	ldd	r13, Y+14	; 0x0e
    7dd0:	ef 84       	ldd	r14, Y+15	; 0x0f
    7dd2:	f8 88       	ldd	r15, Y+16	; 0x10
    7dd4:	ee e9       	ldi	r30, 0x9E	; 158
    7dd6:	ce 1a       	sub	r12, r30
    7dd8:	ea ed       	ldi	r30, 0xDA	; 218
    7dda:	de 0a       	sbc	r13, r30
    7ddc:	e1 ee       	ldi	r30, 0xE1	; 225
    7dde:	ee 0a       	sbc	r14, r30
    7de0:	e9 e0       	ldi	r30, 0x09	; 9
    7de2:	fe 0a       	sbc	r15, r30
    7de4:	4c 0d       	add	r20, r12
    7de6:	5d 1d       	adc	r21, r13
    7de8:	6e 1d       	adc	r22, r14
    7dea:	7f 1d       	adc	r23, r15
    7dec:	6c 01       	movw	r12, r24
    7dee:	7d 01       	movw	r14, r26
    7df0:	c8 24       	eor	r12, r8
    7df2:	d9 24       	eor	r13, r9
    7df4:	ea 24       	eor	r14, r10
    7df6:	fb 24       	eor	r15, r11
    7df8:	c0 22       	and	r12, r16
    7dfa:	d1 22       	and	r13, r17
    7dfc:	e2 22       	and	r14, r18
    7dfe:	f3 22       	and	r15, r19
    7e00:	c8 24       	eor	r12, r8
    7e02:	d9 24       	eor	r13, r9
    7e04:	ea 24       	eor	r14, r10
    7e06:	fb 24       	eor	r15, r11
    7e08:	4c 0d       	add	r20, r12
    7e0a:	5d 1d       	adc	r21, r13
    7e0c:	6e 1d       	adc	r22, r14
    7e0e:	7f 1d       	adc	r23, r15
    7e10:	6a 01       	movw	r12, r20
    7e12:	7b 01       	movw	r14, r22
    7e14:	cc 0c       	add	r12, r12
    7e16:	dd 1c       	adc	r13, r13
    7e18:	ee 1c       	adc	r14, r14
    7e1a:	ff 1c       	adc	r15, r15
    7e1c:	cc 0c       	add	r12, r12
    7e1e:	dd 1c       	adc	r13, r13
    7e20:	ee 1c       	adc	r14, r14
    7e22:	ff 1c       	adc	r15, r15
    7e24:	cc 0c       	add	r12, r12
    7e26:	dd 1c       	adc	r13, r13
    7e28:	ee 1c       	adc	r14, r14
    7e2a:	ff 1c       	adc	r15, r15
    7e2c:	cc 0c       	add	r12, r12
    7e2e:	dd 1c       	adc	r13, r13
    7e30:	ee 1c       	adc	r14, r14
    7e32:	ff 1c       	adc	r15, r15
    7e34:	cc 0c       	add	r12, r12
    7e36:	dd 1c       	adc	r13, r13
    7e38:	ee 1c       	adc	r14, r14
    7e3a:	ff 1c       	adc	r15, r15
    7e3c:	03 2e       	mov	r0, r19
    7e3e:	3b e1       	ldi	r19, 0x1B	; 27
    7e40:	76 95       	lsr	r23
    7e42:	67 95       	ror	r22
    7e44:	57 95       	ror	r21
    7e46:	47 95       	ror	r20
    7e48:	3a 95       	dec	r19
    7e4a:	d1 f7       	brne	.-12     	; 0x7e40 <md5_process+0xbfc>
    7e4c:	30 2d       	mov	r19, r0
    7e4e:	4c 29       	or	r20, r12
    7e50:	5d 29       	or	r21, r13
    7e52:	6e 29       	or	r22, r14
    7e54:	7f 29       	or	r23, r15
    7e56:	48 0f       	add	r20, r24
    7e58:	59 1f       	adc	r21, r25
    7e5a:	6a 1f       	adc	r22, r26
    7e5c:	7b 1f       	adc	r23, r27
    7e5e:	c9 a0       	ldd	r12, Y+33	; 0x21
    7e60:	da a0       	ldd	r13, Y+34	; 0x22
    7e62:	eb a0       	ldd	r14, Y+35	; 0x23
    7e64:	fc a0       	ldd	r15, Y+36	; 0x24
    7e66:	f0 ec       	ldi	r31, 0xC0	; 192
    7e68:	cf 1a       	sub	r12, r31
    7e6a:	fc e4       	ldi	r31, 0x4C	; 76
    7e6c:	df 0a       	sbc	r13, r31
    7e6e:	ff eb       	ldi	r31, 0xBF	; 191
    7e70:	ef 0a       	sbc	r14, r31
    7e72:	ff e3       	ldi	r31, 0x3F	; 63
    7e74:	ff 0a       	sbc	r15, r31
    7e76:	0c 0d       	add	r16, r12
    7e78:	1d 1d       	adc	r17, r13
    7e7a:	2e 1d       	adc	r18, r14
    7e7c:	3f 1d       	adc	r19, r15
    7e7e:	6a 01       	movw	r12, r20
    7e80:	7b 01       	movw	r14, r22
    7e82:	c8 26       	eor	r12, r24
    7e84:	d9 26       	eor	r13, r25
    7e86:	ea 26       	eor	r14, r26
    7e88:	fb 26       	eor	r15, r27
    7e8a:	c8 20       	and	r12, r8
    7e8c:	d9 20       	and	r13, r9
    7e8e:	ea 20       	and	r14, r10
    7e90:	fb 20       	and	r15, r11
    7e92:	c8 26       	eor	r12, r24
    7e94:	d9 26       	eor	r13, r25
    7e96:	ea 26       	eor	r14, r26
    7e98:	fb 26       	eor	r15, r27
    7e9a:	0c 0d       	add	r16, r12
    7e9c:	1d 1d       	adc	r17, r13
    7e9e:	2e 1d       	adc	r18, r14
    7ea0:	3f 1d       	adc	r19, r15
    7ea2:	68 01       	movw	r12, r16
    7ea4:	79 01       	movw	r14, r18
    7ea6:	0b 2e       	mov	r0, r27
    7ea8:	b9 e0       	ldi	r27, 0x09	; 9
    7eaa:	cc 0c       	add	r12, r12
    7eac:	dd 1c       	adc	r13, r13
    7eae:	ee 1c       	adc	r14, r14
    7eb0:	ff 1c       	adc	r15, r15
    7eb2:	ba 95       	dec	r27
    7eb4:	d1 f7       	brne	.-12     	; 0x7eaa <md5_process+0xc66>
    7eb6:	b0 2d       	mov	r27, r0
    7eb8:	0f 2e       	mov	r0, r31
    7eba:	f7 e1       	ldi	r31, 0x17	; 23
    7ebc:	36 95       	lsr	r19
    7ebe:	27 95       	ror	r18
    7ec0:	17 95       	ror	r17
    7ec2:	07 95       	ror	r16
    7ec4:	fa 95       	dec	r31
    7ec6:	d1 f7       	brne	.-12     	; 0x7ebc <md5_process+0xc78>
    7ec8:	f0 2d       	mov	r31, r0
    7eca:	0c 29       	or	r16, r12
    7ecc:	1d 29       	or	r17, r13
    7ece:	2e 29       	or	r18, r14
    7ed0:	3f 29       	or	r19, r15
    7ed2:	04 0f       	add	r16, r20
    7ed4:	15 1f       	adc	r17, r21
    7ed6:	26 1f       	adc	r18, r22
    7ed8:	37 1f       	adc	r19, r23
    7eda:	cd a8       	ldd	r12, Y+53	; 0x35
    7edc:	de a8       	ldd	r13, Y+54	; 0x36
    7ede:	ef a8       	ldd	r14, Y+55	; 0x37
    7ee0:	f8 ac       	ldd	r15, Y+56	; 0x38
    7ee2:	ef ea       	ldi	r30, 0xAF	; 175
    7ee4:	ce 1a       	sub	r12, r30
    7ee6:	e5 ea       	ldi	r30, 0xA5	; 165
    7ee8:	de 0a       	sbc	r13, r30
    7eea:	e1 ea       	ldi	r30, 0xA1	; 161
    7eec:	ee 0a       	sbc	r14, r30
    7eee:	e9 ed       	ldi	r30, 0xD9	; 217
    7ef0:	fe 0a       	sbc	r15, r30
    7ef2:	8c 0c       	add	r8, r12
    7ef4:	9d 1c       	adc	r9, r13
    7ef6:	ae 1c       	adc	r10, r14
    7ef8:	bf 1c       	adc	r11, r15
    7efa:	68 01       	movw	r12, r16
    7efc:	79 01       	movw	r14, r18
    7efe:	c4 26       	eor	r12, r20
    7f00:	d5 26       	eor	r13, r21
    7f02:	e6 26       	eor	r14, r22
    7f04:	f7 26       	eor	r15, r23
    7f06:	c8 22       	and	r12, r24
    7f08:	d9 22       	and	r13, r25
    7f0a:	ea 22       	and	r14, r26
    7f0c:	fb 22       	and	r15, r27
    7f0e:	c4 26       	eor	r12, r20
    7f10:	d5 26       	eor	r13, r21
    7f12:	e6 26       	eor	r14, r22
    7f14:	f7 26       	eor	r15, r23
    7f16:	8c 0c       	add	r8, r12
    7f18:	9d 1c       	adc	r9, r13
    7f1a:	ae 1c       	adc	r10, r14
    7f1c:	bf 1c       	adc	r11, r15
    7f1e:	75 01       	movw	r14, r10
    7f20:	64 01       	movw	r12, r8
    7f22:	0b 2e       	mov	r0, r27
    7f24:	be e0       	ldi	r27, 0x0E	; 14
    7f26:	cc 0c       	add	r12, r12
    7f28:	dd 1c       	adc	r13, r13
    7f2a:	ee 1c       	adc	r14, r14
    7f2c:	ff 1c       	adc	r15, r15
    7f2e:	ba 95       	dec	r27
    7f30:	d1 f7       	brne	.-12     	; 0x7f26 <md5_process+0xce2>
    7f32:	b0 2d       	mov	r27, r0
    7f34:	07 2e       	mov	r0, r23
    7f36:	72 e1       	ldi	r23, 0x12	; 18
    7f38:	b6 94       	lsr	r11
    7f3a:	a7 94       	ror	r10
    7f3c:	97 94       	ror	r9
    7f3e:	87 94       	ror	r8
    7f40:	7a 95       	dec	r23
    7f42:	d1 f7       	brne	.-12     	; 0x7f38 <md5_process+0xcf4>
    7f44:	70 2d       	mov	r23, r0
    7f46:	8c 28       	or	r8, r12
    7f48:	9d 28       	or	r9, r13
    7f4a:	ae 28       	or	r10, r14
    7f4c:	bf 28       	or	r11, r15
    7f4e:	80 0e       	add	r8, r16
    7f50:	91 1e       	adc	r9, r17
    7f52:	a2 1e       	adc	r10, r18
    7f54:	b3 1e       	adc	r11, r19
    7f56:	c9 84       	ldd	r12, Y+9	; 0x09
    7f58:	da 84       	ldd	r13, Y+10	; 0x0a
    7f5a:	eb 84       	ldd	r14, Y+11	; 0x0b
    7f5c:	fc 84       	ldd	r15, Y+12	; 0x0c
    7f5e:	f6 e5       	ldi	r31, 0x56	; 86
    7f60:	cf 1a       	sub	r12, r31
    7f62:	f8 e3       	ldi	r31, 0x38	; 56
    7f64:	df 0a       	sbc	r13, r31
    7f66:	f9 e4       	ldi	r31, 0x49	; 73
    7f68:	ef 0a       	sbc	r14, r31
    7f6a:	f6 e1       	ldi	r31, 0x16	; 22
    7f6c:	ff 0a       	sbc	r15, r31
    7f6e:	8c 0d       	add	r24, r12
    7f70:	9d 1d       	adc	r25, r13
    7f72:	ae 1d       	adc	r26, r14
    7f74:	bf 1d       	adc	r27, r15
    7f76:	75 01       	movw	r14, r10
    7f78:	64 01       	movw	r12, r8
    7f7a:	c0 26       	eor	r12, r16
    7f7c:	d1 26       	eor	r13, r17
    7f7e:	e2 26       	eor	r14, r18
    7f80:	f3 26       	eor	r15, r19
    7f82:	c4 22       	and	r12, r20
    7f84:	d5 22       	and	r13, r21
    7f86:	e6 22       	and	r14, r22
    7f88:	f7 22       	and	r15, r23
    7f8a:	c0 26       	eor	r12, r16
    7f8c:	d1 26       	eor	r13, r17
    7f8e:	e2 26       	eor	r14, r18
    7f90:	f3 26       	eor	r15, r19
    7f92:	8c 0d       	add	r24, r12
    7f94:	9d 1d       	adc	r25, r13
    7f96:	ae 1d       	adc	r26, r14
    7f98:	bf 1d       	adc	r27, r15
    7f9a:	6c 01       	movw	r12, r24
    7f9c:	7d 01       	movw	r14, r26
    7f9e:	0b 2e       	mov	r0, r27
    7fa0:	bc e0       	ldi	r27, 0x0C	; 12
    7fa2:	f6 94       	lsr	r15
    7fa4:	e7 94       	ror	r14
    7fa6:	d7 94       	ror	r13
    7fa8:	c7 94       	ror	r12
    7faa:	ba 95       	dec	r27
    7fac:	d1 f7       	brne	.-12     	; 0x7fa2 <md5_process+0xd5e>
    7fae:	b0 2d       	mov	r27, r0
    7fb0:	07 2e       	mov	r0, r23
    7fb2:	74 e1       	ldi	r23, 0x14	; 20
    7fb4:	88 0f       	add	r24, r24
    7fb6:	99 1f       	adc	r25, r25
    7fb8:	aa 1f       	adc	r26, r26
    7fba:	bb 1f       	adc	r27, r27
    7fbc:	7a 95       	dec	r23
    7fbe:	d1 f7       	brne	.-12     	; 0x7fb4 <md5_process+0xd70>
    7fc0:	70 2d       	mov	r23, r0
    7fc2:	8c 29       	or	r24, r12
    7fc4:	9d 29       	or	r25, r13
    7fc6:	ae 29       	or	r26, r14
    7fc8:	bf 29       	or	r27, r15
    7fca:	88 0d       	add	r24, r8
    7fcc:	99 1d       	adc	r25, r9
    7fce:	aa 1d       	adc	r26, r10
    7fd0:	bb 1d       	adc	r27, r11
    7fd2:	cd 8c       	ldd	r12, Y+29	; 0x1d
    7fd4:	de 8c       	ldd	r13, Y+30	; 0x1e
    7fd6:	ef 8c       	ldd	r14, Y+31	; 0x1f
    7fd8:	f8 a0       	ldd	r15, Y+32	; 0x20
    7fda:	e3 ea       	ldi	r30, 0xA3	; 163
    7fdc:	ce 1a       	sub	r12, r30
    7fde:	ef ee       	ldi	r30, 0xEF	; 239
    7fe0:	de 0a       	sbc	r13, r30
    7fe2:	e0 ed       	ldi	r30, 0xD0	; 208
    7fe4:	ee 0a       	sbc	r14, r30
    7fe6:	e9 e2       	ldi	r30, 0x29	; 41
    7fe8:	fe 0a       	sbc	r15, r30
    7fea:	4c 0d       	add	r20, r12
    7fec:	5d 1d       	adc	r21, r13
    7fee:	6e 1d       	adc	r22, r14
    7ff0:	7f 1d       	adc	r23, r15
    7ff2:	6c 01       	movw	r12, r24
    7ff4:	7d 01       	movw	r14, r26
    7ff6:	c8 24       	eor	r12, r8
    7ff8:	d9 24       	eor	r13, r9
    7ffa:	ea 24       	eor	r14, r10
    7ffc:	fb 24       	eor	r15, r11
    7ffe:	c0 22       	and	r12, r16
    8000:	d1 22       	and	r13, r17
    8002:	e2 22       	and	r14, r18
    8004:	f3 22       	and	r15, r19
    8006:	c8 24       	eor	r12, r8
    8008:	d9 24       	eor	r13, r9
    800a:	ea 24       	eor	r14, r10
    800c:	fb 24       	eor	r15, r11
    800e:	4c 0d       	add	r20, r12
    8010:	5d 1d       	adc	r21, r13
    8012:	6e 1d       	adc	r22, r14
    8014:	7f 1d       	adc	r23, r15
    8016:	6a 01       	movw	r12, r20
    8018:	7b 01       	movw	r14, r22
    801a:	cc 0c       	add	r12, r12
    801c:	dd 1c       	adc	r13, r13
    801e:	ee 1c       	adc	r14, r14
    8020:	ff 1c       	adc	r15, r15
    8022:	cc 0c       	add	r12, r12
    8024:	dd 1c       	adc	r13, r13
    8026:	ee 1c       	adc	r14, r14
    8028:	ff 1c       	adc	r15, r15
    802a:	cc 0c       	add	r12, r12
    802c:	dd 1c       	adc	r13, r13
    802e:	ee 1c       	adc	r14, r14
    8030:	ff 1c       	adc	r15, r15
    8032:	cc 0c       	add	r12, r12
    8034:	dd 1c       	adc	r13, r13
    8036:	ee 1c       	adc	r14, r14
    8038:	ff 1c       	adc	r15, r15
    803a:	cc 0c       	add	r12, r12
    803c:	dd 1c       	adc	r13, r13
    803e:	ee 1c       	adc	r14, r14
    8040:	ff 1c       	adc	r15, r15
    8042:	03 2e       	mov	r0, r19
    8044:	3b e1       	ldi	r19, 0x1B	; 27
    8046:	76 95       	lsr	r23
    8048:	67 95       	ror	r22
    804a:	57 95       	ror	r21
    804c:	47 95       	ror	r20
    804e:	3a 95       	dec	r19
    8050:	d1 f7       	brne	.-12     	; 0x8046 <md5_process+0xe02>
    8052:	30 2d       	mov	r19, r0
    8054:	4c 29       	or	r20, r12
    8056:	5d 29       	or	r21, r13
    8058:	6e 29       	or	r22, r14
    805a:	7f 29       	or	r23, r15
    805c:	48 0f       	add	r20, r24
    805e:	59 1f       	adc	r21, r25
    8060:	6a 1f       	adc	r22, r26
    8062:	7b 1f       	adc	r23, r27
    8064:	c9 a8       	ldd	r12, Y+49	; 0x31
    8066:	da a8       	ldd	r13, Y+50	; 0x32
    8068:	eb a8       	ldd	r14, Y+51	; 0x33
    806a:	fc a8       	ldd	r15, Y+52	; 0x34
    806c:	fd ea       	ldi	r31, 0xAD	; 173
    806e:	cf 1a       	sub	r12, r31
    8070:	fb ee       	ldi	r31, 0xEB	; 235
    8072:	df 0a       	sbc	r13, r31
    8074:	fb eb       	ldi	r31, 0xBB	; 187
    8076:	ef 0a       	sbc	r14, r31
    8078:	fd ef       	ldi	r31, 0xFD	; 253
    807a:	ff 0a       	sbc	r15, r31
    807c:	0c 0d       	add	r16, r12
    807e:	1d 1d       	adc	r17, r13
    8080:	2e 1d       	adc	r18, r14
    8082:	3f 1d       	adc	r19, r15
    8084:	6a 01       	movw	r12, r20
    8086:	7b 01       	movw	r14, r22
    8088:	c8 26       	eor	r12, r24
    808a:	d9 26       	eor	r13, r25
    808c:	ea 26       	eor	r14, r26
    808e:	fb 26       	eor	r15, r27
    8090:	c8 20       	and	r12, r8
    8092:	d9 20       	and	r13, r9
    8094:	ea 20       	and	r14, r10
    8096:	fb 20       	and	r15, r11
    8098:	c8 26       	eor	r12, r24
    809a:	d9 26       	eor	r13, r25
    809c:	ea 26       	eor	r14, r26
    809e:	fb 26       	eor	r15, r27
    80a0:	0c 0d       	add	r16, r12
    80a2:	1d 1d       	adc	r17, r13
    80a4:	2e 1d       	adc	r18, r14
    80a6:	3f 1d       	adc	r19, r15
    80a8:	68 01       	movw	r12, r16
    80aa:	79 01       	movw	r14, r18
    80ac:	0b 2e       	mov	r0, r27
    80ae:	b9 e0       	ldi	r27, 0x09	; 9
    80b0:	cc 0c       	add	r12, r12
    80b2:	dd 1c       	adc	r13, r13
    80b4:	ee 1c       	adc	r14, r14
    80b6:	ff 1c       	adc	r15, r15
    80b8:	ba 95       	dec	r27
    80ba:	d1 f7       	brne	.-12     	; 0x80b0 <md5_process+0xe6c>
    80bc:	b0 2d       	mov	r27, r0
    80be:	0f 2e       	mov	r0, r31
    80c0:	f7 e1       	ldi	r31, 0x17	; 23
    80c2:	36 95       	lsr	r19
    80c4:	27 95       	ror	r18
    80c6:	17 95       	ror	r17
    80c8:	07 95       	ror	r16
    80ca:	fa 95       	dec	r31
    80cc:	d1 f7       	brne	.-12     	; 0x80c2 <md5_process+0xe7e>
    80ce:	f0 2d       	mov	r31, r0
    80d0:	0c 29       	or	r16, r12
    80d2:	1d 29       	or	r17, r13
    80d4:	2e 29       	or	r18, r14
    80d6:	3f 29       	or	r19, r15
    80d8:	04 0f       	add	r16, r20
    80da:	15 1f       	adc	r17, r21
    80dc:	26 1f       	adc	r18, r22
    80de:	37 1f       	adc	r19, r23
    80e0:	29 96       	adiw	r28, 0x09	; 9
    80e2:	cc ac       	ldd	r12, Y+60	; 0x3c
    80e4:	dd ac       	ldd	r13, Y+61	; 0x3d
    80e6:	ee ac       	ldd	r14, Y+62	; 0x3e
    80e8:	ff ac       	ldd	r15, Y+63	; 0x3f
    80ea:	29 97       	sbiw	r28, 0x09	; 9
    80ec:	ef e7       	ldi	r30, 0x7F	; 127
    80ee:	ce 1a       	sub	r12, r30
    80f0:	e9 e1       	ldi	r30, 0x19	; 25
    80f2:	de 0a       	sbc	r13, r30
    80f4:	ee e5       	ldi	r30, 0x5E	; 94
    80f6:	ee 0a       	sbc	r14, r30
    80f8:	e7 e2       	ldi	r30, 0x27	; 39
    80fa:	fe 0a       	sbc	r15, r30
    80fc:	8c 0c       	add	r8, r12
    80fe:	9d 1c       	adc	r9, r13
    8100:	ae 1c       	adc	r10, r14
    8102:	bf 1c       	adc	r11, r15
    8104:	68 01       	movw	r12, r16
    8106:	79 01       	movw	r14, r18
    8108:	c4 26       	eor	r12, r20
    810a:	d5 26       	eor	r13, r21
    810c:	e6 26       	eor	r14, r22
    810e:	f7 26       	eor	r15, r23
    8110:	c8 22       	and	r12, r24
    8112:	d9 22       	and	r13, r25
    8114:	ea 22       	and	r14, r26
    8116:	fb 22       	and	r15, r27
    8118:	c4 26       	eor	r12, r20
    811a:	d5 26       	eor	r13, r21
    811c:	e6 26       	eor	r14, r22
    811e:	f7 26       	eor	r15, r23
    8120:	8c 0c       	add	r8, r12
    8122:	9d 1c       	adc	r9, r13
    8124:	ae 1c       	adc	r10, r14
    8126:	bf 1c       	adc	r11, r15
    8128:	75 01       	movw	r14, r10
    812a:	64 01       	movw	r12, r8
    812c:	0b 2e       	mov	r0, r27
    812e:	be e0       	ldi	r27, 0x0E	; 14
    8130:	cc 0c       	add	r12, r12
    8132:	dd 1c       	adc	r13, r13
    8134:	ee 1c       	adc	r14, r14
    8136:	ff 1c       	adc	r15, r15
    8138:	ba 95       	dec	r27
    813a:	d1 f7       	brne	.-12     	; 0x8130 <md5_process+0xeec>
    813c:	b0 2d       	mov	r27, r0
    813e:	07 2e       	mov	r0, r23
    8140:	72 e1       	ldi	r23, 0x12	; 18
    8142:	b6 94       	lsr	r11
    8144:	a7 94       	ror	r10
    8146:	97 94       	ror	r9
    8148:	87 94       	ror	r8
    814a:	7a 95       	dec	r23
    814c:	d1 f7       	brne	.-12     	; 0x8142 <md5_process+0xefe>
    814e:	70 2d       	mov	r23, r0
    8150:	8c 28       	or	r8, r12
    8152:	9d 28       	or	r9, r13
    8154:	ae 28       	or	r10, r14
    8156:	bf 28       	or	r11, r15
    8158:	80 0e       	add	r8, r16
    815a:	91 1e       	adc	r9, r17
    815c:	a2 1e       	adc	r10, r18
    815e:	b3 1e       	adc	r11, r19
    8160:	c9 8c       	ldd	r12, Y+25	; 0x19
    8162:	da 8c       	ldd	r13, Y+26	; 0x1a
    8164:	eb 8c       	ldd	r14, Y+27	; 0x1b
    8166:	fc 8c       	ldd	r15, Y+28	; 0x1c
    8168:	f8 e3       	ldi	r31, 0x38	; 56
    816a:	cf 1a       	sub	r12, r31
    816c:	f4 e0       	ldi	r31, 0x04	; 4
    816e:	df 0a       	sbc	r13, r31
    8170:	fc e2       	ldi	r31, 0x2C	; 44
    8172:	ef 0a       	sbc	r14, r31
    8174:	f8 e1       	ldi	r31, 0x18	; 24
    8176:	ff 0a       	sbc	r15, r31
    8178:	8c 0d       	add	r24, r12
    817a:	9d 1d       	adc	r25, r13
    817c:	ae 1d       	adc	r26, r14
    817e:	bf 1d       	adc	r27, r15
    8180:	75 01       	movw	r14, r10
    8182:	64 01       	movw	r12, r8
    8184:	c0 26       	eor	r12, r16
    8186:	d1 26       	eor	r13, r17
    8188:	e2 26       	eor	r14, r18
    818a:	f3 26       	eor	r15, r19
    818c:	c4 22       	and	r12, r20
    818e:	d5 22       	and	r13, r21
    8190:	e6 22       	and	r14, r22
    8192:	f7 22       	and	r15, r23
    8194:	c0 26       	eor	r12, r16
    8196:	d1 26       	eor	r13, r17
    8198:	e2 26       	eor	r14, r18
    819a:	f3 26       	eor	r15, r19
    819c:	8c 0d       	add	r24, r12
    819e:	9d 1d       	adc	r25, r13
    81a0:	ae 1d       	adc	r26, r14
    81a2:	bf 1d       	adc	r27, r15
    81a4:	6c 01       	movw	r12, r24
    81a6:	7d 01       	movw	r14, r26
    81a8:	0b 2e       	mov	r0, r27
    81aa:	bc e0       	ldi	r27, 0x0C	; 12
    81ac:	f6 94       	lsr	r15
    81ae:	e7 94       	ror	r14
    81b0:	d7 94       	ror	r13
    81b2:	c7 94       	ror	r12
    81b4:	ba 95       	dec	r27
    81b6:	d1 f7       	brne	.-12     	; 0x81ac <md5_process+0xf68>
    81b8:	b0 2d       	mov	r27, r0
    81ba:	07 2e       	mov	r0, r23
    81bc:	74 e1       	ldi	r23, 0x14	; 20
    81be:	88 0f       	add	r24, r24
    81c0:	99 1f       	adc	r25, r25
    81c2:	aa 1f       	adc	r26, r26
    81c4:	bb 1f       	adc	r27, r27
    81c6:	7a 95       	dec	r23
    81c8:	d1 f7       	brne	.-12     	; 0x81be <md5_process+0xf7a>
    81ca:	70 2d       	mov	r23, r0
    81cc:	8c 29       	or	r24, r12
    81ce:	9d 29       	or	r25, r13
    81d0:	ae 29       	or	r26, r14
    81d2:	bf 29       	or	r27, r15
    81d4:	88 0d       	add	r24, r8
    81d6:	99 1d       	adc	r25, r9
    81d8:	aa 1d       	adc	r26, r10
    81da:	bb 1d       	adc	r27, r11
    81dc:	cd a4       	ldd	r12, Y+45	; 0x2d
    81de:	de a4       	ldd	r13, Y+46	; 0x2e
    81e0:	ef a4       	ldd	r14, Y+47	; 0x2f
    81e2:	f8 a8       	ldd	r15, Y+48	; 0x30
    81e4:	ea e1       	ldi	r30, 0x1A	; 26
    81e6:	ce 1a       	sub	r12, r30
    81e8:	e2 e3       	ldi	r30, 0x32	; 50
    81ea:	de 0a       	sbc	r13, r30
    81ec:	ee e1       	ldi	r30, 0x1E	; 30
    81ee:	ee 0a       	sbc	r14, r30
    81f0:	ee ed       	ldi	r30, 0xDE	; 222
    81f2:	fe 0a       	sbc	r15, r30
    81f4:	4c 0d       	add	r20, r12
    81f6:	5d 1d       	adc	r21, r13
    81f8:	6e 1d       	adc	r22, r14
    81fa:	7f 1d       	adc	r23, r15
    81fc:	6c 01       	movw	r12, r24
    81fe:	7d 01       	movw	r14, r26
    8200:	c8 24       	eor	r12, r8
    8202:	d9 24       	eor	r13, r9
    8204:	ea 24       	eor	r14, r10
    8206:	fb 24       	eor	r15, r11
    8208:	c0 22       	and	r12, r16
    820a:	d1 22       	and	r13, r17
    820c:	e2 22       	and	r14, r18
    820e:	f3 22       	and	r15, r19
    8210:	c8 24       	eor	r12, r8
    8212:	d9 24       	eor	r13, r9
    8214:	ea 24       	eor	r14, r10
    8216:	fb 24       	eor	r15, r11
    8218:	4c 0d       	add	r20, r12
    821a:	5d 1d       	adc	r21, r13
    821c:	6e 1d       	adc	r22, r14
    821e:	7f 1d       	adc	r23, r15
    8220:	6a 01       	movw	r12, r20
    8222:	7b 01       	movw	r14, r22
    8224:	cc 0c       	add	r12, r12
    8226:	dd 1c       	adc	r13, r13
    8228:	ee 1c       	adc	r14, r14
    822a:	ff 1c       	adc	r15, r15
    822c:	cc 0c       	add	r12, r12
    822e:	dd 1c       	adc	r13, r13
    8230:	ee 1c       	adc	r14, r14
    8232:	ff 1c       	adc	r15, r15
    8234:	cc 0c       	add	r12, r12
    8236:	dd 1c       	adc	r13, r13
    8238:	ee 1c       	adc	r14, r14
    823a:	ff 1c       	adc	r15, r15
    823c:	cc 0c       	add	r12, r12
    823e:	dd 1c       	adc	r13, r13
    8240:	ee 1c       	adc	r14, r14
    8242:	ff 1c       	adc	r15, r15
    8244:	cc 0c       	add	r12, r12
    8246:	dd 1c       	adc	r13, r13
    8248:	ee 1c       	adc	r14, r14
    824a:	ff 1c       	adc	r15, r15
    824c:	03 2e       	mov	r0, r19
    824e:	3b e1       	ldi	r19, 0x1B	; 27
    8250:	76 95       	lsr	r23
    8252:	67 95       	ror	r22
    8254:	57 95       	ror	r21
    8256:	47 95       	ror	r20
    8258:	3a 95       	dec	r19
    825a:	d1 f7       	brne	.-12     	; 0x8250 <__stack+0x51>
    825c:	30 2d       	mov	r19, r0
    825e:	4c 29       	or	r20, r12
    8260:	5d 29       	or	r21, r13
    8262:	6e 29       	or	r22, r14
    8264:	7f 29       	or	r23, r15
    8266:	48 0f       	add	r20, r24
    8268:	59 1f       	adc	r21, r25
    826a:	6a 1f       	adc	r22, r26
    826c:	7b 1f       	adc	r23, r27
    826e:	25 96       	adiw	r28, 0x05	; 5
    8270:	cc ac       	ldd	r12, Y+60	; 0x3c
    8272:	dd ac       	ldd	r13, Y+61	; 0x3d
    8274:	ee ac       	ldd	r14, Y+62	; 0x3e
    8276:	ff ac       	ldd	r15, Y+63	; 0x3f
    8278:	25 97       	sbiw	r28, 0x05	; 5
    827a:	fa e2       	ldi	r31, 0x2A	; 42
    827c:	cf 1a       	sub	r12, r31
    827e:	f8 ef       	ldi	r31, 0xF8	; 248
    8280:	df 0a       	sbc	r13, r31
    8282:	f8 ec       	ldi	r31, 0xC8	; 200
    8284:	ef 0a       	sbc	r14, r31
    8286:	fc e3       	ldi	r31, 0x3C	; 60
    8288:	ff 0a       	sbc	r15, r31
    828a:	0c 0d       	add	r16, r12
    828c:	1d 1d       	adc	r17, r13
    828e:	2e 1d       	adc	r18, r14
    8290:	3f 1d       	adc	r19, r15
    8292:	6a 01       	movw	r12, r20
    8294:	7b 01       	movw	r14, r22
    8296:	c8 26       	eor	r12, r24
    8298:	d9 26       	eor	r13, r25
    829a:	ea 26       	eor	r14, r26
    829c:	fb 26       	eor	r15, r27
    829e:	c8 20       	and	r12, r8
    82a0:	d9 20       	and	r13, r9
    82a2:	ea 20       	and	r14, r10
    82a4:	fb 20       	and	r15, r11
    82a6:	c8 26       	eor	r12, r24
    82a8:	d9 26       	eor	r13, r25
    82aa:	ea 26       	eor	r14, r26
    82ac:	fb 26       	eor	r15, r27
    82ae:	0c 0d       	add	r16, r12
    82b0:	1d 1d       	adc	r17, r13
    82b2:	2e 1d       	adc	r18, r14
    82b4:	3f 1d       	adc	r19, r15
    82b6:	68 01       	movw	r12, r16
    82b8:	79 01       	movw	r14, r18
    82ba:	0b 2e       	mov	r0, r27
    82bc:	b9 e0       	ldi	r27, 0x09	; 9
    82be:	cc 0c       	add	r12, r12
    82c0:	dd 1c       	adc	r13, r13
    82c2:	ee 1c       	adc	r14, r14
    82c4:	ff 1c       	adc	r15, r15
    82c6:	ba 95       	dec	r27
    82c8:	d1 f7       	brne	.-12     	; 0x82be <__stack+0xbf>
    82ca:	b0 2d       	mov	r27, r0
    82cc:	0f 2e       	mov	r0, r31
    82ce:	f7 e1       	ldi	r31, 0x17	; 23
    82d0:	36 95       	lsr	r19
    82d2:	27 95       	ror	r18
    82d4:	17 95       	ror	r17
    82d6:	07 95       	ror	r16
    82d8:	fa 95       	dec	r31
    82da:	d1 f7       	brne	.-12     	; 0x82d0 <__stack+0xd1>
    82dc:	f0 2d       	mov	r31, r0
    82de:	0c 29       	or	r16, r12
    82e0:	1d 29       	or	r17, r13
    82e2:	2e 29       	or	r18, r14
    82e4:	3f 29       	or	r19, r15
    82e6:	04 0f       	add	r16, r20
    82e8:	15 1f       	adc	r17, r21
    82ea:	26 1f       	adc	r18, r22
    82ec:	37 1f       	adc	r19, r23
    82ee:	cd 88       	ldd	r12, Y+21	; 0x15
    82f0:	de 88       	ldd	r13, Y+22	; 0x16
    82f2:	ef 88       	ldd	r14, Y+23	; 0x17
    82f4:	f8 8c       	ldd	r15, Y+24	; 0x18
    82f6:	e9 e7       	ldi	r30, 0x79	; 121
    82f8:	ce 1a       	sub	r12, r30
    82fa:	e2 ef       	ldi	r30, 0xF2	; 242
    82fc:	de 0a       	sbc	r13, r30
    82fe:	ea e2       	ldi	r30, 0x2A	; 42
    8300:	ee 0a       	sbc	r14, r30
    8302:	eb e0       	ldi	r30, 0x0B	; 11
    8304:	fe 0a       	sbc	r15, r30
    8306:	8c 0c       	add	r8, r12
    8308:	9d 1c       	adc	r9, r13
    830a:	ae 1c       	adc	r10, r14
    830c:	bf 1c       	adc	r11, r15
    830e:	68 01       	movw	r12, r16
    8310:	79 01       	movw	r14, r18
    8312:	c4 26       	eor	r12, r20
    8314:	d5 26       	eor	r13, r21
    8316:	e6 26       	eor	r14, r22
    8318:	f7 26       	eor	r15, r23
    831a:	c8 22       	and	r12, r24
    831c:	d9 22       	and	r13, r25
    831e:	ea 22       	and	r14, r26
    8320:	fb 22       	and	r15, r27
    8322:	c4 26       	eor	r12, r20
    8324:	d5 26       	eor	r13, r21
    8326:	e6 26       	eor	r14, r22
    8328:	f7 26       	eor	r15, r23
    832a:	8c 0c       	add	r8, r12
    832c:	9d 1c       	adc	r9, r13
    832e:	ae 1c       	adc	r10, r14
    8330:	bf 1c       	adc	r11, r15
    8332:	75 01       	movw	r14, r10
    8334:	64 01       	movw	r12, r8
    8336:	0b 2e       	mov	r0, r27
    8338:	be e0       	ldi	r27, 0x0E	; 14
    833a:	cc 0c       	add	r12, r12
    833c:	dd 1c       	adc	r13, r13
    833e:	ee 1c       	adc	r14, r14
    8340:	ff 1c       	adc	r15, r15
    8342:	ba 95       	dec	r27
    8344:	d1 f7       	brne	.-12     	; 0x833a <__stack+0x13b>
    8346:	b0 2d       	mov	r27, r0
    8348:	07 2e       	mov	r0, r23
    834a:	72 e1       	ldi	r23, 0x12	; 18
    834c:	b6 94       	lsr	r11
    834e:	a7 94       	ror	r10
    8350:	97 94       	ror	r9
    8352:	87 94       	ror	r8
    8354:	7a 95       	dec	r23
    8356:	d1 f7       	brne	.-12     	; 0x834c <__stack+0x14d>
    8358:	70 2d       	mov	r23, r0
    835a:	8c 28       	or	r8, r12
    835c:	9d 28       	or	r9, r13
    835e:	ae 28       	or	r10, r14
    8360:	bf 28       	or	r11, r15
    8362:	80 0e       	add	r8, r16
    8364:	91 1e       	adc	r9, r17
    8366:	a2 1e       	adc	r10, r18
    8368:	b3 1e       	adc	r11, r19
    836a:	c9 a4       	ldd	r12, Y+41	; 0x29
    836c:	da a4       	ldd	r13, Y+42	; 0x2a
    836e:	eb a4       	ldd	r14, Y+43	; 0x2b
    8370:	fc a4       	ldd	r15, Y+44	; 0x2c
    8372:	f3 e1       	ldi	r31, 0x13	; 19
    8374:	cf 1a       	sub	r12, r31
    8376:	fb ee       	ldi	r31, 0xEB	; 235
    8378:	df 0a       	sbc	r13, r31
    837a:	f5 ea       	ldi	r31, 0xA5	; 165
    837c:	ef 0a       	sbc	r14, r31
    837e:	fa eb       	ldi	r31, 0xBA	; 186
    8380:	ff 0a       	sbc	r15, r31
    8382:	8c 0d       	add	r24, r12
    8384:	9d 1d       	adc	r25, r13
    8386:	ae 1d       	adc	r26, r14
    8388:	bf 1d       	adc	r27, r15
    838a:	75 01       	movw	r14, r10
    838c:	64 01       	movw	r12, r8
    838e:	c0 26       	eor	r12, r16
    8390:	d1 26       	eor	r13, r17
    8392:	e2 26       	eor	r14, r18
    8394:	f3 26       	eor	r15, r19
    8396:	c4 22       	and	r12, r20
    8398:	d5 22       	and	r13, r21
    839a:	e6 22       	and	r14, r22
    839c:	f7 22       	and	r15, r23
    839e:	c0 26       	eor	r12, r16
    83a0:	d1 26       	eor	r13, r17
    83a2:	e2 26       	eor	r14, r18
    83a4:	f3 26       	eor	r15, r19
    83a6:	8c 0d       	add	r24, r12
    83a8:	9d 1d       	adc	r25, r13
    83aa:	ae 1d       	adc	r26, r14
    83ac:	bf 1d       	adc	r27, r15
    83ae:	6c 01       	movw	r12, r24
    83b0:	7d 01       	movw	r14, r26
    83b2:	0b 2e       	mov	r0, r27
    83b4:	bc e0       	ldi	r27, 0x0C	; 12
    83b6:	f6 94       	lsr	r15
    83b8:	e7 94       	ror	r14
    83ba:	d7 94       	ror	r13
    83bc:	c7 94       	ror	r12
    83be:	ba 95       	dec	r27
    83c0:	d1 f7       	brne	.-12     	; 0x83b6 <__stack+0x1b7>
    83c2:	b0 2d       	mov	r27, r0
    83c4:	07 2e       	mov	r0, r23
    83c6:	74 e1       	ldi	r23, 0x14	; 20
    83c8:	88 0f       	add	r24, r24
    83ca:	99 1f       	adc	r25, r25
    83cc:	aa 1f       	adc	r26, r26
    83ce:	bb 1f       	adc	r27, r27
    83d0:	7a 95       	dec	r23
    83d2:	d1 f7       	brne	.-12     	; 0x83c8 <__stack+0x1c9>
    83d4:	70 2d       	mov	r23, r0
    83d6:	8c 29       	or	r24, r12
    83d8:	9d 29       	or	r25, r13
    83da:	ae 29       	or	r26, r14
    83dc:	bf 29       	or	r27, r15
    83de:	88 0d       	add	r24, r8
    83e0:	99 1d       	adc	r25, r9
    83e2:	aa 1d       	adc	r26, r10
    83e4:	bb 1d       	adc	r27, r11
    83e6:	21 96       	adiw	r28, 0x01	; 1
    83e8:	cc ac       	ldd	r12, Y+60	; 0x3c
    83ea:	dd ac       	ldd	r13, Y+61	; 0x3d
    83ec:	ee ac       	ldd	r14, Y+62	; 0x3e
    83ee:	ff ac       	ldd	r15, Y+63	; 0x3f
    83f0:	21 97       	sbiw	r28, 0x01	; 1
    83f2:	eb ef       	ldi	r30, 0xFB	; 251
    83f4:	ce 1a       	sub	r12, r30
    83f6:	e6 e1       	ldi	r30, 0x16	; 22
    83f8:	de 0a       	sbc	r13, r30
    83fa:	ec e1       	ldi	r30, 0x1C	; 28
    83fc:	ee 0a       	sbc	r14, r30
    83fe:	e6 e5       	ldi	r30, 0x56	; 86
    8400:	fe 0a       	sbc	r15, r30
    8402:	4c 0d       	add	r20, r12
    8404:	5d 1d       	adc	r21, r13
    8406:	6e 1d       	adc	r22, r14
    8408:	7f 1d       	adc	r23, r15
    840a:	6c 01       	movw	r12, r24
    840c:	7d 01       	movw	r14, r26
    840e:	c8 24       	eor	r12, r8
    8410:	d9 24       	eor	r13, r9
    8412:	ea 24       	eor	r14, r10
    8414:	fb 24       	eor	r15, r11
    8416:	c0 22       	and	r12, r16
    8418:	d1 22       	and	r13, r17
    841a:	e2 22       	and	r14, r18
    841c:	f3 22       	and	r15, r19
    841e:	c8 24       	eor	r12, r8
    8420:	d9 24       	eor	r13, r9
    8422:	ea 24       	eor	r14, r10
    8424:	fb 24       	eor	r15, r11
    8426:	4c 0d       	add	r20, r12
    8428:	5d 1d       	adc	r21, r13
    842a:	6e 1d       	adc	r22, r14
    842c:	7f 1d       	adc	r23, r15
    842e:	6a 01       	movw	r12, r20
    8430:	7b 01       	movw	r14, r22
    8432:	cc 0c       	add	r12, r12
    8434:	dd 1c       	adc	r13, r13
    8436:	ee 1c       	adc	r14, r14
    8438:	ff 1c       	adc	r15, r15
    843a:	cc 0c       	add	r12, r12
    843c:	dd 1c       	adc	r13, r13
    843e:	ee 1c       	adc	r14, r14
    8440:	ff 1c       	adc	r15, r15
    8442:	cc 0c       	add	r12, r12
    8444:	dd 1c       	adc	r13, r13
    8446:	ee 1c       	adc	r14, r14
    8448:	ff 1c       	adc	r15, r15
    844a:	cc 0c       	add	r12, r12
    844c:	dd 1c       	adc	r13, r13
    844e:	ee 1c       	adc	r14, r14
    8450:	ff 1c       	adc	r15, r15
    8452:	cc 0c       	add	r12, r12
    8454:	dd 1c       	adc	r13, r13
    8456:	ee 1c       	adc	r14, r14
    8458:	ff 1c       	adc	r15, r15
    845a:	03 2e       	mov	r0, r19
    845c:	3b e1       	ldi	r19, 0x1B	; 27
    845e:	76 95       	lsr	r23
    8460:	67 95       	ror	r22
    8462:	57 95       	ror	r21
    8464:	47 95       	ror	r20
    8466:	3a 95       	dec	r19
    8468:	d1 f7       	brne	.-12     	; 0x845e <__stack+0x25f>
    846a:	30 2d       	mov	r19, r0
    846c:	4c 29       	or	r20, r12
    846e:	5d 29       	or	r21, r13
    8470:	6e 29       	or	r22, r14
    8472:	7f 29       	or	r23, r15
    8474:	48 0f       	add	r20, r24
    8476:	59 1f       	adc	r21, r25
    8478:	6a 1f       	adc	r22, r26
    847a:	7b 1f       	adc	r23, r27
    847c:	c9 88       	ldd	r12, Y+17	; 0x11
    847e:	da 88       	ldd	r13, Y+18	; 0x12
    8480:	eb 88       	ldd	r14, Y+19	; 0x13
    8482:	fc 88       	ldd	r15, Y+20	; 0x14
    8484:	f8 e0       	ldi	r31, 0x08	; 8
    8486:	cf 1a       	sub	r12, r31
    8488:	fc e5       	ldi	r31, 0x5C	; 92
    848a:	df 0a       	sbc	r13, r31
    848c:	f0 e1       	ldi	r31, 0x10	; 16
    848e:	ef 0a       	sbc	r14, r31
    8490:	f3 e0       	ldi	r31, 0x03	; 3
    8492:	ff 0a       	sbc	r15, r31
    8494:	0c 0d       	add	r16, r12
    8496:	1d 1d       	adc	r17, r13
    8498:	2e 1d       	adc	r18, r14
    849a:	3f 1d       	adc	r19, r15
    849c:	6a 01       	movw	r12, r20
    849e:	7b 01       	movw	r14, r22
    84a0:	c8 26       	eor	r12, r24
    84a2:	d9 26       	eor	r13, r25
    84a4:	ea 26       	eor	r14, r26
    84a6:	fb 26       	eor	r15, r27
    84a8:	c8 20       	and	r12, r8
    84aa:	d9 20       	and	r13, r9
    84ac:	ea 20       	and	r14, r10
    84ae:	fb 20       	and	r15, r11
    84b0:	c8 26       	eor	r12, r24
    84b2:	d9 26       	eor	r13, r25
    84b4:	ea 26       	eor	r14, r26
    84b6:	fb 26       	eor	r15, r27
    84b8:	0c 0d       	add	r16, r12
    84ba:	1d 1d       	adc	r17, r13
    84bc:	2e 1d       	adc	r18, r14
    84be:	3f 1d       	adc	r19, r15
    84c0:	68 01       	movw	r12, r16
    84c2:	79 01       	movw	r14, r18
    84c4:	0b 2e       	mov	r0, r27
    84c6:	b9 e0       	ldi	r27, 0x09	; 9
    84c8:	cc 0c       	add	r12, r12
    84ca:	dd 1c       	adc	r13, r13
    84cc:	ee 1c       	adc	r14, r14
    84ce:	ff 1c       	adc	r15, r15
    84d0:	ba 95       	dec	r27
    84d2:	d1 f7       	brne	.-12     	; 0x84c8 <__stack+0x2c9>
    84d4:	b0 2d       	mov	r27, r0
    84d6:	0f 2e       	mov	r0, r31
    84d8:	f7 e1       	ldi	r31, 0x17	; 23
    84da:	36 95       	lsr	r19
    84dc:	27 95       	ror	r18
    84de:	17 95       	ror	r17
    84e0:	07 95       	ror	r16
    84e2:	fa 95       	dec	r31
    84e4:	d1 f7       	brne	.-12     	; 0x84da <__stack+0x2db>
    84e6:	f0 2d       	mov	r31, r0
    84e8:	0c 29       	or	r16, r12
    84ea:	1d 29       	or	r17, r13
    84ec:	2e 29       	or	r18, r14
    84ee:	3f 29       	or	r19, r15
    84f0:	04 0f       	add	r16, r20
    84f2:	15 1f       	adc	r17, r21
    84f4:	26 1f       	adc	r18, r22
    84f6:	37 1f       	adc	r19, r23
    84f8:	cd a0       	ldd	r12, Y+37	; 0x25
    84fa:	de a0       	ldd	r13, Y+38	; 0x26
    84fc:	ef a0       	ldd	r14, Y+39	; 0x27
    84fe:	f8 a4       	ldd	r15, Y+40	; 0x28
    8500:	e7 e2       	ldi	r30, 0x27	; 39
    8502:	ce 1a       	sub	r12, r30
    8504:	ed ef       	ldi	r30, 0xFD	; 253
    8506:	de 0a       	sbc	r13, r30
    8508:	e0 e9       	ldi	r30, 0x90	; 144
    850a:	ee 0a       	sbc	r14, r30
    850c:	e8 e9       	ldi	r30, 0x98	; 152
    850e:	fe 0a       	sbc	r15, r30
    8510:	8c 0c       	add	r8, r12
    8512:	9d 1c       	adc	r9, r13
    8514:	ae 1c       	adc	r10, r14
    8516:	bf 1c       	adc	r11, r15
    8518:	68 01       	movw	r12, r16
    851a:	79 01       	movw	r14, r18
    851c:	c4 26       	eor	r12, r20
    851e:	d5 26       	eor	r13, r21
    8520:	e6 26       	eor	r14, r22
    8522:	f7 26       	eor	r15, r23
    8524:	c8 22       	and	r12, r24
    8526:	d9 22       	and	r13, r25
    8528:	ea 22       	and	r14, r26
    852a:	fb 22       	and	r15, r27
    852c:	c4 26       	eor	r12, r20
    852e:	d5 26       	eor	r13, r21
    8530:	e6 26       	eor	r14, r22
    8532:	f7 26       	eor	r15, r23
    8534:	8c 0c       	add	r8, r12
    8536:	9d 1c       	adc	r9, r13
    8538:	ae 1c       	adc	r10, r14
    853a:	bf 1c       	adc	r11, r15
    853c:	75 01       	movw	r14, r10
    853e:	64 01       	movw	r12, r8
    8540:	0b 2e       	mov	r0, r27
    8542:	be e0       	ldi	r27, 0x0E	; 14
    8544:	cc 0c       	add	r12, r12
    8546:	dd 1c       	adc	r13, r13
    8548:	ee 1c       	adc	r14, r14
    854a:	ff 1c       	adc	r15, r15
    854c:	ba 95       	dec	r27
    854e:	d1 f7       	brne	.-12     	; 0x8544 <__stack+0x345>
    8550:	b0 2d       	mov	r27, r0
    8552:	07 2e       	mov	r0, r23
    8554:	72 e1       	ldi	r23, 0x12	; 18
    8556:	b6 94       	lsr	r11
    8558:	a7 94       	ror	r10
    855a:	97 94       	ror	r9
    855c:	87 94       	ror	r8
    855e:	7a 95       	dec	r23
    8560:	d1 f7       	brne	.-12     	; 0x8556 <__stack+0x357>
    8562:	70 2d       	mov	r23, r0
    8564:	8c 28       	or	r8, r12
    8566:	9d 28       	or	r9, r13
    8568:	ae 28       	or	r10, r14
    856a:	bf 28       	or	r11, r15
    856c:	80 0e       	add	r8, r16
    856e:	91 1e       	adc	r9, r17
    8570:	a2 1e       	adc	r10, r18
    8572:	b3 1e       	adc	r11, r19
    8574:	75 01       	movw	r14, r10
    8576:	64 01       	movw	r12, r8
    8578:	c0 26       	eor	r12, r16
    857a:	d1 26       	eor	r13, r17
    857c:	e2 26       	eor	r14, r18
    857e:	f3 26       	eor	r15, r19
    8580:	49 ac       	ldd	r4, Y+57	; 0x39
    8582:	5a ac       	ldd	r5, Y+58	; 0x3a
    8584:	6b ac       	ldd	r6, Y+59	; 0x3b
    8586:	7c ac       	ldd	r7, Y+60	; 0x3c
    8588:	f6 e7       	ldi	r31, 0x76	; 118
    858a:	4f 1a       	sub	r4, r31
    858c:	f3 eb       	ldi	r31, 0xB3	; 179
    858e:	5f 0a       	sbc	r5, r31
    8590:	f5 ed       	ldi	r31, 0xD5	; 213
    8592:	6f 0a       	sbc	r6, r31
    8594:	f2 e7       	ldi	r31, 0x72	; 114
    8596:	7f 0a       	sbc	r7, r31
    8598:	84 0d       	add	r24, r4
    859a:	95 1d       	adc	r25, r5
    859c:	a6 1d       	adc	r26, r6
    859e:	b7 1d       	adc	r27, r7
    85a0:	26 01       	movw	r4, r12
    85a2:	37 01       	movw	r6, r14
    85a4:	44 22       	and	r4, r20
    85a6:	55 22       	and	r5, r21
    85a8:	66 22       	and	r6, r22
    85aa:	77 22       	and	r7, r23
    85ac:	40 26       	eor	r4, r16
    85ae:	51 26       	eor	r5, r17
    85b0:	62 26       	eor	r6, r18
    85b2:	73 26       	eor	r7, r19
    85b4:	84 0d       	add	r24, r4
    85b6:	95 1d       	adc	r25, r5
    85b8:	a6 1d       	adc	r26, r6
    85ba:	b7 1d       	adc	r27, r7
    85bc:	2c 01       	movw	r4, r24
    85be:	3d 01       	movw	r6, r26
    85c0:	03 2e       	mov	r0, r19
    85c2:	3c e0       	ldi	r19, 0x0C	; 12
    85c4:	76 94       	lsr	r7
    85c6:	67 94       	ror	r6
    85c8:	57 94       	ror	r5
    85ca:	47 94       	ror	r4
    85cc:	3a 95       	dec	r19
    85ce:	d1 f7       	brne	.-12     	; 0x85c4 <__stack+0x3c5>
    85d0:	30 2d       	mov	r19, r0
    85d2:	07 2e       	mov	r0, r23
    85d4:	74 e1       	ldi	r23, 0x14	; 20
    85d6:	88 0f       	add	r24, r24
    85d8:	99 1f       	adc	r25, r25
    85da:	aa 1f       	adc	r26, r26
    85dc:	bb 1f       	adc	r27, r27
    85de:	7a 95       	dec	r23
    85e0:	d1 f7       	brne	.-12     	; 0x85d6 <__stack+0x3d7>
    85e2:	70 2d       	mov	r23, r0
    85e4:	84 29       	or	r24, r4
    85e6:	95 29       	or	r25, r5
    85e8:	a6 29       	or	r26, r6
    85ea:	b7 29       	or	r27, r7
    85ec:	88 0d       	add	r24, r8
    85ee:	99 1d       	adc	r25, r9
    85f0:	aa 1d       	adc	r26, r10
    85f2:	bb 1d       	adc	r27, r11
    85f4:	4d 8c       	ldd	r4, Y+29	; 0x1d
    85f6:	5e 8c       	ldd	r5, Y+30	; 0x1e
    85f8:	6f 8c       	ldd	r6, Y+31	; 0x1f
    85fa:	78 a0       	ldd	r7, Y+32	; 0x20
    85fc:	ee eb       	ldi	r30, 0xBE	; 190
    85fe:	4e 1a       	sub	r4, r30
    8600:	e6 ec       	ldi	r30, 0xC6	; 198
    8602:	5e 0a       	sbc	r5, r30
    8604:	e5 e0       	ldi	r30, 0x05	; 5
    8606:	6e 0a       	sbc	r6, r30
    8608:	71 08       	sbc	r7, r1
    860a:	44 0d       	add	r20, r4
    860c:	55 1d       	adc	r21, r5
    860e:	66 1d       	adc	r22, r6
    8610:	77 1d       	adc	r23, r7
    8612:	c8 26       	eor	r12, r24
    8614:	d9 26       	eor	r13, r25
    8616:	ea 26       	eor	r14, r26
    8618:	fb 26       	eor	r15, r27
    861a:	4c 0d       	add	r20, r12
    861c:	5d 1d       	adc	r21, r13
    861e:	6e 1d       	adc	r22, r14
    8620:	7f 1d       	adc	r23, r15
    8622:	6a 01       	movw	r12, r20
    8624:	7b 01       	movw	r14, r22
    8626:	cc 0c       	add	r12, r12
    8628:	dd 1c       	adc	r13, r13
    862a:	ee 1c       	adc	r14, r14
    862c:	ff 1c       	adc	r15, r15
    862e:	cc 0c       	add	r12, r12
    8630:	dd 1c       	adc	r13, r13
    8632:	ee 1c       	adc	r14, r14
    8634:	ff 1c       	adc	r15, r15
    8636:	cc 0c       	add	r12, r12
    8638:	dd 1c       	adc	r13, r13
    863a:	ee 1c       	adc	r14, r14
    863c:	ff 1c       	adc	r15, r15
    863e:	cc 0c       	add	r12, r12
    8640:	dd 1c       	adc	r13, r13
    8642:	ee 1c       	adc	r14, r14
    8644:	ff 1c       	adc	r15, r15
    8646:	03 2e       	mov	r0, r19
    8648:	3c e1       	ldi	r19, 0x1C	; 28
    864a:	76 95       	lsr	r23
    864c:	67 95       	ror	r22
    864e:	57 95       	ror	r21
    8650:	47 95       	ror	r20
    8652:	3a 95       	dec	r19
    8654:	d1 f7       	brne	.-12     	; 0x864a <__stack+0x44b>
    8656:	30 2d       	mov	r19, r0
    8658:	4c 29       	or	r20, r12
    865a:	5d 29       	or	r21, r13
    865c:	6e 29       	or	r22, r14
    865e:	7f 29       	or	r23, r15
    8660:	48 0f       	add	r20, r24
    8662:	59 1f       	adc	r21, r25
    8664:	6a 1f       	adc	r22, r26
    8666:	7b 1f       	adc	r23, r27
    8668:	c9 a4       	ldd	r12, Y+41	; 0x29
    866a:	da a4       	ldd	r13, Y+42	; 0x2a
    866c:	eb a4       	ldd	r14, Y+43	; 0x2b
    866e:	fc a4       	ldd	r15, Y+44	; 0x2c
    8670:	ff e7       	ldi	r31, 0x7F	; 127
    8672:	cf 1a       	sub	r12, r31
    8674:	f9 e0       	ldi	r31, 0x09	; 9
    8676:	df 0a       	sbc	r13, r31
    8678:	fe e8       	ldi	r31, 0x8E	; 142
    867a:	ef 0a       	sbc	r14, r31
    867c:	f8 e7       	ldi	r31, 0x78	; 120
    867e:	ff 0a       	sbc	r15, r31
    8680:	0c 0d       	add	r16, r12
    8682:	1d 1d       	adc	r17, r13
    8684:	2e 1d       	adc	r18, r14
    8686:	3f 1d       	adc	r19, r15
    8688:	6c 01       	movw	r12, r24
    868a:	7d 01       	movw	r14, r26
    868c:	c8 24       	eor	r12, r8
    868e:	d9 24       	eor	r13, r9
    8690:	ea 24       	eor	r14, r10
    8692:	fb 24       	eor	r15, r11
    8694:	c4 26       	eor	r12, r20
    8696:	d5 26       	eor	r13, r21
    8698:	e6 26       	eor	r14, r22
    869a:	f7 26       	eor	r15, r23
    869c:	0c 0d       	add	r16, r12
    869e:	1d 1d       	adc	r17, r13
    86a0:	2e 1d       	adc	r18, r14
    86a2:	3f 1d       	adc	r19, r15
    86a4:	68 01       	movw	r12, r16
    86a6:	79 01       	movw	r14, r18
    86a8:	0b 2e       	mov	r0, r27
    86aa:	bb e0       	ldi	r27, 0x0B	; 11
    86ac:	cc 0c       	add	r12, r12
    86ae:	dd 1c       	adc	r13, r13
    86b0:	ee 1c       	adc	r14, r14
    86b2:	ff 1c       	adc	r15, r15
    86b4:	ba 95       	dec	r27
    86b6:	d1 f7       	brne	.-12     	; 0x86ac <__stack+0x4ad>
    86b8:	b0 2d       	mov	r27, r0
    86ba:	0f 2e       	mov	r0, r31
    86bc:	f5 e1       	ldi	r31, 0x15	; 21
    86be:	36 95       	lsr	r19
    86c0:	27 95       	ror	r18
    86c2:	17 95       	ror	r17
    86c4:	07 95       	ror	r16
    86c6:	fa 95       	dec	r31
    86c8:	d1 f7       	brne	.-12     	; 0x86be <__stack+0x4bf>
    86ca:	f0 2d       	mov	r31, r0
    86cc:	0c 29       	or	r16, r12
    86ce:	1d 29       	or	r17, r13
    86d0:	2e 29       	or	r18, r14
    86d2:	3f 29       	or	r19, r15
    86d4:	04 0f       	add	r16, r20
    86d6:	15 1f       	adc	r17, r21
    86d8:	26 1f       	adc	r18, r22
    86da:	37 1f       	adc	r19, r23
    86dc:	cd a8       	ldd	r12, Y+53	; 0x35
    86de:	de a8       	ldd	r13, Y+54	; 0x36
    86e0:	ef a8       	ldd	r14, Y+55	; 0x37
    86e2:	f8 ac       	ldd	r15, Y+56	; 0x38
    86e4:	ee ed       	ldi	r30, 0xDE	; 222
    86e6:	ce 1a       	sub	r12, r30
    86e8:	ee e9       	ldi	r30, 0x9E	; 158
    86ea:	de 0a       	sbc	r13, r30
    86ec:	e2 e6       	ldi	r30, 0x62	; 98
    86ee:	ee 0a       	sbc	r14, r30
    86f0:	e2 e9       	ldi	r30, 0x92	; 146
    86f2:	fe 0a       	sbc	r15, r30
    86f4:	8c 0c       	add	r8, r12
    86f6:	9d 1c       	adc	r9, r13
    86f8:	ae 1c       	adc	r10, r14
    86fa:	bf 1c       	adc	r11, r15
    86fc:	6a 01       	movw	r12, r20
    86fe:	7b 01       	movw	r14, r22
    8700:	c8 26       	eor	r12, r24
    8702:	d9 26       	eor	r13, r25
    8704:	ea 26       	eor	r14, r26
    8706:	fb 26       	eor	r15, r27
    8708:	c0 26       	eor	r12, r16
    870a:	d1 26       	eor	r13, r17
    870c:	e2 26       	eor	r14, r18
    870e:	f3 26       	eor	r15, r19
    8710:	8c 0c       	add	r8, r12
    8712:	9d 1c       	adc	r9, r13
    8714:	ae 1c       	adc	r10, r14
    8716:	bf 1c       	adc	r11, r15
    8718:	64 01       	movw	r12, r8
    871a:	45 01       	movw	r8, r10
    871c:	56 01       	movw	r10, r12
    871e:	80 0e       	add	r8, r16
    8720:	91 1e       	adc	r9, r17
    8722:	a2 1e       	adc	r10, r18
    8724:	b3 1e       	adc	r11, r19
    8726:	25 96       	adiw	r28, 0x05	; 5
    8728:	cc ac       	ldd	r12, Y+60	; 0x3c
    872a:	dd ac       	ldd	r13, Y+61	; 0x3d
    872c:	ee ac       	ldd	r14, Y+62	; 0x3e
    872e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8730:	25 97       	sbiw	r28, 0x05	; 5
    8732:	e4 ef       	ldi	r30, 0xF4	; 244
    8734:	ce 1a       	sub	r12, r30
    8736:	e7 ec       	ldi	r30, 0xC7	; 199
    8738:	de 0a       	sbc	r13, r30
    873a:	ea e1       	ldi	r30, 0x1A	; 26
    873c:	ee 0a       	sbc	r14, r30
    873e:	e2 e0       	ldi	r30, 0x02	; 2
    8740:	fe 0a       	sbc	r15, r30
    8742:	8c 0d       	add	r24, r12
    8744:	9d 1d       	adc	r25, r13
    8746:	ae 1d       	adc	r26, r14
    8748:	bf 1d       	adc	r27, r15
    874a:	68 01       	movw	r12, r16
    874c:	79 01       	movw	r14, r18
    874e:	c4 26       	eor	r12, r20
    8750:	d5 26       	eor	r13, r21
    8752:	e6 26       	eor	r14, r22
    8754:	f7 26       	eor	r15, r23
    8756:	c8 24       	eor	r12, r8
    8758:	d9 24       	eor	r13, r9
    875a:	ea 24       	eor	r14, r10
    875c:	fb 24       	eor	r15, r11
    875e:	8c 0d       	add	r24, r12
    8760:	9d 1d       	adc	r25, r13
    8762:	ae 1d       	adc	r26, r14
    8764:	bf 1d       	adc	r27, r15
    8766:	6c 01       	movw	r12, r24
    8768:	7d 01       	movw	r14, r26
    876a:	0b 2e       	mov	r0, r27
    876c:	b9 e0       	ldi	r27, 0x09	; 9
    876e:	f6 94       	lsr	r15
    8770:	e7 94       	ror	r14
    8772:	d7 94       	ror	r13
    8774:	c7 94       	ror	r12
    8776:	ba 95       	dec	r27
    8778:	d1 f7       	brne	.-12     	; 0x876e <__stack+0x56f>
    877a:	b0 2d       	mov	r27, r0
    877c:	07 2e       	mov	r0, r23
    877e:	77 e1       	ldi	r23, 0x17	; 23
    8780:	88 0f       	add	r24, r24
    8782:	99 1f       	adc	r25, r25
    8784:	aa 1f       	adc	r26, r26
    8786:	bb 1f       	adc	r27, r27
    8788:	7a 95       	dec	r23
    878a:	d1 f7       	brne	.-12     	; 0x8780 <__stack+0x581>
    878c:	70 2d       	mov	r23, r0
    878e:	8c 29       	or	r24, r12
    8790:	9d 29       	or	r25, r13
    8792:	ae 29       	or	r26, r14
    8794:	bf 29       	or	r27, r15
    8796:	88 0d       	add	r24, r8
    8798:	99 1d       	adc	r25, r9
    879a:	aa 1d       	adc	r26, r10
    879c:	bb 1d       	adc	r27, r11
    879e:	4d 84       	ldd	r4, Y+13	; 0x0d
    87a0:	5e 84       	ldd	r5, Y+14	; 0x0e
    87a2:	6f 84       	ldd	r6, Y+15	; 0x0f
    87a4:	78 88       	ldd	r7, Y+16	; 0x10
    87a6:	fc eb       	ldi	r31, 0xBC	; 188
    87a8:	4f 1a       	sub	r4, r31
    87aa:	f5 e1       	ldi	r31, 0x15	; 21
    87ac:	5f 0a       	sbc	r5, r31
    87ae:	f1 e4       	ldi	r31, 0x41	; 65
    87b0:	6f 0a       	sbc	r6, r31
    87b2:	fb e5       	ldi	r31, 0x5B	; 91
    87b4:	7f 0a       	sbc	r7, r31
    87b6:	44 0d       	add	r20, r4
    87b8:	55 1d       	adc	r21, r5
    87ba:	66 1d       	adc	r22, r6
    87bc:	77 1d       	adc	r23, r7
    87be:	24 01       	movw	r4, r8
    87c0:	35 01       	movw	r6, r10
    87c2:	40 26       	eor	r4, r16
    87c4:	51 26       	eor	r5, r17
    87c6:	62 26       	eor	r6, r18
    87c8:	73 26       	eor	r7, r19
    87ca:	48 26       	eor	r4, r24
    87cc:	59 26       	eor	r5, r25
    87ce:	6a 26       	eor	r6, r26
    87d0:	7b 26       	eor	r7, r27
    87d2:	44 0d       	add	r20, r4
    87d4:	55 1d       	adc	r21, r5
    87d6:	66 1d       	adc	r22, r6
    87d8:	77 1d       	adc	r23, r7
    87da:	6a 01       	movw	r12, r20
    87dc:	7b 01       	movw	r14, r22
    87de:	cc 0c       	add	r12, r12
    87e0:	dd 1c       	adc	r13, r13
    87e2:	ee 1c       	adc	r14, r14
    87e4:	ff 1c       	adc	r15, r15
    87e6:	cc 0c       	add	r12, r12
    87e8:	dd 1c       	adc	r13, r13
    87ea:	ee 1c       	adc	r14, r14
    87ec:	ff 1c       	adc	r15, r15
    87ee:	cc 0c       	add	r12, r12
    87f0:	dd 1c       	adc	r13, r13
    87f2:	ee 1c       	adc	r14, r14
    87f4:	ff 1c       	adc	r15, r15
    87f6:	cc 0c       	add	r12, r12
    87f8:	dd 1c       	adc	r13, r13
    87fa:	ee 1c       	adc	r14, r14
    87fc:	ff 1c       	adc	r15, r15
    87fe:	03 2e       	mov	r0, r19
    8800:	3c e1       	ldi	r19, 0x1C	; 28
    8802:	76 95       	lsr	r23
    8804:	67 95       	ror	r22
    8806:	57 95       	ror	r21
    8808:	47 95       	ror	r20
    880a:	3a 95       	dec	r19
    880c:	d1 f7       	brne	.-12     	; 0x8802 <__stack+0x603>
    880e:	30 2d       	mov	r19, r0
    8810:	4c 29       	or	r20, r12
    8812:	5d 29       	or	r21, r13
    8814:	6e 29       	or	r22, r14
    8816:	7f 29       	or	r23, r15
    8818:	48 0f       	add	r20, r24
    881a:	59 1f       	adc	r21, r25
    881c:	6a 1f       	adc	r22, r26
    881e:	7b 1f       	adc	r23, r27
    8820:	c9 8c       	ldd	r12, Y+25	; 0x19
    8822:	da 8c       	ldd	r13, Y+26	; 0x1a
    8824:	eb 8c       	ldd	r14, Y+27	; 0x1b
    8826:	fc 8c       	ldd	r15, Y+28	; 0x1c
    8828:	e7 e5       	ldi	r30, 0x57	; 87
    882a:	ce 1a       	sub	r12, r30
    882c:	e0 e3       	ldi	r30, 0x30	; 48
    882e:	de 0a       	sbc	r13, r30
    8830:	e1 e2       	ldi	r30, 0x21	; 33
    8832:	ee 0a       	sbc	r14, r30
    8834:	e4 eb       	ldi	r30, 0xB4	; 180
    8836:	fe 0a       	sbc	r15, r30
    8838:	0c 0d       	add	r16, r12
    883a:	1d 1d       	adc	r17, r13
    883c:	2e 1d       	adc	r18, r14
    883e:	3f 1d       	adc	r19, r15
    8840:	6c 01       	movw	r12, r24
    8842:	7d 01       	movw	r14, r26
    8844:	c8 24       	eor	r12, r8
    8846:	d9 24       	eor	r13, r9
    8848:	ea 24       	eor	r14, r10
    884a:	fb 24       	eor	r15, r11
    884c:	c4 26       	eor	r12, r20
    884e:	d5 26       	eor	r13, r21
    8850:	e6 26       	eor	r14, r22
    8852:	f7 26       	eor	r15, r23
    8854:	0c 0d       	add	r16, r12
    8856:	1d 1d       	adc	r17, r13
    8858:	2e 1d       	adc	r18, r14
    885a:	3f 1d       	adc	r19, r15
    885c:	68 01       	movw	r12, r16
    885e:	79 01       	movw	r14, r18
    8860:	0b 2e       	mov	r0, r27
    8862:	bb e0       	ldi	r27, 0x0B	; 11
    8864:	cc 0c       	add	r12, r12
    8866:	dd 1c       	adc	r13, r13
    8868:	ee 1c       	adc	r14, r14
    886a:	ff 1c       	adc	r15, r15
    886c:	ba 95       	dec	r27
    886e:	d1 f7       	brne	.-12     	; 0x8864 <__stack+0x665>
    8870:	b0 2d       	mov	r27, r0
    8872:	0f 2e       	mov	r0, r31
    8874:	f5 e1       	ldi	r31, 0x15	; 21
    8876:	36 95       	lsr	r19
    8878:	27 95       	ror	r18
    887a:	17 95       	ror	r17
    887c:	07 95       	ror	r16
    887e:	fa 95       	dec	r31
    8880:	d1 f7       	brne	.-12     	; 0x8876 <__stack+0x677>
    8882:	f0 2d       	mov	r31, r0
    8884:	0c 29       	or	r16, r12
    8886:	1d 29       	or	r17, r13
    8888:	2e 29       	or	r18, r14
    888a:	3f 29       	or	r19, r15
    888c:	04 0f       	add	r16, r20
    888e:	15 1f       	adc	r17, r21
    8890:	26 1f       	adc	r18, r22
    8892:	37 1f       	adc	r19, r23
    8894:	cd a0       	ldd	r12, Y+37	; 0x25
    8896:	de a0       	ldd	r13, Y+38	; 0x26
    8898:	ef a0       	ldd	r14, Y+39	; 0x27
    889a:	f8 a4       	ldd	r15, Y+40	; 0x28
    889c:	f0 ea       	ldi	r31, 0xA0	; 160
    889e:	cf 1a       	sub	r12, r31
    88a0:	f4 eb       	ldi	r31, 0xB4	; 180
    88a2:	df 0a       	sbc	r13, r31
    88a4:	f4 e4       	ldi	r31, 0x44	; 68
    88a6:	ef 0a       	sbc	r14, r31
    88a8:	f9 e0       	ldi	r31, 0x09	; 9
    88aa:	ff 0a       	sbc	r15, r31
    88ac:	8c 0c       	add	r8, r12
    88ae:	9d 1c       	adc	r9, r13
    88b0:	ae 1c       	adc	r10, r14
    88b2:	bf 1c       	adc	r11, r15
    88b4:	6a 01       	movw	r12, r20
    88b6:	7b 01       	movw	r14, r22
    88b8:	c8 26       	eor	r12, r24
    88ba:	d9 26       	eor	r13, r25
    88bc:	ea 26       	eor	r14, r26
    88be:	fb 26       	eor	r15, r27
    88c0:	c0 26       	eor	r12, r16
    88c2:	d1 26       	eor	r13, r17
    88c4:	e2 26       	eor	r14, r18
    88c6:	f3 26       	eor	r15, r19
    88c8:	8c 0c       	add	r8, r12
    88ca:	9d 1c       	adc	r9, r13
    88cc:	ae 1c       	adc	r10, r14
    88ce:	bf 1c       	adc	r11, r15
    88d0:	64 01       	movw	r12, r8
    88d2:	45 01       	movw	r8, r10
    88d4:	56 01       	movw	r10, r12
    88d6:	80 0e       	add	r8, r16
    88d8:	91 1e       	adc	r9, r17
    88da:	a2 1e       	adc	r10, r18
    88dc:	b3 1e       	adc	r11, r19
    88de:	c9 a8       	ldd	r12, Y+49	; 0x31
    88e0:	da a8       	ldd	r13, Y+50	; 0x32
    88e2:	eb a8       	ldd	r14, Y+51	; 0x33
    88e4:	fc a8       	ldd	r15, Y+52	; 0x34
    88e6:	e0 e9       	ldi	r30, 0x90	; 144
    88e8:	ce 1a       	sub	r12, r30
    88ea:	e3 e4       	ldi	r30, 0x43	; 67
    88ec:	de 0a       	sbc	r13, r30
    88ee:	e0 e4       	ldi	r30, 0x40	; 64
    88f0:	ee 0a       	sbc	r14, r30
    88f2:	e1 e4       	ldi	r30, 0x41	; 65
    88f4:	fe 0a       	sbc	r15, r30
    88f6:	8c 0d       	add	r24, r12
    88f8:	9d 1d       	adc	r25, r13
    88fa:	ae 1d       	adc	r26, r14
    88fc:	bf 1d       	adc	r27, r15
    88fe:	68 01       	movw	r12, r16
    8900:	79 01       	movw	r14, r18
    8902:	c4 26       	eor	r12, r20
    8904:	d5 26       	eor	r13, r21
    8906:	e6 26       	eor	r14, r22
    8908:	f7 26       	eor	r15, r23
    890a:	c8 24       	eor	r12, r8
    890c:	d9 24       	eor	r13, r9
    890e:	ea 24       	eor	r14, r10
    8910:	fb 24       	eor	r15, r11
    8912:	8c 0d       	add	r24, r12
    8914:	9d 1d       	adc	r25, r13
    8916:	ae 1d       	adc	r26, r14
    8918:	bf 1d       	adc	r27, r15
    891a:	6c 01       	movw	r12, r24
    891c:	7d 01       	movw	r14, r26
    891e:	0b 2e       	mov	r0, r27
    8920:	b9 e0       	ldi	r27, 0x09	; 9
    8922:	f6 94       	lsr	r15
    8924:	e7 94       	ror	r14
    8926:	d7 94       	ror	r13
    8928:	c7 94       	ror	r12
    892a:	ba 95       	dec	r27
    892c:	d1 f7       	brne	.-12     	; 0x8922 <__stack+0x723>
    892e:	b0 2d       	mov	r27, r0
    8930:	07 2e       	mov	r0, r23
    8932:	77 e1       	ldi	r23, 0x17	; 23
    8934:	88 0f       	add	r24, r24
    8936:	99 1f       	adc	r25, r25
    8938:	aa 1f       	adc	r26, r26
    893a:	bb 1f       	adc	r27, r27
    893c:	7a 95       	dec	r23
    893e:	d1 f7       	brne	.-12     	; 0x8934 <__stack+0x735>
    8940:	70 2d       	mov	r23, r0
    8942:	8c 29       	or	r24, r12
    8944:	9d 29       	or	r25, r13
    8946:	ae 29       	or	r26, r14
    8948:	bf 29       	or	r27, r15
    894a:	88 0d       	add	r24, r8
    894c:	99 1d       	adc	r25, r9
    894e:	aa 1d       	adc	r26, r10
    8950:	bb 1d       	adc	r27, r11
    8952:	21 96       	adiw	r28, 0x01	; 1
    8954:	4c ac       	ldd	r4, Y+60	; 0x3c
    8956:	5d ac       	ldd	r5, Y+61	; 0x3d
    8958:	6e ac       	ldd	r6, Y+62	; 0x3e
    895a:	7f ac       	ldd	r7, Y+63	; 0x3f
    895c:	21 97       	sbiw	r28, 0x01	; 1
    895e:	fa e3       	ldi	r31, 0x3A	; 58
    8960:	4f 1a       	sub	r4, r31
    8962:	f1 e8       	ldi	r31, 0x81	; 129
    8964:	5f 0a       	sbc	r5, r31
    8966:	f4 e6       	ldi	r31, 0x64	; 100
    8968:	6f 0a       	sbc	r6, r31
    896a:	f7 ed       	ldi	r31, 0xD7	; 215
    896c:	7f 0a       	sbc	r7, r31
    896e:	44 0d       	add	r20, r4
    8970:	55 1d       	adc	r21, r5
    8972:	66 1d       	adc	r22, r6
    8974:	77 1d       	adc	r23, r7
    8976:	24 01       	movw	r4, r8
    8978:	35 01       	movw	r6, r10
    897a:	40 26       	eor	r4, r16
    897c:	51 26       	eor	r5, r17
    897e:	62 26       	eor	r6, r18
    8980:	73 26       	eor	r7, r19
    8982:	73 01       	movw	r14, r6
    8984:	62 01       	movw	r12, r4
    8986:	c8 26       	eor	r12, r24
    8988:	d9 26       	eor	r13, r25
    898a:	ea 26       	eor	r14, r26
    898c:	fb 26       	eor	r15, r27
    898e:	2a 01       	movw	r4, r20
    8990:	3b 01       	movw	r6, r22
    8992:	4c 0c       	add	r4, r12
    8994:	5d 1c       	adc	r5, r13
    8996:	6e 1c       	adc	r6, r14
    8998:	7f 1c       	adc	r7, r15
    899a:	73 01       	movw	r14, r6
    899c:	62 01       	movw	r12, r4
    899e:	cc 0c       	add	r12, r12
    89a0:	dd 1c       	adc	r13, r13
    89a2:	ee 1c       	adc	r14, r14
    89a4:	ff 1c       	adc	r15, r15
    89a6:	cc 0c       	add	r12, r12
    89a8:	dd 1c       	adc	r13, r13
    89aa:	ee 1c       	adc	r14, r14
    89ac:	ff 1c       	adc	r15, r15
    89ae:	cc 0c       	add	r12, r12
    89b0:	dd 1c       	adc	r13, r13
    89b2:	ee 1c       	adc	r14, r14
    89b4:	ff 1c       	adc	r15, r15
    89b6:	cc 0c       	add	r12, r12
    89b8:	dd 1c       	adc	r13, r13
    89ba:	ee 1c       	adc	r14, r14
    89bc:	ff 1c       	adc	r15, r15
    89be:	03 2e       	mov	r0, r19
    89c0:	3c e1       	ldi	r19, 0x1C	; 28
    89c2:	76 94       	lsr	r7
    89c4:	67 94       	ror	r6
    89c6:	57 94       	ror	r5
    89c8:	47 94       	ror	r4
    89ca:	3a 95       	dec	r19
    89cc:	d1 f7       	brne	.-12     	; 0x89c2 <__stack+0x7c3>
    89ce:	30 2d       	mov	r19, r0
    89d0:	4c 28       	or	r4, r12
    89d2:	5d 28       	or	r5, r13
    89d4:	6e 28       	or	r6, r14
    89d6:	7f 28       	or	r7, r15
    89d8:	48 0e       	add	r4, r24
    89da:	59 1e       	adc	r5, r25
    89dc:	6a 1e       	adc	r6, r26
    89de:	7b 1e       	adc	r7, r27
    89e0:	49 85       	ldd	r20, Y+9	; 0x09
    89e2:	5a 85       	ldd	r21, Y+10	; 0x0a
    89e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    89e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    89e8:	46 50       	subi	r20, 0x06	; 6
    89ea:	58 4d       	sbci	r21, 0xD8	; 216
    89ec:	6e 45       	sbci	r22, 0x5E	; 94
    89ee:	75 41       	sbci	r23, 0x15	; 21
    89f0:	04 0f       	add	r16, r20
    89f2:	15 1f       	adc	r17, r21
    89f4:	26 1f       	adc	r18, r22
    89f6:	37 1f       	adc	r19, r23
    89f8:	ac 01       	movw	r20, r24
    89fa:	bd 01       	movw	r22, r26
    89fc:	48 25       	eor	r20, r8
    89fe:	59 25       	eor	r21, r9
    8a00:	6a 25       	eor	r22, r10
    8a02:	7b 25       	eor	r23, r11
    8a04:	6a 01       	movw	r12, r20
    8a06:	7b 01       	movw	r14, r22
    8a08:	c4 24       	eor	r12, r4
    8a0a:	d5 24       	eor	r13, r5
    8a0c:	e6 24       	eor	r14, r6
    8a0e:	f7 24       	eor	r15, r7
    8a10:	b9 01       	movw	r22, r18
    8a12:	a8 01       	movw	r20, r16
    8a14:	4c 0d       	add	r20, r12
    8a16:	5d 1d       	adc	r21, r13
    8a18:	6e 1d       	adc	r22, r14
    8a1a:	7f 1d       	adc	r23, r15
    8a1c:	6a 01       	movw	r12, r20
    8a1e:	7b 01       	movw	r14, r22
    8a20:	0b 2e       	mov	r0, r27
    8a22:	bb e0       	ldi	r27, 0x0B	; 11
    8a24:	cc 0c       	add	r12, r12
    8a26:	dd 1c       	adc	r13, r13
    8a28:	ee 1c       	adc	r14, r14
    8a2a:	ff 1c       	adc	r15, r15
    8a2c:	ba 95       	dec	r27
    8a2e:	d1 f7       	brne	.-12     	; 0x8a24 <__stack+0x825>
    8a30:	b0 2d       	mov	r27, r0
    8a32:	03 2e       	mov	r0, r19
    8a34:	35 e1       	ldi	r19, 0x15	; 21
    8a36:	76 95       	lsr	r23
    8a38:	67 95       	ror	r22
    8a3a:	57 95       	ror	r21
    8a3c:	47 95       	ror	r20
    8a3e:	3a 95       	dec	r19
    8a40:	d1 f7       	brne	.-12     	; 0x8a36 <__stack+0x837>
    8a42:	30 2d       	mov	r19, r0
    8a44:	4c 29       	or	r20, r12
    8a46:	5d 29       	or	r21, r13
    8a48:	6e 29       	or	r22, r14
    8a4a:	7f 29       	or	r23, r15
    8a4c:	44 0d       	add	r20, r4
    8a4e:	55 1d       	adc	r21, r5
    8a50:	66 1d       	adc	r22, r6
    8a52:	77 1d       	adc	r23, r7
    8a54:	0d 89       	ldd	r16, Y+21	; 0x15
    8a56:	1e 89       	ldd	r17, Y+22	; 0x16
    8a58:	2f 89       	ldd	r18, Y+23	; 0x17
    8a5a:	38 8d       	ldd	r19, Y+24	; 0x18
    8a5c:	0b 57       	subi	r16, 0x7B	; 123
    8a5e:	1f 4c       	sbci	r17, 0xCF	; 207
    8a60:	20 41       	sbci	r18, 0x10	; 16
    8a62:	3b 42       	sbci	r19, 0x2B	; 43
    8a64:	80 0e       	add	r8, r16
    8a66:	91 1e       	adc	r9, r17
    8a68:	a2 1e       	adc	r10, r18
    8a6a:	b3 1e       	adc	r11, r19
    8a6c:	93 01       	movw	r18, r6
    8a6e:	82 01       	movw	r16, r4
    8a70:	08 27       	eor	r16, r24
    8a72:	19 27       	eor	r17, r25
    8a74:	2a 27       	eor	r18, r26
    8a76:	3b 27       	eor	r19, r27
    8a78:	04 27       	eor	r16, r20
    8a7a:	15 27       	eor	r17, r21
    8a7c:	26 27       	eor	r18, r22
    8a7e:	37 27       	eor	r19, r23
    8a80:	80 0e       	add	r8, r16
    8a82:	91 1e       	adc	r9, r17
    8a84:	a2 1e       	adc	r10, r18
    8a86:	b3 1e       	adc	r11, r19
    8a88:	64 01       	movw	r12, r8
    8a8a:	45 01       	movw	r8, r10
    8a8c:	56 01       	movw	r10, r12
    8a8e:	84 0e       	add	r8, r20
    8a90:	95 1e       	adc	r9, r21
    8a92:	a6 1e       	adc	r10, r22
    8a94:	b7 1e       	adc	r11, r23
    8a96:	c9 a0       	ldd	r12, Y+33	; 0x21
    8a98:	da a0       	ldd	r13, Y+34	; 0x22
    8a9a:	eb a0       	ldd	r14, Y+35	; 0x23
    8a9c:	fc a0       	ldd	r15, Y+36	; 0x24
    8a9e:	0b ef       	ldi	r16, 0xFB	; 251
    8aa0:	c0 1a       	sub	r12, r16
    8aa2:	02 ee       	ldi	r16, 0xE2	; 226
    8aa4:	d0 0a       	sbc	r13, r16
    8aa6:	07 e7       	ldi	r16, 0x77	; 119
    8aa8:	e0 0a       	sbc	r14, r16
    8aaa:	0b ef       	ldi	r16, 0xFB	; 251
    8aac:	f0 0a       	sbc	r15, r16
    8aae:	8c 0d       	add	r24, r12
    8ab0:	9d 1d       	adc	r25, r13
    8ab2:	ae 1d       	adc	r26, r14
    8ab4:	bf 1d       	adc	r27, r15
    8ab6:	6a 01       	movw	r12, r20
    8ab8:	7b 01       	movw	r14, r22
    8aba:	c4 24       	eor	r12, r4
    8abc:	d5 24       	eor	r13, r5
    8abe:	e6 24       	eor	r14, r6
    8ac0:	f7 24       	eor	r15, r7
    8ac2:	97 01       	movw	r18, r14
    8ac4:	86 01       	movw	r16, r12
    8ac6:	08 25       	eor	r16, r8
    8ac8:	19 25       	eor	r17, r9
    8aca:	2a 25       	eor	r18, r10
    8acc:	3b 25       	eor	r19, r11
    8ace:	6c 01       	movw	r12, r24
    8ad0:	7d 01       	movw	r14, r26
    8ad2:	c0 0e       	add	r12, r16
    8ad4:	d1 1e       	adc	r13, r17
    8ad6:	e2 1e       	adc	r14, r18
    8ad8:	f3 1e       	adc	r15, r19
    8ada:	97 01       	movw	r18, r14
    8adc:	86 01       	movw	r16, r12
    8ade:	0f 2e       	mov	r0, r31
    8ae0:	f9 e0       	ldi	r31, 0x09	; 9
    8ae2:	36 95       	lsr	r19
    8ae4:	27 95       	ror	r18
    8ae6:	17 95       	ror	r17
    8ae8:	07 95       	ror	r16
    8aea:	fa 95       	dec	r31
    8aec:	d1 f7       	brne	.-12     	; 0x8ae2 <__stack+0x8e3>
    8aee:	f0 2d       	mov	r31, r0
    8af0:	0b 2e       	mov	r0, r27
    8af2:	b7 e1       	ldi	r27, 0x17	; 23
    8af4:	cc 0c       	add	r12, r12
    8af6:	dd 1c       	adc	r13, r13
    8af8:	ee 1c       	adc	r14, r14
    8afa:	ff 1c       	adc	r15, r15
    8afc:	ba 95       	dec	r27
    8afe:	d1 f7       	brne	.-12     	; 0x8af4 <__stack+0x8f5>
    8b00:	b0 2d       	mov	r27, r0
    8b02:	c0 2a       	or	r12, r16
    8b04:	d1 2a       	or	r13, r17
    8b06:	e2 2a       	or	r14, r18
    8b08:	f3 2a       	or	r15, r19
    8b0a:	c8 0c       	add	r12, r8
    8b0c:	d9 1c       	adc	r13, r9
    8b0e:	ea 1c       	adc	r14, r10
    8b10:	fb 1c       	adc	r15, r11
    8b12:	8d a5       	ldd	r24, Y+45	; 0x2d
    8b14:	9e a5       	ldd	r25, Y+46	; 0x2e
    8b16:	af a5       	ldd	r26, Y+47	; 0x2f
    8b18:	b8 a9       	ldd	r27, Y+48	; 0x30
    8b1a:	87 5c       	subi	r24, 0xC7	; 199
    8b1c:	9f 42       	sbci	r25, 0x2F	; 47
    8b1e:	ab 42       	sbci	r26, 0x2B	; 43
    8b20:	b6 42       	sbci	r27, 0x26	; 38
    8b22:	48 0e       	add	r4, r24
    8b24:	59 1e       	adc	r5, r25
    8b26:	6a 1e       	adc	r6, r26
    8b28:	7b 1e       	adc	r7, r27
    8b2a:	95 01       	movw	r18, r10
    8b2c:	84 01       	movw	r16, r8
    8b2e:	04 27       	eor	r16, r20
    8b30:	15 27       	eor	r17, r21
    8b32:	26 27       	eor	r18, r22
    8b34:	37 27       	eor	r19, r23
    8b36:	0c 25       	eor	r16, r12
    8b38:	1d 25       	eor	r17, r13
    8b3a:	2e 25       	eor	r18, r14
    8b3c:	3f 25       	eor	r19, r15
    8b3e:	40 0e       	add	r4, r16
    8b40:	51 1e       	adc	r5, r17
    8b42:	62 1e       	adc	r6, r18
    8b44:	73 1e       	adc	r7, r19
    8b46:	93 01       	movw	r18, r6
    8b48:	82 01       	movw	r16, r4
    8b4a:	00 0f       	add	r16, r16
    8b4c:	11 1f       	adc	r17, r17
    8b4e:	22 1f       	adc	r18, r18
    8b50:	33 1f       	adc	r19, r19
    8b52:	00 0f       	add	r16, r16
    8b54:	11 1f       	adc	r17, r17
    8b56:	22 1f       	adc	r18, r18
    8b58:	33 1f       	adc	r19, r19
    8b5a:	00 0f       	add	r16, r16
    8b5c:	11 1f       	adc	r17, r17
    8b5e:	22 1f       	adc	r18, r18
    8b60:	33 1f       	adc	r19, r19
    8b62:	00 0f       	add	r16, r16
    8b64:	11 1f       	adc	r17, r17
    8b66:	22 1f       	adc	r18, r18
    8b68:	33 1f       	adc	r19, r19
    8b6a:	03 2e       	mov	r0, r19
    8b6c:	3c e1       	ldi	r19, 0x1C	; 28
    8b6e:	76 94       	lsr	r7
    8b70:	67 94       	ror	r6
    8b72:	57 94       	ror	r5
    8b74:	47 94       	ror	r4
    8b76:	3a 95       	dec	r19
    8b78:	d1 f7       	brne	.-12     	; 0x8b6e <__stack+0x96f>
    8b7a:	30 2d       	mov	r19, r0
    8b7c:	40 2a       	or	r4, r16
    8b7e:	51 2a       	or	r5, r17
    8b80:	62 2a       	or	r6, r18
    8b82:	73 2a       	or	r7, r19
    8b84:	4c 0c       	add	r4, r12
    8b86:	5d 1c       	adc	r5, r13
    8b88:	6e 1c       	adc	r6, r14
    8b8a:	7f 1c       	adc	r7, r15
    8b8c:	89 ad       	ldd	r24, Y+57	; 0x39
    8b8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    8b90:	ab ad       	ldd	r26, Y+59	; 0x3b
    8b92:	bc ad       	ldd	r27, Y+60	; 0x3c
    8b94:	8b 51       	subi	r24, 0x1B	; 27
    8b96:	96 46       	sbci	r25, 0x66	; 102
    8b98:	a4 42       	sbci	r26, 0x24	; 36
    8b9a:	b9 41       	sbci	r27, 0x19	; 25
    8b9c:	48 0f       	add	r20, r24
    8b9e:	59 1f       	adc	r21, r25
    8ba0:	6a 1f       	adc	r22, r26
    8ba2:	7b 1f       	adc	r23, r27
    8ba4:	d7 01       	movw	r26, r14
    8ba6:	c6 01       	movw	r24, r12
    8ba8:	88 25       	eor	r24, r8
    8baa:	99 25       	eor	r25, r9
    8bac:	aa 25       	eor	r26, r10
    8bae:	bb 25       	eor	r27, r11
    8bb0:	84 25       	eor	r24, r4
    8bb2:	95 25       	eor	r25, r5
    8bb4:	a6 25       	eor	r26, r6
    8bb6:	b7 25       	eor	r27, r7
    8bb8:	48 0f       	add	r20, r24
    8bba:	59 1f       	adc	r21, r25
    8bbc:	6a 1f       	adc	r22, r26
    8bbe:	7b 1f       	adc	r23, r27
    8bc0:	db 01       	movw	r26, r22
    8bc2:	ca 01       	movw	r24, r20
    8bc4:	07 2e       	mov	r0, r23
    8bc6:	7b e0       	ldi	r23, 0x0B	; 11
    8bc8:	88 0f       	add	r24, r24
    8bca:	99 1f       	adc	r25, r25
    8bcc:	aa 1f       	adc	r26, r26
    8bce:	bb 1f       	adc	r27, r27
    8bd0:	7a 95       	dec	r23
    8bd2:	d1 f7       	brne	.-12     	; 0x8bc8 <__stack+0x9c9>
    8bd4:	70 2d       	mov	r23, r0
    8bd6:	03 2e       	mov	r0, r19
    8bd8:	35 e1       	ldi	r19, 0x15	; 21
    8bda:	76 95       	lsr	r23
    8bdc:	67 95       	ror	r22
    8bde:	57 95       	ror	r21
    8be0:	47 95       	ror	r20
    8be2:	3a 95       	dec	r19
    8be4:	d1 f7       	brne	.-12     	; 0x8bda <__stack+0x9db>
    8be6:	30 2d       	mov	r19, r0
    8be8:	48 2b       	or	r20, r24
    8bea:	59 2b       	or	r21, r25
    8bec:	6a 2b       	or	r22, r26
    8bee:	7b 2b       	or	r23, r27
    8bf0:	44 0d       	add	r20, r4
    8bf2:	55 1d       	adc	r21, r5
    8bf4:	66 1d       	adc	r22, r6
    8bf6:	77 1d       	adc	r23, r7
    8bf8:	29 96       	adiw	r28, 0x09	; 9
    8bfa:	8c ad       	ldd	r24, Y+60	; 0x3c
    8bfc:	9d ad       	ldd	r25, Y+61	; 0x3d
    8bfe:	ae ad       	ldd	r26, Y+62	; 0x3e
    8c00:	bf ad       	ldd	r27, Y+63	; 0x3f
    8c02:	29 97       	sbiw	r28, 0x09	; 9
    8c04:	88 50       	subi	r24, 0x08	; 8
    8c06:	93 48       	sbci	r25, 0x83	; 131
    8c08:	ad 45       	sbci	r26, 0x5D	; 93
    8c0a:	b0 4e       	sbci	r27, 0xE0	; 224
    8c0c:	88 0e       	add	r8, r24
    8c0e:	99 1e       	adc	r9, r25
    8c10:	aa 1e       	adc	r10, r26
    8c12:	bb 1e       	adc	r11, r27
    8c14:	d3 01       	movw	r26, r6
    8c16:	c2 01       	movw	r24, r4
    8c18:	8c 25       	eor	r24, r12
    8c1a:	9d 25       	eor	r25, r13
    8c1c:	ae 25       	eor	r26, r14
    8c1e:	bf 25       	eor	r27, r15
    8c20:	84 27       	eor	r24, r20
    8c22:	95 27       	eor	r25, r21
    8c24:	a6 27       	eor	r26, r22
    8c26:	b7 27       	eor	r27, r23
    8c28:	88 0e       	add	r8, r24
    8c2a:	99 1e       	adc	r9, r25
    8c2c:	aa 1e       	adc	r10, r26
    8c2e:	bb 1e       	adc	r11, r27
    8c30:	94 01       	movw	r18, r8
    8c32:	45 01       	movw	r8, r10
    8c34:	59 01       	movw	r10, r18
    8c36:	84 0e       	add	r8, r20
    8c38:	95 1e       	adc	r9, r21
    8c3a:	a6 1e       	adc	r10, r22
    8c3c:	b7 1e       	adc	r11, r23
    8c3e:	89 89       	ldd	r24, Y+17	; 0x11
    8c40:	9a 89       	ldd	r25, Y+18	; 0x12
    8c42:	ab 89       	ldd	r26, Y+19	; 0x13
    8c44:	bc 89       	ldd	r27, Y+20	; 0x14
    8c46:	8b 59       	subi	r24, 0x9B	; 155
    8c48:	99 4a       	sbci	r25, 0xA9	; 169
    8c4a:	a3 45       	sbci	r26, 0x53	; 83
    8c4c:	bb 43       	sbci	r27, 0x3B	; 59
    8c4e:	c8 0e       	add	r12, r24
    8c50:	d9 1e       	adc	r13, r25
    8c52:	ea 1e       	adc	r14, r26
    8c54:	fb 1e       	adc	r15, r27
    8c56:	8a 01       	movw	r16, r20
    8c58:	9b 01       	movw	r18, r22
    8c5a:	04 25       	eor	r16, r4
    8c5c:	15 25       	eor	r17, r5
    8c5e:	26 25       	eor	r18, r6
    8c60:	37 25       	eor	r19, r7
    8c62:	08 25       	eor	r16, r8
    8c64:	19 25       	eor	r17, r9
    8c66:	2a 25       	eor	r18, r10
    8c68:	3b 25       	eor	r19, r11
    8c6a:	c0 0e       	add	r12, r16
    8c6c:	d1 1e       	adc	r13, r17
    8c6e:	e2 1e       	adc	r14, r18
    8c70:	f3 1e       	adc	r15, r19
    8c72:	97 01       	movw	r18, r14
    8c74:	86 01       	movw	r16, r12
    8c76:	0f 2e       	mov	r0, r31
    8c78:	f9 e0       	ldi	r31, 0x09	; 9
    8c7a:	36 95       	lsr	r19
    8c7c:	27 95       	ror	r18
    8c7e:	17 95       	ror	r17
    8c80:	07 95       	ror	r16
    8c82:	fa 95       	dec	r31
    8c84:	d1 f7       	brne	.-12     	; 0x8c7a <__stack+0xa7b>
    8c86:	f0 2d       	mov	r31, r0
    8c88:	0b 2e       	mov	r0, r27
    8c8a:	b7 e1       	ldi	r27, 0x17	; 23
    8c8c:	cc 0c       	add	r12, r12
    8c8e:	dd 1c       	adc	r13, r13
    8c90:	ee 1c       	adc	r14, r14
    8c92:	ff 1c       	adc	r15, r15
    8c94:	ba 95       	dec	r27
    8c96:	d1 f7       	brne	.-12     	; 0x8c8c <__stack+0xa8d>
    8c98:	b0 2d       	mov	r27, r0
    8c9a:	c0 2a       	or	r12, r16
    8c9c:	d1 2a       	or	r13, r17
    8c9e:	e2 2a       	or	r14, r18
    8ca0:	f3 2a       	or	r15, r19
    8ca2:	c8 0c       	add	r12, r8
    8ca4:	d9 1c       	adc	r13, r9
    8ca6:	ea 1c       	adc	r14, r10
    8ca8:	fb 1c       	adc	r15, r11
    8caa:	89 85       	ldd	r24, Y+9	; 0x09
    8cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    8cae:	ab 85       	ldd	r26, Y+11	; 0x0b
    8cb0:	bc 85       	ldd	r27, Y+12	; 0x0c
    8cb2:	8c 5b       	subi	r24, 0xBC	; 188
    8cb4:	9d 4d       	sbci	r25, 0xDD	; 221
    8cb6:	a6 4d       	sbci	r26, 0xD6	; 214
    8cb8:	bb 40       	sbci	r27, 0x0B	; 11
    8cba:	48 0e       	add	r4, r24
    8cbc:	59 1e       	adc	r5, r25
    8cbe:	6a 1e       	adc	r6, r26
    8cc0:	7b 1e       	adc	r7, r27
    8cc2:	db 01       	movw	r26, r22
    8cc4:	ca 01       	movw	r24, r20
    8cc6:	80 95       	com	r24
    8cc8:	90 95       	com	r25
    8cca:	a0 95       	com	r26
    8ccc:	b0 95       	com	r27
    8cce:	8c 29       	or	r24, r12
    8cd0:	9d 29       	or	r25, r13
    8cd2:	ae 29       	or	r26, r14
    8cd4:	bf 29       	or	r27, r15
    8cd6:	8c 01       	movw	r16, r24
    8cd8:	9d 01       	movw	r18, r26
    8cda:	08 25       	eor	r16, r8
    8cdc:	19 25       	eor	r17, r9
    8cde:	2a 25       	eor	r18, r10
    8ce0:	3b 25       	eor	r19, r11
    8ce2:	d3 01       	movw	r26, r6
    8ce4:	c2 01       	movw	r24, r4
    8ce6:	80 0f       	add	r24, r16
    8ce8:	91 1f       	adc	r25, r17
    8cea:	a2 1f       	adc	r26, r18
    8cec:	b3 1f       	adc	r27, r19
    8cee:	8c 01       	movw	r16, r24
    8cf0:	9d 01       	movw	r18, r26
    8cf2:	00 0f       	add	r16, r16
    8cf4:	11 1f       	adc	r17, r17
    8cf6:	22 1f       	adc	r18, r18
    8cf8:	33 1f       	adc	r19, r19
    8cfa:	00 0f       	add	r16, r16
    8cfc:	11 1f       	adc	r17, r17
    8cfe:	22 1f       	adc	r18, r18
    8d00:	33 1f       	adc	r19, r19
    8d02:	00 0f       	add	r16, r16
    8d04:	11 1f       	adc	r17, r17
    8d06:	22 1f       	adc	r18, r18
    8d08:	33 1f       	adc	r19, r19
    8d0a:	00 0f       	add	r16, r16
    8d0c:	11 1f       	adc	r17, r17
    8d0e:	22 1f       	adc	r18, r18
    8d10:	33 1f       	adc	r19, r19
    8d12:	00 0f       	add	r16, r16
    8d14:	11 1f       	adc	r17, r17
    8d16:	22 1f       	adc	r18, r18
    8d18:	33 1f       	adc	r19, r19
    8d1a:	00 0f       	add	r16, r16
    8d1c:	11 1f       	adc	r17, r17
    8d1e:	22 1f       	adc	r18, r18
    8d20:	33 1f       	adc	r19, r19
    8d22:	07 2e       	mov	r0, r23
    8d24:	7a e1       	ldi	r23, 0x1A	; 26
    8d26:	b6 95       	lsr	r27
    8d28:	a7 95       	ror	r26
    8d2a:	97 95       	ror	r25
    8d2c:	87 95       	ror	r24
    8d2e:	7a 95       	dec	r23
    8d30:	d1 f7       	brne	.-12     	; 0x8d26 <__stack+0xb27>
    8d32:	70 2d       	mov	r23, r0
    8d34:	80 2b       	or	r24, r16
    8d36:	91 2b       	or	r25, r17
    8d38:	a2 2b       	or	r26, r18
    8d3a:	b3 2b       	or	r27, r19
    8d3c:	8c 0d       	add	r24, r12
    8d3e:	9d 1d       	adc	r25, r13
    8d40:	ae 1d       	adc	r26, r14
    8d42:	bf 1d       	adc	r27, r15
    8d44:	0d a1       	ldd	r16, Y+37	; 0x25
    8d46:	1e a1       	ldd	r17, Y+38	; 0x26
    8d48:	2f a1       	ldd	r18, Y+39	; 0x27
    8d4a:	38 a5       	ldd	r19, Y+40	; 0x28
    8d4c:	09 56       	subi	r16, 0x69	; 105
    8d4e:	11 09       	sbc	r17, r1
    8d50:	25 4d       	sbci	r18, 0xD5	; 213
    8d52:	3c 4b       	sbci	r19, 0xBC	; 188
    8d54:	40 0f       	add	r20, r16
    8d56:	51 1f       	adc	r21, r17
    8d58:	62 1f       	adc	r22, r18
    8d5a:	73 1f       	adc	r23, r19
    8d5c:	95 01       	movw	r18, r10
    8d5e:	84 01       	movw	r16, r8
    8d60:	00 95       	com	r16
    8d62:	10 95       	com	r17
    8d64:	20 95       	com	r18
    8d66:	30 95       	com	r19
    8d68:	08 2b       	or	r16, r24
    8d6a:	19 2b       	or	r17, r25
    8d6c:	2a 2b       	or	r18, r26
    8d6e:	3b 2b       	or	r19, r27
    8d70:	0c 25       	eor	r16, r12
    8d72:	1d 25       	eor	r17, r13
    8d74:	2e 25       	eor	r18, r14
    8d76:	3f 25       	eor	r19, r15
    8d78:	40 0f       	add	r20, r16
    8d7a:	51 1f       	adc	r21, r17
    8d7c:	62 1f       	adc	r22, r18
    8d7e:	73 1f       	adc	r23, r19
    8d80:	8a 01       	movw	r16, r20
    8d82:	9b 01       	movw	r18, r22
    8d84:	0f 2e       	mov	r0, r31
    8d86:	fa e0       	ldi	r31, 0x0A	; 10
    8d88:	00 0f       	add	r16, r16
    8d8a:	11 1f       	adc	r17, r17
    8d8c:	22 1f       	adc	r18, r18
    8d8e:	33 1f       	adc	r19, r19
    8d90:	fa 95       	dec	r31
    8d92:	d1 f7       	brne	.-12     	; 0x8d88 <__stack+0xb89>
    8d94:	f0 2d       	mov	r31, r0
    8d96:	03 2e       	mov	r0, r19
    8d98:	36 e1       	ldi	r19, 0x16	; 22
    8d9a:	76 95       	lsr	r23
    8d9c:	67 95       	ror	r22
    8d9e:	57 95       	ror	r21
    8da0:	47 95       	ror	r20
    8da2:	3a 95       	dec	r19
    8da4:	d1 f7       	brne	.-12     	; 0x8d9a <__stack+0xb9b>
    8da6:	30 2d       	mov	r19, r0
    8da8:	40 2b       	or	r20, r16
    8daa:	51 2b       	or	r21, r17
    8dac:	62 2b       	or	r22, r18
    8dae:	73 2b       	or	r23, r19
    8db0:	48 0f       	add	r20, r24
    8db2:	59 1f       	adc	r21, r25
    8db4:	6a 1f       	adc	r22, r26
    8db6:	7b 1f       	adc	r23, r27
    8db8:	25 96       	adiw	r28, 0x05	; 5
    8dba:	0c ad       	ldd	r16, Y+60	; 0x3c
    8dbc:	1d ad       	ldd	r17, Y+61	; 0x3d
    8dbe:	2e ad       	ldd	r18, Y+62	; 0x3e
    8dc0:	3f ad       	ldd	r19, Y+63	; 0x3f
    8dc2:	25 97       	sbiw	r28, 0x05	; 5
    8dc4:	09 55       	subi	r16, 0x59	; 89
    8dc6:	1c 4d       	sbci	r17, 0xDC	; 220
    8dc8:	2b 46       	sbci	r18, 0x6B	; 107
    8dca:	34 45       	sbci	r19, 0x54	; 84
    8dcc:	80 0e       	add	r8, r16
    8dce:	91 1e       	adc	r9, r17
    8dd0:	a2 1e       	adc	r10, r18
    8dd2:	b3 1e       	adc	r11, r19
    8dd4:	26 01       	movw	r4, r12
    8dd6:	37 01       	movw	r6, r14
    8dd8:	40 94       	com	r4
    8dda:	50 94       	com	r5
    8ddc:	60 94       	com	r6
    8dde:	70 94       	com	r7
    8de0:	44 2a       	or	r4, r20
    8de2:	55 2a       	or	r5, r21
    8de4:	66 2a       	or	r6, r22
    8de6:	77 2a       	or	r7, r23
    8de8:	48 26       	eor	r4, r24
    8dea:	59 26       	eor	r5, r25
    8dec:	6a 26       	eor	r6, r26
    8dee:	7b 26       	eor	r7, r27
    8df0:	84 0c       	add	r8, r4
    8df2:	95 1c       	adc	r9, r5
    8df4:	a6 1c       	adc	r10, r6
    8df6:	b7 1c       	adc	r11, r7
    8df8:	24 01       	movw	r4, r8
    8dfa:	35 01       	movw	r6, r10
    8dfc:	03 2e       	mov	r0, r19
    8dfe:	3f e0       	ldi	r19, 0x0F	; 15
    8e00:	44 0c       	add	r4, r4
    8e02:	55 1c       	adc	r5, r5
    8e04:	66 1c       	adc	r6, r6
    8e06:	77 1c       	adc	r7, r7
    8e08:	3a 95       	dec	r19
    8e0a:	d1 f7       	brne	.-12     	; 0x8e00 <__stack+0xc01>
    8e0c:	30 2d       	mov	r19, r0
    8e0e:	07 2e       	mov	r0, r23
    8e10:	71 e1       	ldi	r23, 0x11	; 17
    8e12:	b6 94       	lsr	r11
    8e14:	a7 94       	ror	r10
    8e16:	97 94       	ror	r9
    8e18:	87 94       	ror	r8
    8e1a:	7a 95       	dec	r23
    8e1c:	d1 f7       	brne	.-12     	; 0x8e12 <__stack+0xc13>
    8e1e:	70 2d       	mov	r23, r0
    8e20:	84 28       	or	r8, r4
    8e22:	95 28       	or	r9, r5
    8e24:	a6 28       	or	r10, r6
    8e26:	b7 28       	or	r11, r7
    8e28:	84 0e       	add	r8, r20
    8e2a:	95 1e       	adc	r9, r21
    8e2c:	a6 1e       	adc	r10, r22
    8e2e:	b7 1e       	adc	r11, r23
    8e30:	0d 8d       	ldd	r16, Y+29	; 0x1d
    8e32:	1e 8d       	ldd	r17, Y+30	; 0x1e
    8e34:	2f 8d       	ldd	r18, Y+31	; 0x1f
    8e36:	38 a1       	ldd	r19, Y+32	; 0x20
    8e38:	07 5c       	subi	r16, 0xC7	; 199
    8e3a:	1f 45       	sbci	r17, 0x5F	; 95
    8e3c:	2c 46       	sbci	r18, 0x6C	; 108
    8e3e:	33 40       	sbci	r19, 0x03	; 3
    8e40:	c0 0e       	add	r12, r16
    8e42:	d1 1e       	adc	r13, r17
    8e44:	e2 1e       	adc	r14, r18
    8e46:	f3 1e       	adc	r15, r19
    8e48:	8c 01       	movw	r16, r24
    8e4a:	9d 01       	movw	r18, r26
    8e4c:	00 95       	com	r16
    8e4e:	10 95       	com	r17
    8e50:	20 95       	com	r18
    8e52:	30 95       	com	r19
    8e54:	08 29       	or	r16, r8
    8e56:	19 29       	or	r17, r9
    8e58:	2a 29       	or	r18, r10
    8e5a:	3b 29       	or	r19, r11
    8e5c:	04 27       	eor	r16, r20
    8e5e:	15 27       	eor	r17, r21
    8e60:	26 27       	eor	r18, r22
    8e62:	37 27       	eor	r19, r23
    8e64:	c0 0e       	add	r12, r16
    8e66:	d1 1e       	adc	r13, r17
    8e68:	e2 1e       	adc	r14, r18
    8e6a:	f3 1e       	adc	r15, r19
    8e6c:	97 01       	movw	r18, r14
    8e6e:	86 01       	movw	r16, r12
    8e70:	0f 2e       	mov	r0, r31
    8e72:	fb e0       	ldi	r31, 0x0B	; 11
    8e74:	36 95       	lsr	r19
    8e76:	27 95       	ror	r18
    8e78:	17 95       	ror	r17
    8e7a:	07 95       	ror	r16
    8e7c:	fa 95       	dec	r31
    8e7e:	d1 f7       	brne	.-12     	; 0x8e74 <__stack+0xc75>
    8e80:	f0 2d       	mov	r31, r0
    8e82:	0b 2e       	mov	r0, r27
    8e84:	b5 e1       	ldi	r27, 0x15	; 21
    8e86:	cc 0c       	add	r12, r12
    8e88:	dd 1c       	adc	r13, r13
    8e8a:	ee 1c       	adc	r14, r14
    8e8c:	ff 1c       	adc	r15, r15
    8e8e:	ba 95       	dec	r27
    8e90:	d1 f7       	brne	.-12     	; 0x8e86 <__stack+0xc87>
    8e92:	b0 2d       	mov	r27, r0
    8e94:	c0 2a       	or	r12, r16
    8e96:	d1 2a       	or	r13, r17
    8e98:	e2 2a       	or	r14, r18
    8e9a:	f3 2a       	or	r15, r19
    8e9c:	c8 0c       	add	r12, r8
    8e9e:	d9 1c       	adc	r13, r9
    8ea0:	ea 1c       	adc	r14, r10
    8ea2:	fb 1c       	adc	r15, r11
    8ea4:	09 ad       	ldd	r16, Y+57	; 0x39
    8ea6:	1a ad       	ldd	r17, Y+58	; 0x3a
    8ea8:	2b ad       	ldd	r18, Y+59	; 0x3b
    8eaa:	3c ad       	ldd	r19, Y+60	; 0x3c
    8eac:	0d 53       	subi	r16, 0x3D	; 61
    8eae:	16 4a       	sbci	r17, 0xA6	; 166
    8eb0:	24 4a       	sbci	r18, 0xA4	; 164
    8eb2:	3a 49       	sbci	r19, 0x9A	; 154
    8eb4:	80 0f       	add	r24, r16
    8eb6:	91 1f       	adc	r25, r17
    8eb8:	a2 1f       	adc	r26, r18
    8eba:	b3 1f       	adc	r27, r19
    8ebc:	2a 01       	movw	r4, r20
    8ebe:	3b 01       	movw	r6, r22
    8ec0:	40 94       	com	r4
    8ec2:	50 94       	com	r5
    8ec4:	60 94       	com	r6
    8ec6:	70 94       	com	r7
    8ec8:	4c 28       	or	r4, r12
    8eca:	5d 28       	or	r5, r13
    8ecc:	6e 28       	or	r6, r14
    8ece:	7f 28       	or	r7, r15
    8ed0:	48 24       	eor	r4, r8
    8ed2:	59 24       	eor	r5, r9
    8ed4:	6a 24       	eor	r6, r10
    8ed6:	7b 24       	eor	r7, r11
    8ed8:	84 0d       	add	r24, r4
    8eda:	95 1d       	adc	r25, r5
    8edc:	a6 1d       	adc	r26, r6
    8ede:	b7 1d       	adc	r27, r7
    8ee0:	8c 01       	movw	r16, r24
    8ee2:	9d 01       	movw	r18, r26
    8ee4:	00 0f       	add	r16, r16
    8ee6:	11 1f       	adc	r17, r17
    8ee8:	22 1f       	adc	r18, r18
    8eea:	33 1f       	adc	r19, r19
    8eec:	00 0f       	add	r16, r16
    8eee:	11 1f       	adc	r17, r17
    8ef0:	22 1f       	adc	r18, r18
    8ef2:	33 1f       	adc	r19, r19
    8ef4:	00 0f       	add	r16, r16
    8ef6:	11 1f       	adc	r17, r17
    8ef8:	22 1f       	adc	r18, r18
    8efa:	33 1f       	adc	r19, r19
    8efc:	00 0f       	add	r16, r16
    8efe:	11 1f       	adc	r17, r17
    8f00:	22 1f       	adc	r18, r18
    8f02:	33 1f       	adc	r19, r19
    8f04:	00 0f       	add	r16, r16
    8f06:	11 1f       	adc	r17, r17
    8f08:	22 1f       	adc	r18, r18
    8f0a:	33 1f       	adc	r19, r19
    8f0c:	00 0f       	add	r16, r16
    8f0e:	11 1f       	adc	r17, r17
    8f10:	22 1f       	adc	r18, r18
    8f12:	33 1f       	adc	r19, r19
    8f14:	07 2e       	mov	r0, r23
    8f16:	7a e1       	ldi	r23, 0x1A	; 26
    8f18:	b6 95       	lsr	r27
    8f1a:	a7 95       	ror	r26
    8f1c:	97 95       	ror	r25
    8f1e:	87 95       	ror	r24
    8f20:	7a 95       	dec	r23
    8f22:	d1 f7       	brne	.-12     	; 0x8f18 <__stack+0xd19>
    8f24:	70 2d       	mov	r23, r0
    8f26:	80 2b       	or	r24, r16
    8f28:	91 2b       	or	r25, r17
    8f2a:	a2 2b       	or	r26, r18
    8f2c:	b3 2b       	or	r27, r19
    8f2e:	8c 0d       	add	r24, r12
    8f30:	9d 1d       	adc	r25, r13
    8f32:	ae 1d       	adc	r26, r14
    8f34:	bf 1d       	adc	r27, r15
    8f36:	0d 89       	ldd	r16, Y+21	; 0x15
    8f38:	1e 89       	ldd	r17, Y+22	; 0x16
    8f3a:	2f 89       	ldd	r18, Y+23	; 0x17
    8f3c:	38 8d       	ldd	r19, Y+24	; 0x18
    8f3e:	0e 56       	subi	r16, 0x6E	; 110
    8f40:	13 43       	sbci	r17, 0x33	; 51
    8f42:	23 4f       	sbci	r18, 0xF3	; 243
    8f44:	30 47       	sbci	r19, 0x70	; 112
    8f46:	40 0f       	add	r20, r16
    8f48:	51 1f       	adc	r21, r17
    8f4a:	62 1f       	adc	r22, r18
    8f4c:	73 1f       	adc	r23, r19
    8f4e:	95 01       	movw	r18, r10
    8f50:	84 01       	movw	r16, r8
    8f52:	00 95       	com	r16
    8f54:	10 95       	com	r17
    8f56:	20 95       	com	r18
    8f58:	30 95       	com	r19
    8f5a:	08 2b       	or	r16, r24
    8f5c:	19 2b       	or	r17, r25
    8f5e:	2a 2b       	or	r18, r26
    8f60:	3b 2b       	or	r19, r27
    8f62:	0c 25       	eor	r16, r12
    8f64:	1d 25       	eor	r17, r13
    8f66:	2e 25       	eor	r18, r14
    8f68:	3f 25       	eor	r19, r15
    8f6a:	40 0f       	add	r20, r16
    8f6c:	51 1f       	adc	r21, r17
    8f6e:	62 1f       	adc	r22, r18
    8f70:	73 1f       	adc	r23, r19
    8f72:	8a 01       	movw	r16, r20
    8f74:	9b 01       	movw	r18, r22
    8f76:	0f 2e       	mov	r0, r31
    8f78:	fa e0       	ldi	r31, 0x0A	; 10
    8f7a:	00 0f       	add	r16, r16
    8f7c:	11 1f       	adc	r17, r17
    8f7e:	22 1f       	adc	r18, r18
    8f80:	33 1f       	adc	r19, r19
    8f82:	fa 95       	dec	r31
    8f84:	d1 f7       	brne	.-12     	; 0x8f7a <__stack+0xd7b>
    8f86:	f0 2d       	mov	r31, r0
    8f88:	03 2e       	mov	r0, r19
    8f8a:	36 e1       	ldi	r19, 0x16	; 22
    8f8c:	76 95       	lsr	r23
    8f8e:	67 95       	ror	r22
    8f90:	57 95       	ror	r21
    8f92:	47 95       	ror	r20
    8f94:	3a 95       	dec	r19
    8f96:	d1 f7       	brne	.-12     	; 0x8f8c <__stack+0xd8d>
    8f98:	30 2d       	mov	r19, r0
    8f9a:	40 2b       	or	r20, r16
    8f9c:	51 2b       	or	r21, r17
    8f9e:	62 2b       	or	r22, r18
    8fa0:	73 2b       	or	r23, r19
    8fa2:	48 0f       	add	r20, r24
    8fa4:	59 1f       	adc	r21, r25
    8fa6:	6a 1f       	adc	r22, r26
    8fa8:	7b 1f       	adc	r23, r27
    8faa:	09 a9       	ldd	r16, Y+49	; 0x31
    8fac:	1a a9       	ldd	r17, Y+50	; 0x32
    8fae:	2b a9       	ldd	r18, Y+51	; 0x33
    8fb0:	3c a9       	ldd	r19, Y+52	; 0x34
    8fb2:	03 58       	subi	r16, 0x83	; 131
    8fb4:	1b 40       	sbci	r17, 0x0B	; 11
    8fb6:	20 41       	sbci	r18, 0x10	; 16
    8fb8:	31 09       	sbc	r19, r1
    8fba:	80 0e       	add	r8, r16
    8fbc:	91 1e       	adc	r9, r17
    8fbe:	a2 1e       	adc	r10, r18
    8fc0:	b3 1e       	adc	r11, r19
    8fc2:	97 01       	movw	r18, r14
    8fc4:	86 01       	movw	r16, r12
    8fc6:	00 95       	com	r16
    8fc8:	10 95       	com	r17
    8fca:	20 95       	com	r18
    8fcc:	30 95       	com	r19
    8fce:	04 2b       	or	r16, r20
    8fd0:	15 2b       	or	r17, r21
    8fd2:	26 2b       	or	r18, r22
    8fd4:	37 2b       	or	r19, r23
    8fd6:	28 01       	movw	r4, r16
    8fd8:	39 01       	movw	r6, r18
    8fda:	48 26       	eor	r4, r24
    8fdc:	59 26       	eor	r5, r25
    8fde:	6a 26       	eor	r6, r26
    8fe0:	7b 26       	eor	r7, r27
    8fe2:	95 01       	movw	r18, r10
    8fe4:	84 01       	movw	r16, r8
    8fe6:	04 0d       	add	r16, r4
    8fe8:	15 1d       	adc	r17, r5
    8fea:	26 1d       	adc	r18, r6
    8fec:	37 1d       	adc	r19, r7
    8fee:	28 01       	movw	r4, r16
    8ff0:	39 01       	movw	r6, r18
    8ff2:	03 2e       	mov	r0, r19
    8ff4:	3f e0       	ldi	r19, 0x0F	; 15
    8ff6:	44 0c       	add	r4, r4
    8ff8:	55 1c       	adc	r5, r5
    8ffa:	66 1c       	adc	r6, r6
    8ffc:	77 1c       	adc	r7, r7
    8ffe:	3a 95       	dec	r19
    9000:	d1 f7       	brne	.-12     	; 0x8ff6 <__stack+0xdf7>
    9002:	30 2d       	mov	r19, r0
    9004:	0f 2e       	mov	r0, r31
    9006:	f1 e1       	ldi	r31, 0x11	; 17
    9008:	36 95       	lsr	r19
    900a:	27 95       	ror	r18
    900c:	17 95       	ror	r17
    900e:	07 95       	ror	r16
    9010:	fa 95       	dec	r31
    9012:	d1 f7       	brne	.-12     	; 0x9008 <__stack+0xe09>
    9014:	f0 2d       	mov	r31, r0
    9016:	04 29       	or	r16, r4
    9018:	15 29       	or	r17, r5
    901a:	26 29       	or	r18, r6
    901c:	37 29       	or	r19, r7
    901e:	04 0f       	add	r16, r20
    9020:	15 1f       	adc	r17, r21
    9022:	26 1f       	adc	r18, r22
    9024:	37 1f       	adc	r19, r23
    9026:	8d 84       	ldd	r8, Y+13	; 0x0d
    9028:	9e 84       	ldd	r9, Y+14	; 0x0e
    902a:	af 84       	ldd	r10, Y+15	; 0x0f
    902c:	b8 88       	ldd	r11, Y+16	; 0x10
    902e:	ef e2       	ldi	r30, 0x2F	; 47
    9030:	8e 1a       	sub	r8, r30
    9032:	e2 ea       	ldi	r30, 0xA2	; 162
    9034:	9e 0a       	sbc	r9, r30
    9036:	eb e7       	ldi	r30, 0x7B	; 123
    9038:	ae 0a       	sbc	r10, r30
    903a:	ea e7       	ldi	r30, 0x7A	; 122
    903c:	be 0a       	sbc	r11, r30
    903e:	c8 0c       	add	r12, r8
    9040:	d9 1c       	adc	r13, r9
    9042:	ea 1c       	adc	r14, r10
    9044:	fb 1c       	adc	r15, r11
    9046:	4c 01       	movw	r8, r24
    9048:	5d 01       	movw	r10, r26
    904a:	80 94       	com	r8
    904c:	90 94       	com	r9
    904e:	a0 94       	com	r10
    9050:	b0 94       	com	r11
    9052:	80 2a       	or	r8, r16
    9054:	91 2a       	or	r9, r17
    9056:	a2 2a       	or	r10, r18
    9058:	b3 2a       	or	r11, r19
    905a:	84 26       	eor	r8, r20
    905c:	95 26       	eor	r9, r21
    905e:	a6 26       	eor	r10, r22
    9060:	b7 26       	eor	r11, r23
    9062:	c8 0c       	add	r12, r8
    9064:	d9 1c       	adc	r13, r9
    9066:	ea 1c       	adc	r14, r10
    9068:	fb 1c       	adc	r15, r11
    906a:	46 01       	movw	r8, r12
    906c:	57 01       	movw	r10, r14
    906e:	07 2e       	mov	r0, r23
    9070:	7b e0       	ldi	r23, 0x0B	; 11
    9072:	b6 94       	lsr	r11
    9074:	a7 94       	ror	r10
    9076:	97 94       	ror	r9
    9078:	87 94       	ror	r8
    907a:	7a 95       	dec	r23
    907c:	d1 f7       	brne	.-12     	; 0x9072 <__stack+0xe73>
    907e:	70 2d       	mov	r23, r0
    9080:	0b 2e       	mov	r0, r27
    9082:	b5 e1       	ldi	r27, 0x15	; 21
    9084:	cc 0c       	add	r12, r12
    9086:	dd 1c       	adc	r13, r13
    9088:	ee 1c       	adc	r14, r14
    908a:	ff 1c       	adc	r15, r15
    908c:	ba 95       	dec	r27
    908e:	d1 f7       	brne	.-12     	; 0x9084 <__stack+0xe85>
    9090:	b0 2d       	mov	r27, r0
    9092:	c8 28       	or	r12, r8
    9094:	d9 28       	or	r13, r9
    9096:	ea 28       	or	r14, r10
    9098:	fb 28       	or	r15, r11
    909a:	c0 0e       	add	r12, r16
    909c:	d1 1e       	adc	r13, r17
    909e:	e2 1e       	adc	r14, r18
    90a0:	f3 1e       	adc	r15, r19
    90a2:	89 a4       	ldd	r8, Y+41	; 0x29
    90a4:	9a a4       	ldd	r9, Y+42	; 0x2a
    90a6:	ab a4       	ldd	r10, Y+43	; 0x2b
    90a8:	bc a4       	ldd	r11, Y+44	; 0x2c
    90aa:	f1 eb       	ldi	r31, 0xB1	; 177
    90ac:	8f 1a       	sub	r8, r31
    90ae:	f1 e8       	ldi	r31, 0x81	; 129
    90b0:	9f 0a       	sbc	r9, r31
    90b2:	f7 e5       	ldi	r31, 0x57	; 87
    90b4:	af 0a       	sbc	r10, r31
    90b6:	f0 e9       	ldi	r31, 0x90	; 144
    90b8:	bf 0a       	sbc	r11, r31
    90ba:	88 0d       	add	r24, r8
    90bc:	99 1d       	adc	r25, r9
    90be:	aa 1d       	adc	r26, r10
    90c0:	bb 1d       	adc	r27, r11
    90c2:	2a 01       	movw	r4, r20
    90c4:	3b 01       	movw	r6, r22
    90c6:	40 94       	com	r4
    90c8:	50 94       	com	r5
    90ca:	60 94       	com	r6
    90cc:	70 94       	com	r7
    90ce:	4c 28       	or	r4, r12
    90d0:	5d 28       	or	r5, r13
    90d2:	6e 28       	or	r6, r14
    90d4:	7f 28       	or	r7, r15
    90d6:	40 26       	eor	r4, r16
    90d8:	51 26       	eor	r5, r17
    90da:	62 26       	eor	r6, r18
    90dc:	73 26       	eor	r7, r19
    90de:	84 0d       	add	r24, r4
    90e0:	95 1d       	adc	r25, r5
    90e2:	a6 1d       	adc	r26, r6
    90e4:	b7 1d       	adc	r27, r7
    90e6:	4c 01       	movw	r8, r24
    90e8:	5d 01       	movw	r10, r26
    90ea:	88 0c       	add	r8, r8
    90ec:	99 1c       	adc	r9, r9
    90ee:	aa 1c       	adc	r10, r10
    90f0:	bb 1c       	adc	r11, r11
    90f2:	88 0c       	add	r8, r8
    90f4:	99 1c       	adc	r9, r9
    90f6:	aa 1c       	adc	r10, r10
    90f8:	bb 1c       	adc	r11, r11
    90fa:	88 0c       	add	r8, r8
    90fc:	99 1c       	adc	r9, r9
    90fe:	aa 1c       	adc	r10, r10
    9100:	bb 1c       	adc	r11, r11
    9102:	88 0c       	add	r8, r8
    9104:	99 1c       	adc	r9, r9
    9106:	aa 1c       	adc	r10, r10
    9108:	bb 1c       	adc	r11, r11
    910a:	88 0c       	add	r8, r8
    910c:	99 1c       	adc	r9, r9
    910e:	aa 1c       	adc	r10, r10
    9110:	bb 1c       	adc	r11, r11
    9112:	88 0c       	add	r8, r8
    9114:	99 1c       	adc	r9, r9
    9116:	aa 1c       	adc	r10, r10
    9118:	bb 1c       	adc	r11, r11
    911a:	07 2e       	mov	r0, r23
    911c:	7a e1       	ldi	r23, 0x1A	; 26
    911e:	b6 95       	lsr	r27
    9120:	a7 95       	ror	r26
    9122:	97 95       	ror	r25
    9124:	87 95       	ror	r24
    9126:	7a 95       	dec	r23
    9128:	d1 f7       	brne	.-12     	; 0x911e <__stack+0xf1f>
    912a:	70 2d       	mov	r23, r0
    912c:	88 29       	or	r24, r8
    912e:	99 29       	or	r25, r9
    9130:	aa 29       	or	r26, r10
    9132:	bb 29       	or	r27, r11
    9134:	8c 0d       	add	r24, r12
    9136:	9d 1d       	adc	r25, r13
    9138:	ae 1d       	adc	r26, r14
    913a:	bf 1d       	adc	r27, r15
    913c:	29 96       	adiw	r28, 0x09	; 9
    913e:	8c ac       	ldd	r8, Y+60	; 0x3c
    9140:	9d ac       	ldd	r9, Y+61	; 0x3d
    9142:	ae ac       	ldd	r10, Y+62	; 0x3e
    9144:	bf ac       	ldd	r11, Y+63	; 0x3f
    9146:	29 97       	sbiw	r28, 0x09	; 9
    9148:	e0 e2       	ldi	r30, 0x20	; 32
    914a:	8e 1a       	sub	r8, r30
    914c:	e9 e1       	ldi	r30, 0x19	; 25
    914e:	9e 0a       	sbc	r9, r30
    9150:	e3 ed       	ldi	r30, 0xD3	; 211
    9152:	ae 0a       	sbc	r10, r30
    9154:	e1 e0       	ldi	r30, 0x01	; 1
    9156:	be 0a       	sbc	r11, r30
    9158:	48 0d       	add	r20, r8
    915a:	59 1d       	adc	r21, r9
    915c:	6a 1d       	adc	r22, r10
    915e:	7b 1d       	adc	r23, r11
    9160:	48 01       	movw	r8, r16
    9162:	59 01       	movw	r10, r18
    9164:	80 94       	com	r8
    9166:	90 94       	com	r9
    9168:	a0 94       	com	r10
    916a:	b0 94       	com	r11
    916c:	88 2a       	or	r8, r24
    916e:	99 2a       	or	r9, r25
    9170:	aa 2a       	or	r10, r26
    9172:	bb 2a       	or	r11, r27
    9174:	8c 24       	eor	r8, r12
    9176:	9d 24       	eor	r9, r13
    9178:	ae 24       	eor	r10, r14
    917a:	bf 24       	eor	r11, r15
    917c:	48 0d       	add	r20, r8
    917e:	59 1d       	adc	r21, r9
    9180:	6a 1d       	adc	r22, r10
    9182:	7b 1d       	adc	r23, r11
    9184:	4a 01       	movw	r8, r20
    9186:	5b 01       	movw	r10, r22
    9188:	07 2e       	mov	r0, r23
    918a:	7a e0       	ldi	r23, 0x0A	; 10
    918c:	88 0c       	add	r8, r8
    918e:	99 1c       	adc	r9, r9
    9190:	aa 1c       	adc	r10, r10
    9192:	bb 1c       	adc	r11, r11
    9194:	7a 95       	dec	r23
    9196:	d1 f7       	brne	.-12     	; 0x918c <__stack+0xf8d>
    9198:	70 2d       	mov	r23, r0
    919a:	03 2e       	mov	r0, r19
    919c:	36 e1       	ldi	r19, 0x16	; 22
    919e:	76 95       	lsr	r23
    91a0:	67 95       	ror	r22
    91a2:	57 95       	ror	r21
    91a4:	47 95       	ror	r20
    91a6:	3a 95       	dec	r19
    91a8:	d1 f7       	brne	.-12     	; 0x919e <__stack+0xf9f>
    91aa:	30 2d       	mov	r19, r0
    91ac:	48 29       	or	r20, r8
    91ae:	59 29       	or	r21, r9
    91b0:	6a 29       	or	r22, r10
    91b2:	7b 29       	or	r23, r11
    91b4:	48 0f       	add	r20, r24
    91b6:	59 1f       	adc	r21, r25
    91b8:	6a 1f       	adc	r22, r26
    91ba:	7b 1f       	adc	r23, r27
    91bc:	89 a0       	ldd	r8, Y+33	; 0x21
    91be:	9a a0       	ldd	r9, Y+34	; 0x22
    91c0:	ab a0       	ldd	r10, Y+35	; 0x23
    91c2:	bc a0       	ldd	r11, Y+36	; 0x24
    91c4:	fc ee       	ldi	r31, 0xEC	; 236
    91c6:	8f 1a       	sub	r8, r31
    91c8:	fc eb       	ldi	r31, 0xBC	; 188
    91ca:	9f 0a       	sbc	r9, r31
    91cc:	fe ef       	ldi	r31, 0xFE	; 254
    91ce:	af 0a       	sbc	r10, r31
    91d0:	fc e5       	ldi	r31, 0x5C	; 92
    91d2:	bf 0a       	sbc	r11, r31
    91d4:	08 0d       	add	r16, r8
    91d6:	19 1d       	adc	r17, r9
    91d8:	2a 1d       	adc	r18, r10
    91da:	3b 1d       	adc	r19, r11
    91dc:	46 01       	movw	r8, r12
    91de:	57 01       	movw	r10, r14
    91e0:	80 94       	com	r8
    91e2:	90 94       	com	r9
    91e4:	a0 94       	com	r10
    91e6:	b0 94       	com	r11
    91e8:	84 2a       	or	r8, r20
    91ea:	95 2a       	or	r9, r21
    91ec:	a6 2a       	or	r10, r22
    91ee:	b7 2a       	or	r11, r23
    91f0:	88 26       	eor	r8, r24
    91f2:	99 26       	eor	r9, r25
    91f4:	aa 26       	eor	r10, r26
    91f6:	bb 26       	eor	r11, r27
    91f8:	08 0d       	add	r16, r8
    91fa:	19 1d       	adc	r17, r9
    91fc:	2a 1d       	adc	r18, r10
    91fe:	3b 1d       	adc	r19, r11
    9200:	48 01       	movw	r8, r16
    9202:	59 01       	movw	r10, r18
    9204:	07 2e       	mov	r0, r23
    9206:	7f e0       	ldi	r23, 0x0F	; 15
    9208:	88 0c       	add	r8, r8
    920a:	99 1c       	adc	r9, r9
    920c:	aa 1c       	adc	r10, r10
    920e:	bb 1c       	adc	r11, r11
    9210:	7a 95       	dec	r23
    9212:	d1 f7       	brne	.-12     	; 0x9208 <__stack+0x1009>
    9214:	70 2d       	mov	r23, r0
    9216:	0f 2e       	mov	r0, r31
    9218:	f1 e1       	ldi	r31, 0x11	; 17
    921a:	36 95       	lsr	r19
    921c:	27 95       	ror	r18
    921e:	17 95       	ror	r17
    9220:	07 95       	ror	r16
    9222:	fa 95       	dec	r31
    9224:	d1 f7       	brne	.-12     	; 0x921a <__stack+0x101b>
    9226:	f0 2d       	mov	r31, r0
    9228:	08 29       	or	r16, r8
    922a:	19 29       	or	r17, r9
    922c:	2a 29       	or	r18, r10
    922e:	3b 29       	or	r19, r11
    9230:	04 0f       	add	r16, r20
    9232:	15 1f       	adc	r17, r21
    9234:	26 1f       	adc	r18, r22
    9236:	37 1f       	adc	r19, r23
    9238:	21 96       	adiw	r28, 0x01	; 1
    923a:	8c ac       	ldd	r8, Y+60	; 0x3c
    923c:	9d ac       	ldd	r9, Y+61	; 0x3d
    923e:	ae ac       	ldd	r10, Y+62	; 0x3e
    9240:	bf ac       	ldd	r11, Y+63	; 0x3f
    9242:	21 97       	sbiw	r28, 0x01	; 1
    9244:	ef e5       	ldi	r30, 0x5F	; 95
    9246:	8e 1a       	sub	r8, r30
    9248:	ee ee       	ldi	r30, 0xEE	; 238
    924a:	9e 0a       	sbc	r9, r30
    924c:	e7 ef       	ldi	r30, 0xF7	; 247
    924e:	ae 0a       	sbc	r10, r30
    9250:	e1 eb       	ldi	r30, 0xB1	; 177
    9252:	be 0a       	sbc	r11, r30
    9254:	c8 0c       	add	r12, r8
    9256:	d9 1c       	adc	r13, r9
    9258:	ea 1c       	adc	r14, r10
    925a:	fb 1c       	adc	r15, r11
    925c:	4c 01       	movw	r8, r24
    925e:	5d 01       	movw	r10, r26
    9260:	80 94       	com	r8
    9262:	90 94       	com	r9
    9264:	a0 94       	com	r10
    9266:	b0 94       	com	r11
    9268:	80 2a       	or	r8, r16
    926a:	91 2a       	or	r9, r17
    926c:	a2 2a       	or	r10, r18
    926e:	b3 2a       	or	r11, r19
    9270:	84 26       	eor	r8, r20
    9272:	95 26       	eor	r9, r21
    9274:	a6 26       	eor	r10, r22
    9276:	b7 26       	eor	r11, r23
    9278:	c8 0c       	add	r12, r8
    927a:	d9 1c       	adc	r13, r9
    927c:	ea 1c       	adc	r14, r10
    927e:	fb 1c       	adc	r15, r11
    9280:	46 01       	movw	r8, r12
    9282:	57 01       	movw	r10, r14
    9284:	07 2e       	mov	r0, r23
    9286:	7b e0       	ldi	r23, 0x0B	; 11
    9288:	b6 94       	lsr	r11
    928a:	a7 94       	ror	r10
    928c:	97 94       	ror	r9
    928e:	87 94       	ror	r8
    9290:	7a 95       	dec	r23
    9292:	d1 f7       	brne	.-12     	; 0x9288 <__stack+0x1089>
    9294:	70 2d       	mov	r23, r0
    9296:	0b 2e       	mov	r0, r27
    9298:	b5 e1       	ldi	r27, 0x15	; 21
    929a:	cc 0c       	add	r12, r12
    929c:	dd 1c       	adc	r13, r13
    929e:	ee 1c       	adc	r14, r14
    92a0:	ff 1c       	adc	r15, r15
    92a2:	ba 95       	dec	r27
    92a4:	d1 f7       	brne	.-12     	; 0x929a <__stack+0x109b>
    92a6:	b0 2d       	mov	r27, r0
    92a8:	c8 28       	or	r12, r8
    92aa:	d9 28       	or	r13, r9
    92ac:	ea 28       	or	r14, r10
    92ae:	fb 28       	or	r15, r11
    92b0:	c0 0e       	add	r12, r16
    92b2:	d1 1e       	adc	r13, r17
    92b4:	e2 1e       	adc	r14, r18
    92b6:	f3 1e       	adc	r15, r19
    92b8:	89 8c       	ldd	r8, Y+25	; 0x19
    92ba:	9a 8c       	ldd	r9, Y+26	; 0x1a
    92bc:	ab 8c       	ldd	r10, Y+27	; 0x1b
    92be:	bc 8c       	ldd	r11, Y+28	; 0x1c
    92c0:	fe e7       	ldi	r31, 0x7E	; 126
    92c2:	8f 1a       	sub	r8, r31
    92c4:	f1 e8       	ldi	r31, 0x81	; 129
    92c6:	9f 0a       	sbc	r9, r31
    92c8:	fc ea       	ldi	r31, 0xAC	; 172
    92ca:	af 0a       	sbc	r10, r31
    92cc:	f8 e0       	ldi	r31, 0x08	; 8
    92ce:	bf 0a       	sbc	r11, r31
    92d0:	88 0d       	add	r24, r8
    92d2:	99 1d       	adc	r25, r9
    92d4:	aa 1d       	adc	r26, r10
    92d6:	bb 1d       	adc	r27, r11
    92d8:	2a 01       	movw	r4, r20
    92da:	3b 01       	movw	r6, r22
    92dc:	40 94       	com	r4
    92de:	50 94       	com	r5
    92e0:	60 94       	com	r6
    92e2:	70 94       	com	r7
    92e4:	4c 28       	or	r4, r12
    92e6:	5d 28       	or	r5, r13
    92e8:	6e 28       	or	r6, r14
    92ea:	7f 28       	or	r7, r15
    92ec:	40 26       	eor	r4, r16
    92ee:	51 26       	eor	r5, r17
    92f0:	62 26       	eor	r6, r18
    92f2:	73 26       	eor	r7, r19
    92f4:	84 0d       	add	r24, r4
    92f6:	95 1d       	adc	r25, r5
    92f8:	a6 1d       	adc	r26, r6
    92fa:	b7 1d       	adc	r27, r7
    92fc:	4c 01       	movw	r8, r24
    92fe:	5d 01       	movw	r10, r26
    9300:	88 0c       	add	r8, r8
    9302:	99 1c       	adc	r9, r9
    9304:	aa 1c       	adc	r10, r10
    9306:	bb 1c       	adc	r11, r11
    9308:	88 0c       	add	r8, r8
    930a:	99 1c       	adc	r9, r9
    930c:	aa 1c       	adc	r10, r10
    930e:	bb 1c       	adc	r11, r11
    9310:	88 0c       	add	r8, r8
    9312:	99 1c       	adc	r9, r9
    9314:	aa 1c       	adc	r10, r10
    9316:	bb 1c       	adc	r11, r11
    9318:	88 0c       	add	r8, r8
    931a:	99 1c       	adc	r9, r9
    931c:	aa 1c       	adc	r10, r10
    931e:	bb 1c       	adc	r11, r11
    9320:	88 0c       	add	r8, r8
    9322:	99 1c       	adc	r9, r9
    9324:	aa 1c       	adc	r10, r10
    9326:	bb 1c       	adc	r11, r11
    9328:	88 0c       	add	r8, r8
    932a:	99 1c       	adc	r9, r9
    932c:	aa 1c       	adc	r10, r10
    932e:	bb 1c       	adc	r11, r11
    9330:	07 2e       	mov	r0, r23
    9332:	7a e1       	ldi	r23, 0x1A	; 26
    9334:	b6 95       	lsr	r27
    9336:	a7 95       	ror	r26
    9338:	97 95       	ror	r25
    933a:	87 95       	ror	r24
    933c:	7a 95       	dec	r23
    933e:	d1 f7       	brne	.-12     	; 0x9334 <__stack+0x1135>
    9340:	70 2d       	mov	r23, r0
    9342:	88 29       	or	r24, r8
    9344:	99 29       	or	r25, r9
    9346:	aa 29       	or	r26, r10
    9348:	bb 29       	or	r27, r11
    934a:	8c 0d       	add	r24, r12
    934c:	9d 1d       	adc	r25, r13
    934e:	ae 1d       	adc	r26, r14
    9350:	bf 1d       	adc	r27, r15
    9352:	8d a8       	ldd	r8, Y+53	; 0x35
    9354:	9e a8       	ldd	r9, Y+54	; 0x36
    9356:	af a8       	ldd	r10, Y+55	; 0x37
    9358:	b8 ac       	ldd	r11, Y+56	; 0x38
    935a:	eb ec       	ldi	r30, 0xCB	; 203
    935c:	8e 1a       	sub	r8, r30
    935e:	ed e0       	ldi	r30, 0x0D	; 13
    9360:	9e 0a       	sbc	r9, r30
    9362:	e5 ec       	ldi	r30, 0xC5	; 197
    9364:	ae 0a       	sbc	r10, r30
    9366:	e2 e4       	ldi	r30, 0x42	; 66
    9368:	be 0a       	sbc	r11, r30
    936a:	48 0d       	add	r20, r8
    936c:	59 1d       	adc	r21, r9
    936e:	6a 1d       	adc	r22, r10
    9370:	7b 1d       	adc	r23, r11
    9372:	48 01       	movw	r8, r16
    9374:	59 01       	movw	r10, r18
    9376:	80 94       	com	r8
    9378:	90 94       	com	r9
    937a:	a0 94       	com	r10
    937c:	b0 94       	com	r11
    937e:	88 2a       	or	r8, r24
    9380:	99 2a       	or	r9, r25
    9382:	aa 2a       	or	r10, r26
    9384:	bb 2a       	or	r11, r27
    9386:	8c 24       	eor	r8, r12
    9388:	9d 24       	eor	r9, r13
    938a:	ae 24       	eor	r10, r14
    938c:	bf 24       	eor	r11, r15
    938e:	48 0d       	add	r20, r8
    9390:	59 1d       	adc	r21, r9
    9392:	6a 1d       	adc	r22, r10
    9394:	7b 1d       	adc	r23, r11
    9396:	4a 01       	movw	r8, r20
    9398:	5b 01       	movw	r10, r22
    939a:	07 2e       	mov	r0, r23
    939c:	7a e0       	ldi	r23, 0x0A	; 10
    939e:	88 0c       	add	r8, r8
    93a0:	99 1c       	adc	r9, r9
    93a2:	aa 1c       	adc	r10, r10
    93a4:	bb 1c       	adc	r11, r11
    93a6:	7a 95       	dec	r23
    93a8:	d1 f7       	brne	.-12     	; 0x939e <__stack+0x119f>
    93aa:	70 2d       	mov	r23, r0
    93ac:	03 2e       	mov	r0, r19
    93ae:	36 e1       	ldi	r19, 0x16	; 22
    93b0:	76 95       	lsr	r23
    93b2:	67 95       	ror	r22
    93b4:	57 95       	ror	r21
    93b6:	47 95       	ror	r20
    93b8:	3a 95       	dec	r19
    93ba:	d1 f7       	brne	.-12     	; 0x93b0 <__stack+0x11b1>
    93bc:	30 2d       	mov	r19, r0
    93be:	48 29       	or	r20, r8
    93c0:	59 29       	or	r21, r9
    93c2:	6a 29       	or	r22, r10
    93c4:	7b 29       	or	r23, r11
    93c6:	48 0f       	add	r20, r24
    93c8:	59 1f       	adc	r21, r25
    93ca:	6a 1f       	adc	r22, r26
    93cc:	7b 1f       	adc	r23, r27
    93ce:	89 88       	ldd	r8, Y+17	; 0x11
    93d0:	9a 88       	ldd	r9, Y+18	; 0x12
    93d2:	ab 88       	ldd	r10, Y+19	; 0x13
    93d4:	bc 88       	ldd	r11, Y+20	; 0x14
    93d6:	f5 e4       	ldi	r31, 0x45	; 69
    93d8:	8f 1a       	sub	r8, r31
    93da:	fd e2       	ldi	r31, 0x2D	; 45
    93dc:	9f 0a       	sbc	r9, r31
    93de:	f8 e2       	ldi	r31, 0x28	; 40
    93e0:	af 0a       	sbc	r10, r31
    93e2:	f5 ed       	ldi	r31, 0xD5	; 213
    93e4:	bf 0a       	sbc	r11, r31
    93e6:	08 0d       	add	r16, r8
    93e8:	19 1d       	adc	r17, r9
    93ea:	2a 1d       	adc	r18, r10
    93ec:	3b 1d       	adc	r19, r11
    93ee:	46 01       	movw	r8, r12
    93f0:	57 01       	movw	r10, r14
    93f2:	80 94       	com	r8
    93f4:	90 94       	com	r9
    93f6:	a0 94       	com	r10
    93f8:	b0 94       	com	r11
    93fa:	84 2a       	or	r8, r20
    93fc:	95 2a       	or	r9, r21
    93fe:	a6 2a       	or	r10, r22
    9400:	b7 2a       	or	r11, r23
    9402:	88 26       	eor	r8, r24
    9404:	99 26       	eor	r9, r25
    9406:	aa 26       	eor	r10, r26
    9408:	bb 26       	eor	r11, r27
    940a:	08 0d       	add	r16, r8
    940c:	19 1d       	adc	r17, r9
    940e:	2a 1d       	adc	r18, r10
    9410:	3b 1d       	adc	r19, r11
    9412:	48 01       	movw	r8, r16
    9414:	59 01       	movw	r10, r18
    9416:	07 2e       	mov	r0, r23
    9418:	7f e0       	ldi	r23, 0x0F	; 15
    941a:	88 0c       	add	r8, r8
    941c:	99 1c       	adc	r9, r9
    941e:	aa 1c       	adc	r10, r10
    9420:	bb 1c       	adc	r11, r11
    9422:	7a 95       	dec	r23
    9424:	d1 f7       	brne	.-12     	; 0x941a <__stack+0x121b>
    9426:	70 2d       	mov	r23, r0
    9428:	0f 2e       	mov	r0, r31
    942a:	f1 e1       	ldi	r31, 0x11	; 17
    942c:	36 95       	lsr	r19
    942e:	27 95       	ror	r18
    9430:	17 95       	ror	r17
    9432:	07 95       	ror	r16
    9434:	fa 95       	dec	r31
    9436:	d1 f7       	brne	.-12     	; 0x942c <__stack+0x122d>
    9438:	f0 2d       	mov	r31, r0
    943a:	08 29       	or	r16, r8
    943c:	19 29       	or	r17, r9
    943e:	2a 29       	or	r18, r10
    9440:	3b 29       	or	r19, r11
    9442:	04 0f       	add	r16, r20
    9444:	15 1f       	adc	r17, r21
    9446:	26 1f       	adc	r18, r22
    9448:	37 1f       	adc	r19, r23
    944a:	8d a4       	ldd	r8, Y+45	; 0x2d
    944c:	9e a4       	ldd	r9, Y+46	; 0x2e
    944e:	af a4       	ldd	r10, Y+47	; 0x2f
    9450:	b8 a8       	ldd	r11, Y+48	; 0x30
    9452:	ef e6       	ldi	r30, 0x6F	; 111
    9454:	8e 1a       	sub	r8, r30
    9456:	ec e2       	ldi	r30, 0x2C	; 44
    9458:	9e 0a       	sbc	r9, r30
    945a:	e9 e7       	ldi	r30, 0x79	; 121
    945c:	ae 0a       	sbc	r10, r30
    945e:	e4 e1       	ldi	r30, 0x14	; 20
    9460:	be 0a       	sbc	r11, r30
    9462:	c8 0c       	add	r12, r8
    9464:	d9 1c       	adc	r13, r9
    9466:	ea 1c       	adc	r14, r10
    9468:	fb 1c       	adc	r15, r11
    946a:	61 96       	adiw	r28, 0x11	; 17
    946c:	8c ac       	ldd	r8, Y+60	; 0x3c
    946e:	9d ac       	ldd	r9, Y+61	; 0x3d
    9470:	ae ac       	ldd	r10, Y+62	; 0x3e
    9472:	bf ac       	ldd	r11, Y+63	; 0x3f
    9474:	61 97       	sbiw	r28, 0x11	; 17
    9476:	88 0e       	add	r8, r24
    9478:	99 1e       	adc	r9, r25
    947a:	aa 1e       	adc	r10, r26
    947c:	bb 1e       	adc	r11, r27
    947e:	f1 01       	movw	r30, r2
    9480:	80 86       	std	Z+8, r8	; 0x08
    9482:	91 86       	std	Z+9, r9	; 0x09
    9484:	a2 86       	std	Z+10, r10	; 0x0a
    9486:	b3 86       	std	Z+11, r11	; 0x0b
    9488:	89 80       	ldd	r8, Y+1	; 0x01
    948a:	9a 80       	ldd	r9, Y+2	; 0x02
    948c:	ab 80       	ldd	r10, Y+3	; 0x03
    948e:	bc 80       	ldd	r11, Y+4	; 0x04
    9490:	80 0e       	add	r8, r16
    9492:	91 1e       	adc	r9, r17
    9494:	a2 1e       	adc	r10, r18
    9496:	b3 1e       	adc	r11, r19
    9498:	80 95       	com	r24
    949a:	90 95       	com	r25
    949c:	a0 95       	com	r26
    949e:	b0 95       	com	r27
    94a0:	80 2b       	or	r24, r16
    94a2:	91 2b       	or	r25, r17
    94a4:	a2 2b       	or	r26, r18
    94a6:	b3 2b       	or	r27, r19
    94a8:	84 27       	eor	r24, r20
    94aa:	95 27       	eor	r25, r21
    94ac:	a6 27       	eor	r26, r22
    94ae:	b7 27       	eor	r27, r23
    94b0:	c8 0e       	add	r12, r24
    94b2:	d9 1e       	adc	r13, r25
    94b4:	ea 1e       	adc	r14, r26
    94b6:	fb 1e       	adc	r15, r27
    94b8:	26 01       	movw	r4, r12
    94ba:	37 01       	movw	r6, r14
    94bc:	03 2e       	mov	r0, r19
    94be:	3b e0       	ldi	r19, 0x0B	; 11
    94c0:	76 94       	lsr	r7
    94c2:	67 94       	ror	r6
    94c4:	57 94       	ror	r5
    94c6:	47 94       	ror	r4
    94c8:	3a 95       	dec	r19
    94ca:	d1 f7       	brne	.-12     	; 0x94c0 <__stack+0x12c1>
    94cc:	30 2d       	mov	r19, r0
    94ce:	0b 2e       	mov	r0, r27
    94d0:	b5 e1       	ldi	r27, 0x15	; 21
    94d2:	cc 0c       	add	r12, r12
    94d4:	dd 1c       	adc	r13, r13
    94d6:	ee 1c       	adc	r14, r14
    94d8:	ff 1c       	adc	r15, r15
    94da:	ba 95       	dec	r27
    94dc:	d1 f7       	brne	.-12     	; 0x94d2 <__stack+0x12d3>
    94de:	b0 2d       	mov	r27, r0
    94e0:	c4 28       	or	r12, r4
    94e2:	d5 28       	or	r13, r5
    94e4:	e6 28       	or	r14, r6
    94e6:	f7 28       	or	r15, r7
    94e8:	8c 0c       	add	r8, r12
    94ea:	9d 1c       	adc	r9, r13
    94ec:	ae 1c       	adc	r10, r14
    94ee:	bf 1c       	adc	r11, r15
    94f0:	84 86       	std	Z+12, r8	; 0x0c
    94f2:	95 86       	std	Z+13, r9	; 0x0d
    94f4:	a6 86       	std	Z+14, r10	; 0x0e
    94f6:	b7 86       	std	Z+15, r11	; 0x0f
    94f8:	cd 80       	ldd	r12, Y+5	; 0x05
    94fa:	de 80       	ldd	r13, Y+6	; 0x06
    94fc:	ef 80       	ldd	r14, Y+7	; 0x07
    94fe:	f8 84       	ldd	r15, Y+8	; 0x08
    9500:	0c 0d       	add	r16, r12
    9502:	1d 1d       	adc	r17, r13
    9504:	2e 1d       	adc	r18, r14
    9506:	3f 1d       	adc	r19, r15
    9508:	00 8b       	std	Z+16, r16	; 0x10
    950a:	11 8b       	std	Z+17, r17	; 0x11
    950c:	22 8b       	std	Z+18, r18	; 0x12
    950e:	33 8b       	std	Z+19, r19	; 0x13
    9510:	2d 96       	adiw	r28, 0x0d	; 13
    9512:	cc ac       	ldd	r12, Y+60	; 0x3c
    9514:	dd ac       	ldd	r13, Y+61	; 0x3d
    9516:	ee ac       	ldd	r14, Y+62	; 0x3e
    9518:	ff ac       	ldd	r15, Y+63	; 0x3f
    951a:	2d 97       	sbiw	r28, 0x0d	; 13
    951c:	4c 0d       	add	r20, r12
    951e:	5d 1d       	adc	r21, r13
    9520:	6e 1d       	adc	r22, r14
    9522:	7f 1d       	adc	r23, r15
    9524:	44 8b       	std	Z+20, r20	; 0x14
    9526:	55 8b       	std	Z+21, r21	; 0x15
    9528:	66 8b       	std	Z+22, r22	; 0x16
    952a:	77 8b       	std	Z+23, r23	; 0x17
    952c:	c0 5b       	subi	r28, 0xB0	; 176
    952e:	df 4f       	sbci	r29, 0xFF	; 255
    9530:	0f b6       	in	r0, 0x3f	; 63
    9532:	f8 94       	cli
    9534:	de bf       	out	0x3e, r29	; 62
    9536:	0f be       	out	0x3f, r0	; 63
    9538:	cd bf       	out	0x3d, r28	; 61
    953a:	df 91       	pop	r29
    953c:	cf 91       	pop	r28
    953e:	1f 91       	pop	r17
    9540:	0f 91       	pop	r16
    9542:	ff 90       	pop	r15
    9544:	ef 90       	pop	r14
    9546:	df 90       	pop	r13
    9548:	cf 90       	pop	r12
    954a:	bf 90       	pop	r11
    954c:	af 90       	pop	r10
    954e:	9f 90       	pop	r9
    9550:	8f 90       	pop	r8
    9552:	7f 90       	pop	r7
    9554:	6f 90       	pop	r6
    9556:	5f 90       	pop	r5
    9558:	4f 90       	pop	r4
    955a:	3f 90       	pop	r3
    955c:	2f 90       	pop	r2
    955e:	08 95       	ret

00009560 <md5_starts>:
    9560:	fc 01       	movw	r30, r24
    9562:	10 82       	st	Z, r1
    9564:	11 82       	std	Z+1, r1	; 0x01
    9566:	12 82       	std	Z+2, r1	; 0x02
    9568:	13 82       	std	Z+3, r1	; 0x03
    956a:	14 82       	std	Z+4, r1	; 0x04
    956c:	15 82       	std	Z+5, r1	; 0x05
    956e:	16 82       	std	Z+6, r1	; 0x06
    9570:	17 82       	std	Z+7, r1	; 0x07
    9572:	81 e0       	ldi	r24, 0x01	; 1
    9574:	93 e2       	ldi	r25, 0x23	; 35
    9576:	a5 e4       	ldi	r26, 0x45	; 69
    9578:	b7 e6       	ldi	r27, 0x67	; 103
    957a:	80 87       	std	Z+8, r24	; 0x08
    957c:	91 87       	std	Z+9, r25	; 0x09
    957e:	a2 87       	std	Z+10, r26	; 0x0a
    9580:	b3 87       	std	Z+11, r27	; 0x0b
    9582:	89 e8       	ldi	r24, 0x89	; 137
    9584:	9b ea       	ldi	r25, 0xAB	; 171
    9586:	ad ec       	ldi	r26, 0xCD	; 205
    9588:	bf ee       	ldi	r27, 0xEF	; 239
    958a:	84 87       	std	Z+12, r24	; 0x0c
    958c:	95 87       	std	Z+13, r25	; 0x0d
    958e:	a6 87       	std	Z+14, r26	; 0x0e
    9590:	b7 87       	std	Z+15, r27	; 0x0f
    9592:	8e ef       	ldi	r24, 0xFE	; 254
    9594:	9c ed       	ldi	r25, 0xDC	; 220
    9596:	aa eb       	ldi	r26, 0xBA	; 186
    9598:	b8 e9       	ldi	r27, 0x98	; 152
    959a:	80 8b       	std	Z+16, r24	; 0x10
    959c:	91 8b       	std	Z+17, r25	; 0x11
    959e:	a2 8b       	std	Z+18, r26	; 0x12
    95a0:	b3 8b       	std	Z+19, r27	; 0x13
    95a2:	86 e7       	ldi	r24, 0x76	; 118
    95a4:	94 e5       	ldi	r25, 0x54	; 84
    95a6:	a2 e3       	ldi	r26, 0x32	; 50
    95a8:	b0 e1       	ldi	r27, 0x10	; 16
    95aa:	84 8b       	std	Z+20, r24	; 0x14
    95ac:	95 8b       	std	Z+21, r25	; 0x15
    95ae:	a6 8b       	std	Z+22, r26	; 0x16
    95b0:	b7 8b       	std	Z+23, r27	; 0x17
    95b2:	08 95       	ret

000095b4 <md5_update>:
    95b4:	8f 92       	push	r8
    95b6:	9f 92       	push	r9
    95b8:	af 92       	push	r10
    95ba:	bf 92       	push	r11
    95bc:	cf 92       	push	r12
    95be:	df 92       	push	r13
    95c0:	ef 92       	push	r14
    95c2:	ff 92       	push	r15
    95c4:	0f 93       	push	r16
    95c6:	1f 93       	push	r17
    95c8:	cf 93       	push	r28
    95ca:	df 93       	push	r29
    95cc:	7c 01       	movw	r14, r24
    95ce:	8b 01       	movw	r16, r22
    95d0:	ea 01       	movw	r28, r20
    95d2:	1c 16       	cp	r1, r28
    95d4:	1d 06       	cpc	r1, r29
    95d6:	0c f0       	brlt	.+2      	; 0x95da <md5_update+0x26>
    95d8:	6b c0       	rjmp	.+214    	; 0x96b0 <md5_update+0xfc>
    95da:	fc 01       	movw	r30, r24
    95dc:	80 81       	ld	r24, Z
    95de:	91 81       	ldd	r25, Z+1	; 0x01
    95e0:	a2 81       	ldd	r26, Z+2	; 0x02
    95e2:	b3 81       	ldd	r27, Z+3	; 0x03
    95e4:	4c 01       	movw	r8, r24
    95e6:	5d 01       	movw	r10, r26
    95e8:	ff e3       	ldi	r31, 0x3F	; 63
    95ea:	8f 22       	and	r8, r31
    95ec:	99 24       	eor	r9, r9
    95ee:	aa 24       	eor	r10, r10
    95f0:	bb 24       	eor	r11, r11
    95f2:	05 2e       	mov	r0, r21
    95f4:	00 0c       	add	r0, r0
    95f6:	66 0b       	sbc	r22, r22
    95f8:	77 0b       	sbc	r23, r23
    95fa:	84 0f       	add	r24, r20
    95fc:	95 1f       	adc	r25, r21
    95fe:	a6 1f       	adc	r26, r22
    9600:	b7 1f       	adc	r27, r23
    9602:	f7 01       	movw	r30, r14
    9604:	80 83       	st	Z, r24
    9606:	91 83       	std	Z+1, r25	; 0x01
    9608:	a2 83       	std	Z+2, r26	; 0x02
    960a:	b3 83       	std	Z+3, r27	; 0x03
    960c:	84 17       	cp	r24, r20
    960e:	95 07       	cpc	r25, r21
    9610:	a6 07       	cpc	r26, r22
    9612:	b7 07       	cpc	r27, r23
    9614:	58 f4       	brcc	.+22     	; 0x962c <md5_update+0x78>
    9616:	84 81       	ldd	r24, Z+4	; 0x04
    9618:	95 81       	ldd	r25, Z+5	; 0x05
    961a:	a6 81       	ldd	r26, Z+6	; 0x06
    961c:	b7 81       	ldd	r27, Z+7	; 0x07
    961e:	01 96       	adiw	r24, 0x01	; 1
    9620:	a1 1d       	adc	r26, r1
    9622:	b1 1d       	adc	r27, r1
    9624:	84 83       	std	Z+4, r24	; 0x04
    9626:	95 83       	std	Z+5, r25	; 0x05
    9628:	a6 83       	std	Z+6, r26	; 0x06
    962a:	b7 83       	std	Z+7, r27	; 0x07
    962c:	81 14       	cp	r8, r1
    962e:	91 04       	cpc	r9, r1
    9630:	a1 04       	cpc	r10, r1
    9632:	b1 04       	cpc	r11, r1
    9634:	c9 f1       	breq	.+114    	; 0x96a8 <md5_update+0xf4>
    9636:	80 e4       	ldi	r24, 0x40	; 64
    9638:	90 e0       	ldi	r25, 0x00	; 0
    963a:	6c 01       	movw	r12, r24
    963c:	c8 18       	sub	r12, r8
    963e:	d9 08       	sbc	r13, r9
    9640:	cc 15       	cp	r28, r12
    9642:	dd 05       	cpc	r29, r13
    9644:	8c f1       	brlt	.+98     	; 0x96a8 <md5_update+0xf4>
    9646:	c4 01       	movw	r24, r8
    9648:	48 96       	adiw	r24, 0x18	; 24
    964a:	a6 01       	movw	r20, r12
    964c:	b8 01       	movw	r22, r16
    964e:	8e 0d       	add	r24, r14
    9650:	9f 1d       	adc	r25, r15
    9652:	45 d3       	rcall	.+1674   	; 0x9cde <memcpy>
    9654:	b7 01       	movw	r22, r14
    9656:	68 5e       	subi	r22, 0xE8	; 232
    9658:	7f 4f       	sbci	r23, 0xFF	; 255
    965a:	c7 01       	movw	r24, r14
    965c:	0e 94 22 39 	call	0x7244	; 0x7244 <md5_process>
    9660:	0c 0d       	add	r16, r12
    9662:	1d 1d       	adc	r17, r13
    9664:	cc 19       	sub	r28, r12
    9666:	dd 09       	sbc	r29, r13
    9668:	c0 34       	cpi	r28, 0x40	; 64
    966a:	d1 05       	cpc	r29, r1
    966c:	7c f0       	brlt	.+30     	; 0x968c <md5_update+0xd8>
    966e:	81 2c       	mov	r8, r1
    9670:	91 2c       	mov	r9, r1
    9672:	54 01       	movw	r10, r8
    9674:	b8 01       	movw	r22, r16
    9676:	c7 01       	movw	r24, r14
    9678:	0e 94 22 39 	call	0x7244	; 0x7244 <md5_process>
    967c:	00 5c       	subi	r16, 0xC0	; 192
    967e:	1f 4f       	sbci	r17, 0xFF	; 255
    9680:	c0 54       	subi	r28, 0x40	; 64
    9682:	d1 09       	sbc	r29, r1
    9684:	c0 34       	cpi	r28, 0x40	; 64
    9686:	d1 05       	cpc	r29, r1
    9688:	ac f7       	brge	.-22     	; 0x9674 <md5_update+0xc0>
    968a:	03 c0       	rjmp	.+6      	; 0x9692 <md5_update+0xde>
    968c:	81 2c       	mov	r8, r1
    968e:	91 2c       	mov	r9, r1
    9690:	54 01       	movw	r10, r8
    9692:	1c 16       	cp	r1, r28
    9694:	1d 06       	cpc	r1, r29
    9696:	64 f4       	brge	.+24     	; 0x96b0 <md5_update+0xfc>
    9698:	c4 01       	movw	r24, r8
    969a:	48 96       	adiw	r24, 0x18	; 24
    969c:	ae 01       	movw	r20, r28
    969e:	b8 01       	movw	r22, r16
    96a0:	8e 0d       	add	r24, r14
    96a2:	9f 1d       	adc	r25, r15
    96a4:	1c d3       	rcall	.+1592   	; 0x9cde <memcpy>
    96a6:	04 c0       	rjmp	.+8      	; 0x96b0 <md5_update+0xfc>
    96a8:	c0 34       	cpi	r28, 0x40	; 64
    96aa:	d1 05       	cpc	r29, r1
    96ac:	1c f7       	brge	.-58     	; 0x9674 <md5_update+0xc0>
    96ae:	f4 cf       	rjmp	.-24     	; 0x9698 <md5_update+0xe4>
    96b0:	df 91       	pop	r29
    96b2:	cf 91       	pop	r28
    96b4:	1f 91       	pop	r17
    96b6:	0f 91       	pop	r16
    96b8:	ff 90       	pop	r15
    96ba:	ef 90       	pop	r14
    96bc:	df 90       	pop	r13
    96be:	cf 90       	pop	r12
    96c0:	bf 90       	pop	r11
    96c2:	af 90       	pop	r10
    96c4:	9f 90       	pop	r9
    96c6:	8f 90       	pop	r8
    96c8:	08 95       	ret

000096ca <md5_finish>:
    96ca:	8f 92       	push	r8
    96cc:	9f 92       	push	r9
    96ce:	af 92       	push	r10
    96d0:	bf 92       	push	r11
    96d2:	ef 92       	push	r14
    96d4:	ff 92       	push	r15
    96d6:	0f 93       	push	r16
    96d8:	1f 93       	push	r17
    96da:	cf 93       	push	r28
    96dc:	df 93       	push	r29
    96de:	cd b7       	in	r28, 0x3d	; 61
    96e0:	de b7       	in	r29, 0x3e	; 62
    96e2:	28 97       	sbiw	r28, 0x08	; 8
    96e4:	0f b6       	in	r0, 0x3f	; 63
    96e6:	f8 94       	cli
    96e8:	de bf       	out	0x3e, r29	; 62
    96ea:	0f be       	out	0x3f, r0	; 63
    96ec:	cd bf       	out	0x3d, r28	; 61
    96ee:	8c 01       	movw	r16, r24
    96f0:	7b 01       	movw	r14, r22
    96f2:	fc 01       	movw	r30, r24
    96f4:	80 81       	ld	r24, Z
    96f6:	91 81       	ldd	r25, Z+1	; 0x01
    96f8:	a2 81       	ldd	r26, Z+2	; 0x02
    96fa:	b3 81       	ldd	r27, Z+3	; 0x03
    96fc:	44 81       	ldd	r20, Z+4	; 0x04
    96fe:	55 81       	ldd	r21, Z+5	; 0x05
    9700:	66 81       	ldd	r22, Z+6	; 0x06
    9702:	77 81       	ldd	r23, Z+7	; 0x07
    9704:	44 0f       	add	r20, r20
    9706:	55 1f       	adc	r21, r21
    9708:	66 1f       	adc	r22, r22
    970a:	77 1f       	adc	r23, r23
    970c:	44 0f       	add	r20, r20
    970e:	55 1f       	adc	r21, r21
    9710:	66 1f       	adc	r22, r22
    9712:	77 1f       	adc	r23, r23
    9714:	44 0f       	add	r20, r20
    9716:	55 1f       	adc	r21, r21
    9718:	66 1f       	adc	r22, r22
    971a:	77 1f       	adc	r23, r23
    971c:	4c 01       	movw	r8, r24
    971e:	5d 01       	movw	r10, r26
    9720:	07 2e       	mov	r0, r23
    9722:	7d e1       	ldi	r23, 0x1D	; 29
    9724:	b6 94       	lsr	r11
    9726:	a7 94       	ror	r10
    9728:	97 94       	ror	r9
    972a:	87 94       	ror	r8
    972c:	7a 95       	dec	r23
    972e:	d1 f7       	brne	.-12     	; 0x9724 <md5_finish+0x5a>
    9730:	70 2d       	mov	r23, r0
    9732:	48 29       	or	r20, r8
    9734:	59 29       	or	r21, r9
    9736:	6a 29       	or	r22, r10
    9738:	7b 29       	or	r23, r11
    973a:	4c 01       	movw	r8, r24
    973c:	5d 01       	movw	r10, r26
    973e:	88 0c       	add	r8, r8
    9740:	99 1c       	adc	r9, r9
    9742:	aa 1c       	adc	r10, r10
    9744:	bb 1c       	adc	r11, r11
    9746:	88 0c       	add	r8, r8
    9748:	99 1c       	adc	r9, r9
    974a:	aa 1c       	adc	r10, r10
    974c:	bb 1c       	adc	r11, r11
    974e:	88 0c       	add	r8, r8
    9750:	99 1c       	adc	r9, r9
    9752:	aa 1c       	adc	r10, r10
    9754:	bb 1c       	adc	r11, r11
    9756:	89 82       	std	Y+1, r8	; 0x01
    9758:	9a 82       	std	Y+2, r9	; 0x02
    975a:	ab 82       	std	Y+3, r10	; 0x03
    975c:	bc 82       	std	Y+4, r11	; 0x04
    975e:	4d 83       	std	Y+5, r20	; 0x05
    9760:	5e 83       	std	Y+6, r21	; 0x06
    9762:	6f 83       	std	Y+7, r22	; 0x07
    9764:	78 87       	std	Y+8, r23	; 0x08
    9766:	8f 73       	andi	r24, 0x3F	; 63
    9768:	99 27       	eor	r25, r25
    976a:	aa 27       	eor	r26, r26
    976c:	bb 27       	eor	r27, r27
    976e:	88 33       	cpi	r24, 0x38	; 56
    9770:	91 05       	cpc	r25, r1
    9772:	a1 05       	cpc	r26, r1
    9774:	b1 05       	cpc	r27, r1
    9776:	48 f4       	brcc	.+18     	; 0x978a <md5_finish+0xc0>
    9778:	48 e3       	ldi	r20, 0x38	; 56
    977a:	50 e0       	ldi	r21, 0x00	; 0
    977c:	60 e0       	ldi	r22, 0x00	; 0
    977e:	70 e0       	ldi	r23, 0x00	; 0
    9780:	48 1b       	sub	r20, r24
    9782:	59 0b       	sbc	r21, r25
    9784:	6a 0b       	sbc	r22, r26
    9786:	7b 0b       	sbc	r23, r27
    9788:	08 c0       	rjmp	.+16     	; 0x979a <md5_finish+0xd0>
    978a:	48 e7       	ldi	r20, 0x78	; 120
    978c:	50 e0       	ldi	r21, 0x00	; 0
    978e:	60 e0       	ldi	r22, 0x00	; 0
    9790:	70 e0       	ldi	r23, 0x00	; 0
    9792:	48 1b       	sub	r20, r24
    9794:	59 0b       	sbc	r21, r25
    9796:	6a 0b       	sbc	r22, r26
    9798:	7b 0b       	sbc	r23, r27
    979a:	69 e2       	ldi	r22, 0x29	; 41
    979c:	79 e0       	ldi	r23, 0x09	; 9
    979e:	c8 01       	movw	r24, r16
    97a0:	09 df       	rcall	.-494    	; 0x95b4 <md5_update>
    97a2:	48 e0       	ldi	r20, 0x08	; 8
    97a4:	50 e0       	ldi	r21, 0x00	; 0
    97a6:	be 01       	movw	r22, r28
    97a8:	6f 5f       	subi	r22, 0xFF	; 255
    97aa:	7f 4f       	sbci	r23, 0xFF	; 255
    97ac:	c8 01       	movw	r24, r16
    97ae:	02 df       	rcall	.-508    	; 0x95b4 <md5_update>
    97b0:	f8 01       	movw	r30, r16
    97b2:	80 85       	ldd	r24, Z+8	; 0x08
    97b4:	f7 01       	movw	r30, r14
    97b6:	80 83       	st	Z, r24
    97b8:	f8 01       	movw	r30, r16
    97ba:	81 85       	ldd	r24, Z+9	; 0x09
    97bc:	f7 01       	movw	r30, r14
    97be:	81 83       	std	Z+1, r24	; 0x01
    97c0:	f8 01       	movw	r30, r16
    97c2:	82 85       	ldd	r24, Z+10	; 0x0a
    97c4:	f7 01       	movw	r30, r14
    97c6:	82 83       	std	Z+2, r24	; 0x02
    97c8:	f8 01       	movw	r30, r16
    97ca:	83 85       	ldd	r24, Z+11	; 0x0b
    97cc:	f7 01       	movw	r30, r14
    97ce:	83 83       	std	Z+3, r24	; 0x03
    97d0:	f8 01       	movw	r30, r16
    97d2:	84 85       	ldd	r24, Z+12	; 0x0c
    97d4:	f7 01       	movw	r30, r14
    97d6:	84 83       	std	Z+4, r24	; 0x04
    97d8:	f8 01       	movw	r30, r16
    97da:	85 85       	ldd	r24, Z+13	; 0x0d
    97dc:	f7 01       	movw	r30, r14
    97de:	85 83       	std	Z+5, r24	; 0x05
    97e0:	f8 01       	movw	r30, r16
    97e2:	86 85       	ldd	r24, Z+14	; 0x0e
    97e4:	f7 01       	movw	r30, r14
    97e6:	86 83       	std	Z+6, r24	; 0x06
    97e8:	f8 01       	movw	r30, r16
    97ea:	87 85       	ldd	r24, Z+15	; 0x0f
    97ec:	f7 01       	movw	r30, r14
    97ee:	87 83       	std	Z+7, r24	; 0x07
    97f0:	f8 01       	movw	r30, r16
    97f2:	80 89       	ldd	r24, Z+16	; 0x10
    97f4:	f7 01       	movw	r30, r14
    97f6:	80 87       	std	Z+8, r24	; 0x08
    97f8:	f8 01       	movw	r30, r16
    97fa:	81 89       	ldd	r24, Z+17	; 0x11
    97fc:	f7 01       	movw	r30, r14
    97fe:	81 87       	std	Z+9, r24	; 0x09
    9800:	f8 01       	movw	r30, r16
    9802:	82 89       	ldd	r24, Z+18	; 0x12
    9804:	f7 01       	movw	r30, r14
    9806:	82 87       	std	Z+10, r24	; 0x0a
    9808:	f8 01       	movw	r30, r16
    980a:	83 89       	ldd	r24, Z+19	; 0x13
    980c:	f7 01       	movw	r30, r14
    980e:	83 87       	std	Z+11, r24	; 0x0b
    9810:	f8 01       	movw	r30, r16
    9812:	84 89       	ldd	r24, Z+20	; 0x14
    9814:	f7 01       	movw	r30, r14
    9816:	84 87       	std	Z+12, r24	; 0x0c
    9818:	f8 01       	movw	r30, r16
    981a:	85 89       	ldd	r24, Z+21	; 0x15
    981c:	f7 01       	movw	r30, r14
    981e:	85 87       	std	Z+13, r24	; 0x0d
    9820:	f8 01       	movw	r30, r16
    9822:	86 89       	ldd	r24, Z+22	; 0x16
    9824:	f7 01       	movw	r30, r14
    9826:	86 87       	std	Z+14, r24	; 0x0e
    9828:	f8 01       	movw	r30, r16
    982a:	87 89       	ldd	r24, Z+23	; 0x17
    982c:	f7 01       	movw	r30, r14
    982e:	87 87       	std	Z+15, r24	; 0x0f
    9830:	28 96       	adiw	r28, 0x08	; 8
    9832:	0f b6       	in	r0, 0x3f	; 63
    9834:	f8 94       	cli
    9836:	de bf       	out	0x3e, r29	; 62
    9838:	0f be       	out	0x3f, r0	; 63
    983a:	cd bf       	out	0x3d, r28	; 61
    983c:	df 91       	pop	r29
    983e:	cf 91       	pop	r28
    9840:	1f 91       	pop	r17
    9842:	0f 91       	pop	r16
    9844:	ff 90       	pop	r15
    9846:	ef 90       	pop	r14
    9848:	bf 90       	pop	r11
    984a:	af 90       	pop	r10
    984c:	9f 90       	pop	r9
    984e:	8f 90       	pop	r8
    9850:	08 95       	ret

00009852 <md5>:
    9852:	af 92       	push	r10
    9854:	bf 92       	push	r11
    9856:	cf 92       	push	r12
    9858:	df 92       	push	r13
    985a:	ef 92       	push	r14
    985c:	ff 92       	push	r15
    985e:	0f 93       	push	r16
    9860:	1f 93       	push	r17
    9862:	cf 93       	push	r28
    9864:	df 93       	push	r29
    9866:	cd b7       	in	r28, 0x3d	; 61
    9868:	de b7       	in	r29, 0x3e	; 62
    986a:	c8 5d       	subi	r28, 0xD8	; 216
    986c:	d1 09       	sbc	r29, r1
    986e:	0f b6       	in	r0, 0x3f	; 63
    9870:	f8 94       	cli
    9872:	de bf       	out	0x3e, r29	; 62
    9874:	0f be       	out	0x3f, r0	; 63
    9876:	cd bf       	out	0x3d, r28	; 61
    9878:	6c 01       	movw	r12, r24
    987a:	5b 01       	movw	r10, r22
    987c:	7a 01       	movw	r14, r20
    987e:	8e 01       	movw	r16, r28
    9880:	0f 5f       	subi	r16, 0xFF	; 255
    9882:	1f 4f       	sbci	r17, 0xFF	; 255
    9884:	c8 01       	movw	r24, r16
    9886:	6c de       	rcall	.-808    	; 0x9560 <md5_starts>
    9888:	a5 01       	movw	r20, r10
    988a:	b6 01       	movw	r22, r12
    988c:	c8 01       	movw	r24, r16
    988e:	92 de       	rcall	.-732    	; 0x95b4 <md5_update>
    9890:	b7 01       	movw	r22, r14
    9892:	c8 01       	movw	r24, r16
    9894:	1a df       	rcall	.-460    	; 0x96ca <md5_finish>
    9896:	88 ed       	ldi	r24, 0xD8	; 216
    9898:	f8 01       	movw	r30, r16
    989a:	11 92       	st	Z+, r1
    989c:	8a 95       	dec	r24
    989e:	e9 f7       	brne	.-6      	; 0x989a <md5+0x48>
    98a0:	c8 52       	subi	r28, 0x28	; 40
    98a2:	df 4f       	sbci	r29, 0xFF	; 255
    98a4:	0f b6       	in	r0, 0x3f	; 63
    98a6:	f8 94       	cli
    98a8:	de bf       	out	0x3e, r29	; 62
    98aa:	0f be       	out	0x3f, r0	; 63
    98ac:	cd bf       	out	0x3d, r28	; 61
    98ae:	df 91       	pop	r29
    98b0:	cf 91       	pop	r28
    98b2:	1f 91       	pop	r17
    98b4:	0f 91       	pop	r16
    98b6:	ff 90       	pop	r15
    98b8:	ef 90       	pop	r14
    98ba:	df 90       	pop	r13
    98bc:	cf 90       	pop	r12
    98be:	bf 90       	pop	r11
    98c0:	af 90       	pop	r10
    98c2:	08 95       	ret

000098c4 <md5_hmac_starts>:
    98c4:	8f 92       	push	r8
    98c6:	9f 92       	push	r9
    98c8:	af 92       	push	r10
    98ca:	bf 92       	push	r11
    98cc:	cf 92       	push	r12
    98ce:	df 92       	push	r13
    98d0:	ef 92       	push	r14
    98d2:	ff 92       	push	r15
    98d4:	0f 93       	push	r16
    98d6:	1f 93       	push	r17
    98d8:	cf 93       	push	r28
    98da:	df 93       	push	r29
    98dc:	cd b7       	in	r28, 0x3d	; 61
    98de:	de b7       	in	r29, 0x3e	; 62
    98e0:	60 97       	sbiw	r28, 0x10	; 16
    98e2:	0f b6       	in	r0, 0x3f	; 63
    98e4:	f8 94       	cli
    98e6:	de bf       	out	0x3e, r29	; 62
    98e8:	0f be       	out	0x3f, r0	; 63
    98ea:	cd bf       	out	0x3d, r28	; 61
    98ec:	8c 01       	movw	r16, r24
    98ee:	a6 2e       	mov	r10, r22
    98f0:	b7 2e       	mov	r11, r23
    98f2:	6a 01       	movw	r12, r20
    98f4:	41 34       	cpi	r20, 0x41	; 65
    98f6:	51 05       	cpc	r21, r1
    98f8:	0c f1       	brlt	.+66     	; 0x993c <md5_hmac_starts+0x78>
    98fa:	de 01       	movw	r26, r28
    98fc:	11 96       	adiw	r26, 0x01	; 1
    98fe:	4d 01       	movw	r8, r26
    9900:	ad 01       	movw	r20, r26
    9902:	b6 01       	movw	r22, r12
    9904:	8a 2d       	mov	r24, r10
    9906:	9b 2d       	mov	r25, r11
    9908:	a4 df       	rcall	.-184    	; 0x9852 <md5>
    990a:	78 01       	movw	r14, r16
    990c:	b8 e5       	ldi	r27, 0x58	; 88
    990e:	eb 0e       	add	r14, r27
    9910:	f1 1c       	adc	r15, r1
    9912:	40 e4       	ldi	r20, 0x40	; 64
    9914:	50 e0       	ldi	r21, 0x00	; 0
    9916:	66 e3       	ldi	r22, 0x36	; 54
    9918:	70 e0       	ldi	r23, 0x00	; 0
    991a:	c7 01       	movw	r24, r14
    991c:	e9 d1       	rcall	.+978    	; 0x9cf0 <memset>
    991e:	40 e4       	ldi	r20, 0x40	; 64
    9920:	50 e0       	ldi	r21, 0x00	; 0
    9922:	6c e5       	ldi	r22, 0x5C	; 92
    9924:	70 e0       	ldi	r23, 0x00	; 0
    9926:	c8 01       	movw	r24, r16
    9928:	88 56       	subi	r24, 0x68	; 104
    992a:	9f 4f       	sbci	r25, 0xFF	; 255
    992c:	e1 d1       	rcall	.+962    	; 0x9cf0 <memset>
    992e:	68 94       	set
    9930:	cc 24       	eor	r12, r12
    9932:	c4 f8       	bld	r12, 4
    9934:	d1 2c       	mov	r13, r1
    9936:	a8 2c       	mov	r10, r8
    9938:	b9 2c       	mov	r11, r9
    993a:	15 c0       	rjmp	.+42     	; 0x9966 <md5_hmac_starts+0xa2>
    993c:	78 01       	movw	r14, r16
    993e:	e8 e5       	ldi	r30, 0x58	; 88
    9940:	ee 0e       	add	r14, r30
    9942:	f1 1c       	adc	r15, r1
    9944:	40 e4       	ldi	r20, 0x40	; 64
    9946:	50 e0       	ldi	r21, 0x00	; 0
    9948:	66 e3       	ldi	r22, 0x36	; 54
    994a:	70 e0       	ldi	r23, 0x00	; 0
    994c:	c7 01       	movw	r24, r14
    994e:	d0 d1       	rcall	.+928    	; 0x9cf0 <memset>
    9950:	40 e4       	ldi	r20, 0x40	; 64
    9952:	50 e0       	ldi	r21, 0x00	; 0
    9954:	6c e5       	ldi	r22, 0x5C	; 92
    9956:	70 e0       	ldi	r23, 0x00	; 0
    9958:	c8 01       	movw	r24, r16
    995a:	88 56       	subi	r24, 0x68	; 104
    995c:	9f 4f       	sbci	r25, 0xFF	; 255
    995e:	c8 d1       	rcall	.+912    	; 0x9cf0 <memset>
    9960:	1c 14       	cp	r1, r12
    9962:	1d 04       	cpc	r1, r13
    9964:	f4 f4       	brge	.+60     	; 0x99a2 <md5_hmac_starts+0xde>
    9966:	a8 01       	movw	r20, r16
    9968:	48 5a       	subi	r20, 0xA8	; 168
    996a:	5f 4f       	sbci	r21, 0xFF	; 255
    996c:	8a 2c       	mov	r8, r10
    996e:	9b 2c       	mov	r9, r11
    9970:	d8 01       	movw	r26, r16
    9972:	a8 56       	subi	r26, 0x68	; 104
    9974:	bf 4f       	sbci	r27, 0xFF	; 255
    9976:	20 e0       	ldi	r18, 0x00	; 0
    9978:	30 e0       	ldi	r19, 0x00	; 0
    997a:	b4 01       	movw	r22, r8
    997c:	fa 01       	movw	r30, r20
    997e:	80 81       	ld	r24, Z
    9980:	f4 01       	movw	r30, r8
    9982:	91 91       	ld	r25, Z+
    9984:	4f 01       	movw	r8, r30
    9986:	98 27       	eor	r25, r24
    9988:	fa 01       	movw	r30, r20
    998a:	91 93       	st	Z+, r25
    998c:	af 01       	movw	r20, r30
    998e:	8c 91       	ld	r24, X
    9990:	fb 01       	movw	r30, r22
    9992:	90 81       	ld	r25, Z
    9994:	98 27       	eor	r25, r24
    9996:	9d 93       	st	X+, r25
    9998:	2f 5f       	subi	r18, 0xFF	; 255
    999a:	3f 4f       	sbci	r19, 0xFF	; 255
    999c:	2c 15       	cp	r18, r12
    999e:	3d 05       	cpc	r19, r13
    99a0:	64 f3       	brlt	.-40     	; 0x997a <md5_hmac_starts+0xb6>
    99a2:	c8 01       	movw	r24, r16
    99a4:	dd dd       	rcall	.-1094   	; 0x9560 <md5_starts>
    99a6:	40 e4       	ldi	r20, 0x40	; 64
    99a8:	50 e0       	ldi	r21, 0x00	; 0
    99aa:	b7 01       	movw	r22, r14
    99ac:	c8 01       	movw	r24, r16
    99ae:	02 de       	rcall	.-1020   	; 0x95b4 <md5_update>
    99b0:	fe 01       	movw	r30, r28
    99b2:	31 96       	adiw	r30, 0x01	; 1
    99b4:	80 e1       	ldi	r24, 0x10	; 16
    99b6:	df 01       	movw	r26, r30
    99b8:	1d 92       	st	X+, r1
    99ba:	8a 95       	dec	r24
    99bc:	e9 f7       	brne	.-6      	; 0x99b8 <md5_hmac_starts+0xf4>
    99be:	60 96       	adiw	r28, 0x10	; 16
    99c0:	0f b6       	in	r0, 0x3f	; 63
    99c2:	f8 94       	cli
    99c4:	de bf       	out	0x3e, r29	; 62
    99c6:	0f be       	out	0x3f, r0	; 63
    99c8:	cd bf       	out	0x3d, r28	; 61
    99ca:	df 91       	pop	r29
    99cc:	cf 91       	pop	r28
    99ce:	1f 91       	pop	r17
    99d0:	0f 91       	pop	r16
    99d2:	ff 90       	pop	r15
    99d4:	ef 90       	pop	r14
    99d6:	df 90       	pop	r13
    99d8:	cf 90       	pop	r12
    99da:	bf 90       	pop	r11
    99dc:	af 90       	pop	r10
    99de:	9f 90       	pop	r9
    99e0:	8f 90       	pop	r8
    99e2:	08 95       	ret

000099e4 <md5_hmac_finish>:
    99e4:	cf 92       	push	r12
    99e6:	df 92       	push	r13
    99e8:	ef 92       	push	r14
    99ea:	ff 92       	push	r15
    99ec:	0f 93       	push	r16
    99ee:	1f 93       	push	r17
    99f0:	cf 93       	push	r28
    99f2:	df 93       	push	r29
    99f4:	cd b7       	in	r28, 0x3d	; 61
    99f6:	de b7       	in	r29, 0x3e	; 62
    99f8:	60 97       	sbiw	r28, 0x10	; 16
    99fa:	0f b6       	in	r0, 0x3f	; 63
    99fc:	f8 94       	cli
    99fe:	de bf       	out	0x3e, r29	; 62
    9a00:	0f be       	out	0x3f, r0	; 63
    9a02:	cd bf       	out	0x3d, r28	; 61
    9a04:	8c 01       	movw	r16, r24
    9a06:	6b 01       	movw	r12, r22
    9a08:	ce 01       	movw	r24, r28
    9a0a:	01 96       	adiw	r24, 0x01	; 1
    9a0c:	7c 01       	movw	r14, r24
    9a0e:	bc 01       	movw	r22, r24
    9a10:	c8 01       	movw	r24, r16
    9a12:	5b de       	rcall	.-842    	; 0x96ca <md5_finish>
    9a14:	c8 01       	movw	r24, r16
    9a16:	a4 dd       	rcall	.-1208   	; 0x9560 <md5_starts>
    9a18:	b8 01       	movw	r22, r16
    9a1a:	68 56       	subi	r22, 0x68	; 104
    9a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a1e:	40 e4       	ldi	r20, 0x40	; 64
    9a20:	50 e0       	ldi	r21, 0x00	; 0
    9a22:	c8 01       	movw	r24, r16
    9a24:	c7 dd       	rcall	.-1138   	; 0x95b4 <md5_update>
    9a26:	40 e1       	ldi	r20, 0x10	; 16
    9a28:	50 e0       	ldi	r21, 0x00	; 0
    9a2a:	b7 01       	movw	r22, r14
    9a2c:	c8 01       	movw	r24, r16
    9a2e:	c2 dd       	rcall	.-1148   	; 0x95b4 <md5_update>
    9a30:	b6 01       	movw	r22, r12
    9a32:	c8 01       	movw	r24, r16
    9a34:	4a de       	rcall	.-876    	; 0x96ca <md5_finish>
    9a36:	80 e1       	ldi	r24, 0x10	; 16
    9a38:	f7 01       	movw	r30, r14
    9a3a:	11 92       	st	Z+, r1
    9a3c:	8a 95       	dec	r24
    9a3e:	e9 f7       	brne	.-6      	; 0x9a3a <md5_hmac_finish+0x56>
    9a40:	60 96       	adiw	r28, 0x10	; 16
    9a42:	0f b6       	in	r0, 0x3f	; 63
    9a44:	f8 94       	cli
    9a46:	de bf       	out	0x3e, r29	; 62
    9a48:	0f be       	out	0x3f, r0	; 63
    9a4a:	cd bf       	out	0x3d, r28	; 61
    9a4c:	df 91       	pop	r29
    9a4e:	cf 91       	pop	r28
    9a50:	1f 91       	pop	r17
    9a52:	0f 91       	pop	r16
    9a54:	ff 90       	pop	r15
    9a56:	ef 90       	pop	r14
    9a58:	df 90       	pop	r13
    9a5a:	cf 90       	pop	r12
    9a5c:	08 95       	ret

00009a5e <md5_hmac>:
 * output = HMAC-MD5( hmac key, input buffer )
 */
void md5_hmac( const unsigned char *key, int keylen,
               const unsigned char *input, int ilen,
               unsigned char output[16] )
{
    9a5e:	af 92       	push	r10
    9a60:	bf 92       	push	r11
    9a62:	cf 92       	push	r12
    9a64:	df 92       	push	r13
    9a66:	ef 92       	push	r14
    9a68:	ff 92       	push	r15
    9a6a:	0f 93       	push	r16
    9a6c:	1f 93       	push	r17
    9a6e:	cf 93       	push	r28
    9a70:	df 93       	push	r29
    9a72:	cd b7       	in	r28, 0x3d	; 61
    9a74:	de b7       	in	r29, 0x3e	; 62
    9a76:	c8 5d       	subi	r28, 0xD8	; 216
    9a78:	d1 09       	sbc	r29, r1
    9a7a:	0f b6       	in	r0, 0x3f	; 63
    9a7c:	f8 94       	cli
    9a7e:	de bf       	out	0x3e, r29	; 62
    9a80:	0f be       	out	0x3f, r0	; 63
    9a82:	cd bf       	out	0x3d, r28	; 61
    9a84:	6a 01       	movw	r12, r20
    9a86:	59 01       	movw	r10, r18
    md5_context ctx;

    md5_hmac_starts( &ctx, key, keylen );
    9a88:	ab 01       	movw	r20, r22
    9a8a:	bc 01       	movw	r22, r24
    9a8c:	ce 01       	movw	r24, r28
    9a8e:	01 96       	adiw	r24, 0x01	; 1
    9a90:	7c 01       	movw	r14, r24
    9a92:	18 df       	rcall	.-464    	; 0x98c4 <md5_hmac_starts>
/*
 * MD5 HMAC process buffer
 */
void md5_hmac_update( md5_context *ctx, const unsigned char *input, int ilen )
{
    md5_update( ctx, input, ilen );
    9a94:	a5 01       	movw	r20, r10
    9a96:	b6 01       	movw	r22, r12
    9a98:	c7 01       	movw	r24, r14
    9a9a:	8c dd       	rcall	.-1256   	; 0x95b4 <md5_update>
{
    md5_context ctx;

    md5_hmac_starts( &ctx, key, keylen );
    md5_hmac_update( &ctx, input, ilen );
    md5_hmac_finish( &ctx, output );
    9a9c:	b8 01       	movw	r22, r16
    9a9e:	c7 01       	movw	r24, r14
    9aa0:	a1 df       	rcall	.-190    	; 0x99e4 <md5_hmac_finish>

    memset( &ctx, 0, sizeof( md5_context ) );
    9aa2:	88 ed       	ldi	r24, 0xD8	; 216
    9aa4:	f7 01       	movw	r30, r14
    9aa6:	11 92       	st	Z+, r1
    9aa8:	8a 95       	dec	r24
    9aaa:	e9 f7       	brne	.-6      	; 0x9aa6 <md5_hmac+0x48>
}
    9aac:	c8 52       	subi	r28, 0x28	; 40
    9aae:	df 4f       	sbci	r29, 0xFF	; 255
    9ab0:	0f b6       	in	r0, 0x3f	; 63
    9ab2:	f8 94       	cli
    9ab4:	de bf       	out	0x3e, r29	; 62
    9ab6:	0f be       	out	0x3f, r0	; 63
    9ab8:	cd bf       	out	0x3d, r28	; 61
    9aba:	df 91       	pop	r29
    9abc:	cf 91       	pop	r28
    9abe:	1f 91       	pop	r17
    9ac0:	0f 91       	pop	r16
    9ac2:	ff 90       	pop	r15
    9ac4:	ef 90       	pop	r14
    9ac6:	df 90       	pop	r13
    9ac8:	cf 90       	pop	r12
    9aca:	bf 90       	pop	r11
    9acc:	af 90       	pop	r10
    9ace:	08 95       	ret

00009ad0 <pnesign>:

uint16_t pnesign(const unsigned char* data, uint16_t dataLen, const unsigned char* key, uint16_t keyLen)
{
    9ad0:	0f 93       	push	r16
    9ad2:	1f 93       	push	r17
    9ad4:	cf 93       	push	r28
    9ad6:	df 93       	push	r29
    9ad8:	cd b7       	in	r28, 0x3d	; 61
    9ada:	de b7       	in	r29, 0x3e	; 62
    9adc:	60 97       	sbiw	r28, 0x10	; 16
    9ade:	0f b6       	in	r0, 0x3f	; 63
    9ae0:	f8 94       	cli
    9ae2:	de bf       	out	0x3e, r29	; 62
    9ae4:	0f be       	out	0x3f, r0	; 63
    9ae6:	cd bf       	out	0x3d, r28	; 61
    9ae8:	fc 01       	movw	r30, r24
    9aea:	db 01       	movw	r26, r22
    9aec:	ca 01       	movw	r24, r20
    9aee:	b9 01       	movw	r22, r18
// 	}
	//int_to_ascii(keyLen);

	
		
	md5_hmac(key, keyLen, data, dataLen, tmpbuf);//md5_hmac(key, 6, data1, 80, tmpbuf);
    9af0:	8e 01       	movw	r16, r28
    9af2:	0f 5f       	subi	r16, 0xFF	; 255
    9af4:	1f 4f       	sbci	r17, 0xFF	; 255
    9af6:	9d 01       	movw	r18, r26
    9af8:	af 01       	movw	r20, r30
    9afa:	b1 df       	rcall	.-158    	; 0x9a5e <md5_hmac>
// 	{
// 		int_to_ascii(tmpbuf[i]);
// 	}
// 	send_usart_char("\r\n");
	
	sign = ((uint16_t*)tmpbuf)[0] ^ ((uint16_t*)tmpbuf)[1] ^ ((uint16_t*)tmpbuf)[2] ^ ((uint16_t*)tmpbuf)[3];
    9afc:	2b 81       	ldd	r18, Y+3	; 0x03
    9afe:	3c 81       	ldd	r19, Y+4	; 0x04
    9b00:	89 81       	ldd	r24, Y+1	; 0x01
    9b02:	9a 81       	ldd	r25, Y+2	; 0x02
    9b04:	82 27       	eor	r24, r18
    9b06:	93 27       	eor	r25, r19
    9b08:	2d 81       	ldd	r18, Y+5	; 0x05
    9b0a:	3e 81       	ldd	r19, Y+6	; 0x06
    9b0c:	82 27       	eor	r24, r18
    9b0e:	93 27       	eor	r25, r19
    9b10:	2f 81       	ldd	r18, Y+7	; 0x07
    9b12:	38 85       	ldd	r19, Y+8	; 0x08
	return sign;
}
    9b14:	82 27       	eor	r24, r18
    9b16:	93 27       	eor	r25, r19
    9b18:	60 96       	adiw	r28, 0x10	; 16
    9b1a:	0f b6       	in	r0, 0x3f	; 63
    9b1c:	f8 94       	cli
    9b1e:	de bf       	out	0x3e, r29	; 62
    9b20:	0f be       	out	0x3f, r0	; 63
    9b22:	cd bf       	out	0x3d, r28	; 61
    9b24:	df 91       	pop	r29
    9b26:	cf 91       	pop	r28
    9b28:	1f 91       	pop	r17
    9b2a:	0f 91       	pop	r16
    9b2c:	08 95       	ret

00009b2e <__divmodhi4>:
    9b2e:	97 fb       	bst	r25, 7
    9b30:	07 2e       	mov	r0, r23
    9b32:	16 f4       	brtc	.+4      	; 0x9b38 <__divmodhi4+0xa>
    9b34:	00 94       	com	r0
    9b36:	06 d0       	rcall	.+12     	; 0x9b44 <__divmodhi4_neg1>
    9b38:	77 fd       	sbrc	r23, 7
    9b3a:	08 d0       	rcall	.+16     	; 0x9b4c <__divmodhi4_neg2>
    9b3c:	50 d0       	rcall	.+160    	; 0x9bde <__udivmodhi4>
    9b3e:	07 fc       	sbrc	r0, 7
    9b40:	05 d0       	rcall	.+10     	; 0x9b4c <__divmodhi4_neg2>
    9b42:	3e f4       	brtc	.+14     	; 0x9b52 <__divmodhi4_exit>

00009b44 <__divmodhi4_neg1>:
    9b44:	90 95       	com	r25
    9b46:	81 95       	neg	r24
    9b48:	9f 4f       	sbci	r25, 0xFF	; 255
    9b4a:	08 95       	ret

00009b4c <__divmodhi4_neg2>:
    9b4c:	70 95       	com	r23
    9b4e:	61 95       	neg	r22
    9b50:	7f 4f       	sbci	r23, 0xFF	; 255

00009b52 <__divmodhi4_exit>:
    9b52:	08 95       	ret

00009b54 <__udivmodsi4>:
    9b54:	a1 e2       	ldi	r26, 0x21	; 33
    9b56:	1a 2e       	mov	r1, r26
    9b58:	aa 1b       	sub	r26, r26
    9b5a:	bb 1b       	sub	r27, r27
    9b5c:	fd 01       	movw	r30, r26
    9b5e:	0d c0       	rjmp	.+26     	; 0x9b7a <__udivmodsi4_ep>

00009b60 <__udivmodsi4_loop>:
    9b60:	aa 1f       	adc	r26, r26
    9b62:	bb 1f       	adc	r27, r27
    9b64:	ee 1f       	adc	r30, r30
    9b66:	ff 1f       	adc	r31, r31
    9b68:	a2 17       	cp	r26, r18
    9b6a:	b3 07       	cpc	r27, r19
    9b6c:	e4 07       	cpc	r30, r20
    9b6e:	f5 07       	cpc	r31, r21
    9b70:	20 f0       	brcs	.+8      	; 0x9b7a <__udivmodsi4_ep>
    9b72:	a2 1b       	sub	r26, r18
    9b74:	b3 0b       	sbc	r27, r19
    9b76:	e4 0b       	sbc	r30, r20
    9b78:	f5 0b       	sbc	r31, r21

00009b7a <__udivmodsi4_ep>:
    9b7a:	66 1f       	adc	r22, r22
    9b7c:	77 1f       	adc	r23, r23
    9b7e:	88 1f       	adc	r24, r24
    9b80:	99 1f       	adc	r25, r25
    9b82:	1a 94       	dec	r1
    9b84:	69 f7       	brne	.-38     	; 0x9b60 <__udivmodsi4_loop>
    9b86:	60 95       	com	r22
    9b88:	70 95       	com	r23
    9b8a:	80 95       	com	r24
    9b8c:	90 95       	com	r25
    9b8e:	9b 01       	movw	r18, r22
    9b90:	ac 01       	movw	r20, r24
    9b92:	bd 01       	movw	r22, r26
    9b94:	cf 01       	movw	r24, r30
    9b96:	08 95       	ret

00009b98 <__tablejump2__>:
    9b98:	ee 0f       	add	r30, r30
    9b9a:	ff 1f       	adc	r31, r31
    9b9c:	88 1f       	adc	r24, r24
    9b9e:	8b bf       	out	0x3b, r24	; 59
    9ba0:	07 90       	elpm	r0, Z+
    9ba2:	f6 91       	elpm	r31, Z
    9ba4:	e0 2d       	mov	r30, r0
    9ba6:	19 94       	eijmp

00009ba8 <__umulhisi3>:
    9ba8:	a2 9f       	mul	r26, r18
    9baa:	b0 01       	movw	r22, r0
    9bac:	b3 9f       	mul	r27, r19
    9bae:	c0 01       	movw	r24, r0
    9bb0:	a3 9f       	mul	r26, r19
    9bb2:	70 0d       	add	r23, r0
    9bb4:	81 1d       	adc	r24, r1
    9bb6:	11 24       	eor	r1, r1
    9bb8:	91 1d       	adc	r25, r1
    9bba:	b2 9f       	mul	r27, r18
    9bbc:	70 0d       	add	r23, r0
    9bbe:	81 1d       	adc	r24, r1
    9bc0:	11 24       	eor	r1, r1
    9bc2:	91 1d       	adc	r25, r1
    9bc4:	08 95       	ret

00009bc6 <__usmulhisi3>:
    9bc6:	f0 df       	rcall	.-32     	; 0x9ba8 <__umulhisi3>

00009bc8 <__usmulhisi3_tail>:
    9bc8:	b7 ff       	sbrs	r27, 7
    9bca:	08 95       	ret
    9bcc:	82 1b       	sub	r24, r18
    9bce:	93 0b       	sbc	r25, r19
    9bd0:	08 95       	ret

00009bd2 <__mulshisi3>:
    9bd2:	b7 ff       	sbrs	r27, 7
    9bd4:	18 c0       	rjmp	.+48     	; 0x9c06 <__muluhisi3>

00009bd6 <__mulohisi3>:
    9bd6:	17 d0       	rcall	.+46     	; 0x9c06 <__muluhisi3>
    9bd8:	82 1b       	sub	r24, r18
    9bda:	93 0b       	sbc	r25, r19
    9bdc:	08 95       	ret

00009bde <__udivmodhi4>:
    9bde:	aa 1b       	sub	r26, r26
    9be0:	bb 1b       	sub	r27, r27
    9be2:	51 e1       	ldi	r21, 0x11	; 17
    9be4:	07 c0       	rjmp	.+14     	; 0x9bf4 <__udivmodhi4_ep>

00009be6 <__udivmodhi4_loop>:
    9be6:	aa 1f       	adc	r26, r26
    9be8:	bb 1f       	adc	r27, r27
    9bea:	a6 17       	cp	r26, r22
    9bec:	b7 07       	cpc	r27, r23
    9bee:	10 f0       	brcs	.+4      	; 0x9bf4 <__udivmodhi4_ep>
    9bf0:	a6 1b       	sub	r26, r22
    9bf2:	b7 0b       	sbc	r27, r23

00009bf4 <__udivmodhi4_ep>:
    9bf4:	88 1f       	adc	r24, r24
    9bf6:	99 1f       	adc	r25, r25
    9bf8:	5a 95       	dec	r21
    9bfa:	a9 f7       	brne	.-22     	; 0x9be6 <__udivmodhi4_loop>
    9bfc:	80 95       	com	r24
    9bfe:	90 95       	com	r25
    9c00:	bc 01       	movw	r22, r24
    9c02:	cd 01       	movw	r24, r26
    9c04:	08 95       	ret

00009c06 <__muluhisi3>:
    9c06:	d0 df       	rcall	.-96     	; 0x9ba8 <__umulhisi3>
    9c08:	a5 9f       	mul	r26, r21
    9c0a:	90 0d       	add	r25, r0
    9c0c:	b4 9f       	mul	r27, r20
    9c0e:	90 0d       	add	r25, r0
    9c10:	a4 9f       	mul	r26, r20
    9c12:	80 0d       	add	r24, r0
    9c14:	91 1d       	adc	r25, r1
    9c16:	11 24       	eor	r1, r1
    9c18:	08 95       	ret

00009c1a <do_rand>:
    9c1a:	8f 92       	push	r8
    9c1c:	9f 92       	push	r9
    9c1e:	af 92       	push	r10
    9c20:	bf 92       	push	r11
    9c22:	cf 92       	push	r12
    9c24:	df 92       	push	r13
    9c26:	ef 92       	push	r14
    9c28:	ff 92       	push	r15
    9c2a:	cf 93       	push	r28
    9c2c:	df 93       	push	r29
    9c2e:	ec 01       	movw	r28, r24
    9c30:	68 81       	ld	r22, Y
    9c32:	79 81       	ldd	r23, Y+1	; 0x01
    9c34:	8a 81       	ldd	r24, Y+2	; 0x02
    9c36:	9b 81       	ldd	r25, Y+3	; 0x03
    9c38:	61 15       	cp	r22, r1
    9c3a:	71 05       	cpc	r23, r1
    9c3c:	81 05       	cpc	r24, r1
    9c3e:	91 05       	cpc	r25, r1
    9c40:	21 f4       	brne	.+8      	; 0x9c4a <do_rand+0x30>
    9c42:	64 e2       	ldi	r22, 0x24	; 36
    9c44:	79 ed       	ldi	r23, 0xD9	; 217
    9c46:	8b e5       	ldi	r24, 0x5B	; 91
    9c48:	97 e0       	ldi	r25, 0x07	; 7
    9c4a:	2d e1       	ldi	r18, 0x1D	; 29
    9c4c:	33 ef       	ldi	r19, 0xF3	; 243
    9c4e:	41 e0       	ldi	r20, 0x01	; 1
    9c50:	50 e0       	ldi	r21, 0x00	; 0
    9c52:	55 d0       	rcall	.+170    	; 0x9cfe <__divmodsi4>
    9c54:	49 01       	movw	r8, r18
    9c56:	5a 01       	movw	r10, r20
    9c58:	9b 01       	movw	r18, r22
    9c5a:	ac 01       	movw	r20, r24
    9c5c:	a7 ea       	ldi	r26, 0xA7	; 167
    9c5e:	b1 e4       	ldi	r27, 0x41	; 65
    9c60:	d2 df       	rcall	.-92     	; 0x9c06 <__muluhisi3>
    9c62:	6b 01       	movw	r12, r22
    9c64:	7c 01       	movw	r14, r24
    9c66:	ac ee       	ldi	r26, 0xEC	; 236
    9c68:	b4 ef       	ldi	r27, 0xF4	; 244
    9c6a:	a5 01       	movw	r20, r10
    9c6c:	94 01       	movw	r18, r8
    9c6e:	b3 df       	rcall	.-154    	; 0x9bd6 <__mulohisi3>
    9c70:	dc 01       	movw	r26, r24
    9c72:	cb 01       	movw	r24, r22
    9c74:	8c 0d       	add	r24, r12
    9c76:	9d 1d       	adc	r25, r13
    9c78:	ae 1d       	adc	r26, r14
    9c7a:	bf 1d       	adc	r27, r15
    9c7c:	b7 ff       	sbrs	r27, 7
    9c7e:	03 c0       	rjmp	.+6      	; 0x9c86 <do_rand+0x6c>
    9c80:	01 97       	sbiw	r24, 0x01	; 1
    9c82:	a1 09       	sbc	r26, r1
    9c84:	b0 48       	sbci	r27, 0x80	; 128
    9c86:	88 83       	st	Y, r24
    9c88:	99 83       	std	Y+1, r25	; 0x01
    9c8a:	aa 83       	std	Y+2, r26	; 0x02
    9c8c:	bb 83       	std	Y+3, r27	; 0x03
    9c8e:	9f 77       	andi	r25, 0x7F	; 127
    9c90:	df 91       	pop	r29
    9c92:	cf 91       	pop	r28
    9c94:	ff 90       	pop	r15
    9c96:	ef 90       	pop	r14
    9c98:	df 90       	pop	r13
    9c9a:	cf 90       	pop	r12
    9c9c:	bf 90       	pop	r11
    9c9e:	af 90       	pop	r10
    9ca0:	9f 90       	pop	r9
    9ca2:	8f 90       	pop	r8
    9ca4:	08 95       	ret

00009ca6 <rand_r>:
    9ca6:	b9 cf       	rjmp	.-142    	; 0x9c1a <do_rand>

00009ca8 <rand>:
    9ca8:	80 e0       	ldi	r24, 0x00	; 0
    9caa:	92 e0       	ldi	r25, 0x02	; 2
    9cac:	b6 cf       	rjmp	.-148    	; 0x9c1a <do_rand>

00009cae <srand>:
    9cae:	a0 e0       	ldi	r26, 0x00	; 0
    9cb0:	b0 e0       	ldi	r27, 0x00	; 0
    9cb2:	80 93 00 02 	sts	0x0200, r24
    9cb6:	90 93 01 02 	sts	0x0201, r25
    9cba:	a0 93 02 02 	sts	0x0202, r26
    9cbe:	b0 93 03 02 	sts	0x0203, r27
    9cc2:	08 95       	ret

00009cc4 <memcmp>:
    9cc4:	fb 01       	movw	r30, r22
    9cc6:	dc 01       	movw	r26, r24
    9cc8:	04 c0       	rjmp	.+8      	; 0x9cd2 <memcmp+0xe>
    9cca:	8d 91       	ld	r24, X+
    9ccc:	01 90       	ld	r0, Z+
    9cce:	80 19       	sub	r24, r0
    9cd0:	21 f4       	brne	.+8      	; 0x9cda <memcmp+0x16>
    9cd2:	41 50       	subi	r20, 0x01	; 1
    9cd4:	50 40       	sbci	r21, 0x00	; 0
    9cd6:	c8 f7       	brcc	.-14     	; 0x9cca <memcmp+0x6>
    9cd8:	88 1b       	sub	r24, r24
    9cda:	99 0b       	sbc	r25, r25
    9cdc:	08 95       	ret

00009cde <memcpy>:
    9cde:	fb 01       	movw	r30, r22
    9ce0:	dc 01       	movw	r26, r24
    9ce2:	02 c0       	rjmp	.+4      	; 0x9ce8 <memcpy+0xa>
    9ce4:	01 90       	ld	r0, Z+
    9ce6:	0d 92       	st	X+, r0
    9ce8:	41 50       	subi	r20, 0x01	; 1
    9cea:	50 40       	sbci	r21, 0x00	; 0
    9cec:	d8 f7       	brcc	.-10     	; 0x9ce4 <memcpy+0x6>
    9cee:	08 95       	ret

00009cf0 <memset>:
    9cf0:	dc 01       	movw	r26, r24
    9cf2:	01 c0       	rjmp	.+2      	; 0x9cf6 <memset+0x6>
    9cf4:	6d 93       	st	X+, r22
    9cf6:	41 50       	subi	r20, 0x01	; 1
    9cf8:	50 40       	sbci	r21, 0x00	; 0
    9cfa:	e0 f7       	brcc	.-8      	; 0x9cf4 <memset+0x4>
    9cfc:	08 95       	ret

00009cfe <__divmodsi4>:
    9cfe:	05 2e       	mov	r0, r21
    9d00:	97 fb       	bst	r25, 7
    9d02:	16 f4       	brtc	.+4      	; 0x9d08 <__divmodsi4+0xa>
    9d04:	00 94       	com	r0
    9d06:	0f d0       	rcall	.+30     	; 0x9d26 <__negsi2>
    9d08:	57 fd       	sbrc	r21, 7
    9d0a:	05 d0       	rcall	.+10     	; 0x9d16 <__divmodsi4_neg2>
    9d0c:	23 df       	rcall	.-442    	; 0x9b54 <__udivmodsi4>
    9d0e:	07 fc       	sbrc	r0, 7
    9d10:	02 d0       	rcall	.+4      	; 0x9d16 <__divmodsi4_neg2>
    9d12:	46 f4       	brtc	.+16     	; 0x9d24 <__divmodsi4_exit>
    9d14:	08 c0       	rjmp	.+16     	; 0x9d26 <__negsi2>

00009d16 <__divmodsi4_neg2>:
    9d16:	50 95       	com	r21
    9d18:	40 95       	com	r20
    9d1a:	30 95       	com	r19
    9d1c:	21 95       	neg	r18
    9d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    9d20:	4f 4f       	sbci	r20, 0xFF	; 255
    9d22:	5f 4f       	sbci	r21, 0xFF	; 255

00009d24 <__divmodsi4_exit>:
    9d24:	08 95       	ret

00009d26 <__negsi2>:
    9d26:	90 95       	com	r25
    9d28:	80 95       	com	r24
    9d2a:	70 95       	com	r23
    9d2c:	61 95       	neg	r22
    9d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    9d30:	8f 4f       	sbci	r24, 0xFF	; 255
    9d32:	9f 4f       	sbci	r25, 0xFF	; 255
    9d34:	08 95       	ret

00009d36 <_exit>:
    9d36:	f8 94       	cli

00009d38 <__stop_program>:
    9d38:	ff cf       	rjmp	.-2      	; 0x9d38 <__stop_program>
